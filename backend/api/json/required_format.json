[
    {
        "Title": "Two Sum",
        "slug": "two-sum",
        "description": "Given an array of integers `nums`\u00a0and an integer `target`, return *indices of the two numbers such that they add up to `target`*.\n\n\nYou may assume that each input would have ***exactly* one solution**, and you may not use the *same* element twice.\n\n\nYou can return the answer in any order.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** nums = [2,7,11,15], target = 9",
                "Output": "** [0,1]",
                "Explanation": "** Because nums[0] + nums[1] == 9, we return [0, 1]."
            },
            {
                "Input": "** nums = [3,2,4], target = 6",
                "Output": "** [1,2]",
                "Explanation": null
            },
            {
                "Input": "** nums = [3,3], target = 6",
                "Output": "** [0,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Add Two Numbers",
        "slug": "add-two-numbers",
        "description": "You are given two **non-empty** linked lists representing two non-negative integers. The digits are stored in **reverse order**, and each of their nodes contains a single digit. Add the two numbers and return the sum\u00a0as a linked list.\n\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Math",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** l1 = [2,4,3], l2 = [5,6,4]",
                "Output": "** [7,0,8]",
                "Explanation": "** 342 + 465 = 807."
            }
        ]
    },
    {
        "Title": "Longest Substring Without Repeating Characters",
        "slug": "longest-substring-without-repeating-characters",
        "description": "Given a string `s`, find the length of the **longest** **substring** without repeating characters.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** s = \"abcabcbb\"",
                "Output": "** 3",
                "Explanation": "** The answer is \"abc\", with the length of 3."
            },
            {
                "Input": "** s = \"bbbbb\"",
                "Output": "** 1",
                "Explanation": "** The answer is \"b\", with the length of 1."
            },
            {
                "Input": "** s = \"pwwkew\"",
                "Output": "** 3",
                "Explanation": "** The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring."
            }
        ]
    },
    {
        "Title": "Median of Two Sorted Arrays",
        "slug": "median-of-two-sorted-arrays",
        "description": "Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return **the median** of the two sorted arrays.\n\n\nThe overall run time complexity should be `O(log (m+n))`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Divide and Conquer"
        ],
        "examples": [
            {
                "Input": "** nums1 = [1,3], nums2 = [2]",
                "Output": "** 2.00000",
                "Explanation": "** merged array = [1,2,3] and median is 2."
            },
            {
                "Input": "** nums1 = [1,2], nums2 = [3,4]",
                "Output": "** 2.50000",
                "Explanation": "** merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5."
            }
        ]
    },
    {
        "Title": "Longest Palindromic Substring",
        "slug": "longest-palindromic-substring",
        "description": "Given a string `s`, return *the longest* *palindromic* *substring* in `s`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Two Pointers",
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"babad\"",
                "Output": "** \"bab\"",
                "Explanation": "** \"aba\" is also a valid answer."
            },
            {
                "Input": "** s = \"cbbd\"",
                "Output": "** \"bb\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Zigzag Conversion",
        "slug": "zigzag-conversion",
        "description": "The string `\"PAYPALISHIRING\"` is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n\n\n\n```\n\nP   A   H   N\nA P L S I I G\nY   I   R\n\n```\n\nAnd then read line by line: `\"PAHNAPLSIIGYIR\"`\n\n\nWrite the code that will take a string and make this conversion given a number of rows:\n\n\n\n```\n\nstring convert(string s, int numRows);\n\n```\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"PAYPALISHIRING\", numRows = 3",
                "Output": "** \"PAHNAPLSIIGYIR\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"PAYPALISHIRING\", numRows = 4",
                "Output": "** \"PINALSIGYAHRPI\"",
                "Explanation": "**\nP     I    N\nA   L S  I G\nY A   H R\nP     I"
            },
            {
                "Input": "** s = \"A\", numRows = 1",
                "Output": "** \"A\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reverse Integer",
        "slug": "reverse-integer",
        "description": "Given a signed 32-bit integer `x`, return `x` *with its digits reversed*. If reversing `x` causes the value to go outside the signed 32-bit integer range `[-231, 231 - 1]`, then return `0`.\n\n\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** x = 123",
                "Output": "** 321",
                "Explanation": null
            },
            {
                "Input": "** x = -123",
                "Output": "** -321",
                "Explanation": null
            },
            {
                "Input": "** x = 120",
                "Output": "** 21",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "String to Integer (atoi)",
        "slug": "string-to-integer-atoi",
        "description": "Implement the `myAtoi(string s)` function, which converts a string to a 32-bit signed integer.\n\n\nThe algorithm for `myAtoi(string s)` is as follows:\n\n\n1. **Whitespace**: Ignore any leading whitespace (`\" \"`).\n2. **Signedness**: Determine the sign by checking if the next character is `'-'` or `'+'`, assuming positivity is neither present.\n3. **Conversion**: Read the integer by skipping leading zeros\u00a0until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.\n4. **Rounding**: If the integer is out of the 32-bit signed integer range `[-231, 231 - 1]`, then round the integer to remain in the range. Specifically, integers less than `-231` should be rounded to `-231`, and integers greater than `231 - 1` should be rounded to `231 - 1`.\n\n\nReturn the integer as the final result.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"42\"",
                "Output": "** 42",
                "Explanation": "**\n\n\n\n```\n\nThe underlined characters are what is read in and the caret is the current reader position.\nStep 1: \"42\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"42\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"42\" (\"42\" is read in)\n           ^\n\n```"
            },
            {
                "Input": "** s = \" -042\"",
                "Output": "** -42",
                "Explanation": "**\n\n\n\n```\n\nStep 1: \" -042\" (leading whitespace is read and ignored)\n            ^\nStep 2: \"   -042\" ('-' is read, so the result should be negative)\n             ^\nStep 3: \"   -042\" (\"042\" is read in, leading zeros ignored in the result)\n               ^\n\n```"
            },
            {
                "Input": "** s = \"1337c0d3\"",
                "Output": "** 1337",
                "Explanation": "**\n\n\n\n```\n\nStep 1: \"1337c0d3\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"1337c0d3\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"1337c0d3\" (\"1337\" is read in; reading stops because the next character is a non-digit)\n             ^\n\n```"
            },
            {
                "Input": "** s = \"0-1\"",
                "Output": "** 0",
                "Explanation": "**\n\n\n\n```\n\nStep 1: \"0-1\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"0-1\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"0-1\" (\"0\" is read in; reading stops because the next character is a non-digit)\n          ^\n\n```"
            },
            {
                "Input": "** s = \"words and 987\"",
                "Output": "** 0",
                "Explanation": "**\n\n\nReading stops at the first non-digit character 'w'.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= s.length <= 200`\n* `s` consists of English letters (lower-case and upper-case), digits (`0-9`), `' '`, `'+'`, `'-'`, and `'.'`.\n\n\nSimilarQuestions: [7, 65, 2042]"
            }
        ]
    },
    {
        "Title": "Palindrome Number",
        "slug": "palindrome-number",
        "description": "Given an integer `x`, return `true` *if* `x` *is a* ***palindrome****, and* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** x = 121",
                "Output": "** true",
                "Explanation": "** 121 reads as 121 from left to right and from right to left."
            },
            {
                "Input": "** x = -121",
                "Output": "** false",
                "Explanation": "** From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome."
            },
            {
                "Input": "** x = 10",
                "Output": "** false",
                "Explanation": "** Reads 01 from right to left. Therefore it is not a palindrome."
            }
        ]
    },
    {
        "Title": "Regular Expression Matching",
        "slug": "regular-expression-matching",
        "description": "Given an input string `s`\u00a0and a pattern `p`, implement regular expression matching with support for `'.'` and `'*'` where:\n\n\n `'.'` Matches any single character.\u200b\u200b\u200b\u200b\n `'*'` Matches zero or more of the preceding element.\n\n\nThe matching should cover the **entire** input string (not partial).\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** s = \"aa\", p = \"a\"",
                "Output": "** false",
                "Explanation": "** \"a\" does not match the entire string \"aa\"."
            },
            {
                "Input": "** s = \"aa\", p = \"a*\"",
                "Output": "** true",
                "Explanation": "** '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\"."
            },
            {
                "Input": "** s = \"ab\", p = \".*\"",
                "Output": "** true",
                "Explanation": "** \".*\" means \"zero or more (*) of any character (.)\"."
            }
        ]
    },
    {
        "Title": "Container With Most Water",
        "slug": "container-with-most-water",
        "description": "You are given an integer array `height` of length `n`. There are `n` vertical lines drawn such that the two endpoints of the `ith` line are `(i, 0)` and `(i, height[i])`.\n\n\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\n\n\nReturn *the maximum amount of water a container can store*.\n\n\nNotice** that you may not slant the container.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** height = [1,8,6,2,5,4,8,3,7]",
                "Output": "** 49",
                "Explanation": "** The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49."
            }
        ]
    },
    {
        "Title": "Integer to Roman",
        "slug": "integer-to-roman",
        "description": "Seven different symbols represent Roman numerals with the following values:\n\n\n\n\n| Symbol | Value |\n| --- | --- |\n| I | 1 |\n| V | 5 |\n| X | 10 |\n| L | 50 |\n| C | 100 |\n| D | 500 |\n| M | 1000 |\n\n\nRoman numerals are formed by appending\u00a0the conversions of\u00a0decimal place values\u00a0from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:\n\n\n If the value does not start with 4 or\u00a09, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral.\n If the value starts with 4 or 9 use the\u00a0**subtractive form**\u00a0representing\u00a0one symbol subtracted from the following symbol, for example,\u00a04 is 1 (`I`) less than 5 (`V`): `IV`\u00a0and 9 is 1 (`I`) less than 10 (`X`): `IX`.\u00a0Only the following subtractive forms are used: 4 (`IV`), 9 (`IX`),\u00a040 (`XL`), 90 (`XC`), 400 (`CD`) and 900 (`CM`).\n Only powers of 10 (`I`, `X`, `C`, `M`) can be appended consecutively at most 3 times to represent multiples of 10. You cannot append 5\u00a0(`V`), 50 (`L`), or 500 (`D`) multiple times. If you need to append a symbol\u00a04 times\u00a0use the **subtractive form**.\n\n\nGiven an integer, convert it to a Roman numeral.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Math",
            "String"
        ],
        "examples": [
            {
                "Input": "** num = 3749",
                "Output": "** \"MMMDCCXLIX\"",
                "Explanation": "**\n\n\n\n```\n\n3000 = MMM as 1000 (M) + 1000 (M) + 1000 (M)\n 700 = DCC as 500 (D) + 100 (C) + 100 (C)\n  40 = XL as 10 (X) less of 50 (L)\n   9 = IX as 1 (I) less of 10 (X)\nNote: 49 is not 1 (I) less of 50 (L) because the conversion is based on decimal places\n\n```"
            },
            {
                "Input": "** num = 58",
                "Output": "** \"LVIII\"",
                "Explanation": "**\n\n\n\n```\n\n50 = L\n 8 = VIII\n\n```"
            },
            {
                "Input": "** num = 1994",
                "Output": "** \"MCMXCIV\"",
                "Explanation": "**\n\n\n\n```\n\n1000 = M\n 900 = CM\n  90 = XC\n   4 = IV\n\n```\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num <= 3999`\n\n\nSimilarQuestions: [13, 273]"
            }
        ]
    },
    {
        "Title": "Roman to Integer",
        "slug": "roman-to-integer",
        "description": "Roman numerals are represented by seven different symbols:\u00a0`I`, `V`, `X`, `L`, `C`, `D` and `M`.\n\n\n\n```\n\nSymbol**       **Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n```\n\nFor example,\u00a0`2` is written as `II`\u00a0in Roman numeral, just two ones added together. `12` is written as\u00a0`XII`, which is simply `X + II`. The number `27` is written as `XXVII`, which is `XX + V + II`.\n\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:\n\n\n `I` can be placed before `V` (5) and `X` (10) to make 4 and 9.\n `X` can be placed before `L` (50) and `C` (100) to make 40 and 90.\n `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.\n\n\nGiven a roman numeral, convert it to an integer.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "Math",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"III\"",
                "Output": "** 3",
                "Explanation": "** III = 3."
            },
            {
                "Input": "** s = \"LVIII\"",
                "Output": "** 58",
                "Explanation": "** L = 50, V= 5, III = 3."
            },
            {
                "Input": "** s = \"MCMXCIV\"",
                "Output": "** 1994",
                "Explanation": "** M = 1000, CM = 900, XC = 90 and IV = 4."
            }
        ]
    },
    {
        "Title": "Longest Common Prefix",
        "slug": "longest-common-prefix",
        "description": "Write a function to find the longest common prefix string amongst an array of strings.\n\n\nIf there is no common prefix, return an empty string `\"\"`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Trie"
        ],
        "examples": [
            {
                "Input": "** strs = [\"flower\",\"flow\",\"flight\"]",
                "Output": "** \"fl\"",
                "Explanation": null
            },
            {
                "Input": "** strs = [\"dog\",\"racecar\",\"car\"]",
                "Output": "** \"\"",
                "Explanation": "** There is no common prefix among the input strings."
            }
        ]
    },
    {
        "Title": "3Sum",
        "slug": "3sum",
        "description": "Given an integer array nums, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`.\n\n\nNotice that the solution set must not contain duplicate triplets.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [-1,0,1,2,-1,-4]",
                "Output": "** [[-1,-1,2],[-1,0,1]]",
                "Explanation": "** \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter."
            },
            {
                "Input": "** nums = [0,1,1]",
                "Output": "** []",
                "Explanation": "** The only possible triplet does not sum up to 0."
            },
            {
                "Input": "** nums = [0,0,0]",
                "Output": "** [[0,0,0]]",
                "Explanation": "** The only possible triplet sums up to 0."
            }
        ]
    },
    {
        "Title": "3Sum Closest",
        "slug": "3sum-closest",
        "description": "Given an integer array `nums` of length `n` and an integer `target`, find three integers in `nums` such that the sum is closest to `target`.\n\n\nReturn *the sum of the three integers*.\n\n\nYou may assume that each input would have exactly one solution.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [-1,2,1,-4], target = 1",
                "Output": "** 2",
                "Explanation": "** The sum that is closest to the target is 2. (-1 + 2 + 1 = 2)."
            },
            {
                "Input": "** nums = [0,0,0], target = 1",
                "Output": "** 0",
                "Explanation": "** The sum that is closest to the target is 0. (0 + 0 + 0 = 0)."
            }
        ]
    },
    {
        "Title": "Letter Combinations of a Phone Number",
        "slug": "letter-combinations-of-a-phone-number",
        "description": "Given a string containing digits from `2-9` inclusive, return all possible letter combinations that the number could represent. Return the answer in **any order**.\n\n\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n\n\n![](https://assets.leetcode.com/uploads/2022/03/15/1200px-telephone-keypad2svg.png)\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** digits = \"23\"",
                "Output": "** [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]",
                "Explanation": null
            },
            {
                "Input": "** digits = \"\"",
                "Output": "** []",
                "Explanation": null
            },
            {
                "Input": "** digits = \"2\"",
                "Output": "** [\"a\",\"b\",\"c\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "4Sum",
        "slug": "4sum",
        "description": "Given an array `nums` of `n` integers, return *an array of all the **unique** quadruplets* `[nums[a], nums[b], nums[c], nums[d]]` such that:\n\n\n `0 <= a, b, c, d\u00a0< n`\n `a`, `b`, `c`, and `d` are **distinct**.\n `nums[a] + nums[b] + nums[c] + nums[d] == target`\n\n\nYou may return the answer in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,0,-1,0,-2,2], target = 0",
                "Output": "** [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]",
                "Explanation": null
            },
            {
                "Input": "** nums = [2,2,2,2,2], target = 8",
                "Output": "** [[2,2,2,2]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove Nth Node From End of List",
        "slug": "remove-nth-node-from-end-of-list",
        "description": "Given the `head` of a linked list, remove the `nth` node from the end of the list and return its head.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** head = [1,2,3,4,5], n = 2",
                "Output": "** [1,2,3,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Valid Parentheses",
        "slug": "valid-parentheses",
        "description": "Given a string `s` containing just the characters `'('`, `')'`, `'{'`, `'}'`, `'['` and `']'`, determine if the input string is valid.\n\n\nAn input string is valid if:\n\n\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.\n3. Every close bracket has a corresponding open bracket of the same type.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** s = \"()\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"()[]{}\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"(]\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Merge Two Sorted Lists",
        "slug": "merge-two-sorted-lists",
        "description": "You are given the heads of two sorted linked lists `list1` and `list2`.\n\n\nMerge the two lists into one **sorted** list. The list should be made by splicing together the nodes of the first two lists.\n\n\nReturn *the head of the merged linked list*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Linked List",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** list1 = [1,2,4], list2 = [1,3,4]",
                "Output": "** [1,1,2,3,4,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Generate Parentheses",
        "slug": "generate-parentheses",
        "description": "Given `n` pairs of parentheses, write a function to *generate all combinations of well-formed parentheses*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]",
                "Explanation": null
            },
            {
                "Input": "** n = 1",
                "Output": "** [\"()\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Merge k Sorted Lists",
        "slug": "merge-k-sorted-lists",
        "description": "You are given an array of `k` linked-lists `lists`, each linked-list is sorted in ascending order.\n\n\nMerge all the linked-lists into one sorted linked-list and return it.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Linked List",
            "Divide and Conquer",
            "Heap (Priority Queue)",
            "Merge Sort"
        ],
        "examples": [
            {
                "Input": "** lists = [[1,4,5],[1,3,4],[2,6]]",
                "Output": "** [1,1,2,3,4,4,5,6]",
                "Explanation": "** The linked-lists are:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\nmerging them into one sorted list:\n1->1->2->3->4->4->5->6"
            },
            {
                "Input": "** lists = []",
                "Output": "** []",
                "Explanation": null
            },
            {
                "Input": "** lists = [[]]",
                "Output": "** []",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Swap Nodes in Pairs",
        "slug": "swap-nodes-in-pairs",
        "description": "Given a\u00a0linked list, swap every two adjacent nodes and return its head. You must solve the problem without\u00a0modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** head = [1,2,3,4]",
                "Output": "** [2,1,4,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reverse Nodes in k-Group",
        "slug": "reverse-nodes-in-k-group",
        "description": "Given the `head` of a linked list, reverse the nodes of the list `k` at a time, and return *the modified list*.\n\n\n`k` is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of `k` then left-out nodes, in the end, should remain as it is.\n\n\nYou may not alter the values in the list's nodes, only nodes themselves may be changed.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Linked List",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** head = [1,2,3,4,5], k = 2",
                "Output": "** [2,1,4,3,5]",
                "Explanation": null
            },
            {
                "Input": "** head = [1,2,3,4,5], k = 3",
                "Output": "** [3,2,1,4,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove Duplicates from Sorted Array",
        "slug": "remove-duplicates-from-sorted-array",
        "description": "Given an integer array `nums` sorted in **non-decreasing order**, remove the duplicates [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm) such that each unique element appears only **once**. The **relative order** of the elements should be kept the **same**. Then return *the number of unique elements in* `nums`.\n\n\nConsider the number of unique elements of `nums` to be `k`, to get accepted, you need to do the following things:\n\n\n Change the array `nums` such that the first `k` elements of `nums` contain the unique elements in the order they were present in `nums` initially. The remaining elements of `nums` are not important as well as the size of `nums`.\n Return `k`.\n\n\nCustom Judge:\n\n\nThe judge will test your solution with the following code:\n\n\n\n```\n\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n\n```\n\nIf all assertions pass, then your solution will be **accepted**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** nums = [1,1,2]",
                "Output": "** 2, nums = [1,2,_]",
                "Explanation": "** Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
            },
            {
                "Input": "** nums = [0,0,1,1,1,2,2,3,3,4]",
                "Output": "** 5, nums = [0,1,2,3,4,_,_,_,_,_]",
                "Explanation": "** Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
            }
        ]
    },
    {
        "Title": "Remove Element",
        "slug": "remove-element",
        "description": "Given an integer array `nums` and an integer `val`, remove all occurrences of `val` in `nums` [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm). The order of the elements may be changed. Then return *the number of elements in* `nums` *which are not equal to* `val`.\n\n\nConsider the number of elements in `nums` which are not equal to `val` be `k`, to get accepted, you need to do the following things:\n\n\n Change the array `nums` such that the first `k` elements of `nums` contain the elements which are not equal to `val`. The remaining elements of `nums` are not important as well as the size of `nums`.\n Return `k`.\n\n\nCustom Judge:\n\n\nThe judge will test your solution with the following code:\n\n\n\n```\n\nint[] nums = [...]; // Input array\nint val = ...; // Value to remove\nint[] expectedNums = [...]; // The expected answer with correct length.\n                            // It is sorted with no values equaling val.\n\nint k = removeElement(nums, val); // Calls your implementation\n\nassert k == expectedNums.length;\nsort(nums, 0, k); // Sort the first k elements of nums\nfor (int i = 0; i < actualLength; i++) {\n    assert nums[i] == expectedNums[i];\n}\n\n```\n\nIf all assertions pass, then your solution will be **accepted**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** nums = [3,2,2,3], val = 3",
                "Output": "** 2, nums = [2,2,_,_]",
                "Explanation": "** Your function should return k = 2, with the first two elements of nums being 2.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
            },
            {
                "Input": "** nums = [0,1,2,2,3,0,4,2], val = 2",
                "Output": "** 5, nums = [0,1,4,0,3,_,_,_]",
                "Explanation": "** Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\nNote that the five elements can be returned in any order.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
            }
        ]
    },
    {
        "Title": "Find the Index of the First Occurrence in a String",
        "slug": "find-the-index-of-the-first-occurrence-in-a-string",
        "description": "Given two strings `needle` and `haystack`, return the index of the first occurrence of `needle` in `haystack`, or `-1` if `needle` is not part of `haystack`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String",
            "String Matching"
        ],
        "examples": [
            {
                "Input": "** haystack = \"sadbutsad\", needle = \"sad\"",
                "Output": "** 0",
                "Explanation": "** \"sad\" occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0."
            },
            {
                "Input": "** haystack = \"leetcode\", needle = \"leeto\"",
                "Output": "** -1",
                "Explanation": "** \"leeto\" did not occur in \"leetcode\", so we return -1."
            }
        ]
    },
    {
        "Title": "Divide Two Integers",
        "slug": "divide-two-integers",
        "description": "Given two integers `dividend` and `divisor`, divide two integers **without** using multiplication, division, and mod operator.\n\n\nThe integer division should truncate toward zero, which means losing its fractional part. For example, `8.345` would be truncated to `8`, and `-2.7335` would be truncated to `-2`.\n\n\nReturn *the **quotient** after dividing* `dividend` *by* `divisor`.\n\n\nNote:** Assume we are dealing with an environment that could only store integers within the **32-bit** signed integer range: `[\u2212231, 231 \u2212 1]`. For this problem, if the quotient is **strictly greater than** `231 - 1`, then return `231 - 1`, and if the quotient is **strictly less than** `-231`, then return `-231`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** dividend = 10, divisor = 3",
                "Output": "** 3",
                "Explanation": "** 10/3 = 3.33333.. which is truncated to 3."
            },
            {
                "Input": "** dividend = 7, divisor = -3",
                "Output": "** -2",
                "Explanation": "** 7/-3 = -2.33333.. which is truncated to -2."
            }
        ]
    },
    {
        "Title": "Substring with Concatenation of All Words",
        "slug": "substring-with-concatenation-of-all-words",
        "description": "You are given a string `s` and an array of strings `words`. All the strings of `words` are of **the same length**.\n\n\nA **concatenated string** is a string that exactly contains all the strings of any permutation of `words` concatenated.\n\n\n For example, if `words = [\"ab\",\"cd\",\"ef\"]`, then `\"abcdef\"`, `\"abefcd\"`, `\"cdabef\"`, `\"cdefab\"`, `\"efabcd\"`, and `\"efcdab\"` are all concatenated strings. `\"acdbef\"` is not a concatenated string because it is not the concatenation of any permutation of `words`.\n\n\nReturn an array of *the starting indices* of all the concatenated substrings in `s`. You can return the answer in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "String",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]",
                "Output": "** [0,9]",
                "Explanation": "**\n\n\nThe substring starting at 0 is `\"barfoo\"`. It is the concatenation of `[\"bar\",\"foo\"]` which is a permutation of `words`.  \n\nThe substring starting at 9 is `\"foobar\"`. It is the concatenation of `[\"foo\",\"bar\"]` which is a permutation of `words`."
            },
            {
                "Input": "** s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]",
                "Output": "** []",
                "Explanation": "**\n\n\nThere is no concatenated substring."
            },
            {
                "Input": "** s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]",
                "Output": "** [6,9,12]",
                "Explanation": "**\n\n\nThe substring starting at 6 is `\"foobarthe\"`. It is the concatenation of `[\"foo\",\"bar\",\"the\"]`.  \n\nThe substring starting at 9 is `\"barthefoo\"`. It is the concatenation of `[\"bar\",\"the\",\"foo\"]`.  \n\nThe substring starting at 12 is `\"thefoobar\"`. It is the concatenation of `[\"the\",\"foo\",\"bar\"]`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 104`\n* `1 <= words.length <= 5000`\n* `1 <= words[i].length <= 30`\n* `s` and `words[i]` consist of lowercase English letters.\n\n\nSimilarQuestions: [76]"
            }
        ]
    },
    {
        "Title": "Next Permutation",
        "slug": "next-permutation",
        "description": "A **permutation** of an array of integers is an arrangement of its members into a sequence or linear order.\n\n\n For example, for `arr = [1,2,3]`, the following are all the permutations of `arr`: `[1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1]`.\n\n\nThe **next permutation** of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the **next permutation** of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\n\n\n For example, the next permutation of `arr = [1,2,3]` is `[1,3,2]`.\n Similarly, the next permutation of `arr = [2,3,1]` is `[3,1,2]`.\n While the next permutation of `arr = [3,2,1]` is `[1,2,3]` because `[3,2,1]` does not have a lexicographical larger rearrangement.\n\n\nGiven an array of integers `nums`, *find the next permutation of* `nums`.\n\n\nThe replacement must be **[in place](http://en.wikipedia.org/wiki/In-place_algorithm)** and use only constant extra memory.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** [1,3,2]",
                "Explanation": null
            },
            {
                "Input": "** nums = [3,2,1]",
                "Output": "** [1,2,3]",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,1,5]",
                "Output": "** [1,5,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Valid Parentheses",
        "slug": "longest-valid-parentheses",
        "description": "Given a string containing just the characters `'('` and `')'`, return *the length of the longest valid (well-formed) parentheses* *substring*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** s = \"(()\"",
                "Output": "** 2",
                "Explanation": "** The longest valid parentheses substring is \"()\"."
            },
            {
                "Input": "** s = \")()())\"",
                "Output": "** 4",
                "Explanation": "** The longest valid parentheses substring is \"()()\"."
            },
            {
                "Input": "** s = \"\"",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Search in Rotated Sorted Array",
        "slug": "search-in-rotated-sorted-array",
        "description": "There is an integer array `nums` sorted in ascending order (with **distinct** values).\n\n\nPrior to being passed to your function, `nums` is **possibly rotated** at an unknown pivot index `k` (`1 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (**0-indexed**). For example, `[0,1,2,4,5,6,7]` might be rotated at pivot index `3` and become `[4,5,6,7,0,1,2]`.\n\n\nGiven the array `nums` **after** the possible rotation and an integer `target`, return *the index of* `target` *if it is in* `nums`*, or* `-1` *if it is not in* `nums`.\n\n\nYou must write an algorithm with `O(log n)` runtime complexity.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** nums = [4,5,6,7,0,1,2], target = 0",
                "Output": "** 4",
                "Explanation": null
            },
            {
                "Input": "** nums = [4,5,6,7,0,1,2], target = 3",
                "Output": "** -1",
                "Explanation": null
            },
            {
                "Input": "** nums = [1], target = 0",
                "Output": "** -1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find First and Last Position of Element in Sorted Array",
        "slug": "find-first-and-last-position-of-element-in-sorted-array",
        "description": "Given an array of integers `nums` sorted in non-decreasing order, find the starting and ending position of a given `target` value.\n\n\nIf `target` is not found in the array, return `[-1, -1]`.\n\n\nYou must\u00a0write an algorithm with\u00a0`O(log n)` runtime complexity.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** nums = [5,7,7,8,8,10], target = 8",
                "Output": "** [3,4]",
                "Explanation": null
            },
            {
                "Input": "** nums = [5,7,7,8,8,10], target = 6",
                "Output": "** [-1,-1]",
                "Explanation": null
            },
            {
                "Input": "** nums = [], target = 0",
                "Output": "** [-1,-1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Search Insert Position",
        "slug": "search-insert-position",
        "description": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\n\nYou must\u00a0write an algorithm with\u00a0`O(log n)` runtime complexity.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,5,6], target = 5",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,3,5,6], target = 2",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,3,5,6], target = 7",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Valid Sudoku",
        "slug": "valid-sudoku",
        "description": "Determine if a\u00a0`9 x 9` Sudoku board\u00a0is valid.\u00a0Only the filled cells need to be validated\u00a0**according to the following rules**:\n\n\n1. Each row\u00a0must contain the\u00a0digits\u00a0`1-9` without repetition.\n2. Each column must contain the digits\u00a0`1-9`\u00a0without repetition.\n3. Each of the nine\u00a0`3 x 3` sub-boxes of the grid must contain the digits\u00a0`1-9`\u00a0without repetition.\n\n\nNote:\n\n\n A Sudoku board (partially filled) could be valid but is not necessarily solvable.\n Only the filled cells need to be validated according to the mentioned\u00a0rules.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** board = \n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sudoku Solver",
        "slug": "sudoku-solver",
        "description": "Write a program to solve a Sudoku puzzle by filling the empty cells.\n\n\nA sudoku solution must satisfy **all of the following rules**:\n\n\n1. Each of the digits `1-9` must occur exactly once in each row.\n2. Each of the digits `1-9` must occur exactly once in each column.\n3. Each of the digits `1-9` must occur exactly once in each of the 9 `3x3` sub-boxes of the grid.\n\n\nThe `'.'` character indicates empty cells.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Backtracking",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
                "Output": "** [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]",
                "Explanation": "**\u00a0The input board is shown above and the only valid solution is shown below:\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png)"
            }
        ]
    },
    {
        "Title": "Count and Say",
        "slug": "count-and-say",
        "description": "The **count-and-say** sequence is a sequence of digit strings defined by the recursive formula:\n\n\n `countAndSay(1) = \"1\"`\n `countAndSay(n)` is the run-length encoding of `countAndSay(n - 1)`.\n\n\n[Run-length encoding](http://en.wikipedia.org/wiki/Run-length_encoding) (RLE) is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string `\"3322251\"` we replace `\"33\"` with `\"23\"`, replace `\"222\"` with `\"32\"`, replace `\"5\"` with `\"15\"` and replace `\"1\"` with `\"11\"`. Thus the compressed string becomes `\"23321511\"`.\n\n\nGiven a positive integer `n`, return *the* `nth` *element of the **count-and-say** sequence*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** \"1211\"",
                "Explanation": "**\n\n\n\n```\n\ncountAndSay(1) = \"1\"\ncountAndSay(2) = RLE of \"1\" = \"11\"\ncountAndSay(3) = RLE of \"11\" = \"21\"\ncountAndSay(4) = RLE of \"21\" = \"1211\"\n\n```"
            },
            {
                "Input": "** n = 1",
                "Output": "** \"1\"",
                "Explanation": "**\n\n\nThis is the base case.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 30`\n\n\n\u00a0\n\n\n**Follow up:** Could you solve it iteratively?Hints:\n    0. Create a helper function that maps an integer to pairs of its digits and their frequencies. For example, if you call this function with \"223314444411\", then it maps it to an array of pairs [[2,2], [3,2], [1,1], [4,5], [1, 2]].\n    1. Create another helper function that takes the array of pairs and creates a new integer. For example, if you call this function with [[2,2], [3,2], [1,1], [4,5], [1, 2]], it should create \"22\"+\"23\"+\"11\"+\"54\"+\"21\" = \"2223115421\".\n    2. Now, with the two helper functions, you can start with \"1\" and call the two functions alternatively n-1 times. The answer is the last integer you will obtain.\nSimilarQuestions: [271, 443]"
            }
        ]
    },
    {
        "Title": "Combination Sum",
        "slug": "combination-sum",
        "description": "Given an array of **distinct** integers `candidates` and a target integer `target`, return *a list of all **unique combinations** of* `candidates` *where the chosen numbers sum to* `target`*.* You may return the combinations in **any order**.\n\n\nThe **same** number may be chosen from `candidates` an **unlimited number of times**. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\n\n\nThe test cases are generated such that the number of unique combinations that sum up to `target` is less than `150` combinations for the given input.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** candidates = [2,3,6,7], target = 7",
                "Output": "** [[2,2,3],[7]]",
                "Explanation": "**\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations."
            },
            {
                "Input": "** candidates = [2,3,5], target = 8",
                "Output": "** [[2,2,2,2],[2,3,3],[3,5]]",
                "Explanation": null
            },
            {
                "Input": "** candidates = [2], target = 1",
                "Output": "** []",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Combination Sum II",
        "slug": "combination-sum-ii",
        "description": "Given a collection of candidate numbers (`candidates`) and a target number (`target`), find all unique combinations in `candidates`\u00a0where the candidate numbers sum to `target`.\n\n\nEach number in `candidates`\u00a0may only be used **once** in the combination.\n\n\nNote:**\u00a0The solution set must not contain duplicate combinations.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** candidates = [10,1,2,7,6,1,5], target = 8",
                "Output": "** \n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]",
                "Explanation": null
            },
            {
                "Input": "** candidates = [2,5,2,1,2], target = 5",
                "Output": "** \n[\n[1,2,2],\n[5]\n]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "First Missing Positive",
        "slug": "first-missing-positive",
        "description": "Given an unsorted integer array `nums`. Return the *smallest positive integer* that is *not present* in `nums`.\n\n\nYou must implement an algorithm that runs in `O(n)` time and uses `O(1)` auxiliary space.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,0]",
                "Output": "** 3",
                "Explanation": "** The numbers in the range [1,2] are all in the array."
            },
            {
                "Input": "** nums = [3,4,-1,1]",
                "Output": "** 2",
                "Explanation": "** 1 is in the array but 2 is missing."
            },
            {
                "Input": "** nums = [7,8,9,11,12]",
                "Output": "** 1",
                "Explanation": "** The smallest positive integer 1 is missing."
            }
        ]
    },
    {
        "Title": "Trapping Rain Water",
        "slug": "trapping-rain-water",
        "description": "Given `n` non-negative integers representing an elevation map where the width of each bar is `1`, compute how much water it can trap after raining.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Two Pointers",
            "Dynamic Programming",
            "Stack",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** height = [0,1,0,2,1,0,1,3,2,1,2,1]",
                "Output": "** 6",
                "Explanation": "** The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped."
            }
        ]
    },
    {
        "Title": "Multiply Strings",
        "slug": "multiply-strings",
        "description": "Given two non-negative integers `num1` and `num2` represented as strings, return the product of `num1` and `num2`, also represented as a string.\n\n\nNote:**\u00a0You must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "String",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** num1 = \"2\", num2 = \"3\"",
                "Output": "** \"6\"",
                "Explanation": null
            },
            {
                "Input": "** num1 = \"123\", num2 = \"456\"",
                "Output": "** \"56088\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Wildcard Matching",
        "slug": "wildcard-matching",
        "description": "Given an input string (`s`) and a pattern (`p`), implement wildcard pattern matching with support for `'?'` and `'*'` where:\n\n\n `'?'` Matches any single character.\n `'*'` Matches any sequence of characters (including the empty sequence).\n\n\nThe matching should cover the **entire** input string (not partial).\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Greedy",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** s = \"aa\", p = \"a\"",
                "Output": "** false",
                "Explanation": "** \"a\" does not match the entire string \"aa\"."
            },
            {
                "Input": "** s = \"aa\", p = \"*\"",
                "Output": "** true",
                "Explanation": "**\u00a0'*' matches any sequence."
            },
            {
                "Input": "** s = \"cb\", p = \"?a\"",
                "Output": "** false",
                "Explanation": "**\u00a0'?' matches 'c', but the second letter is 'a', which does not match 'b'."
            }
        ]
    },
    {
        "Title": "Jump Game II",
        "slug": "jump-game-ii",
        "description": "You are given a **0-indexed** array of integers `nums` of length `n`. You are initially positioned at `nums[0]`.\n\n\nEach element `nums[i]` represents the maximum length of a forward jump from index `i`. In other words, if you are at `nums[i]`, you can jump to any `nums[i + j]` where:\n\n\n `0 <= j <= nums[i]` and\n `i + j < n`\n\n\nReturn *the minimum number of jumps to reach* `nums[n - 1]`. The test cases are generated such that you can reach `nums[n - 1]`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums = [2,3,1,1,4]",
                "Output": "** 2",
                "Explanation": "** The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index."
            },
            {
                "Input": "** nums = [2,3,0,1,4]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Permutations",
        "slug": "permutations",
        "description": "Given an array `nums` of distinct integers, return *all the possible permutations*. You can return the answer in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
                "Explanation": null
            },
            {
                "Input": "** nums = [0,1]",
                "Output": "** [[0,1],[1,0]]",
                "Explanation": null
            },
            {
                "Input": "** nums = [1]",
                "Output": "** [[1]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Permutations II",
        "slug": "permutations-ii",
        "description": "Given a collection of numbers, `nums`,\u00a0that might contain duplicates, return *all possible unique permutations **in any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** nums = [1,1,2]",
                "Output": "**\n[[1,1,2],\n [1,2,1],\n [2,1,1]]",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Rotate Image",
        "slug": "rotate-image",
        "description": "You are given an `n x n` 2D `matrix` representing an image, rotate the image by **90** degrees (clockwise).\n\n\nYou have to rotate the image [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm), which means you have to modify the input 2D matrix directly. **DO NOT** allocate another 2D matrix and do the rotation.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** matrix = [[1,2,3],[4,5,6],[7,8,9]]",
                "Output": "** [[7,4,1],[8,5,2],[9,6,3]]",
                "Explanation": null
            },
            {
                "Input": "** matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]",
                "Output": "** [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Group Anagrams",
        "slug": "group-anagrams",
        "description": "Given an array of strings `strs`, group **the anagrams** together. You can return the answer in **any order**.\n\n\nAn **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]",
                "Output": "** [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
                "Explanation": null
            },
            {
                "Input": "** strs = [\"\"]",
                "Output": "** [[\"\"]]",
                "Explanation": null
            },
            {
                "Input": "** strs = [\"a\"]",
                "Output": "** [[\"a\"]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Pow(x, n)",
        "slug": "powx-n",
        "description": "Implement [pow(x, n)](http://www.cplusplus.com/reference/valarray/pow/), which calculates `x` raised to the power `n` (i.e., `xn`).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** x = 2.00000, n = 10",
                "Output": "** 1024.00000",
                "Explanation": null
            },
            {
                "Input": "** x = 2.10000, n = 3",
                "Output": "** 9.26100",
                "Explanation": null
            },
            {
                "Input": "** x = 2.00000, n = -2",
                "Output": "** 0.25000",
                "Explanation": "** 2-2 = 1/22 = 1/4 = 0.25"
            }
        ]
    },
    {
        "Title": "N-Queens",
        "slug": "n-queens",
        "description": "The **n-queens** puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other.\n\n\nGiven an integer `n`, return *all distinct solutions to the **n-queens puzzle***. You may return the answer in **any order**.\n\n\nEach solution contains a distinct board configuration of the n-queens' placement, where `'Q'` and `'.'` both indicate a queen and an empty space, respectively.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]",
                "Explanation": "** There exist two distinct solutions to the 4-queens puzzle as shown above"
            }
        ]
    },
    {
        "Title": "N-Queens II",
        "slug": "n-queens-ii",
        "description": "The **n-queens** puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other.\n\n\nGiven an integer `n`, return *the number of distinct solutions to the\u00a0**n-queens puzzle***.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** 2",
                "Explanation": "** There are two distinct solutions to the 4-queens puzzle as shown."
            }
        ]
    },
    {
        "Title": "Maximum Subarray",
        "slug": "maximum-subarray",
        "description": "Given an integer array `nums`, find the subarray with the largest sum, and return *its sum*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Divide and Conquer",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [-2,1,-3,4,-1,2,1,-5,4]",
                "Output": "** 6",
                "Explanation": "** The subarray [4,-1,2,1] has the largest sum 6."
            },
            {
                "Input": "** nums = [1]",
                "Output": "** 1",
                "Explanation": "** The subarray [1] has the largest sum 1."
            },
            {
                "Input": "** nums = [5,4,-1,7,8]",
                "Output": "** 23",
                "Explanation": "** The subarray [5,4,-1,7,8] has the largest sum 23."
            }
        ]
    },
    {
        "Title": "Spiral Matrix",
        "slug": "spiral-matrix",
        "description": "Given an `m x n` `matrix`, return *all elements of the* `matrix` *in spiral order*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** matrix = [[1,2,3],[4,5,6],[7,8,9]]",
                "Output": "** [1,2,3,6,9,8,7,4,5]",
                "Explanation": null
            },
            {
                "Input": "** matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
                "Output": "** [1,2,3,4,8,12,11,10,9,5,6,7]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Jump Game",
        "slug": "jump-game",
        "description": "You are given an integer array `nums`. You are initially positioned at the array's **first index**, and each element in the array represents your maximum jump length at that position.\n\n\nReturn `true` *if you can reach the last index, or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums = [2,3,1,1,4]",
                "Output": "** true",
                "Explanation": "** Jump 1 step from index 0 to 1, then 3 steps to the last index."
            },
            {
                "Input": "** nums = [3,2,1,0,4]",
                "Output": "** false",
                "Explanation": "** You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index."
            }
        ]
    },
    {
        "Title": "Insert Interval",
        "slug": "insert-interval",
        "description": "You are given an array of non-overlapping intervals `intervals` where `intervals[i] = [starti, endi]` represent the start and the end of the `ith` interval and `intervals` is sorted in ascending order by `starti`. You are also given an interval `newInterval = [start, end]` that represents the start and end of another interval.\n\n\nInsert `newInterval` into `intervals` such that `intervals` is still sorted in ascending order by `starti` and `intervals` still does not have any overlapping intervals (merge overlapping intervals if necessary).\n\n\nReturn `intervals` *after the insertion*.\n\n\nNote** that you don't need to modify `intervals` in-place. You can make a new array and return it.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** intervals = [[1,3],[6,9]], newInterval = [2,5]",
                "Output": "** [[1,5],[6,9]]",
                "Explanation": null
            },
            {
                "Input": "** intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]",
                "Output": "** [[1,2],[3,10],[12,16]]",
                "Explanation": "** Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10]."
            }
        ]
    },
    {
        "Title": "Length of Last Word",
        "slug": "length-of-last-word",
        "description": "Given a string `s` consisting of words and spaces, return *the length of the **last** word in the string.\n\n\nA **word** is a maximal substring consisting of non-space characters only.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"Hello World\"",
                "Output": "** 5",
                "Explanation": "** The last word is \"World\" with length 5."
            },
            {
                "Input": "** s = \"   fly me   to   the moon  \"",
                "Output": "** 4",
                "Explanation": "** The last word is \"moon\" with length 4."
            },
            {
                "Input": "** s = \"luffy is still joyboy\"",
                "Output": "** 6",
                "Explanation": "** The last word is \"joyboy\" with length 6."
            }
        ]
    },
    {
        "Title": "Spiral Matrix II",
        "slug": "spiral-matrix-ii",
        "description": "Given a positive integer `n`, generate an `n x n` `matrix` filled with elements from `1` to `n2` in spiral order.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** [[1,2,3],[8,9,4],[7,6,5]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Permutation Sequence",
        "slug": "permutation-sequence",
        "description": "The set `[1, 2, 3, ...,\u00a0n]` contains a total of `n!` unique permutations.\n\n\nBy listing and labeling all of the permutations in order, we get the following sequence for `n = 3`:\n\n\n1. `\"123\"`\n2. `\"132\"`\n3. `\"213\"`\n4. `\"231\"`\n5. `\"312\"`\n6. `\"321\"`\n\n\nGiven `n` and `k`, return the `kth` permutation sequence.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** n = 3, k = 3",
                "Output": "** \"213\"",
                "Explanation": null
            },
            {
                "Input": "** n = 4, k = 9",
                "Output": "** \"2314\"",
                "Explanation": null
            },
            {
                "Input": "** n = 3, k = 1",
                "Output": "** \"123\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Rotate List",
        "slug": "rotate-list",
        "description": "Given the `head` of a linked\u00a0list, rotate the list to the right by `k` places.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** head = [1,2,3,4,5], k = 2",
                "Output": "** [4,5,1,2,3]",
                "Explanation": null
            },
            {
                "Input": "** head = [0,1,2], k = 4",
                "Output": "** [2,0,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Unique Paths",
        "slug": "unique-paths",
        "description": "There is a robot on an `m x n` grid. The robot is initially located at the **top-left corner** (i.e., `grid[0][0]`). The robot tries to move to the **bottom-right corner** (i.e., `grid[m - 1][n - 1]`). The robot can only move either down or right at any point in time.\n\n\nGiven the two integers `m` and `n`, return *the number of possible unique paths that the robot can take to reach the bottom-right corner*.\n\n\nThe test cases are generated so that the answer will be less than or equal to `2 * 109`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Combinatorics"
        ],
        "examples": [
            {
                "Input": "** m = 3, n = 7",
                "Output": "** 28",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Unique Paths II",
        "slug": "unique-paths-ii",
        "description": "You are given an `m x n` integer array `grid`. There is a robot initially located at the **top-left corner** (i.e., `grid[0][0]`). The robot tries to move to the **bottom-right corner** (i.e., `grid[m - 1][n - 1]`). The robot can only move either down or right at any point in time.\n\n\nAn obstacle and space are marked as `1` or `0` respectively in `grid`. A path that the robot takes cannot include **any** square that is an obstacle.\n\n\nReturn *the number of possible unique paths that the robot can take to reach the bottom-right corner*.\n\n\nThe testcases are generated so that the answer will be less than or equal to `2 * 109`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]",
                "Output": "** 2",
                "Explanation": "** There is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -> Right -> Down -> Down\n2. Down -> Down -> Right -> Right"
            },
            {
                "Input": "** obstacleGrid = [[0,1],[0,0]]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Path Sum",
        "slug": "minimum-path-sum",
        "description": "Given a `m x n` `grid` filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\n\n\nNote:** You can only move either down or right at any point in time.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,3,1],[1,5,1],[4,2,1]]",
                "Output": "** 7",
                "Explanation": "** Because the path 1 \u2192 3 \u2192 1 \u2192 1 \u2192 1 minimizes the sum."
            }
        ]
    },
    {
        "Title": "Valid Number",
        "slug": "valid-number",
        "description": "Given a string `s`, return whether `s` is a **valid number**.  \n\n  \n\nFor example, all the following are valid numbers: `\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"`, while the following are not valid numbers: `\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"`.\n\n\nFormally, a\u00a0**valid number** is defined using one of the following definitions:\n\n\n1. An **integer number** followed by an **optional exponent**.\n2. A **decimal number** followed by an **optional exponent**.\n\n\nAn **integer number** is defined with an **optional sign** `'-'` or `'+'` followed by **digits**.\n\n\nA **decimal number** is defined with an **optional sign** `'-'` or `'+'` followed by one of the following definitions:\n\n\n1. **Digits** followed by a **dot** `'.'`.\n2. **Digits** followed by a **dot** `'.'` followed by **digits**.\n3. A **dot** `'.'` followed by **digits**.\n\n\nAn **exponent** is defined with an **exponent notation** `'e'` or `'E'` followed by an **integer number**.\n\n\nThe **digits** are defined as one or more digits.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"0\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"e\"",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** s = \".\"",
                "Output": "** false\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 20`\n* `s` consists of only English letters (both uppercase and lowercase), digits (`0-9`), plus `'+'`, minus `'-'`, or dot `'.'`.\n\n\nSimilarQuestions: [8]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Plus One",
        "slug": "plus-one",
        "description": "You are given a **large integer** represented as an integer array `digits`, where each `digits[i]` is the `ith` digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading `0`'s.\n\n\nIncrement the large integer by one and return *the resulting array of digits*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math"
        ],
        "examples": [
            {
                "Input": "** digits = [1,2,3]",
                "Output": "** [1,2,4]",
                "Explanation": "** The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\nThus, the result should be [1,2,4]."
            },
            {
                "Input": "** digits = [4,3,2,1]",
                "Output": "** [4,3,2,2]",
                "Explanation": "** The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\nThus, the result should be [4,3,2,2]."
            },
            {
                "Input": "** digits = [9]",
                "Output": "** [1,0]",
                "Explanation": "** The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be [1,0]."
            }
        ]
    },
    {
        "Title": "Add Binary",
        "slug": "add-binary",
        "description": "Given two binary strings `a` and `b`, return *their sum as a binary string*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "String",
            "Bit Manipulation",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** a = \"11\", b = \"1\"",
                "Output": "** \"100\"",
                "Explanation": null
            },
            {
                "Input": "** a = \"1010\", b = \"1011\"",
                "Output": "** \"10101\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Text Justification",
        "slug": "text-justification",
        "description": "Given an array of strings `words` and a width `maxWidth`, format the text such that each line has exactly `maxWidth` characters and is fully (left and right) justified.\n\n\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces `' '` when necessary so that each line has exactly `maxWidth` characters.\n\n\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\n\n\nFor the last line of text, it should be left-justified, and no extra space is inserted between words.\n\n\nNote:\n\n\n A word is defined as a character sequence consisting of non-space characters only.\n Each word's length is guaranteed to be greater than `0` and not exceed `maxWidth`.\n The input array `words` contains at least one word.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "String",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16",
                "Output": "**\n[\n\u00a0 \u00a0\"This \u00a0 \u00a0is \u00a0 \u00a0an\",\n\u00a0 \u00a0\"example \u00a0of text\",\n\u00a0 \u00a0\"justification. \u00a0\"\n]",
                "Explanation": null
            },
            {
                "Input": "** words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16",
                "Output": "**\n[\n\u00a0 \"What \u00a0 must \u00a0 be\",\n\u00a0 \"acknowledgment \u00a0\",\n\u00a0 \"shall be \u00a0 \u00a0 \u00a0 \u00a0\"\n]",
                "Explanation": "** Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.\nNote that the second line is also left-justified because it contains only one word."
            },
            {
                "Input": "** words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20",
                "Output": "**\n[\n\u00a0 \"Science \u00a0is \u00a0what we\",\n  \"understand \u00a0 \u00a0 \u00a0well\",\n\u00a0 \"enough to explain to\",\n\u00a0 \"a \u00a0computer. \u00a0Art is\",\n\u00a0 \"everything \u00a0else \u00a0we\",\n\u00a0 \"do \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"\n]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sqrt(x)",
        "slug": "sqrtx",
        "description": "Given a non-negative integer `x`, return *the square root of* `x` *rounded down to the nearest integer*. The returned integer should be **non-negative** as well.\n\n\nYou **must not use** any built-in exponent function or operator.\n\n\n For example, do not use `pow(x, 0.5)` in c++ or `x ** 0.5` in python.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** x = 4",
                "Output": "** 2",
                "Explanation": "** The square root of 4 is 2, so we return 2."
            },
            {
                "Input": "** x = 8",
                "Output": "** 2",
                "Explanation": "** The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned."
            }
        ]
    },
    {
        "Title": "Climbing Stairs",
        "slug": "climbing-stairs",
        "description": "You are climbing a staircase. It takes `n` steps to reach the top.\n\n\nEach time you can either climb `1` or `2` steps. In how many distinct ways can you climb to the top?\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Memoization"
        ],
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** 2",
                "Explanation": "** There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps"
            },
            {
                "Input": "** n = 3",
                "Output": "** 3",
                "Explanation": "** There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step"
            }
        ]
    },
    {
        "Title": "Simplify Path",
        "slug": "simplify-path",
        "description": "Given an absolute path for a Unix-style file system, which begins with a slash `'/'`, transform this path into its **simplified canonical path**.\n\n\nIn Unix-style file system context, a single period `'.'` signifies the current directory, a double period `\"..\"` denotes moving up one directory level, and multiple slashes such as `\"//\"` are interpreted as a single slash. In this problem, treat sequences of periods not covered by the previous rules (like `\"...\"`) as valid names for files or directories.\n\n\nThe simplified canonical path should adhere to the following rules:\n\n\n It must start with a single slash `'/'`.\n Directories within the path should be separated by only one slash `'/'`.\n It should not end with a slash `'/'`, unless it's the root directory.\n It should exclude any single or double periods used to denote current or parent directories.\n\n\nReturn the new path.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** path = \"/home/\"",
                "Output": "** \"/home\"",
                "Explanation": "**\n\n\nThe trailing slash should be removed."
            },
            {
                "Input": "** path = \"/home//foo/\"",
                "Output": "** \"/home/foo\"",
                "Explanation": "**\n\n\nMultiple consecutive slashes are replaced by a single one."
            },
            {
                "Input": "** path = \"/home/user/Documents/../Pictures\"",
                "Output": "** \"/home/user/Pictures\"",
                "Explanation": "**\n\n\nA double period `\"..\"` refers to the directory up a level."
            },
            {
                "Input": "** path = \"/../\"",
                "Output": "** \"/\"",
                "Explanation": "**\n\n\nGoing one level up from the root directory is not possible."
            },
            {
                "Input": "** path = \"/.../a/../b/c/../d/./\"",
                "Output": "** \"/.../b/d\"",
                "Explanation": "**\n\n\n`\"...\"` is a valid name for a directory in this problem.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= path.length <= 3000`\n* `path` consists of English letters, digits, period `'.'`, slash `'/'` or `'_'`.\n* `path` is a valid absolute Unix path."
            }
        ]
    },
    {
        "Title": "Edit Distance",
        "slug": "edit-distance",
        "description": "Given two strings `word1` and `word2`, return *the minimum number of operations required to convert `word1` to `word2`*.\n\n\nYou have the following three operations permitted on a word:\n\n\n Insert a character\n Delete a character\n Replace a character\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** word1 = \"horse\", word2 = \"ros\"",
                "Output": "** 3",
                "Explanation": "** \nhorse -> rorse (replace 'h' with 'r')\nrorse -> rose (remove 'r')\nrose -> ros (remove 'e')"
            },
            {
                "Input": "** word1 = \"intention\", word2 = \"execution\"",
                "Output": "** 5",
                "Explanation": "** \nintention -> inention (remove 't')\ninention -> enention (replace 'i' with 'e')\nenention -> exention (replace 'n' with 'x')\nexention -> exection (replace 'n' with 'c')\nexection -> execution (insert 'u')"
            }
        ]
    },
    {
        "Title": "Set Matrix Zeroes",
        "slug": "set-matrix-zeroes",
        "description": "Given an `m x n` integer matrix `matrix`, if an element is `0`, set its entire row and column to `0`'s.\n\n\nYou must do it [in place](https://en.wikipedia.org/wiki/In-place_algorithm).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** matrix = [[1,1,1],[1,0,1],[1,1,1]]",
                "Output": "** [[1,0,1],[0,0,0],[1,0,1]]",
                "Explanation": null
            },
            {
                "Input": "** matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]",
                "Output": "** [[0,0,0,0],[0,4,5,0],[0,3,1,0]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Search a 2D Matrix",
        "slug": "search-a-2d-matrix",
        "description": "You are given an `m x n` integer matrix `matrix` with the following two properties:\n\n\n Each row is sorted in non-decreasing order.\n The first integer of each row is greater than the last integer of the previous row.\n\n\nGiven an integer `target`, return `true` *if* `target` *is in* `matrix` *or* `false` *otherwise*.\n\n\nYou must write a solution in `O(log(m * n))` time complexity.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sort Colors",
        "slug": "sort-colors",
        "description": "Given an array `nums` with `n` objects colored red, white, or blue, sort them **[in-place](https://en.wikipedia.org/wiki/In-place_algorithm)** so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\n\n\nWe will use the integers `0`, `1`, and `2` to represent the color red, white, and blue, respectively.\n\n\nYou must solve this problem without using the library's sort function.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [2,0,2,1,1,0]",
                "Output": "** [0,0,1,1,2,2]",
                "Explanation": null
            },
            {
                "Input": "** nums = [2,0,1]",
                "Output": "** [0,1,2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Window Substring",
        "slug": "minimum-window-substring",
        "description": "Given two strings `s` and `t` of lengths `m` and `n` respectively, return *the **minimum window*** ***substring*** *of* `s` *such that every character in* `t` *(**including duplicates**) is included in the window*. If there is no such substring, return *the empty string* `\"\"`.\n\n\nThe testcases will be generated such that the answer is **unique**.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "String",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** s = \"ADOBECODEBANC\", t = \"ABC\"",
                "Output": "** \"BANC\"",
                "Explanation": "** The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t."
            },
            {
                "Input": "** s = \"a\", t = \"a\"",
                "Output": "** \"a\"",
                "Explanation": "** The entire string s is the minimum window."
            },
            {
                "Input": "** s = \"a\", t = \"aa\"",
                "Output": "** \"\"",
                "Explanation": "** Both 'a's from t must be included in the window.\nSince the largest window of s only has one 'a', return empty string."
            }
        ]
    },
    {
        "Title": "Combinations",
        "slug": "combinations",
        "description": "Given two integers `n` and `k`, return *all possible combinations of* `k` *numbers chosen from the range* `[1, n]`.\n\n\nYou may return the answer in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** n = 4, k = 2",
                "Output": "** [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]",
                "Explanation": "** There are 4 choose 2 = 6 total combinations.\nNote that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination."
            },
            {
                "Input": "** n = 1, k = 1",
                "Output": "** [[1]]",
                "Explanation": "** There is 1 choose 1 = 1 total combination."
            }
        ]
    },
    {
        "Title": "Subsets",
        "slug": "subsets",
        "description": "Given an integer array `nums` of **unique** elements, return *all possible* *subsets* *(the power set)*.\n\n\nThe solution set **must not** contain duplicate subsets. Return the solution in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Backtracking",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]",
                "Explanation": null
            },
            {
                "Input": "** nums = [0]",
                "Output": "** [[],[0]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Word Search",
        "slug": "word-search",
        "description": "Given an `m x n` grid of characters `board` and a string `word`, return `true` *if* `word` *exists in the grid*.\n\n\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Backtracking",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove Duplicates from Sorted Array II",
        "slug": "remove-duplicates-from-sorted-array-ii",
        "description": "Given an integer array `nums` sorted in **non-decreasing order**, remove some duplicates [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm) such that each unique element appears **at most twice**. The **relative order** of the elements should be kept the **same**.\n\n\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the **first part** of the array `nums`. More formally, if there are `k` elements after removing the duplicates, then the first `k` elements of `nums`\u00a0should hold the final result. It does not matter what you leave beyond the first\u00a0`k`\u00a0elements.\n\n\nReturn `k` *after placing the final result in the first* `k` *slots of* `nums`.\n\n\nDo **not** allocate extra space for another array. You must do this by **modifying the input array [in-place](https://en.wikipedia.org/wiki/In-place_algorithm)** with O(1) extra memory.\n\n\nCustom Judge:\n\n\nThe judge will test your solution with the following code:\n\n\n\n```\n\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n\n```\n\nIf all assertions pass, then your solution will be **accepted**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** nums = [1,1,1,2,2,3]",
                "Output": "** 5, nums = [1,1,2,2,3,_]",
                "Explanation": "** Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
            },
            {
                "Input": "** nums = [0,0,1,1,1,1,2,3,3]",
                "Output": "** 7, nums = [0,0,1,1,2,3,3,_,_]",
                "Explanation": "** Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
            }
        ]
    },
    {
        "Title": "Search in Rotated Sorted Array II",
        "slug": "search-in-rotated-sorted-array-ii",
        "description": "There is an integer array `nums` sorted in non-decreasing order (not necessarily with **distinct** values).\n\n\nBefore being passed to your function, `nums` is **rotated** at an unknown pivot index `k` (`0 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (**0-indexed**). For example, `[0,1,2,4,4,4,5,6,6,7]` might be rotated at pivot index `5` and become `[4,5,6,6,7,0,1,2,4,4]`.\n\n\nGiven the array `nums` **after** the rotation and an integer `target`, return `true` *if* `target` *is in* `nums`*, or* `false` *if it is not in* `nums`*.\n\n\nYou must decrease the overall operation steps as much as possible.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** nums = [2,5,6,0,0,1,2], target = 0",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** nums = [2,5,6,0,0,1,2], target = 3",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove Duplicates from Sorted List II",
        "slug": "remove-duplicates-from-sorted-list-ii",
        "description": "Given the `head` of a sorted linked list, *delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list*. Return *the linked list **sorted** as well*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** head = [1,2,3,3,4,4,5]",
                "Output": "** [1,2,5]",
                "Explanation": null
            },
            {
                "Input": "** head = [1,1,1,2,3]",
                "Output": "** [2,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove Duplicates from Sorted List",
        "slug": "remove-duplicates-from-sorted-list",
        "description": "Given the `head` of a sorted linked list, *delete all duplicates such that each element appears only once*. Return *the linked list **sorted** as well*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Linked List"
        ],
        "examples": [
            {
                "Input": "** head = [1,1,2]",
                "Output": "** [1,2]",
                "Explanation": null
            },
            {
                "Input": "** head = [1,1,2,3,3]",
                "Output": "** [1,2,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Largest Rectangle in Histogram",
        "slug": "largest-rectangle-in-histogram",
        "description": "Given an array of integers `heights` representing the histogram's bar height where the width of each bar is `1`, return *the area of the largest rectangle in the histogram*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Stack",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** heights = [2,1,5,6,2,3]",
                "Output": "** 10",
                "Explanation": "** The above is a histogram where width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units."
            },
            {
                "Input": "** heights = [2,4]",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximal Rectangle",
        "slug": "maximal-rectangle",
        "description": "Given a `rows x cols`\u00a0binary `matrix` filled with `0`'s and `1`'s, find the largest rectangle containing only `1`'s and return *its area*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Stack",
            "Matrix",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]",
                "Output": "** 6",
                "Explanation": "** The maximal rectangle is shown in the above picture."
            }
        ]
    },
    {
        "Title": "Partition List",
        "slug": "partition-list",
        "description": "Given the `head` of a linked list and a value `x`, partition it such that all nodes **less than** `x` come before nodes **greater than or equal** to `x`.\n\n\nYou should **preserve** the original relative order of the nodes in each of the two partitions.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** head = [1,4,3,2,5,2], x = 3",
                "Output": "** [1,2,2,4,3,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Scramble String",
        "slug": "scramble-string",
        "description": "We can scramble a string s to get a string t using the following algorithm:\n\n\n1. If the length of the string is 1, stop.\n2. If the length of the string is > 1, do the following:\n\t* Split the string into two non-empty substrings at a random index, i.e., if the string is `s`, divide it to `x` and `y` where `s = x + y`.\n\t* **Randomly**\u00a0decide to swap the two substrings or to keep them in the same order. i.e., after this step, `s` may become `s = x + y` or `s = y + x`.\n\t* Apply step 1 recursively on each of the two substrings `x` and `y`.\n\n\nGiven two strings `s1` and `s2` of **the same length**, return `true` if `s2` is a scrambled string of `s1`, otherwise, return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s1 = \"great\", s2 = \"rgeat\"",
                "Output": "** true",
                "Explanation": "** One possible scenario applied on s1 is:\n\"great\" --> \"gr/eat\" // divide at random index.\n\"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\n\"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at random index each of them.\n\"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\n\"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\n\"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\nThe algorithm stops now, and the result string is \"rgeat\" which is s2.\nAs one possible scenario led s1 to be scrambled to s2, we return true."
            },
            {
                "Input": "** s1 = \"abcde\", s2 = \"caebd\"",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** s1 = \"a\", s2 = \"a\"",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Merge Sorted Array",
        "slug": "merge-sorted-array",
        "description": "You are given two integer arrays `nums1` and `nums2`, sorted in **non-decreasing order**, and two integers `m` and `n`, representing the number of elements in `nums1` and `nums2` respectively.\n\n\nMerge** `nums1` and `nums2` into a single array sorted in **non-decreasing order**.\n\n\nThe final sorted array should not be returned by the function, but instead be *stored inside the array* `nums1`. To accommodate this, `nums1` has a length of `m + n`, where the first `m` elements denote the elements that should be merged, and the last `n` elements are set to `0` and should be ignored. `nums2` has a length of `n`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3",
                "Output": "** [1,2,2,3,5,6]",
                "Explanation": "** The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1."
            },
            {
                "Input": "** nums1 = [1], m = 1, nums2 = [], n = 0",
                "Output": "** [1]",
                "Explanation": "** The arrays we are merging are [1] and [].\nThe result of the merge is [1]."
            },
            {
                "Input": "** nums1 = [0], m = 0, nums2 = [1], n = 1",
                "Output": "** [1]",
                "Explanation": "** The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1."
            }
        ]
    },
    {
        "Title": "Gray Code",
        "slug": "gray-code",
        "description": "An **n-bit gray code sequence** is a sequence of `2n` integers where:\n\n\n Every integer is in the **inclusive** range `[0, 2n - 1]`,\n The first integer is `0`,\n An integer appears **no more than once** in the sequence,\n The binary representation of every pair of **adjacent** integers differs by **exactly one bit**, and\n The binary representation of the **first** and **last** integers differs by **exactly one bit**.\n\n\nGiven an integer `n`, return *any valid **n-bit gray code sequence***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Backtracking",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** [0,1,3,2]",
                "Explanation": "**\nThe binary representation of [0,1,3,2] is [00,01,11,10].\n- 00 and 01 differ by one bit\n- 01 and 11 differ by one bit\n- 11 and 10 differ by one bit\n- 10 and 00 differ by one bit\n[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n- 00 and 10 differ by one bit\n- 10 and 11 differ by one bit\n- 11 and 01 differ by one bit\n- 01 and 00 differ by one bit"
            },
            {
                "Input": "** n = 1",
                "Output": "** [0,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Subsets II",
        "slug": "subsets-ii",
        "description": "Given an integer array `nums` that may contain duplicates, return *all possible* *subsets* *(the power set)*.\n\n\nThe solution set **must not** contain duplicate subsets. Return the solution in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Backtracking",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,2]",
                "Output": "** [[],[1],[1,2],[1,2,2],[2],[2,2]]",
                "Explanation": null
            },
            {
                "Input": "** nums = [0]",
                "Output": "** [[],[0]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Decode Ways",
        "slug": "decode-ways",
        "description": "A message containing letters from `A-Z` can be **encoded** into numbers using the following mapping:\n\n\n\n```\n\n'A' -> \"1\"\n'B' -> \"2\"\n...\n'Z' -> \"26\"\n\n```\n\nTo **decode** an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `\"11106\"` can be mapped into:\n\n\n `\"AAJF\"` with the grouping `(1 1 10 6)`\n `\"KJF\"` with the grouping `(11 10 6)`\n\n\nNote that the grouping `(1 11 06)` is invalid because `\"06\"` cannot be mapped into `'F'` since `\"6\"` is different from `\"06\"`.\n\n\nGiven a string `s` containing only digits, return *the **number** of ways to **decode** it*.\n\n\nThe test cases are generated so that the answer fits in a **32-bit** integer.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"12\"",
                "Output": "** 2",
                "Explanation": "** \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12)."
            },
            {
                "Input": "** s = \"226\"",
                "Output": "** 3",
                "Explanation": "** \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6)."
            },
            {
                "Input": "** s = \"06\"",
                "Output": "** 0",
                "Explanation": "** \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\")."
            }
        ]
    },
    {
        "Title": "Reverse Linked List II",
        "slug": "reverse-linked-list-ii",
        "description": "Given the `head` of a singly linked list and two integers `left` and `right` where `left <= right`, reverse the nodes of the list from position `left` to position `right`, and return *the reversed list*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List"
        ],
        "examples": [
            {
                "Input": "** head = [1,2,3,4,5], left = 2, right = 4",
                "Output": "** [1,4,3,2,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Restore IP Addresses",
        "slug": "restore-ip-addresses",
        "description": "A **valid IP address** consists of exactly four integers separated by single dots. Each integer is between `0` and `255` (**inclusive**) and cannot have leading zeros.\n\n\n For example, `\"0.1.2.201\"` and `\"192.168.1.1\"` are **valid** IP addresses, but `\"0.011.255.245\"`, `\"192.168.1.312\"` and `\"192.168@1.1\"` are **invalid** IP addresses.\n\n\nGiven a string `s` containing only digits, return *all possible valid IP addresses that can be formed by inserting dots into* `s`. You are **not** allowed to reorder or remove any digits in `s`. You may return the valid IP addresses in **any** order.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** s = \"25525511135\"",
                "Output": "** [\"255.255.11.135\",\"255.255.111.35\"]",
                "Explanation": null
            },
            {
                "Input": "** s = \"0000\"",
                "Output": "** [\"0.0.0.0\"]",
                "Explanation": null
            },
            {
                "Input": "** s = \"101023\"",
                "Output": "** [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Tree Inorder Traversal",
        "slug": "binary-tree-inorder-traversal",
        "description": "Given the `root` of a binary tree, return *the inorder traversal of its nodes' values*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Stack",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,null,2,3]",
                "Output": "** [1,3,2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Unique Binary Search Trees II",
        "slug": "unique-binary-search-trees-ii",
        "description": "Given an integer `n`, return *all the structurally unique **BST'**s (binary search trees), which has exactly* `n` *nodes of unique values from* `1` *to* `n`. Return the answer in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming",
            "Backtracking",
            "Tree",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Unique Binary Search Trees",
        "slug": "unique-binary-search-trees",
        "description": "Given an integer `n`, return *the number of structurally unique **BST'**s (binary search trees) which has exactly* `n` *nodes of unique values from* `1` *to* `n`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Tree",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** 5",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Interleaving String",
        "slug": "interleaving-string",
        "description": "Given strings `s1`, `s2`, and `s3`, find whether `s3` is formed by an **interleaving** of `s1` and `s2`.\n\n\nAn **interleaving** of two strings `s` and `t` is a configuration where `s` and `t` are divided into `n` and `m` substrings respectively, such that:\n\n\n `s = s1 + s2 + ... + sn`\n `t = t1 + t2 + ... + tm`\n `|n - m| <= 1`\n The **interleaving** is `s1 + t1 + s2 + t2 + s3 + t3 + ...` or `t1 + s1 + t2 + s2 + t3 + s3 + ...`\n\n\nNote:** `a + b` is the concatenation of strings `a` and `b`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"",
                "Output": "** true",
                "Explanation": "** One way to obtain s3 is:\nSplit s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\".\nInterleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".\nSince s3 can be obtained by interleaving s1 and s2, we return true."
            }
        ]
    },
    {
        "Title": "Validate Binary Search Tree",
        "slug": "validate-binary-search-tree",
        "description": "Given the `root` of a binary tree, *determine if it is a valid binary search tree (BST)*.\n\n\nA **valid BST** is defined as follows:\n\n\n The left subtree of a node contains only nodes with keys **less than** the node's key.\n The right subtree of a node contains only nodes with keys **greater than** the node's key.\n Both the left and right subtrees must also be binary search trees.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [2,1,3]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** root = [5,1,4,null,null,3,6]",
                "Output": "** false",
                "Explanation": "** The root node's value is 5 but its right child's value is 4."
            }
        ]
    },
    {
        "Title": "Recover Binary Search Tree",
        "slug": "recover-binary-search-tree",
        "description": "You are given the `root` of a binary search tree (BST), where the values of **exactly** two nodes of the tree were swapped by mistake. *Recover the tree without changing its structure*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,3,null,null,2]",
                "Output": "** [3,1,null,null,2]",
                "Explanation": "** 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid."
            },
            {
                "Input": "** root = [3,1,4,null,null,2]",
                "Output": "** [2,1,4,null,null,3]",
                "Explanation": "** 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid."
            }
        ]
    },
    {
        "Title": "Same Tree",
        "slug": "same-tree",
        "description": "Given the roots of two binary trees `p` and `q`, write a function to check if they are the same or not.\n\n\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** p = [1,2,3], q = [1,2,3]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** p = [1,2], q = [1,null,2]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** p = [1,2,1], q = [1,1,2]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Symmetric Tree",
        "slug": "symmetric-tree",
        "description": "Given the `root` of a binary tree, *check whether it is a mirror of itself* (i.e., symmetric around its center).\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2,2,3,4,4,3]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** root = [1,2,2,null,3,null,3]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Tree Level Order Traversal",
        "slug": "binary-tree-level-order-traversal",
        "description": "Given the `root` of a binary tree, return *the level order traversal of its nodes' values*. (i.e., from left to right, level by level).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [3,9,20,null,null,15,7]",
                "Output": "** [[3],[9,20],[15,7]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Tree Zigzag Level Order Traversal",
        "slug": "binary-tree-zigzag-level-order-traversal",
        "description": "Given the `root` of a binary tree, return *the zigzag level order traversal of its nodes' values*. (i.e., from left to right, then right to left for the next level and alternate between).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [3,9,20,null,null,15,7]",
                "Output": "** [[3],[20,9],[15,7]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Depth of Binary Tree",
        "slug": "maximum-depth-of-binary-tree",
        "description": "Given the `root` of a binary tree, return *its maximum depth*.\n\n\nA binary tree's **maximum depth**\u00a0is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [3,9,20,null,null,15,7]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "slug": "construct-binary-tree-from-preorder-and-inorder-traversal",
        "description": "Given two integer arrays `preorder` and `inorder` where `preorder` is the preorder traversal of a binary tree and `inorder` is the inorder traversal of the same tree, construct and return *the binary tree*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Divide and Conquer",
            "Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]",
                "Output": "** [3,9,20,null,null,15,7]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "slug": "construct-binary-tree-from-inorder-and-postorder-traversal",
        "description": "Given two integer arrays `inorder` and `postorder` where `inorder` is the inorder traversal of a binary tree and `postorder` is the postorder traversal of the same tree, construct and return *the binary tree*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Divide and Conquer",
            "Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]",
                "Output": "** [3,9,20,null,null,15,7]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Tree Level Order Traversal II",
        "slug": "binary-tree-level-order-traversal-ii",
        "description": "Given the `root` of a binary tree, return *the bottom-up level order traversal of its nodes' values*. (i.e., from left to right, level by level from leaf to root).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [3,9,20,null,null,15,7]",
                "Output": "** [[15,7],[9,20],[3]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Convert Sorted Array to Binary Search Tree",
        "slug": "convert-sorted-array-to-binary-search-tree",
        "description": "Given an integer array `nums` where the elements are sorted in **ascending order**, convert *it to a* ***height-balanced*** *binary search tree*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Divide and Conquer",
            "Tree",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** nums = [-10,-3,0,5,9]",
                "Output": "** [0,-3,9,-10,null,5]",
                "Explanation": "** [0,-10,5,null,-3,null,9] is also accepted:\n![](https://assets.leetcode.com/uploads/2021/02/18/btree2.jpg)"
            },
            {
                "Input": "** nums = [1,3]",
                "Output": "** [3,1]",
                "Explanation": "** [1,null,3] and [3,1] are both height-balanced BSTs."
            }
        ]
    },
    {
        "Title": "Convert Sorted List to Binary Search Tree",
        "slug": "convert-sorted-list-to-binary-search-tree",
        "description": "Given the `head` of a singly linked list where elements are sorted in **ascending order**, convert *it to a* ***height-balanced*** *binary search tree*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Divide and Conquer",
            "Tree",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** head = [-10,-3,0,5,9]",
                "Output": "** [0,-3,9,-10,null,5]",
                "Explanation": "** One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST."
            }
        ]
    },
    {
        "Title": "Balanced Binary Tree",
        "slug": "balanced-binary-tree",
        "description": "Given a binary tree, determine if it is **height-balanced**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [3,9,20,null,null,15,7]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** root = [1,2,2,3,3,null,null,4,4]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Depth of Binary Tree",
        "slug": "minimum-depth-of-binary-tree",
        "description": "Given a binary tree, find its minimum depth.\n\n\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n\n\nNote:**\u00a0A leaf is a node with no children.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [3,9,20,null,null,15,7]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Path Sum",
        "slug": "path-sum",
        "description": "Given the `root` of a binary tree and an integer `targetSum`, return `true` if the tree has a **root-to-leaf** path such that adding up all the values along the path equals `targetSum`.\n\n\nA **leaf** is a node with no children.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22",
                "Output": "** true",
                "Explanation": "** The root-to-leaf path with the target sum is shown."
            },
            {
                "Input": "** root = [1,2,3], targetSum = 5",
                "Output": "** false",
                "Explanation": "** There two root-to-leaf paths in the tree:\n(1 --> 2): The sum is 3.\n(1 --> 3): The sum is 4.\nThere is no root-to-leaf path with sum = 5."
            }
        ]
    },
    {
        "Title": "Path Sum II",
        "slug": "path-sum-ii",
        "description": "Given the `root` of a binary tree and an integer `targetSum`, return *all **root-to-leaf** paths where the sum of the node values in the path equals* `targetSum`*. Each path should be returned as a list of the node **values**, not node references*.\n\n\nA **root-to-leaf** path is a path starting from the root and ending at any leaf node. A **leaf** is a node with no children.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Backtracking",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22",
                "Output": "** [[5,4,11,2],[5,8,4,5]]",
                "Explanation": "** There are two paths whose sum equals targetSum:\n5 + 4 + 11 + 2 = 22\n5 + 8 + 4 + 5 = 22"
            },
            {
                "Input": "** root = [1,2,3], targetSum = 5",
                "Output": "** []",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Flatten Binary Tree to Linked List",
        "slug": "flatten-binary-tree-to-linked-list",
        "description": "Given the `root` of a binary tree, flatten the tree into a \"linked list\":\n\n\n The \"linked list\" should use the same `TreeNode` class where the `right` child pointer points to the next node in the list and the `left` child pointer is always `null`.\n The \"linked list\" should be in the same order as a [**pre-order** **traversal**](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR) of the binary tree.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Stack",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2,5,3,4,null,6]",
                "Output": "** [1,null,2,null,3,null,4,null,5,null,6]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Distinct Subsequences",
        "slug": "distinct-subsequences",
        "description": "Given two strings s and t, return *the number of distinct* ***subsequences*** *of* s *which equals* t.\n\n\nThe test cases are generated so that the answer fits on a 32-bit signed integer.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"rabbbit\", t = \"rabbit\"",
                "Output": "** 3",
                "Explanation": "**\nAs shown below, there are 3 ways you can generate \"rabbit\" from s.\n**rabb**b**it**\n**ra**b**bbit**\n**rab**b**bit**"
            },
            {
                "Input": "** s = \"babgbag\", t = \"bag\"",
                "Output": "** 5",
                "Explanation": "**\nAs shown below, there are 5 ways you can generate \"bag\" from s.\n**ba**b**g**bag\n**ba**bgba**g**\n**b**abgb**ag**\nba**b**gb**ag**\nbabg**bag**"
            }
        ]
    },
    {
        "Title": "Populating Next Right Pointers in Each Node",
        "slug": "populating-next-right-pointers-in-each-node",
        "description": "You are given a **perfect binary tree** where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\n\n\n\n```\n\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n\n```\n\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`.\n\n\nInitially, all next pointers are set to `NULL`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2,3,4,5,6,7]",
                "Output": "** [1,#,2,3,#,4,5,6,7,#]",
                "Explanation": "** Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level."
            }
        ]
    },
    {
        "Title": "Populating Next Right Pointers in Each Node II",
        "slug": "populating-next-right-pointers-in-each-node-ii",
        "description": "Given a binary tree\n\n\n\n```\n\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n\n```\n\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`.\n\n\nInitially, all next pointers are set to `NULL`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2,3,4,5,null,7]",
                "Output": "** [1,#,2,3,#,4,5,7,#]",
                "Explanation": "** Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level."
            }
        ]
    },
    {
        "Title": "Pascal's Triangle",
        "slug": "pascals-triangle",
        "description": "Given an integer `numRows`, return the first numRows of **Pascal's triangle**.\n\n\nIn **Pascal's triangle**, each number is the sum of the two numbers directly above it as shown:\n\n\n![](https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif)\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** numRows = 5",
                "Output": "** [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]",
                "Explanation": null
            },
            {
                "Input": "** numRows = 1",
                "Output": "** [[1]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Pascal's Triangle II",
        "slug": "pascals-triangle-ii",
        "description": "Given an integer `rowIndex`, return the `rowIndexth` (**0-indexed**) row of the **Pascal's triangle**.\n\n\nIn **Pascal's triangle**, each number is the sum of the two numbers directly above it as shown:\n\n\n![](https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif)\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** rowIndex = 3",
                "Output": "** [1,3,3,1]",
                "Explanation": null
            },
            {
                "Input": "** rowIndex = 0",
                "Output": "** [1]",
                "Explanation": null
            },
            {
                "Input": "** rowIndex = 1",
                "Output": "** [1,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Triangle",
        "slug": "triangle",
        "description": "Given a `triangle` array, return *the minimum path sum from top to bottom*.\n\n\nFor each step, you may move to an adjacent number of the row below. More formally, if you are on index `i` on the current row, you may move to either index `i` or index `i + 1` on the next row.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]",
                "Output": "** 11",
                "Explanation": "** The triangle looks like:\n   2\n  3 4\n 6 5 7\n4 1 8 3\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above)."
            },
            {
                "Input": "** triangle = [[-10]]",
                "Output": "** -10",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Best Time to Buy and Sell Stock",
        "slug": "best-time-to-buy-and-sell-stock",
        "description": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.\n\n\nYou want to maximize your profit by choosing a **single day** to buy one stock and choosing a **different day in the future** to sell that stock.\n\n\nReturn *the maximum profit you can achieve from this transaction*. If you cannot achieve any profit, return `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** prices = [7,1,5,3,6,4]",
                "Output": "** 5",
                "Explanation": "** Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell."
            },
            {
                "Input": "** prices = [7,6,4,3,1]",
                "Output": "** 0",
                "Explanation": "** In this case, no transactions are done and the max profit = 0."
            }
        ]
    },
    {
        "Title": "Best Time to Buy and Sell Stock II",
        "slug": "best-time-to-buy-and-sell-stock-ii",
        "description": "You are given an integer array `prices` where `prices[i]` is the price of a given stock on the `ith` day.\n\n\nOn each day, you may decide to buy and/or sell the stock. You can only hold **at most one** share of the stock at any time. However, you can buy it then immediately sell it on the **same day**.\n\n\nFind and return *the **maximum** profit you can achieve*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** prices = [7,1,5,3,6,4]",
                "Output": "** 7",
                "Explanation": "** Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\nTotal profit is 4 + 3 = 7."
            },
            {
                "Input": "** prices = [1,2,3,4,5]",
                "Output": "** 4",
                "Explanation": "** Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nTotal profit is 4."
            },
            {
                "Input": "** prices = [7,6,4,3,1]",
                "Output": "** 0",
                "Explanation": "** There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0."
            }
        ]
    },
    {
        "Title": "Best Time to Buy and Sell Stock III",
        "slug": "best-time-to-buy-and-sell-stock-iii",
        "description": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.\n\n\nFind the maximum profit you can achieve. You may complete **at most two transactions**.\n\n\nNote:** You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** prices = [3,3,5,0,0,3,1,4]",
                "Output": "** 6",
                "Explanation": "** Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3."
            },
            {
                "Input": "** prices = [1,2,3,4,5]",
                "Output": "** 4",
                "Explanation": "** Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again."
            },
            {
                "Input": "** prices = [7,6,4,3,1]",
                "Output": "** 0",
                "Explanation": "** In this case, no transaction is done, i.e. max profit = 0."
            }
        ]
    },
    {
        "Title": "Binary Tree Maximum Path Sum",
        "slug": "binary-tree-maximum-path-sum",
        "description": "A **path** in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence **at most once**. Note that the path does not need to pass through the root.\n\n\nThe **path sum** of a path is the sum of the node's values in the path.\n\n\nGiven the `root` of a binary tree, return *the maximum **path sum** of any **non-empty** path*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2,3]",
                "Output": "** 6",
                "Explanation": "** The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6."
            },
            {
                "Input": "** root = [-10,9,20,null,null,15,7]",
                "Output": "** 42",
                "Explanation": "** The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42."
            }
        ]
    },
    {
        "Title": "Valid Palindrome",
        "slug": "valid-palindrome",
        "description": "A phrase is a **palindrome** if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\n\n\nGiven a string `s`, return `true` *if it is a **palindrome**, or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"A man, a plan, a canal: Panama\"",
                "Output": "** true",
                "Explanation": "** \"amanaplanacanalpanama\" is a palindrome."
            },
            {
                "Input": "** s = \"race a car\"",
                "Output": "** false",
                "Explanation": "** \"raceacar\" is not a palindrome."
            },
            {
                "Input": "** s = \" \"",
                "Output": "** true",
                "Explanation": "** s is an empty string \"\" after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome."
            }
        ]
    },
    {
        "Title": "Word Ladder II",
        "slug": "word-ladder-ii",
        "description": "A **transformation sequence** from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that:\n\n\n Every adjacent pair of words differs by a single letter.\n Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.\n `sk == endWord`\n\n\nGiven two words, `beginWord` and `endWord`, and a dictionary `wordList`, return *all the **shortest transformation sequences** from* `beginWord` *to* `endWord`*, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words* `[beginWord, s1, s2, ..., sk]`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "String",
            "Backtracking",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]",
                "Output": "** [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]",
                "Explanation": "**\u00a0There are 2 shortest transformation sequences:\n\"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\n\"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\""
            },
            {
                "Input": "** beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]",
                "Output": "** []",
                "Explanation": "** The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence."
            }
        ]
    },
    {
        "Title": "Word Ladder",
        "slug": "word-ladder",
        "description": "A **transformation sequence** from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that:\n\n\n Every adjacent pair of words differs by a single letter.\n Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.\n `sk == endWord`\n\n\nGiven two words, `beginWord` and `endWord`, and a dictionary `wordList`, return *the **number of words** in the **shortest transformation sequence** from* `beginWord` *to* `endWord`*, or* `0` *if no such sequence exists.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "String",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]",
                "Output": "** 5",
                "Explanation": "** One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long."
            },
            {
                "Input": "** beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]",
                "Output": "** 0",
                "Explanation": "** The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence."
            }
        ]
    },
    {
        "Title": "Longest Consecutive Sequence",
        "slug": "longest-consecutive-sequence",
        "description": "Given an unsorted array of integers `nums`, return *the length of the longest consecutive elements sequence.\n\n\nYou must write an algorithm that runs in\u00a0`O(n)`\u00a0time.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Union Find"
        ],
        "examples": [
            {
                "Input": "** nums = [100,4,200,1,3,2]",
                "Output": "** 4",
                "Explanation": "** The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4."
            },
            {
                "Input": "** nums = [0,3,7,2,5,8,4,6,0,1]",
                "Output": "** 9",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sum Root to Leaf Numbers",
        "slug": "sum-root-to-leaf-numbers",
        "description": "You are given the `root` of a binary tree containing digits from `0` to `9` only.\n\n\nEach root-to-leaf path in the tree represents a number.\n\n\n For example, the root-to-leaf path `1 -> 2 -> 3` represents the number `123`.\n\n\nReturn *the total sum of all root-to-leaf numbers*. Test cases are generated so that the answer will fit in a **32-bit** integer.\n\n\nA **leaf** node is a node with no children.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2,3]",
                "Output": "** 25",
                "Explanation": "**\nThe root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25."
            },
            {
                "Input": "** root = [4,9,0,5,1]",
                "Output": "** 1026",
                "Explanation": "**\nThe root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026."
            }
        ]
    },
    {
        "Title": "Surrounded Regions",
        "slug": "surrounded-regions",
        "description": "You are given an `m x n` matrix `board` containing **letters** `'X'` and `'O'`, **capture regions** that are **surrounded**:\n\n\n **Connect**: A cell is connected to adjacent cells horizontally or vertically.\n **Region**: To form a region **connect every** `'O'` cell.\n **Surround**: The region is surrounded with `'X'` cells if you can **connect the region** with `'X'` cells and none of the region cells are on the edge of the `board`.\n\n\nA **surrounded region is captured** by replacing all `'O'`s with `'X'`s in the input matrix `board`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]",
                "Output": "** [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]",
                "Explanation": "**\n\n\n![](https://assets.leetcode.com/uploads/2021/02/19/xogrid.jpg)\nIn the above diagram, the bottom region is not captured because it is on the edge of the board and cannot be surrounded."
            },
            {
                "Input": "** board = [[\"X\"]]",
                "Output": "** [[\"X\"]]\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == board.length`\n* `n == board[i].length`\n* `1 <= m, n <= 200`\n* `board[i][j]` is `'X'` or `'O'`.\n\n\nSimilarQuestions: [200, 286]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Palindrome Partitioning",
        "slug": "palindrome-partitioning",
        "description": "Given a string `s`, partition `s` such that every substring of the partition is a **palindrome**. Return *all possible palindrome partitioning of* `s`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** s = \"aab\"",
                "Output": "** [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]",
                "Explanation": null
            },
            {
                "Input": "** s = \"a\"",
                "Output": "** [[\"a\"]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Palindrome Partitioning II",
        "slug": "palindrome-partitioning-ii",
        "description": "Given a string `s`, partition `s` such that every substring of the partition is a palindrome.\n\n\nReturn *the **minimum** cuts needed for a palindrome partitioning of* `s`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"aab\"",
                "Output": "** 1",
                "Explanation": "** The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut."
            },
            {
                "Input": "** s = \"a\"",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** s = \"ab\"",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Clone Graph",
        "slug": "clone-graph",
        "description": "Given a reference of a node in a **[connected](https://en.wikipedia.org/wiki/Connectivity_(graph_theory)#Connected_graph)** undirected graph.\n\n\nReturn a [**deep copy**](https://en.wikipedia.org/wiki/Object_copying#Deep_copy) (clone) of the graph.\n\n\nEach node in the graph contains a value (`int`) and a list (`List[Node]`) of its neighbors.\n\n\n\n```\n\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n}\n\n```\n\n\u00a0\n\n\nTest case format:\n\n\nFor simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with `val == 1`, the second node with `val == 2`, and so on. The graph is represented in the test case using an adjacency list.\n\n\nAn adjacency list** is a collection of unordered **lists** used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\n\n\nThe given node will always be the first node with `val = 1`. You must return the **copy of the given node** as a reference to the cloned graph.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Depth-First Search",
            "Breadth-First Search",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** adjList = [[2,4],[1,3],[2,4],[1,3]]",
                "Output": "** [[2,4],[1,3],[2,4],[1,3]]",
                "Explanation": "** There are 4 nodes in the graph.\n1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3)."
            },
            {
                "Input": "** adjList = [[]]",
                "Output": "** [[]]",
                "Explanation": "** Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors."
            }
        ]
    },
    {
        "Title": "Gas Station",
        "slug": "gas-station",
        "description": "There are `n` gas stations along a circular route, where the amount of gas at the `ith` station is `gas[i]`.\n\n\nYou have a car with an unlimited gas tank and it costs `cost[i]` of gas to travel from the `ith` station to its next `(i + 1)th` station. You begin the journey with an empty tank at one of the gas stations.\n\n\nGiven two integer arrays `gas` and `cost`, return *the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return* `-1`. If there exists a solution, it is **guaranteed** to be **unique\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** gas = [1,2,3,4,5], cost = [3,4,5,1,2]",
                "Output": "** 3",
                "Explanation": "**\nStart at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\nTherefore, return 3 as the starting index."
            },
            {
                "Input": "** gas = [2,3,4], cost = [3,4,3]",
                "Output": "** -1",
                "Explanation": "**\nYou can't start at station 0 or 1, as there is not enough gas to travel to the next station.\nLet's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\nTherefore, you can't travel around the circuit once no matter where you start."
            }
        ]
    },
    {
        "Title": "Candy",
        "slug": "candy",
        "description": "There are `n` children standing in a line. Each child is assigned a rating value given in the integer array `ratings`.\n\n\nYou are giving candies to these children subjected to the following requirements:\n\n\n Each child must have at least one candy.\n Children with a higher rating get more candies than their neighbors.\n\n\nReturn *the minimum number of candies you need to have to distribute the candies to the children*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** ratings = [1,0,2]",
                "Output": "** 5",
                "Explanation": "** You can allocate to the first, second and third child with 2, 1, 2 candies respectively."
            },
            {
                "Input": "** ratings = [1,2,2]",
                "Output": "** 4",
                "Explanation": "** You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions."
            }
        ]
    },
    {
        "Title": "Single Number",
        "slug": "single-number",
        "description": "Given a **non-empty**\u00a0array of integers `nums`, every element appears *twice* except for one. Find that single one.\n\n\nYou must\u00a0implement a solution with a linear runtime complexity and use\u00a0only constant\u00a0extra space.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [2,2,1]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** nums = [4,1,2,1,2]",
                "Output": "** 4",
                "Explanation": null
            },
            {
                "Input": "** nums = [1]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Single Number II",
        "slug": "single-number-ii",
        "description": "Given an integer array `nums` where\u00a0every element appears **three times** except for one, which appears **exactly once**. *Find the single element and return it*.\n\n\nYou must\u00a0implement a solution with a linear runtime complexity and use\u00a0only constant\u00a0extra space.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [2,2,3,2]",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** nums = [0,1,0,1,0,1,99]",
                "Output": "** 99",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Copy List with Random Pointer",
        "slug": "copy-list-with-random-pointer",
        "description": "A linked list of length `n` is given such that each node contains an additional random pointer, which could point to any node in the list, or `null`.\n\n\nConstruct a [**deep copy**](https://en.wikipedia.org/wiki/Object_copying#Deep_copy) of the list. The deep copy should consist of exactly `n` **brand new** nodes, where each new node has its value set to the value of its corresponding original node. Both the `next` and `random` pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. **None of the pointers in the new list should point to nodes in the original list**.\n\n\nFor example, if there are two nodes `X` and `Y` in the original list, where `X.random --> Y`, then for the corresponding two nodes `x` and `y` in the copied list, `x.random --> y`.\n\n\nReturn *the head of the copied linked list*.\n\n\nThe linked list is represented in the input/output as a list of `n` nodes. Each node is represented as a pair of `[val, random_index]` where:\n\n\n `val`: an integer representing `Node.val`\n `random_index`: the index of the node (range from `0` to `n-1`) that the `random` pointer points to, or `null` if it does not point to any node.\n\n\nYour code will **only** be given the `head` of the original linked list.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Linked List"
        ],
        "examples": [
            {
                "Input": "** head = [[7,null],[13,0],[11,4],[10,2],[1,0]]",
                "Output": "** [[7,null],[13,0],[11,4],[10,2],[1,0]]",
                "Explanation": null
            },
            {
                "Input": "** head = [[1,1],[2,1]]",
                "Output": "** [[1,1],[2,1]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Word Break",
        "slug": "word-break",
        "description": "Given a string `s` and a dictionary of strings `wordDict`, return `true` if `s` can be segmented into a space-separated sequence of one or more dictionary words.\n\n\nNote** that the same word in the dictionary may be reused multiple times in the segmentation.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Dynamic Programming",
            "Trie",
            "Memoization"
        ],
        "examples": [
            {
                "Input": "** s = \"leetcode\", wordDict = [\"leet\",\"code\"]",
                "Output": "** true",
                "Explanation": "** Return true because \"leetcode\" can be segmented as \"leet code\"."
            },
            {
                "Input": "** s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]",
                "Output": "** true",
                "Explanation": "** Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\nNote that you are allowed to reuse a dictionary word."
            },
            {
                "Input": "** s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Word Break II",
        "slug": "word-break-ii",
        "description": "Given a string `s` and a dictionary of strings `wordDict`, add spaces in `s` to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in **any order**.\n\n\nNote** that the same word in the dictionary may be reused multiple times in the segmentation.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Dynamic Programming",
            "Backtracking",
            "Trie",
            "Memoization"
        ],
        "examples": [
            {
                "Input": "** s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]",
                "Output": "** [\"cats and dog\",\"cat sand dog\"]",
                "Explanation": null
            },
            {
                "Input": "** s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]",
                "Output": "** [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]",
                "Explanation": "** Note that you are allowed to reuse a dictionary word."
            },
            {
                "Input": "** s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]",
                "Output": "** []",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Linked List Cycle",
        "slug": "linked-list-cycle",
        "description": "Given `head`, the head of a linked list, determine if the linked list has a cycle in it.\n\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the\u00a0`next`\u00a0pointer. Internally, `pos`\u00a0is used to denote the index of the node that\u00a0tail's\u00a0`next`\u00a0pointer is connected to.\u00a0**Note that\u00a0`pos`\u00a0is not passed as a parameter**.\n\n\nReturn\u00a0`true` *if there is a cycle in the linked list*. Otherwise, return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "Linked List",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** head = [3,2,0,-4], pos = 1",
                "Output": "** true",
                "Explanation": "** There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed)."
            },
            {
                "Input": "** head = [1,2], pos = 0",
                "Output": "** true",
                "Explanation": "** There is a cycle in the linked list, where the tail connects to the 0th node."
            },
            {
                "Input": "** head = [1], pos = -1",
                "Output": "** false",
                "Explanation": "** There is no cycle in the linked list."
            }
        ]
    },
    {
        "Title": "Linked List Cycle II",
        "slug": "linked-list-cycle-ii",
        "description": "Given the `head` of a linked list, return *the node where the cycle begins. If there is no cycle, return* `null`.\n\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to (**0-indexed**). It is `-1` if there is no cycle. **Note that** `pos` **is not passed as a parameter**.\n\n\nDo not modify** the linked list.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Linked List",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** head = [3,2,0,-4], pos = 1",
                "Output": "** tail connects to node index 1",
                "Explanation": "** There is a cycle in the linked list, where tail connects to the second node."
            },
            {
                "Input": "** head = [1,2], pos = 0",
                "Output": "** tail connects to node index 0",
                "Explanation": "** There is a cycle in the linked list, where tail connects to the first node."
            },
            {
                "Input": "** head = [1], pos = -1",
                "Output": "** no cycle",
                "Explanation": "** There is no cycle in the linked list."
            }
        ]
    },
    {
        "Title": "Reorder List",
        "slug": "reorder-list",
        "description": "You are given the head of a singly linked-list. The list can be represented as:\n\n\n\n```\n\nL0 \u2192 L1 \u2192 \u2026 \u2192 Ln - 1 \u2192 Ln\n\n```\n\nReorder the list to be on the following form:\n\n\n\n```\n\nL0 \u2192 Ln \u2192 L1 \u2192 Ln - 1 \u2192 L2 \u2192 Ln - 2 \u2192 \u2026\n\n```\n\nYou may not modify the values in the list's nodes. Only nodes themselves may be changed.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Two Pointers",
            "Stack",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** head = [1,2,3,4]",
                "Output": "** [1,4,2,3]",
                "Explanation": null
            },
            {
                "Input": "** head = [1,2,3,4,5]",
                "Output": "** [1,5,2,4,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Tree Preorder Traversal",
        "slug": "binary-tree-preorder-traversal",
        "description": "Given the `root` of a binary tree, return *the preorder traversal of its nodes' values*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Stack",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,null,2,3]",
                "Output": "** [1,2,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Tree Postorder Traversal",
        "slug": "binary-tree-postorder-traversal",
        "description": "Given the `root` of a\u00a0binary tree, return *the postorder traversal of its nodes' values*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Stack",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,null,2,3]",
                "Output": "** [3,2,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "LRU Cache",
        "slug": "lru-cache",
        "description": "Design a data structure that follows the constraints of a **[Least Recently Used (LRU) cache](https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU)**.\n\n\nImplement the `LRUCache` class:\n\n\n `LRUCache(int capacity)` Initialize the LRU cache with **positive** size `capacity`.\n `int get(int key)` Return the value of the `key` if the key exists, otherwise return `-1`.\n `void put(int key, int value)` Update the value of the `key` if the `key` exists. Otherwise, add the `key-value` pair to the cache. If the number of keys exceeds the `capacity` from this operation, **evict** the least recently used key.\n\n\nThe functions `get` and `put` must each run in `O(1)` average time complexity.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Linked List",
            "Design",
            "Doubly-Linked List"
        ],
        "examples": [
            {
                "Input": "[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]",
                "Output": "[null, null, null, 1, null, -1, null, -1, 3, 4]",
                "Explanation": "LRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4"
            }
        ]
    },
    {
        "Title": "Insertion Sort List",
        "slug": "insertion-sort-list",
        "description": "Given the `head` of a singly linked list, sort the list using **insertion sort**, and return *the sorted list's head*.\n\n\nThe steps of the **insertion sort** algorithm:\n\n\n1. Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.\n2. At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.\n3. It repeats until no input elements remain.\n\n\nThe following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.\n\n\n![](https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif)\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** head = [4,2,1,3]",
                "Output": "** [1,2,3,4]",
                "Explanation": null
            },
            {
                "Input": "** head = [-1,5,3,4,0]",
                "Output": "** [-1,0,3,4,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sort List",
        "slug": "sort-list",
        "description": "Given the `head` of a linked list, return *the list after sorting it in **ascending order***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Two Pointers",
            "Divide and Conquer",
            "Sorting",
            "Merge Sort"
        ],
        "examples": [
            {
                "Input": "** head = [4,2,1,3]",
                "Output": "** [1,2,3,4]",
                "Explanation": null
            },
            {
                "Input": "** head = [-1,5,3,4,0]",
                "Output": "** [-1,0,3,4,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Max Points on a Line",
        "slug": "max-points-on-a-line",
        "description": "Given an array of `points` where `points[i] = [xi, yi]` represents a point on the **X-Y** plane, return *the maximum number of points that lie on the same straight line*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Geometry"
        ],
        "examples": [
            {
                "Input": "** points = [[1,1],[2,2],[3,3]]",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Evaluate Reverse Polish Notation",
        "slug": "evaluate-reverse-polish-notation",
        "description": "You are given an array of strings `tokens` that represents an arithmetic expression in a [Reverse Polish Notation](http://en.wikipedia.org/wiki/Reverse_Polish_notation).\n\n\nEvaluate the expression. Return *an integer that represents the value of the expression*.\n\n\nNote** that:\n\n\n The valid operators are `'+'`, `'-'`, `'*'`, and `'/'`.\n Each operand may be an integer or another expression.\n The division between two integers always **truncates toward zero**.\n There will not be any division by zero.\n The input represents a valid arithmetic expression in a reverse polish notation.\n The answer and all the intermediate calculations can be represented in a **32-bit** integer.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]",
                "Output": "** 9",
                "Explanation": "** ((2 + 1) * 3) = 9"
            },
            {
                "Input": "** tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]",
                "Output": "** 6",
                "Explanation": "** (4 + (13 / 5)) = 6"
            },
            {
                "Input": "** tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]",
                "Output": "** 22",
                "Explanation": "** ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22"
            }
        ]
    },
    {
        "Title": "Reverse Words in a String",
        "slug": "reverse-words-in-a-string",
        "description": "Given an input string `s`, reverse the order of the **words**.\n\n\nA **word** is defined as a sequence of non-space characters. The **words** in `s` will be separated by at least one space.\n\n\nReturn *a string of the words in reverse order concatenated by a single space.\n\n\nNote** that `s` may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"the sky is blue\"",
                "Output": "** \"blue is sky the\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"  hello world  \"",
                "Output": "** \"world hello\"",
                "Explanation": "** Your reversed string should not contain leading or trailing spaces."
            },
            {
                "Input": "** s = \"a good   example\"",
                "Output": "** \"example good a\"",
                "Explanation": "** You need to reduce multiple spaces between two words to a single space in the reversed string."
            }
        ]
    },
    {
        "Title": "Maximum Product Subarray",
        "slug": "maximum-product-subarray",
        "description": "Given an integer array `nums`, find a subarray that has the largest product, and return *the product*.\n\n\nThe test cases are generated so that the answer will fit in a **32-bit** integer.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [2,3,-2,4]",
                "Output": "** 6",
                "Explanation": "** [2,3] has the largest product 6."
            },
            {
                "Input": "** nums = [-2,0,-1]",
                "Output": "** 0",
                "Explanation": "** The result cannot be 2, because [-2,-1] is not a subarray."
            }
        ]
    },
    {
        "Title": "Find Minimum in Rotated Sorted Array",
        "slug": "find-minimum-in-rotated-sorted-array",
        "description": "Suppose an array of length `n` sorted in ascending order is **rotated** between `1` and `n` times. For example, the array `nums = [0,1,2,4,5,6,7]` might become:\n\n\n `[4,5,6,7,0,1,2]` if it was rotated `4` times.\n `[0,1,2,4,5,6,7]` if it was rotated `7` times.\n\n\nNotice that **rotating** an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.\n\n\nGiven the sorted rotated array `nums` of **unique** elements, return *the minimum element of this array*.\n\n\nYou must write an algorithm that runs in\u00a0`O(log n) time.`\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** nums = [3,4,5,1,2]",
                "Output": "** 1",
                "Explanation": "** The original array was [1,2,3,4,5] rotated 3 times."
            },
            {
                "Input": "** nums = [4,5,6,7,0,1,2]",
                "Output": "** 0",
                "Explanation": "** The original array was [0,1,2,4,5,6,7] and it was rotated 4 times."
            },
            {
                "Input": "** nums = [11,13,15,17]",
                "Output": "** 11",
                "Explanation": "** The original array was [11,13,15,17] and it was rotated 4 times."
            }
        ]
    },
    {
        "Title": "Find Minimum in Rotated Sorted Array II",
        "slug": "find-minimum-in-rotated-sorted-array-ii",
        "description": "Suppose an array of length `n` sorted in ascending order is **rotated** between `1` and `n` times. For example, the array `nums = [0,1,4,4,5,6,7]` might become:\n\n\n `[4,5,6,7,0,1,4]` if it was rotated `4` times.\n `[0,1,4,4,5,6,7]` if it was rotated `7` times.\n\n\nNotice that **rotating** an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.\n\n\nGiven the sorted rotated array `nums` that may contain **duplicates**, return *the minimum element of this array*.\n\n\nYou must decrease the overall operation steps as much as possible.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,5]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** nums = [2,2,2,0,1]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Min Stack",
        "slug": "min-stack",
        "description": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n\n\nImplement the `MinStack` class:\n\n\n `MinStack()` initializes the stack object.\n `void push(int val)` pushes the element `val` onto the stack.\n `void pop()` removes the element on the top of the stack.\n `int top()` gets the top element of the stack.\n `int getMin()` retrieves the minimum element in the stack.\n\n\nYou must implement a solution with `O(1)` time complexity for each function.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Stack",
            "Design"
        ],
        "examples": [
            {
                "Input": "[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]",
                "Output": "[null,null,null,null,-3,null,0,-2]",
                "Explanation": "MinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2"
            }
        ]
    },
    {
        "Title": "Intersection of Two Linked Lists",
        "slug": "intersection-of-two-linked-lists",
        "description": "Given the heads of two singly linked-lists `headA` and `headB`, return *the node at which the two lists intersect*. If the two linked lists have no intersection at all, return `null`.\n\n\nFor example, the following two linked lists begin to intersect at node `c1`:\n\n\n![](https://assets.leetcode.com/uploads/2021/03/05/160_statement.png)\nThe test cases are generated such that there are no cycles anywhere in the entire linked structure.\n\n\nNote** that the linked lists must **retain their original structure** after the function returns.\n\n\nCustom Judge:\n\n\nThe inputs to the **judge** are given as follows (your program is **not** given these inputs):\n\n\n `intersectVal` - The value of the node where the intersection occurs. This is `0` if there is no intersected node.\n `listA` - The first linked list.\n `listB` - The second linked list.\n `skipA` - The number of nodes to skip ahead in `listA` (starting from the head) to get to the intersected node.\n `skipB` - The number of nodes to skip ahead in `listB` (starting from the head) to get to the intersected node.\n\n\nThe judge will then create the linked structure based on these inputs and pass the two heads, `headA` and `headB` to your program. If you correctly return the intersected node, then your solution will be **accepted**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "Linked List",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3",
                "Output": "** Intersected at '8'",
                "Explanation": "** The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n- Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory."
            },
            {
                "Input": "** intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1",
                "Output": "** Intersected at '2'",
                "Explanation": "** The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B."
            },
            {
                "Input": "** intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2",
                "Output": "** No intersection",
                "Explanation": "** From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null."
            }
        ]
    },
    {
        "Title": "Find Peak Element",
        "slug": "find-peak-element",
        "description": "A peak element is an element that is strictly greater than its neighbors.\n\n\nGiven a **0-indexed** integer array `nums`, find a peak element, and return its index. If the array contains multiple peaks, return the index to **any of the peaks**.\n\n\nYou may imagine that `nums[-1] = nums[n] = -\u221e`. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.\n\n\nYou must write an algorithm that runs in `O(log n)` time.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,1]",
                "Output": "** 2",
                "Explanation": "** 3 is a peak element and your function should return the index number 2."
            },
            {
                "Input": "** nums = [1,2,1,3,5,6,4]",
                "Output": "** 5",
                "Explanation": "** Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6."
            }
        ]
    },
    {
        "Title": "Maximum Gap",
        "slug": "maximum-gap",
        "description": "Given an integer array `nums`, return *the maximum difference between two successive elements in its sorted form*. If the array contains less than two elements, return `0`.\n\n\nYou must write an algorithm that runs in linear time and uses linear extra space.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sorting",
            "Bucket Sort",
            "Radix Sort"
        ],
        "examples": [
            {
                "Input": "** nums = [3,6,9,1]",
                "Output": "** 3",
                "Explanation": "** The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3."
            },
            {
                "Input": "** nums = [10]",
                "Output": "** 0",
                "Explanation": "** The array contains less than 2 elements, therefore return 0."
            }
        ]
    },
    {
        "Title": "Compare Version Numbers",
        "slug": "compare-version-numbers",
        "description": "Given two **version strings**, `version1` and `version2`, compare them. A version string consists of **revisions** separated by dots `'.'`. The **value of the revision** is its **integer conversion** ignoring leading zeros.\n\n\nTo compare version strings, compare their revision values in **left-to-right order**. If one of the version strings has fewer revisions, treat the missing revision values as `0`.\n\n\nReturn the following:\n\n\n If `version1 < version2`, return -1.\n If `version1 > version2`, return 1.\n Otherwise, return 0.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** version1 = \"1.2\", version2 = \"1.10\"",
                "Output": "** -1",
                "Explanation": "**\n\n\nversion1's second revision is \"2\" and version2's second revision is \"10\": 2 < 10, so version1 < version2."
            },
            {
                "Input": "** version1 = \"1.01\", version2 = \"1.001\"",
                "Output": "** 0",
                "Explanation": "**\n\n\nIgnoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\"."
            },
            {
                "Input": "** version1 = \"1.0\", version2 = \"1.0.0.0\"",
                "Output": "** 0",
                "Explanation": "**\n\n\nversion1 has less revisions, which means every missing revision are treated as \"0\".\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= version1.length, version2.length <= 500`\n* `version1` and `version2`\u00a0only contain digits and `'.'`.\n* `version1` and `version2`\u00a0**are valid version numbers**.\n* All the given revisions in\u00a0`version1` and `version2`\u00a0can be stored in\u00a0a\u00a0**32-bit integer**.\n\n\nHints:\n    0. You can use two pointers for each version string to traverse them together while comparing the corresponding segments.\n    1. Utilize the substring method to extract each version segment delimited by '.'. Ensure you're extracting the segments correctly by adjusting the start and end indices accordingly."
            }
        ]
    },
    {
        "Title": "Fraction to Recurring Decimal",
        "slug": "fraction-to-recurring-decimal",
        "description": "Given two integers representing the `numerator` and `denominator` of a fraction, return *the fraction in string format*.\n\n\nIf the fractional part is repeating, enclose the repeating part in parentheses.\n\n\nIf multiple answers are possible, return **any of them**.\n\n\nIt is **guaranteed** that the length of the answer string is less than `104` for all the given inputs.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Math",
            "String"
        ],
        "examples": [
            {
                "Input": "** numerator = 1, denominator = 2",
                "Output": "** \"0.5\"",
                "Explanation": null
            },
            {
                "Input": "** numerator = 2, denominator = 1",
                "Output": "** \"2\"",
                "Explanation": null
            },
            {
                "Input": "** numerator = 4, denominator = 333",
                "Output": "** \"0.(012)\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Two Sum II - Input Array Is Sorted",
        "slug": "two-sum-ii-input-array-is-sorted",
        "description": "Given a **1-indexed** array of integers `numbers` that is already ***sorted in non-decreasing order***, find two numbers such that they add up to a specific `target` number. Let these two numbers be `numbers[index1]` and `numbers[index2]` where `1 <= index1 < index2 <= numbers.length`.\n\n\nReturn *the indices of the two numbers,* `index1` *and* `index2`*, **added by one** as an integer array* `[index1, index2]` *of length 2.\n\n\nThe tests are generated such that there is **exactly one solution**. You **may not** use the same element twice.\n\n\nYour solution must use only constant extra space.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** numbers = [2,7,11,15], target = 9",
                "Output": "** [1,2]",
                "Explanation": "** The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2]."
            },
            {
                "Input": "** numbers = [2,3,4], target = 6",
                "Output": "** [1,3]",
                "Explanation": "** The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3]."
            },
            {
                "Input": "** numbers = [-1,0], target = -1",
                "Output": "** [1,2]",
                "Explanation": "** The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2]."
            }
        ]
    },
    {
        "Title": "Excel Sheet Column Title",
        "slug": "excel-sheet-column-title",
        "description": "Given an integer `columnNumber`, return *its corresponding column title as it appears in an Excel sheet*.\n\n\nFor example:\n\n\n\n```\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n\n```\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "String"
        ],
        "examples": [
            {
                "Input": "** columnNumber = 1",
                "Output": "** \"A\"",
                "Explanation": null
            },
            {
                "Input": "** columnNumber = 28",
                "Output": "** \"AB\"",
                "Explanation": null
            },
            {
                "Input": "** columnNumber = 701",
                "Output": "** \"ZY\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Majority Element",
        "slug": "majority-element",
        "description": "Given an array `nums` of size `n`, return *the majority element*.\n\n\nThe majority element is the element that appears more than `\u230an / 2\u230b` times. You may assume that the majority element always exists in the array.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Divide and Conquer",
            "Sorting",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [3,2,3]",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** nums = [2,2,1,1,1,2,2]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Excel Sheet Column Number",
        "slug": "excel-sheet-column-number",
        "description": "Given a string `columnTitle` that represents the column title as appears in an Excel sheet, return *its corresponding column number*.\n\n\nFor example:\n\n\n\n```\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n\n```\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "String"
        ],
        "examples": [
            {
                "Input": "** columnTitle = \"A\"",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** columnTitle = \"AB\"",
                "Output": "** 28",
                "Explanation": null
            },
            {
                "Input": "** columnTitle = \"ZY\"",
                "Output": "** 701",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Factorial Trailing Zeroes",
        "slug": "factorial-trailing-zeroes",
        "description": "Given an integer `n`, return *the number of trailing zeroes in* `n!`.\n\n\nNote that `n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** 0",
                "Explanation": "** 3! = 6, no trailing zero."
            },
            {
                "Input": "** n = 5",
                "Output": "** 1",
                "Explanation": "** 5! = 120, one trailing zero."
            },
            {
                "Input": "** n = 0",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Search Tree Iterator",
        "slug": "binary-search-tree-iterator",
        "description": "Implement the `BSTIterator` class that represents an iterator over the **[in-order traversal](https://en.wikipedia.org/wiki/Tree_traversal#In-order_(LNR))** of a binary search tree (BST):\n\n\n `BSTIterator(TreeNode root)` Initializes an object of the `BSTIterator` class. The `root` of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\n `boolean hasNext()` Returns `true` if there exists a number in the traversal to the right of the pointer, otherwise returns `false`.\n `int next()` Moves the pointer to the right, then returns the number at the pointer.\n\n\nNotice that by initializing the pointer to a non-existent smallest number, the first call to `next()` will return the smallest element in the BST.\n\n\nYou may assume that `next()` calls will always be valid. That is, there will be at least a next number in the in-order traversal when `next()` is called.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Stack",
            "Tree",
            "Design",
            "Binary Search Tree",
            "Binary Tree",
            "Iterator"
        ],
        "examples": [
            {
                "Input": "[\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]",
                "Output": "[null, 3, 7, true, 9, true, 15, true, 20, false]",
                "Explanation": "BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\nbSTIterator.next();    // return 3\nbSTIterator.next();    // return 7\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 9\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 15\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 20\nbSTIterator.hasNext(); // return False"
            }
        ]
    },
    {
        "Title": "Dungeon Game",
        "slug": "dungeon-game",
        "description": "The demons had captured the princess and imprisoned her in **the bottom-right corner** of a `dungeon`. The `dungeon` consists of `m x n` rooms laid out in a 2D grid. Our valiant knight was initially positioned in **the top-left room** and must fight his way through `dungeon` to rescue the princess.\n\n\nThe knight has an initial health point represented by a positive integer. If at any point his health point drops to `0` or below, he dies immediately.\n\n\nSome of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n\n\nTo reach the princess as quickly as possible, the knight decides to move only **rightward** or **downward** in each step.\n\n\nReturn *the knight's minimum initial health so that he can rescue the princess*.\n\n\nNote** that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]",
                "Output": "** 7",
                "Explanation": "** The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN."
            }
        ]
    },
    {
        "Title": "Combine Two Tables",
        "slug": "combine-two-tables",
        "description": "Table: `Person`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| personId    | int     |\n| lastName    | varchar |\n| firstName   | varchar |\n+-------------+---------+\npersonId is the primary key (column with unique values) for this table.\nThis table contains information about the ID of some persons and their first and last names.\n\n```\n\n\u00a0\n\n\nTable: `Address`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| addressId   | int     |\n| personId    | int     |\n| city        | varchar |\n| state       | varchar |\n+-------------+---------+\naddressId is the primary key (column with unique values) for this table.\nEach row of this table contains information about the city and state of one person with ID = PersonId.\n\n```\n\n\u00a0\n\n\nWrite a solution to report the first name, last name, city, and state of each person in the `Person` table. If the address of a `personId` is not present in the `Address` table, report `null` instead.\n\n\nReturn the result table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nPerson table:\n+----------+----------+-----------+\n| personId | lastName | firstName |\n+----------+----------+-----------+\n| 1        | Wang     | Allen     |\n| 2        | Alice    | Bob       |\n+----------+----------+-----------+\nAddress table:\n+-----------+----------+---------------+------------+\n| addressId | personId | city          | state      |\n+-----------+----------+---------------+------------+\n| 1         | 2        | New York City | New York   |\n| 2         | 3        | Leetcode      | California |\n+-----------+----------+---------------+------------+",
                "Output": "** \n+-----------+----------+---------------+----------+\n| firstName | lastName | city          | state    |\n+-----------+----------+---------------+----------+\n| Allen     | Wang     | Null          | Null     |\n| Bob       | Alice    | New York City | New York |\n+-----------+----------+---------------+----------+",
                "Explanation": "** \nThere is no address in the address table for the personId = 1 so we return null in their city and state.\naddressId = 1 contains information about the address of personId = 2."
            }
        ]
    },
    {
        "Title": "Second Highest Salary",
        "slug": "second-highest-salary",
        "description": "Table: `Employee`\n\n\n\n```\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| salary      | int  |\n+-------------+------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains information about the salary of an employee.\n\n```\n\n\u00a0\n\n\nWrite a solution to find\u00a0the second highest salary from the `Employee` table. If there is no second highest salary,\u00a0return\u00a0`null (return\u00a0None in Pandas)`.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+",
                "Output": "** \n+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| 200                 |\n+---------------------+",
                "Explanation": null
            },
            {
                "Input": "** \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n+----+--------+",
                "Output": "** \n+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| null                |\n+---------------------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Nth Highest Salary",
        "slug": "nth-highest-salary",
        "description": "Table: `Employee`\n\n\n\n```\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| salary      | int  |\n+-------------+------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains information about the salary of an employee.\n\n```\n\n\u00a0\n\n\nWrite a solution to find the `nth` highest salary from the `Employee` table. If there is no `nth` highest salary, return\u00a0`null`.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\nn = 2",
                "Output": "** \n+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| 200                    |\n+------------------------+",
                "Explanation": null
            },
            {
                "Input": "** \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n+----+--------+\nn = 2",
                "Output": "** \n+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| null                   |\n+------------------------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Rank Scores",
        "slug": "rank-scores",
        "description": "Table: `Scores`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| score       | decimal |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains the score of a game. Score is a floating point value with two decimal places.\n\n```\n\n\u00a0\n\n\nWrite a solution to find the rank of the scores. The ranking should be calculated according to the following rules:\n\n\n The scores should be ranked from the highest to the lowest.\n If there is a tie between two scores, both should have the same ranking.\n After a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no holes between ranks.\n\n\nReturn the result table ordered by `score` in descending order.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nScores table:\n+----+-------+\n| id | score |\n+----+-------+\n| 1  | 3.50  |\n| 2  | 3.65  |\n| 3  | 4.00  |\n| 4  | 3.85  |\n| 5  | 4.00  |\n| 6  | 3.65  |\n+----+-------+",
                "Output": "** \n+-------+------+\n| score | rank |\n+-------+------+\n| 4.00  | 1    |\n| 4.00  | 1    |\n| 3.85  | 2    |\n| 3.65  | 3    |\n| 3.65  | 3    |\n| 3.50  | 4    |\n+-------+------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Largest Number",
        "slug": "largest-number",
        "description": "Given a list of non-negative integers `nums`, arrange them such that they form the largest number and return it.\n\n\nSince the result may be very large, so you need to return a string instead of an integer.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [10,2]",
                "Output": "** \"210\"",
                "Explanation": null
            },
            {
                "Input": "** nums = [3,30,34,5,9]",
                "Output": "** \"9534330\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Consecutive Numbers",
        "slug": "consecutive-numbers",
        "description": "Table: `Logs`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| num         | varchar |\n+-------------+---------+\nIn SQL, id is the primary key for this table.\nid is an autoincrement column.\n\n```\n\n\u00a0\n\n\nFind all numbers that appear at least three times consecutively.\n\n\nReturn the result table in **any order**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nLogs table:\n+----+-----+\n| id | num |\n+----+-----+\n| 1  | 1   |\n| 2  | 1   |\n| 3  | 1   |\n| 4  | 2   |\n| 5  | 1   |\n| 6  | 2   |\n| 7  | 2   |\n+----+-----+",
                "Output": "** \n+-----------------+\n| ConsecutiveNums |\n+-----------------+\n| 1               |\n+-----------------+",
                "Explanation": "** 1 is the only number that appears consecutively for at least three times."
            }
        ]
    },
    {
        "Title": "Employees Earning More Than Their Managers",
        "slug": "employees-earning-more-than-their-managers",
        "description": "Table: `Employee`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n| salary      | int     |\n| managerId   | int     |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\n\n```\n\n\u00a0\n\n\nWrite a solution\u00a0to find the employees who earn more than their managers.\n\n\nReturn the result table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nEmployee table:\n+----+-------+--------+-----------+\n| id | name  | salary | managerId |\n+----+-------+--------+-----------+\n| 1  | Joe   | 70000  | 3         |\n| 2  | Henry | 80000  | 4         |\n| 3  | Sam   | 60000  | Null      |\n| 4  | Max   | 90000  | Null      |\n+----+-------+--------+-----------+",
                "Output": "** \n+----------+\n| Employee |\n+----------+\n| Joe      |\n+----------+",
                "Explanation": "** Joe is the only employee who earns more than his manager."
            }
        ]
    },
    {
        "Title": "Duplicate Emails",
        "slug": "duplicate-emails",
        "description": "Table: `Person`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| email       | varchar |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains an email. The emails will not contain uppercase letters.\n\n```\n\n\u00a0\n\n\nWrite a solution to report all the duplicate emails. Note that it's guaranteed that the email\u00a0field is not NULL.\n\n\nReturn the result table in **any order**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nPerson table:\n+----+---------+\n| id | email   |\n+----+---------+\n| 1  | a@b.com |\n| 2  | c@d.com |\n| 3  | a@b.com |\n+----+---------+",
                "Output": "** \n+---------+\n| Email   |\n+---------+\n| a@b.com |\n+---------+",
                "Explanation": "** a@b.com is repeated two times."
            }
        ]
    },
    {
        "Title": "Customers Who Never Order",
        "slug": "customers-who-never-order",
        "description": "Table: `Customers`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table indicates the ID and name of a customer.\n\n```\n\n\u00a0\n\n\nTable: `Orders`\n\n\n\n```\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| customerId  | int  |\n+-------------+------+\nid is the primary key (column with unique values) for this table.\ncustomerId is a foreign key (reference columns) of the ID from the Customers table.\nEach row of this table indicates the ID of an order and the ID of the customer who ordered it.\n\n```\n\n\u00a0\n\n\nWrite a solution to find all customers who never order anything.\n\n\nReturn the result table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nCustomers table:\n+----+-------+\n| id | name  |\n+----+-------+\n| 1  | Joe   |\n| 2  | Henry |\n| 3  | Sam   |\n| 4  | Max   |\n+----+-------+\nOrders table:\n+----+------------+\n| id | customerId |\n+----+------------+\n| 1  | 3          |\n| 2  | 1          |\n+----+------------+",
                "Output": "** \n+-----------+\n| Customers |\n+-----------+\n| Henry     |\n| Max       |\n+-----------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Department Highest Salary",
        "slug": "department-highest-salary",
        "description": "Table: `Employee`\n\n\n\n```\n\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| id           | int     |\n| name         | varchar |\n| salary       | int     |\n| departmentId | int     |\n+--------------+---------+\nid is the primary key (column with unique values) for this table.\ndepartmentId is a foreign key (reference columns) of the ID from the Department table.\nEach row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.\n\n```\n\n\u00a0\n\n\nTable: `Department`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n+-------------+---------+\nid is the primary key (column with unique values) for this table. It is guaranteed that department name is not NULL.\nEach row of this table indicates the ID of a department and its name.\n\n```\n\n\u00a0\n\n\nWrite a solution to find employees who have the highest salary in each of the departments.\n\n\nReturn the result table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nEmployee table:\n+----+-------+--------+--------------+\n| id | name  | salary | departmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 70000  | 1            |\n| 2  | Jim   | 90000  | 1            |\n| 3  | Henry | 80000  | 2            |\n| 4  | Sam   | 60000  | 2            |\n| 5  | Max   | 90000  | 1            |\n+----+-------+--------+--------------+\nDepartment table:\n+----+-------+\n| id | name  |\n+----+-------+\n| 1  | IT    |\n| 2  | Sales |\n+----+-------+",
                "Output": "** \n+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Jim      | 90000  |\n| Sales      | Henry    | 80000  |\n| IT         | Max      | 90000  |\n+------------+----------+--------+",
                "Explanation": "** Max and Jim both have the highest salary in the IT department and Henry has the highest salary in the Sales department."
            }
        ]
    },
    {
        "Title": "Department Top Three Salaries",
        "slug": "department-top-three-salaries",
        "description": "Table: `Employee`\n\n\n\n```\n\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| id           | int     |\n| name         | varchar |\n| salary       | int     |\n| departmentId | int     |\n+--------------+---------+\nid is the primary key (column with unique values) for this table.\ndepartmentId is a foreign key (reference column) of the ID from the Department table.\nEach row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.\n\n```\n\n\u00a0\n\n\nTable: `Department`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table indicates the ID of a department and its name.\n\n```\n\n\u00a0\n\n\nA company's executives are interested in seeing who earns the most money in each of the company's departments. A **high earner** in a department is an employee who has a salary in the **top three unique** salaries for that department.\n\n\nWrite a solution to find the employees who are **high earners** in each of the departments.\n\n\nReturn the result table **in any order**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nEmployee table:\n+----+-------+--------+--------------+\n| id | name  | salary | departmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 85000  | 1            |\n| 2  | Henry | 80000  | 2            |\n| 3  | Sam   | 60000  | 2            |\n| 4  | Max   | 90000  | 1            |\n| 5  | Janet | 69000  | 1            |\n| 6  | Randy | 85000  | 1            |\n| 7  | Will  | 70000  | 1            |\n+----+-------+--------+--------------+\nDepartment table:\n+----+-------+\n| id | name  |\n+----+-------+\n| 1  | IT    |\n| 2  | Sales |\n+----+-------+",
                "Output": "** \n+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Max      | 90000  |\n| IT         | Joe      | 85000  |\n| IT         | Randy    | 85000  |\n| IT         | Will     | 70000  |\n| Sales      | Henry    | 80000  |\n| Sales      | Sam      | 60000  |\n+------------+----------+--------+",
                "Explanation": "** \nIn the IT department:\n- Max earns the highest unique salary\n- Both Randy and Joe earn the second-highest unique salary\n- Will earns the third-highest unique salary\n\nIn the Sales department:\n- Henry earns the highest salary\n- Sam earns the second-highest salary\n- There is no third-highest salary as there are only two employees"
            }
        ]
    },
    {
        "Title": "Repeated DNA Sequences",
        "slug": "repeated-dna-sequences",
        "description": "The **DNA sequence** is composed of a series of nucleotides abbreviated as `'A'`, `'C'`, `'G'`, and `'T'`.\n\n\n For example, `\"ACGAATTCCG\"` is a **DNA sequence**.\n\n\nWhen studying **DNA**, it is useful to identify repeated sequences within the DNA.\n\n\nGiven a string `s` that represents a **DNA sequence**, return all the **`10`-letter-long** sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Bit Manipulation",
            "Sliding Window",
            "Rolling Hash",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "** s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"",
                "Output": "** [\"AAAAACCCCC\",\"CCCCCAAAAA\"]",
                "Explanation": null
            },
            {
                "Input": "** s = \"AAAAAAAAAAAAA\"",
                "Output": "** [\"AAAAAAAAAA\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Best Time to Buy and Sell Stock IV",
        "slug": "best-time-to-buy-and-sell-stock-iv",
        "description": "You are given an integer array `prices` where `prices[i]` is the price of a given stock on the `ith` day, and an integer `k`.\n\n\nFind the maximum profit you can achieve. You may complete at most `k` transactions: i.e. you may buy at most `k` times and sell at most `k` times.\n\n\nNote:** You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** k = 2, prices = [2,4,1]",
                "Output": "** 2",
                "Explanation": "** Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2."
            },
            {
                "Input": "** k = 2, prices = [3,2,6,5,0,3]",
                "Output": "** 7",
                "Explanation": "** Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3."
            }
        ]
    },
    {
        "Title": "Rotate Array",
        "slug": "rotate-array",
        "description": "Given an integer array `nums`, rotate the array to the right by `k` steps, where `k` is non-negative.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5,6,7], k = 3",
                "Output": "** [5,6,7,1,2,3,4]",
                "Explanation": "**\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]"
            },
            {
                "Input": "** nums = [-1,-100,3,99], k = 2",
                "Output": "** [3,99,-1,-100]",
                "Explanation": "** \nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]"
            }
        ]
    },
    {
        "Title": "Reverse Bits",
        "slug": "reverse-bits",
        "description": "Reverse bits of a given 32 bits unsigned integer.\n\n\nNote:\n\n\n Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\n In Java, the compiler represents the signed integers using [2's complement notation](https://en.wikipedia.org/wiki/Two%27s_complement). Therefore, in **Example 2** above, the input represents the signed integer `-3` and the output represents the signed integer `-1073741825`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Divide and Conquer",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** n = 00000010100101000001111010011100",
                "Output": "**    964176192 (00111001011110000010100101000000)",
                "Explanation": "** The input binary string **00000010100101000001111010011100** represents the unsigned integer 43261596, so return 964176192 which its binary representation is **00111001011110000010100101000000**."
            },
            {
                "Input": "** n = 11111111111111111111111111111101",
                "Output": "**   3221225471 (10111111111111111111111111111111)",
                "Explanation": "** The input binary string **11111111111111111111111111111101** represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is **10111111111111111111111111111111**."
            }
        ]
    },
    {
        "Title": "Number of 1 Bits",
        "slug": "number-of-1-bits",
        "description": "Write a function that takes the binary representation of a positive integer and returns the number of set bits it has (also known as the [Hamming weight](http://en.wikipedia.org/wiki/Hamming_weight)).\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Divide and Conquer",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** n = 11",
                "Output": "** 3",
                "Explanation": "**\n\n\nThe input binary string **1011** has a total of three set bits."
            },
            {
                "Input": "** n = 128",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe input binary string **10000000** has a total of one set bit."
            },
            {
                "Input": "** n = 2147483645",
                "Output": "** 30",
                "Explanation": "**\n\n\nThe input binary string **1111111111111111111111111111101** has a total of thirty set bits.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n\u00a0<= 231\u00a0- 1`\n\n\n\u00a0\n\n\n**Follow up:** If this function is called many times, how would you optimize it?SimilarQuestions: [190, 231, 338, 401, 461, 693, 762]"
            }
        ]
    },
    {
        "Title": "Delete Duplicate Emails",
        "slug": "delete-duplicate-emails",
        "description": "Table: `Person`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| email       | varchar |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains an email. The emails will not contain uppercase letters.\n\n```\n\n\u00a0\n\n\nWrite a solution to **delete** all duplicate emails, keeping only one unique email with the smallest `id`.\n\n\nFor SQL users, please note that you are supposed to write a `DELETE` statement and not a `SELECT` one.\n\n\nFor Pandas users, please note that you are supposed to modify `Person` in place.\n\n\nAfter running your script, the answer shown is the `Person` table. The driver will first compile and run your piece of code and then show the `Person` table. The final order of the `Person` table **does not matter**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nPerson table:\n+----+------------------+\n| id | email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n| 3  | john@example.com |\n+----+------------------+",
                "Output": "** \n+----+------------------+\n| id | email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n+----+------------------+",
                "Explanation": "** john@example.com is repeated two times. We keep the row with the smallest Id = 1."
            }
        ]
    },
    {
        "Title": "Rising Temperature",
        "slug": "rising-temperature",
        "description": "Table: `Weather`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| recordDate    | date    |\n| temperature   | int     |\n+---------------+---------+\nid is the column with unique values for this table.\nThere are no different rows with the same recordDate.\nThis table contains information about the temperature on a certain day.\n\n```\n\n\u00a0\n\n\nWrite a solution to find all dates' `Id` with higher temperatures compared to its previous dates (yesterday).\n\n\nReturn the result table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nWeather table:\n+----+------------+-------------+\n| id | recordDate | temperature |\n+----+------------+-------------+\n| 1  | 2015-01-01 | 10          |\n| 2  | 2015-01-02 | 25          |\n| 3  | 2015-01-03 | 20          |\n| 4  | 2015-01-04 | 30          |\n+----+------------+-------------+",
                "Output": "** \n+----+\n| id |\n+----+\n| 2  |\n| 4  |\n+----+",
                "Explanation": "** \nIn 2015-01-02, the temperature was higher than the previous day (10 -> 25).\nIn 2015-01-04, the temperature was higher than the previous day (20 -> 30)."
            }
        ]
    },
    {
        "Title": "House Robber",
        "slug": "house-robber",
        "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and **it will automatically contact the police if two adjacent houses were broken into on the same night**.\n\n\nGiven an integer array `nums` representing the amount of money of each house, return *the maximum amount of money you can rob tonight **without alerting the police***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,1]",
                "Output": "** 4",
                "Explanation": "** Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4."
            },
            {
                "Input": "** nums = [2,7,9,3,1]",
                "Output": "** 12",
                "Explanation": "** Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12."
            }
        ]
    },
    {
        "Title": "Binary Tree Right Side View",
        "slug": "binary-tree-right-side-view",
        "description": "Given the `root` of a binary tree, imagine yourself standing on the **right side** of it, return *the values of the nodes you can see ordered from top to bottom*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2,3,null,5,null,4]",
                "Output": "** [1,3,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Islands",
        "slug": "number-of-islands",
        "description": "Given an `m x n` 2D binary grid `grid` which represents a map of `'1'`s (land) and `'0'`s (water), return *the number of islands*.\n\n\nAn **island** is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** grid = [\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\n]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Bitwise AND of Numbers Range",
        "slug": "bitwise-and-of-numbers-range",
        "description": "Given two integers `left` and `right` that represent the range `[left, right]`, return *the bitwise AND of all numbers in this range, inclusive*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** left = 5, right = 7",
                "Output": "** 4",
                "Explanation": null
            },
            {
                "Input": "** left = 0, right = 0",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** left = 1, right = 2147483647",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Happy Number",
        "slug": "happy-number",
        "description": "Write an algorithm to determine if a number `n` is happy.\n\n\nA **happy number** is a number defined by the following process:\n\n\n Starting with any positive integer, replace the number by the sum of the squares of its digits.\n Repeat the process until the number equals 1 (where it will stay), or it **loops endlessly in a cycle** which does not include 1.\n Those numbers for which this process **ends in 1** are happy.\n\n\nReturn `true` *if* `n` *is a happy number, and* `false` *if not*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "Math",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** n = 19",
                "Output": "** true",
                "Explanation": "**\n12 + 92 = 82\n82 + 22 = 68\n62 + 82 = 100\n12 + 02 + 02 = 1"
            },
            {
                "Input": "** n = 2",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove Linked List Elements",
        "slug": "remove-linked-list-elements",
        "description": "Given the `head` of a linked list and an integer `val`, remove all the nodes of the linked list that has `Node.val == val`, and return *the new head*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Linked List",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** head = [1,2,6,3,4,5,6], val = 6",
                "Output": "** [1,2,3,4,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count Primes",
        "slug": "count-primes",
        "description": "Given an integer `n`, return *the number of prime numbers that are strictly less than* `n`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Enumeration",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** n = 10",
                "Output": "** 4",
                "Explanation": "** There are 4 prime numbers less than 10, they are 2, 3, 5, 7."
            },
            {
                "Input": "** n = 0",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** n = 1",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Isomorphic Strings",
        "slug": "isomorphic-strings",
        "description": "Given two strings `s` and `t`, *determine if they are isomorphic*.\n\n\nTwo strings `s` and `t` are isomorphic if the characters in `s` can be replaced to get `t`.\n\n\nAll occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"egg\", t = \"add\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"foo\", t = \"bar\"",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** s = \"paper\", t = \"title\"",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reverse Linked List",
        "slug": "reverse-linked-list",
        "description": "Given the `head` of a singly linked list, reverse the list, and return *the reversed list*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Linked List",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** head = [1,2,3,4,5]",
                "Output": "** [5,4,3,2,1]",
                "Explanation": null
            },
            {
                "Input": "** head = [1,2]",
                "Output": "** [2,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Course Schedule",
        "slug": "course-schedule",
        "description": "There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you **must** take course `bi` first if you want to take course `ai`.\n\n\n For example, the pair `[0, 1]`, indicates that to take course `0` you have to first take course `1`.\n\n\nReturn `true` if you can finish all courses. Otherwise, return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Graph",
            "Topological Sort"
        ],
        "examples": [
            {
                "Input": "** numCourses = 2, prerequisites = [[1,0]]",
                "Output": "** true",
                "Explanation": "** There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0. So it is possible."
            },
            {
                "Input": "** numCourses = 2, prerequisites = [[1,0],[0,1]]",
                "Output": "** false",
                "Explanation": "** There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible."
            }
        ]
    },
    {
        "Title": "Implement Trie (Prefix Tree)",
        "slug": "implement-trie-prefix-tree",
        "description": "A [**trie**](https://en.wikipedia.org/wiki/Trie) (pronounced as \"try\") or **prefix tree** is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n\n\nImplement the Trie class:\n\n\n `Trie()` Initializes the trie object.\n `void insert(String word)` Inserts the string `word` into the trie.\n `boolean search(String word)` Returns `true` if the string `word` is in the trie (i.e., was inserted before), and `false` otherwise.\n `boolean startsWith(String prefix)` Returns `true` if there is a previously inserted string `word` that has the prefix `prefix`, and `false` otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Design",
            "Trie"
        ],
        "examples": [
            {
                "Input": "[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]",
                "Output": "[null, null, true, false, true, null, true]",
                "Explanation": "Trie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // return True\ntrie.search(\"app\");     // return False\ntrie.startsWith(\"app\"); // return True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // return True"
            }
        ]
    },
    {
        "Title": "Minimum Size Subarray Sum",
        "slug": "minimum-size-subarray-sum",
        "description": "Given an array of positive integers `nums` and a positive integer `target`, return *the **minimal length** of a* *subarray* *whose sum is greater than or equal to* `target`. If there is no such subarray, return `0` instead.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Sliding Window",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** target = 7, nums = [2,3,1,2,4,3]",
                "Output": "** 2",
                "Explanation": "** The subarray [4,3] has the minimal length under the problem constraint."
            },
            {
                "Input": "** target = 4, nums = [1,4,4]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** target = 11, nums = [1,1,1,1,1,1,1,1]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Course Schedule II",
        "slug": "course-schedule-ii",
        "description": "There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you **must** take course `bi` first if you want to take course `ai`.\n\n\n For example, the pair `[0, 1]`, indicates that to take course `0` you have to first take course `1`.\n\n\nReturn *the ordering of courses you should take to finish all courses*. If there are many valid answers, return **any** of them. If it is impossible to finish all courses, return **an empty array**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Graph",
            "Topological Sort"
        ],
        "examples": [
            {
                "Input": "** numCourses = 2, prerequisites = [[1,0]]",
                "Output": "** [0,1]",
                "Explanation": "** There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1]."
            },
            {
                "Input": "** numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]",
                "Output": "** [0,2,1,3]",
                "Explanation": "** There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\nSo one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3]."
            },
            {
                "Input": "** numCourses = 1, prerequisites = []",
                "Output": "** [0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Word Search II",
        "slug": "word-search-ii",
        "description": "Given an `m x n` `board`\u00a0of characters and a list of strings `words`, return *all words on the board*.\n\n\nEach word must be constructed from letters of sequentially adjacent cells, where **adjacent cells** are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "String",
            "Backtracking",
            "Trie",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]",
                "Output": "** [\"eat\",\"oath\"]",
                "Explanation": null
            },
            {
                "Input": "** board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]",
                "Output": "** []",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "House Robber II",
        "slug": "house-robber-ii",
        "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are **arranged in a circle.** That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and\u00a0**it will automatically contact the police if two adjacent houses were broken into on the same night**.\n\n\nGiven an integer array `nums` representing the amount of money of each house, return *the maximum amount of money you can rob tonight **without alerting the police***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [2,3,2]",
                "Output": "** 3",
                "Explanation": "** You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses."
            },
            {
                "Input": "** nums = [1,2,3,1]",
                "Output": "** 4",
                "Explanation": "** Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4."
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Shortest Palindrome",
        "slug": "shortest-palindrome",
        "description": "You are given a string `s`. You can convert `s` to a palindrome by adding characters in front of it.\n\n\nReturn *the shortest palindrome you can find by performing this transformation*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Rolling Hash",
            "String Matching",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "** s = \"aacecaaa\"",
                "Output": "** \"aaacecaaa\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"abcd\"",
                "Output": "** \"dcbabcd\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Kth Largest Element in an Array",
        "slug": "kth-largest-element-in-an-array",
        "description": "Given an integer array `nums` and an integer `k`, return *the* `kth` *largest element in the array*.\n\n\nNote that it is the `kth` largest element in the sorted order, not the `kth` distinct element.\n\n\nCan you solve it without sorting?\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Divide and Conquer",
            "Sorting",
            "Heap (Priority Queue)",
            "Quickselect"
        ],
        "examples": [
            {
                "Input": "** nums = [3,2,1,5,6,4], k = 2",
                "Output": "** 5",
                "Explanation": null
            },
            {
                "Input": "** nums = [3,2,3,1,2,4,5,5,6], k = 4",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Combination Sum III",
        "slug": "combination-sum-iii",
        "description": "Find all valid combinations of `k` numbers that sum up to `n` such that the following conditions are true:\n\n\n Only numbers `1` through `9` are used.\n Each number is used **at most once**.\n\n\nReturn *a list of all possible valid combinations*. The list must not contain the same combination twice, and the combinations may be returned in any order.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** k = 3, n = 7",
                "Output": "** [[1,2,4]]",
                "Explanation": "**\n1 + 2 + 4 = 7\nThere are no other valid combinations."
            },
            {
                "Input": "** k = 3, n = 9",
                "Output": "** [[1,2,6],[1,3,5],[2,3,4]]",
                "Explanation": "**\n1 + 2 + 6 = 9\n1 + 3 + 5 = 9\n2 + 3 + 4 = 9\nThere are no other valid combinations."
            },
            {
                "Input": "** k = 4, n = 1",
                "Output": "** []",
                "Explanation": "** There are no valid combinations.\nUsing 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination."
            }
        ]
    },
    {
        "Title": "Contains Duplicate",
        "slug": "contains-duplicate",
        "description": "Given an integer array `nums`, return `true` if any value appears **at least twice** in the array, and return `false` if every element is distinct.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,1]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,1,1,3,3,4,3,2,4,2]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "The Skyline Problem",
        "slug": "the-skyline-problem",
        "description": "A city's **skyline** is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return *the **skyline** formed by these buildings collectively*.\n\n\nThe geometric information of each building is given in the array `buildings` where `buildings[i] = [lefti, righti, heighti]`:\n\n\n `lefti` is the x coordinate of the left edge of the `ith` building.\n `righti` is the x coordinate of the right edge of the `ith` building.\n `heighti` is the height of the `ith` building.\n\n\nYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height `0`.\n\n\nThe **skyline** should be represented as a list of \"key points\" **sorted by their x-coordinate** in the form `[[x1,y1],[x2,y2],...]`. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate `0` and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.\n\n\nNote:** There must be no consecutive horizontal lines of equal height in the output skyline. For instance, `[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]` is not acceptable; the three lines of height 5 should be merged into one in the final output as such: `[...,[2 3],[4 5],[12 7],...]`\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Divide and Conquer",
            "Binary Indexed Tree",
            "Segment Tree",
            "Line Sweep",
            "Heap (Priority Queue)",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]",
                "Output": "** [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]",
                "Explanation": "**\nFigure A shows the buildings of the input.\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list."
            }
        ]
    },
    {
        "Title": "Contains Duplicate II",
        "slug": "contains-duplicate-ii",
        "description": "Given an integer array `nums` and an integer `k`, return `true` *if there are two **distinct indices*** `i` *and* `j` *in the array such that* `nums[i] == nums[j]` *and* `abs(i - j) <= k`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,1], k = 3",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,0,1,1], k = 1",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2,3,1,2,3], k = 2",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Contains Duplicate III",
        "slug": "contains-duplicate-iii",
        "description": "You are given an integer array `nums` and two integers `indexDiff` and `valueDiff`.\n\n\nFind a pair of indices `(i, j)` such that:\n\n\n `i != j`,\n `abs(i - j) <= indexDiff`.\n `abs(nums[i] - nums[j]) <= valueDiff`, and\n\n\nReturn `true` *if such pair exists or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Sliding Window",
            "Sorting",
            "Bucket Sort",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,1], indexDiff = 3, valueDiff = 0",
                "Output": "** true",
                "Explanation": "** We can choose (i, j) = (0, 3).\nWe satisfy the three conditions:\ni != j --> 0 != 3\nabs(i - j) <= indexDiff --> abs(0 - 3) <= 3\nabs(nums[i] - nums[j]) <= valueDiff --> abs(1 - 1) <= 0"
            },
            {
                "Input": "** nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3",
                "Output": "** false",
                "Explanation": "** After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false."
            }
        ]
    },
    {
        "Title": "Maximal Square",
        "slug": "maximal-square",
        "description": "Given an `m x n` binary `matrix` filled with `0`'s and `1`'s, *find the largest square containing only* `1`'s *and return its area*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]",
                "Output": "** 4",
                "Explanation": null
            },
            {
                "Input": "** matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count Complete Tree Nodes",
        "slug": "count-complete-tree-nodes",
        "description": "Given the `root` of a **complete** binary tree, return the number of the nodes in the tree.\n\n\nAccording to **[Wikipedia](http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees)**, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between `1` and `2h` nodes inclusive at the last level `h`.\n\n\nDesign an algorithm that runs in less than\u00a0`O(n)`\u00a0time complexity.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Binary Search",
            "Bit Manipulation",
            "Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2,3,4,5,6]",
                "Output": "** 6",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Rectangle Area",
        "slug": "rectangle-area",
        "description": "Given the coordinates of two **rectilinear** rectangles in a 2D plane, return *the total area covered by the two rectangles*.\n\n\nThe first rectangle is defined by its **bottom-left** corner `(ax1, ay1)` and its **top-right** corner `(ax2, ay2)`.\n\n\nThe second rectangle is defined by its **bottom-left** corner `(bx1, by1)` and its **top-right** corner `(bx2, by2)`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Geometry"
        ],
        "examples": [
            {
                "Input": "** ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2",
                "Output": "** 45",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Basic Calculator",
        "slug": "basic-calculator",
        "description": "Given a string `s` representing a valid expression, implement a basic calculator to evaluate it, and return *the result of the evaluation*.\n\n\nNote:** You are **not** allowed to use any built-in function which evaluates strings as mathematical expressions, such as `eval()`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "String",
            "Stack",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** s = \"1 + 1\"",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** s = \" 2-1 + 2 \"",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** s = \"(1+(4+5+2)-3)+(6+8)\"",
                "Output": "** 23",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Implement Stack using Queues",
        "slug": "implement-stack-using-queues",
        "description": "Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (`push`, `top`, `pop`, and `empty`).\n\n\nImplement the `MyStack` class:\n\n\n `void push(int x)` Pushes element x to the top of the stack.\n `int pop()` Removes the element on the top of the stack and returns it.\n `int top()` Returns the element on the top of the stack.\n `boolean empty()` Returns `true` if the stack is empty, `false` otherwise.\n\n\nNotes:\n\n\n You must use **only** standard operations of a queue, which means that only `push to back`, `peek/pop from front`, `size` and `is empty` operations are valid.\n Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Stack",
            "Design",
            "Queue"
        ],
        "examples": [
            {
                "Input": "[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]",
                "Output": "[null, null, null, 2, 2, false]",
                "Explanation": "MyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False"
            }
        ]
    },
    {
        "Title": "Invert Binary Tree",
        "slug": "invert-binary-tree",
        "description": "Given the `root` of a binary tree, invert the tree, and return *its root*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [4,2,7,1,3,6,9]",
                "Output": "** [4,7,2,9,6,3,1]",
                "Explanation": null
            },
            {
                "Input": "** root = [2,1,3]",
                "Output": "** [2,3,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Basic Calculator II",
        "slug": "basic-calculator-ii",
        "description": "Given a string `s` which represents an expression, *evaluate this expression and return its value*.\u00a0\n\n\nThe integer division should truncate toward zero.\n\n\nYou may assume that the given expression is always valid. All intermediate results will be in the range of `[-231, 231 - 1]`.\n\n\nNote:** You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as `eval()`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "String",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** s = \"3+2*2\"",
                "Output": "** 7",
                "Explanation": null
            },
            {
                "Input": "** s = \" 3/2 \"",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** s = \" 3+5 / 2 \"",
                "Output": "** 5",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Summary Ranges",
        "slug": "summary-ranges",
        "description": "You are given a **sorted unique** integer array `nums`.\n\n\nA **range** `[a,b]` is the set of all integers from `a` to `b` (inclusive).\n\n\nReturn *the **smallest sorted** list of ranges that **cover all the numbers in the array exactly***. That is, each element of `nums` is covered by exactly one of the ranges, and there is no integer `x` such that `x` is in one of the ranges but not in `nums`.\n\n\nEach range `[a,b]` in the list should be output as:\n\n\n `\"a->b\"` if `a != b`\n `\"a\"` if `a == b`\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [0,1,2,4,5,7]",
                "Output": "** [\"0->2\",\"4->5\",\"7\"]",
                "Explanation": "** The ranges are:\n[0,2] --> \"0->2\"\n[4,5] --> \"4->5\"\n[7,7] --> \"7\""
            },
            {
                "Input": "** nums = [0,2,3,4,6,8,9]",
                "Output": "** [\"0\",\"2->4\",\"6\",\"8->9\"]",
                "Explanation": "** The ranges are:\n[0,0] --> \"0\"\n[2,4] --> \"2->4\"\n[6,6] --> \"6\"\n[8,9] --> \"8->9\""
            }
        ]
    },
    {
        "Title": "Majority Element II",
        "slug": "majority-element-ii",
        "description": "Given an integer array of size `n`, find all elements that appear more than `\u230a n/3 \u230b` times.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [3,2,3]",
                "Output": "** [3]",
                "Explanation": null
            },
            {
                "Input": "** nums = [1]",
                "Output": "** [1]",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2]",
                "Output": "** [1,2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Kth Smallest Element in a BST",
        "slug": "kth-smallest-element-in-a-bst",
        "description": "Given the `root` of a binary search tree, and an integer `k`, return *the* `kth` *smallest value (**1-indexed**) of all the values of the nodes in the tree*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [3,1,4,null,2], k = 1",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** root = [5,3,6,2,4,null,null,1], k = 3",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Power of Two",
        "slug": "power-of-two",
        "description": "Given an integer `n`, return *`true` if it is a power of two. Otherwise, return `false`*.\n\n\nAn integer `n` is a power of two, if there exists an integer `x` such that `n == 2x`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Bit Manipulation",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** true",
                "Explanation": "** 20 = 1"
            },
            {
                "Input": "** n = 16",
                "Output": "** true",
                "Explanation": "** 24 = 16"
            },
            {
                "Input": "** n = 3",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Implement Queue using Stacks",
        "slug": "implement-queue-using-stacks",
        "description": "Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (`push`, `peek`, `pop`, and `empty`).\n\n\nImplement the `MyQueue` class:\n\n\n `void push(int x)` Pushes element x to the back of the queue.\n `int pop()` Removes the element from the front of the queue and returns it.\n `int peek()` Returns the element at the front of the queue.\n `boolean empty()` Returns `true` if the queue is empty, `false` otherwise.\n\n\nNotes:\n\n\n You must use **only** standard operations of a stack, which means only `push to top`, `peek/pop from top`, `size`, and `is empty` operations are valid.\n Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Stack",
            "Design",
            "Queue"
        ],
        "examples": [
            {
                "Input": "[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]",
                "Output": "[null, null, null, 1, 1, false]",
                "Explanation": "MyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false"
            }
        ]
    },
    {
        "Title": "Number of Digit One",
        "slug": "number-of-digit-one",
        "description": "Given an integer `n`, count *the total number of digit* `1` *appearing in all non-negative integers less than or equal to* `n`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** n = 13",
                "Output": "** 6",
                "Explanation": null
            },
            {
                "Input": "** n = 0",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Palindrome Linked List",
        "slug": "palindrome-linked-list",
        "description": "Given the `head` of a singly linked list, return `true` *if it is a* *palindrome* *or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Linked List",
            "Two Pointers",
            "Stack",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** head = [1,2,2,1]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** head = [1,2]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Lowest Common Ancestor of a Binary Search Tree",
        "slug": "lowest-common-ancestor-of-a-binary-search-tree",
        "description": "Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.\n\n\nAccording to the [definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor): \u201cThe lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow **a node to be a descendant of itself**).\u201d\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8",
                "Output": "** 6",
                "Explanation": "** The LCA of nodes 2 and 8 is 6."
            },
            {
                "Input": "** root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4",
                "Output": "** 2",
                "Explanation": "** The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition."
            }
        ]
    },
    {
        "Title": "Lowest Common Ancestor of a Binary Tree",
        "slug": "lowest-common-ancestor-of-a-binary-tree",
        "description": "Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\n\n\nAccording to the [definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor): \u201cThe lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow **a node to be a descendant of itself**).\u201d\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1",
                "Output": "** 3",
                "Explanation": "** The LCA of nodes 5 and 1 is 3."
            },
            {
                "Input": "** root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4",
                "Output": "** 5",
                "Explanation": "** The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition."
            }
        ]
    },
    {
        "Title": "Delete Node in a Linked List",
        "slug": "delete-node-in-a-linked-list",
        "description": "There is a singly-linked list `head` and we want to delete a node `node` in it.\n\n\nYou are given the node to be deleted `node`. You will **not be given access** to the first node of `head`.\n\n\nAll the values of the linked list are **unique**, and it is guaranteed that the given node `node` is not the last node in the linked list.\n\n\nDelete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:\n\n\n The value of the given node should not exist in the linked list.\n The number of nodes in the linked list should decrease by one.\n All the values before `node` should be in the same order.\n All the values after `node` should be in the same order.\n\n\nCustom testing:\n\n\n For the input, you should provide the entire linked list `head` and the node to be given `node`. `node` should not be the last node of the list and should be an actual node in the list.\n We will build the linked list and pass the node to your function.\n The output will be the entire list after calling your function.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List"
        ],
        "examples": [
            {
                "Input": "** head = [4,5,1,9], node = 5",
                "Output": "** [4,1,9]",
                "Explanation": "** You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function."
            },
            {
                "Input": "** head = [4,5,1,9], node = 1",
                "Output": "** [4,5,9]",
                "Explanation": "** You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function."
            }
        ]
    },
    {
        "Title": "Product of Array Except Self",
        "slug": "product-of-array-except-self",
        "description": "Given an integer array `nums`, return *an array* `answer` *such that* `answer[i]` *is equal to the product of all the elements of* `nums` *except* `nums[i]`.\n\n\nThe product of any prefix or suffix of `nums` is **guaranteed** to fit in a **32-bit** integer.\n\n\nYou must write an algorithm that runs in\u00a0`O(n)`\u00a0time and without using the division operation.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** [24,12,8,6]",
                "Explanation": null
            },
            {
                "Input": "** nums = [-1,1,0,-3,3]",
                "Output": "** [0,0,9,0,0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sliding Window Maximum",
        "slug": "sliding-window-maximum",
        "description": "You are given an array of integers\u00a0`nums`, there is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position.\n\n\nReturn *the max sliding window*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Queue",
            "Sliding Window",
            "Heap (Priority Queue)",
            "Monotonic Queue"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,-1,-3,5,3,6,7], k = 3",
                "Output": "** [3,3,5,5,6,7]",
                "Explanation": "** \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       **3**\n 1 [3  -1  -3] 5  3  6  7       **3**\n 1  3 [-1  -3  5] 3  6  7       **5**\n 1  3  -1 [-3  5  3] 6  7       **5**\n 1  3  -1  -3 [5  3  6] 7       **6**\n 1  3  -1  -3  5 [3  6  7]      **7**"
            },
            {
                "Input": "** nums = [1], k = 1",
                "Output": "** [1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Search a 2D Matrix II",
        "slug": "search-a-2d-matrix-ii",
        "description": "Write an efficient algorithm that searches for a value `target` in an `m x n` integer matrix `matrix`. This matrix has the following properties:\n\n\n Integers in each row are sorted in ascending from left to right.\n Integers in each column are sorted in ascending from top to bottom.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Divide and Conquer",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Different Ways to Add Parentheses",
        "slug": "different-ways-to-add-parentheses",
        "description": "Given a string `expression` of numbers and operators, return *all possible results from computing all the different possible ways to group numbers and operators*. You may return the answer in **any order**.\n\n\nThe test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed `104`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "String",
            "Dynamic Programming",
            "Recursion",
            "Memoization"
        ],
        "examples": [
            {
                "Input": "** expression = \"2-1-1\"",
                "Output": "** [0,2]",
                "Explanation": "**\n((2-1)-1) = 0 \n(2-(1-1)) = 2"
            },
            {
                "Input": "** expression = \"2*3-4*5\"",
                "Output": "** [-34,-14,-10,-10,10]",
                "Explanation": "**\n(2*(3-(4*5))) = -34 \n((2*3)-(4*5)) = -14 \n((2*(3-4))*5) = -10 \n(2*((3-4)*5)) = -10 \n(((2*3)-4)*5) = 10"
            }
        ]
    },
    {
        "Title": "Valid Anagram",
        "slug": "valid-anagram",
        "description": "Given two strings `s` and `t`, return `true` *if* `t` *is an anagram of* `s`*, and* `false` *otherwise*.\n\n\nAn **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** s = \"anagram\", t = \"nagaram\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"rat\", t = \"car\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Tree Paths",
        "slug": "binary-tree-paths",
        "description": "Given the `root` of a binary tree, return *all root-to-leaf paths in **any order***.\n\n\nA **leaf** is a node with no children.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Backtracking",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2,3,null,5]",
                "Output": "** [\"1->2->5\",\"1->3\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Add Digits",
        "slug": "add-digits",
        "description": "Given an integer `num`, repeatedly add all its digits until the result has only one digit, and return it.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Simulation",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** num = 38",
                "Output": "** 2",
                "Explanation": "** The process is\n38 --> 3 + 8 --> 11\n11 --> 1 + 1 --> 2 \nSince 2 has only one digit, return it."
            },
            {
                "Input": "** num = 0",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Single Number III",
        "slug": "single-number-iii",
        "description": "Given an integer array `nums`, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in **any order**.\n\n\nYou must write an\u00a0algorithm that runs in linear runtime complexity and uses\u00a0only constant extra space.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,1,3,2,5]",
                "Output": "** [3,5]",
                "Explanation": "**  [5, 3] is also a valid answer."
            },
            {
                "Input": "** nums = [-1,0]",
                "Output": "** [-1,0]",
                "Explanation": null
            },
            {
                "Input": "** nums = [0,1]",
                "Output": "** [1,0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Trips and Users",
        "slug": "trips-and-users",
        "description": "Table: `Trips`\n\n\n\n```\n\n+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| id          | int      |\n| client_id   | int      |\n| driver_id   | int      |\n| city_id     | int      |\n| status      | enum     |\n| request_at  | date     |     \n+-------------+----------+\nid is the primary key (column with unique values) for this table.\nThe table holds all taxi trips. Each trip has a unique id, while client_id and driver_id are foreign keys to the users_id at the Users table.\nStatus is an ENUM (category) type of ('completed', 'cancelled_by_driver', 'cancelled_by_client').\n\n```\n\n\u00a0\n\n\nTable: `Users`\n\n\n\n```\n\n+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| users_id    | int      |\n| banned      | enum     |\n| role        | enum     |\n+-------------+----------+\nusers_id is the primary key (column with unique values) for this table.\nThe table holds all users. Each user has a unique users_id, and role is an ENUM type of ('client', 'driver', 'partner').\nbanned is an ENUM (category) type of ('Yes', 'No').\n\n```\n\n\u00a0\n\n\nThe **cancellation rate** is computed by dividing the number of canceled (by client or driver) requests with unbanned users by the total number of requests with unbanned users on that day.\n\n\nWrite a solution to find the **cancellation rate** of requests with unbanned users (**both client and driver must not be banned**) each day between `\"2013-10-01\"` and `\"2013-10-03\"`. Round `Cancellation Rate` to **two decimal** points.\n\n\nReturn the result table in **any order**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nTrips table:\n+----+-----------+-----------+---------+---------------------+------------+\n| id | client_id | driver_id | city_id | status              | request_at |\n+----+-----------+-----------+---------+---------------------+------------+\n| 1  | 1         | 10        | 1       | completed           | 2013-10-01 |\n| 2  | 2         | 11        | 1       | cancelled_by_driver | 2013-10-01 |\n| 3  | 3         | 12        | 6       | completed           | 2013-10-01 |\n| 4  | 4         | 13        | 6       | cancelled_by_client | 2013-10-01 |\n| 5  | 1         | 10        | 1       | completed           | 2013-10-02 |\n| 6  | 2         | 11        | 6       | completed           | 2013-10-02 |\n| 7  | 3         | 12        | 6       | completed           | 2013-10-02 |\n| 8  | 2         | 12        | 12      | completed           | 2013-10-03 |\n| 9  | 3         | 10        | 12      | completed           | 2013-10-03 |\n| 10 | 4         | 13        | 12      | cancelled_by_driver | 2013-10-03 |\n+----+-----------+-----------+---------+---------------------+------------+\nUsers table:\n+----------+--------+--------+\n| users_id | banned | role   |\n+----------+--------+--------+\n| 1        | No     | client |\n| 2        | Yes    | client |\n| 3        | No     | client |\n| 4        | No     | client |\n| 10       | No     | driver |\n| 11       | No     | driver |\n| 12       | No     | driver |\n| 13       | No     | driver |\n+----------+--------+--------+",
                "Output": "** \n+------------+-------------------+\n| Day        | Cancellation Rate |\n+------------+-------------------+\n| 2013-10-01 | 0.33              |\n| 2013-10-02 | 0.00              |\n| 2013-10-03 | 0.50              |\n+------------+-------------------+",
                "Explanation": "** \nOn 2013-10-01:\n  - There were 4 requests in total, 2 of which were canceled.\n  - However, the request with Id=2 was made by a banned client (User_Id=2), so it is ignored in the calculation.\n  - Hence there are 3 unbanned requests in total, 1 of which was canceled.\n  - The Cancellation Rate is (1 / 3) = 0.33\nOn 2013-10-02:\n  - There were 3 requests in total, 0 of which were canceled.\n  - The request with Id=6 was made by a banned client, so it is ignored.\n  - Hence there are 2 unbanned requests in total, 0 of which were canceled.\n  - The Cancellation Rate is (0 / 2) = 0.00\nOn 2013-10-03:\n  - There were 3 requests in total, 1 of which was canceled.\n  - The request with Id=8 was made by a banned client, so it is ignored.\n  - Hence there are 2 unbanned request in total, 1 of which were canceled.\n  - The Cancellation Rate is (1 / 2) = 0.50"
            }
        ]
    },
    {
        "Title": "Ugly Number",
        "slug": "ugly-number",
        "description": "An **ugly number** is a positive integer whose prime factors are limited to `2`, `3`, and `5`.\n\n\nGiven an integer `n`, return `true` *if* `n` *is an **ugly number***.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** n = 6",
                "Output": "** true",
                "Explanation": "** 6 = 2 \u00d7 3"
            },
            {
                "Input": "** n = 1",
                "Output": "** true",
                "Explanation": "** 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5."
            },
            {
                "Input": "** n = 14",
                "Output": "** false",
                "Explanation": "** 14 is not ugly since it includes the prime factor 7."
            }
        ]
    },
    {
        "Title": "Ugly Number II",
        "slug": "ugly-number-ii",
        "description": "An **ugly number** is a positive integer whose prime factors are limited to `2`, `3`, and `5`.\n\n\nGiven an integer `n`, return *the* `nth` ***ugly number***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Math",
            "Dynamic Programming",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** n = 10",
                "Output": "** 12",
                "Explanation": "** [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers."
            },
            {
                "Input": "** n = 1",
                "Output": "** 1",
                "Explanation": "** 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5."
            }
        ]
    },
    {
        "Title": "Missing Number",
        "slug": "missing-number",
        "description": "Given an array `nums` containing `n` distinct numbers in the range `[0, n]`, return *the only number in the range that is missing from the array.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Binary Search",
            "Bit Manipulation",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [3,0,1]",
                "Output": "** 2",
                "Explanation": "** n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums."
            },
            {
                "Input": "** nums = [0,1]",
                "Output": "** 2",
                "Explanation": "** n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums."
            },
            {
                "Input": "** nums = [9,6,4,2,3,5,7,0,1]",
                "Output": "** 8",
                "Explanation": "** n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums."
            }
        ]
    },
    {
        "Title": "Integer to English Words",
        "slug": "integer-to-english-words",
        "description": "Convert a non-negative integer `num` to its English words representation.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "String",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** num = 123",
                "Output": "** \"One Hundred Twenty Three\"",
                "Explanation": null
            },
            {
                "Input": "** num = 12345",
                "Output": "** \"Twelve Thousand Three Hundred Forty Five\"",
                "Explanation": null
            },
            {
                "Input": "** num = 1234567",
                "Output": "** \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "H-Index",
        "slug": "h-index",
        "description": "Given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper, return *the researcher's h-index*.\n\n\nAccording to the [definition of h-index on Wikipedia](https://en.wikipedia.org/wiki/H-index): The h-index is defined as the maximum value of `h` such that the given researcher has published at least `h` papers that have each been cited at least `h` times.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sorting",
            "Counting Sort"
        ],
        "examples": [
            {
                "Input": "** citations = [3,0,6,1,5]",
                "Output": "** 3",
                "Explanation": "** [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3."
            },
            {
                "Input": "** citations = [1,3,1]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "H-Index II",
        "slug": "h-index-ii",
        "description": "Given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper and `citations` is sorted in **ascending order**, return *the researcher's h-index*.\n\n\nAccording to the [definition of h-index on Wikipedia](https://en.wikipedia.org/wiki/H-index): The h-index is defined as the maximum value of `h` such that the given researcher has published at least `h` papers that have each been cited at least `h` times.\n\n\nYou must write an algorithm that runs in logarithmic time.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** citations = [0,1,3,5,6]",
                "Output": "** 3",
                "Explanation": "** [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3."
            },
            {
                "Input": "** citations = [1,2,100]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "First Bad Version",
        "slug": "first-bad-version",
        "description": "You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.\n\n\nSuppose you have `n` versions `[1, 2, ..., n]` and you want to find out the first bad one, which causes all the following ones to be bad.\n\n\nYou are given an API `bool isBadVersion(version)` which returns whether `version` is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Binary Search",
            "Interactive"
        ],
        "examples": [
            {
                "Input": "** n = 5, bad = 4",
                "Output": "** 4",
                "Explanation": "**\ncall isBadVersion(3) -> false\ncall isBadVersion(5)\u00a0-> true\ncall isBadVersion(4)\u00a0-> true\nThen 4 is the first bad version."
            },
            {
                "Input": "** n = 1, bad = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Perfect Squares",
        "slug": "perfect-squares",
        "description": "Given an integer `n`, return *the least number of perfect square numbers that sum to* `n`.\n\n\nA **perfect square** is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, `1`, `4`, `9`, and `16` are perfect squares while `3` and `11` are not.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** n = 12",
                "Output": "** 3",
                "Explanation": "** 12 = 4 + 4 + 4."
            },
            {
                "Input": "** n = 13",
                "Output": "** 2",
                "Explanation": "** 13 = 4 + 9."
            }
        ]
    },
    {
        "Title": "Expression Add Operators",
        "slug": "expression-add-operators",
        "description": "Given a string `num` that contains only digits and an integer `target`, return ***all possibilities** to insert the binary operators* `'+'`*,* `'-'`*, and/or* `'*'` *between the digits of* `num` *so that the resultant expression evaluates to the* `target` *value*.\n\n\nNote that operands in the returned expressions **should not** contain leading zeros.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "String",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** num = \"123\", target = 6",
                "Output": "** [\"1*2*3\",\"1+2+3\"]",
                "Explanation": "** Both \"1*2*3\" and \"1+2+3\" evaluate to 6."
            },
            {
                "Input": "** num = \"232\", target = 8",
                "Output": "** [\"2*3+2\",\"2+3*2\"]",
                "Explanation": "** Both \"2*3+2\" and \"2+3*2\" evaluate to 8."
            },
            {
                "Input": "** num = \"3456237490\", target = 9191",
                "Output": "** []",
                "Explanation": "** There are no expressions that can be created from \"3456237490\" to evaluate to 9191."
            }
        ]
    },
    {
        "Title": "Move Zeroes",
        "slug": "move-zeroes",
        "description": "Given an integer array `nums`, move all `0`'s to the end of it while maintaining the relative order of the non-zero elements.\n\n\nNote** that you must do this in-place without making a copy of the array.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** nums = [0,1,0,3,12]",
                "Output": "** [1,3,12,0,0]",
                "Explanation": null
            },
            {
                "Input": "** nums = [0]",
                "Output": "** [0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Peeking Iterator",
        "slug": "peeking-iterator",
        "description": "Design an iterator that supports the `peek` operation on an existing iterator in addition to the `hasNext` and the `next` operations.\n\n\nImplement the `PeekingIterator` class:\n\n\n `PeekingIterator(Iterator<int> nums)` Initializes the object with the given integer iterator `iterator`.\n `int next()` Returns the next element in the array and moves the pointer to the next element.\n `boolean hasNext()` Returns `true` if there are still elements in the array.\n `int peek()` Returns the next element in the array **without** moving the pointer.\n\n\nNote:** Each language may have a different implementation of the constructor and `Iterator`, but they all support the `int next()` and `boolean hasNext()` functions.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Design",
            "Iterator"
        ],
        "examples": [
            {
                "Input": "[\"PeekingIterator\", \"next\", \"peek\", \"next\", \"next\", \"hasNext\"]\n[[[1, 2, 3]], [], [], [], [], []]",
                "Output": "[null, 1, 2, 2, 3, false]",
                "Explanation": "PeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [**1**,2,3]\npeekingIterator.next();    // return 1, the pointer moves to the next element [1,**2**,3].\npeekingIterator.peek();    // return 2, the pointer does not move [1,**2**,3].\npeekingIterator.next();    // return 2, the pointer moves to the next element [1,2,**3**]\npeekingIterator.next();    // return 3, the pointer moves to the next element [1,2,3]\npeekingIterator.hasNext(); // return False"
            }
        ]
    },
    {
        "Title": "Find the Duplicate Number",
        "slug": "find-the-duplicate-number",
        "description": "Given an array of integers `nums` containing\u00a0`n + 1` integers where each integer is in the range `[1, n]` inclusive.\n\n\nThere is only **one repeated number** in `nums`, return *this\u00a0repeated\u00a0number*.\n\n\nYou must solve the problem **without** modifying the array `nums`\u00a0and uses only constant extra space.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,4,2,2]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** nums = [3,1,3,4,2]",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** nums = [3,3,3,3,3]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Game of Life",
        "slug": "game-of-life",
        "description": "According to\u00a0[Wikipedia's article](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life): \"The **Game of Life**, also known simply as **Life**, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"\n\n\nThe board is made up of an `m x n` grid of cells, where each cell has an initial state: **live** (represented by a `1`) or **dead** (represented by a `0`). Each cell interacts with its [eight neighbors](https://en.wikipedia.org/wiki/Moore_neighborhood) (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):\n\n\n1. Any live cell with fewer than two live neighbors dies as if caused by under-population.\n2. Any live cell with two or three live neighbors lives on to the next generation.\n3. Any live cell with more than three live neighbors dies, as if by over-population.\n4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n\n\nThe next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the `m x n` grid `board`, return *the next state*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]",
                "Output": "** [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]",
                "Explanation": null
            },
            {
                "Input": "** board = [[1,1],[1,0]]",
                "Output": "** [[1,1],[1,1]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Word Pattern",
        "slug": "word-pattern",
        "description": "Given a `pattern` and a string `s`, find if `s`\u00a0follows the same pattern.\n\n\nHere **follow** means a full match, such that there is a bijection between a letter in `pattern` and a **non-empty** word in `s`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** pattern = \"abba\", s = \"dog cat cat dog\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** pattern = \"abba\", s = \"dog cat cat fish\"",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** pattern = \"aaaa\", s = \"dog cat cat dog\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Nim Game",
        "slug": "nim-game",
        "description": "You are playing the following Nim Game with your friend:\n\n\n Initially, there is a heap of stones on the table.\n You and your friend will alternate taking turns, and **you go first**.\n On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.\n The one who removes the last stone is the winner.\n\n\nGiven `n`, the number of stones in the heap, return `true` *if you can win the game assuming both you and your friend play optimally, otherwise return* `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Brainteaser",
            "Game Theory"
        ],
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** false",
                "Explanation": "** These are the possible outcomes:\n1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\n2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\n3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\nIn all outcomes, your friend wins."
            },
            {
                "Input": "** n = 1",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** n = 2",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Median from Data Stream",
        "slug": "find-median-from-data-stream",
        "description": "The **median** is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.\n\n\n For example, for `arr = [2,3,4]`, the median is `3`.\n For example, for `arr = [2,3]`, the median is `(2 + 3) / 2 = 2.5`.\n\n\nImplement the MedianFinder class:\n\n\n `MedianFinder()` initializes the `MedianFinder` object.\n `void addNum(int num)` adds the integer `num` from the data stream to the data structure.\n `double findMedian()` returns the median of all elements so far. Answers within `10-5` of the actual answer will be accepted.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Two Pointers",
            "Design",
            "Sorting",
            "Heap (Priority Queue)",
            "Data Stream"
        ],
        "examples": [
            {
                "Input": "[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\n[[], [1], [2], [], [3], []]",
                "Output": "[null, null, null, 1.5, null, 2.0]",
                "Explanation": "MedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0"
            }
        ]
    },
    {
        "Title": "Serialize and Deserialize Binary Tree",
        "slug": "serialize-and-deserialize-binary-tree",
        "description": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n\n\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\n\n\nClarification:** The input/output format is the same as [how LeetCode serializes a binary tree](https://support.leetcode.com/hc/en-us/articles/360011883654-What-does-1-null-2-3-mean-in-binary-tree-representation-). You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Design",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2,3,null,null,4,5]",
                "Output": "** [1,2,3,null,null,4,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Bulls and Cows",
        "slug": "bulls-and-cows",
        "description": "You are playing the **[Bulls and Cows](https://en.wikipedia.org/wiki/Bulls_and_Cows)** game with your friend.\n\n\nYou write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:\n\n\n The number of \"bulls\", which are digits in the guess that are in the correct position.\n The number of \"cows\", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.\n\n\nGiven the secret number `secret` and your friend's guess `guess`, return *the hint for your friend's guess*.\n\n\nThe hint should be formatted as `\"xAyB\"`, where `x` is the number of bulls and `y` is the number of cows. Note that both `secret` and `guess` may contain duplicate digits.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** secret = \"1807\", guess = \"7810\"",
                "Output": "** \"1A3B\"",
                "Explanation": "** Bulls are connected with a '|' and cows are underlined:\n\"1807\"\n  |\n\"7810\""
            },
            {
                "Input": "** secret = \"1123\", guess = \"0111\"",
                "Output": "** \"1A1B\"",
                "Explanation": "** Bulls are connected with a '|' and cows are underlined:\n\"1123\"        \"1123\"\n  |      or     |\n\"0111\"        \"0111\"\nNote that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull."
            }
        ]
    },
    {
        "Title": "Remove Invalid Parentheses",
        "slug": "remove-invalid-parentheses",
        "description": "Given a string `s` that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.\n\n\nReturn *a list of **unique strings** that are valid with the minimum number of removals*. You may return the answer in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Backtracking",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** s = \"()())()\"",
                "Output": "** [\"(())()\",\"()()()\"]",
                "Explanation": null
            },
            {
                "Input": "** s = \"(a)())()\"",
                "Output": "** [\"(a())()\",\"(a)()()\"]",
                "Explanation": null
            },
            {
                "Input": "** s = \")(\"",
                "Output": "** [\"\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Range Sum Query - Immutable",
        "slug": "range-sum-query-immutable",
        "description": "Given an integer array `nums`, handle multiple queries of the following type:\n\n\n1. Calculate the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** where `left <= right`.\n\n\nImplement the `NumArray` class:\n\n\n `NumArray(int[] nums)` Initializes the object with the integer array `nums`.\n `int sumRange(int left, int right)` Returns the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** (i.e. `nums[left] + nums[left + 1] + ... + nums[right]`).\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Design",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "[\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]\n[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]",
                "Output": "[null, 1, -1, -3]",
                "Explanation": "NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\nnumArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\nnumArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\nnumArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3"
            }
        ]
    },
    {
        "Title": "Range Sum Query 2D - Immutable",
        "slug": "range-sum-query-2d-immutable",
        "description": "Given a 2D matrix `matrix`, handle multiple queries of the following type:\n\n\n Calculate the **sum** of the elements of `matrix` inside the rectangle defined by its **upper left corner** `(row1, col1)` and **lower right corner** `(row2, col2)`.\n\n\nImplement the `NumMatrix` class:\n\n\n `NumMatrix(int[][] matrix)` Initializes the object with the integer matrix `matrix`.\n `int sumRegion(int row1, int col1, int row2, int col2)` Returns the **sum** of the elements of `matrix` inside the rectangle defined by its **upper left corner** `(row1, col1)` and **lower right corner** `(row2, col2)`.\n\n\nYou must design an algorithm where `sumRegion` works on `O(1)` time complexity.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Design",
            "Matrix",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "[\"NumMatrix\", \"sumRegion\", \"sumRegion\", \"sumRegion\"]\n[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]",
                "Output": "[null, 8, 11, 12]",
                "Explanation": "NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\nnumMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)\nnumMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)\nnumMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)"
            }
        ]
    },
    {
        "Title": "Additive Number",
        "slug": "additive-number",
        "description": "An **additive number** is a string whose digits can form an **additive sequence**.\n\n\nA valid **additive sequence** should contain **at least** three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.\n\n\nGiven a string containing only digits, return `true` if it is an **additive number** or `false` otherwise.\n\n\nNote:** Numbers in the additive sequence **cannot** have leading zeros, so sequence `1, 2, 03` or `1, 02, 3` is invalid.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** \"112358\"",
                "Output": "** true",
                "Explanation": "** \nThe digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \n1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8"
            },
            {
                "Input": "** \"199100199\"",
                "Output": "** true",
                "Explanation": "** \nThe additive sequence is: 1, 99, 100, 199.\u00a0\n1 + 99 = 100, 99 + 100 = 199"
            }
        ]
    },
    {
        "Title": "Range Sum Query - Mutable",
        "slug": "range-sum-query-mutable",
        "description": "Given an integer array `nums`, handle multiple queries of the following types:\n\n\n1. **Update** the value of an element in `nums`.\n2. Calculate the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** where `left <= right`.\n\n\nImplement the `NumArray` class:\n\n\n `NumArray(int[] nums)` Initializes the object with the integer array `nums`.\n `void update(int index, int val)` **Updates** the value of `nums[index]` to be `val`.\n `int sumRange(int left, int right)` Returns the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** (i.e. `nums[left] + nums[left + 1] + ... + nums[right]`).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Design",
            "Binary Indexed Tree",
            "Segment Tree"
        ],
        "examples": [
            {
                "Input": "[\"NumArray\", \"sumRange\", \"update\", \"sumRange\"]\n[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]",
                "Output": "[null, 9, null, 8]",
                "Explanation": "NumArray numArray = new NumArray([1, 3, 5]);\nnumArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\nnumArray.update(1, 2);   // nums = [1, 2, 5]\nnumArray.sumRange(0, 2); // return 1 + 2 + 5 = 8"
            }
        ]
    },
    {
        "Title": "Best Time to Buy and Sell Stock with Cooldown",
        "slug": "best-time-to-buy-and-sell-stock-with-cooldown",
        "description": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.\n\n\nFind the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:\n\n\n After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).\n\n\nNote:** You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** prices = [1,2,3,0,2]",
                "Output": "** 3",
                "Explanation": "** transactions = [buy, sell, cooldown, buy, sell]"
            },
            {
                "Input": "** prices = [1]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Height Trees",
        "slug": "minimum-height-trees",
        "description": "A tree is an undirected graph in which any two vertices are connected by\u00a0*exactly*\u00a0one path. In other words, any connected graph without simple cycles is a tree.\n\n\nGiven a tree of `n` nodes\u00a0labelled from `0` to `n - 1`, and an array of\u00a0`n - 1`\u00a0`edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between the two nodes\u00a0`ai` and\u00a0`bi` in the tree,\u00a0you can choose any node of the tree as the root. When you select a node `x` as the root, the result tree has height `h`. Among all possible rooted trees, those with minimum height (i.e. `min(h)`)\u00a0 are called **minimum height trees** (MHTs).\n\n\nReturn *a list of all **MHTs'** root labels*.\u00a0You can return the answer in **any order**.\n\n\nThe **height** of a rooted tree is the number of edges on the longest downward path between the root and a leaf.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Graph",
            "Topological Sort"
        ],
        "examples": [
            {
                "Input": "** n = 4, edges = [[1,0],[1,2],[1,3]]",
                "Output": "** [1]",
                "Explanation": "** As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT."
            },
            {
                "Input": "** n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]",
                "Output": "** [3,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Burst Balloons",
        "slug": "burst-balloons",
        "description": "You are given `n` balloons, indexed from `0` to `n - 1`. Each balloon is painted with a number on it represented by an array `nums`. You are asked to burst all the balloons.\n\n\nIf you burst the `ith` balloon, you will get `nums[i - 1] * nums[i] * nums[i + 1]` coins. If `i - 1` or `i + 1` goes out of bounds of the array, then treat it as if there is a balloon with a `1` painted on it.\n\n\nReturn *the maximum coins you can collect by bursting the balloons wisely*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [3,1,5,8]",
                "Output": "** 167",
                "Explanation": "**\nnums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []\ncoins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167"
            },
            {
                "Input": "** nums = [1,5]",
                "Output": "** 10",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Super Ugly Number",
        "slug": "super-ugly-number",
        "description": "A **super ugly number** is a positive integer whose prime factors are in the array `primes`.\n\n\nGiven an integer `n` and an array of integers `primes`, return *the* `nth` ***super ugly number***.\n\n\nThe `nth` **super ugly number** is **guaranteed** to fit in a **32-bit** signed integer.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** n = 12, primes = [2,7,13,19]",
                "Output": "** 32",
                "Explanation": "** [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19]."
            },
            {
                "Input": "** n = 1, primes = [2,3,5]",
                "Output": "** 1",
                "Explanation": "** 1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5]."
            }
        ]
    },
    {
        "Title": "Count of Smaller Numbers After Self",
        "slug": "count-of-smaller-numbers-after-self",
        "description": "Given an integer array `nums`, return *an integer array* `counts` *where* `counts[i]` *is the number of smaller elements to the right of* `nums[i]`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Divide and Conquer",
            "Binary Indexed Tree",
            "Segment Tree",
            "Merge Sort",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** nums = [5,2,6,1]",
                "Output": "** [2,1,1,0]",
                "Explanation": "**\nTo the right of 5 there are **2** smaller elements (2 and 1).\nTo the right of 2 there is only **1** smaller element (1).\nTo the right of 6 there is **1** smaller element (1).\nTo the right of 1 there is **0** smaller element."
            },
            {
                "Input": "** nums = [-1]",
                "Output": "** [0]",
                "Explanation": null
            },
            {
                "Input": "** nums = [-1,-1]",
                "Output": "** [0,0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove Duplicate Letters",
        "slug": "remove-duplicate-letters",
        "description": "Given a string `s`, remove duplicate letters so that every letter appears once and only once. You must make sure your result is **the smallest in lexicographical order** among all possible results.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Stack",
            "Greedy",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** s = \"bcabc\"",
                "Output": "** \"abc\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"cbacdcbc\"",
                "Output": "** \"acdb\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Product of Word Lengths",
        "slug": "maximum-product-of-word-lengths",
        "description": "Given a string array `words`, return *the maximum value of* `length(word[i]) * length(word[j])` *where the two words do not share common letters*. If no such two words exist, return `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]",
                "Output": "** 16",
                "Explanation": "** The two words can be \"abcw\", \"xtfn\"."
            },
            {
                "Input": "** words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]",
                "Output": "** 4",
                "Explanation": "** The two words can be \"ab\", \"cd\"."
            },
            {
                "Input": "** words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]",
                "Output": "** 0",
                "Explanation": "** No such pair of words."
            }
        ]
    },
    {
        "Title": "Bulb Switcher",
        "slug": "bulb-switcher",
        "description": "There are `n` bulbs that are initially off. You first turn on all the bulbs, then\u00a0you turn off every second bulb.\n\n\nOn the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the `ith` round, you toggle every `i` bulb. For the `nth` round, you only toggle the last bulb.\n\n\nReturn *the number of bulbs that are on after `n` rounds*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Brainteaser"
        ],
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** 1",
                "Explanation": "** At first, the three bulbs are [off, off, off].\nAfter the first round, the three bulbs are [on, on, on].\nAfter the second round, the three bulbs are [on, off, on].\nAfter the third round, the three bulbs are [on, off, off]. \nSo you should return 1 because there is only one bulb is on."
            }
        ]
    },
    {
        "Title": "Create Maximum Number",
        "slug": "create-maximum-number",
        "description": "You are given two integer arrays `nums1` and `nums2` of lengths `m` and `n` respectively. `nums1` and `nums2` represent the digits of two numbers. You are also given an integer `k`.\n\n\nCreate the maximum number of length `k <= m + n` from digits of the two numbers. The relative order of the digits from the same array must be preserved.\n\n\nReturn an array of the `k` digits representing the answer.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Two Pointers",
            "Stack",
            "Greedy",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5",
                "Output": "** [9,8,6,5,3]",
                "Explanation": null
            },
            {
                "Input": "** nums1 = [6,7], nums2 = [6,0,4], k = 5",
                "Output": "** [6,7,6,0,4]",
                "Explanation": null
            },
            {
                "Input": "** nums1 = [3,9], nums2 = [8,9], k = 3",
                "Output": "** [9,8,9]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Coin Change",
        "slug": "coin-change",
        "description": "You are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money.\n\n\nReturn *the fewest number of coins that you need to make up that amount*. If that amount of money cannot be made up by any combination of the coins, return `-1`.\n\n\nYou may assume that you have an infinite number of each kind of coin.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** coins = [1,2,5], amount = 11",
                "Output": "** 3",
                "Explanation": "** 11 = 5 + 5 + 1"
            },
            {
                "Input": "** coins = [2], amount = 3",
                "Output": "** -1",
                "Explanation": null
            },
            {
                "Input": "** coins = [1], amount = 0",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Wiggle Sort II",
        "slug": "wiggle-sort-ii",
        "description": "Given an integer array `nums`, reorder it such that `nums[0] < nums[1] > nums[2] < nums[3]...`.\n\n\nYou may assume the input array always has a valid answer.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Divide and Conquer",
            "Greedy",
            "Sorting",
            "Quickselect"
        ],
        "examples": [
            {
                "Input": "** nums = [1,5,1,1,6,4]",
                "Output": "** [1,6,1,5,1,4]",
                "Explanation": "** [1,4,1,5,1,6] is also accepted."
            },
            {
                "Input": "** nums = [1,3,2,2,3,1]",
                "Output": "** [2,3,1,3,1,2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Power of Three",
        "slug": "power-of-three",
        "description": "Given an integer `n`, return *`true` if it is a power of three. Otherwise, return `false`*.\n\n\nAn integer `n` is a power of three, if there exists an integer `x` such that `n == 3x`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** n = 27",
                "Output": "** true",
                "Explanation": "** 27 = 33"
            },
            {
                "Input": "** n = 0",
                "Output": "** false",
                "Explanation": "** There is no x where 3x = 0."
            },
            {
                "Input": "** n = -1",
                "Output": "** false",
                "Explanation": "** There is no x where 3x = (-1)."
            }
        ]
    },
    {
        "Title": "Count of Range Sum",
        "slug": "count-of-range-sum",
        "description": "Given an integer array `nums` and two integers `lower` and `upper`, return *the number of range sums that lie in* `[lower, upper]` *inclusive*.\n\n\nRange sum `S(i, j)` is defined as the sum of the elements in `nums` between indices `i` and `j` inclusive, where `i <= j`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Divide and Conquer",
            "Binary Indexed Tree",
            "Segment Tree",
            "Merge Sort",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** nums = [-2,5,-1], lower = -2, upper = 2",
                "Output": "** 3",
                "Explanation": "** The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2."
            },
            {
                "Input": "** nums = [0], lower = 0, upper = 0",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Odd Even Linked List",
        "slug": "odd-even-linked-list",
        "description": "Given the `head` of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return *the reordered list*.\n\n\nThe **first** node is considered **odd**, and the **second** node is **even**, and so on.\n\n\nNote that the relative order inside both the even and odd groups should remain as it was in the input.\n\n\nYou must solve the problem\u00a0in `O(1)`\u00a0extra space complexity and `O(n)` time complexity.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List"
        ],
        "examples": [
            {
                "Input": "** head = [1,2,3,4,5]",
                "Output": "** [1,3,5,2,4]",
                "Explanation": null
            },
            {
                "Input": "** head = [2,1,3,5,6,4,7]",
                "Output": "** [2,3,6,7,1,5,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Increasing Path in a Matrix",
        "slug": "longest-increasing-path-in-a-matrix",
        "description": "Given an `m x n` integers `matrix`, return *the length of the longest increasing path in* `matrix`.\n\n\nFrom each cell, you can either move in four directions: left, right, up, or down. You **may not** move **diagonally** or move **outside the boundary** (i.e., wrap-around is not allowed).\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Depth-First Search",
            "Breadth-First Search",
            "Graph",
            "Topological Sort",
            "Memoization",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** matrix = [[9,9,4],[6,6,8],[2,1,1]]",
                "Output": "** 4",
                "Explanation": "** The longest increasing path is [1, 2, 6, 9]."
            },
            {
                "Input": "** matrix = [[3,4,5],[3,2,6],[2,2,1]]",
                "Output": "** 4",
                "Explanation": "** The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed."
            }
        ]
    },
    {
        "Title": "Patching Array",
        "slug": "patching-array",
        "description": "Given a sorted integer array `nums` and an integer `n`, add/patch elements to the array such that any number in the range `[1, n]` inclusive can be formed by the sum of some elements in the array.\n\n\nReturn *the minimum number of patches required*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3], n = 6",
                "Output": "** 1\nExplanation:\nCombinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\nNow if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\nSo we only need 1 patch.",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,5,10], n = 20",
                "Output": "** 2\nExplanation: The two patches can be [2, 4].",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2,2], n = 5",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Verify Preorder Serialization of a Binary Tree",
        "slug": "verify-preorder-serialization-of-a-binary-tree",
        "description": "One way to serialize a binary tree is to use **preorder traversal**. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as `'#'`.\n\n\n![](https://assets.leetcode.com/uploads/2021/03/12/pre-tree.jpg)\nFor example, the above binary tree can be serialized to the string `\"9,3,4,#,#,1,#,#,2,#,6,#,#\"`, where `'#'` represents a null node.\n\n\nGiven a string of comma-separated values `preorder`, return `true` if it is a correct preorder traversal serialization of a binary tree.\n\n\nIt is **guaranteed** that each comma-separated value in the string must be either an integer or a character `'#'` representing null pointer.\n\n\nYou may assume that the input format is always valid.\n\n\n For example, it could never contain two consecutive commas, such as `\"1,,3\"`.\n\n\nNote:**You are not allowed to reconstruct the tree.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Stack",
            "Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** preorder = \"1,#\"",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** preorder = \"9,#,#,1\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reconstruct Itinerary",
        "slug": "reconstruct-itinerary",
        "description": "You are given a list of airline `tickets` where `tickets[i] = [fromi, toi]` represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.\n\n\nAll of the tickets belong to a man who departs from `\"JFK\"`, thus, the itinerary must begin with `\"JFK\"`. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.\n\n\n For example, the itinerary `[\"JFK\", \"LGA\"]` has a smaller lexical order than `[\"JFK\", \"LGB\"]`.\n\n\nYou may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Depth-First Search",
            "Graph",
            "Eulerian Circuit"
        ],
        "examples": [
            {
                "Input": "** tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]",
                "Output": "** [\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]",
                "Explanation": null
            },
            {
                "Input": "** tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]",
                "Output": "** [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]",
                "Explanation": "** Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] but it is larger in lexical order."
            }
        ]
    },
    {
        "Title": "Increasing Triplet Subsequence",
        "slug": "increasing-triplet-subsequence",
        "description": "Given an integer array `nums`, return `true` *if there exists a triple of indices* `(i, j, k)` *such that* `i < j < k` *and* `nums[i] < nums[j] < nums[k]`. If no such indices exists, return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** true",
                "Explanation": "** Any triplet where i < j < k is valid."
            },
            {
                "Input": "** nums = [5,4,3,2,1]",
                "Output": "** false",
                "Explanation": "** No triplet exists."
            },
            {
                "Input": "** nums = [2,1,5,0,4,6]",
                "Output": "** true",
                "Explanation": "** The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6."
            }
        ]
    },
    {
        "Title": "Self Crossing",
        "slug": "self-crossing",
        "description": "You are given an array of integers `distance`.\n\n\nYou start at the point `(0, 0)` on an **X-Y plane,** and you move `distance[0]` meters to the north, then `distance[1]` meters to the west, `distance[2]` meters to the south, `distance[3]` meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.\n\n\nReturn `true` *if your path crosses itself or* `false` *if it does not*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Geometry"
        ],
        "examples": [
            {
                "Input": "** distance = [2,1,1,2]",
                "Output": "** true",
                "Explanation": "** The path crosses itself at the point (0, 1)."
            },
            {
                "Input": "** distance = [1,2,3,4]",
                "Output": "** false",
                "Explanation": "** The path does not cross itself at any point."
            },
            {
                "Input": "** distance = [1,1,1,2,1]",
                "Output": "** true",
                "Explanation": "** The path crosses itself at the point (0, 0)."
            }
        ]
    },
    {
        "Title": "Palindrome Pairs",
        "slug": "palindrome-pairs",
        "description": "You are given a **0-indexed** array of **unique** strings `words`.\n\n\nA **palindrome pair** is a pair of integers `(i, j)` such that:\n\n\n `0 <= i, j < words.length`,\n `i != j`, and\n `words[i] + words[j]` (the concatenation of the two strings) is a palindrome.\n\n\nReturn *an array of all the **palindrome pairs** of* `words`.\n\n\nYou must write an algorithm with\u00a0`O(sum of words[i].length)`\u00a0runtime complexity.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Trie"
        ],
        "examples": [
            {
                "Input": "** words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]",
                "Output": "** [[0,1],[1,0],[3,2],[2,4]]",
                "Explanation": "** The palindromes are [\"abcddcba\",\"dcbaabcd\",\"slls\",\"llssssll\"]"
            },
            {
                "Input": "** words = [\"bat\",\"tab\",\"cat\"]",
                "Output": "** [[0,1],[1,0]]",
                "Explanation": "** The palindromes are [\"battab\",\"tabbat\"]"
            },
            {
                "Input": "** words = [\"a\",\"\"]",
                "Output": "** [[0,1],[1,0]]",
                "Explanation": "** The palindromes are [\"a\",\"a\"]"
            }
        ]
    },
    {
        "Title": "House Robber III",
        "slug": "house-robber-iii",
        "description": "The thief has found himself a new place for his thievery again. There is only one entrance to this area, called `root`.\n\n\nBesides the `root`, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if **two directly-linked houses were broken into on the same night**.\n\n\nGiven the `root` of the binary tree, return *the maximum amount of money the thief can rob **without alerting the police***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [3,2,3,null,3,null,1]",
                "Output": "** 7",
                "Explanation": "** Maximum amount of money the thief can rob = 3 + 3 + 1 = 7."
            },
            {
                "Input": "** root = [3,4,5,1,3,null,1]",
                "Output": "** 9",
                "Explanation": "** Maximum amount of money the thief can rob = 4 + 5 = 9."
            }
        ]
    },
    {
        "Title": "Counting Bits",
        "slug": "counting-bits",
        "description": "Given an integer `n`, return *an array* `ans` *of length* `n + 1` *such that for each* `i`(`0 <= i <= n`)*,* `ans[i]` *is the **number of*** `1`***'s** in the binary representation of* `i`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Dynamic Programming",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** [0,1,1]",
                "Explanation": "**\n0 --> 0\n1 --> 1\n2 --> 10"
            },
            {
                "Input": "** n = 5",
                "Output": "** [0,1,1,2,1,2]",
                "Explanation": "**\n0 --> 0\n1 --> 1\n2 --> 10\n3 --> 11\n4 --> 100\n5 --> 101"
            }
        ]
    },
    {
        "Title": "Flatten Nested List Iterator",
        "slug": "flatten-nested-list-iterator",
        "description": "You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.\n\n\nImplement the `NestedIterator` class:\n\n\n `NestedIterator(List<NestedInteger> nestedList)` Initializes the iterator with the nested list `nestedList`.\n `int next()` Returns the next integer in the nested list.\n `boolean hasNext()` Returns `true` if there are still some integers in the nested list and `false` otherwise.\n\n\nYour code will be tested with the following pseudocode:\n\n\n\n```\n\ninitialize iterator with nestedList\nres = []\nwhile iterator.hasNext()\n    append iterator.next() to the end of res\nreturn res\n\n```\n\nIf `res` matches the expected flattened list, then your code will be judged as correct.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Stack",
            "Tree",
            "Depth-First Search",
            "Design",
            "Queue",
            "Iterator"
        ],
        "examples": [
            {
                "Input": "** nestedList = [[1,1],2,[1,1]]",
                "Output": "** [1,1,2,1,1]",
                "Explanation": "** By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1]."
            },
            {
                "Input": "** nestedList = [1,[4,[6]]]",
                "Output": "** [1,4,6]",
                "Explanation": "** By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6]."
            }
        ]
    },
    {
        "Title": "Power of Four",
        "slug": "power-of-four",
        "description": "Given an integer `n`, return *`true` if it is a power of four. Otherwise, return `false`*.\n\n\nAn integer `n` is a power of four, if there exists an integer `x` such that `n == 4x`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Bit Manipulation",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** n = 16",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** n = 5",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** n = 1",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Integer Break",
        "slug": "integer-break",
        "description": "Given an integer `n`, break it into the sum of `k` **positive integers**, where `k >= 2`, and maximize the product of those integers.\n\n\nReturn *the maximum product you can get*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** 1",
                "Explanation": "** 2 = 1 + 1, 1 \u00d7 1 = 1."
            },
            {
                "Input": "** n = 10",
                "Output": "** 36",
                "Explanation": "** 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36."
            }
        ]
    },
    {
        "Title": "Reverse String",
        "slug": "reverse-string",
        "description": "Write a function that reverses a string. The input string is given as an array of characters `s`.\n\n\nYou must do this by modifying the input array [in-place](https://en.wikipedia.org/wiki/In-place_algorithm) with `O(1)` extra memory.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = [\"h\",\"e\",\"l\",\"l\",\"o\"]",
                "Output": "** [\"o\",\"l\",\"l\",\"e\",\"h\"]",
                "Explanation": null
            },
            {
                "Input": "** s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]",
                "Output": "** [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reverse Vowels of a String",
        "slug": "reverse-vowels-of-a-string",
        "description": "Given a string `s`, reverse only all the vowels in the string and return it.\n\n\nThe vowels are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`, and they can appear in both lower and upper cases, more than once.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"hello\"",
                "Output": "** \"holle\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"leetcode\"",
                "Output": "** \"leotcede\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Top K Frequent Elements",
        "slug": "top-k-frequent-elements",
        "description": "Given an integer array `nums` and an integer `k`, return *the* `k` *most frequent elements*. You may return the answer in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Divide and Conquer",
            "Sorting",
            "Heap (Priority Queue)",
            "Bucket Sort",
            "Counting",
            "Quickselect"
        ],
        "examples": [
            {
                "Input": "** nums = [1,1,1,2,2,3], k = 2",
                "Output": "** [1,2]",
                "Explanation": null
            },
            {
                "Input": "** nums = [1], k = 1",
                "Output": "** [1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Intersection of Two Arrays",
        "slug": "intersection-of-two-arrays",
        "description": "Given two integer arrays `nums1` and `nums2`, return *an array of their intersection*. Each element in the result must be **unique** and you may return the result in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums1 = [1,2,2,1], nums2 = [2,2]",
                "Output": "** [2]",
                "Explanation": null
            },
            {
                "Input": "** nums1 = [4,9,5], nums2 = [9,4,9,8,4]",
                "Output": "** [9,4]",
                "Explanation": "** [4,9] is also accepted."
            }
        ]
    },
    {
        "Title": "Intersection of Two Arrays II",
        "slug": "intersection-of-two-arrays-ii",
        "description": "Given two integer arrays `nums1` and `nums2`, return *an array of their intersection*. Each element in the result must appear as many times as it shows in both arrays and you may return the result in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums1 = [1,2,2,1], nums2 = [2,2]",
                "Output": "** [2,2]",
                "Explanation": null
            },
            {
                "Input": "** nums1 = [4,9,5], nums2 = [9,4,9,8,4]",
                "Output": "** [4,9]",
                "Explanation": "** [9,4] is also accepted."
            }
        ]
    },
    {
        "Title": "Data Stream as Disjoint Intervals",
        "slug": "data-stream-as-disjoint-intervals",
        "description": "Given a data stream input of non-negative integers `a1, a2, ..., an`, summarize the numbers seen so far as a list of disjoint intervals.\n\n\nImplement the `SummaryRanges` class:\n\n\n `SummaryRanges()` Initializes the object with an empty stream.\n `void addNum(int value)` Adds the integer `value` to the stream.\n `int[][] getIntervals()` Returns a summary of the integers in the stream currently as a list of disjoint intervals `[starti, endi]`. The answer should be sorted by `starti`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Binary Search",
            "Design",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "[\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]\n[[], [1], [], [3], [], [7], [], [2], [], [6], []]",
                "Output": "[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]",
                "Explanation": "SummaryRanges summaryRanges = new SummaryRanges();\nsummaryRanges.addNum(1);      // arr = [1]\nsummaryRanges.getIntervals(); // return [[1, 1]]\nsummaryRanges.addNum(3);      // arr = [1, 3]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3]]\nsummaryRanges.addNum(7);      // arr = [1, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]\nsummaryRanges.addNum(2);      // arr = [1, 2, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [7, 7]]\nsummaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [6, 7]]"
            }
        ]
    },
    {
        "Title": "Russian Doll Envelopes",
        "slug": "russian-doll-envelopes",
        "description": "You are given a 2D array of integers `envelopes` where `envelopes[i] = [wi, hi]` represents the width and the height of an envelope.\n\n\nOne envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height.\n\n\nReturn *the maximum number of envelopes you can Russian doll (i.e., put one inside the other)*.\n\n\nNote:** You cannot rotate an envelope.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Dynamic Programming",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** envelopes = [[5,4],[6,4],[6,7],[2,3]]",
                "Output": "** 3",
                "Explanation": "** The maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7])."
            },
            {
                "Input": "** envelopes = [[1,1],[1,1],[1,1]]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Design Twitter",
        "slug": "design-twitter",
        "description": "Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the `10` most recent tweets in the user's news feed.\n\n\nImplement the `Twitter` class:\n\n\n `Twitter()` Initializes your twitter object.\n `void postTweet(int userId, int tweetId)` Composes a new tweet with ID `tweetId` by the user `userId`. Each call to this function will be made with a unique `tweetId`.\n `List<Integer> getNewsFeed(int userId)` Retrieves the `10` most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be **ordered from most recent to least recent**.\n `void follow(int followerId, int followeeId)` The user with ID `followerId` started following the user with ID `followeeId`.\n `void unfollow(int followerId, int followeeId)` The user with ID `followerId` started unfollowing the user with ID `followeeId`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Linked List",
            "Design",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "[\"Twitter\", \"postTweet\", \"getNewsFeed\", \"follow\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\"]\n[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]",
                "Output": "[null, null, [5], null, null, [6, 5], null, [5]]",
                "Explanation": "Twitter twitter = new Twitter();\ntwitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]\ntwitter.follow(1, 2);    // User 1 follows user 2.\ntwitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\ntwitter.unfollow(1, 2);  // User 1 unfollows user 2.\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2."
            }
        ]
    },
    {
        "Title": "Count Numbers with Unique Digits",
        "slug": "count-numbers-with-unique-digits",
        "description": "Given an integer `n`, return the count of all numbers with unique digits, `x`, where `0 <= x < 10n`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** 91",
                "Explanation": "** The answer should be the total numbers in the range of 0 \u2264 x < 100, excluding 11,22,33,44,55,66,77,88,99"
            },
            {
                "Input": "** n = 0",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Max Sum of Rectangle No Larger Than K",
        "slug": "max-sum-of-rectangle-no-larger-than-k",
        "description": "Given an `m x n` matrix `matrix` and an integer `k`, return *the max sum of a rectangle in the matrix such that its sum is no larger than* `k`.\n\n\nIt is **guaranteed** that there will be a rectangle with a sum no larger than `k`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Matrix",
            "Prefix Sum",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** matrix = [[1,0,1],[0,-2,3]], k = 2",
                "Output": "** 2",
                "Explanation": "** Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2)."
            }
        ]
    },
    {
        "Title": "Water and Jug Problem",
        "slug": "water-and-jug-problem",
        "description": "You are given two jugs with capacities `x` liters and `y` liters. You have an infinite water supply. Return whether the total amount of water in both jugs may reach `target` using the following operations:\n\n\n Fill either jug completely with water.\n Completely empty either jug.\n Pour water from one jug into another until the receiving jug is full, or the transferring jug is empty.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Depth-First Search",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "**   x = 3, y = 5, target = 4",
                "Output": "**   true",
                "Explanation": "**\n\n\nFollow these steps to reach a total of 4 liters:\n\n\n1. Fill the 5-liter jug (0, 5).\n2. Pour from the 5-liter jug into the 3-liter jug, leaving 2 liters (3, 2).\n3. Empty the 3-liter jug (0, 2).\n4. Transfer the 2 liters from the 5-liter jug to the 3-liter jug (2, 0).\n5. Fill the 5-liter jug again (2, 5).\n6. Pour from the 5-liter jug into the 3-liter jug until the 3-liter jug is full. This leaves 4 liters in the 5-liter jug (3, 4).\n7. Empty the 3-liter jug. Now, you have exactly 4 liters in the 5-liter jug (0, 4).\n\n\nReference: The [Die Hard](https://www.youtube.com/watch?v=BVtQNK_ZUJg&ab_channel=notnek01) example."
            },
            {
                "Input": "**   x = 2, y = 6, target = 5",
                "Output": "**   false",
                "Explanation": null
            },
            {
                "Input": "**   x = 1, y = 2, target = 3",
                "Output": "**   true",
                "Explanation": "** Fill both jugs. The total amount of water in both jugs is equal to 3 now.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= x, y, target\u00a0<= 103`"
            }
        ]
    },
    {
        "Title": "Valid Perfect Square",
        "slug": "valid-perfect-square",
        "description": "Given a positive integer num, return `true` *if* `num` *is a perfect square or* `false` *otherwise*.\n\n\nA **perfect square** is an integer that is the square of an integer. In other words, it is the product of some integer with itself.\n\n\nYou must not use any built-in library function, such as `sqrt`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** num = 16",
                "Output": "** true",
                "Explanation": "** We return true because 4 * 4 = 16 and 4 is an integer."
            },
            {
                "Input": "** num = 14",
                "Output": "** false",
                "Explanation": "** We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer."
            }
        ]
    },
    {
        "Title": "Largest Divisible Subset",
        "slug": "largest-divisible-subset",
        "description": "Given a set of **distinct** positive integers `nums`, return the largest subset `answer` such that every pair `(answer[i], answer[j])` of elements in this subset satisfies:\n\n\n `answer[i] % answer[j] == 0`, or\n `answer[j] % answer[i] == 0`\n\n\nIf there are multiple solutions, return any of them.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** [1,2]",
                "Explanation": "** [1,3] is also accepted."
            },
            {
                "Input": "** nums = [1,2,4,8]",
                "Output": "** [1,2,4,8]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sum of Two Integers",
        "slug": "sum-of-two-integers",
        "description": "Given two integers `a` and `b`, return *the sum of the two integers without using the operators* `+` *and* `-`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** a = 1, b = 2",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** a = 2, b = 3",
                "Output": "** 5",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Super Pow",
        "slug": "super-pow",
        "description": "Your task is to calculate `ab` mod `1337` where `a` is a positive integer and `b` is an extremely large positive integer given in the form of an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Divide and Conquer"
        ],
        "examples": [
            {
                "Input": "** a = 2, b = [3]",
                "Output": "** 8",
                "Explanation": null
            },
            {
                "Input": "** a = 2, b = [1,0]",
                "Output": "** 1024",
                "Explanation": null
            },
            {
                "Input": "** a = 1, b = [4,3,3,8,5,2]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find K Pairs with Smallest Sums",
        "slug": "find-k-pairs-with-smallest-sums",
        "description": "You are given two integer arrays `nums1` and `nums2` sorted in **non-decreasing\u00a0order** and an integer `k`.\n\n\nDefine a pair `(u, v)` which consists of one element from the first array and one element from the second array.\n\n\nReturn *the* `k` *pairs* `(u1, v1), (u2, v2), ..., (uk, vk)` *with the smallest sums*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** nums1 = [1,7,11], nums2 = [2,4,6], k = 3",
                "Output": "** [[1,2],[1,4],[1,6]]",
                "Explanation": "** The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]"
            },
            {
                "Input": "** nums1 = [1,1,2], nums2 = [1,2,3], k = 2",
                "Output": "** [[1,1],[1,1]]",
                "Explanation": "** The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]"
            }
        ]
    },
    {
        "Title": "Guess Number Higher or Lower",
        "slug": "guess-number-higher-or-lower",
        "description": "We are playing the Guess Game. The game is as follows:\n\n\nI pick a number from `1` to `n`. You have to guess which number I picked.\n\n\nEvery time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.\n\n\nYou call a pre-defined API `int guess(int num)`, which returns three possible results:\n\n\n `-1`: Your guess is higher than the number I picked (i.e. `num > pick`).\n `1`: Your guess is lower than the number I picked (i.e. `num < pick`).\n `0`: your guess is equal to the number I picked (i.e. `num == pick`).\n\n\nReturn *the number that I picked*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Binary Search",
            "Interactive"
        ],
        "examples": [
            {
                "Input": "** n = 10, pick = 6",
                "Output": "** 6",
                "Explanation": null
            },
            {
                "Input": "** n = 1, pick = 1",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** n = 2, pick = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Guess Number Higher or Lower II",
        "slug": "guess-number-higher-or-lower-ii",
        "description": "We are playing the Guessing Game. The game will work as follows:\n\n\n1. I pick a number between\u00a0`1`\u00a0and\u00a0`n`.\n2. You guess a number.\n3. If you guess the right number, **you win the game**.\n4. If you guess the wrong number, then I will tell you whether the number I picked is **higher or lower**, and you will continue guessing.\n5. Every time you guess a wrong number\u00a0`x`, you will pay\u00a0`x`\u00a0dollars. If you run out of money, **you lose the game**.\n\n\nGiven a particular\u00a0`n`, return\u00a0*the minimum amount of money you need to\u00a0**guarantee a win regardless of what number I pick***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Game Theory"
        ],
        "examples": [
            {
                "Input": "** n = 10",
                "Output": "** 16",
                "Explanation": "** The winning strategy is as follows:\n- The range is [1,10]. Guess 7.\n\u00a0   - If this is my number, your total is $0. Otherwise, you pay $7.\n\u00a0   - If my number is higher, the range is [8,10]. Guess 9.\n\u00a0       - If this is my number, your total is $7. Otherwise, you pay $9.\n\u00a0       - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.\n\u00a0       - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.\n\u00a0   - If my number is lower, the range is [1,6]. Guess 3.\n\u00a0       - If this is my number, your total is $7. Otherwise, you pay $3.\n\u00a0       - If my number is higher, the range is [4,6]. Guess 5.\n\u00a0           - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.\n\u00a0           - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.\n\u00a0           - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.\n\u00a0       - If my number is lower, the range is [1,2]. Guess 1.\n\u00a0           - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.\n\u00a0           - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.\nThe worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win."
            }
        ]
    },
    {
        "Title": "Wiggle Subsequence",
        "slug": "wiggle-subsequence",
        "description": "A **wiggle sequence** is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.\n\n\n For example, `[1, 7, 4, 9, 2, 5]` is a **wiggle sequence** because the differences `(6, -3, 5, -7, 3)` alternate between positive and negative.\n In contrast, `[1, 4, 7, 2, 5]` and `[1, 7, 4, 5, 5]` are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.\n\n\nA **subsequence** is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.\n\n\nGiven an integer array `nums`, return *the length of the longest **wiggle subsequence** of* `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums = [1,7,4,9,2,5]",
                "Output": "** 6",
                "Explanation": "** The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3)."
            },
            {
                "Input": "** nums = [1,17,5,10,13,15,10,5,16,8]",
                "Output": "** 7",
                "Explanation": "** There are several subsequences that achieve this length.\nOne is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8)."
            },
            {
                "Input": "** nums = [1,2,3,4,5,6,7,8,9]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Combination Sum IV",
        "slug": "combination-sum-iv",
        "description": "Given an array of **distinct** integers `nums` and a target integer `target`, return *the number of possible combinations that add up to*\u00a0`target`.\n\n\nThe test cases are generated so that the answer can fit in a **32-bit** integer.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3], target = 4",
                "Output": "** 7",
                "Explanation": "**\nThe possible combination ways are:\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\nNote that different sequences are counted as different combinations."
            },
            {
                "Input": "** nums = [9], target = 3",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Kth Smallest Element in a Sorted Matrix",
        "slug": "kth-smallest-element-in-a-sorted-matrix",
        "description": "Given an `n x n` `matrix` where each of the rows and columns is sorted in ascending order, return *the* `kth` *smallest element in the matrix*.\n\n\nNote that it is the `kth` smallest element **in the sorted order**, not the `kth` **distinct** element.\n\n\nYou must find a solution with a memory complexity better than `O(n2)`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Sorting",
            "Heap (Priority Queue)",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8",
                "Output": "** 13",
                "Explanation": "** The elements in the matrix are [1,5,9,10,11,12,13,**13**,15], and the 8th smallest number is 13"
            },
            {
                "Input": "** matrix = [[-5]], k = 1",
                "Output": "** -5",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Insert Delete GetRandom O(1)",
        "slug": "insert-delete-getrandom-o1",
        "description": "Implement the `RandomizedSet` class:\n\n\n `RandomizedSet()` Initializes the `RandomizedSet` object.\n `bool insert(int val)` Inserts an item `val` into the set if not present. Returns `true` if the item was not present, `false` otherwise.\n `bool remove(int val)` Removes an item `val` from the set if present. Returns `true` if the item was present, `false` otherwise.\n `int getRandom()` Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the **same probability** of being returned.\n\n\nYou must implement the functions of the class such that each function works in\u00a0**average**\u00a0`O(1)`\u00a0time complexity.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Design",
            "Randomized"
        ],
        "examples": [
            {
                "Input": "[\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n[[], [1], [2], [2], [], [1], [2], []]",
                "Output": "[null, true, false, true, 2, true, false, 2]",
                "Explanation": "RandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomizedSet.remove(2); // Returns false as 2 does not exist in the set.\nrandomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\nrandomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\nrandomizedSet.insert(2); // 2 was already in the set, so return false.\nrandomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2."
            }
        ]
    },
    {
        "Title": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "slug": "insert-delete-getrandom-o1-duplicates-allowed",
        "description": "`RandomizedCollection` is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.\n\n\nImplement the `RandomizedCollection` class:\n\n\n `RandomizedCollection()` Initializes the empty `RandomizedCollection` object.\n `bool insert(int val)` Inserts an item `val` into the multiset, even if the item is already present. Returns `true` if the item is not present, `false` otherwise.\n `bool remove(int val)` Removes an item `val` from the multiset if present. Returns `true` if the item is present, `false` otherwise. Note that if `val` has multiple occurrences in the multiset, we only remove one of them.\n `int getRandom()` Returns a random element from the current multiset of elements. The probability of each element being returned is **linearly related** to the number of the same values the multiset contains.\n\n\nYou must implement the functions of the class such that each function works on **average** `O(1)` time complexity.\n\n\nNote:** The test cases are generated such that `getRandom` will only be called if there is **at least one** item in the `RandomizedCollection`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Design",
            "Randomized"
        ],
        "examples": [
            {
                "Input": "[\"RandomizedCollection\", \"insert\", \"insert\", \"insert\", \"getRandom\", \"remove\", \"getRandom\"]\n[[], [1], [1], [2], [], [1], []]",
                "Output": "[null, true, false, true, 2, true, 1]",
                "Explanation": "RandomizedCollection randomizedCollection = new RandomizedCollection();\nrandomizedCollection.insert(1);   // return true since the collection does not contain 1.\n                                  // Inserts 1 into the collection.\nrandomizedCollection.insert(1);   // return false since the collection contains 1.\n                                  // Inserts another 1 into the collection. Collection now contains [1,1].\nrandomizedCollection.insert(2);   // return true since the collection does not contain 2.\n                                  // Inserts 2 into the collection. Collection now contains [1,1,2].\nrandomizedCollection.getRandom(); // getRandom should:\n                                  // - return 1 with probability 2/3, or\n                                  // - return 2 with probability 1/3.\nrandomizedCollection.remove(1);   // return true since the collection contains 1.\n                                  // Removes 1 from the collection. Collection now contains [1,2].\nrandomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely."
            }
        ]
    },
    {
        "Title": "Linked List Random Node",
        "slug": "linked-list-random-node",
        "description": "Given a singly linked list, return a random node's value from the linked list. Each node must have the **same probability** of being chosen.\n\n\nImplement the `Solution` class:\n\n\n `Solution(ListNode head)` Initializes the object with the head of the singly-linked list `head`.\n `int getRandom()` Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Math",
            "Reservoir Sampling",
            "Randomized"
        ],
        "examples": [
            {
                "Input": "[\"Solution\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\"]\n[[[1, 2, 3]], [], [], [], [], []]",
                "Output": "[null, 1, 3, 2, 2, 3]",
                "Explanation": "Solution solution = new Solution([1, 2, 3]);\nsolution.getRandom(); // return 1\nsolution.getRandom(); // return 3\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 3\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning."
            }
        ]
    },
    {
        "Title": "Ransom Note",
        "slug": "ransom-note",
        "description": "Given two strings `ransomNote` and `magazine`, return `true` *if* `ransomNote` *can be constructed by using the letters from* `magazine` *and* `false` *otherwise*.\n\n\nEach letter in `magazine` can only be used once in `ransomNote`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** ransomNote = \"a\", magazine = \"b\"",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** ransomNote = \"aa\", magazine = \"ab\"",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** ransomNote = \"aa\", magazine = \"aab\"",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Shuffle an Array",
        "slug": "shuffle-an-array",
        "description": "Given an integer array `nums`, design an algorithm to randomly shuffle the array. All permutations of the array should be **equally likely** as a result of the shuffling.\n\n\nImplement the `Solution` class:\n\n\n `Solution(int[] nums)` Initializes the object with the integer array `nums`.\n `int[] reset()` Resets the array to its original configuration and returns it.\n `int[] shuffle()` Returns a random shuffling of the array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Randomized"
        ],
        "examples": [
            {
                "Input": "[\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]\n[[[1, 2, 3]], [], [], []]",
                "Output": "[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]",
                "Explanation": "Solution solution = new Solution([1, 2, 3]);\nsolution.shuffle();    // Shuffle the array [1,2,3] and return its result.\n                       // Any permutation of [1,2,3] must be equally likely to be returned.\n                       // Example: return [3, 1, 2]\nsolution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]\nsolution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]"
            }
        ]
    },
    {
        "Title": "Mini Parser",
        "slug": "mini-parser",
        "description": "Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return *the deserialized* `NestedInteger`.\n\n\nEach element is either an integer or a list whose elements may also be integers or other lists.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Stack",
            "Depth-First Search"
        ],
        "examples": [
            {
                "Input": "** s = \"324\"",
                "Output": "** 324",
                "Explanation": "** You should return a NestedInteger object which contains a single integer 324."
            },
            {
                "Input": "** s = \"[123,[456,[789]]]\"",
                "Output": "** [123,[456,[789]]]",
                "Explanation": "** Return a NestedInteger object containing a nested list with 2 elements:\n1. An integer containing value 123.\n2. A nested list containing two elements:\n    i.  An integer containing value 456.\n    ii. A nested list with one element:\n         a. An integer containing value 789"
            }
        ]
    },
    {
        "Title": "Lexicographical Numbers",
        "slug": "lexicographical-numbers",
        "description": "Given an integer `n`, return all the numbers in the range `[1, n]` sorted in lexicographical order.\n\n\nYou must write an algorithm that runs in\u00a0`O(n)`\u00a0time and uses `O(1)` extra space.\u00a0\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Trie"
        ],
        "examples": [
            {
                "Input": "** n = 13",
                "Output": "** [1,10,11,12,13,2,3,4,5,6,7,8,9]",
                "Explanation": null
            },
            {
                "Input": "** n = 2",
                "Output": "** [1,2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "First Unique Character in a String",
        "slug": "first-unique-character-in-a-string",
        "description": "Given a string `s`, *find the first non-repeating character in it and return its index*. If it does not exist, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Queue",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** s = \"leetcode\"",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** s = \"loveleetcode\"",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** s = \"aabb\"",
                "Output": "** -1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Absolute File Path",
        "slug": "longest-absolute-file-path",
        "description": "Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:\n\n\n![](https://assets.leetcode.com/uploads/2020/08/28/mdir.jpg)\n\n\nHere, we have `dir` as the only directory in the root. `dir` contains two subdirectories, `subdir1` and `subdir2`. `subdir1` contains a file `file1.ext` and subdirectory `subsubdir1`. `subdir2` contains a subdirectory `subsubdir2`, which contains a file `file2.ext`.\n\n\nIn text form, it looks like this (with \u27f6 representing the tab character):\n\n\n\n```\n\ndir\n\u27f6 subdir1\n\u27f6 \u27f6 file1.ext\n\u27f6 \u27f6 subsubdir1\n\u27f6 subdir2\n\u27f6 \u27f6 subsubdir2\n\u27f6 \u27f6 \u27f6 file2.ext\n\n```\n\nIf we were to write this representation in code, it will look like this: `\"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"`. Note that the `'\\n'` and `'\\t'` are the new-line and tab characters.\n\n\nEvery file and directory has a unique **absolute path** in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by `'/'s`. Using the above example, the **absolute path** to `file2.ext` is `\"dir/subdir2/subsubdir2/file2.ext\"`. Each directory name consists of letters, digits, and/or spaces. Each file name is of the form `name.extension`, where `name` and `extension` consist of letters, digits, and/or spaces.\n\n\nGiven a string `input` representing the file system in the explained format, return *the length of the **longest absolute path** to a **file** in the abstracted file system*. If there is no file in the system, return `0`.\n\n\nNote** that the testcases are generated such that the file system is valid and no file or directory name has length 0.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Stack",
            "Depth-First Search"
        ],
        "examples": [
            {
                "Input": "** input = \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"",
                "Output": "** 20",
                "Explanation": "** We have only one file, and the absolute path is \"dir/subdir2/file.ext\" of length 20."
            },
            {
                "Input": "** input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"",
                "Output": "** 32",
                "Explanation": "** We have two files:\n\"dir/subdir1/file1.ext\" of length 21\n\"dir/subdir2/subsubdir2/file2.ext\" of length 32.\nWe return 32 since it is the longest absolute path to a file."
            }
        ]
    },
    {
        "Title": "Find the Difference",
        "slug": "find-the-difference",
        "description": "You are given two strings `s` and `t`.\n\n\nString `t` is generated by random shuffling string `s` and then add one more letter at a random position.\n\n\nReturn the letter that was added to `t`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Bit Manipulation",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** s = \"abcd\", t = \"abcde\"",
                "Output": "** \"e\"",
                "Explanation": "** 'e' is the letter that was added."
            },
            {
                "Input": "** s = \"\", t = \"y\"",
                "Output": "** \"y\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Elimination Game",
        "slug": "elimination-game",
        "description": "You have a list `arr` of all integers in the range `[1, n]` sorted in a strictly increasing order. Apply the following algorithm on `arr`:\n\n\n Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.\n Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.\n Keep repeating the steps again, alternating left to right and right to left, until a single number remains.\n\n\nGiven the integer `n`, return *the last number that remains in* `arr`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** n = 9",
                "Output": "** 6",
                "Explanation": "**\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\narr = [2, 4, 6, 8]\narr = [2, 6]\narr = [6]"
            },
            {
                "Input": "** n = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Perfect Rectangle",
        "slug": "perfect-rectangle",
        "description": "Given an array `rectangles` where `rectangles[i] = [xi, yi, ai, bi]` represents an axis-aligned rectangle. The bottom-left point of the rectangle is `(xi, yi)` and the top-right point of it is `(ai, bi)`.\n\n\nReturn `true` *if all the rectangles together form an exact cover of a rectangular region*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Line Sweep"
        ],
        "examples": [
            {
                "Input": "** rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]",
                "Output": "** true",
                "Explanation": "** All 5 rectangles together form an exact cover of a rectangular region."
            },
            {
                "Input": "** rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]",
                "Output": "** false",
                "Explanation": "** Because there is a gap between the two rectangular regions."
            },
            {
                "Input": "** rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]",
                "Output": "** false",
                "Explanation": "** Because two of the rectangles overlap with each other."
            }
        ]
    },
    {
        "Title": "Is Subsequence",
        "slug": "is-subsequence",
        "description": "Given two strings `s` and `t`, return `true` *if* `s` *is a **subsequence** of* `t`*, or* `false` *otherwise*.\n\n\nA **subsequence** of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `\"ace\"` is a subsequence of `\"abcde\"` while `\"aec\"` is not).\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"abc\", t = \"ahbgdc\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"axc\", t = \"ahbgdc\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "UTF-8 Validation",
        "slug": "utf-8-validation",
        "description": "Given an integer array `data` representing the data, return whether it is a valid **UTF-8** encoding (i.e. it translates to a sequence of valid UTF-8 encoded characters).\n\n\nA character in **UTF8** can be from **1 to 4 bytes** long, subjected to the following rules:\n\n\n1. For a **1-byte** character, the first bit is a `0`, followed by its Unicode code.\n2. For an **n-bytes** character, the first `n` bits are all one's, the `n + 1` bit is `0`, followed by `n - 1` bytes with the most significant `2` bits being `10`.\n\n\nThis is how the UTF-8 encoding would work:\n\n\n\n```\n\n     Number of Bytes   |        UTF-8 Octet Sequence\n                       |              (binary)\n   --------------------+-----------------------------------------\n            1          |   0xxxxxxx\n            2          |   110xxxxx 10xxxxxx\n            3          |   1110xxxx 10xxxxxx 10xxxxxx\n            4          |   11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\n```\n\n`x` denotes a bit in the binary form of a byte that may be either `0` or `1`.\n\n\nNote:** The input is an array of integers. Only the **least significant 8 bits** of each integer is used to store the data. This means each integer represents only 1 byte of data.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** data = [197,130,1]",
                "Output": "** true",
                "Explanation": "** data represents the octet sequence: 11000101 10000010 00000001.\nIt is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character."
            },
            {
                "Input": "** data = [235,140,4]",
                "Output": "** false",
                "Explanation": "** data represented the octet sequence: 11101011 10001100 00000100.\nThe first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.\nThe next byte is a continuation byte which starts with 10 and that's correct.\nBut the second continuation byte does not start with 10, so it is invalid."
            }
        ]
    },
    {
        "Title": "Decode String",
        "slug": "decode-string",
        "description": "Given an encoded string, return its decoded string.\n\n\nThe encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is being repeated exactly `k` times. Note that `k` is guaranteed to be a positive integer.\n\n\nYou may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, `k`. For example, there will not be input like `3a` or `2[4]`.\n\n\nThe test cases are generated so that the length of the output will never exceed `105`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Stack",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** s = \"3[a]2[bc]\"",
                "Output": "** \"aaabcbc\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"3[a2[c]]\"",
                "Output": "** \"accaccacc\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"2[abc]3[cd]ef\"",
                "Output": "** \"abcabccdcdcdef\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Substring with At Least K Repeating Characters",
        "slug": "longest-substring-with-at-least-k-repeating-characters",
        "description": "Given a string `s` and an integer `k`, return *the length of the longest substring of* `s` *such that the frequency of each character in this substring is greater than or equal to* `k`.\n\n\nif no such substring exists, return 0.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Divide and Conquer",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** s = \"aaabb\", k = 3",
                "Output": "** 3",
                "Explanation": "** The longest substring is \"aaa\", as 'a' is repeated 3 times."
            },
            {
                "Input": "** s = \"ababbc\", k = 2",
                "Output": "** 5",
                "Explanation": "** The longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times."
            }
        ]
    },
    {
        "Title": "Rotate Function",
        "slug": "rotate-function",
        "description": "You are given an integer array `nums` of length `n`.\n\n\nAssume `arrk` to be an array obtained by rotating `nums` by `k` positions clock-wise. We define the **rotation function** `F` on `nums` as follow:\n\n\n `F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].`\n\n\nReturn *the maximum value of* `F(0), F(1), ..., F(n-1)`.\n\n\nThe test cases are generated so that the answer fits in a **32-bit** integer.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [4,3,2,6]",
                "Output": "** 26",
                "Explanation": "**\nF(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\nSo the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26."
            },
            {
                "Input": "** nums = [100]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Integer Replacement",
        "slug": "integer-replacement",
        "description": "Given a positive integer `n`,\u00a0you can apply one of the following\u00a0operations:\n\n\n1. If `n` is even, replace `n` with `n / 2`.\n2. If `n` is odd, replace `n` with either `n + 1` or `n - 1`.\n\n\nReturn *the minimum number of operations needed for* `n` *to become* `1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming",
            "Greedy",
            "Bit Manipulation",
            "Memoization"
        ],
        "examples": [
            {
                "Input": "** n = 8",
                "Output": "** 3",
                "Explanation": "** 8 -> 4 -> 2 -> 1"
            },
            {
                "Input": "** n = 7",
                "Output": "** 4",
                "Explanation": "** 7 -> 8 -> 4 -> 2 -> 1\nor 7 -> 6 -> 3 -> 2 -> 1"
            },
            {
                "Input": "** n = 4",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Random Pick Index",
        "slug": "random-pick-index",
        "description": "Given an integer array `nums` with possible **duplicates**, randomly output the index of a given `target` number. You can assume that the given target number must exist in the array.\n\n\nImplement the `Solution` class:\n\n\n `Solution(int[] nums)` Initializes the object with the array `nums`.\n `int pick(int target)` Picks a random index `i` from `nums` where `nums[i] == target`. If there are multiple valid i's, then each index should have an equal probability of returning.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Math",
            "Reservoir Sampling",
            "Randomized"
        ],
        "examples": [
            {
                "Input": "[\"Solution\", \"pick\", \"pick\", \"pick\"]\n[[[1, 2, 3, 3, 3]], [3], [1], [3]]",
                "Output": "[null, 4, 0, 2]",
                "Explanation": "Solution solution = new Solution([1, 2, 3, 3, 3]);\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\nsolution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning."
            }
        ]
    },
    {
        "Title": "Evaluate Division",
        "slug": "evaluate-division",
        "description": "You are given an array of variable pairs `equations` and an array of real numbers `values`, where `equations[i] = [Ai, Bi]` and `values[i]` represent the equation `Ai / Bi = values[i]`. Each `Ai` or `Bi` is a string that represents a single variable.\n\n\nYou are also given some `queries`, where `queries[j] = [Cj, Dj]` represents the `jth` query where you must find the answer for `Cj / Dj = ?`.\n\n\nReturn *the answers to all queries*. If a single answer cannot be determined, return `-1.0`.\n\n\nNote:** The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.\n\n\nNote:**The variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph",
            "Shortest Path"
        ],
        "examples": [
            {
                "Input": "** equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]",
                "Output": "** [6.00000,0.50000,-1.00000,1.00000,-1.00000]",
                "Explanation": "** \nGiven: *a / b = 2.0*, *b / c = 3.0*\nqueries are: *a / c = ?*, *b / a = ?*, *a / e = ?*, *a / a = ?*, *x / x = ?* \nreturn: [6.0, 0.5, -1.0, 1.0, -1.0 ]\nnote: x is undefined => -1.0"
            },
            {
                "Input": "** equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]",
                "Output": "** [3.75000,0.40000,5.00000,0.20000]",
                "Explanation": null
            },
            {
                "Input": "** equations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]",
                "Output": "** [0.50000,2.00000,-1.00000,-1.00000]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Nth Digit",
        "slug": "nth-digit",
        "description": "Given an integer `n`, return the `nth` digit of the infinite integer sequence `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...]`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** n = 11",
                "Output": "** 0",
                "Explanation": "** The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10."
            }
        ]
    },
    {
        "Title": "Binary Watch",
        "slug": "binary-watch",
        "description": "A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent\u00a0the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.\n\n\n For example, the below binary watch reads `\"4:51\"`.\n\n\n![](https://assets.leetcode.com/uploads/2021/04/08/binarywatch.jpg)\n\n\nGiven an integer `turnedOn` which represents the number of LEDs that are currently on (ignoring the PM), return *all possible times the watch could represent*. You may return the answer in **any order**.\n\n\nThe hour must not contain a leading zero.\n\n\n For example, `\"01:00\"` is not valid. It should be `\"1:00\"`.\n\n\nThe minute must\u00a0consist of two digits and may contain a leading zero.\n\n\n For example, `\"10:2\"` is not valid. It should be `\"10:02\"`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Backtracking",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** turnedOn = 1",
                "Output": "** [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]",
                "Explanation": null
            },
            {
                "Input": "** turnedOn = 9",
                "Output": "** []",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove K Digits",
        "slug": "remove-k-digits",
        "description": "Given string num representing a non-negative integer `num`, and an integer `k`, return *the smallest possible integer after removing* `k` *digits from* `num`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Stack",
            "Greedy",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** num = \"1432219\", k = 3",
                "Output": "** \"1219\"",
                "Explanation": "** Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest."
            },
            {
                "Input": "** num = \"10200\", k = 1",
                "Output": "** \"200\"",
                "Explanation": "** Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes."
            },
            {
                "Input": "** num = \"10\", k = 2",
                "Output": "** \"0\"",
                "Explanation": "** Remove all the digits from the number and it is left with nothing which is 0."
            }
        ]
    },
    {
        "Title": "Frog Jump",
        "slug": "frog-jump",
        "description": "A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.\n\n\nGiven a list of `stones`\u00a0positions (in units) in sorted **ascending order**, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be `1` unit.\n\n\nIf the frog's last jump was `k` units, its next jump must be either `k - 1`, `k`, or `k + 1` units. The frog can only jump in the forward direction.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** stones = [0,1,3,5,6,8,12,17]",
                "Output": "** true",
                "Explanation": "** The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone."
            },
            {
                "Input": "** stones = [0,1,2,3,4,8,9,11]",
                "Output": "** false",
                "Explanation": "** There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large."
            }
        ]
    },
    {
        "Title": "Sum of Left Leaves",
        "slug": "sum-of-left-leaves",
        "description": "Given the `root` of a binary tree, return *the sum of all left leaves.\n\n\nA **leaf** is a node with no children. A **left leaf** is a leaf that is the left child of another node.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [3,9,20,null,null,15,7]",
                "Output": "** 24",
                "Explanation": "** There are two left leaves in the binary tree, with values 9 and 15 respectively."
            }
        ]
    },
    {
        "Title": "Convert a Number to Hexadecimal",
        "slug": "convert-a-number-to-hexadecimal",
        "description": "Given an integer `num`, return *a string representing its hexadecimal representation*. For negative integers, [two\u2019s complement](https://en.wikipedia.org/wiki/Two%27s_complement) method is used.\n\n\nAll the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.\n\n\nNote:**You are not allowed to use any built-in library method to directly solve this problem.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** num = 26",
                "Output": "** \"1a\"",
                "Explanation": null
            },
            {
                "Input": "** num = -1",
                "Output": "** \"ffffffff\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Queue Reconstruction by Height",
        "slug": "queue-reconstruction-by-height",
        "description": "You are given an array of people, `people`, which are the attributes of some people in a queue (not necessarily in order). Each `people[i] = [hi, ki]` represents the `ith` person of height `hi` with **exactly** `ki` other people in front who have a height greater than or equal to `hi`.\n\n\nReconstruct and return *the queue that is represented by the input array* `people`. The returned queue should be formatted as an array `queue`, where `queue[j] = [hj, kj]` is the attributes of the `jth` person in the queue (`queue[0]` is the person at the front of the queue).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Indexed Tree",
            "Segment Tree",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]",
                "Output": "** [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]",
                "Explanation": "**\nPerson 0 has height 5 with no other people taller or the same height in front.\nPerson 1 has height 7 with no other people taller or the same height in front.\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\nHence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue."
            },
            {
                "Input": "** people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]",
                "Output": "** [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Trapping Rain Water II",
        "slug": "trapping-rain-water-ii",
        "description": "Given an `m x n` integer matrix `heightMap` representing the height of each unit cell in a 2D elevation map, return *the volume of water it can trap after raining*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Breadth-First Search",
            "Heap (Priority Queue)",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]",
                "Output": "** 4",
                "Explanation": "** After the rain, water is trapped between the blocks.\nWe have two small ponds 1 and 3 units trapped.\nThe total volume of water trapped is 4."
            },
            {
                "Input": "** heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]",
                "Output": "** 10",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Palindrome",
        "slug": "longest-palindrome",
        "description": "Given a string `s` which consists of lowercase or uppercase letters, return the length of the **longest palindrome**\u00a0that can be built with those letters.\n\n\nLetters are **case sensitive**, for example, `\"Aa\"` is not considered a palindrome.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"abccccdd\"",
                "Output": "** 7",
                "Explanation": "** One longest palindrome that can be built is \"dccaccd\", whose length is 7."
            },
            {
                "Input": "** s = \"a\"",
                "Output": "** 1",
                "Explanation": "** The longest palindrome that can be built is \"a\", whose length is 1."
            }
        ]
    },
    {
        "Title": "Split Array Largest Sum",
        "slug": "split-array-largest-sum",
        "description": "Given an integer array `nums` and an integer `k`, split `nums` into `k` non-empty subarrays such that the largest sum of any subarray is **minimized**.\n\n\nReturn *the minimized largest sum of the split*.\n\n\nA **subarray** is a contiguous part of the array.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Dynamic Programming",
            "Greedy",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [7,2,5,10,8], k = 2",
                "Output": "** 18",
                "Explanation": "** There are four ways to split nums into two subarrays.\nThe best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18."
            },
            {
                "Input": "** nums = [1,2,3,4,5], k = 2",
                "Output": "** 9",
                "Explanation": "** There are four ways to split nums into two subarrays.\nThe best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9."
            }
        ]
    },
    {
        "Title": "Fizz Buzz",
        "slug": "fizz-buzz",
        "description": "Given an integer `n`, return *a string array* `answer` *(**1-indexed**) where*:\n\n\n `answer[i] == \"FizzBuzz\"` if `i` is divisible by `3` and `5`.\n `answer[i] == \"Fizz\"` if `i` is divisible by `3`.\n `answer[i] == \"Buzz\"` if `i` is divisible by `5`.\n `answer[i] == i` (as a string) if none of the above conditions are true.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "String",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** [\"1\",\"2\",\"Fizz\"]",
                "Explanation": null
            },
            {
                "Input": "** n = 5",
                "Output": "** [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]",
                "Explanation": null
            },
            {
                "Input": "** n = 15",
                "Output": "** [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Arithmetic Slices",
        "slug": "arithmetic-slices",
        "description": "An integer array is called arithmetic if it consists of **at least three elements** and if the difference between any two consecutive elements is the same.\n\n\n For example, `[1,3,5,7,9]`, `[7,7,7,7]`, and `[3,-1,-5,-9]` are arithmetic sequences.\n\n\nGiven an integer array `nums`, return *the number of arithmetic **subarrays** of* `nums`.\n\n\nA **subarray** is a contiguous subsequence of the array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 3",
                "Explanation": "** We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself."
            },
            {
                "Input": "** nums = [1]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Third Maximum Number",
        "slug": "third-maximum-number",
        "description": "Given an integer array `nums`, return *the **third distinct maximum** number in this array. If the third maximum does not exist, return the **maximum** number*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [3,2,1]",
                "Output": "** 1",
                "Explanation": "**\nThe first distinct maximum is 3.\nThe second distinct maximum is 2.\nThe third distinct maximum is 1."
            },
            {
                "Input": "** nums = [1,2]",
                "Output": "** 2",
                "Explanation": "**\nThe first distinct maximum is 2.\nThe second distinct maximum is 1.\nThe third distinct maximum does not exist, so the maximum (2) is returned instead."
            },
            {
                "Input": "** nums = [2,2,3,1]",
                "Output": "** 1",
                "Explanation": "**\nThe first distinct maximum is 3.\nThe second distinct maximum is 2 (both 2's are counted together since they have the same value).\nThe third distinct maximum is 1."
            }
        ]
    },
    {
        "Title": "Add Strings",
        "slug": "add-strings",
        "description": "Given two non-negative integers, `num1` and `num2` represented as string, return *the sum of* `num1` *and* `num2` *as a string*.\n\n\nYou must solve the problem without using any built-in library for handling large integers (such as `BigInteger`). You must also not convert the inputs to integers directly.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "String",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** num1 = \"11\", num2 = \"123\"",
                "Output": "** \"134\"",
                "Explanation": null
            },
            {
                "Input": "** num1 = \"456\", num2 = \"77\"",
                "Output": "** \"533\"",
                "Explanation": null
            },
            {
                "Input": "** num1 = \"0\", num2 = \"0\"",
                "Output": "** \"0\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Partition Equal Subset Sum",
        "slug": "partition-equal-subset-sum",
        "description": "Given an integer array `nums`, return `true` *if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [1,5,11,5]",
                "Output": "** true",
                "Explanation": "** The array can be partitioned as [1, 5, 5] and [11]."
            },
            {
                "Input": "** nums = [1,2,3,5]",
                "Output": "** false",
                "Explanation": "** The array cannot be partitioned into equal sum subsets."
            }
        ]
    },
    {
        "Title": "Pacific Atlantic Water Flow",
        "slug": "pacific-atlantic-water-flow",
        "description": "There is an `m x n` rectangular island that borders both the **Pacific Ocean** and **Atlantic Ocean**. The **Pacific Ocean** touches the island's left and top edges, and the **Atlantic Ocean** touches the island's right and bottom edges.\n\n\nThe island is partitioned into a grid of square cells. You are given an `m x n` integer matrix `heights` where `heights[r][c]` represents the **height above sea level** of the cell at coordinate `(r, c)`.\n\n\nThe island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is **less than or equal to** the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\n\n\nReturn *a **2D list** of grid coordinates* `result` *where* `result[i] = [ri, ci]` *denotes that rain water can flow from cell* `(ri, ci)` *to **both** the Pacific and Atlantic oceans*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]",
                "Output": "** [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]",
                "Explanation": "** The following cells can flow to the Pacific and Atlantic oceans, as shown below:\n[0,4]: [0,4] -> Pacific Ocean \n\u00a0      [0,4] -> Atlantic Ocean\n[1,3]: [1,3] -> [0,3] -> Pacific Ocean \n\u00a0      [1,3] -> [1,4] -> Atlantic Ocean\n[1,4]: [1,4] -> [1,3] -> [0,3] -> Pacific Ocean \n\u00a0      [1,4] -> Atlantic Ocean\n[2,2]: [2,2] -> [1,2] -> [0,2] -> Pacific Ocean \n\u00a0      [2,2] -> [2,3] -> [2,4] -> Atlantic Ocean\n[3,0]: [3,0] -> Pacific Ocean \n\u00a0      [3,0] -> [4,0] -> Atlantic Ocean\n[3,1]: [3,1] -> [3,0] -> Pacific Ocean \n\u00a0      [3,1] -> [4,1] -> Atlantic Ocean\n[4,0]: [4,0] -> Pacific Ocean \n       [4,0] -> Atlantic Ocean\nNote that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans."
            }
        ]
    },
    {
        "Title": "Battleships in a Board",
        "slug": "battleships-in-a-board",
        "description": "Given an `m x n` matrix `board` where each cell is a battleship `'X'` or empty `'.'`, return *the number of the **battleships** on* `board`.\n\n\nBattleships** can only be placed horizontally or vertically on `board`. In other words, they can only be made of the shape `1 x k` (`1` row, `k` columns) or `k x 1` (`k` rows, `1` column), where `k` can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** board = [[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Strong Password Checker",
        "slug": "strong-password-checker",
        "description": "A password is considered strong if the below conditions are all met:\n\n\n It has at least `6` characters and at most `20` characters.\n It contains at least **one lowercase** letter, at least **one uppercase** letter, and at least **one digit**.\n It does not contain three repeating characters in a row (i.e., `\"B**aaa**bb0\"` is weak, but `\"B**aa**b**a**0\"` is strong).\n\n\nGiven a string `password`, return *the minimum number of steps required to make `password` strong. if `password` is already strong, return `0`.\n\n\nIn one step, you can:\n\n\n Insert one character to `password`,\n Delete one character from `password`, or\n Replace one character of `password` with another character.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Greedy",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** password = \"a\"",
                "Output": "** 5",
                "Explanation": null
            },
            {
                "Input": "** password = \"aA1\"",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** password = \"1337C0d3\"",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum XOR of Two Numbers in an Array",
        "slug": "maximum-xor-of-two-numbers-in-an-array",
        "description": "Given an integer array `nums`, return *the maximum result of* `nums[i] XOR nums[j]`, where `0 <= i <= j < n`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Bit Manipulation",
            "Trie"
        ],
        "examples": [
            {
                "Input": "** nums = [3,10,5,25,2,8]",
                "Output": "** 28",
                "Explanation": "** The maximum result is 5 XOR 25 = 28."
            },
            {
                "Input": "** nums = [14,70,53,83,49,91,36,80,92,51,66,70]",
                "Output": "** 127",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reconstruct Original Digits from English",
        "slug": "reconstruct-original-digits-from-english",
        "description": "Given a string `s` containing an out-of-order English representation of digits `0-9`, return *the digits in **ascending** order*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Math",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"owoztneoer\"",
                "Output": "** \"012\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"fviefuro\"",
                "Output": "** \"45\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Repeating Character Replacement",
        "slug": "longest-repeating-character-replacement",
        "description": "You are given a string `s` and an integer `k`. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most `k` times.\n\n\nReturn *the length of the longest substring containing the same letter you can get after performing the above operations*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** s = \"ABAB\", k = 2",
                "Output": "** 4",
                "Explanation": "** Replace the two 'A's with two 'B's or vice versa."
            },
            {
                "Input": "** s = \"AABABBA\", k = 1",
                "Output": "** 4",
                "Explanation": "** Replace the one 'A' in the middle with 'B' and form \"AABBBBA\".\nThe substring \"BBBB\" has the longest repeating letters, which is 4.\nThere may exists other ways to achieve this answer too."
            }
        ]
    },
    {
        "Title": "Construct Quad Tree",
        "slug": "construct-quad-tree",
        "description": "Given a `n * n` matrix `grid` of `0's` and `1's` only. We want to represent `grid` with a Quad-Tree.\n\n\nReturn *the root of the Quad-Tree representing* `grid`.\n\n\nA Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\n\n\n `val`: True if the node represents a grid of 1's or False if the node represents a grid of 0's. Notice that you can assign the `val` to True or False when `isLeaf` is False, and both are accepted in the answer.\n `isLeaf`: True if the node is a leaf node on the tree or False if the node has four children.\n\n\n\n```\n\nclass Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n}\n```\n\nWe can construct a Quad-Tree from a two-dimensional area using the following steps:\n\n\n1. If the current grid has the same value (i.e all `1's` or all `0's`) set `isLeaf` True and set `val` to the value of the grid and set the four children to Null and stop.\n2. If the current grid has different values, set `isLeaf` to False and set `val` to any value and divide the current grid into four sub-grids as shown in the photo.\n3. Recurse for each of the children with the proper sub-grid.\n\n\n![](https://assets.leetcode.com/uploads/2020/02/11/new_top.png)\nIf you want to know more about the Quad-Tree, you can refer to the [wiki](https://en.wikipedia.org/wiki/Quadtree).\n\n\nQuad-Tree format:\n\n\nYou don't need to read this section for solving the problem. This is only if you want to understand the output format here. The output represents the serialized format of a Quad-Tree using level order traversal, where `null` signifies a path terminator where no node exists below.\n\n\nIt is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list `[isLeaf, val]`.\n\n\nIf the value of `isLeaf` or `val` is True we represent it as **1** in the list `[isLeaf, val]` and if the value of `isLeaf` or `val` is False we represent it as **0**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Divide and Conquer",
            "Tree",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[0,1],[1,0]]",
                "Output": "** [[0,1],[1,0],[1,1],[1,1],[1,0]]",
                "Explanation": "** The explanation of this example is shown below:\nNotice that 0 represents False and 1 represents True in the photo representing the Quad-Tree.\n![](https://assets.leetcode.com/uploads/2020/02/12/e1tree.png)"
            },
            {
                "Input": "** grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]",
                "Output": "** [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]",
                "Explanation": "** All values in the grid are not the same. We divide the grid into four sub-grids.\nThe topLeft, bottomLeft and bottomRight each has the same value.\nThe topRight have different values so we divide it into 4 sub-grids where each has the same value.\nExplanation is shown in the photo below:\n![](https://assets.leetcode.com/uploads/2020/02/12/e2tree.png)"
            }
        ]
    },
    {
        "Title": "N-ary Tree Level Order Traversal",
        "slug": "n-ary-tree-level-order-traversal",
        "description": "Given an n-ary tree, return the *level order* traversal of its nodes' values.\n\n\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** root = [1,null,3,2,4,null,5,6]",
                "Output": "** [[1],[3,2,4],[5,6]]",
                "Explanation": null
            },
            {
                "Input": "** root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
                "Output": "** [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Flatten a Multilevel Doubly Linked List",
        "slug": "flatten-a-multilevel-doubly-linked-list",
        "description": "You are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional **child pointer**. This child pointer may or may not point to a separate doubly linked list, also containing these special nodes. These child lists may have one or more children of their own, and so on, to produce a **multilevel data structure** as shown in the example below.\n\n\nGiven the `head` of the first level of the list, **flatten** the list so that all the nodes appear in a single-level, doubly linked list. Let `curr` be a node with a child list. The nodes in the child list should appear **after** `curr` and **before** `curr.next` in the flattened list.\n\n\nReturn *the* `head` *of the flattened list. The nodes in the list must have **all** of their child pointers set to* `null`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Depth-First Search",
            "Doubly-Linked List"
        ],
        "examples": [
            {
                "Input": "** head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]",
                "Output": "** [1,2,3,7,8,11,12,9,10,4,5,6]",
                "Explanation": "** The multilevel linked list in the input is shown.\nAfter flattening the multilevel linked list it becomes:\n![](https://assets.leetcode.com/uploads/2021/11/09/flatten12.jpg)"
            },
            {
                "Input": "** head = [1,2,null,3]",
                "Output": "** [1,3,2]",
                "Explanation": "** The multilevel linked list in the input is shown.\nAfter flattening the multilevel linked list it becomes:\n![](https://assets.leetcode.com/uploads/2021/11/24/list.jpg)"
            }
        ]
    },
    {
        "Title": "All O`one Data Structure",
        "slug": "all-oone-data-structure",
        "description": "Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.\n\n\nImplement the `AllOne` class:\n\n\n `AllOne()` Initializes the object of the data structure.\n `inc(String key)` Increments the count of the string `key` by `1`. If `key` does not exist in the data structure, insert it with count `1`.\n `dec(String key)` Decrements the count of the string `key` by `1`. If the count of `key` is `0` after the decrement, remove it from the data structure. It is guaranteed that `key` exists in the data structure before the decrement.\n `getMaxKey()` Returns one of the keys with the maximal count. If no element exists, return an empty string `\"\"`.\n `getMinKey()` Returns one of the keys with the minimum count. If no element exists, return an empty string `\"\"`.\n\n\nNote** that each function must run in `O(1)` average time complexity.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "Linked List",
            "Design",
            "Doubly-Linked List"
        ],
        "examples": [
            {
                "Input": "[\"AllOne\", \"inc\", \"inc\", \"getMaxKey\", \"getMinKey\", \"inc\", \"getMaxKey\", \"getMinKey\"]\n[[], [\"hello\"], [\"hello\"], [], [], [\"leet\"], [], []]",
                "Output": "[null, null, null, \"hello\", \"hello\", null, \"hello\", \"leet\"]",
                "Explanation": "AllOne allOne = new AllOne();\nallOne.inc(\"hello\");\nallOne.inc(\"hello\");\nallOne.getMaxKey(); // return \"hello\"\nallOne.getMinKey(); // return \"hello\"\nallOne.inc(\"leet\");\nallOne.getMaxKey(); // return \"hello\"\nallOne.getMinKey(); // return \"leet\""
            }
        ]
    },
    {
        "Title": "Minimum Genetic Mutation",
        "slug": "minimum-genetic-mutation",
        "description": "A gene string can be represented by an 8-character long string, with choices from `'A'`, `'C'`, `'G'`, and `'T'`.\n\n\nSuppose we need to investigate a mutation from a gene string `startGene` to a gene string `endGene` where one mutation is defined as one single character changed in the gene string.\n\n\n For example, `\"AACCGGTT\" --> \"AACCGGTA\"` is one mutation.\n\n\nThere is also a gene bank `bank` that records all the valid gene mutations. A gene must be in `bank` to make it a valid gene string.\n\n\nGiven the two gene strings `startGene` and `endGene` and the gene bank `bank`, return *the minimum number of mutations needed to mutate from* `startGene` *to* `endGene`. If there is no such a mutation, return `-1`.\n\n\nNote that the starting point is assumed to be valid, so it might not be included in the bank.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** startGene = \"AACCGGTT\", endGene = \"AACCGGTA\", bank = [\"AACCGGTA\"]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** startGene = \"AACCGGTT\", endGene = \"AAACGGTA\", bank = [\"AACCGGTA\",\"AACCGCTA\",\"AAACGGTA\"]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Segments in a String",
        "slug": "number-of-segments-in-a-string",
        "description": "Given a string `s`, return *the number of segments in the string*.\n\n\nA **segment** is defined to be a contiguous sequence of **non-space characters**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"Hello, my name is John\"",
                "Output": "** 5",
                "Explanation": "** The five segments are [\"Hello,\", \"my\", \"name\", \"is\", \"John\"]"
            },
            {
                "Input": "** s = \"Hello\"",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Non-overlapping Intervals",
        "slug": "non-overlapping-intervals",
        "description": "Given an array of intervals `intervals` where `intervals[i] = [starti, endi]`, return *the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** intervals = [[1,2],[2,3],[3,4],[1,3]]",
                "Output": "** 1",
                "Explanation": "** [1,3] can be removed and the rest of the intervals are non-overlapping."
            },
            {
                "Input": "** intervals = [[1,2],[1,2],[1,2]]",
                "Output": "** 2",
                "Explanation": "** You need to remove two [1,2] to make the rest of the intervals non-overlapping."
            },
            {
                "Input": "** intervals = [[1,2],[2,3]]",
                "Output": "** 0",
                "Explanation": "** You don't need to remove any of the intervals since they're already non-overlapping."
            }
        ]
    },
    {
        "Title": "Find Right Interval",
        "slug": "find-right-interval",
        "description": "You are given an array of `intervals`, where `intervals[i] = [starti, endi]` and each `starti` is **unique**.\n\n\nThe **right interval** for an interval `i` is an interval `j` such that `startj >= endi` and `startj` is **minimized**. Note that `i` may equal `j`.\n\n\nReturn *an array of **right interval** indices for each interval `i`*. If no **right interval** exists for interval `i`, then put `-1` at index `i`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** intervals = [[1,2]]",
                "Output": "** [-1]",
                "Explanation": "** There is only one interval in the collection, so it outputs -1."
            },
            {
                "Input": "** intervals = [[3,4],[2,3],[1,2]]",
                "Output": "** [-1,0,1]",
                "Explanation": "** There is no right interval for [3,4].\nThe right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is >= end1 = 3.\nThe right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is >= end2 = 2."
            },
            {
                "Input": "** intervals = [[1,4],[2,3],[3,4]]",
                "Output": "** [-1,2,-1]",
                "Explanation": "** There is no right interval for [1,4] and [3,4].\nThe right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1 = 3."
            }
        ]
    },
    {
        "Title": "Path Sum III",
        "slug": "path-sum-iii",
        "description": "Given the `root` of a binary tree and an integer `targetSum`, return *the number of paths where the sum of the values\u00a0along the path equals*\u00a0`targetSum`.\n\n\nThe path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8",
                "Output": "** 3",
                "Explanation": "** The paths that sum to 8 are shown."
            }
        ]
    },
    {
        "Title": "Find All Anagrams in a String",
        "slug": "find-all-anagrams-in-a-string",
        "description": "Given two strings `s` and `p`, return *an array of all the start indices of* `p`*'s anagrams in* `s`. You may return the answer in **any order**.\n\n\nAn **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** s = \"cbaebabacd\", p = \"abc\"",
                "Output": "** [0,6]",
                "Explanation": "**\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\"."
            },
            {
                "Input": "** s = \"abab\", p = \"ab\"",
                "Output": "** [0,1,2]",
                "Explanation": "**\nThe substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\"."
            }
        ]
    },
    {
        "Title": "K-th Smallest in Lexicographical Order",
        "slug": "k-th-smallest-in-lexicographical-order",
        "description": "Given two integers `n` and `k`, return *the* `kth` *lexicographically smallest integer in the range* `[1, n]`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Trie"
        ],
        "examples": [
            {
                "Input": "** n = 13, k = 2",
                "Output": "** 10",
                "Explanation": "** The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10."
            },
            {
                "Input": "** n = 1, k = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Arranging Coins",
        "slug": "arranging-coins",
        "description": "You have `n` coins and you want to build a staircase with these coins. The staircase consists of `k` rows where the `ith` row has exactly `i` coins. The last row of the staircase **may be** incomplete.\n\n\nGiven the integer `n`, return *the number of **complete rows** of the staircase you will build*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** n = 5",
                "Output": "** 2",
                "Explanation": "** Because the 3rd row is incomplete, we return 2."
            },
            {
                "Input": "** n = 8",
                "Output": "** 3",
                "Explanation": "** Because the 4th row is incomplete, we return 3."
            }
        ]
    },
    {
        "Title": "Find All Duplicates in an Array",
        "slug": "find-all-duplicates-in-an-array",
        "description": "Given an integer array `nums` of length `n` where all the integers of `nums` are in the range `[1, n]` and each integer appears **once** or **twice**, return *an array of all the integers that appears **twice***.\n\n\nYou must write an algorithm that runs in\u00a0`O(n)`\u00a0time and uses only constant extra space.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** nums = [4,3,2,7,8,2,3,1]",
                "Output": "** [2,3]",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,1,2]",
                "Output": "** [1]",
                "Explanation": null
            },
            {
                "Input": "** nums = [1]",
                "Output": "** []",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Add Two Numbers II",
        "slug": "add-two-numbers-ii",
        "description": "You are given two **non-empty** linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Math",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** l1 = [7,2,4,3], l2 = [5,6,4]",
                "Output": "** [7,8,0,7]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Arithmetic Slices II - Subsequence",
        "slug": "arithmetic-slices-ii-subsequence",
        "description": "Given an integer array `nums`, return *the number of all the **arithmetic subsequences** of* `nums`.\n\n\nA sequence of numbers is called arithmetic if it consists of **at least three elements** and if the difference between any two consecutive elements is the same.\n\n\n For example, `[1, 3, 5, 7, 9]`, `[7, 7, 7, 7]`, and `[3, -1, -5, -9]` are arithmetic sequences.\n For example, `[1, 1, 2, 5, 7]` is not an arithmetic sequence.\n\n\nA **subsequence** of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\n\n\n For example, `[2,5,10]` is a subsequence of `[1,2,1,**2**,4,1,**5**,**10**]`.\n\n\nThe test cases are generated so that the answer fits in **32-bit** integer.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [2,4,6,8,10]",
                "Output": "** 7",
                "Explanation": "** All arithmetic subsequence slices are:\n[2,4,6]\n[4,6,8]\n[6,8,10]\n[2,4,6,8]\n[4,6,8,10]\n[2,4,6,8,10]\n[2,6,10]"
            },
            {
                "Input": "** nums = [7,7,7,7,7]",
                "Output": "** 16",
                "Explanation": "** Any subsequence of this array is arithmetic."
            }
        ]
    },
    {
        "Title": "Number of Boomerangs",
        "slug": "number-of-boomerangs",
        "description": "You are given `n` `points` in the plane that are all **distinct**, where `points[i] = [xi, yi]`. A **boomerang** is a tuple of points `(i, j, k)` such that the distance between `i` and `j` equals the distance between `i` and `k` **(the order of the tuple matters)**.\n\n\nReturn *the number of boomerangs*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Math"
        ],
        "examples": [
            {
                "Input": "** points = [[0,0],[1,0],[2,0]]",
                "Output": "** 2",
                "Explanation": "** The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]."
            },
            {
                "Input": "** points = [[1,1],[2,2],[3,3]]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** points = [[1,1]]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find All Numbers Disappeared in an Array",
        "slug": "find-all-numbers-disappeared-in-an-array",
        "description": "Given an array `nums` of `n` integers where `nums[i]` is in the range `[1, n]`, return *an array of all the integers in the range* `[1, n]` *that do not appear in* `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** nums = [4,3,2,7,8,2,3,1]",
                "Output": "** [5,6]",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,1]",
                "Output": "** [2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Serialize and Deserialize BST",
        "slug": "serialize-and-deserialize-bst",
        "description": "Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n\n\nDesign an algorithm to serialize and deserialize a **binary search tree**. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.\n\n\nThe encoded string should be as compact as possible.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Design",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [2,1,3]",
                "Output": "** [2,1,3]",
                "Explanation": null
            },
            {
                "Input": "** root = []",
                "Output": "** []",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Delete Node in a BST",
        "slug": "delete-node-in-a-bst",
        "description": "Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return *the **root node reference** (possibly updated) of the BST*.\n\n\nBasically, the deletion can be divided into two stages:\n\n\n1. Search for a node to remove.\n2. If the node is found, delete the node.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [5,3,6,2,4,null,7], key = 3",
                "Output": "** [5,4,6,2,null,null,7]",
                "Explanation": "** Given key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is [5,4,6,2,null,null,7], shown in the above BST.\nPlease notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.\n![](https://assets.leetcode.com/uploads/2020/09/04/del_node_supp.jpg)"
            }
        ]
    },
    {
        "Title": "Sort Characters By Frequency",
        "slug": "sort-characters-by-frequency",
        "description": "Given a string `s`, sort it in **decreasing order** based on the **frequency** of the characters. The **frequency** of a character is the number of times it appears in the string.\n\n\nReturn *the sorted string*. If there are multiple answers, return *any of them*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Sorting",
            "Heap (Priority Queue)",
            "Bucket Sort",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** s = \"tree\"",
                "Output": "** \"eert\"",
                "Explanation": "** 'e' appears twice while 'r' and 't' both appear once.\nSo 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer."
            },
            {
                "Input": "** s = \"cccaaa\"",
                "Output": "** \"aaaccc\"",
                "Explanation": "** Both 'c' and 'a' appear three times, so both \"cccaaa\" and \"aaaccc\" are valid answers.\nNote that \"cacaca\" is incorrect, as the same characters must be together."
            },
            {
                "Input": "** s = \"Aabb\"",
                "Output": "** \"bbAa\"",
                "Explanation": "** \"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\nNote that 'A' and 'a' are treated as two different characters."
            }
        ]
    },
    {
        "Title": "Minimum Number of Arrows to Burst Balloons",
        "slug": "minimum-number-of-arrows-to-burst-balloons",
        "description": "There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array `points` where `points[i] = [xstart, xend]` denotes a balloon whose **horizontal diameter** stretches between `xstart` and `xend`. You do not know the exact y-coordinates of the balloons.\n\n\nArrows can be shot up **directly vertically** (in the positive y-direction) from different points along the x-axis. A balloon with `xstart` and `xend` is **burst** by an arrow shot at `x` if `xstart <= x <= xend`. There is **no limit** to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.\n\n\nGiven the array `points`, return *the **minimum** number of arrows that must be shot to burst all balloons*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** points = [[10,16],[2,8],[1,6],[7,12]]",
                "Output": "** 2",
                "Explanation": "** The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].\n- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12]."
            },
            {
                "Input": "** points = [[1,2],[3,4],[5,6],[7,8]]",
                "Output": "** 4",
                "Explanation": "** One arrow needs to be shot for each balloon for a total of 4 arrows."
            },
            {
                "Input": "** points = [[1,2],[2,3],[3,4],[4,5]]",
                "Output": "** 2",
                "Explanation": "** The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].\n- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5]."
            }
        ]
    },
    {
        "Title": "Minimum Moves to Equal Array Elements",
        "slug": "minimum-moves-to-equal-array-elements",
        "description": "Given an integer array `nums` of size `n`, return *the minimum number of moves required to make all array elements equal*.\n\n\nIn one move, you can increment `n - 1` elements of the array by `1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 3",
                "Explanation": "** Only three moves are needed (remember each move increments two elements):\n[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]"
            },
            {
                "Input": "** nums = [1,1,1]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "4Sum II",
        "slug": "4sum-ii",
        "description": "Given four integer arrays `nums1`, `nums2`, `nums3`, and `nums4` all of length `n`, return the number of tuples `(i, j, k, l)` such that:\n\n\n `0 <= i, j, k, l < n`\n `nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0`\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]",
                "Output": "** 2",
                "Explanation": "**\nThe two tuples are:\n1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0"
            },
            {
                "Input": "** nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Assign Cookies",
        "slug": "assign-cookies",
        "description": "Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.\n\n\nEach child `i` has a greed factor `g[i]`, which is the minimum size of a cookie that the child will be content with; and each cookie `j` has a size `s[j]`. If `s[j] >= g[i]`, we can assign the cookie `j` to the child `i`, and the child `i` will be content. Your goal is to maximize the number of your content children and output the maximum number.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** g = [1,2,3], s = [1,1]",
                "Output": "** 1",
                "Explanation": "** You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\nYou need to output 1."
            },
            {
                "Input": "** g = [1,2], s = [1,2,3]",
                "Output": "** 2",
                "Explanation": "** You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \nYou have 3 cookies and their sizes are big enough to gratify all of the children, \nYou need to output 2."
            }
        ]
    },
    {
        "Title": "132 Pattern",
        "slug": "132-pattern",
        "description": "Given an array of `n` integers `nums`, a **132 pattern** is a subsequence of three integers `nums[i]`, `nums[j]` and `nums[k]` such that `i < j < k` and `nums[i] < nums[k] < nums[j]`.\n\n\nReturn `true` *if there is a **132 pattern** in* `nums`*, otherwise, return* `false`*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Stack",
            "Monotonic Stack",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** false",
                "Explanation": "** There is no 132 pattern in the sequence."
            },
            {
                "Input": "** nums = [3,1,4,2]",
                "Output": "** true",
                "Explanation": "** There is a 132 pattern in the sequence: [1, 4, 2]."
            },
            {
                "Input": "** nums = [-1,3,2,0]",
                "Output": "** true",
                "Explanation": "** There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0]."
            }
        ]
    },
    {
        "Title": "Circular Array Loop",
        "slug": "circular-array-loop",
        "description": "You are playing a game involving a **circular** array of non-zero integers `nums`. Each `nums[i]` denotes the number of indices forward/backward you must move if you are located at index `i`:\n\n\n If `nums[i]` is positive, move `nums[i]` steps **forward**, and\n If `nums[i]` is negative, move `nums[i]` steps **backward**.\n\n\nSince the array is **circular**, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.\n\n\nA **cycle** in the array consists of a sequence of indices `seq` of length `k` where:\n\n\n Following the movement rules above results in the repeating index sequence `seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...`\n Every `nums[seq[j]]` is either **all positive** or **all negative**.\n `k > 1`\n\n\nReturn `true` *if there is a **cycle** in* `nums`*, or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** nums = [2,-1,1,2,2]",
                "Output": "** true",
                "Explanation": "** The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\nWe can see the cycle 0 --> 2 --> 3 --> 0 --> ..., and all of its nodes are white (jumping in the same direction)."
            },
            {
                "Input": "** nums = [-1,-2,-3,-4,-5,6]",
                "Output": "** false",
                "Explanation": "** The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\nThe only cycle is of size 1, so we return false."
            },
            {
                "Input": "** nums = [1,-1,5,1,4]",
                "Output": "** true",
                "Explanation": "** The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\nWe can see the cycle 0 --> 1 --> 0 --> ..., and while it is of size > 1, it has a node jumping forward and a node jumping backward, so **it is not a cycle**.\nWe can see the cycle 3 --> 4 --> 3 --> ..., and all of its nodes are white (jumping in the same direction)."
            }
        ]
    },
    {
        "Title": "Poor Pigs",
        "slug": "poor-pigs",
        "description": "There are `buckets` buckets of liquid, where **exactly one** of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have `minutesToTest` minutes to determine which bucket is poisonous.\n\n\nYou can feed the pigs according to these steps:\n\n\n1. Choose some live pigs to feed.\n2. For each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time. Each pig can feed from any number of buckets, and each bucket can be fed from by any number of pigs.\n3. Wait for `minutesToDie` minutes. You may **not** feed any other pigs during this time.\n4. After `minutesToDie` minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.\n5. Repeat this process until you run out of time.\n\n\nGiven `buckets`, `minutesToDie`, and `minutesToTest`, return *the **minimum** number of pigs needed to figure out which bucket is poisonous within the allotted time*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Combinatorics"
        ],
        "examples": [
            {
                "Input": "** buckets = 4, minutesToDie = 15, minutesToTest = 15",
                "Output": "** 2",
                "Explanation": "** We can determine the poisonous bucket as follows:\nAt time 0, feed the first pig buckets 1 and 2, and feed the second pig buckets 2 and 3.\nAt time 15, there are 4 possible outcomes:\n- If only the first pig dies, then bucket 1 must be poisonous.\n- If only the second pig dies, then bucket 3 must be poisonous.\n- If both pigs die, then bucket 2 must be poisonous.\n- If neither pig dies, then bucket 4 must be poisonous."
            },
            {
                "Input": "** buckets = 4, minutesToDie = 15, minutesToTest = 30",
                "Output": "** 2",
                "Explanation": "** We can determine the poisonous bucket as follows:\nAt time 0, feed the first pig bucket 1, and feed the second pig bucket 2.\nAt time 15, there are 2 possible outcomes:\n- If either pig dies, then the poisonous bucket is the one it was fed.\n- If neither pig dies, then feed the first pig bucket 3, and feed the second pig bucket 4.\nAt time 30, one of the two pigs must die, and the poisonous bucket is the one it was fed."
            }
        ]
    },
    {
        "Title": "Repeated Substring Pattern",
        "slug": "repeated-substring-pattern",
        "description": "Given a string `s`, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "String Matching"
        ],
        "examples": [
            {
                "Input": "** s = \"abab\"",
                "Output": "** true",
                "Explanation": "** It is the substring \"ab\" twice."
            },
            {
                "Input": "** s = \"aba\"",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** s = \"abcabcabcabc\"",
                "Output": "** true",
                "Explanation": "** It is the substring \"abc\" four times or the substring \"abcabc\" twice."
            }
        ]
    },
    {
        "Title": "LFU Cache",
        "slug": "lfu-cache",
        "description": "Design and implement a data structure for a [Least Frequently Used (LFU)](https://en.wikipedia.org/wiki/Least_frequently_used) cache.\n\n\nImplement the `LFUCache` class:\n\n\n `LFUCache(int capacity)` Initializes the object with the `capacity` of the data structure.\n `int get(int key)` Gets the value of the `key` if the `key` exists in the cache. Otherwise, returns `-1`.\n `void put(int key, int value)` Update the value of the `key` if present, or inserts the `key` if not already present. When the cache reaches its `capacity`, it should invalidate and remove the **least frequently used** key before inserting a new item. For this problem, when there is a **tie** (i.e., two or more keys with the same frequency), the **least recently used** `key` would be invalidated.\n\n\nTo determine the least frequently used key, a **use counter** is maintained for each key in the cache. The key with the smallest **use counter** is the least frequently used key.\n\n\nWhen a key is first inserted into the cache, its **use counter** is set to `1` (due to the `put` operation). The **use counter** for a key in the cache is incremented either a `get` or `put` operation is called on it.\n\n\nThe functions\u00a0`get`\u00a0and\u00a0`put`\u00a0must each run in `O(1)` average time complexity.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "Linked List",
            "Design",
            "Doubly-Linked List"
        ],
        "examples": [
            {
                "Input": "[\"LFUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]",
                "Output": "[null, null, null, 1, null, -1, 3, null, -1, 3, 4]",
                "Explanation": "// cnt(x) = the use counter for key x\n// cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)\nLFUCache lfu = new LFUCache(2);\nlfu.put(1, 1);   // cache=[1,_], cnt(1)=1\nlfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1\nlfu.get(1);      // return 1\n                 // cache=[1,2], cnt(2)=1, cnt(1)=2\nlfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.\n\u00a0                // cache=[3,1], cnt(3)=1, cnt(1)=2\nlfu.get(2);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,1], cnt(3)=2, cnt(1)=2\nlfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.\n                 // cache=[4,3], cnt(4)=1, cnt(3)=2\nlfu.get(1);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,4], cnt(4)=1, cnt(3)=3\nlfu.get(4);      // return 4\n                 // cache=[4,3], cnt(4)=2, cnt(3)=3"
            }
        ]
    },
    {
        "Title": "Hamming Distance",
        "slug": "hamming-distance",
        "description": "The [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) between two integers is the number of positions at which the corresponding bits are different.\n\n\nGiven two integers `x` and `y`, return *the **Hamming distance** between them*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** x = 1, y = 4",
                "Output": "** 2",
                "Explanation": "**\n1   (0 0 0 1)\n4   (0 1 0 0)\n       \u2191   \u2191\nThe above arrows point to positions where the corresponding bits are different."
            },
            {
                "Input": "** x = 3, y = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Moves to Equal Array Elements II",
        "slug": "minimum-moves-to-equal-array-elements-ii",
        "description": "Given an integer array `nums` of size `n`, return *the minimum number of moves required to make all array elements equal*.\n\n\nIn one move, you can increment or decrement an element of the array by `1`.\n\n\nTest cases are designed so that the answer will fit in a **32-bit** integer.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 2",
                "Explanation": "**\nOnly two moves are needed (remember each move increments or decrements one element):\n[1,2,3]  =>  [2,2,3]  =>  [2,2,2]"
            },
            {
                "Input": "** nums = [1,10,2,9]",
                "Output": "** 16",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Island Perimeter",
        "slug": "island-perimeter",
        "description": "You are given `row x col` `grid` representing a map where `grid[i][j] = 1` represents\u00a0land and `grid[i][j] = 0` represents water.\n\n\nGrid cells are connected **horizontally/vertically** (not diagonally). The `grid` is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).\n\n\nThe island doesn't have \"lakes\", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]",
                "Output": "** 16",
                "Explanation": "** The perimeter is the 16 yellow stripes in the image above."
            }
        ]
    },
    {
        "Title": "Can I Win",
        "slug": "can-i-win",
        "description": "In the \"100 game\" two players take turns adding, to a running total, any integer from `1` to `10`. The player who first causes the running total to **reach or exceed** 100 wins.\n\n\nWhat if we change the game so that players **cannot** re-use integers?\n\n\nFor example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.\n\n\nGiven two integers `maxChoosableInteger` and `desiredTotal`, return `true` if the first player to move can force a win, otherwise, return `false`. Assume both players play **optimally**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Bit Manipulation",
            "Memoization",
            "Game Theory",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** maxChoosableInteger = 10, desiredTotal = 11",
                "Output": "** false",
                "Explanation": "**\nNo matter which integer the first player choose, the first player will lose.\nThe first player can choose an integer from 1 up to 10.\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\nThe second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\nSame with other integers chosen by the first player, the second player will always win."
            },
            {
                "Input": "** maxChoosableInteger = 10, desiredTotal = 0",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** maxChoosableInteger = 10, desiredTotal = 1",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count The Repetitions",
        "slug": "count-the-repetitions",
        "description": "We define `str = [s, n]` as the string `str` which consists of the string `s` concatenated `n` times.\n\n\n For example, `str == [\"abc\", 3] ==\"abcabcabc\"`.\n\n\nWe define that string `s1` can be obtained from string `s2` if we can remove some characters from `s2` such that it becomes `s1`.\n\n\n For example, `s1 = \"abc\"` can be obtained from `s2 = \"ab**dbe**c\"` based on our definition by removing the bolded underlined characters.\n\n\nYou are given two strings `s1` and `s2` and two integers `n1` and `n2`. You have the two strings `str1 = [s1, n1]` and `str2 = [s2, n2]`.\n\n\nReturn *the maximum integer* `m` *such that* `str = [str2, m]` *can be obtained from* `str1`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Unique Substrings in Wraparound String",
        "slug": "unique-substrings-in-wraparound-string",
        "description": "We define the string `base` to be the infinite wraparound string of `\"abcdefghijklmnopqrstuvwxyz\"`, so `base` will look like this:\n\n\n `\"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\"`.\n\n\nGiven a string `s`, return *the number of **unique non-empty substrings** of* `s` *are present in* `base`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"a\"",
                "Output": "** 1",
                "Explanation": "** Only the substring \"a\" of s is in base."
            },
            {
                "Input": "** s = \"cac\"",
                "Output": "** 2",
                "Explanation": "** There are two substrings (\"a\", \"c\") of s in base."
            },
            {
                "Input": "** s = \"zab\"",
                "Output": "** 6",
                "Explanation": "** There are six substrings (\"z\", \"a\", \"b\", \"za\", \"ab\", and \"zab\") of s in base."
            }
        ]
    },
    {
        "Title": "Validate IP Address",
        "slug": "validate-ip-address",
        "description": "Given a string `queryIP`, return `\"IPv4\"` if IP is a valid IPv4 address, `\"IPv6\"` if IP is a valid IPv6 address or `\"Neither\"` if IP is not a correct IP of any type.\n\n\nA valid IPv4** address is an IP in the form `\"x1.x2.x3.x4\"` where `0 <= xi <= 255` and `xi` **cannot contain** leading zeros. For example, `\"192.168.1.1\"` and `\"192.168.1.0\"` are valid IPv4 addresses while `\"192.168.01.1\"`, `\"192.168.1.00\"`, and `\"192.168@1.1\"` are invalid IPv4 addresses.\n\n\nA valid IPv6** address is an IP in the form `\"x1:x2:x3:x4:x5:x6:x7:x8\"` where:\n\n\n `1 <= xi.length <= 4`\n `xi` is a **hexadecimal string** which may contain digits, lowercase English letter (`'a'` to `'f'`) and upper-case English letters (`'A'` to `'F'`).\n Leading zeros are allowed in `xi`.\n\n\nFor example, \"`2001:0db8:85a3:0000:0000:8a2e:0370:7334\"` and \"`2001:db8:85a3:0:0:8A2E:0370:7334\"` are valid IPv6 addresses, while \"`2001:0db8:85a3::8A2E:037j:7334\"` and \"`02001:0db8:85a3:0000:0000:8a2e:0370:7334\"` are invalid IPv6 addresses.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** queryIP = \"172.16.254.1\"",
                "Output": "** \"IPv4\"",
                "Explanation": "** This is a valid IPv4 address, return \"IPv4\"."
            },
            {
                "Input": "** queryIP = \"2001:0db8:85a3:0:0:8A2E:0370:7334\"",
                "Output": "** \"IPv6\"",
                "Explanation": "** This is a valid IPv6 address, return \"IPv6\"."
            },
            {
                "Input": "** queryIP = \"256.256.256.256\"",
                "Output": "** \"Neither\"",
                "Explanation": "** This is neither a IPv4 address nor a IPv6 address."
            }
        ]
    },
    {
        "Title": "Implement Rand10() Using Rand7()",
        "slug": "implement-rand10-using-rand7",
        "description": "Given the **API** `rand7()` that generates a uniform random integer in the range `[1, 7]`, write a function `rand10()` that generates a uniform random integer in the range `[1, 10]`. You can only call the API `rand7()`, and you shouldn't call any other API. Please **do not** use a language's built-in random API.\n\n\nEach test case will have one **internal** argument `n`, the number of times that your implemented function `rand10()` will be called while testing. Note that this is **not an argument** passed to `rand10()`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Rejection Sampling",
            "Randomized",
            "Probability and Statistics"
        ],
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** [2]",
                "Explanation": null
            },
            {
                "Input": "** n = 2",
                "Output": "** [2,8]",
                "Explanation": null
            },
            {
                "Input": "** n = 3",
                "Output": "** [3,8,10]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Concatenated Words",
        "slug": "concatenated-words",
        "description": "Given an array of strings `words` (**without duplicates**), return *all the **concatenated words** in the given list of* `words`.\n\n\nA **concatenated word** is defined as a string that is comprised entirely of at least two shorter words (not necessarily distinct)\u00a0in the given array.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "String",
            "Dynamic Programming",
            "Depth-First Search",
            "Trie"
        ],
        "examples": [
            {
                "Input": "** words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]",
                "Output": "** [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"]",
                "Explanation": "** \"catsdogcats\" can be concatenated by \"cats\", \"dog\" and \"cats\"; \n\"dogcatsdog\" can be concatenated by \"dog\", \"cats\" and \"dog\"; \n\"ratcatdogcat\" can be concatenated by \"rat\", \"cat\", \"dog\" and \"cat\"."
            },
            {
                "Input": "** words = [\"cat\",\"dog\",\"catdog\"]",
                "Output": "** [\"catdog\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Matchsticks to Square",
        "slug": "matchsticks-to-square",
        "description": "You are given an integer array `matchsticks` where `matchsticks[i]` is the length of the `ith` matchstick. You want to use **all the matchsticks** to make one square. You **should not break** any stick, but you can link them up, and each matchstick must be used **exactly one time**.\n\n\nReturn `true` if you can make this square and `false` otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Backtracking",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** matchsticks = [1,1,2,2,2]",
                "Output": "** true",
                "Explanation": "** You can form a square with length 2, one side of the square came two sticks with length 1."
            }
        ]
    },
    {
        "Title": "Ones and Zeroes",
        "slug": "ones-and-zeroes",
        "description": "You are given an array of binary strings `strs` and two integers `m` and `n`.\n\n\nReturn *the size of the largest subset of `strs` such that there are **at most*** `m``0`*'s and* `n``1`*'s in the subset*.\n\n\nA set `x` is a **subset** of a set `y` if all elements of `x` are also elements of `y`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** strs = [\"10\",\"0001\",\"111001\",\"1\",\"0\"], m = 5, n = 3",
                "Output": "** 4",
                "Explanation": "** The largest subset with at most 5 0's and 3 1's is {\"10\", \"0001\", \"1\", \"0\"}, so the answer is 4.\nOther valid but smaller subsets include {\"0001\", \"1\"} and {\"10\", \"1\", \"0\"}.\n{\"111001\"} is an invalid subset because it contains 4 1's, greater than the maximum of 3."
            },
            {
                "Input": "** strs = [\"10\",\"0\",\"1\"], m = 1, n = 1",
                "Output": "** 2",
                "Explanation": "** The largest subset is {\"0\", \"1\"}, so the answer is 2."
            }
        ]
    },
    {
        "Title": "Heaters",
        "slug": "heaters",
        "description": "Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.\n\n\nEvery house can be warmed, as long as the house is within the heater's warm radius range.\u00a0\n\n\nGiven the positions of `houses` and `heaters` on a horizontal line, return *the minimum radius standard of heaters\u00a0so that those heaters could cover all houses.\n\n\nNotice** that\u00a0all the `heaters` follow your radius standard, and the warm radius will the same.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** houses = [1,2,3], heaters = [2]",
                "Output": "** 1",
                "Explanation": "** The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed."
            },
            {
                "Input": "** houses = [1,2,3,4], heaters = [1,4]",
                "Output": "** 1",
                "Explanation": "** The two heaters were placed at positions 1 and 4. We need to use a radius 1 standard, then all the houses can be warmed."
            },
            {
                "Input": "** houses = [1,5], heaters = [2]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number Complement",
        "slug": "number-complement",
        "description": "The **complement** of an integer is the integer you get when you flip all the `0`'s to `1`'s and all the `1`'s to `0`'s in its binary representation.\n\n\n For example, The integer `5` is `\"101\"` in binary and its **complement** is `\"010\"` which is the integer `2`.\n\n\nGiven an integer `num`, return *its complement*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** num = 5",
                "Output": "** 2",
                "Explanation": "** The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2."
            },
            {
                "Input": "** num = 1",
                "Output": "** 0",
                "Explanation": "** The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0."
            }
        ]
    },
    {
        "Title": "Total Hamming Distance",
        "slug": "total-hamming-distance",
        "description": "The [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) between two integers is the number of positions at which the corresponding bits are different.\n\n\nGiven an integer array `nums`, return *the sum of **Hamming distances** between all the pairs of the integers in* `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [4,14,2]",
                "Output": "** 6",
                "Explanation": "** In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\nshowing the four bits relevant in this case).\nThe answer will be:\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6."
            },
            {
                "Input": "** nums = [4,14,4]",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Generate Random Point in a Circle",
        "slug": "generate-random-point-in-a-circle",
        "description": "Given the radius and the position of the center of a circle, implement the function `randPoint` which generates a uniform random point inside the circle.\n\n\nImplement the `Solution` class:\n\n\n `Solution(double radius, double x_center, double y_center)` initializes the object with the radius of the circle `radius` and the position of the center `(x_center, y_center)`.\n `randPoint()` returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array `[x, y]`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Geometry",
            "Rejection Sampling",
            "Randomized"
        ],
        "examples": [
            {
                "Input": "[\"Solution\", \"randPoint\", \"randPoint\", \"randPoint\"]\n[[1.0, 0.0, 0.0], [], [], []]",
                "Output": "[null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]",
                "Explanation": "Solution solution = new Solution(1.0, 0.0, 0.0);\nsolution.randPoint(); // return [-0.02493, -0.38077]\nsolution.randPoint(); // return [0.82314, 0.38945]\nsolution.randPoint(); // return [0.36572, 0.17248]"
            }
        ]
    },
    {
        "Title": "Largest Palindrome Product",
        "slug": "largest-palindrome-product",
        "description": "Given an integer n, return *the **largest palindromic integer** that can be represented as the product of two `n`-digits integers*. Since the answer can be very large, return it **modulo** `1337`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** 987\nExplanation: 99 x 91 = 9009, 9009 % 1337 = 987",
                "Explanation": null
            },
            {
                "Input": "** n = 1",
                "Output": "** 9",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sliding Window Median",
        "slug": "sliding-window-median",
        "description": "The **median** is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values.\n\n\n For examples, if `arr = [2,3,4]`, the median is `3`.\n For examples, if `arr = [1,2,3,4]`, the median is `(2 + 3) / 2 = 2.5`.\n\n\nYou are given an integer array `nums` and an integer `k`. There is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position.\n\n\nReturn *the median array for each window in the original array*. Answers within `10-5` of the actual value will be accepted.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Sliding Window",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,-1,-3,5,3,6,7], k = 3",
                "Output": "** [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]",
                "Explanation": "** \nWindow position                Median\n---------------                -----\n[**1 3 -1**] -3  5  3  6  7        1\n 1 [**3 -1 -3**] 5  3  6  7       -1\n 1  3 [**-1 -3 5**] 3  6  7       -1\n 1  3  -1 [**-3 5 3**] 6  7        3\n 1  3  -1  -3 [**5 3 6**] 7        5\n 1  3  -1  -3  5 [**3 6 7**]       6"
            },
            {
                "Input": "** nums = [1,2,3,4,2,3,1,4,2], k = 3",
                "Output": "** [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Magical String",
        "slug": "magical-string",
        "description": "A magical string `s` consists of only `'1'` and `'2'` and obeys the following rules:\n\n\n The string s is magical because concatenating the number of contiguous occurrences of characters `'1'` and `'2'` generates the string `s` itself.\n\n\nThe first few elements of `s` is `s = \"1221121221221121122\u2026\u2026\"`. If we group the consecutive `1`'s and `2`'s in `s`, it will be `\"1 22 11 2 1 22 1 22 11 2 11 22 ......\"` and the occurrences of `1`'s or `2`'s in each group are `\"1 2 2 1 1 2 1 2 2 1 2 2 ......\"`. You can see that the occurrence sequence is `s` itself.\n\n\nGiven an integer `n`, return the number of `1`'s in the first `n` number in the magical string `s`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** n = 6",
                "Output": "** 3",
                "Explanation": "** The first 6 elements of magical string s is \"122112\" and it contains three 1's, so return 3."
            },
            {
                "Input": "** n = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "License Key Formatting",
        "slug": "license-key-formatting",
        "description": "You are given a license key represented as a string `s` that consists of only alphanumeric characters and dashes. The string is separated into `n + 1` groups by `n` dashes. You are also given an integer `k`.\n\n\nWe want to reformat the string `s` such that each group contains exactly `k` characters, except for the first group, which could be shorter than `k` but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.\n\n\nReturn *the reformatted license key*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"5F3Z-2e-9-w\", k = 4",
                "Output": "** \"5F3Z-2E9W\"",
                "Explanation": "** The string s has been split into two parts, each part has 4 characters.\nNote that the two extra dashes are not needed and can be removed."
            },
            {
                "Input": "** s = \"2-5g-3-J\", k = 2",
                "Output": "** \"2-5G-3J\"",
                "Explanation": "** The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above."
            }
        ]
    },
    {
        "Title": "Smallest Good Base",
        "slug": "smallest-good-base",
        "description": "Given an integer `n` represented as a string, return *the smallest **good base** of* `n`.\n\n\nWe call `k >= 2` a **good base** of `n`, if all digits of `n` base `k` are `1`'s.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** n = \"13\"",
                "Output": "** \"3\"",
                "Explanation": "** 13 base 3 is 111."
            },
            {
                "Input": "** n = \"4681\"",
                "Output": "** \"8\"",
                "Explanation": "** 4681 base 8 is 11111."
            },
            {
                "Input": "** n = \"1000000000000000000\"",
                "Output": "** \"999999999999999999\"",
                "Explanation": "** 1000000000000000000 base 999999999999999999 is 11."
            }
        ]
    },
    {
        "Title": "Max Consecutive Ones",
        "slug": "max-consecutive-ones",
        "description": "Given a binary array `nums`, return *the maximum number of consecutive* `1`*'s in the array*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [1,1,0,1,1,1]",
                "Output": "** 3",
                "Explanation": "** The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3."
            },
            {
                "Input": "** nums = [1,0,1,1,0,1]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Predict the Winner",
        "slug": "predict-the-winner",
        "description": "You are given an integer array `nums`. Two players are playing a game with this array: player 1 and player 2.\n\n\nPlayer 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of `0`. At each turn, the player takes one of the numbers from either end of the array (i.e., `nums[0]` or `nums[nums.length - 1]`) which reduces the size of the array by `1`. The player adds the chosen number to their score. The game ends when there are no more elements in the array.\n\n\nReturn `true` if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return `true`. You may assume that both players are playing optimally.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Recursion",
            "Game Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [1,5,2]",
                "Output": "** false",
                "Explanation": "** Initially, player 1 can choose between 1 and 2. \nIf he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). \nSo, final score of player 1 is 1 + 2 = 3, and player 2 is 5. \nHence, player 1 will never be the winner and you need to return false."
            },
            {
                "Input": "** nums = [1,5,233,7]",
                "Output": "** true",
                "Explanation": "** Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.\nFinally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win."
            }
        ]
    },
    {
        "Title": "Zuma Game",
        "slug": "zuma-game",
        "description": "You are playing a variation of the game Zuma.\n\n\nIn this variation of Zuma, there is a **single row** of colored balls on a board, where each ball can be colored red `'R'`, yellow `'Y'`, blue `'B'`, green `'G'`, or white `'W'`. You also have several colored balls in your hand.\n\n\nYour goal is to **clear all** of the balls from the board. On each turn:\n\n\n Pick **any** ball from your hand and insert it in between two balls in the row or on either end of the row.\n If there is a group of **three or more consecutive balls** of the **same color**, remove the group of balls from the board.\n\t+ If this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left.\n If there are no more balls on the board, then you win the game.\n Repeat this process until you either win or do not have any more balls in your hand.\n\n\nGiven a string `board`, representing the row of balls on the board, and a string `hand`, representing the balls in your hand, return *the **minimum** number of balls you have to insert to clear all the balls from the board. If you cannot clear all the balls from the board using the balls in your hand, return* `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Stack",
            "Breadth-First Search",
            "Memoization"
        ],
        "examples": [
            {
                "Input": "** board = \"WRRBBW\", hand = \"RB\"",
                "Output": "** -1",
                "Explanation": "** It is impossible to clear all the balls. The best you can do is:\n- Insert 'R' so the board becomes WRRRBBW. WRRRBBW -> WBBW.\n- Insert 'B' so the board becomes WBBBW. WBBBW -> WW.\nThere are still balls remaining on the board, and you are out of balls to insert."
            },
            {
                "Input": "** board = \"WWRRBBWW\", hand = \"WRBRW\"",
                "Output": "** 2",
                "Explanation": "** To make the board empty:\n- Insert 'R' so the board becomes WWRRRBBWW. WWRRRBBWW -> WWBBWW.\n- Insert 'B' so the board becomes WWBBBWW. WWBBBWW -> WWWW -> empty.\n2 balls from your hand were needed to clear the board."
            },
            {
                "Input": "** board = \"G\", hand = \"GGGGG\"",
                "Output": "** 2",
                "Explanation": "** To make the board empty:\n- Insert 'G' so the board becomes GG.\n- Insert 'G' so the board becomes GGG. GGG -> empty.\n2 balls from your hand were needed to clear the board."
            }
        ]
    },
    {
        "Title": "Non-decreasing Subsequences",
        "slug": "non-decreasing-subsequences",
        "description": "Given an integer array `nums`, return *all the different possible non-decreasing subsequences of the given array with at least two elements*. You may return the answer in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Backtracking",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [4,6,7,7]",
                "Output": "** [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]",
                "Explanation": null
            },
            {
                "Input": "** nums = [4,4,3,2,1]",
                "Output": "** [[4,4]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Construct the Rectangle",
        "slug": "construct-the-rectangle",
        "description": "A web developer needs to know how to design a web page's size. So, given a specific rectangular web page\u2019s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:\n\n\n1. The area of the rectangular web page you designed must equal to the given target area.\n2. The width `W` should not be larger than the length `L`, which means `L >= W`.\n3. The difference between length `L` and width `W` should be as small as possible.\n\n\nReturn *an array `[L, W]` where `L` and `W` are the length and width of the\u00a0web page you designed in sequence.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** area = 4",
                "Output": "** [2,2]",
                "Explanation": "** The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. \nBut according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2."
            },
            {
                "Input": "** area = 37",
                "Output": "** [37,1]",
                "Explanation": null
            },
            {
                "Input": "** area = 122122",
                "Output": "** [427,286]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reverse Pairs",
        "slug": "reverse-pairs",
        "description": "Given an integer array `nums`, return *the number of **reverse pairs** in the array*.\n\n\nA **reverse pair** is a pair `(i, j)` where:\n\n\n `0 <= i < j < nums.length` and\n `nums[i] > 2 * nums[j]`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Divide and Conquer",
            "Binary Indexed Tree",
            "Segment Tree",
            "Merge Sort",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,2,3,1]",
                "Output": "** 2",
                "Explanation": "** The reverse pairs are:\n(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1\n(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1"
            },
            {
                "Input": "** nums = [2,4,3,5,1]",
                "Output": "** 3",
                "Explanation": "** The reverse pairs are:\n(1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1\n(2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1\n(3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1"
            }
        ]
    },
    {
        "Title": "Target Sum",
        "slug": "target-sum",
        "description": "You are given an integer array `nums` and an integer `target`.\n\n\nYou want to build an **expression** out of nums by adding one of the symbols `'+'` and `'-'` before each integer in nums and then concatenate all the integers.\n\n\n For example, if `nums = [2, 1]`, you can add a `'+'` before `2` and a `'-'` before `1` and concatenate them to build the expression `\"+2-1\"`.\n\n\nReturn the number of different **expressions** that you can build, which evaluates to `target`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** nums = [1,1,1,1,1], target = 3",
                "Output": "** 5",
                "Explanation": "** There are 5 ways to assign symbols to make the sum of nums be target 3.\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3"
            },
            {
                "Input": "** nums = [1], target = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Teemo Attacking",
        "slug": "teemo-attacking",
        "description": "Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly `duration` seconds. More formally, an attack at second `t` will mean Ashe is poisoned during the **inclusive** time interval `[t, t + duration - 1]`. If Teemo attacks again **before** the poison effect ends, the timer for it is **reset**, and the poison effect will end `duration` seconds after the new attack.\n\n\nYou are given a **non-decreasing** integer array `timeSeries`, where `timeSeries[i]` denotes that Teemo attacks Ashe at second `timeSeries[i]`, and an integer `duration`.\n\n\nReturn *the **total** number of seconds that Ashe is poisoned*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** timeSeries = [1,4], duration = 2",
                "Output": "** 4",
                "Explanation": "** Teemo's attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.\nAshe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total."
            },
            {
                "Input": "** timeSeries = [1,2], duration = 2",
                "Output": "** 3",
                "Explanation": "** Teemo's attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.\nAshe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total."
            }
        ]
    },
    {
        "Title": "Next Greater Element I",
        "slug": "next-greater-element-i",
        "description": "The **next greater element** of some element `x` in an array is the **first greater** element that is **to the right** of `x` in the same array.\n\n\nYou are given two **distinct 0-indexed** integer arrays `nums1` and `nums2`, where `nums1` is a subset of `nums2`.\n\n\nFor each `0 <= i < nums1.length`, find the index `j` such that `nums1[i] == nums2[j]` and determine the **next greater element** of `nums2[j]` in `nums2`. If there is no next greater element, then the answer for this query is `-1`.\n\n\nReturn *an array* `ans` *of length* `nums1.length` *such that* `ans[i]` *is the **next greater element** as described above.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Stack",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** nums1 = [4,1,2], nums2 = [1,3,4,2]",
                "Output": "** [-1,3,-1]",
                "Explanation": "** The next greater element for each value of nums1 is as follows:\n- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.\n- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1."
            },
            {
                "Input": "** nums1 = [2,4], nums2 = [1,2,3,4]",
                "Output": "** [3,-1]",
                "Explanation": "** The next greater element for each value of nums1 is as follows:\n- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.\n- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1."
            }
        ]
    },
    {
        "Title": "Random Point in Non-overlapping Rectangles",
        "slug": "random-point-in-non-overlapping-rectangles",
        "description": "You are given an array of non-overlapping axis-aligned rectangles `rects` where `rects[i] = [ai, bi, xi, yi]` indicates that `(ai, bi)` is the bottom-left corner point of the `ith` rectangle and `(xi, yi)` is the top-right corner point of the `ith` rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle.\n\n\nAny integer point inside the space covered by one of the given rectangles should be equally likely to be returned.\n\n\nNote** that an integer point is a point that has integer coordinates.\n\n\nImplement the `Solution` class:\n\n\n `Solution(int[][] rects)` Initializes the object with the given rectangles `rects`.\n `int[] pick()` Returns a random integer point `[u, v]` inside the space covered by one of the given rectangles.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Binary Search",
            "Reservoir Sampling",
            "Prefix Sum",
            "Ordered Set",
            "Randomized"
        ],
        "examples": [
            {
                "Input": "[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\n[[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []]",
                "Output": "[null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]",
                "Explanation": "Solution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]);\nsolution.pick(); // return [1, -2]\nsolution.pick(); // return [1, -1]\nsolution.pick(); // return [-1, -2]\nsolution.pick(); // return [-2, -2]\nsolution.pick(); // return [0, 0]"
            }
        ]
    },
    {
        "Title": "Diagonal Traverse",
        "slug": "diagonal-traverse",
        "description": "Given an `m x n` matrix `mat`, return *an array of all the elements of the array in a diagonal order*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** mat = [[1,2,3],[4,5,6],[7,8,9]]",
                "Output": "** [1,2,4,7,5,3,6,8,9]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Keyboard Row",
        "slug": "keyboard-row",
        "description": "Given an array of strings `words`, return *the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below*.\n\n\nIn the **American keyboard**:\n\n\n the first row consists of the characters `\"qwertyuiop\"`,\n the second row consists of the characters `\"asdfghjkl\"`, and\n the third row consists of the characters `\"zxcvbnm\"`.\n\n\n![](https://assets.leetcode.com/uploads/2018/10/12/keyboard.png)\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]",
                "Output": "** [\"Alaska\",\"Dad\"]",
                "Explanation": null
            },
            {
                "Input": "** words = [\"omk\"]",
                "Output": "** []",
                "Explanation": null
            },
            {
                "Input": "** words = [\"adsdf\",\"sfd\"]",
                "Output": "** [\"adsdf\",\"sfd\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Mode in Binary Search Tree",
        "slug": "find-mode-in-binary-search-tree",
        "description": "Given the `root` of a binary search tree (BST) with duplicates, return *all the [mode(s)](https://en.wikipedia.org/wiki/Mode_(statistics)) (i.e., the most frequently occurred element) in it*.\n\n\nIf the tree has more than one mode, return them in **any order**.\n\n\nAssume a BST is defined as follows:\n\n\n The left subtree of a node contains only nodes with keys **less than or equal to** the node's key.\n The right subtree of a node contains only nodes with keys **greater than or equal to** the node's key.\n Both the left and right subtrees must also be binary search trees.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,null,2,2]",
                "Output": "** [2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "IPO",
        "slug": "ipo",
        "description": "Suppose LeetCode will start its **IPO** soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the **IPO**. Since it has limited resources, it can only finish at most `k` distinct projects before the **IPO**. Help LeetCode design the best way to maximize its total capital after finishing at most `k` distinct projects.\n\n\nYou are given `n` projects where the `ith` project has a pure profit `profits[i]` and a minimum capital of `capital[i]` is needed to start it.\n\n\nInitially, you have `w` capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.\n\n\nPick a list of **at most** `k` distinct projects from given projects to **maximize your final capital**, and return *the final maximized capital*.\n\n\nThe answer is guaranteed to fit in a 32-bit signed integer.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]",
                "Output": "** 4",
                "Explanation": "** Since your initial capital is 0, you can only start the project indexed 0.\nAfter finishing it you will obtain profit 1 and your capital becomes 1.\nWith capital 1, you can either start the project indexed 1 or the project indexed 2.\nSince you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.\nTherefore, output the final maximized capital, which is 0 + 1 + 3 = 4."
            },
            {
                "Input": "** k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]",
                "Output": "** 6",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Next Greater Element II",
        "slug": "next-greater-element-ii",
        "description": "Given a circular integer array `nums` (i.e., the next element of `nums[nums.length - 1]` is `nums[0]`), return *the **next greater number** for every element in* `nums`.\n\n\nThe **next greater number** of a number `x` is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return `-1` for this number.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Stack",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,1]",
                "Output": "** [2,-1,2]\nExplanation: The first 1's next greater number is 2; \nThe number 2 can't find next greater number. \nThe second 1's next greater number needs to search circularly, which is also 2.",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2,3,4,3]",
                "Output": "** [2,3,4,-1,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Base 7",
        "slug": "base-7",
        "description": "Given an integer `num`, return *a string of its **base 7** representation*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** num = 100",
                "Output": "** \"202\"",
                "Explanation": null
            },
            {
                "Input": "** num = -7",
                "Output": "** \"-10\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Relative Ranks",
        "slug": "relative-ranks",
        "description": "You are given an integer array `score` of size `n`, where `score[i]` is the score of the `ith` athlete in a competition. All the scores are guaranteed to be **unique**.\n\n\nThe athletes are **placed** based on their scores, where the `1st` place athlete has the highest score, the `2nd` place athlete has the `2nd` highest score, and so on. The placement of each athlete determines their rank:\n\n\n The `1st` place athlete's rank is `\"Gold Medal\"`.\n The `2nd` place athlete's rank is `\"Silver Medal\"`.\n The `3rd` place athlete's rank is `\"Bronze Medal\"`.\n For the `4th` place to the `nth` place athlete, their rank is their placement number (i.e., the `xth` place athlete's rank is `\"x\"`).\n\n\nReturn an array `answer` of size `n` where `answer[i]` is the **rank** of the `ith` athlete.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** score = [5,4,3,2,1]",
                "Output": "** [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]",
                "Explanation": "** The placements are [1st, 2nd, 3rd, 4th, 5th]."
            },
            {
                "Input": "** score = [10,3,8,9,4]",
                "Output": "** [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]",
                "Explanation": "** The placements are [1st, 5th, 3rd, 2nd, 4th]."
            }
        ]
    },
    {
        "Title": "Perfect Number",
        "slug": "perfect-number",
        "description": "A [**perfect number**](https://en.wikipedia.org/wiki/Perfect_number) is a **positive integer** that is equal to the sum of its **positive divisors**, excluding the number itself. A **divisor** of an integer `x` is an integer that can divide `x` evenly.\n\n\nGiven an integer `n`, return `true` *if* `n` *is a perfect number, otherwise return* `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** num = 28",
                "Output": "** true",
                "Explanation": "** 28 = 1 + 2 + 4 + 7 + 14\n1, 2, 4, 7, and 14 are all divisors of 28."
            },
            {
                "Input": "** num = 7",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Most Frequent Subtree Sum",
        "slug": "most-frequent-subtree-sum",
        "description": "Given the `root` of a binary tree, return the most frequent **subtree sum**. If there is a tie, return all the values with the highest frequency in any order.\n\n\nThe **subtree sum** of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [5,2,-3]",
                "Output": "** [2,-3,4]",
                "Explanation": null
            },
            {
                "Input": "** root = [5,2,-5]",
                "Output": "** [2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Fibonacci Number",
        "slug": "fibonacci-number",
        "description": "The **Fibonacci numbers**, commonly denoted `F(n)` form a sequence, called the **Fibonacci sequence**, such that each number is the sum of the two preceding ones, starting from `0` and `1`. That is,\n\n\n\n```\n\nF(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n > 1.\n\n```\n\nGiven `n`, calculate `F(n)`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Recursion",
            "Memoization"
        ],
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** 1",
                "Explanation": "** F(2) = F(1) + F(0) = 1 + 0 = 1."
            },
            {
                "Input": "** n = 3",
                "Output": "** 2",
                "Explanation": "** F(3) = F(2) + F(1) = 1 + 1 = 2."
            },
            {
                "Input": "** n = 4",
                "Output": "** 3",
                "Explanation": "** F(4) = F(3) + F(2) = 2 + 1 = 3."
            }
        ]
    },
    {
        "Title": "Game Play Analysis I",
        "slug": "game-play-analysis-i",
        "description": "Table: `Activity`\n\n\n\n```\n\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| player_id    | int     |\n| device_id    | int     |\n| event_date   | date    |\n| games_played | int     |\n+--------------+---------+\n(player_id, event_date) is the primary key (combination of columns with unique values) of this table.\nThis table shows the activity of players of some games.\nEach row is a record of a player who logged in and played a number of games (possibly 0) before logging out on someday using some device.\n\n```\n\n\u00a0\n\n\nWrite a solution to find the **first login date** for each player.\n\n\nReturn the result table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nActivity table:\n+-----------+-----------+------------+--------------+\n| player_id | device_id | event_date | games_played |\n+-----------+-----------+------------+--------------+\n| 1         | 2         | 2016-03-01 | 5            |\n| 1         | 2         | 2016-05-02 | 6            |\n| 2         | 3         | 2017-06-25 | 1            |\n| 3         | 1         | 2016-03-02 | 0            |\n| 3         | 4         | 2018-07-03 | 5            |\n+-----------+-----------+------------+--------------+",
                "Output": "** \n+-----------+-------------+\n| player_id | first_login |\n+-----------+-------------+\n| 1         | 2016-03-01  |\n| 2         | 2017-06-25  |\n| 3         | 2016-03-02  |\n+-----------+-------------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Bottom Left Tree Value",
        "slug": "find-bottom-left-tree-value",
        "description": "Given the `root` of a binary tree, return the leftmost value in the last row of the tree.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [2,1,3]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** root = [1,2,3,4,null,5,6,null,null,7]",
                "Output": "** 7",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Freedom Trail",
        "slug": "freedom-trail",
        "description": "In the video game Fallout 4, the quest **\"Road to Freedom\"** requires players to reach a metal dial called the **\"Freedom Trail Ring\"** and use the dial to spell a specific keyword to open the door.\n\n\nGiven a string `ring` that represents the code engraved on the outer ring and another string `key` that represents the keyword that needs to be spelled, return *the minimum number of steps to spell all the characters in the keyword*.\n\n\nInitially, the first character of the ring is aligned at the `\"12:00\"` direction. You should spell all the characters in `key` one by one by rotating `ring` clockwise or anticlockwise to make each character of the string key aligned at the `\"12:00\"` direction and then by pressing the center button.\n\n\nAt the stage of rotating the ring to spell the key character `key[i]`:\n\n\n1. You can rotate the ring clockwise or anticlockwise by one place, which counts as **one step**. The final purpose of the rotation is to align one of `ring`'s characters at the `\"12:00\"` direction, where this character must equal `key[i]`.\n2. If the character `key[i]` has been aligned at the `\"12:00\"` direction, press the center button to spell, which also counts as **one step**. After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Depth-First Search",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** ring = \"godding\", key = \"gd\"",
                "Output": "** 4",
                "Explanation": "**\nFor the first key character 'g', since it is already in place, we just need 1 step to spell this character. \nFor the second key character 'd', we need to rotate the ring \"godding\" anticlockwise by two steps to make it become \"ddinggo\".\nAlso, we need 1 more step for spelling.\nSo the final output is 4."
            }
        ]
    },
    {
        "Title": "Find Largest Value in Each Tree Row",
        "slug": "find-largest-value-in-each-tree-row",
        "description": "Given the `root` of a binary tree, return *an array of the largest value in each row* of the tree **(0-indexed)**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,3,2,5,3,null,9]",
                "Output": "** [1,3,9]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Palindromic Subsequence",
        "slug": "longest-palindromic-subsequence",
        "description": "Given a string `s`, find *the longest palindromic **subsequence**'s length in* `s`.\n\n\nA **subsequence** is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"bbbab\"",
                "Output": "** 4",
                "Explanation": "** One possible longest palindromic subsequence is \"bbbb\"."
            },
            {
                "Input": "** s = \"cbbd\"",
                "Output": "** 2",
                "Explanation": "** One possible longest palindromic subsequence is \"bb\"."
            }
        ]
    },
    {
        "Title": "Super Washing Machines",
        "slug": "super-washing-machines",
        "description": "You have `n` super washing machines on a line. Initially, each washing machine has some dresses or is empty.\n\n\nFor each move, you could choose any `m` (`1 <= m <= n`) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time.\n\n\nGiven an integer array `machines` representing the number of dresses in each washing machine from left to right on the line, return *the minimum number of moves to make all the washing machines have the same number of dresses*. If it is not possible to do it, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** machines = [1,0,5]",
                "Output": "** 3",
                "Explanation": "**\n1st move:    1     0 <-- 5    =>    1     1     4\n2nd move:    1 <-- 1 <-- 4    =>    2     1     3\n3rd move:    2     1 <-- 3    =>    2     2     2"
            },
            {
                "Input": "** machines = [0,3,0]",
                "Output": "** 2",
                "Explanation": "**\n1st move:    0 <-- 3     0    =>    1     2     0\n2nd move:    1     2 --> 0    =>    1     1     1"
            },
            {
                "Input": "** machines = [0,2,0]",
                "Output": "** -1",
                "Explanation": "**\nIt's impossible to make all three washing machines have the same number of dresses."
            }
        ]
    },
    {
        "Title": "Coin Change II",
        "slug": "coin-change-ii",
        "description": "You are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money.\n\n\nReturn *the number of combinations that make up that amount*. If that amount of money cannot be made up by any combination of the coins, return `0`.\n\n\nYou may assume that you have an infinite number of each kind of coin.\n\n\nThe answer is **guaranteed** to fit into a signed **32-bit** integer.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** amount = 5, coins = [1,2,5]",
                "Output": "** 4",
                "Explanation": "** there are four ways to make up the amount:\n5=5\n5=2+2+1\n5=2+1+1+1\n5=1+1+1+1+1"
            },
            {
                "Input": "** amount = 3, coins = [2]",
                "Output": "** 0",
                "Explanation": "** the amount of 3 cannot be made up just with coins of 2."
            },
            {
                "Input": "** amount = 10, coins = [10]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Random Flip Matrix",
        "slug": "random-flip-matrix",
        "description": "There is an `m x n` binary grid `matrix` with all the values set `0` initially. Design an algorithm to randomly pick an index `(i, j)` where `matrix[i][j] == 0` and flips it to `1`. All the indices `(i, j)` where `matrix[i][j] == 0` should be equally likely to be returned.\n\n\nOptimize your algorithm to minimize the number of calls made to the **built-in** random function of your language and optimize the time and space complexity.\n\n\nImplement the `Solution` class:\n\n\n `Solution(int m, int n)` Initializes the object with the size of the binary matrix `m` and `n`.\n `int[] flip()` Returns a random index `[i, j]` of the matrix where `matrix[i][j] == 0` and flips it to `1`.\n `void reset()` Resets all the values of the matrix to be `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Math",
            "Reservoir Sampling",
            "Randomized"
        ],
        "examples": [
            {
                "Input": "[\"Solution\", \"flip\", \"flip\", \"flip\", \"reset\", \"flip\"]\n[[3, 1], [], [], [], [], []]",
                "Output": "[null, [1, 0], [2, 0], [0, 0], null, [2, 0]]",
                "Explanation": "Solution solution = new Solution(3, 1);\nsolution.flip();  // return [1, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.\nsolution.flip();  // return [2, 0], Since [1,0] was returned, [2,0] and [0,0]\nsolution.flip();  // return [0, 0], Based on the previously returned indices, only [0,0] can be returned.\nsolution.reset(); // All the values are reset to 0 and can be returned.\nsolution.flip();  // return [2, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned."
            }
        ]
    },
    {
        "Title": "Detect Capital",
        "slug": "detect-capital",
        "description": "We define the usage of capitals in a word to be right when one of the following cases holds:\n\n\n All letters in this word are capitals, like `\"USA\"`.\n All letters in this word are not capitals, like `\"leetcode\"`.\n Only the first letter in this word is capital, like `\"Google\"`.\n\n\nGiven a string `word`, return `true` if the usage of capitals in it is right.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** word = \"USA\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** word = \"FlaG\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Uncommon Subsequence I",
        "slug": "longest-uncommon-subsequence-i",
        "description": "Given two strings `a` and `b`, return *the length of the **longest uncommon subsequence** between* `a` *and* `b`. *If no such uncommon subsequence exists, return* `-1`*.\n\n\nAn **uncommon subsequence** between two strings is a string that is a **subsequence of exactly one of them**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** a = \"aba\", b = \"cdc\"",
                "Output": "** 3",
                "Explanation": "** One longest uncommon subsequence is \"aba\" because \"aba\" is a subsequence of \"aba\" but not \"cdc\".\nNote that \"cdc\" is also a longest uncommon subsequence."
            },
            {
                "Input": "** a = \"aaa\", b = \"bbb\"",
                "Output": "** 3",
                "Explanation": "**\u00a0The longest uncommon subsequences are \"aaa\" and \"bbb\"."
            },
            {
                "Input": "** a = \"aaa\", b = \"aaa\"",
                "Output": "** -1",
                "Explanation": "**\u00a0Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a. So the answer would be -1."
            }
        ]
    },
    {
        "Title": "Longest Uncommon Subsequence II",
        "slug": "longest-uncommon-subsequence-ii",
        "description": "Given an array of strings `strs`, return *the length of the **longest uncommon subsequence** between them*. If the longest uncommon subsequence does not exist, return `-1`.\n\n\nAn **uncommon subsequence** between an array of strings is a string that is a **subsequence of one string but not the others**.\n\n\nA **subsequence** of a string `s` is a string that can be obtained after deleting any number of characters from `s`.\n\n\n For example, `\"abc\"` is a subsequence of `\"aebdc\"` because you can delete the underlined characters in `\"aebdc\"` to get `\"abc\"`. Other subsequences of `\"aebdc\"` include `\"aebdc\"`, `\"aeb\"`, and `\"\"` (empty string).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers",
            "String",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** strs = [\"aba\",\"cdc\",\"eae\"]",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** strs = [\"aaa\",\"aaa\",\"aa\"]",
                "Output": "** -1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Continuous Subarray Sum",
        "slug": "continuous-subarray-sum",
        "description": "Given an integer array nums and an integer k, return `true` *if* `nums` *has a **good subarray** or* `false` *otherwise*.\n\n\nA **good subarray** is a subarray where:\n\n\n its length is **at least two**, and\n the sum of the elements of the subarray is a multiple of `k`.\n\n\nNote** that:\n\n\n A **subarray** is a contiguous part of the array.\n An integer `x` is a multiple of `k` if there exists an integer `n` such that `x = n * k`. `0` is **always** a multiple of `k`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [23,2,4,6,7], k = 6",
                "Output": "** true",
                "Explanation": "** [2, 4] is a continuous subarray of size 2 whose elements sum up to 6."
            },
            {
                "Input": "** nums = [23,2,6,4,7], k = 6",
                "Output": "** true",
                "Explanation": "** [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.\n42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer."
            },
            {
                "Input": "** nums = [23,2,6,4,7], k = 13",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Word in Dictionary through Deleting",
        "slug": "longest-word-in-dictionary-through-deleting",
        "description": "Given a string `s` and a string array `dictionary`, return *the longest string in the dictionary that can be formed by deleting some of the given string characters*. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "String",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** s = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"]",
                "Output": "** \"apple\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"abpcplea\", dictionary = [\"a\",\"b\",\"c\"]",
                "Output": "** \"a\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Contiguous Array",
        "slug": "contiguous-array",
        "description": "Given a binary array `nums`, return *the maximum length of a contiguous subarray with an equal number of* `0` *and* `1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [0,1]",
                "Output": "** 2",
                "Explanation": "** [0, 1] is the longest contiguous subarray with an equal number of 0 and 1."
            },
            {
                "Input": "** nums = [0,1,0]",
                "Output": "** 2",
                "Explanation": "** [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1."
            }
        ]
    },
    {
        "Title": "Beautiful Arrangement",
        "slug": "beautiful-arrangement",
        "description": "Suppose you have `n` integers labeled `1` through `n`. A permutation of those `n` integers `perm` (**1-indexed**) is considered a **beautiful arrangement** if for every `i` (`1 <= i <= n`), **either** of the following is true:\n\n\n `perm[i]` is divisible by `i`.\n `i` is divisible by `perm[i]`.\n\n\nGiven an integer `n`, return *the **number** of the **beautiful arrangements** that you can construct*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Backtracking",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** 2",
                "Explanation": "** \nThe first beautiful arrangement is [1,2]:\n    - perm[1] = 1 is divisible by i = 1\n    - perm[2] = 2 is divisible by i = 2\nThe second beautiful arrangement is [2,1]:\n    - perm[1] = 2 is divisible by i = 1\n    - i = 2 is divisible by perm[2] = 1"
            },
            {
                "Input": "** n = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Random Pick with Weight",
        "slug": "random-pick-with-weight",
        "description": "You are given a **0-indexed** array of positive integers `w` where `w[i]` describes the **weight** of the `ith` index.\n\n\nYou need to implement the function `pickIndex()`, which **randomly** picks an index in the range `[0, w.length - 1]` (**inclusive**) and returns it. The **probability** of picking an index `i` is `w[i] / sum(w)`.\n\n\n For example, if `w = [1, 3]`, the probability of picking index `0` is `1 / (1 + 3) = 0.25` (i.e., `25%`), and the probability of picking index `1` is `3 / (1 + 3) = 0.75` (i.e., `75%`).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Binary Search",
            "Prefix Sum",
            "Randomized"
        ],
        "examples": [
            {
                "Input": "[\"Solution\",\"pickIndex\"]\n[[[1]],[]]",
                "Output": "[null,0]",
                "Explanation": "Solution solution = new Solution([1]);\nsolution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w."
            },
            {
                "Input": "[\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"]\n[[[1,3]],[],[],[],[],[]]",
                "Output": "[null,1,1,1,1,0]",
                "Explanation": "Solution solution = new Solution([1, 3]);\nsolution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4.\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4.\n\nSince this is a randomization problem, multiple answers are allowed.\nAll of the following outputs can be considered correct:\n[null,1,1,1,1,0]\n[null,1,1,1,1,1]\n[null,1,1,1,0,0]\n[null,1,1,1,0,1]\n[null,1,0,1,0,0]\n......\nand so on."
            }
        ]
    },
    {
        "Title": "Minesweeper",
        "slug": "minesweeper",
        "description": "Let's play the minesweeper game ([Wikipedia](https://en.wikipedia.org/wiki/Minesweeper_(video_game)), [online game](http://minesweeperonline.com))!\n\n\nYou are given an `m x n` char matrix `board` representing the game board where:\n\n\n `'M'` represents an unrevealed mine,\n `'E'` represents an unrevealed empty square,\n `'B'` represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals),\n digit (`'1'` to `'8'`) represents how many mines are adjacent to this revealed square, and\n `'X'` represents a revealed mine.\n\n\nYou are also given an integer array `click` where `click = [clickr, clickc]` represents the next click position among all the unrevealed squares (`'M'` or `'E'`).\n\n\nReturn *the board after revealing this position according to the following rules*:\n\n\n1. If a mine `'M'` is revealed, then the game is over. You should change it to `'X'`.\n2. If an empty square `'E'` with no adjacent mines is revealed, then change it to a revealed blank `'B'` and all of its adjacent unrevealed squares should be revealed recursively.\n3. If an empty square `'E'` with at least one adjacent mine is revealed, then change it to a digit (`'1'` to `'8'`) representing the number of adjacent mines.\n4. Return the board when no more squares will be revealed.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** board = [[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"M\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"]], click = [3,0]",
                "Output": "** [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]",
                "Explanation": null
            },
            {
                "Input": "** board = [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]], click = [1,2]",
                "Output": "** [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"X\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Absolute Difference in BST",
        "slug": "minimum-absolute-difference-in-bst",
        "description": "Given the `root` of a Binary Search Tree (BST), return *the minimum absolute difference between the values of any two different nodes in the tree*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [4,2,6,1,3]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** root = [1,0,48,null,null,12,49]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "K-diff Pairs in an Array",
        "slug": "k-diff-pairs-in-an-array",
        "description": "Given an array of integers `nums` and an integer `k`, return *the number of **unique** k-diff pairs in the array*.\n\n\nA **k-diff** pair is an integer pair `(nums[i], nums[j])`, where the following are true:\n\n\n `0 <= i, j < nums.length`\n `i != j`\n `|nums[i] - nums[j]| == k`\n\n\nNotice** that `|val|` denotes the absolute value of `val`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [3,1,4,1,5], k = 2",
                "Output": "** 2",
                "Explanation": "** There are two 2-diff pairs in the array, (1, 3) and (3, 5).\nAlthough we have two 1s in the input, we should only return the number of **unique** pairs."
            },
            {
                "Input": "** nums = [1,2,3,4,5], k = 1",
                "Output": "** 4",
                "Explanation": "** There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5)."
            },
            {
                "Input": "** nums = [1,3,1,5,4], k = 0",
                "Output": "** 1",
                "Explanation": "** There is one 0-diff pair in the array, (1, 1)."
            }
        ]
    },
    {
        "Title": "Encode and Decode TinyURL",
        "slug": "encode-and-decode-tinyurl",
        "description": "\n> Note: This is a companion problem to the [System Design](https://leetcode.com/discuss/interview-question/system-design/) problem: [Design TinyURL](https://leetcode.com/discuss/interview-question/124658/Design-a-URL-Shortener-(-TinyURL-)-System/).\n\n\nTinyURL is a URL shortening service where you enter a URL such as `https://leetcode.com/problems/design-tinyurl` and it returns a short URL such as `http://tinyurl.com/4e9iAk`. Design a class to encode a URL and decode a tiny URL.\n\n\nThere is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.\n\n\nImplement the `Solution` class:\n\n\n `Solution()` Initializes the object of the system.\n `String encode(String longUrl)` Returns a tiny URL for the given `longUrl`.\n `String decode(String shortUrl)` Returns the original long URL for the given `shortUrl`. It is guaranteed that the given `shortUrl` was encoded by the same object.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Design",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "** url = \"https://leetcode.com/problems/design-tinyurl\"",
                "Output": "** \"https://leetcode.com/problems/design-tinyurl\"",
                "Explanation": "**\nSolution obj = new Solution();\nstring tiny = obj.encode(url); // returns the encoded tiny url.\nstring ans = obj.decode(tiny); // returns the original url after decoding it."
            }
        ]
    },
    {
        "Title": "Complex Number Multiplication",
        "slug": "complex-number-multiplication",
        "description": "A [complex number](https://en.wikipedia.org/wiki/Complex_number) can be represented as a string on the form `\"**real**+**imaginary**i\"` where:\n\n\n `real` is the real part and is an integer in the range `[-100, 100]`.\n `imaginary` is the imaginary part and is an integer in the range `[-100, 100]`.\n `i2 == -1`.\n\n\nGiven two complex numbers `num1` and `num2` as strings, return *a string of the complex number that represents their multiplications*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "String",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** num1 = \"1+1i\", num2 = \"1+1i\"",
                "Output": "** \"0+2i\"",
                "Explanation": "** (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i."
            },
            {
                "Input": "** num1 = \"1+-1i\", num2 = \"1+-1i\"",
                "Output": "** \"0+-2i\"",
                "Explanation": "** (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i."
            }
        ]
    },
    {
        "Title": "Convert BST to Greater Tree",
        "slug": "convert-bst-to-greater-tree",
        "description": "Given the `root` of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.\n\n\nAs a reminder, a *binary search tree* is a tree that satisfies these constraints:\n\n\n The left subtree of a node contains only nodes with keys **less than** the node's key.\n The right subtree of a node contains only nodes with keys **greater than** the node's key.\n Both the left and right subtrees must also be binary search trees.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]",
                "Output": "** [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Time Difference",
        "slug": "minimum-time-difference",
        "description": "Given a list of 24-hour clock time points in **\"HH:MM\"** format, return *the minimum **minutes** difference between any two time-points in the list*.\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "String",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** timePoints = [\"23:59\",\"00:00\"]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** timePoints = [\"00:00\",\"23:59\",\"00:00\"]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Single Element in a Sorted Array",
        "slug": "single-element-in-a-sorted-array",
        "description": "You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.\n\n\nReturn *the single element that appears only once*.\n\n\nYour solution must run in `O(log n)` time and `O(1)` space.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** nums = [1,1,2,3,3,4,4,8,8]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** nums = [3,3,7,7,10,11,11]",
                "Output": "** 10",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reverse String II",
        "slug": "reverse-string-ii",
        "description": "Given a string `s` and an integer `k`, reverse the first `k` characters for every `2k` characters counting from the start of the string.\n\n\nIf there are fewer than `k` characters left, reverse all of them. If there are less than `2k` but greater than or equal to `k` characters, then reverse the first `k` characters and leave the other as original.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"abcdefg\", k = 2",
                "Output": "** \"bacdfeg\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"abcd\", k = 2",
                "Output": "** \"bacd\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "01 Matrix",
        "slug": "01-matrix",
        "description": "Given an `m x n` binary matrix `mat`, return *the distance of the nearest* `0` *for each cell*.\n\n\nThe distance between two adjacent cells is `1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Breadth-First Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** mat = [[0,0,0],[0,1,0],[0,0,0]]",
                "Output": "** [[0,0,0],[0,1,0],[0,0,0]]",
                "Explanation": null
            },
            {
                "Input": "** mat = [[0,0,0],[0,1,0],[1,1,1]]",
                "Output": "** [[0,0,0],[0,1,0],[1,2,1]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Diameter of Binary Tree",
        "slug": "diameter-of-binary-tree",
        "description": "Given the `root` of a binary tree, return *the length of the **diameter** of the tree*.\n\n\nThe **diameter** of a binary tree is the **length** of the longest path between any two nodes in a tree. This path may or may not pass through the `root`.\n\n\nThe **length** of a path between two nodes is represented by the number of edges between them.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2,3,4,5]",
                "Output": "** 3",
                "Explanation": "** 3 is the length of the path [4,2,1,3] or [5,2,1,3]."
            }
        ]
    },
    {
        "Title": "Remove Boxes",
        "slug": "remove-boxes",
        "description": "You are given several `boxes` with different colors represented by different positive numbers.\n\n\nYou may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (i.e., composed of `k` boxes, `k >= 1`), remove them and get `k * k` points.\n\n\nReturn *the maximum points you can get*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Memoization"
        ],
        "examples": [
            {
                "Input": "** boxes = [1,3,2,2,2,3,4,3,1]",
                "Output": "** 23",
                "Explanation": "**\n[1, 3, 2, 2, 2, 3, 4, 3, 1] \n----> [1, 3, 3, 4, 3, 1] (3*3=9 points) \n----> [1, 3, 3, 3, 1] (1*1=1 points) \n----> [1, 1] (3*3=9 points) \n----> [] (2*2=4 points)"
            },
            {
                "Input": "** boxes = [1,1,1]",
                "Output": "** 9",
                "Explanation": null
            },
            {
                "Input": "** boxes = [1]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Provinces",
        "slug": "number-of-provinces",
        "description": "There are `n` cities. Some of them are connected, while some are not. If city `a` is connected directly with city `b`, and city `b` is connected directly with city `c`, then city `a` is connected indirectly with city `c`.\n\n\nA **province** is a group of directly or indirectly connected cities and no other cities outside of the group.\n\n\nYou are given an `n x n` matrix `isConnected` where `isConnected[i][j] = 1` if the `ith` city and the `jth` city are directly connected, and `isConnected[i][j] = 0` otherwise.\n\n\nReturn *the total number of **provinces***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** isConnected = [[1,1,0],[1,1,0],[0,0,1]]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** isConnected = [[1,0,0],[0,1,0],[0,0,1]]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Game Play Analysis IV",
        "slug": "game-play-analysis-iv",
        "description": "Table: `Activity`\n\n\n\n```\n\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| player_id    | int     |\n| device_id    | int     |\n| event_date   | date    |\n| games_played | int     |\n+--------------+---------+\n(player_id, event_date) is the primary key (combination of columns with unique values) of this table.\nThis table shows the activity of players of some games.\nEach row is a record of a player who logged in and played a number of games (possibly 0) before logging out on someday using some device.\n\n```\n\n\u00a0\n\n\nWrite a\u00a0solution\u00a0to report the **fraction** of players that logged in again on the day after the day they first logged in, **rounded to 2 decimal places**. In other words, you need to count the number of players that logged in for at least two consecutive days starting from their first login date, then divide that number by the total number of players.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nActivity table:\n+-----------+-----------+------------+--------------+\n| player_id | device_id | event_date | games_played |\n+-----------+-----------+------------+--------------+\n| 1         | 2         | 2016-03-01 | 5            |\n| 1         | 2         | 2016-03-02 | 6            |\n| 2         | 3         | 2017-06-25 | 1            |\n| 3         | 1         | 2016-03-02 | 0            |\n| 3         | 4         | 2018-07-03 | 5            |\n+-----------+-----------+------------+--------------+",
                "Output": "** \n+-----------+\n| fraction  |\n+-----------+\n| 0.33      |\n+-----------+",
                "Explanation": "** \nOnly the player with id 1 logged back in after the first day he had logged in so the answer is 1/3 = 0.33"
            }
        ]
    },
    {
        "Title": "Student Attendance Record I",
        "slug": "student-attendance-record-i",
        "description": "You are given a string `s` representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:\n\n\n `'A'`: Absent.\n `'L'`: Late.\n `'P'`: Present.\n\n\nThe student is eligible for an attendance award if they meet **both** of the following criteria:\n\n\n The student was absent (`'A'`) for **strictly** fewer than 2 days **total**.\n The student was **never** late (`'L'`) for 3 or more **consecutive** days.\n\n\nReturn `true` *if the student is eligible for an attendance award, or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"PPALLP\"",
                "Output": "** true",
                "Explanation": "** The student has fewer than 2 absences and was never late 3 or more consecutive days."
            },
            {
                "Input": "** s = \"PPALLL\"",
                "Output": "** false",
                "Explanation": "** The student was late 3 consecutive days in the last 3 days, so is not eligible for the award."
            }
        ]
    },
    {
        "Title": "Student Attendance Record II",
        "slug": "student-attendance-record-ii",
        "description": "An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:\n\n\n `'A'`: Absent.\n `'L'`: Late.\n `'P'`: Present.\n\n\nAny student is eligible for an attendance award if they meet **both** of the following criteria:\n\n\n The student was absent (`'A'`) for **strictly** fewer than 2 days **total**.\n The student was **never** late (`'L'`) for 3 or more **consecutive** days.\n\n\nGiven an integer `n`, return *the **number** of possible attendance records of length* `n` *that make a student eligible for an attendance award. The answer may be very large, so return it **modulo*** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** 8",
                "Explanation": "** There are 8 records with length 2 that are eligible for an award:\n\"PP\", \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\"\nOnly \"AA\" is not eligible because there are 2 absences (there need to be fewer than 2)."
            },
            {
                "Input": "** n = 1",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** n = 10101",
                "Output": "** 183236316",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Optimal Division",
        "slug": "optimal-division",
        "description": "You are given an integer array `nums`. The adjacent integers in `nums` will perform the float division.\n\n\n For example, for `nums = [2,3,4]`, we will evaluate the expression `\"2/3/4\"`.\n\n\nHowever, you can add any number of parenthesis at any position to change the priority of operations. You want to add these parentheses such the value of the expression after the evaluation is maximum.\n\n\nReturn *the corresponding expression that has the maximum value in string format*.\n\n\nNote:** your expression should not contain redundant parenthesis.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [1000,100,10,2]",
                "Output": "** \"1000/(100/10/2)\"",
                "Explanation": "** 1000/(100/10/2) = 1000/((100/10)/2) = 200\nHowever, the bold parenthesis in \"1000/(**(**100/10**)**/2)\" are redundant since they do not influence the operation priority.\nSo you should return \"1000/(100/10/2)\".\nOther cases:\n1000/(100/10)/2 = 50\n1000/(100/(10/2)) = 50\n1000/100/10/2 = 0.5\n1000/100/(10/2) = 2"
            },
            {
                "Input": "** nums = [2,3,4]",
                "Output": "** \"2/(3/4)\"",
                "Explanation": "** (2/(3/4)) = 8/3 = 2.667\nIt can be shown that after trying all possibilities, we cannot get an expression with evaluation greater than 2.667"
            }
        ]
    },
    {
        "Title": "Brick Wall",
        "slug": "brick-wall",
        "description": "There is a rectangular brick wall in front of you with `n` rows of bricks. The `ith` row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same.\n\n\nDraw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.\n\n\nGiven the 2D array `wall` that contains the information about the wall, return *the minimum number of crossed bricks after drawing such a vertical line*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Next Greater Element III",
        "slug": "next-greater-element-iii",
        "description": "Given a positive integer `n`, find *the smallest integer which has exactly the same digits existing in the integer* `n` *and is greater in value than* `n`. If no such positive integer exists, return `-1`.\n\n\nNote** that the returned integer should fit in **32-bit integer**, if there is a valid answer but it does not fit in **32-bit integer**, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** n = 12",
                "Output": "** 21",
                "Explanation": null
            },
            {
                "Input": "** n = 21",
                "Output": "** -1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reverse Words in a String III",
        "slug": "reverse-words-in-a-string-iii",
        "description": "Given a string `s`, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"Let's take LeetCode contest\"",
                "Output": "** \"s'teL ekat edoCteeL tsetnoc\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"Mr Ding\"",
                "Output": "** \"rM gniD\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Logical OR of Two Binary Grids Represented as Quad-Trees",
        "slug": "logical-or-of-two-binary-grids-represented-as-quad-trees",
        "description": "A Binary Matrix is a matrix in which all the elements are either **0** or **1**.\n\n\nGiven `quadTree1` and `quadTree2`. `quadTree1` represents a `n * n` binary matrix and `quadTree2` represents another `n * n` binary matrix.\n\n\nReturn *a Quad-Tree* representing the `n * n` binary matrix which is the result of **logical bitwise OR** of the two binary matrixes represented by `quadTree1` and `quadTree2`.\n\n\nNotice that you can assign the value of a node to **True** or **False** when `isLeaf` is **False**, and both are **accepted** in the answer.\n\n\nA Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\n\n\n `val`: True if the node represents a grid of 1's or False if the node represents a grid of 0's.\n `isLeaf`: True if the node is leaf node on the tree or False if the node has the four children.\n\n\n\n```\n\nclass Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n}\n```\n\nWe can construct a Quad-Tree from a two-dimensional area using the following steps:\n\n\n1. If the current grid has the same value (i.e all `1's` or all `0's`) set `isLeaf` True and set `val` to the value of the grid and set the four children to Null and stop.\n2. If the current grid has different values, set `isLeaf` to False and set `val` to any value and divide the current grid into four sub-grids as shown in the photo.\n3. Recurse for each of the children with the proper sub-grid.\n\n\n![](https://assets.leetcode.com/uploads/2020/02/11/new_top.png)\nIf you want to know more about the Quad-Tree, you can refer to the [wiki](https://en.wikipedia.org/wiki/Quadtree).\n\n\nQuad-Tree format:\n\n\nThe input/output represents the serialized format of a Quad-Tree using level order traversal, where `null` signifies a path terminator where no node exists below.\n\n\nIt is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list `[isLeaf, val]`.\n\n\nIf the value of `isLeaf` or `val` is True we represent it as **1** in the list `[isLeaf, val]` and if the value of `isLeaf` or `val` is False we represent it as **0**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Divide and Conquer",
            "Tree"
        ],
        "examples": [
            {
                "Input": "** quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]\n, quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]",
                "Output": "** [[0,0],[1,1],[1,1],[1,1],[1,0]]",
                "Explanation": "** quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree.\nIf we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad-Tree.\nNotice that the binary matrices shown are only for illustration, you don't have to construct the binary matrix to get the result tree.\n![](https://assets.leetcode.com/uploads/2020/02/11/qtr.png)"
            }
        ]
    },
    {
        "Title": "Maximum Depth of N-ary Tree",
        "slug": "maximum-depth-of-n-ary-tree",
        "description": "Given a n-ary tree, find its maximum depth.\n\n\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** root = [1,null,3,2,4,null,5,6]",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
                "Output": "** 5",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Subarray Sum Equals K",
        "slug": "subarray-sum-equals-k",
        "description": "Given an array of integers `nums` and an integer `k`, return *the total number of subarrays whose sum equals to* `k`.\n\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [1,1,1], k = 2",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2,3], k = 3",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Array Partition",
        "slug": "array-partition",
        "description": "Given an integer array `nums` of `2n` integers, group these integers into `n` pairs `(a1, b1), (a2, b2), ..., (an, bn)` such that the sum of `min(ai, bi)` for all `i` is **maximized**. Return *the maximized sum*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting",
            "Counting Sort"
        ],
        "examples": [
            {
                "Input": "** nums = [1,4,3,2]",
                "Output": "** 4",
                "Explanation": "** All possible pairings (ignoring the ordering of elements) are:\n1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3\n2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3\n3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4\nSo the maximum possible sum is 4."
            },
            {
                "Input": "** nums = [6,2,6,5,1,2]",
                "Output": "** 9",
                "Explanation": "** The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9."
            }
        ]
    },
    {
        "Title": "Binary Tree Tilt",
        "slug": "binary-tree-tilt",
        "description": "Given the `root` of a binary tree, return *the sum of every tree node's **tilt**.\n\n\nThe **tilt** of a tree node is the **absolute difference** between the sum of all left subtree node **values** and all right subtree node **values**. If a node does not have a left child, then the sum of the left subtree node **values** is treated as `0`. The rule is similar if the node does not have a right child.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2,3]",
                "Output": "** 1",
                "Explanation": "** \nTilt of node 2 : |0-0| = 0 (no children)\nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)\nSum of every tilt : 0 + 0 + 1 = 1"
            },
            {
                "Input": "** root = [4,2,9,3,5,null,7]",
                "Output": "** 15",
                "Explanation": "** \nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 5 : |0-0| = 0 (no children)\nTilt of node 7 : |0-0| = 0 (no children)\nTilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)\nTilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)\nTilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)\nSum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15"
            },
            {
                "Input": "** root = [21,7,14,1,1,2,2,3,3]",
                "Output": "** 9",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find the Closest Palindrome",
        "slug": "find-the-closest-palindrome",
        "description": "Given a string `n` representing an integer, return *the closest integer (not including itself), which is a palindrome*. If there is a tie, return ***the smaller one***.\n\n\nThe closest is defined as the absolute difference minimized between two integers.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "String"
        ],
        "examples": [
            {
                "Input": "** n = \"123\"",
                "Output": "** \"121\"",
                "Explanation": null
            },
            {
                "Input": "** n = \"1\"",
                "Output": "** \"0\"",
                "Explanation": "** 0 and 2 are the closest palindromes but we return the smallest which is 0."
            }
        ]
    },
    {
        "Title": "Array Nesting",
        "slug": "array-nesting",
        "description": "You are given an integer array `nums` of length `n` where `nums` is a permutation of the numbers in the range `[0, n - 1]`.\n\n\nYou should build a set `s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... }` subjected to the following rule:\n\n\n The first element in `s[k]` starts with the selection of the element `nums[k]` of `index = k`.\n The next element in `s[k]` should be `nums[nums[k]]`, and then `nums[nums[nums[k]]]`, and so on.\n We stop adding right before a duplicate element occurs in `s[k]`.\n\n\nReturn *the longest length of a set* `s[k]`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search"
        ],
        "examples": [
            {
                "Input": "** nums = [5,4,0,3,1,6,2]",
                "Output": "** 4",
                "Explanation": "** \nnums[0] = 5, nums[1] = 4, nums[2] = 0, nums[3] = 3, nums[4] = 1, nums[5] = 6, nums[6] = 2.\nOne of the longest sets s[k]:\ns[0] = {nums[0], nums[5], nums[6], nums[2]} = {5, 6, 2, 0}"
            },
            {
                "Input": "** nums = [0,1,2]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reshape the Matrix",
        "slug": "reshape-the-matrix",
        "description": "In MATLAB, there is a handy function called `reshape` which can reshape an `m x n` matrix into a new one with a different size `r x c` keeping its original data.\n\n\nYou are given an `m x n` matrix `mat` and two integers `r` and `c` representing the number of rows and the number of columns of the wanted reshaped matrix.\n\n\nThe reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.\n\n\nIf the `reshape` operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** mat = [[1,2],[3,4]], r = 1, c = 4",
                "Output": "** [[1,2,3,4]]",
                "Explanation": null
            },
            {
                "Input": "** mat = [[1,2],[3,4]], r = 2, c = 4",
                "Output": "** [[1,2],[3,4]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Permutation in String",
        "slug": "permutation-in-string",
        "description": "Given two strings `s1` and `s2`, return `true` *if* `s2` *contains a permutation of* `s1`*, or* `false` *otherwise*.\n\n\nIn other words, return `true` if one of `s1`'s permutations is the substring of `s2`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Two Pointers",
            "String",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** s1 = \"ab\", s2 = \"eidbaooo\"",
                "Output": "** true",
                "Explanation": "** s2 contains one permutation of s1 (\"ba\")."
            },
            {
                "Input": "** s1 = \"ab\", s2 = \"eidboaoo\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Managers with at Least 5 Direct Reports",
        "slug": "managers-with-at-least-5-direct-reports",
        "description": "Table: `Employee`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n| department  | varchar |\n| managerId   | int     |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table indicates the name of an employee, their department, and the id of their manager.\nIf managerId is null, then the employee does not have a manager.\nNo employee will be the manager of themself.\n\n```\n\n\u00a0\n\n\nWrite a solution to find managers with at least **five direct reports**.\n\n\nReturn the result table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nEmployee table:\n+-----+-------+------------+-----------+\n| id  | name  | department | managerId |\n+-----+-------+------------+-----------+\n| 101 | John  | A          | null      |\n| 102 | Dan   | A          | 101       |\n| 103 | James | A          | 101       |\n| 104 | Amy   | A          | 101       |\n| 105 | Anne  | A          | 101       |\n| 106 | Ron   | B          | 101       |\n+-----+-------+------------+-----------+",
                "Output": "** \n+------+\n| name |\n+------+\n| John |\n+------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Subtree of Another Tree",
        "slug": "subtree-of-another-tree",
        "description": "Given the roots of two binary trees `root` and `subRoot`, return `true` if there is a subtree of `root` with the same structure and node values of `subRoot` and `false` otherwise.\n\n\nA subtree of a binary tree `tree` is a tree that consists of a node in `tree` and all of this node's descendants. The tree `tree` could also be considered as a subtree of itself.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "String Matching",
            "Binary Tree",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "** root = [3,4,5,1,2], subRoot = [4,1,2]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Distribute Candies",
        "slug": "distribute-candies",
        "description": "Alice has `n` candies, where the `ith` candy is of type `candyType[i]`. Alice noticed that she started to gain weight, so she visited a doctor.\n\n\nThe doctor advised Alice to only eat `n / 2` of the candies she has (`n` is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.\n\n\nGiven the integer array `candyType` of length `n`, return *the **maximum** number of different types of candies she can eat if she only eats* `n / 2` *of them*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** candyType = [1,1,2,2,3,3]",
                "Output": "** 3",
                "Explanation": "** Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type."
            },
            {
                "Input": "** candyType = [1,1,2,3]",
                "Output": "** 2",
                "Explanation": "** Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types."
            },
            {
                "Input": "** candyType = [6,6,6,6]",
                "Output": "** 1",
                "Explanation": "** Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type."
            }
        ]
    },
    {
        "Title": "Out of Boundary Paths",
        "slug": "out-of-boundary-paths",
        "description": "There is an `m x n` grid with a ball. The ball is initially at the position `[startRow, startColumn]`. You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply **at most** `maxMove` moves to the ball.\n\n\nGiven the five integers `m`, `n`, `maxMove`, `startRow`, `startColumn`, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0",
                "Output": "** 6",
                "Explanation": null
            },
            {
                "Input": "** m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1",
                "Output": "** 12",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Employee Bonus",
        "slug": "employee-bonus",
        "description": "Table: `Employee`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| empId       | int     |\n| name        | varchar |\n| supervisor  | int     |\n| salary      | int     |\n+-------------+---------+\nempId is the column with unique values for this table.\nEach row of this table indicates the name and the ID of an employee in addition to their salary and the id of their manager.\n\n```\n\n\u00a0\n\n\nTable: `Bonus`\n\n\n\n```\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| empId       | int  |\n| bonus       | int  |\n+-------------+------+\nempId is the column of unique values for this table.\nempId is a foreign key (reference column) to empId from the Employee table.\nEach row of this table contains the id of an employee and their respective bonus.\n\n```\n\n\u00a0\n\n\nWrite a solution to report the name and bonus amount of each employee with a bonus **less than** `1000`.\n\n\nReturn the result table in **any order**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nEmployee table:\n+-------+--------+------------+--------+\n| empId | name   | supervisor | salary |\n+-------+--------+------------+--------+\n| 3     | Brad   | null       | 4000   |\n| 1     | John   | 3          | 1000   |\n| 2     | Dan    | 3          | 2000   |\n| 4     | Thomas | 3          | 4000   |\n+-------+--------+------------+--------+\nBonus table:\n+-------+-------+\n| empId | bonus |\n+-------+-------+\n| 2     | 500   |\n| 4     | 2000  |\n+-------+-------+",
                "Output": "** \n+------+-------+\n| name | bonus |\n+------+-------+\n| Brad | null  |\n| John | null  |\n| Dan  | 500   |\n+------+-------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Shortest Unsorted Continuous Subarray",
        "slug": "shortest-unsorted-continuous-subarray",
        "description": "Given an integer array `nums`, you need to find one **continuous subarray** such that if you only sort this subarray in non-decreasing order, then the whole array will be sorted in non-decreasing order.\n\n\nReturn *the shortest such subarray and output its length*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Stack",
            "Greedy",
            "Sorting",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** nums = [2,6,4,8,10,9,15]",
                "Output": "** 5",
                "Explanation": "** You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order."
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** nums = [1]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Delete Operation for Two Strings",
        "slug": "delete-operation-for-two-strings",
        "description": "Given two strings `word1` and `word2`, return *the minimum number of **steps** required to make* `word1` *and* `word2` *the same*.\n\n\nIn one **step**, you can delete exactly one character in either string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** word1 = \"sea\", word2 = \"eat\"",
                "Output": "** 2",
                "Explanation": "** You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\"."
            },
            {
                "Input": "** word1 = \"leetcode\", word2 = \"etco\"",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Customer Referee",
        "slug": "find-customer-referee",
        "description": "Table: `Customer`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n| referee_id  | int     |\n+-------------+---------+\nIn SQL, id is the primary key column for this table.\nEach row of this table indicates the id of a customer, their name, and the id of the customer who referred them.\n\n```\n\n\u00a0\n\n\nFind the names of the customer that are **not referred by** the customer with `id = 2`.\n\n\nReturn the result table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nCustomer table:\n+----+------+------------+\n| id | name | referee_id |\n+----+------+------------+\n| 1  | Will | null       |\n| 2  | Jane | null       |\n| 3  | Alex | 2          |\n| 4  | Bill | null       |\n| 5  | Zack | 1          |\n| 6  | Mark | 2          |\n+----+------+------------+",
                "Output": "** \n+------+\n| name |\n+------+\n| Will |\n| Jane |\n| Bill |\n| Zack |\n+------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Investments in 2016",
        "slug": "investments-in-2016",
        "description": "Table: `Insurance`\n\n\n\n```\n\n+-------------+-------+\n| Column Name | Type  |\n+-------------+-------+\n| pid         | int   |\n| tiv_2015    | float |\n| tiv_2016    | float |\n| lat         | float |\n| lon         | float |\n+-------------+-------+\npid is the primary key (column with unique values) for this table.\nEach row of this table contains information about one policy where:\npid is the policyholder's policy ID.\ntiv_2015 is the total investment value in 2015 and tiv_2016 is the total investment value in 2016.\nlat is the latitude of the policy holder's city. It's guaranteed that lat is not NULL.\nlon is the longitude of the policy holder's city. It's guaranteed that lon is not NULL.\n\n```\n\n\u00a0\n\n\nWrite a solution to report the sum of all total investment values in 2016 `tiv_2016`, for all policyholders who:\n\n\n have the same `tiv_2015` value as one or more other policyholders, and\n are not located in the same city as any other policyholder (i.e., the (`lat, lon`) attribute pairs must be unique).\n\n\nRound `tiv_2016` to **two decimal places**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nInsurance table:\n+-----+----------+----------+-----+-----+\n| pid | tiv_2015 | tiv_2016 | lat | lon |\n+-----+----------+----------+-----+-----+\n| 1   | 10       | 5        | 10  | 10  |\n| 2   | 20       | 20       | 20  | 20  |\n| 3   | 10       | 30       | 20  | 20  |\n| 4   | 10       | 40       | 40  | 40  |\n+-----+----------+----------+-----+-----+",
                "Output": "** \n+----------+\n| tiv_2016 |\n+----------+\n| 45.00    |\n+----------+",
                "Explanation": "** \nThe first record in the table, like the last record, meets both of the two criteria.\nThe tiv_2015 value 10 is the same as the third and fourth records, and its location is unique.\n\nThe second record does not meet any of the two criteria. Its tiv_2015 is not like any other policyholders and its location is the same as the third record, which makes the third record fail, too.\nSo, the result is the sum of tiv_2016 of the first and last record, which is 45."
            }
        ]
    },
    {
        "Title": "Customer Placing the Largest Number of Orders",
        "slug": "customer-placing-the-largest-number-of-orders",
        "description": "Table: `Orders`\n\n\n\n```\n\n+-----------------+----------+\n| Column Name     | Type     |\n+-----------------+----------+\n| order_number    | int      |\n| customer_number | int      |\n+-----------------+----------+\norder_number is the primary key (column with unique values) for this table.\nThis table contains information about the order ID and the customer ID.\n\n```\n\n\u00a0\n\n\nWrite a solution to find the `customer_number` for the customer who has placed **the largest number of orders**.\n\n\nThe test cases are generated so that **exactly one customer** will have placed more orders than any other customer.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nOrders table:\n+--------------+-----------------+\n| order_number | customer_number |\n+--------------+-----------------+\n| 1            | 1               |\n| 2            | 2               |\n| 3            | 3               |\n| 4            | 3               |\n+--------------+-----------------+",
                "Output": "** \n+-----------------+\n| customer_number |\n+-----------------+\n| 3               |\n+-----------------+",
                "Explanation": "** \nThe customer with number 3 has two orders, which is greater than either customer 1 or 2 because each of them only has one order. \nSo the result is customer_number 3."
            }
        ]
    },
    {
        "Title": "Erect the Fence",
        "slug": "erect-the-fence",
        "description": "You are given an array `trees` where `trees[i] = [xi, yi]` represents the location of a tree in the garden.\n\n\nFence the entire garden using the minimum length of rope, as it is expensive. The garden is well-fenced only if **all the trees are enclosed**.\n\n\nReturn *the coordinates of trees that are exactly located on the fence perimeter*. You may return the answer in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Geometry"
        ],
        "examples": [
            {
                "Input": "** trees = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]",
                "Output": "** [[1,1],[2,0],[4,2],[3,3],[2,4]]",
                "Explanation": "** All the trees will be on the perimeter of the fence except the tree at [2, 2], which will be inside the fence."
            },
            {
                "Input": "** trees = [[1,2],[2,2],[4,2]]",
                "Output": "** [[4,2],[2,2],[1,2]]",
                "Explanation": "** The fence forms a line that passes through all the trees."
            }
        ]
    },
    {
        "Title": "N-ary Tree Preorder Traversal",
        "slug": "n-ary-tree-preorder-traversal",
        "description": "Given the `root` of an n-ary tree, return *the preorder traversal of its nodes' values*.\n\n\nNary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Stack",
            "Tree",
            "Depth-First Search"
        ],
        "examples": [
            {
                "Input": "** root = [1,null,3,2,4,null,5,6]",
                "Output": "** [1,3,5,6,2,4]",
                "Explanation": null
            },
            {
                "Input": "** root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
                "Output": "** [1,2,3,6,7,11,14,4,8,12,5,9,13,10]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "N-ary Tree Postorder Traversal",
        "slug": "n-ary-tree-postorder-traversal",
        "description": "Given the `root` of an n-ary tree, return *the postorder traversal of its nodes' values*.\n\n\nNary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Stack",
            "Tree",
            "Depth-First Search"
        ],
        "examples": [
            {
                "Input": "** root = [1,null,3,2,4,null,5,6]",
                "Output": "** [5,6,3,2,4,1]",
                "Explanation": null
            },
            {
                "Input": "** root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
                "Output": "** [2,6,14,11,7,3,12,8,4,13,9,10,5,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Tag Validator",
        "slug": "tag-validator",
        "description": "Given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid.\n\n\nA code snippet is valid if all the following rules hold:\n\n\n1. The code must be wrapped in a **valid closed tag**. Otherwise, the code is invalid.\n2. A **closed tag** (not necessarily valid) has exactly the following format : `<TAG_NAME>TAG_CONTENT</TAG_NAME>`. Among them, `<TAG_NAME>` is the start tag, and `</TAG_NAME>` is the end tag. The TAG\\_NAME in start and end tags should be the same. A closed tag is **valid** if and only if the TAG\\_NAME and TAG\\_CONTENT are valid.\n3. A **valid** `TAG_NAME` only contain **upper-case letters**, and has length in range [1,9]. Otherwise, the `TAG_NAME` is **invalid**.\n4. A **valid** `TAG_CONTENT` may contain other **valid closed tags**, **cdata** and any characters (see note1) **EXCEPT** unmatched `<`, unmatched start and end tag, and unmatched or closed tags with invalid TAG\\_NAME. Otherwise, the `TAG_CONTENT` is **invalid**.\n5. A start tag is unmatched if no end tag exists with the same TAG\\_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.\n6. A `<` is unmatched if you cannot find a subsequent `>`. And when you find a `<` or `</`, all the subsequent characters until the next `>` should be parsed as TAG\\_NAME (not necessarily valid).\n7. The cdata has the following format : `<![CDATA[CDATA_CONTENT]]>`. The range of `CDATA_CONTENT` is defined as the characters between `<![CDATA[` and the **first subsequent** `]]>`.\n8. `CDATA_CONTENT` may contain **any characters**. The function of cdata is to forbid the validator to parse `CDATA_CONTENT`, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as **regular characters**.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** code = \"<DIV>This is the first line <![CDATA[<div>]]></DIV>\"",
                "Output": "** true",
                "Explanation": "** \nThe code is wrapped in a closed tag : <DIV> and </DIV>. \nThe TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. \nAlthough CDATA_CONTENT has an unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as a tag.\nSo TAG_CONTENT is valid, and then the code is valid. Thus return true."
            },
            {
                "Input": "** code = \"<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>\"",
                "Output": "** true",
                "Explanation": "**\nWe first separate the code into : start_tag|tag_content|end_tag.\nstart_tag -> **\"<DIV>\"**\nend_tag -> **\"</DIV>\"**\ntag_content could also be separated into : text1|cdata|text2.\ntext1 -> **\">> ![cdata[]] \"**\ncdata -> **\"<![CDATA[<div>]>]]>\"**, where the CDATA_CONTENT is **\"<div>]>\"**\ntext2 -> **\"]]>>]\"**\nThe reason why start_tag is NOT **\"<DIV>>>\"** is because of the rule 6.\nThe reason why cdata is NOT **\"<![CDATA[<div>]>]]>]]>\"** is because of the rule 7."
            },
            {
                "Input": "** code = \"<A>  <B> </A>   </B>\"",
                "Output": "** false",
                "Explanation": "** Unbalanced. If \"<A>\" is closed, then \"<B>\" must be unmatched, and vice versa."
            }
        ]
    },
    {
        "Title": "Fraction Addition and Subtraction",
        "slug": "fraction-addition-and-subtraction",
        "description": "Given a string `expression` representing an expression of fraction addition and subtraction, return the calculation result in string format.\n\n\nThe final result should be an [irreducible fraction](https://en.wikipedia.org/wiki/Irreducible_fraction). If your final result is an integer, change it to the format of a fraction that has a denominator `1`. So in this case, `2` should be converted to `2/1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "String",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** expression = \"-1/2+1/2\"",
                "Output": "** \"0/1\"",
                "Explanation": null
            },
            {
                "Input": "** expression = \"-1/2+1/2+1/3\"",
                "Output": "** \"1/3\"",
                "Explanation": null
            },
            {
                "Input": "** expression = \"1/3-1/2\"",
                "Output": "** \"-1/6\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Valid Square",
        "slug": "valid-square",
        "description": "Given the coordinates of four points in 2D space `p1`, `p2`, `p3` and `p4`, return `true` *if the four points construct a square*.\n\n\nThe coordinate of a point `pi` is represented as `[xi, yi]`. The input is **not** given in any order.\n\n\nA **valid square** has four equal sides with positive length and four equal angles (90-degree angles).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Geometry"
        ],
        "examples": [
            {
                "Input": "** p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Harmonious Subsequence",
        "slug": "longest-harmonious-subsequence",
        "description": "We define a harmonious array as an array where the difference between its maximum value and its minimum value is **exactly** `1`.\n\n\nGiven an integer array `nums`, return *the length of its longest harmonious subsequence among all its possible subsequences*.\n\n\nA **subsequence** of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sliding Window",
            "Sorting",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,2,2,5,2,3,7]",
                "Output": "** 5",
                "Explanation": "** The longest harmonious subsequence is [3,2,2,2,3]."
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,1,1,1]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Big Countries",
        "slug": "big-countries",
        "description": "Table: `World`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| name        | varchar |\n| continent   | varchar |\n| area        | int     |\n| population  | int     |\n| gdp         | bigint  |\n+-------------+---------+\nname is the primary key (column with unique values) for this table.\nEach row of this table gives information about the name of a country, the continent to which it belongs, its area, the population, and its GDP value.\n\n```\n\n\u00a0\n\n\nA country is **big** if:\n\n\n it has an area of at least\u00a0three million (i.e., `3000000 km2`), or\n it has a population of at least\u00a0twenty-five million (i.e., `25000000`).\n\n\nWrite a solution to find the name, population, and area of the **big countries**.\n\n\nReturn the result table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nWorld table:\n+-------------+-----------+---------+------------+--------------+\n| name        | continent | area    | population | gdp          |\n+-------------+-----------+---------+------------+--------------+\n| Afghanistan | Asia      | 652230  | 25500100   | 20343000000  |\n| Albania     | Europe    | 28748   | 2831741    | 12960000000  |\n| Algeria     | Africa    | 2381741 | 37100000   | 188681000000 |\n| Andorra     | Europe    | 468     | 78115      | 3712000000   |\n| Angola      | Africa    | 1246700 | 20609294   | 100990000000 |\n+-------------+-----------+---------+------------+--------------+",
                "Output": "** \n+-------------+------------+---------+\n| name        | population | area    |\n+-------------+------------+---------+\n| Afghanistan | 25500100   | 652230  |\n| Algeria     | 37100000   | 2381741 |\n+-------------+------------+---------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Classes More Than 5 Students",
        "slug": "classes-more-than-5-students",
        "description": "Table: `Courses`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| student     | varchar |\n| class       | varchar |\n+-------------+---------+\n(student, class) is the primary key (combination of columns with unique values) for this table.\nEach row of this table indicates the name of a student and the class in which they are enrolled.\n\n```\n\n\u00a0\n\n\nWrite a solution to find all the classes that have **at least five students**.\n\n\nReturn the result table in **any order**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nCourses table:\n+---------+----------+\n| student | class    |\n+---------+----------+\n| A       | Math     |\n| B       | English  |\n| C       | Math     |\n| D       | Biology  |\n| E       | Math     |\n| F       | Computer |\n| G       | Math     |\n| H       | Math     |\n| I       | Math     |\n+---------+----------+",
                "Output": "** \n+---------+\n| class   |\n+---------+\n| Math    |\n+---------+",
                "Explanation": "** \n- Math has 6 students, so we include it.\n- English has 1 student, so we do not include it.\n- Biology has 1 student, so we do not include it.\n- Computer has 1 student, so we do not include it."
            }
        ]
    },
    {
        "Title": "Range Addition II",
        "slug": "range-addition-ii",
        "description": "You are given an `m x n` matrix `M` initialized with all `0`'s and an array of operations `ops`, where `ops[i] = [ai, bi]` means `M[x][y]` should be incremented by one for all `0 <= x < ai` and `0 <= y < bi`.\n\n\nCount and return *the number of maximum integers in the matrix after performing all the operations*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math"
        ],
        "examples": [
            {
                "Input": "** m = 3, n = 3, ops = [[2,2],[3,3]]",
                "Output": "** 4",
                "Explanation": "** The maximum integer in M is 2, and there are four of it in M. So return 4."
            }
        ]
    },
    {
        "Title": "Minimum Index Sum of Two Lists",
        "slug": "minimum-index-sum-of-two-lists",
        "description": "Given two arrays of strings `list1` and `list2`, find the **common strings with the least index sum**.\n\n\nA **common string** is a string that appeared in both `list1` and `list2`.\n\n\nA **common string with the least index sum** is a common string such that if it appeared at `list1[i]` and `list2[j]` then `i + j` should be the minimum value among all the other **common strings**.\n\n\nReturn *all the **common strings with the least index sum***. Return the answer in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"Piatti\",\"The Grill at Torrey Pines\",\"Hungry Hunter Steakhouse\",\"Shogun\"]",
                "Output": "** [\"Shogun\"]",
                "Explanation": "** The only common string is \"Shogun\"."
            },
            {
                "Input": "** list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Shogun\",\"Burger King\"]",
                "Output": "** [\"Shogun\"]",
                "Explanation": "** The common string with the least index sum is \"Shogun\" with index sum = (0 + 1) = 1."
            },
            {
                "Input": "** list1 = [\"happy\",\"sad\",\"good\"], list2 = [\"sad\",\"happy\",\"good\"]",
                "Output": "** [\"sad\",\"happy\"]",
                "Explanation": "** There are three common strings:\n\"happy\" with index sum = (0 + 1) = 1.\n\"sad\" with index sum = (1 + 0) = 1.\n\"good\" with index sum = (2 + 2) = 4.\nThe strings with the least index sum are \"sad\" and \"happy\"."
            }
        ]
    },
    {
        "Title": "Non-negative Integers without Consecutive Ones",
        "slug": "non-negative-integers-without-consecutive-ones",
        "description": "Given a positive integer `n`, return the number of the integers in the range `[0, n]` whose binary representations **do not** contain consecutive ones.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** n = 5",
                "Output": "** 5",
                "Explanation": "**\nHere are the non-negative integers <= 5 with their corresponding binary representations:\n0 : 0\n1 : 1\n2 : 10\n3 : 11\n4 : 100\n5 : 101\nAmong them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule."
            },
            {
                "Input": "** n = 1",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** n = 2",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Human Traffic of Stadium",
        "slug": "human-traffic-of-stadium",
        "description": "Table: `Stadium`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| visit_date    | date    |\n| people        | int     |\n+---------------+---------+\nvisit_date is the column with unique values for this table.\nEach row of this table contains the visit date and visit id to the stadium with the number of people during the visit.\nAs the id increases, the date increases as well.\n\n```\n\n\u00a0\n\n\nWrite a solution to display the records with three or more rows with **consecutive** `id`'s, and the number of people is greater than or equal to 100 for each.\n\n\nReturn the result table ordered by `visit_date` in **ascending order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nStadium table:\n+------+------------+-----------+\n| id   | visit_date | people    |\n+------+------------+-----------+\n| 1    | 2017-01-01 | 10        |\n| 2    | 2017-01-02 | 109       |\n| 3    | 2017-01-03 | 150       |\n| 4    | 2017-01-04 | 99        |\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-09 | 188       |\n+------+------------+-----------+",
                "Output": "** \n+------+------------+-----------+\n| id   | visit_date | people    |\n+------+------------+-----------+\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-09 | 188       |\n+------+------------+-----------+",
                "Explanation": "** \nThe four rows with ids 5, 6, 7, and 8 have consecutive ids and each of them has >= 100 people attended. Note that row 8 was included even though the visit_date was not the next day after row 7.\nThe rows with ids 2 and 3 are not included because we need at least three consecutive ids."
            }
        ]
    },
    {
        "Title": "Friend Requests II: Who Has the Most Friends",
        "slug": "friend-requests-ii-who-has-the-most-friends",
        "description": "Table: `RequestAccepted`\n\n\n\n```\n\n+----------------+---------+\n| Column Name    | Type    |\n+----------------+---------+\n| requester_id   | int     |\n| accepter_id    | int     |\n| accept_date    | date    |\n+----------------+---------+\n(requester_id, accepter_id) is the primary key (combination of columns with unique values) for this table.\nThis table contains the ID of the user who sent the request, the ID of the user who received the request, and the date when the request was accepted.\n\n```\n\n\u00a0\n\n\nWrite a solution to find the people who have the most friends and the most friends number.\n\n\nThe test cases are generated so that only one person has the most friends.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nRequestAccepted table:\n+--------------+-------------+-------------+\n| requester_id | accepter_id | accept_date |\n+--------------+-------------+-------------+\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n+--------------+-------------+-------------+",
                "Output": "** \n+----+-----+\n| id | num |\n+----+-----+\n| 3  | 3   |\n+----+-----+",
                "Explanation": "** \nThe person with id 3 is a friend of people 1, 2, and 4, so he has three friends in total, which is the most number than any others."
            }
        ]
    },
    {
        "Title": "Can Place Flowers",
        "slug": "can-place-flowers",
        "description": "You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in **adjacent** plots.\n\n\nGiven an integer array `flowerbed` containing `0`'s and `1`'s, where `0` means empty and `1` means not empty, and an integer `n`, return `true`\u00a0*if* `n` *new flowers can be planted in the* `flowerbed` *without violating the no-adjacent-flowers rule and* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** flowerbed = [1,0,0,0,1], n = 1",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** flowerbed = [1,0,0,0,1], n = 2",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Construct String from Binary Tree",
        "slug": "construct-string-from-binary-tree",
        "description": "Given the `root` node of a binary tree, your task is to create a string representation of the tree following a specific set of formatting rules. The representation should be based on a preorder traversal of the binary tree and must adhere to the following guidelines:\n\n\n **Node Representation**: Each node in the tree should be represented by its integer value.\n **Parentheses for Children**: If a node has at least one child (either left or right), its children should be represented inside parentheses. Specifically:\n\n\n\t+ If a node has a left child, the value of the left child should be enclosed in parentheses immediately following the node's value.\n\t+ If a node has a right child, the value of the right child should also be enclosed in parentheses. The parentheses for the right child should follow those of the left child.\n **Omitting Empty Parentheses**: Any empty parentheses pairs (i.e., `()`) should be omitted from the final string representation of the tree, with one specific exception: when a node has a right child but no left child. In such cases, you must include an empty pair of parentheses to indicate the absence of the left child. This ensures that the one-to-one mapping between the string representation and the original binary tree structure is maintained.\n\n\nIn summary, empty parentheses pairs should be omitted when a node has only a left child or no children. However, when a node has a right child but no left child, an empty pair of parentheses must precede the representation of the right child to reflect the tree's structure accurately.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2,3,4]",
                "Output": "** \"1(2(4))(3)\"",
                "Explanation": "** Originally, it needs to be \"1(2(4)())(3()())\", but you need to omit all the empty parenthesis pairs. And it will be \"1(2(4))(3)\"."
            },
            {
                "Input": "** root = [1,2,3,null,4]",
                "Output": "** \"1(2()(4))(3)\"",
                "Explanation": "** Almost the same as the first example, except the () after 2 is necessary to indicate the absence of a left child for 2 and the presence of a right child."
            }
        ]
    },
    {
        "Title": "Sales Person",
        "slug": "sales-person",
        "description": "Table: `SalesPerson`\n\n\n\n```\n\n+-----------------+---------+\n| Column Name     | Type    |\n+-----------------+---------+\n| sales_id        | int     |\n| name            | varchar |\n| salary          | int     |\n| commission_rate | int     |\n| hire_date       | date    |\n+-----------------+---------+\nsales_id is the primary key (column with unique values) for this table.\nEach row of this table indicates the name and the ID of a salesperson alongside their salary, commission rate, and hire date.\n\n```\n\n\u00a0\n\n\nTable: `Company`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| com_id      | int     |\n| name        | varchar |\n| city        | varchar |\n+-------------+---------+\ncom_id is the primary key (column with unique values) for this table.\nEach row of this table indicates the name and the ID of a company and the city in which the company is located.\n\n```\n\n\u00a0\n\n\nTable: `Orders`\n\n\n\n```\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| order_id    | int  |\n| order_date  | date |\n| com_id      | int  |\n| sales_id    | int  |\n| amount      | int  |\n+-------------+------+\norder_id is the primary key (column with unique values) for this table.\ncom_id is a foreign key (reference column) to com_id from the Company table.\nsales_id is a foreign key (reference column) to sales_id from the SalesPerson table.\nEach row of this table contains information about one order. This includes the ID of the company, the ID of the salesperson, the date of the order, and the amount paid.\n\n```\n\n\u00a0\n\n\nWrite a solution to find the names of all the salespersons who did not have any orders related to the company with the name **\"RED\"**.\n\n\nReturn the result table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nSalesPerson table:\n+----------+------+--------+-----------------+------------+\n| sales_id | name | salary | commission_rate | hire_date  |\n+----------+------+--------+-----------------+------------+\n| 1        | John | 100000 | 6               | 4/1/2006   |\n| 2        | Amy  | 12000  | 5               | 5/1/2010   |\n| 3        | Mark | 65000  | 12              | 12/25/2008 |\n| 4        | Pam  | 25000  | 25              | 1/1/2005   |\n| 5        | Alex | 5000   | 10              | 2/3/2007   |\n+----------+------+--------+-----------------+------------+\nCompany table:\n+--------+--------+----------+\n| com_id | name   | city     |\n+--------+--------+----------+\n| 1      | RED    | Boston   |\n| 2      | ORANGE | New York |\n| 3      | YELLOW | Boston   |\n| 4      | GREEN  | Austin   |\n+--------+--------+----------+\nOrders table:\n+----------+------------+--------+----------+--------+\n| order_id | order_date | com_id | sales_id | amount |\n+----------+------------+--------+----------+--------+\n| 1        | 1/1/2014   | 3      | 4        | 10000  |\n| 2        | 2/1/2014   | 4      | 5        | 5000   |\n| 3        | 3/1/2014   | 1      | 1        | 50000  |\n| 4        | 4/1/2014   | 1      | 4        | 25000  |\n+----------+------------+--------+----------+--------+",
                "Output": "** \n+------+\n| name |\n+------+\n| Amy  |\n| Mark |\n| Alex |\n+------+",
                "Explanation": "** \nAccording to orders 3 and 4 in the Orders table, it is easy to tell that only salesperson John and Pam have sales to company RED, so we report all the other names in the table salesperson."
            }
        ]
    },
    {
        "Title": "Tree Node",
        "slug": "tree-node",
        "description": "Table: `Tree`\n\n\n\n```\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| p_id        | int  |\n+-------------+------+\nid is the column with unique values for this table.\nEach row of this table contains information about the id of a node and the id of its parent node in a tree.\nThe given structure is always a valid tree.\n\n```\n\n\u00a0\n\n\nEach node in the tree can be one of three types:\n\n\n **\"Leaf\"**: if the node is a leaf node.\n **\"Root\"**: if the node is the root of the tree.\n **\"Inner\"**: If the node is neither a leaf node nor a root node.\n\n\nWrite a solution to report the type of each node in the tree.\n\n\nReturn the result table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nTree table:\n+----+------+\n| id | p_id |\n+----+------+\n| 1  | null |\n| 2  | 1    |\n| 3  | 1    |\n| 4  | 2    |\n| 5  | 2    |\n+----+------+",
                "Output": "** \n+----+-------+\n| id | type  |\n+----+-------+\n| 1  | Root  |\n| 2  | Inner |\n| 3  | Leaf  |\n| 4  | Leaf  |\n| 5  | Leaf  |\n+----+-------+",
                "Explanation": "** \nNode 1 is the root node because its parent node is null and it has child nodes 2 and 3.\nNode 2 is an inner node because it has parent node 1 and child node 4 and 5.\nNodes 3, 4, and 5 are leaf nodes because they have parent nodes and they do not have child nodes."
            },
            {
                "Input": "** \nTree table:\n+----+------+\n| id | p_id |\n+----+------+\n| 1  | null |\n+----+------+",
                "Output": "** \n+----+-------+\n| id | type  |\n+----+-------+\n| 1  | Root  |\n+----+-------+",
                "Explanation": "** If there is only one node on the tree, you only need to output its root attributes."
            }
        ]
    },
    {
        "Title": "Find Duplicate File in System",
        "slug": "find-duplicate-file-in-system",
        "description": "Given a list `paths` of directory info, including the directory path, and all the files with contents in this directory, return *all the duplicate files in the file system in terms of their paths*. You may return the answer in **any order**.\n\n\nA group of duplicate files consists of at least two files that have the same content.\n\n\nA single directory info string in the input list has the following format:\n\n\n `\"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)\"`\n\n\nIt means there are `n` files `(f1.txt, f2.txt ... fn.txt)` with content `(f1_content, f2_content ... fn_content)` respectively in the directory \"`root/d1/d2/.../dm\"`. Note that `n >= 1` and `m >= 0`. If `m = 0`, it means the directory is just the root directory.\n\n\nThe output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:\n\n\n `\"directory_path/file_name.txt\"`\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\",\"root 4.txt(efgh)\"]",
                "Output": "** [[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]",
                "Explanation": null
            },
            {
                "Input": "** paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\"]",
                "Output": "** [[\"root/a/2.txt\",\"root/c/d/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Triangle Judgement",
        "slug": "triangle-judgement",
        "description": "Table: `Triangle`\n\n\n\n```\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| x           | int  |\n| y           | int  |\n| z           | int  |\n+-------------+------+\nIn SQL, (x, y, z) is the primary key column for this table.\nEach row of this table contains the lengths of three line segments.\n\n```\n\n\u00a0\n\n\nReport for every three line segments whether they can form a triangle.\n\n\nReturn the result table in **any order**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nTriangle table:\n+----+----+----+\n| x  | y  | z  |\n+----+----+----+\n| 13 | 15 | 30 |\n| 10 | 20 | 15 |\n+----+----+----+",
                "Output": "** \n+----+----+----+----------+\n| x  | y  | z  | triangle |\n+----+----+----+----------+\n| 13 | 15 | 30 | No       |\n| 10 | 20 | 15 | Yes      |\n+----+----+----+----------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Valid Triangle Number",
        "slug": "valid-triangle-number",
        "description": "Given an integer array `nums`, return *the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [2,2,3,4]",
                "Output": "** 3",
                "Explanation": "** Valid combinations are: \n2,3,4 (using the first 2)\n2,3,4 (using the second 2)\n2,2,3"
            },
            {
                "Input": "** nums = [4,2,3,4]",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Merge Two Binary Trees",
        "slug": "merge-two-binary-trees",
        "description": "You are given two binary trees `root1` and `root2`.\n\n\nImagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.\n\n\nReturn *the merged tree*.\n\n\nNote:** The merging process must start from the root nodes of both trees.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]",
                "Output": "** [3,4,5,5,4,null,7]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Biggest Single Number",
        "slug": "biggest-single-number",
        "description": "Table: `MyNumbers`\n\n\n\n```\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| num         | int  |\n+-------------+------+\nThis table may contain duplicates (In other words, there is no primary key for this table in SQL).\nEach row of this table contains an integer.\n\n```\n\n\u00a0\n\n\nA **single number** is a number that appeared only once in the `MyNumbers` table.\n\n\nFind the largest **single number**. If there is no **single number**, report `null`.\n\n\nThe result format is in the following example.\n\n\n \n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nMyNumbers table:\n+-----+\n| num |\n+-----+\n| 8   |\n| 8   |\n| 3   |\n| 3   |\n| 1   |\n| 4   |\n| 5   |\n| 6   |\n+-----+",
                "Output": "** \n+-----+\n| num |\n+-----+\n| 6   |\n+-----+",
                "Explanation": "** The single numbers are 1, 4, 5, and 6.\nSince 6 is the largest single number, we return it."
            },
            {
                "Input": "** \nMyNumbers table:\n+-----+\n| num |\n+-----+\n| 8   |\n| 8   |\n| 7   |\n| 7   |\n| 3   |\n| 3   |\n| 3   |\n+-----+",
                "Output": "** \n+------+\n| num  |\n+------+\n| null |\n+------+",
                "Explanation": "** There are no single numbers in the input table so we return null."
            }
        ]
    },
    {
        "Title": "Not Boring Movies",
        "slug": "not-boring-movies",
        "description": "Table: `Cinema`\n\n\n\n```\n\n+----------------+----------+\n| Column Name    | Type     |\n+----------------+----------+\n| id             | int      |\n| movie          | varchar  |\n| description    | varchar  |\n| rating         | float    |\n+----------------+----------+\nid is the primary key (column with unique values) for this table.\nEach row contains information about the name of a movie, its genre, and its rating.\nrating is a 2 decimal places float in the range [0, 10]\n\n```\n\n\u00a0\n\n\nWrite a solution to report the movies with an odd-numbered ID and a description that is not `\"boring\"`.\n\n\nReturn the result table ordered by `rating` **in descending order**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nCinema table:\n+----+------------+-------------+--------+\n| id | movie      | description | rating |\n+----+------------+-------------+--------+\n| 1  | War        | great 3D    | 8.9    |\n| 2  | Science    | fiction     | 8.5    |\n| 3  | irish      | boring      | 6.2    |\n| 4  | Ice song   | Fantacy     | 8.6    |\n| 5  | House card | Interesting | 9.1    |\n+----+------------+-------------+--------+",
                "Output": "** \n+----+------------+-------------+--------+\n| id | movie      | description | rating |\n+----+------------+-------------+--------+\n| 5  | House card | Interesting | 9.1    |\n| 1  | War        | great 3D    | 8.9    |\n+----+------------+-------------+--------+",
                "Explanation": "** \nWe have three movies with odd-numbered IDs: 1, 3, and 5. The movie with ID = 3 is boring so we do not include it in the answer."
            }
        ]
    },
    {
        "Title": "Task Scheduler",
        "slug": "task-scheduler",
        "description": "You are given an array of CPU `tasks`, each represented by letters\u00a0A\u00a0to Z, and a cooling time, `n`. Each cycle or interval allows the completion of one task. Tasks can be completed in any order, but there's a constraint: **identical** tasks must be separated by at least `n` intervals due to cooling time.\n\n\n\u200bReturn the *minimum number of intervals* required to complete all tasks.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2",
                "Output": "** 8",
                "Explanation": "** A possible sequence is: A -> B -> idle -> A -> B -> idle -> A -> B.\n\n\nAfter completing task A, you must wait two cycles before doing A again. The same applies to task B. In the 3rd interval, neither A nor B can be done, so you idle. By the 4th cycle, you can do A again as 2 intervals have passed."
            },
            {
                "Input": "** tasks = [\"A\",\"C\",\"A\",\"B\",\"D\",\"B\"], n = 1",
                "Output": "** 6",
                "Explanation": "** A possible sequence is: A -> B -> C -> D -> A -> B.\n\n\nWith a cooling interval of 1, you can repeat a task after just one other task."
            },
            {
                "Input": "** tasks = [\"A\",\"A\",\"A\", \"B\",\"B\",\"B\"], n = 3",
                "Output": "** 10",
                "Explanation": "** A possible sequence is: A -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B.\n\n\nThere are only two types of tasks, A and B, which need to be separated by 3 intervals. This leads to idling twice between repetitions of these tasks.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= tasks.length <= 104`\n* `tasks[i]` is an uppercase English letter.\n* `0 <= n <= 100`\n\n\nHints:\n    0. There are many different solutions for this problem, including a greedy algorithm.\n    1. For every cycle, find the most frequent letter that can be placed in this cycle. After placing, decrease the frequency of that letter by one.\nSimilarQuestions: [358, 767, 1953, 2323, 2365]"
            }
        ]
    },
    {
        "Title": "Design Circular Queue",
        "slug": "design-circular-queue",
        "description": "Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle, and the last position is connected back to the first position to make a circle. It is also called \"Ring Buffer\".\n\n\nOne of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.\n\n\nImplement the `MyCircularQueue` class:\n\n\n `MyCircularQueue(k)` Initializes the object with the size of the queue to be `k`.\n `int Front()` Gets the front item from the queue. If the queue is empty, return `-1`.\n `int Rear()` Gets the last item from the queue. If the queue is empty, return `-1`.\n `boolean enQueue(int value)` Inserts an element into the circular queue. Return `true` if the operation is successful.\n `boolean deQueue()` Deletes an element from the circular queue. Return `true` if the operation is successful.\n `boolean isEmpty()` Checks whether the circular queue is empty or not.\n `boolean isFull()` Checks whether the circular queue is full or not.\n\n\nYou must solve the problem without using the built-in queue data structure in your programming language.\u00a0\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Linked List",
            "Design",
            "Queue"
        ],
        "examples": [
            {
                "Input": "[\"MyCircularQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"Rear\", \"isFull\", \"deQueue\", \"enQueue\", \"Rear\"]\n[[3], [1], [2], [3], [4], [], [], [], [4], []]",
                "Output": "[null, true, true, true, false, 3, true, true, true, 4]",
                "Explanation": "MyCircularQueue myCircularQueue = new MyCircularQueue(3);\nmyCircularQueue.enQueue(1); // return True\nmyCircularQueue.enQueue(2); // return True\nmyCircularQueue.enQueue(3); // return True\nmyCircularQueue.enQueue(4); // return False\nmyCircularQueue.Rear();     // return 3\nmyCircularQueue.isFull();   // return True\nmyCircularQueue.deQueue();  // return True\nmyCircularQueue.enQueue(4); // return True\nmyCircularQueue.Rear();     // return 4"
            }
        ]
    },
    {
        "Title": "Add One Row to Tree",
        "slug": "add-one-row-to-tree",
        "description": "Given the `root` of a binary tree and two integers `val` and `depth`, add a row of nodes with value `val` at the given depth `depth`.\n\n\nNote that the `root` node is at depth `1`.\n\n\nThe adding rule is:\n\n\n Given the integer `depth`, for each not null tree node `cur` at the depth `depth - 1`, create two tree nodes with value `val` as `cur`'s left subtree root and right subtree root.\n `cur`'s original left subtree should be the left subtree of the new left subtree root.\n `cur`'s original right subtree should be the right subtree of the new right subtree root.\n If `depth == 1` that means there is no depth `depth - 1` at all, then create a tree node with value `val` as the new root of the whole original tree, and the original tree is the new root's left subtree.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [4,2,6,3,1,5], val = 1, depth = 2",
                "Output": "** [4,1,1,2,null,null,6,3,1,5]",
                "Explanation": null
            },
            {
                "Input": "** root = [4,2,null,3,1], val = 1, depth = 3",
                "Output": "** [4,2,null,1,1,3,null,null,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Exchange Seats",
        "slug": "exchange-seats",
        "description": "Table: `Seat`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| student     | varchar |\n+-------------+---------+\nid is the primary key (unique value) column for this table.\nEach row of this table indicates the name and the ID of a student.\nid is a continuous increment.\n\n```\n\n\u00a0\n\n\nWrite a solution to swap the seat id of every two consecutive students. If the number of students is odd, the id of the last student is not swapped.\n\n\nReturn the result table ordered by `id` **in ascending order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nSeat table:\n+----+---------+\n| id | student |\n+----+---------+\n| 1  | Abbot   |\n| 2  | Doris   |\n| 3  | Emerson |\n| 4  | Green   |\n| 5  | Jeames  |\n+----+---------+",
                "Output": "** \n+----+---------+\n| id | student |\n+----+---------+\n| 1  | Doris   |\n| 2  | Abbot   |\n| 3  | Green   |\n| 4  | Emerson |\n| 5  | Jeames  |\n+----+---------+",
                "Explanation": "** \nNote that if the number of students is odd, there is no need to change the last one's seat."
            }
        ]
    },
    {
        "Title": "Swap Salary",
        "slug": "swap-salary",
        "description": "Table: `Salary`\n\n\n\n```\n\n+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| id          | int      |\n| name        | varchar  |\n| sex         | ENUM     |\n| salary      | int      |\n+-------------+----------+\nid is the primary key (column with unique values) for this table.\nThe sex column is ENUM (category) value of type ('m', 'f').\nThe table contains information about an employee.\n\n```\n\n\u00a0\n\n\nWrite a solution to swap all `'f'` and `'m'` values (i.e., change all `'f'` values to `'m'` and vice versa) with a **single update statement** and no intermediate temporary tables.\n\n\nNote that you must write a single update statement, **do not** write any select statement for this problem.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nSalary table:\n+----+------+-----+--------+\n| id | name | sex | salary |\n+----+------+-----+--------+\n| 1  | A    | m   | 2500   |\n| 2  | B    | f   | 1500   |\n| 3  | C    | m   | 5500   |\n| 4  | D    | f   | 500    |\n+----+------+-----+--------+",
                "Output": "** \n+----+------+-----+--------+\n| id | name | sex | salary |\n+----+------+-----+--------+\n| 1  | A    | f   | 2500   |\n| 2  | B    | m   | 1500   |\n| 3  | C    | f   | 5500   |\n| 4  | D    | m   | 500    |\n+----+------+-----+--------+",
                "Explanation": "** \n(1, A) and (3, C) were changed from 'm' to 'f'.\n(2, B) and (4, D) were changed from 'f' to 'm'."
            }
        ]
    },
    {
        "Title": "Maximum Product of Three Numbers",
        "slug": "maximum-product-of-three-numbers",
        "description": "Given an integer array `nums`, *find three numbers whose product is maximum and return the maximum product*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 6",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 24",
                "Explanation": null
            },
            {
                "Input": "** nums = [-1,-2,-3]",
                "Output": "** -6",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "K Inverse Pairs Array",
        "slug": "k-inverse-pairs-array",
        "description": "For an integer array `nums`, an **inverse pair** is a pair of integers `[i, j]` where `0 <= i < j < nums.length` and `nums[i] > nums[j]`.\n\n\nGiven two integers n and k, return the number of different arrays consisting of numbers from `1` to `n` such that there are exactly `k` **inverse pairs**. Since the answer can be huge, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** n = 3, k = 0",
                "Output": "** 1",
                "Explanation": "** Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pairs."
            },
            {
                "Input": "** n = 3, k = 1",
                "Output": "** 2",
                "Explanation": "** The array [1,3,2] and [2,1,3] have exactly 1 inverse pair."
            }
        ]
    },
    {
        "Title": "Course Schedule III",
        "slug": "course-schedule-iii",
        "description": "There are `n` different online courses numbered from `1` to `n`. You are given an array `courses` where `courses[i] = [durationi, lastDayi]` indicate that the `ith` course should be taken **continuously** for `durationi` days and must be finished before or on `lastDayi`.\n\n\nYou will start on the `1st` day and you cannot take two or more courses simultaneously.\n\n\nReturn *the maximum number of courses that you can take*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** courses = [[100,200],[200,1300],[1000,1250],[2000,3200]]",
                "Output": "** 3\nExplanation: \nThere are totally 4 courses, but you can take 3 courses at most:\nFirst, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day.\nSecond, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day. \nThird, take the 2nd course, it costs 200 days so you will finish it on the 1300th day. \nThe 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date.",
                "Explanation": null
            },
            {
                "Input": "** courses = [[1,2]]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** courses = [[3,2],[4,3]]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Smallest Range Covering Elements from K Lists",
        "slug": "smallest-range-covering-elements-from-k-lists",
        "description": "You have `k` lists of sorted integers in **non-decreasing\u00a0order**. Find the **smallest** range that includes at least one number from each of the `k` lists.\n\n\nWe define the range `[a, b]` is smaller than range `[c, d]` if `b - a < d - c` **or** `a < c` if `b - a == d - c`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy",
            "Sliding Window",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]",
                "Output": "** [20,24]",
                "Explanation": "** \nList 1: [4, 10, 15, 24,26], 24 is in range [20,24].\nList 2: [0, 9, 12, 20], 20 is in range [20,24].\nList 3: [5, 18, 22, 30], 22 is in range [20,24]."
            },
            {
                "Input": "** nums = [[1,2,3],[1,2,3],[1,2,3]]",
                "Output": "** [1,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sum of Square Numbers",
        "slug": "sum-of-square-numbers",
        "description": "Given a non-negative integer `c`, decide whether there're two integers `a` and `b` such that `a2 + b2 = c`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Two Pointers",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** c = 5",
                "Output": "** true",
                "Explanation": "** 1 * 1 + 2 * 2 = 5"
            },
            {
                "Input": "** c = 3",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Exclusive Time of Functions",
        "slug": "exclusive-time-of-functions",
        "description": "On a **single-threaded** CPU, we execute a program containing `n` functions. Each function has a unique ID between `0` and `n-1`.\n\n\nFunction calls are **stored in a [call stack](https://en.wikipedia.org/wiki/Call_stack)**: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is **the current function being executed**. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.\n\n\nYou are given a list `logs`, where `logs[i]` represents the `ith` log message formatted as a string `\"{function_id}:{\"start\" | \"end\"}:{timestamp}\"`. For example, `\"0:start:3\"` means a function call with function ID `0` **started at the beginning** of timestamp `3`, and `\"1:end:2\"` means a function call with function ID `1` **ended at the end** of timestamp `2`. Note that a function can be called **multiple times, possibly recursively**.\n\n\nA function's **exclusive time** is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for `2` time units and another call executing for `1` time unit, the **exclusive time** is `2 + 1 = 3`.\n\n\nReturn *the **exclusive time** of each function in an array, where the value at the* `ith` *index represents the exclusive time for the function with ID* `i`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** n = 2, logs = [\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"]",
                "Output": "** [3,4]",
                "Explanation": "**\nFunction 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1.\nFunction 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5.\nFunction 0 resumes execution at the beginning of time 6 and executes for 1 unit of time.\nSo function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing."
            }
        ]
    },
    {
        "Title": "Average of Levels in Binary Tree",
        "slug": "average-of-levels-in-binary-tree",
        "description": "Given the `root` of a binary tree, return *the average value of the nodes on each level in the form of an array*. Answers within `10-5` of the actual answer will be accepted.\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [3,9,20,null,null,15,7]",
                "Output": "** [3.00000,14.50000,11.00000]\nExplanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.\nHence return [3, 14.5, 11].",
                "Explanation": null
            },
            {
                "Input": "** root = [3,9,20,15,7]",
                "Output": "** [3.00000,14.50000,11.00000]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Shopping Offers",
        "slug": "shopping-offers",
        "description": "In LeetCode Store, there are `n` items to sell. Each item has a price. However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.\n\n\nYou are given an integer array `price` where `price[i]` is the price of the `ith` item, and an integer array `needs` where `needs[i]` is the number of pieces of the `ith` item you want to buy.\n\n\nYou are also given an array `special` where `special[i]` is of size `n + 1` where `special[i][j]` is the number of pieces of the `jth` item in the `ith` offer and `special[i][n]` (i.e., the last integer in the array) is the price of the `ith` offer.\n\n\nReturn *the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers*. You are not allowed to buy more items than you want, even if that would lower the overall price. You could use any of the special offers as many times as you want.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Backtracking",
            "Bit Manipulation",
            "Memoization",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]",
                "Output": "** 14",
                "Explanation": "** There are two kinds of items, A and B. Their prices are $2 and $5 respectively. \nIn special offer 1, you can pay $5 for 3A and 0B\nIn special offer 2, you can pay $10 for 1A and 2B. \nYou need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A."
            },
            {
                "Input": "** price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]",
                "Output": "** 11",
                "Explanation": "** The price of A is $2, and $3 for B, $4 for C. \nYou may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. \nYou need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. \nYou cannot add more items, though only $9 for 2A ,2B and 1C."
            }
        ]
    },
    {
        "Title": "Decode Ways II",
        "slug": "decode-ways-ii",
        "description": "A message containing letters from `A-Z` can be **encoded** into numbers using the following mapping:\n\n\n\n```\n\n'A' -> \"1\"\n'B' -> \"2\"\n...\n'Z' -> \"26\"\n\n```\n\nTo **decode** an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `\"11106\"` can be mapped into:\n\n\n `\"AAJF\"` with the grouping `(1 1 10 6)`\n `\"KJF\"` with the grouping `(11 10 6)`\n\n\nNote that the grouping `(1 11 06)` is invalid because `\"06\"` cannot be mapped into `'F'` since `\"6\"` is different from `\"06\"`.\n\n\nIn addition** to the mapping above, an encoded message may contain the `'*'` character, which can represent any digit from `'1'` to `'9'` (`'0'` is excluded). For example, the encoded message `\"1*\"` may represent any of the encoded messages `\"11\"`, `\"12\"`, `\"13\"`, `\"14\"`, `\"15\"`, `\"16\"`, `\"17\"`, `\"18\"`, or `\"19\"`. Decoding `\"1*\"` is equivalent to decoding **any** of the encoded messages it can represent.\n\n\nGiven a string `s` consisting of digits and `'*'` characters, return *the **number** of ways to **decode** it*.\n\n\nSince the answer may be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"*\"",
                "Output": "** 9",
                "Explanation": "** The encoded message can represent any of the encoded messages \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", or \"9\".\nEach of these can be decoded to the strings \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", and \"I\" respectively.\nHence, there are a total of 9 ways to decode \"*\"."
            },
            {
                "Input": "** s = \"1*\"",
                "Output": "** 18",
                "Explanation": "** The encoded message can represent any of the encoded messages \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", or \"19\".\nEach of these encoded messages have 2 ways to be decoded (e.g. \"11\" can be decoded to \"AA\" or \"K\").\nHence, there are a total of 9 * 2 = 18 ways to decode \"1*\"."
            },
            {
                "Input": "** s = \"2*\"",
                "Output": "** 15",
                "Explanation": "** The encoded message can represent any of the encoded messages \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", or \"29\".\n\"21\", \"22\", \"23\", \"24\", \"25\", and \"26\" have 2 ways of being decoded, but \"27\", \"28\", and \"29\" only have 1 way.\nHence, there are a total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode \"2*\"."
            }
        ]
    },
    {
        "Title": "Solve the Equation",
        "slug": "solve-the-equation",
        "description": "Solve a given equation and return the value of `'x'` in the form of a string `\"x=#value\"`. The equation contains only `'+'`, `'-'` operation, the variable `'x'` and its coefficient. You should return `\"No solution\"` if there is no solution for the equation, or `\"Infinite solutions\"` if there are infinite solutions for the equation.\n\n\nIf there is exactly one solution for the equation, we ensure that the value of `'x'` is an integer.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "String",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** equation = \"x+5-3+x=6+x-2\"",
                "Output": "** \"x=2\"",
                "Explanation": null
            },
            {
                "Input": "** equation = \"x=x\"",
                "Output": "** \"Infinite solutions\"",
                "Explanation": null
            },
            {
                "Input": "** equation = \"2x=x\"",
                "Output": "** \"x=0\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Design Circular Deque",
        "slug": "design-circular-deque",
        "description": "Design your implementation of the circular double-ended queue (deque).\n\n\nImplement the `MyCircularDeque` class:\n\n\n `MyCircularDeque(int k)` Initializes the deque with a maximum size of `k`.\n `boolean insertFront()` Adds an item at the front of Deque. Returns `true` if the operation is successful, or `false` otherwise.\n `boolean insertLast()` Adds an item at the rear of Deque. Returns `true` if the operation is successful, or `false` otherwise.\n `boolean deleteFront()` Deletes an item from the front of Deque. Returns `true` if the operation is successful, or `false` otherwise.\n `boolean deleteLast()` Deletes an item from the rear of Deque. Returns `true` if the operation is successful, or `false` otherwise.\n `int getFront()` Returns the front item from the Deque. Returns `-1` if the deque is empty.\n `int getRear()` Returns the last item from Deque. Returns `-1` if the deque is empty.\n `boolean isEmpty()` Returns `true` if the deque is empty, or `false` otherwise.\n `boolean isFull()` Returns `true` if the deque is full, or `false` otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Linked List",
            "Design",
            "Queue"
        ],
        "examples": [
            {
                "Input": "[\"MyCircularDeque\", \"insertLast\", \"insertLast\", \"insertFront\", \"insertFront\", \"getRear\", \"isFull\", \"deleteLast\", \"insertFront\", \"getFront\"]\n[[3], [1], [2], [3], [4], [], [], [], [4], []]",
                "Output": "[null, true, true, true, false, 2, true, true, true, 4]",
                "Explanation": "MyCircularDeque myCircularDeque = new MyCircularDeque(3);\nmyCircularDeque.insertLast(1);  // return True\nmyCircularDeque.insertLast(2);  // return True\nmyCircularDeque.insertFront(3); // return True\nmyCircularDeque.insertFront(4); // return False, the queue is full.\nmyCircularDeque.getRear();      // return 2\nmyCircularDeque.isFull();       // return True\nmyCircularDeque.deleteLast();   // return True\nmyCircularDeque.insertFront(4); // return True\nmyCircularDeque.getFront();     // return 4"
            }
        ]
    },
    {
        "Title": "Maximum Average Subarray I",
        "slug": "maximum-average-subarray-i",
        "description": "You are given an integer array `nums` consisting of `n` elements, and an integer `k`.\n\n\nFind a contiguous subarray whose **length is equal to** `k` that has the maximum average value and return *this value*. Any answer with a calculation error less than `10-5` will be accepted.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [1,12,-5,-6,50,3], k = 4",
                "Output": "** 12.75000",
                "Explanation": "** Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75"
            },
            {
                "Input": "** nums = [5], k = 1",
                "Output": "** 5.00000",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Set Mismatch",
        "slug": "set-mismatch",
        "description": "You have a set of integers `s`, which originally contains all the numbers from `1` to `n`. Unfortunately, due to some error, one of the numbers in `s` got duplicated to another number in the set, which results in **repetition of one** number and **loss of another** number.\n\n\nYou are given an integer array `nums` representing the data status of this set after the error.\n\n\nFind the number that occurs twice and the number that is missing and return *them in the form of an array*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Bit Manipulation",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,2,4]",
                "Output": "** [2,3]",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,1]",
                "Output": "** [1,2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Length of Pair Chain",
        "slug": "maximum-length-of-pair-chain",
        "description": "You are given an array of `n` pairs `pairs` where `pairs[i] = [lefti, righti]` and `lefti < righti`.\n\n\nA pair `p2 = [c, d]` **follows** a pair `p1 = [a, b]` if `b < c`. A **chain** of pairs can be formed in this fashion.\n\n\nReturn *the length longest chain which can be formed*.\n\n\nYou do not need to use up all the given intervals. You can select pairs in any order.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** pairs = [[1,2],[2,3],[3,4]]",
                "Output": "** 2",
                "Explanation": "** The longest chain is [1,2] -> [3,4]."
            },
            {
                "Input": "** pairs = [[1,2],[7,8],[4,5]]",
                "Output": "** 3",
                "Explanation": "** The longest chain is [1,2] -> [4,5] -> [7,8]."
            }
        ]
    },
    {
        "Title": "Palindromic Substrings",
        "slug": "palindromic-substrings",
        "description": "Given a string `s`, return *the number of **palindromic substrings** in it*.\n\n\nA string is a **palindrome** when it reads the same backward as forward.\n\n\nA **substring** is a contiguous sequence of characters within the string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Two Pointers",
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"abc\"",
                "Output": "** 3",
                "Explanation": "** Three palindromic strings: \"a\", \"b\", \"c\"."
            },
            {
                "Input": "** s = \"aaa\"",
                "Output": "** 6",
                "Explanation": "** Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\"."
            }
        ]
    },
    {
        "Title": "Replace Words",
        "slug": "replace-words",
        "description": "In English, we have a concept called **root**, which can be followed by some other word to form another longer word - let's call this word **derivative**. For example, when the **root** `\"help\"` is followed by the word `\"ful\"`, we can form a derivative `\"helpful\"`.\n\n\nGiven a `dictionary` consisting of many **roots** and a `sentence` consisting of words separated by spaces, replace all the derivatives in the sentence with the **root** forming it. If a derivative can be replaced by more than one **root**, replace it with the **root** that has **the shortest length**.\n\n\nReturn *the `sentence`* after the replacement.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Trie"
        ],
        "examples": [
            {
                "Input": "** dictionary = [\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"",
                "Output": "** \"the cat was rat by the bat\"",
                "Explanation": null
            },
            {
                "Input": "** dictionary = [\"a\",\"b\",\"c\"], sentence = \"aadsfasf absbs bbab cadsfafs\"",
                "Output": "** \"a a b c\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Dota2 Senate",
        "slug": "dota2-senate",
        "description": "In the world of Dota2, there are two parties: the Radiant and the Dire.\n\n\nThe Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise **one** of the two rights:\n\n\n **Ban one senator's right:** A senator can make another senator lose all his rights in this and all the following rounds.\n **Announce the victory:** If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.\n\n\nGiven a string `senate` representing each senator's party belonging. The character `'R'` and `'D'` represent the Radiant party and the Dire party. Then if there are `n` senators, the size of the given string will be `n`.\n\n\nThe round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.\n\n\nSuppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be `\"Radiant\"` or `\"Dire\"`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Greedy",
            "Queue"
        ],
        "examples": [
            {
                "Input": "** senate = \"RD\"",
                "Output": "** \"Radiant\"",
                "Explanation": "** \nThe first senator comes from Radiant and he can just ban the next senator's right in round 1. \nAnd the second senator can't exercise any rights anymore since his right has been banned. \nAnd in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote."
            },
            {
                "Input": "** senate = \"RDD\"",
                "Output": "** \"Dire\"",
                "Explanation": "** \nThe first senator comes from Radiant and he can just ban the next senator's right in round 1. \nAnd the second senator can't exercise any rights anymore since his right has been banned. \nAnd the third senator comes from Dire and he can ban the first senator's right in round 1. \nAnd in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote."
            }
        ]
    },
    {
        "Title": "2 Keys Keyboard",
        "slug": "2-keys-keyboard",
        "description": "There is only one character `'A'` on the screen of a notepad. You can perform one of two operations on this notepad for each step:\n\n\n Copy All: You can copy all the characters present on the screen (a partial copy is not allowed).\n Paste: You can paste the characters which are copied last time.\n\n\nGiven an integer `n`, return *the minimum number of operations to get the character* `'A'` *exactly* `n` *times on the screen*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** 3",
                "Explanation": "** Initially, we have one character 'A'.\nIn step 1, we use Copy All operation.\nIn step 2, we use Paste operation to get 'AA'.\nIn step 3, we use Paste operation to get 'AAA'."
            },
            {
                "Input": "** n = 1",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Duplicate Subtrees",
        "slug": "find-duplicate-subtrees",
        "description": "Given the `root`\u00a0of a binary tree, return all **duplicate subtrees**.\n\n\nFor each kind of duplicate subtrees, you only need to return the root node of any **one** of them.\n\n\nTwo trees are **duplicate** if they have the **same structure** with the **same node values**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2,3,4,null,2,4,null,null,4]",
                "Output": "** [[2,4],[4]]",
                "Explanation": null
            },
            {
                "Input": "** root = [2,1,1]",
                "Output": "** [[1]]",
                "Explanation": null
            },
            {
                "Input": "** root = [2,2,2,3,null,3,null]",
                "Output": "** [[2,3],[3]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Two Sum IV - Input is a BST",
        "slug": "two-sum-iv-input-is-a-bst",
        "description": "Given the `root` of a binary search tree and an integer `k`, return `true` *if there exist two elements in the BST such that their sum is equal to* `k`, *or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "Two Pointers",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [5,3,6,2,4,null,7], k = 9",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** root = [5,3,6,2,4,null,7], k = 28",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Binary Tree",
        "slug": "maximum-binary-tree",
        "description": "You are given an integer array `nums` with no duplicates. A **maximum binary tree** can be built recursively from `nums` using the following algorithm:\n\n\n1. Create a root node whose value is the maximum value in `nums`.\n2. Recursively build the left subtree on the **subarray prefix** to the **left** of the maximum value.\n3. Recursively build the right subtree on the **subarray suffix** to the **right** of the maximum value.\n\n\nReturn *the **maximum binary tree** built from* `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Divide and Conquer",
            "Stack",
            "Tree",
            "Monotonic Stack",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** nums = [3,2,1,6,0,5]",
                "Output": "** [6,3,5,null,2,0,null,null,1]",
                "Explanation": "** The recursive calls are as follow:\n- The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].\n    - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].\n        - Empty array, so no child.\n        - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].\n            - Empty array, so no child.\n            - Only one element, so child is a node with value 1.\n    - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].\n        - Only one element, so child is a node with value 0.\n        - Empty array, so no child."
            },
            {
                "Input": "** nums = [3,2,1]",
                "Output": "** [3,null,2,null,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Print Binary Tree",
        "slug": "print-binary-tree",
        "description": "Given the `root` of a binary tree, construct a **0-indexed** `m x n` string matrix `res` that represents a **formatted layout** of the tree. The formatted layout matrix should be constructed using the following rules:\n\n\n The **height** of the tree is `height`\u00a0and the number of rows `m` should be equal to `height + 1`.\n The number of columns `n` should be equal to `2height+1 - 1`.\n Place the **root node** in the **middle** of the **top row** (more formally, at location `res[0][(n-1)/2]`).\n For each node that has been placed in the matrix at position `res[r][c]`, place its **left child** at `res[r+1][c-2height-r-1]` and its **right child** at `res[r+1][c+2height-r-1]`.\n Continue this process until all the nodes in the tree have been placed.\n Any empty cells should contain the empty string `\"\"`.\n\n\nReturn *the constructed matrix* `res`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2]",
                "Output": "** \n[[\"\",\"1\",\"\"],\n\u00a0[\"2\",\"\",\"\"]]",
                "Explanation": null
            },
            {
                "Input": "** root = [1,2,3,null,4]",
                "Output": "** \n[[\"\",\"\",\"\",\"1\",\"\",\"\",\"\"],\n\u00a0[\"\",\"2\",\"\",\"\",\"\",\"3\",\"\"],\n\u00a0[\"\",\"\",\"4\",\"\",\"\",\"\",\"\"]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Robot Return to Origin",
        "slug": "robot-return-to-origin",
        "description": "There is a robot starting at the position `(0, 0)`, the origin, on a 2D plane. Given a sequence of its moves, judge if this robot **ends up at** `(0, 0)` after it completes its moves.\n\n\nYou are given a string `moves` that represents the move sequence of the robot where `moves[i]` represents its `ith` move. Valid moves are `'R'` (right), `'L'` (left), `'U'` (up), and `'D'` (down).\n\n\nReturn `true` *if the robot returns to the origin after it finishes all of its moves, or* `false` *otherwise*.\n\n\nNote**: The way that the robot is \"facing\" is irrelevant. `'R'` will always make the robot move to the right once, `'L'` will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** moves = \"UD\"",
                "Output": "** true",
                "Explanation": "The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true."
            },
            {
                "Input": "** moves = \"LL\"",
                "Output": "** false",
                "Explanation": "The robot moves left twice. It ends up two \"moves\" to the left of the origin. We return false because it is not at the origin at the end of its moves."
            }
        ]
    },
    {
        "Title": "Find K Closest Elements",
        "slug": "find-k-closest-elements",
        "description": "Given a **sorted** integer array `arr`, two integers `k` and `x`, return the `k` closest integers to `x` in the array. The result should also be sorted in ascending order.\n\n\nAn integer `a` is closer to `x` than an integer `b` if:\n\n\n `|a - x| < |b - x|`, or\n `|a - x| == |b - x|` and `a < b`\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Sliding Window",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** arr = [1,2,3,4,5], k = 4, x = 3",
                "Output": "** [1,2,3,4]",
                "Explanation": null
            },
            {
                "Input": "** arr = [1,2,3,4,5], k = 4, x = -1",
                "Output": "** [1,2,3,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Split Array into Consecutive Subsequences",
        "slug": "split-array-into-consecutive-subsequences",
        "description": "You are given an integer array `nums` that is **sorted in non-decreasing order**.\n\n\nDetermine if it is possible to split `nums` into **one or more subsequences** such that **both** of the following conditions are true:\n\n\n Each subsequence is a **consecutive increasing sequence** (i.e. each integer is **exactly one** more than the previous integer).\n All subsequences have a length of `3` **or more**.\n\n\nReturn `true` *if you can split* `nums` *according to the above conditions, or* `false` *otherwise*.\n\n\nA **subsequence** of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., `[1,3,5]` is a subsequence of `[1,2,3,4,5]` while `[1,3,2]` is not).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,3,4,5]",
                "Output": "** true",
                "Explanation": "** nums can be split into the following subsequences:\n[**1**,**2**,**3**,3,4,5] --> 1, 2, 3\n[1,2,3,**3**,**4**,**5**] --> 3, 4, 5"
            },
            {
                "Input": "** nums = [1,2,3,3,4,4,5,5]",
                "Output": "** true",
                "Explanation": "** nums can be split into the following subsequences:\n[**1**,**2**,**3**,3,**4**,4,**5**,5] --> 1, 2, 3, 4, 5\n[1,2,3,**3**,4,**4**,5,**5**] --> 3, 4, 5"
            },
            {
                "Input": "** nums = [1,2,3,4,4,5]",
                "Output": "** false",
                "Explanation": "** It is impossible to split nums into consecutive increasing subsequences of length 3 or more."
            }
        ]
    },
    {
        "Title": "Image Smoother",
        "slug": "image-smoother",
        "description": "An **image smoother** is a filter of the size `3 x 3` that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).\n\n\n![](https://assets.leetcode.com/uploads/2021/05/03/smoother-grid.jpg)\nGiven an `m x n` integer matrix `img` representing the grayscale of an image, return *the image after applying the smoother on each cell of it*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** img = [[1,1,1],[1,0,1],[1,1,1]]",
                "Output": "** [[0,0,0],[0,0,0],[0,0,0]]",
                "Explanation": "**\nFor the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\nFor the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\nFor the point (1,1): floor(8/9) = floor(0.88888889) = 0"
            },
            {
                "Input": "** img = [[100,200,100],[200,50,200],[100,200,100]]",
                "Output": "** [[137,141,137],[141,138,141],[137,141,137]]",
                "Explanation": "**\nFor the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137\nFor the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141\nFor the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138"
            }
        ]
    },
    {
        "Title": "Maximum Width of Binary Tree",
        "slug": "maximum-width-of-binary-tree",
        "description": "Given the `root` of a binary tree, return *the **maximum width** of the given tree*.\n\n\nThe **maximum width** of a tree is the maximum **width** among all levels.\n\n\nThe **width** of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.\n\n\nIt is **guaranteed** that the answer will in the range of a **32-bit** signed integer.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,3,2,5,3,null,9]",
                "Output": "** 4",
                "Explanation": "** The maximum width exists in the third level with length 4 (5,3,null,9)."
            },
            {
                "Input": "** root = [1,3,2,5,null,null,9,6,null,7]",
                "Output": "** 7",
                "Explanation": "** The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7)."
            },
            {
                "Input": "** root = [1,3,2,5]",
                "Output": "** 2",
                "Explanation": "** The maximum width exists in the second level with length 2 (3,2)."
            }
        ]
    },
    {
        "Title": "Strange Printer",
        "slug": "strange-printer",
        "description": "There is a strange printer with the following two special properties:\n\n\n The printer can only print a sequence of **the same character** each time.\n At each turn, the printer can print new characters starting from and ending at any place and will cover the original existing characters.\n\n\nGiven a string `s`, return *the minimum number of turns the printer needed to print it*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"aaabbb\"",
                "Output": "** 2",
                "Explanation": "** Print \"aaa\" first and then print \"bbb\"."
            },
            {
                "Input": "** s = \"aba\"",
                "Output": "** 2",
                "Explanation": "** Print \"aaa\" first and then print \"b\" from the second place of the string, which will cover the existing character 'a'."
            }
        ]
    },
    {
        "Title": "Non-decreasing Array",
        "slug": "non-decreasing-array",
        "description": "Given an array `nums` with `n` integers, your task is to check if it could become non-decreasing by modifying **at most one element**.\n\n\nWe define an array is non-decreasing if `nums[i] <= nums[i + 1]` holds for every `i` (**0-based**) such that (`0 <= i <= n - 2`).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [4,2,3]",
                "Output": "** true",
                "Explanation": "** You could modify the first 4 to 1 to get a non-decreasing array."
            },
            {
                "Input": "** nums = [4,2,1]",
                "Output": "** false",
                "Explanation": "** You cannot get a non-decreasing array by modifying at most one element."
            }
        ]
    },
    {
        "Title": "Beautiful Arrangement II",
        "slug": "beautiful-arrangement-ii",
        "description": "Given two integers `n` and `k`, construct a list `answer` that contains `n` different positive integers ranging from `1` to `n` and obeys the following requirement:\n\n\n Suppose this list is `answer =\u00a0[a1, a2, a3, ... , an]`, then the list `[|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|]` has exactly `k` distinct integers.\n\n\nReturn *the list* `answer`. If there multiple valid answers, return **any of them**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math"
        ],
        "examples": [
            {
                "Input": "** n = 3, k = 1",
                "Output": "** [1,2,3]\nExplanation: The [1,2,3] has three different positive integers ranging from 1 to 3, and the [1,1] has exactly 1 distinct integer: 1",
                "Explanation": null
            },
            {
                "Input": "** n = 3, k = 2",
                "Output": "** [1,3,2]\nExplanation: The [1,3,2] has three different positive integers ranging from 1 to 3, and the [2,1] has exactly 2 distinct integers: 1 and 2.",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Kth Smallest Number in Multiplication Table",
        "slug": "kth-smallest-number-in-multiplication-table",
        "description": "Nearly everyone has used the [Multiplication Table](https://en.wikipedia.org/wiki/Multiplication_table). The multiplication table of size `m x n` is an integer matrix `mat` where `mat[i][j] == i * j` (**1-indexed**).\n\n\nGiven three integers `m`, `n`, and `k`, return *the* `kth` *smallest element in the* `m x n` *multiplication table*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** m = 3, n = 3, k = 5",
                "Output": "** 3",
                "Explanation": "** The 5th smallest number is 3."
            },
            {
                "Input": "** m = 2, n = 3, k = 6",
                "Output": "** 6",
                "Explanation": "** The 6th smallest number is 6."
            }
        ]
    },
    {
        "Title": "Trim a Binary Search Tree",
        "slug": "trim-a-binary-search-tree",
        "description": "Given the `root` of a binary search tree and the lowest and highest boundaries as `low` and `high`, trim the tree so that all its elements lies in `[low, high]`. Trimming the tree should **not** change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a **unique answer**.\n\n\nReturn *the root of the trimmed binary search tree*. Note that the root may change depending on the given bounds.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,0,2], low = 1, high = 2",
                "Output": "** [1,null,2]",
                "Explanation": null
            },
            {
                "Input": "** root = [3,0,4,null,2,null,null,1], low = 1, high = 3",
                "Output": "** [3,2,null,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Swap",
        "slug": "maximum-swap",
        "description": "You are given an integer `num`. You can swap two digits at most once to get the maximum valued number.\n\n\nReturn *the maximum valued number you can get*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** num = 2736",
                "Output": "** 7236",
                "Explanation": "** Swap the number 2 and the number 7."
            },
            {
                "Input": "** num = 9973",
                "Output": "** 9973",
                "Explanation": "** No swap."
            }
        ]
    },
    {
        "Title": "Second Minimum Node In a Binary Tree",
        "slug": "second-minimum-node-in-a-binary-tree",
        "description": "Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly `two` or `zero` sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property\u00a0`root.val = min(root.left.val, root.right.val)`\u00a0always holds.\n\n\nGiven such a binary tree, you need to output the **second minimum** value in the set made of all the nodes' value in the whole tree.\n\n\nIf no such second minimum value exists, output -1 instead.\n\n\n\u00a0\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [2,2,5,null,null,5,7]",
                "Output": "** 5",
                "Explanation": "** The smallest value is 2, the second smallest value is 5."
            },
            {
                "Input": "** root = [2,2,2]",
                "Output": "** -1",
                "Explanation": "** The smallest value is 2, but there isn't any second smallest value."
            }
        ]
    },
    {
        "Title": "Bulb Switcher II",
        "slug": "bulb-switcher-ii",
        "description": "There is a room with `n` bulbs labeled from `1` to `n` that all are turned on initially, and **four buttons** on the wall. Each of the four buttons has a different functionality where:\n\n\n **Button 1:** Flips the status of all the bulbs.\n **Button 2:** Flips the status of all the bulbs with even labels (i.e., `2, 4, ...`).\n **Button 3:** Flips the status of all the bulbs with odd labels (i.e., `1, 3, ...`).\n **Button 4:** Flips the status of all the bulbs with a label `j = 3k + 1` where `k = 0, 1, 2, ...` (i.e., `1, 4, 7, 10, ...`).\n\n\nYou must make **exactly** `presses` button presses in total. For each press, you may pick **any** of the four buttons to press.\n\n\nGiven the two integers `n` and `presses`, return *the number of **different possible statuses** after performing all* `presses` *button presses*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Bit Manipulation",
            "Depth-First Search",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** n = 1, presses = 1",
                "Output": "** 2",
                "Explanation": "** Status can be:\n- [off] by pressing button 1\n- [on] by pressing button 2"
            },
            {
                "Input": "** n = 2, presses = 1",
                "Output": "** 3",
                "Explanation": "** Status can be:\n- [off, off] by pressing button 1\n- [on, off] by pressing button 2\n- [off, on] by pressing button 3"
            },
            {
                "Input": "** n = 3, presses = 1",
                "Output": "** 4",
                "Explanation": "** Status can be:\n- [off, off, off] by pressing button 1\n- [off, on, off] by pressing button 2\n- [on, off, on] by pressing button 3\n- [off, on, on] by pressing button 4"
            }
        ]
    },
    {
        "Title": "Number of Longest Increasing Subsequence",
        "slug": "number-of-longest-increasing-subsequence",
        "description": "Given an integer array\u00a0`nums`, return *the number of longest increasing subsequences.\n\n\nNotice** that the sequence has to be **strictly** increasing.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Binary Indexed Tree",
            "Segment Tree"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,5,4,7]",
                "Output": "** 2",
                "Explanation": "** The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7]."
            },
            {
                "Input": "** nums = [2,2,2,2,2]",
                "Output": "** 5",
                "Explanation": "** The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5."
            }
        ]
    },
    {
        "Title": "Longest Continuous Increasing Subsequence",
        "slug": "longest-continuous-increasing-subsequence",
        "description": "Given an unsorted array of integers `nums`, return *the length of the longest **continuous increasing subsequence** (i.e. subarray)*. The subsequence must be **strictly** increasing.\n\n\nA **continuous increasing subsequence** is defined by two indices `l` and `r` (`l < r`) such that it is `[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]` and for each `l <= i < r`, `nums[i] < nums[i + 1]`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,5,4,7]",
                "Output": "** 3",
                "Explanation": "** The longest continuous increasing subsequence is [1,3,5] with length 3.\nEven though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element\n4."
            },
            {
                "Input": "** nums = [2,2,2,2,2]",
                "Output": "** 1",
                "Explanation": "** The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly\nincreasing."
            }
        ]
    },
    {
        "Title": "Cut Off Trees for Golf Event",
        "slug": "cut-off-trees-for-golf-event",
        "description": "You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an `m x n` matrix. In this matrix:\n\n\n `0` means the cell cannot be walked through.\n `1` represents an empty cell that can be walked through.\n A number greater than `1` represents a tree in a cell that can be walked through, and this number is the tree's height.\n\n\nIn one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off.\n\n\nYou must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes `1` (an empty cell).\n\n\nStarting from the point `(0, 0)`, return *the minimum steps you need to walk to cut off all the trees*. If you cannot cut off all the trees, return `-1`.\n\n\nNote:** The input is generated such that no two trees have the same height, and there is at least one tree needs to be cut off.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Breadth-First Search",
            "Heap (Priority Queue)",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** forest = [[1,2,3],[0,0,4],[7,6,5]]",
                "Output": "** 6",
                "Explanation": "** Following the path above allows you to cut off the trees from shortest to tallest in 6 steps."
            },
            {
                "Input": "** forest = [[1,2,3],[0,0,0],[7,6,5]]",
                "Output": "** -1",
                "Explanation": "** The trees in the bottom row cannot be accessed as the middle row is blocked."
            }
        ]
    },
    {
        "Title": "Implement Magic Dictionary",
        "slug": "implement-magic-dictionary",
        "description": "Design a data structure that is initialized with a list of **different** words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.\n\n\nImplement the\u00a0`MagicDictionary`\u00a0class:\n\n\n `MagicDictionary()`\u00a0Initializes the object.\n `void buildDict(String[]\u00a0dictionary)`\u00a0Sets the data structure\u00a0with an array of distinct strings `dictionary`.\n `bool search(String searchWord)` Returns `true` if you can change **exactly one character** in `searchWord` to match any string in the data structure, otherwise returns `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Depth-First Search",
            "Design",
            "Trie"
        ],
        "examples": [
            {
                "Input": "[\"MagicDictionary\", \"buildDict\", \"search\", \"search\", \"search\", \"search\"]\n[[], [[\"hello\", \"leetcode\"]], [\"hello\"], [\"hhllo\"], [\"hell\"], [\"leetcoded\"]]",
                "Output": "[null, null, false, true, false, false]",
                "Explanation": "MagicDictionary magicDictionary = new MagicDictionary();\nmagicDictionary.buildDict([\"hello\", \"leetcode\"]);\nmagicDictionary.search(\"hello\"); // return False\nmagicDictionary.search(\"hhllo\"); // We can change the second 'h' to 'e' to match \"hello\" so we return True\nmagicDictionary.search(\"hell\"); // return False\nmagicDictionary.search(\"leetcoded\"); // return False"
            }
        ]
    },
    {
        "Title": "Map Sum Pairs",
        "slug": "map-sum-pairs",
        "description": "Design a map that allows you to do the following:\n\n\n Maps a string key to a given value.\n Returns the sum of the values that have a key with a prefix equal to a given string.\n\n\nImplement the `MapSum` class:\n\n\n `MapSum()` Initializes the `MapSum` object.\n `void insert(String key, int val)` Inserts the `key-val` pair into the map. If the `key` already existed, the original `key-value` pair will be overridden to the new one.\n `int sum(string prefix)` Returns the sum of all the pairs' value whose `key` starts with the `prefix`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Design",
            "Trie"
        ],
        "examples": [
            {
                "Input": "[\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]\n[[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]",
                "Output": "[null, null, 3, null, 5]",
                "Explanation": "MapSum mapSum = new MapSum();\nmapSum.insert(\"apple\", 3);  \nmapSum.sum(\"ap\");           // return 3 (apple = 3)\nmapSum.insert(\"app\", 2);    \nmapSum.sum(\"ap\");           // return 5 (apple + app = 3 + 2 = 5)"
            }
        ]
    },
    {
        "Title": "Valid Parenthesis String",
        "slug": "valid-parenthesis-string",
        "description": "Given a string `s` containing only three types of characters: `'('`, `')'` and `'*'`, return `true` *if* `s` *is **valid***.\n\n\nThe following rules define a **valid** string:\n\n\n Any left parenthesis `'('` must have a corresponding right parenthesis `')'`.\n Any right parenthesis `')'` must have a corresponding left parenthesis `'('`.\n Left parenthesis `'('` must go before the corresponding right parenthesis `')'`.\n `'*'` could be treated as a single right parenthesis `')'` or a single left parenthesis `'('` or an empty string `\"\"`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Stack",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"()\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"(*)\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"(*))\"",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "24 Game",
        "slug": "24-game",
        "description": "You are given an integer array `cards` of length `4`. You have four cards, each containing a number in the range `[1, 9]`. You should arrange the numbers on these cards in a mathematical expression using the operators `['+', '-', '*', '/']` and the parentheses `'('` and `')'` to get the value 24.\n\n\nYou are restricted with the following rules:\n\n\n The division operator `'/'` represents real division, not integer division.\n\t+ For example, `4 / (1 - 2 / 3) = 4 / (1 / 3) = 12`.\n Every operation done is between two numbers. In particular, we cannot use `'-'` as a unary operator.\n\t+ For example, if `cards = [1, 1, 1, 1]`, the expression `\"-1 - 1 - 1 - 1\"` is **not allowed**.\n You cannot concatenate numbers together\n\t+ For example, if `cards = [1, 2, 1, 2]`, the expression `\"12 + 12\"` is not valid.\n\n\nReturn `true` if you can get such expression that evaluates to `24`, and `false` otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** cards = [4,1,8,7]",
                "Output": "** true",
                "Explanation": "** (8-4) * (7-1) = 24"
            },
            {
                "Input": "** cards = [1,2,1,2]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Valid Palindrome II",
        "slug": "valid-palindrome-ii",
        "description": "Given a string `s`, return `true` *if the* `s` *can be palindrome after deleting **at most one** character from it*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"aba\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"abca\"",
                "Output": "** true",
                "Explanation": "** You could delete the character 'c'."
            },
            {
                "Input": "** s = \"abc\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Baseball Game",
        "slug": "baseball-game",
        "description": "You are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record.\n\n\nYou are given a list of strings `operations`, where `operations[i]` is the `ith` operation you must apply to the record and is one of the following:\n\n\n An integer `x`.\n\t+ Record a new score of `x`.\n `'+'`.\n\t+ Record a new score that is the sum of the previous two scores.\n `'D'`.\n\t+ Record a new score that is the double of the previous score.\n `'C'`.\n\t+ Invalidate the previous score, removing it from the record.\n\n\nReturn *the sum of all the scores on the record after applying all the operations*.\n\n\nThe test cases are generated such that the answer and all intermediate calculations fit in a **32-bit** integer and that all operations are valid.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Stack",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** ops = [\"5\",\"2\",\"C\",\"D\",\"+\"]",
                "Output": "** 30",
                "Explanation": "**\n\"5\" - Add 5 to the record, record is now [5].\n\"2\" - Add 2 to the record, record is now [5, 2].\n\"C\" - Invalidate and remove the previous score, record is now [5].\n\"D\" - Add 2 * 5 = 10 to the record, record is now [5, 10].\n\"+\" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].\nThe total sum is 5 + 10 + 15 = 30."
            },
            {
                "Input": "** ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]",
                "Output": "** 27",
                "Explanation": "**\n\"5\" - Add 5 to the record, record is now [5].\n\"-2\" - Add -2 to the record, record is now [5, -2].\n\"4\" - Add 4 to the record, record is now [5, -2, 4].\n\"C\" - Invalidate and remove the previous score, record is now [5, -2].\n\"D\" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].\n\"9\" - Add 9 to the record, record is now [5, -2, -4, 9].\n\"+\" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].\n\"+\" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].\nThe total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27."
            },
            {
                "Input": "** ops = [\"1\",\"C\"]",
                "Output": "** 0",
                "Explanation": "**\n\"1\" - Add 1 to the record, record is now [1].\n\"C\" - Invalidate and remove the previous score, record is now [].\nSince the record is empty, the total sum is 0."
            }
        ]
    },
    {
        "Title": "Redundant Connection",
        "slug": "redundant-connection",
        "description": "In this problem, a tree is an **undirected graph** that is connected and has no cycles.\n\n\nYou are given a graph that started as a tree with `n` nodes labeled from `1` to `n`, with one additional edge added. The added edge has two **different** vertices chosen from `1` to `n`, and was not an edge that already existed. The graph is represented as an array `edges` of length `n` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the graph.\n\n\nReturn *an edge that can be removed so that the resulting graph is a tree of* `n` *nodes*. If there are multiple answers, return the answer that occurs last in the input.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** edges = [[1,2],[1,3],[2,3]]",
                "Output": "** [2,3]",
                "Explanation": null
            },
            {
                "Input": "** edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]",
                "Output": "** [1,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Redundant Connection II",
        "slug": "redundant-connection-ii",
        "description": "In this problem, a rooted tree is a **directed** graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.\n\n\nThe given input is a directed graph that started as a rooted tree with `n` nodes (with distinct values from `1` to `n`), with one additional directed edge added. The added edge has two different vertices chosen from `1` to `n`, and was not an edge that already existed.\n\n\nThe resulting graph is given as a 2D-array of `edges`. Each element of `edges` is a pair `[ui, vi]` that represents a **directed** edge connecting nodes `ui` and `vi`, where `ui` is a parent of child `vi`.\n\n\nReturn *an edge that can be removed so that the resulting graph is a rooted tree of* `n` *nodes*. If there are multiple answers, return the answer that occurs last in the given 2D-array.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** edges = [[1,2],[1,3],[2,3]]",
                "Output": "** [2,3]",
                "Explanation": null
            },
            {
                "Input": "** edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]",
                "Output": "** [4,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Repeated String Match",
        "slug": "repeated-string-match",
        "description": "Given two strings `a` and `b`, return *the minimum number of times you should repeat string* `a` *so that string* `b` *is a substring of it*. If it is impossible for `b`\u200b\u200b\u200b\u200b\u200b\u200b to be a substring of `a` after repeating it, return `-1`.\n\n\nNotice:** string `\"abc\"` repeated 0 times is `\"\"`, repeated 1 time is `\"abc\"` and repeated 2 times is `\"abcabc\"`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "String Matching"
        ],
        "examples": [
            {
                "Input": "** a = \"abcd\", b = \"cdabcdab\"",
                "Output": "** 3",
                "Explanation": "** We return 3 because by repeating a three times \"ab**cdabcdab**cd\", b is a substring of it."
            },
            {
                "Input": "** a = \"a\", b = \"aa\"",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Univalue Path",
        "slug": "longest-univalue-path",
        "description": "Given the `root` of a binary tree, return *the length of the longest path, where each node in the path has the same value*. This path may or may not pass through the root.\n\n\nThe length of the path** between two nodes is represented by the number of edges between them.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [5,4,5,1,1,null,5]",
                "Output": "** 2",
                "Explanation": "** The shown image shows that the longest path of the same value (i.e. 5)."
            },
            {
                "Input": "** root = [1,4,5,4,4,null,5]",
                "Output": "** 2",
                "Explanation": "** The shown image shows that the longest path of the same value (i.e. 4)."
            }
        ]
    },
    {
        "Title": "Knight Probability in Chessboard",
        "slug": "knight-probability-in-chessboard",
        "description": "On an `n x n` chessboard, a knight starts at the cell `(row, column)` and attempts to make exactly `k` moves. The rows and columns are **0-indexed**, so the top-left cell is `(0, 0)`, and the bottom-right cell is `(n - 1, n - 1)`.\n\n\nA chess knight has eight possible moves it can make, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.\n\n\n![](https://assets.leetcode.com/uploads/2018/10/12/knight.png)\nEach time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.\n\n\nThe knight continues moving until it has made exactly `k` moves or has moved off the chessboard.\n\n\nReturn *the probability that the knight remains on the board after it has stopped moving*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** n = 3, k = 2, row = 0, column = 0",
                "Output": "** 0.06250",
                "Explanation": "** There are two moves (to (1,2), (2,1)) that will keep the knight on the board.\nFrom each of those positions, there are also two moves that will keep the knight on the board.\nThe total probability the knight stays on the board is 0.0625."
            },
            {
                "Input": "** n = 1, k = 0, row = 0, column = 0",
                "Output": "** 1.00000",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Sum of 3 Non-Overlapping Subarrays",
        "slug": "maximum-sum-of-3-non-overlapping-subarrays",
        "description": "Given an integer array `nums` and an integer `k`, find three non-overlapping subarrays of length `k` with maximum sum and return them.\n\n\nReturn the result as a list of indices representing the starting position of each interval (**0-indexed**). If there are multiple answers, return the lexicographically smallest one.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,1,2,6,7,5,1], k = 2",
                "Output": "** [0,3,5]",
                "Explanation": "** Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].\nWe could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger."
            },
            {
                "Input": "** nums = [1,2,1,2,1,2,1,2,1], k = 2",
                "Output": "** [0,2,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Employee Importance",
        "slug": "employee-importance",
        "description": "You have a data structure of employee information, including the employee's unique ID, importance value, and direct subordinates' IDs.\n\n\nYou are given an array of employees `employees` where:\n\n\n `employees[i].id` is the ID of the `ith` employee.\n `employees[i].importance` is the importance value of the `ith` employee.\n `employees[i].subordinates` is a list of the IDs of the direct subordinates of the `ith` employee.\n\n\nGiven an integer `id` that represents an employee's ID, return *the **total** importance value of this employee and all their direct and indirect subordinates*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** employees = [[1,5,[2,3]],[2,3,[]],[3,3,[]]], id = 1",
                "Output": "** 11",
                "Explanation": "** Employee 1 has an importance value of 5 and has two direct subordinates: employee 2 and employee 3.\nThey both have an importance value of 3.\nThus, the total importance value of employee 1 is 5 + 3 + 3 = 11."
            },
            {
                "Input": "** employees = [[1,2,[5]],[5,-3,[]]], id = 5",
                "Output": "** -3",
                "Explanation": "** Employee 5 has an importance value of -3 and has no direct subordinates.\nThus, the total importance value of employee 5 is -3."
            }
        ]
    },
    {
        "Title": "Stickers to Spell Word",
        "slug": "stickers-to-spell-word",
        "description": "We are given `n` different types of `stickers`. Each sticker has a lowercase English word on it.\n\n\nYou would like to spell out the given string `target` by cutting individual letters from your collection of stickers and rearranging them. You can use each sticker more than once if you want, and you have infinite quantities of each sticker.\n\n\nReturn *the minimum number of stickers that you need to spell out* `target`. If the task is impossible, return `-1`.\n\n\nNote:** In all test cases, all words were chosen randomly from the `1000` most common US English words, and `target` was chosen as a concatenation of two random words.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "String",
            "Dynamic Programming",
            "Backtracking",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** stickers = [\"with\",\"example\",\"science\"], target = \"thehat\"",
                "Output": "** 3",
                "Explanation": "**\nWe can use 2 \"with\" stickers, and 1 \"example\" sticker.\nAfter cutting and rearrange the letters of those stickers, we can form the target \"thehat\".\nAlso, this is the minimum number of stickers necessary to form the target string."
            },
            {
                "Input": "** stickers = [\"notice\",\"possible\"], target = \"basicbasic\"",
                "Output": "** -1\nExplanation:\nWe cannot form the target \"basicbasic\" from cutting letters from the given stickers.",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Top K Frequent Words",
        "slug": "top-k-frequent-words",
        "description": "Given an array of strings `words` and an integer `k`, return *the* `k` *most frequent strings*.\n\n\nReturn the answer **sorted** by **the frequency** from highest to lowest. Sort the words with the same frequency by their **lexicographical order**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Trie",
            "Sorting",
            "Heap (Priority Queue)",
            "Bucket Sort",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** words = [\"i\",\"love\",\"leetcode\",\"i\",\"love\",\"coding\"], k = 2",
                "Output": "** [\"i\",\"love\"]",
                "Explanation": "** \"i\" and \"love\" are the two most frequent words.\nNote that \"i\" comes before \"love\" due to a lower alphabetical order."
            },
            {
                "Input": "** words = [\"the\",\"day\",\"is\",\"sunny\",\"the\",\"the\",\"the\",\"sunny\",\"is\",\"is\"], k = 4",
                "Output": "** [\"the\",\"is\",\"sunny\",\"day\"]",
                "Explanation": "** \"the\", \"is\", \"sunny\" and \"day\" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively."
            }
        ]
    },
    {
        "Title": "Binary Number with Alternating Bits",
        "slug": "binary-number-with-alternating-bits",
        "description": "Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** n = 5",
                "Output": "** true",
                "Explanation": "** The binary representation of 5 is: 101"
            },
            {
                "Input": "** n = 7",
                "Output": "** false",
                "Explanation": "** The binary representation of 7 is: 111."
            },
            {
                "Input": "** n = 11",
                "Output": "** false",
                "Explanation": "** The binary representation of 11 is: 1011."
            }
        ]
    },
    {
        "Title": "Max Area of Island",
        "slug": "max-area-of-island",
        "description": "You are given an `m x n` binary matrix `grid`. An island is a group of `1`'s (representing land) connected **4-directionally** (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\n\n\nThe **area** of an island is the number of cells with a value `1` in the island.\n\n\nReturn *the maximum **area** of an island in* `grid`. If there is no island, return `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]",
                "Output": "** 6",
                "Explanation": "** The answer is not 11, because the island must be connected 4-directionally."
            }
        ]
    },
    {
        "Title": "Count Binary Substrings",
        "slug": "count-binary-substrings",
        "description": "Given a binary string `s`, return the number of non-empty substrings that have the same number of `0`'s and `1`'s, and all the `0`'s and all the `1`'s in these substrings are grouped consecutively.\n\n\nSubstrings that occur multiple times are counted the number of times they occur.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"00110011\"",
                "Output": "** 6",
                "Explanation": "** There are 6 substrings that have equal number of consecutive 1's and 0's: \"0011\", \"01\", \"1100\", \"10\", \"0011\", and \"01\".\nNotice that some of these substrings repeat and are counted the number of times they occur.\nAlso, \"00110011\" is not a valid substring because all the 0's (and 1's) are not grouped together."
            },
            {
                "Input": "** s = \"10101\"",
                "Output": "** 4",
                "Explanation": "** There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of consecutive 1's and 0's."
            }
        ]
    },
    {
        "Title": "Degree of an Array",
        "slug": "degree-of-an-array",
        "description": "Given a non-empty array of non-negative integers `nums`, the **degree** of this array is defined as the maximum frequency of any one of its elements.\n\n\nYour task is to find the smallest possible length of a (contiguous) subarray of `nums`, that has the same degree as `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,2,3,1]",
                "Output": "** 2",
                "Explanation": "** \nThe input array has a degree of 2 because both elements 1 and 2 appear twice.\nOf the subarrays that have the same degree:\n[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\nThe shortest length is 2. So return 2."
            },
            {
                "Input": "** nums = [1,2,2,3,1,4,2]",
                "Output": "** 6",
                "Explanation": "** \nThe degree is 3 because the element 2 is repeated 3 times.\nSo [2,2,3,1,4,2] is the shortest subarray, therefore returning 6."
            }
        ]
    },
    {
        "Title": "Partition to K Equal Sum Subsets",
        "slug": "partition-to-k-equal-sum-subsets",
        "description": "Given an integer array `nums` and an integer `k`, return `true` if it is possible to divide this array into `k` non-empty subsets whose sums are all equal.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Backtracking",
            "Bit Manipulation",
            "Memoization",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** nums = [4,3,2,3,5,2,1], k = 4",
                "Output": "** true",
                "Explanation": "** It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums."
            },
            {
                "Input": "** nums = [1,2,3,4], k = 3",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Falling Squares",
        "slug": "falling-squares",
        "description": "There are several squares being dropped onto the X-axis of a 2D plane.\n\n\nYou are given a 2D integer array `positions` where `positions[i] = [lefti, sideLengthi]` represents the `ith` square with a side length of `sideLengthi` that is dropped with its left edge aligned with X-coordinate `lefti`.\n\n\nEach square is dropped one at a time from a height above any landed squares. It then falls downward (negative Y direction) until it either lands **on the top side of another square** or **on the X-axis**. A square brushing the left/right side of another square does not count as landing on it. Once it lands, it freezes in place and cannot be moved.\n\n\nAfter each square is dropped, you must record the **height of the current tallest stack of squares**.\n\n\nReturn *an integer array* `ans` *where* `ans[i]` *represents the height described above after dropping the* `ith` *square*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Segment Tree",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** positions = [[1,2],[2,3],[6,1]]",
                "Output": "** [2,5,5]",
                "Explanation": "**\nAfter the first drop, the tallest stack is square 1 with a height of 2.\nAfter the second drop, the tallest stack is squares 1 and 2 with a height of 5.\nAfter the third drop, the tallest stack is still squares 1 and 2 with a height of 5.\nThus, we return an answer of [2, 5, 5]."
            }
        ]
    },
    {
        "Title": "Search in a Binary Search Tree",
        "slug": "search-in-a-binary-search-tree",
        "description": "You are given the `root` of a binary search tree (BST) and an integer `val`.\n\n\nFind the node in the BST that the node's value equals `val` and return the subtree rooted with that node. If such a node does not exist, return `null`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [4,2,7,1,3], val = 2",
                "Output": "** [2,1,3]",
                "Explanation": null
            },
            {
                "Input": "** root = [4,2,7,1,3], val = 5",
                "Output": "** []",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Insert into a Binary Search Tree",
        "slug": "insert-into-a-binary-search-tree",
        "description": "You are given the `root` node of a binary search tree (BST) and a `value` to insert into the tree. Return *the root node of the BST after the insertion*. It is **guaranteed** that the new value does not exist in the original BST.\n\n\nNotice**\u00a0that there may exist\u00a0multiple valid ways for the\u00a0insertion, as long as the tree remains a BST after insertion. You can return **any of them**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [4,2,7,1,3], val = 5",
                "Output": "** [4,2,7,1,3,5]",
                "Explanation": "** Another accepted tree is:\n![](https://assets.leetcode.com/uploads/2020/10/05/bst.jpg)"
            }
        ]
    },
    {
        "Title": "Kth Largest Element in a Stream",
        "slug": "kth-largest-element-in-a-stream",
        "description": "Design a class to find the `kth` largest element in a stream. Note that it is the `kth` largest element in the sorted order, not the `kth` distinct element.\n\n\nImplement `KthLargest` class:\n\n\n `KthLargest(int k, int[] nums)` Initializes the object with the integer `k` and the stream of integers `nums`.\n `int add(int val)` Appends the integer `val` to the stream and returns the element representing the `kth` largest element in the stream.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Design",
            "Binary Search Tree",
            "Heap (Priority Queue)",
            "Binary Tree",
            "Data Stream"
        ],
        "examples": [
            {
                "Input": "[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]",
                "Output": "[null, 4, 5, 5, 8, 8]",
                "Explanation": "KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3);   // return 4\nkthLargest.add(5);   // return 5\nkthLargest.add(10);  // return 5\nkthLargest.add(9);   // return 8\nkthLargest.add(4);   // return 8"
            }
        ]
    },
    {
        "Title": "Binary Search",
        "slug": "binary-search",
        "description": "Given an array of integers `nums` which is sorted in ascending order, and an integer `target`, write a function to search `target` in `nums`. If `target` exists, then return its index. Otherwise, return `-1`.\n\n\nYou must write an algorithm with `O(log n)` runtime complexity.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** nums = [-1,0,3,5,9,12], target = 9",
                "Output": "** 4",
                "Explanation": "** 9 exists in nums and its index is 4"
            },
            {
                "Input": "** nums = [-1,0,3,5,9,12], target = 2",
                "Output": "** -1",
                "Explanation": "** 2 does not exist in nums so return -1"
            }
        ]
    },
    {
        "Title": "Design HashSet",
        "slug": "design-hashset",
        "description": "Design a HashSet without using any built-in hash table libraries.\n\n\nImplement `MyHashSet` class:\n\n\n `void add(key)` Inserts the value `key` into the HashSet.\n `bool contains(key)` Returns whether the value `key` exists in the HashSet or not.\n `void remove(key)` Removes the value `key` in the HashSet. If `key` does not exist in the HashSet, do nothing.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Linked List",
            "Design",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "[\"MyHashSet\", \"add\", \"add\", \"contains\", \"contains\", \"add\", \"contains\", \"remove\", \"contains\"]\n[[], [1], [2], [1], [3], [2], [2], [2], [2]]",
                "Output": "[null, null, null, true, false, null, true, null, false]",
                "Explanation": "MyHashSet myHashSet = new MyHashSet();\nmyHashSet.add(1);      // set = [1]\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(1); // return True\nmyHashSet.contains(3); // return False, (not found)\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(2); // return True\nmyHashSet.remove(2);   // set = [1]\nmyHashSet.contains(2); // return False, (already removed)"
            }
        ]
    },
    {
        "Title": "Design HashMap",
        "slug": "design-hashmap",
        "description": "Design a HashMap without using any built-in hash table libraries.\n\n\nImplement the `MyHashMap` class:\n\n\n `MyHashMap()` initializes the object with an empty map.\n `void put(int key, int value)` inserts a `(key, value)` pair into the HashMap. If the `key` already exists in the map, update the corresponding `value`.\n `int get(int key)` returns the `value` to which the specified `key` is mapped, or `-1` if this map contains no mapping for the `key`.\n `void remove(key)` removes the `key` and its corresponding `value` if the map contains the mapping for the `key`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Linked List",
            "Design",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "[\"MyHashMap\", \"put\", \"put\", \"get\", \"get\", \"put\", \"get\", \"remove\", \"get\"]\n[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]",
                "Output": "[null, null, null, 1, -1, null, 1, null, -1]",
                "Explanation": "MyHashMap myHashMap = new MyHashMap();\nmyHashMap.put(1, 1); // The map is now [[1,1]]\nmyHashMap.put(2, 2); // The map is now [[1,1], [2,2]]\nmyHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]\nmyHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]\nmyHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)\nmyHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]\nmyHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]\nmyHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]"
            }
        ]
    },
    {
        "Title": "Design Linked List",
        "slug": "design-linked-list",
        "description": "Design your implementation of the linked list. You can choose to use a singly or doubly linked list.  \n\nA node in a singly linked list should have two attributes: `val` and `next`. `val` is the value of the current node, and `next` is a pointer/reference to the next node.  \n\nIf you want to use the doubly linked list, you will need one more attribute `prev` to indicate the previous node in the linked list. Assume all nodes in the linked list are **0-indexed**.\n\n\nImplement the `MyLinkedList` class:\n\n\n `MyLinkedList()` Initializes the `MyLinkedList` object.\n `int get(int index)` Get the value of the `indexth` node in the linked list. If the index is invalid, return `-1`.\n `void addAtHead(int val)` Add a node of value `val` before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\n `void addAtTail(int val)` Append a node of value `val` as the last element of the linked list.\n `void addAtIndex(int index, int val)` Add a node of value `val` before the `indexth` node in the linked list. If `index` equals the length of the linked list, the node will be appended to the end of the linked list. If `index` is greater than the length, the node **will not be inserted**.\n `void deleteAtIndex(int index)` Delete the `indexth` node in the linked list, if the index is valid.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Design"
        ],
        "examples": [
            {
                "Input": "[\"MyLinkedList\", \"addAtHead\", \"addAtTail\", \"addAtIndex\", \"get\", \"deleteAtIndex\", \"get\"]\n[[], [1], [3], [1, 2], [1], [1], [1]]",
                "Output": "[null, null, null, null, 2, null, 3]",
                "Explanation": "MyLinkedList myLinkedList = new MyLinkedList();\nmyLinkedList.addAtHead(1);\nmyLinkedList.addAtTail(3);\nmyLinkedList.addAtIndex(1, 2);    // linked list becomes 1->2->3\nmyLinkedList.get(1);              // return 2\nmyLinkedList.deleteAtIndex(1);    // now the linked list is 1->3\nmyLinkedList.get(1);              // return 3"
            }
        ]
    },
    {
        "Title": "To Lower Case",
        "slug": "to-lower-case",
        "description": "Given a string `s`, return *the string after replacing every uppercase letter with the same lowercase letter*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"Hello\"",
                "Output": "** \"hello\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"here\"",
                "Output": "** \"here\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"LOVELY\"",
                "Output": "** \"lovely\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Random Pick with Blacklist",
        "slug": "random-pick-with-blacklist",
        "description": "You are given an integer `n` and an array of **unique** integers `blacklist`. Design an algorithm to pick a random integer in the range `[0, n - 1]` that is **not** in `blacklist`. Any integer that is in the mentioned range and not in `blacklist` should be **equally likely** to be returned.\n\n\nOptimize your algorithm such that it minimizes the number of calls to the **built-in** random function of your language.\n\n\nImplement the `Solution` class:\n\n\n `Solution(int n, int[] blacklist)` Initializes the object with the integer `n` and the blacklisted integers `blacklist`.\n `int pick()` Returns a random integer in the range `[0, n - 1]` and not in `blacklist`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Binary Search",
            "Sorting",
            "Randomized"
        ],
        "examples": [
            {
                "Input": "[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\n[[7, [2, 3, 5]], [], [], [], [], [], [], []]",
                "Output": "[null, 0, 4, 1, 6, 1, 0, 4]",
                "Explanation": "Solution solution = new Solution(7, [2, 3, 5]);\nsolution.pick(); // return 0, any integer from [0,1,4,6] should be ok. Note that for every call of pick,\n                 // 0, 1, 4, and 6 must be equally likely to be returned (i.e., with probability 1/4).\nsolution.pick(); // return 4\nsolution.pick(); // return 1\nsolution.pick(); // return 6\nsolution.pick(); // return 1\nsolution.pick(); // return 0\nsolution.pick(); // return 4"
            }
        ]
    },
    {
        "Title": "Minimum ASCII Delete Sum for Two Strings",
        "slug": "minimum-ascii-delete-sum-for-two-strings",
        "description": "Given two strings `s1` and\u00a0`s2`, return *the lowest **ASCII** sum of deleted characters to make two strings equal*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s1 = \"sea\", s2 = \"eat\"",
                "Output": "** 231",
                "Explanation": "** Deleting \"s\" from \"sea\" adds the ASCII value of \"s\" (115) to the sum.\nDeleting \"t\" from \"eat\" adds 116 to the sum.\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this."
            },
            {
                "Input": "** s1 = \"delete\", s2 = \"leet\"",
                "Output": "** 403",
                "Explanation": "** Deleting \"dee\" from \"delete\" to turn the string into \"let\",\nadds 100[d] + 101[e] + 101[e] to the sum.\nDeleting \"e\" from \"leet\" adds 101[e] to the sum.\nAt the end, both strings are equal to \"let\", and the answer is 100+101+101+101 = 403.\nIf instead we turned both strings into \"lee\" or \"eet\", we would get answers of 433 or 417, which are higher."
            }
        ]
    },
    {
        "Title": "Subarray Product Less Than K",
        "slug": "subarray-product-less-than-k",
        "description": "Given an array of integers `nums` and an integer `k`, return *the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than* `k`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [10,5,2,6], k = 100",
                "Output": "** 8",
                "Explanation": "** The 8 subarrays that have product less than 100 are:\n[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]\nNote that [10, 5, 2] is not included as the product of 100 is not strictly less than k."
            },
            {
                "Input": "** nums = [1,2,3], k = 0",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Best Time to Buy and Sell Stock with Transaction Fee",
        "slug": "best-time-to-buy-and-sell-stock-with-transaction-fee",
        "description": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day, and an integer `fee` representing a transaction fee.\n\n\nFind the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.\n\n\nNote:\n\n\n You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n The transaction fee is only charged once for each stock purchase and sale.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** prices = [1,3,2,8,4,9], fee = 2",
                "Output": "** 8",
                "Explanation": "** The maximum profit can be achieved by:\n- Buying at prices[0] = 1\n- Selling at prices[3] = 8\n- Buying at prices[4] = 4\n- Selling at prices[5] = 9\nThe total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8."
            },
            {
                "Input": "** prices = [1,3,7,5,10,3], fee = 3",
                "Output": "** 6",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Range Module",
        "slug": "range-module",
        "description": "A Range Module is a module that tracks ranges of numbers. Design a data structure to track the ranges represented as **half-open intervals** and query about them.\n\n\nA **half-open interval** `[left, right)` denotes all the real numbers `x` where `left <= x < right`.\n\n\nImplement the `RangeModule` class:\n\n\n `RangeModule()` Initializes the object of the data structure.\n `void addRange(int left, int right)` Adds the **half-open interval** `[left, right)`, tracking every real number in that interval. Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval `[left, right)` that are not already tracked.\n `boolean queryRange(int left, int right)` Returns `true` if every real number in the interval `[left, right)` is currently being tracked, and `false` otherwise.\n `void removeRange(int left, int right)` Stops tracking every real number currently being tracked in the **half-open interval** `[left, right)`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Design",
            "Segment Tree",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "[\"RangeModule\", \"addRange\", \"removeRange\", \"queryRange\", \"queryRange\", \"queryRange\"]\n[[], [10, 20], [14, 16], [10, 14], [13, 15], [16, 17]]",
                "Output": "[null, null, null, true, false, true]",
                "Explanation": "RangeModule rangeModule = new RangeModule();\nrangeModule.addRange(10, 20);\nrangeModule.removeRange(14, 16);\nrangeModule.queryRange(10, 14); // return True,(Every number in [10, 14) is being tracked)\nrangeModule.queryRange(13, 15); // return False,(Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)\nrangeModule.queryRange(16, 17); // return True, (The number 16 in [16, 17) is still being tracked, despite the remove operation)"
            }
        ]
    },
    {
        "Title": "1-bit and 2-bit Characters",
        "slug": "1-bit-and-2-bit-characters",
        "description": "We have two special characters:\n\n\n The first character can be represented by one bit `0`.\n The second character can be represented by two bits (`10` or `11`).\n\n\nGiven a binary array `bits` that ends with `0`, return `true` if the last character must be a one-bit character.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** bits = [1,0,0]",
                "Output": "** true",
                "Explanation": "** The only way to decode it is two-bit character and one-bit character.\nSo the last character is one-bit character."
            },
            {
                "Input": "** bits = [1,1,1,0]",
                "Output": "** false",
                "Explanation": "** The only way to decode it is two-bit character and two-bit character.\nSo the last character is not one-bit character."
            }
        ]
    },
    {
        "Title": "Find K-th Smallest Pair Distance",
        "slug": "find-k-th-smallest-pair-distance",
        "description": "The **distance of a pair** of integers `a` and `b` is defined as the absolute difference between `a` and `b`.\n\n\nGiven an integer array `nums` and an integer `k`, return *the* `kth` *smallest **distance among all the pairs*** `nums[i]` *and* `nums[j]` *where* `0 <= i < j < nums.length`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,1], k = 1",
                "Output": "** 0",
                "Explanation": "** Here are all the pairs:\n(1,3) -> 2\n(1,1) -> 0\n(3,1) -> 2\nThen the 1st smallest distance pair is (1,1), and its distance is 0."
            },
            {
                "Input": "** nums = [1,1,1], k = 2",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,6,1], k = 3",
                "Output": "** 5",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Word in Dictionary",
        "slug": "longest-word-in-dictionary",
        "description": "Given an array of strings `words` representing an English Dictionary, return *the longest word in* `words` *that can be built one character at a time by other words in* `words`.\n\n\nIf there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.\n\n\nNote that the word should be built from left to right with each additional character being added to the end of a previous word.\u00a0\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Trie",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** words = [\"w\",\"wo\",\"wor\",\"worl\",\"world\"]",
                "Output": "** \"world\"",
                "Explanation": "** The word \"world\" can be built one character at a time by \"w\", \"wo\", \"wor\", and \"worl\"."
            },
            {
                "Input": "** words = [\"a\",\"banana\",\"app\",\"appl\",\"ap\",\"apply\",\"apple\"]",
                "Output": "** \"apple\"",
                "Explanation": "** Both \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\"."
            }
        ]
    },
    {
        "Title": "Accounts Merge",
        "slug": "accounts-merge",
        "description": "Given a list of `accounts` where each element `accounts[i]` is a list of strings, where the first element `accounts[i][0]` is a name, and the rest of the elements are **emails** representing emails of the account.\n\n\nNow, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.\n\n\nAfter merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails **in sorted order**. The accounts themselves can be returned in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** accounts = [[\"John\",\"johnsmith@mail.com\",\"john_newyork@mail.com\"],[\"John\",\"johnsmith@mail.com\",\"john00@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]",
                "Output": "** [[\"John\",\"john00@mail.com\",\"john_newyork@mail.com\",\"johnsmith@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]",
                "Explanation": "**\nThe first and second John's are the same person as they have the common email \"johnsmith@mail.com\".\nThe third John and Mary are different people as none of their email addresses are used by other accounts.\nWe could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'], \n['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted."
            },
            {
                "Input": "** accounts = [[\"Gabe\",\"Gabe0@m.co\",\"Gabe3@m.co\",\"Gabe1@m.co\"],[\"Kevin\",\"Kevin3@m.co\",\"Kevin5@m.co\",\"Kevin0@m.co\"],[\"Ethan\",\"Ethan5@m.co\",\"Ethan4@m.co\",\"Ethan0@m.co\"],[\"Hanzo\",\"Hanzo3@m.co\",\"Hanzo1@m.co\",\"Hanzo0@m.co\"],[\"Fern\",\"Fern5@m.co\",\"Fern1@m.co\",\"Fern0@m.co\"]]",
                "Output": "** [[\"Ethan\",\"Ethan0@m.co\",\"Ethan4@m.co\",\"Ethan5@m.co\"],[\"Gabe\",\"Gabe0@m.co\",\"Gabe1@m.co\",\"Gabe3@m.co\"],[\"Hanzo\",\"Hanzo0@m.co\",\"Hanzo1@m.co\",\"Hanzo3@m.co\"],[\"Kevin\",\"Kevin0@m.co\",\"Kevin3@m.co\",\"Kevin5@m.co\"],[\"Fern\",\"Fern0@m.co\",\"Fern1@m.co\",\"Fern5@m.co\"]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove Comments",
        "slug": "remove-comments",
        "description": "Given a C++ program, remove comments from it. The program source is an array of strings `source` where `source[i]` is the `ith` line of the source code. This represents the result of splitting the original source code string by the newline character `'\\n'`.\n\n\nIn C++, there are two types of comments, line comments, and block comments.\n\n\n The string `\"//\"` denotes a line comment, which represents that it and the rest of the characters to the right of it in the same line should be ignored.\n The string `\"/*\"` denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of `\"*/\"` should be ignored. (Here, occurrences happen in reading order: line by line from left to right.) To be clear, the string `\"/*/\"` does not yet end the block comment, as the ending would be overlapping the beginning.\n\n\nThe first effective comment takes precedence over others.\n\n\n For example, if the string `\"//\"` occurs in a block comment, it is ignored.\n Similarly, if the string `\"/*\"` occurs in a line or block comment, it is also ignored.\n\n\nIf a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.\n\n\nThere will be no control characters, single quote, or double quote characters.\n\n\n For example, `source = \"string s = \"/* Not a comment. */\";\"` will not be a test case.\n\n\nAlso, nothing else such as defines or macros will interfere with the comments.\n\n\nIt is guaranteed that every open block comment will eventually be closed, so `\"/*\"` outside of a line or block comment always starts a new comment.\n\n\nFinally, implicit newline characters can be deleted by block comments. Please see the examples below for details.\n\n\nAfter removing the comments from the source code, return *the source code in the same format*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String"
        ],
        "examples": [
            {
                "Input": "** source = [\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]",
                "Output": "** [\"int main()\",\"{ \",\"  \",\"int a, b, c;\",\"a = b + c;\",\"}\"]",
                "Explanation": "** The line by line code is visualized as below:\n/*Test program */\nint main()\n{ \n  // variable declaration \nint a, b, c;\n/* This is a test\n   multiline  \n   comment for \n   testing */\na = b + c;\n}\nThe string /* denotes a block comment, including line 1 and lines 6-9. The string // denotes line 4 as comments.\nThe line by line output code is visualized as below:\nint main()\n{ \n  \nint a, b, c;\na = b + c;\n}"
            },
            {
                "Input": "** source = [\"a/*comment\", \"line\", \"more_comment*/b\"]",
                "Output": "** [\"ab\"]",
                "Explanation": "** The original source string is \"a/*comment\\nline\\nmore_comment*/b\", where we have bolded the newline characters.  After deletion, the implicit newline characters are deleted, leaving the string \"ab\", which when delimited by newline characters becomes [\"ab\"]."
            }
        ]
    },
    {
        "Title": "Find Pivot Index",
        "slug": "find-pivot-index",
        "description": "Given an array of integers `nums`, calculate the **pivot index** of this array.\n\n\nThe **pivot index** is the index where the sum of all the numbers **strictly** to the left of the index is equal to the sum of all the numbers **strictly** to the index's right.\n\n\nIf the index is on the left edge of the array, then the left sum is `0` because there are no elements to the left. This also applies to the right edge of the array.\n\n\nReturn *the **leftmost pivot index***. If no such index exists, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [1,7,3,6,5,6]",
                "Output": "** 3",
                "Explanation": "**\nThe pivot index is 3.\nLeft sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11\nRight sum = nums[4] + nums[5] = 5 + 6 = 11"
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** -1",
                "Explanation": "**\nThere is no index that satisfies the conditions in the problem statement."
            },
            {
                "Input": "** nums = [2,1,-1]",
                "Output": "** 0",
                "Explanation": "**\nThe pivot index is 0.\nLeft sum = 0 (no elements to the left of index 0)\nRight sum = nums[1] + nums[2] = 1 + -1 = 0"
            }
        ]
    },
    {
        "Title": "Split Linked List in Parts",
        "slug": "split-linked-list-in-parts",
        "description": "Given the `head` of a singly linked list and an integer `k`, split the linked list into `k` consecutive linked list parts.\n\n\nThe length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null.\n\n\nThe parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.\n\n\nReturn *an array of the* `k` *parts*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List"
        ],
        "examples": [
            {
                "Input": "** head = [1,2,3], k = 5",
                "Output": "** [[1],[2],[3],[],[]]",
                "Explanation": "**\nThe first element output[0] has output[0].val = 1, output[0].next = null.\nThe last element output[4] is null, but its string representation as a ListNode is []."
            },
            {
                "Input": "** head = [1,2,3,4,5,6,7,8,9,10], k = 3",
                "Output": "** [[1,2,3,4],[5,6,7],[8,9,10]]",
                "Explanation": "**\nThe input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts."
            }
        ]
    },
    {
        "Title": "Number of Atoms",
        "slug": "number-of-atoms",
        "description": "Given a string `formula` representing a chemical formula, return *the count of each atom*.\n\n\nThe atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.\n\n\nOne or more digits representing that element's count may follow if the count is greater than `1`. If the count is `1`, no digits will follow.\n\n\n For example, `\"H2O\"` and `\"H2O2\"` are possible, but `\"H1O2\"` is impossible.\n\n\nTwo formulas are concatenated together to produce another formula.\n\n\n For example, `\"H2O2He3Mg4\"` is also a formula.\n\n\nA formula placed in parentheses, and a count (optionally added) is also a formula.\n\n\n For example, `\"(H2O2)\"` and `\"(H2O2)3\"` are formulas.\n\n\nReturn the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than `1`), followed by the second name (in sorted order), followed by its count (if that count is more than `1`), and so on.\n\n\nThe test cases are generated so that all the values in the output fit in a **32-bit** integer.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "String",
            "Stack",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** formula = \"H2O\"",
                "Output": "** \"H2O\"",
                "Explanation": "** The count of elements are {'H': 2, 'O': 1}."
            },
            {
                "Input": "** formula = \"Mg(OH)2\"",
                "Output": "** \"H2MgO2\"",
                "Explanation": "** The count of elements are {'H': 2, 'Mg': 1, 'O': 2}."
            },
            {
                "Input": "** formula = \"K4(ON(SO3)2)2\"",
                "Output": "** \"K4N2O14S4\"",
                "Explanation": "** The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}."
            }
        ]
    },
    {
        "Title": "Self Dividing Numbers",
        "slug": "self-dividing-numbers",
        "description": "A **self-dividing number** is a number that is divisible by every digit it contains.\n\n\n For example, `128` is **a self-dividing number** because `128 % 1 == 0`, `128 % 2 == 0`, and `128 % 8 == 0`.\n\n\nA **self-dividing number** is not allowed to contain the digit zero.\n\n\nGiven two integers `left` and `right`, return *a list of all the **self-dividing numbers** in the range* `[left, right]`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** left = 1, right = 22",
                "Output": "** [1,2,3,4,5,6,7,8,9,11,12,15,22]",
                "Explanation": null
            },
            {
                "Input": "** left = 47, right = 85",
                "Output": "** [48,55,66,77]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "My Calendar I",
        "slug": "my-calendar-i",
        "description": "You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a **double booking**.\n\n\nA **double booking** happens when two events have some non-empty intersection (i.e., some moment is common to both events.).\n\n\nThe event can be represented as a pair of integers `start` and `end` that represents a booking on the half-open interval `[start, end)`, the range of real numbers `x` such that `start <= x < end`.\n\n\nImplement the `MyCalendar` class:\n\n\n `MyCalendar()` Initializes the calendar object.\n `boolean book(int start, int end)` Returns `true` if the event can be added to the calendar successfully without causing a **double booking**. Otherwise, return `false` and do not add the event to the calendar.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Design",
            "Segment Tree",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "[\"MyCalendar\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [15, 25], [20, 30]]",
                "Output": "[null, true, false, true]",
                "Explanation": "MyCalendar myCalendar = new MyCalendar();\nmyCalendar.book(10, 20); // return True\nmyCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event.\nmyCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20."
            }
        ]
    },
    {
        "Title": "Count Different Palindromic Subsequences",
        "slug": "count-different-palindromic-subsequences",
        "description": "Given a string s, return *the number of different non-empty palindromic subsequences in* `s`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\nA subsequence of a string is obtained by deleting zero or more characters from the string.\n\n\nA sequence is palindromic if it is equal to the sequence reversed.\n\n\nTwo sequences `a1, a2, ...` and `b1, b2, ...` are different if there is some `i` for which `ai != bi`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"bccb\"",
                "Output": "** 6",
                "Explanation": "** The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.\nNote that 'bcb' is counted only once, even though it occurs twice."
            },
            {
                "Input": "** s = \"abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba\"",
                "Output": "** 104860361",
                "Explanation": "** There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 109 + 7."
            }
        ]
    },
    {
        "Title": "My Calendar II",
        "slug": "my-calendar-ii",
        "description": "You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a **triple booking**.\n\n\nA **triple booking** happens when three events have some non-empty intersection (i.e., some moment is common to all the three events.).\n\n\nThe event can be represented as a pair of integers `start` and `end` that represents a booking on the half-open interval `[start, end)`, the range of real numbers `x` such that `start <= x < end`.\n\n\nImplement the `MyCalendarTwo` class:\n\n\n `MyCalendarTwo()` Initializes the calendar object.\n `boolean book(int start, int end)` Returns `true` if the event can be added to the calendar successfully without causing a **triple booking**. Otherwise, return `false` and do not add the event to the calendar.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Design",
            "Segment Tree",
            "Prefix Sum",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "[\"MyCalendarTwo\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]",
                "Output": "[null, true, true, true, false, true, true]",
                "Explanation": "MyCalendarTwo myCalendarTwo = new MyCalendarTwo();\nmyCalendarTwo.book(10, 20); // return True, The event can be booked. \nmyCalendarTwo.book(50, 60); // return True, The event can be booked. \nmyCalendarTwo.book(10, 40); // return True, The event can be double booked. \nmyCalendarTwo.book(5, 15);  // return False, The event cannot be booked, because it would result in a triple booking.\nmyCalendarTwo.book(5, 10); // return True, The event can be booked, as it does not use time 10 which is already double booked.\nmyCalendarTwo.book(25, 55); // return True, The event can be booked, as the time in [25, 40) will be double booked with the third event, the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event."
            }
        ]
    },
    {
        "Title": "My Calendar III",
        "slug": "my-calendar-iii",
        "description": "A `k`-booking happens when `k` events have some non-empty intersection (i.e., there is some time that is common to all `k` events.)\n\n\nYou are given some events `[startTime, endTime)`, after each given event, return an integer `k` representing the maximum `k`-booking between all the previous events.\n\n\nImplement the `MyCalendarThree` class:\n\n\n `MyCalendarThree()` Initializes the object.\n `int book(int startTime, int endTime)` Returns an integer `k` representing the largest integer such that there exists a `k`-booking in the calendar.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Binary Search",
            "Design",
            "Segment Tree",
            "Prefix Sum",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "[\"MyCalendarThree\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]",
                "Output": "[null, 1, 1, 2, 3, 3, 3]",
                "Explanation": "MyCalendarThree myCalendarThree = new MyCalendarThree();\nmyCalendarThree.book(10, 20); // return 1\nmyCalendarThree.book(50, 60); // return 1\nmyCalendarThree.book(10, 40); // return 2\nmyCalendarThree.book(5, 15); // return 3\nmyCalendarThree.book(5, 10); // return 3\nmyCalendarThree.book(25, 55); // return 3"
            }
        ]
    },
    {
        "Title": "Flood Fill",
        "slug": "flood-fill",
        "description": "An image is represented by an `m x n` integer grid `image` where `image[i][j]` represents the pixel value of the image.\n\n\nYou are also given three integers `sr`, `sc`, and `color`. You should perform a **flood fill** on the image starting from the pixel `image[sr][sc]`.\n\n\nTo perform a **flood fill**, consider the starting pixel, plus any pixels connected **4-directionally** to the starting pixel of the same color as the starting pixel, plus any pixels connected **4-directionally** to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with `color`.\n\n\nReturn *the modified image after performing the flood fill*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2",
                "Output": "** [[2,2,2],[2,2,0],[2,0,1]]",
                "Explanation": "** From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel."
            }
        ]
    },
    {
        "Title": "Asteroid Collision",
        "slug": "asteroid-collision",
        "description": "We are given an array `asteroids` of integers representing asteroids in a row.\n\n\nFor each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.\n\n\nFind out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Stack",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** asteroids = [5,10,-5]",
                "Output": "** [5,10]",
                "Explanation": "** The 10 and -5 collide resulting in 10. The 5 and 10 never collide."
            },
            {
                "Input": "** asteroids = [8,-8]",
                "Output": "** []",
                "Explanation": "** The 8 and -8 collide exploding each other."
            },
            {
                "Input": "** asteroids = [10,2,-5]",
                "Output": "** [10]",
                "Explanation": "** The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10."
            }
        ]
    },
    {
        "Title": "Parse Lisp Expression",
        "slug": "parse-lisp-expression",
        "description": "You are given a string expression representing a Lisp-like expression to return the integer value of.\n\n\nThe syntax for these expressions is given as follows.\n\n\n An expression is either an integer, let expression, add expression, mult expression, or an assigned variable. Expressions always evaluate to a single integer.\n (An integer could be positive or negative.)\n A let expression takes the form `\"(let v1 e1 v2 e2 ... vn en expr)\"`, where let is always the string `\"let\"`, then there are one or more pairs of alternating variables and expressions, meaning that the first variable `v1` is assigned the value of the expression `e1`, the second variable `v2` is assigned the value of the expression `e2`, and so on sequentially; and then the value of this let expression is the value of the expression `expr`.\n An add expression takes the form `\"(add e1 e2)\"` where add is always the string `\"add\"`, there are always two expressions `e1`, `e2` and the result is the addition of the evaluation of `e1` and the evaluation of `e2`.\n A mult expression takes the form `\"(mult e1 e2)\"` where mult is always the string `\"mult\"`, there are always two expressions `e1`, `e2` and the result is the multiplication of the evaluation of e1 and the evaluation of e2.\n For this question, we will use a smaller subset of variable names. A variable starts with a lowercase letter, then zero or more lowercase letters or digits. Additionally, for your convenience, the names `\"add\"`, `\"let\"`, and `\"mult\"` are protected and will never be used as variable names.\n Finally, there is the concept of scope. When an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. It is guaranteed that every expression is legal. Please see the examples for more details on the scope.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "String",
            "Stack",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** expression = \"(let x 2 (mult x (let x 3 y 4 (add x y))))\"",
                "Output": "** 14",
                "Explanation": "** In the expression (add x y), when checking for the value of the variable x,\nwe check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.\nSince x = 3 is found first, the value of x is 3."
            },
            {
                "Input": "** expression = \"(let x 3 x 2 x)\"",
                "Output": "** 2",
                "Explanation": "** Assignment in let statements is processed sequentially."
            },
            {
                "Input": "** expression = \"(let x 1 y 2 x (add x y) (add x y))\"",
                "Output": "** 5",
                "Explanation": "** The first (add x y) evaluates as 3, and is assigned to x.\nThe second (add x y) evaluates as 3+2 = 5."
            }
        ]
    },
    {
        "Title": "Monotone Increasing Digits",
        "slug": "monotone-increasing-digits",
        "description": "An integer has **monotone increasing digits** if and only if each pair of adjacent digits `x` and `y` satisfy `x <= y`.\n\n\nGiven an integer `n`, return *the largest number that is less than or equal to* `n` *with **monotone increasing digits***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** n = 10",
                "Output": "** 9",
                "Explanation": null
            },
            {
                "Input": "** n = 1234",
                "Output": "** 1234",
                "Explanation": null
            },
            {
                "Input": "** n = 332",
                "Output": "** 299",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Daily Temperatures",
        "slug": "daily-temperatures",
        "description": "Given an array of integers `temperatures` represents the daily temperatures, return *an array* `answer` *such that* `answer[i]` *is the number of days you have to wait after the* `ith` *day to get a warmer temperature*. If there is no future day for which this is possible, keep `answer[i] == 0` instead.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Stack",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** temperatures = [73,74,75,71,69,72,76,73]",
                "Output": "** [1,1,4,2,1,1,0,0]",
                "Explanation": null
            },
            {
                "Input": "** temperatures = [30,40,50,60]",
                "Output": "** [1,1,1,0]",
                "Explanation": null
            },
            {
                "Input": "** temperatures = [30,60,90]",
                "Output": "** [1,1,0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Delete and Earn",
        "slug": "delete-and-earn",
        "description": "You are given an integer array `nums`. You want to maximize the number of points you get by performing the following operation any number of times:\n\n\n Pick any `nums[i]` and delete it to earn `nums[i]` points. Afterwards, you must delete **every** element equal to `nums[i] - 1` and **every** element equal to `nums[i] + 1`.\n\n\nReturn *the **maximum number of points** you can earn by applying the above operation some number of times*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [3,4,2]",
                "Output": "** 6",
                "Explanation": "** You can perform the following operations:\n- Delete 4 to earn 4 points. Consequently, 3 is also deleted. nums = [2].\n- Delete 2 to earn 2 points. nums = [].\nYou earn a total of 6 points."
            },
            {
                "Input": "** nums = [2,2,3,3,3,4]",
                "Output": "** 9",
                "Explanation": "** You can perform the following operations:\n- Delete a 3 to earn 3 points. All 2's and 4's are also deleted. nums = [3,3].\n- Delete a 3 again to earn 3 points. nums = [3].\n- Delete a 3 once more to earn 3 points. nums = [].\nYou earn a total of 9 points."
            }
        ]
    },
    {
        "Title": "Cherry Pickup",
        "slug": "cherry-pickup",
        "description": "You are given an `n x n` `grid` representing a field of cherries, each cell is one of three possible integers.\n\n\n `0` means the cell is empty, so you can pass through,\n `1` means the cell contains a cherry that you can pick up and pass through, or\n `-1` means the cell contains a thorn that blocks your way.\n\n\nReturn *the maximum number of cherries you can collect by following the rules below*:\n\n\n Starting at the position `(0, 0)` and reaching `(n - 1, n - 1)` by moving right or down through valid path cells (cells with value `0` or `1`).\n After reaching `(n - 1, n - 1)`, returning to `(0, 0)` by moving left or up through valid path cells.\n When passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell `0`.\n If there is no valid path between `(0, 0)` and `(n - 1, n - 1)`, then no cherries can be collected.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[0,1,-1],[1,0,-1],[1,1,1]]",
                "Output": "** 5",
                "Explanation": "** The player started at (0, 0) and went down, down, right right to reach (2, 2).\n4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].\nThen, the player went left, up, up, left to return home, picking up one more cherry.\nThe total number of cherries picked up is 5, and this is the maximum possible."
            }
        ]
    },
    {
        "Title": "Network Delay Time",
        "slug": "network-delay-time",
        "description": "You are given a network of `n` nodes, labeled from `1` to `n`. You are also given `times`, a list of travel times as directed edges `times[i] = (ui, vi, wi)`, where `ui` is the source node, `vi` is the target node, and `wi` is the time it takes for a signal to travel from source to target.\n\n\nWe will send a signal from a given node `k`. Return *the **minimum** time it takes for all the* `n` *nodes to receive the signal*. If it is impossible for all the `n` nodes to receive the signal, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Graph",
            "Heap (Priority Queue)",
            "Shortest Path"
        ],
        "examples": [
            {
                "Input": "** times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Smallest Letter Greater Than Target",
        "slug": "find-smallest-letter-greater-than-target",
        "description": "You are given an array of characters `letters` that is sorted in **non-decreasing order**, and a character `target`. There are **at least two different** characters in `letters`.\n\n\nReturn *the smallest character in* `letters` *that is lexicographically greater than* `target`. If such a character does not exist, return the first character in `letters`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** letters = [\"c\",\"f\",\"j\"], target = \"a\"",
                "Output": "** \"c\"",
                "Explanation": "** The smallest character that is lexicographically greater than 'a' in letters is 'c'."
            },
            {
                "Input": "** letters = [\"c\",\"f\",\"j\"], target = \"c\"",
                "Output": "** \"f\"",
                "Explanation": "** The smallest character that is lexicographically greater than 'c' in letters is 'f'."
            },
            {
                "Input": "** letters = [\"x\",\"x\",\"y\",\"y\"], target = \"z\"",
                "Output": "** \"x\"",
                "Explanation": "** There are no characters in letters that is lexicographically greater than 'z' so we return letters[0]."
            }
        ]
    },
    {
        "Title": "Prefix and Suffix Search",
        "slug": "prefix-and-suffix-search",
        "description": "Design a special dictionary that searches the words in it by a prefix and a suffix.\n\n\nImplement the `WordFilter` class:\n\n\n `WordFilter(string[] words)` Initializes the object with the `words` in the dictionary.\n `f(string pref, string suff)` Returns *the index of the word in the dictionary,* which has the prefix `pref` and the suffix `suff`. If there is more than one valid index, return **the largest** of them. If there is no such word in the dictionary, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Design",
            "Trie"
        ],
        "examples": [
            {
                "Input": "[\"WordFilter\", \"f\"]\n[[[\"apple\"]], [\"a\", \"e\"]]",
                "Output": "[null, 0]",
                "Explanation": "WordFilter wordFilter = new WordFilter([\"apple\"]);\nwordFilter.f(\"a\", \"e\"); // return 0, because the word at index 0 has prefix = \"a\" and suffix = \"e\"."
            }
        ]
    },
    {
        "Title": "Min Cost Climbing Stairs",
        "slug": "min-cost-climbing-stairs",
        "description": "You are given an integer array `cost` where `cost[i]` is the cost of `ith` step on a staircase. Once you pay the cost, you can either climb one or two steps.\n\n\nYou can either start from the step with index `0`, or the step with index `1`.\n\n\nReturn *the minimum cost to reach the top of the floor*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** cost = [10,15,20]",
                "Output": "** 15",
                "Explanation": "** You will start at index 1.\n- Pay 15 and climb two steps to reach the top.\nThe total cost is 15."
            },
            {
                "Input": "** cost = [1,100,1,1,1,100,1,1,100,1]",
                "Output": "** 6",
                "Explanation": "** You will start at index 0.\n- Pay 1 and climb two steps to reach index 2.\n- Pay 1 and climb two steps to reach index 4.\n- Pay 1 and climb two steps to reach index 6.\n- Pay 1 and climb one step to reach index 7.\n- Pay 1 and climb two steps to reach index 9.\n- Pay 1 and climb one step to reach the top.\nThe total cost is 6."
            }
        ]
    },
    {
        "Title": "Largest Number At Least Twice of Others",
        "slug": "largest-number-at-least-twice-of-others",
        "description": "You are given an integer array `nums` where the largest integer is **unique**.\n\n\nDetermine whether the largest element in the array is **at least twice** as much as every other number in the array. If it is, return *the **index** of the largest element, or return* `-1` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [3,6,1,0]",
                "Output": "** 1",
                "Explanation": "** 6 is the largest integer.\nFor every other number in the array x, 6 is at least twice as big as x.\nThe index of value 6 is 1, so we return 1."
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** -1",
                "Explanation": "** 4 is less than twice the value of 3, so we return -1."
            }
        ]
    },
    {
        "Title": "Shortest Completing Word",
        "slug": "shortest-completing-word",
        "description": "Given a string `licensePlate` and an array of strings `words`, find the **shortest completing** word in `words`.\n\n\nA **completing** word is a word that **contains all the letters** in `licensePlate`. **Ignore numbers and spaces** in `licensePlate`, and treat letters as **case insensitive**. If a letter appears more than once in `licensePlate`, then it must appear in the word the same number of times or more.\n\n\nFor example, if `licensePlate` `= \"aBc 12c\"`, then it contains letters `'a'`, `'b'` (ignoring case), and `'c'` twice. Possible **completing** words are `\"abccdef\"`, `\"caaacab\"`, and `\"cbca\"`.\n\n\nReturn *the shortest **completing** word in* `words`*.* It is guaranteed an answer exists. If there are multiple shortest **completing** words, return the **first** one that occurs in `words`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** licensePlate = \"1s3 PSt\", words = [\"step\",\"steps\",\"stripe\",\"stepple\"]",
                "Output": "** \"steps\"",
                "Explanation": "** licensePlate contains letters 's', 'p', 's' (ignoring case), and 't'.\n\"step\" contains 't' and 'p', but only contains 1 's'.\n\"steps\" contains 't', 'p', and both 's' characters.\n\"stripe\" is missing an 's'.\n\"stepple\" is missing an 's'.\nSince \"steps\" is the only word containing all the letters, that is the answer."
            },
            {
                "Input": "** licensePlate = \"1s3 456\", words = [\"looks\",\"pest\",\"stew\",\"show\"]",
                "Output": "** \"pest\"",
                "Explanation": "** licensePlate only contains the letter 's'. All the words contain 's', but among these \"pest\", \"stew\", and \"show\" are shortest. The answer is \"pest\" because it is the word that appears earliest of the 3."
            }
        ]
    },
    {
        "Title": "Contain Virus",
        "slug": "contain-virus",
        "description": "A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.\n\n\nThe world is modeled as an `m x n` binary grid `isInfected`, where `isInfected[i][j] == 0` represents uninfected cells, and `isInfected[i][j] == 1` represents cells contaminated with the virus. A wall (and only one wall) can be installed between any two **4-directionally** adjacent cells, on the shared boundary.\n\n\nEvery night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. Resources are limited. Each day, you can install walls around only one region (i.e., the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night). There **will never be a tie**.\n\n\nReturn *the number of walls used to quarantine all the infected regions*. If the world will become fully infected, return the number of walls used.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** isInfected = [[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]",
                "Output": "** 10",
                "Explanation": "** There are 2 contaminated regions.\nOn the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is:\n![](https://assets.leetcode.com/uploads/2021/06/01/virus12edited-grid.jpg)\nOn the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained.\n![](https://assets.leetcode.com/uploads/2021/06/01/virus13edited-grid.jpg)"
            },
            {
                "Input": "** isInfected = [[1,1,1],[1,0,1],[1,1,1]]",
                "Output": "** 4",
                "Explanation": "** Even though there is only one cell saved, there are 4 walls built.\nNotice that walls are only built on the shared boundary of two different cells."
            }
        ]
    },
    {
        "Title": "Open the Lock",
        "slug": "open-the-lock",
        "description": "You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: `'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'`. The wheels can rotate freely and wrap around: for example we can turn `'9'` to be `'0'`, or `'0'` to be `'9'`. Each move consists of turning one wheel one slot.\n\n\nThe lock initially starts at `'0000'`, a string representing the state of the 4 wheels.\n\n\nYou are given a list of `deadends` dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.\n\n\nGiven a `target` representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\"",
                "Output": "** 6",
                "Explanation": "** \nA sequence of valid moves would be \"0000\" -> \"1000\" -> \"1100\" -> \"1200\" -> \"1201\" -> \"1202\" -> \"0202\".\nNote that a sequence like \"0000\" -> \"0001\" -> \"0002\" -> \"0102\" -> \"0202\" would be invalid,\nbecause the wheels of the lock become stuck after the display becomes the dead end \"0102\"."
            },
            {
                "Input": "** deadends = [\"8888\"], target = \"0009\"",
                "Output": "** 1",
                "Explanation": "** We can turn the last wheel in reverse to move from \"0000\" -> \"0009\"."
            },
            {
                "Input": "** deadends = [\"8887\",\"8889\",\"8878\",\"8898\",\"8788\",\"8988\",\"7888\",\"9888\"], target = \"8888\"",
                "Output": "** -1",
                "Explanation": "** We cannot reach the target without getting stuck."
            }
        ]
    },
    {
        "Title": "Cracking the Safe",
        "slug": "cracking-the-safe",
        "description": "There is a safe protected by a password. The password is a sequence of `n` digits where each digit can be in the range `[0, k - 1]`.\n\n\nThe safe has a peculiar way of checking the password. When you enter in a sequence, it checks the **most recent** `n` **digits** that were entered each time you type a digit.\n\n\n For example, the correct password is `\"345\"` and you enter in `\"012345\"`:\n\t+ After typing `0`, the most recent `3` digits is `\"0\"`, which is incorrect.\n\t+ After typing `1`, the most recent `3` digits is `\"01\"`, which is incorrect.\n\t+ After typing `2`, the most recent `3` digits is `\"012\"`, which is incorrect.\n\t+ After typing `3`, the most recent `3` digits is `\"123\"`, which is incorrect.\n\t+ After typing `4`, the most recent `3` digits is `\"234\"`, which is incorrect.\n\t+ After typing `5`, the most recent `3` digits is `\"345\"`, which is correct and the safe unlocks.\n\n\nReturn *any string of **minimum length** that will unlock the safe **at some point** of entering it*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Depth-First Search",
            "Graph",
            "Eulerian Circuit"
        ],
        "examples": [
            {
                "Input": "** n = 1, k = 2",
                "Output": "** \"10\"",
                "Explanation": "** The password is a single digit, so enter each digit. \"01\" would also unlock the safe."
            },
            {
                "Input": "** n = 2, k = 2",
                "Output": "** \"01100\"",
                "Explanation": "** For each possible password:\n- \"00\" is typed in starting from the 4th digit.\n- \"01\" is typed in starting from the 1st digit.\n- \"10\" is typed in starting from the 3rd digit.\n- \"11\" is typed in starting from the 2nd digit.\nThus \"01100\" will unlock the safe. \"10011\", and \"11001\" would also unlock the safe."
            }
        ]
    },
    {
        "Title": "Reach a Number",
        "slug": "reach-a-number",
        "description": "You are standing at position `0` on an infinite number line. There is a destination at position `target`.\n\n\nYou can make some number of moves `numMoves` so that:\n\n\n On each move, you can either go left or right.\n During the `ith` move (starting from `i == 1` to `i == numMoves`), you take `i` steps in the chosen direction.\n\n\nGiven the integer `target`, return *the **minimum** number of moves required (i.e., the minimum* `numMoves`*) to reach the destination*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** target = 2",
                "Output": "** 3",
                "Explanation": "**\nOn the 1st move, we step from 0 to 1 (1 step).\nOn the 2nd move, we step from 1 to -1 (2 steps).\nOn the 3rd move, we step from -1 to 2 (3 steps)."
            },
            {
                "Input": "** target = 3",
                "Output": "** 2",
                "Explanation": "**\nOn the 1st move, we step from 0 to 1 (1 step).\nOn the 2nd move, we step from 1 to 3 (2 steps)."
            }
        ]
    },
    {
        "Title": "Pyramid Transition Matrix",
        "slug": "pyramid-transition-matrix",
        "description": "You are stacking blocks to form a pyramid. Each block has a color, which is represented by a single letter. Each row of blocks contains **one less block** than the row beneath it and is centered on top.\n\n\nTo make the pyramid aesthetically pleasing, there are only specific **triangular patterns** that are allowed. A triangular pattern consists of a **single block** stacked on top of **two blocks**. The patterns are given\u00a0as a list of\u00a0three-letter strings `allowed`, where the first two characters of a pattern represent the left and right bottom blocks respectively, and the third character is the top block.\n\n\n For example, `\"ABC\"` represents a triangular pattern with a `'C'` block stacked on top of an `'A'` (left) and `'B'` (right) block. Note that this is different from `\"BAC\"` where `'B'` is on the left bottom and `'A'` is on the right bottom.\n\n\nYou start with a bottom row of blocks `bottom`, given as a single string, that you **must** use as the base of the pyramid.\n\n\nGiven `bottom` and `allowed`, return `true` *if you can build the pyramid all the way to the top such that **every triangular pattern** in the pyramid is in* `allowed`*, or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Bit Manipulation",
            "Depth-First Search",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** bottom = \"BCD\", allowed = [\"BCC\",\"CDE\",\"CEA\",\"FFF\"]",
                "Output": "** true",
                "Explanation": "** The allowed triangular patterns are shown on the right.\nStarting from the bottom (level 3), we can build \"CE\" on level 2 and then build \"A\" on level 1.\nThere are three triangular patterns in the pyramid, which are \"BCC\", \"CDE\", and \"CEA\". All are allowed."
            },
            {
                "Input": "** bottom = \"AAAA\", allowed = [\"AAB\",\"AAC\",\"BCD\",\"BBE\",\"DEF\"]",
                "Output": "** false",
                "Explanation": "** The allowed triangular patterns are shown on the right.\nStarting from the bottom (level 4), there are multiple ways to build level 3, but trying all the possibilites, you will get always stuck before building level 1."
            }
        ]
    },
    {
        "Title": "Set Intersection Size At Least Two",
        "slug": "set-intersection-size-at-least-two",
        "description": "You are given a 2D integer array `intervals` where `intervals[i] = [starti, endi]` represents all the integers from `starti` to `endi` inclusively.\n\n\nA **containing set** is an array `nums` where each interval from `intervals` has **at least two** integers in `nums`.\n\n\n For example, if `intervals = [[1,3], [3,7], [8,9]]`, then `[1,2,4,7,8,9]` and `[2,3,4,8,9]` are **containing sets**.\n\n\nReturn *the minimum possible size of a containing set*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** intervals = [[1,3],[3,7],[8,9]]",
                "Output": "** 5",
                "Explanation": "** let nums = [2, 3, 4, 8, 9].\nIt can be shown that there cannot be any containing array of size 4."
            },
            {
                "Input": "** intervals = [[1,3],[1,4],[2,5],[3,5]]",
                "Output": "** 3",
                "Explanation": "** let nums = [2, 3, 4].\nIt can be shown that there cannot be any containing array of size 2."
            },
            {
                "Input": "** intervals = [[1,2],[2,3],[2,4],[4,5]]",
                "Output": "** 5",
                "Explanation": "** let nums = [1, 2, 3, 4, 5].\nIt can be shown that there cannot be any containing array of size 4."
            }
        ]
    },
    {
        "Title": "Special Binary String",
        "slug": "special-binary-string",
        "description": "Special binary strings** are binary strings with the following two properties:\n\n\n The number of `0`'s is equal to the number of `1`'s.\n Every prefix of the binary string has at least as many `1`'s as `0`'s.\n\n\nYou are given a **special binary** string `s`.\n\n\nA move consists of choosing two consecutive, non-empty, special substrings of `s`, and swapping them. Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.\n\n\nReturn *the lexicographically largest resulting string possible after applying the mentioned operations on the string*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** s = \"11011000\"",
                "Output": "** \"11100100\"",
                "Explanation": "** The strings \"10\" [occuring at s[1]] and \"1100\" [at s[3]] are swapped.\nThis is the lexicographically largest string possible after some number of swaps."
            },
            {
                "Input": "** s = \"10\"",
                "Output": "** \"10\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Prime Number of Set Bits in Binary Representation",
        "slug": "prime-number-of-set-bits-in-binary-representation",
        "description": "Given two integers `left` and `right`, return *the **count** of numbers in the **inclusive** range* `[left, right]` *having a **prime number of set bits** in their binary representation*.\n\n\nRecall that the **number of set bits** an integer has is the number of `1`'s present when written in binary.\n\n\n For example, `21` written in binary is `10101`, which has `3` set bits.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** left = 6, right = 10",
                "Output": "** 4",
                "Explanation": "**\n6  -> 110 (2 set bits, 2 is prime)\n7  -> 111 (3 set bits, 3 is prime)\n8  -> 1000 (1 set bit, 1 is not prime)\n9  -> 1001 (2 set bits, 2 is prime)\n10 -> 1010 (2 set bits, 2 is prime)\n4 numbers have a prime number of set bits."
            },
            {
                "Input": "** left = 10, right = 15",
                "Output": "** 5",
                "Explanation": "**\n10 -> 1010 (2 set bits, 2 is prime)\n11 -> 1011 (3 set bits, 3 is prime)\n12 -> 1100 (2 set bits, 2 is prime)\n13 -> 1101 (3 set bits, 3 is prime)\n14 -> 1110 (3 set bits, 3 is prime)\n15 -> 1111 (4 set bits, 4 is not prime)\n5 numbers have a prime number of set bits."
            }
        ]
    },
    {
        "Title": "Partition Labels",
        "slug": "partition-labels",
        "description": "You are given a string `s`. We want to partition the string into as many parts as possible so that each letter appears in at most one part.\n\n\nNote that the partition is done so that after concatenating all the parts in order, the resultant string should be `s`.\n\n\nReturn *a list of integers representing the size of these parts*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Two Pointers",
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"ababcbacadefegdehijhklij\"",
                "Output": "** [9,7,8]",
                "Explanation": "**\nThe partition is \"ababcbaca\", \"defegde\", \"hijhklij\".\nThis is a partition so that each letter appears in at most one part.\nA partition like \"ababcbacadefegde\", \"hijhklij\" is incorrect, because it splits s into less parts."
            },
            {
                "Input": "** s = \"eccbbbbdec\"",
                "Output": "** [10]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Largest Plus Sign",
        "slug": "largest-plus-sign",
        "description": "You are given an integer `n`. You have an `n x n` binary grid `grid` with all values initially `1`'s except for some indices given in the array `mines`. The `ith` element of the array `mines` is defined as `mines[i] = [xi, yi]` where `grid[xi][yi] == 0`.\n\n\nReturn *the order of the largest **axis-aligned** plus sign of* 1*'s contained in* `grid`. If there is none, return `0`.\n\n\nAn **axis-aligned plus sign** of `1`'s of order `k` has some center `grid[r][c] == 1` along with four arms of length `k - 1` going up, down, left, and right, and made of `1`'s. Note that there could be `0`'s or `1`'s beyond the arms of the plus sign, only the relevant area of the plus sign is checked for `1`'s.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** n = 5, mines = [[4,2]]",
                "Output": "** 2",
                "Explanation": "** In the above grid, the largest plus sign can only be of order 2. One of them is shown."
            },
            {
                "Input": "** n = 1, mines = [[0,0]]",
                "Output": "** 0",
                "Explanation": "** There is no plus sign, so return 0."
            }
        ]
    },
    {
        "Title": "Couples Holding Hands",
        "slug": "couples-holding-hands",
        "description": "There are `n` couples sitting in `2n` seats arranged in a row and want to hold hands.\n\n\nThe people and seats are represented by an integer array `row` where `row[i]` is the ID of the person sitting in the `ith` seat. The couples are numbered in order, the first couple being `(0, 1)`, the second couple being `(2, 3)`, and so on with the last couple being `(2n - 2, 2n - 1)`.\n\n\nReturn *the minimum number of swaps so that every couple is sitting side by side*. A swap consists of choosing any two people, then they stand up and switch seats.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Greedy",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** row = [0,2,1,3]",
                "Output": "** 1",
                "Explanation": "** We only need to swap the second (row[1]) and third (row[2]) person."
            },
            {
                "Input": "** row = [3,2,0,1]",
                "Output": "** 0",
                "Explanation": "** All couples are already seated side by side."
            }
        ]
    },
    {
        "Title": "Toeplitz Matrix",
        "slug": "toeplitz-matrix",
        "description": "Given an `m x n` `matrix`, return\u00a0*`true`\u00a0if the matrix is Toeplitz. Otherwise, return `false`.\n\n\nA matrix is **Toeplitz** if every diagonal from top-left to bottom-right has the same elements.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]",
                "Output": "** true",
                "Explanation": "**\nIn the above grid, the\u00a0diagonals are:\n\"[9]\", \"[5, 5]\", \"[1, 1, 1]\", \"[2, 2, 2]\", \"[3, 3]\", \"[4]\".\nIn each diagonal all elements are the same, so the answer is True."
            },
            {
                "Input": "** matrix = [[1,2],[2,2]]",
                "Output": "** false",
                "Explanation": "**\nThe diagonal \"[1, 2]\" has different elements."
            }
        ]
    },
    {
        "Title": "Reorganize String",
        "slug": "reorganize-string",
        "description": "Given a string `s`, rearrange the characters of `s` so that any two adjacent characters are not the same.\n\n\nReturn *any possible rearrangement of* `s` *or return* `\"\"` *if not possible*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** s = \"aab\"",
                "Output": "** \"aba\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"aaab\"",
                "Output": "** \"\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Max Chunks To Make Sorted II",
        "slug": "max-chunks-to-make-sorted-ii",
        "description": "You are given an integer array `arr`.\n\n\nWe split `arr` into some number of **chunks** (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.\n\n\nReturn *the largest number of chunks we can make to sort the array*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Stack",
            "Greedy",
            "Sorting",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** arr = [5,4,3,2,1]",
                "Output": "** 1",
                "Explanation": "**\nSplitting into two or more chunks will not return the required result.\nFor example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted."
            },
            {
                "Input": "** arr = [2,1,3,4,4]",
                "Output": "** 4",
                "Explanation": "**\nWe can split into two chunks, such as [2, 1], [3, 4, 4].\nHowever, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible."
            }
        ]
    },
    {
        "Title": "Max Chunks To Make Sorted",
        "slug": "max-chunks-to-make-sorted",
        "description": "You are given an integer array `arr` of length `n` that represents a permutation of the integers in the range `[0, n - 1]`.\n\n\nWe split `arr` into some number of **chunks** (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.\n\n\nReturn *the largest number of chunks we can make to sort the array*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Stack",
            "Greedy",
            "Sorting",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** arr = [4,3,2,1,0]",
                "Output": "** 1",
                "Explanation": "**\nSplitting into two or more chunks will not return the required result.\nFor example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted."
            },
            {
                "Input": "** arr = [1,0,2,3,4]",
                "Output": "** 4",
                "Explanation": "**\nWe can split into two chunks, such as [1, 0], [2, 3, 4].\nHowever, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible."
            }
        ]
    },
    {
        "Title": "Basic Calculator IV",
        "slug": "basic-calculator-iv",
        "description": "Given an expression such as `expression = \"e + 8 - a + 5\"` and an evaluation map such as `{\"e\": 1}` (given in terms of `evalvars = [\"e\"]` and `evalints = [1]`), return a list of tokens representing the simplified expression, such as `[\"-1*a\",\"14\"]`\n\n\n An expression alternates chunks and symbols, with a space separating each chunk and symbol.\n A chunk is either an expression in parentheses, a variable, or a non-negative integer.\n A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like `\"2x\"` or `\"-x\"`.\n\n\nExpressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction.\n\n\n For example, `expression = \"1 + 2 * 3\"` has an answer of `[\"7\"]`.\n\n\nThe format of the output is as follows:\n\n\n For each term of free variables with a non-zero coefficient, we write the free variables within a term in sorted order lexicographically.\n\t+ For example, we would never write a term like `\"b*a*c\"`, only `\"a*b*c\"`.\n Terms have degrees equal to the number of free variables being multiplied, counting multiplicity. We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.\n\t+ For example, `\"a*a*b*c\"` has degree `4`.\n The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) A leading coefficient of 1 is still printed.\n An example of a well-formatted answer is `[\"-2*a*a*a\", \"3*a*a*b\", \"3*b*b\", \"4*a\", \"5*c\", \"-6\"]`.\n Terms (including constant terms) with coefficient `0` are not included.\n\t+ For example, an expression of `\"0\"` has an output of `[]`.\n\n\nNote:** You may assume that the given expression is always valid. All intermediate results will be in the range of `[-231, 231 - 1]`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "Math",
            "String",
            "Stack",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** expression = \"e + 8 - a + 5\", evalvars = [\"e\"], evalints = [1]",
                "Output": "** [\"-1*a\",\"14\"]",
                "Explanation": null
            },
            {
                "Input": "** expression = \"e - 8 + temperature - pressure\", evalvars = [\"e\", \"temperature\"], evalints = [1, 12]",
                "Output": "** [\"-1*pressure\",\"5\"]",
                "Explanation": null
            },
            {
                "Input": "** expression = \"(e + 8) * (e - 8)\", evalvars = [], evalints = []",
                "Output": "** [\"1*e*e\",\"-64\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Jewels and Stones",
        "slug": "jewels-and-stones",
        "description": "You're given strings `jewels` representing the types of stones that are jewels, and `stones` representing the stones you have. Each character in `stones` is a type of stone you have. You want to know how many of the stones you have are also jewels.\n\n\nLetters are case sensitive, so `\"a\"` is considered a different type of stone from `\"A\"`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** jewels = \"aA\", stones = \"aAAbbbb\"",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** jewels = \"z\", stones = \"ZZ\"",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sliding Puzzle",
        "slug": "sliding-puzzle",
        "description": "On an `2 x 3` board, there are five tiles labeled from `1` to `5`, and an empty square represented by `0`. A **move** consists of choosing `0` and a 4-directionally adjacent number and swapping it.\n\n\nThe state of the board is solved if and only if the board is `[[1,2,3],[4,5,0]]`.\n\n\nGiven the puzzle board `board`, return *the least number of moves required so that the state of the board is solved*. If it is impossible for the state of the board to be solved, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Breadth-First Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** board = [[1,2,3],[4,0,5]]",
                "Output": "** 1",
                "Explanation": "** Swap the 0 and the 5 in one move."
            },
            {
                "Input": "** board = [[1,2,3],[5,4,0]]",
                "Output": "** -1",
                "Explanation": "** No number of moves will make the board solved."
            },
            {
                "Input": "** board = [[4,1,2],[5,0,3]]",
                "Output": "** 5",
                "Explanation": "** 5 is the smallest number of moves that solves the board.\nAn example path:\nAfter move 0: [[4,1,2],[5,0,3]]\nAfter move 1: [[4,1,2],[0,5,3]]\nAfter move 2: [[0,1,2],[4,5,3]]\nAfter move 3: [[1,0,2],[4,5,3]]\nAfter move 4: [[1,2,0],[4,5,3]]\nAfter move 5: [[1,2,3],[4,5,0]]"
            }
        ]
    },
    {
        "Title": "Global and Local Inversions",
        "slug": "global-and-local-inversions",
        "description": "You are given an integer array `nums` of length `n` which represents a permutation of all the integers in the range `[0, n - 1]`.\n\n\nThe number of **global inversions** is the number of the different pairs `(i, j)` where:\n\n\n `0 <= i < j < n`\n `nums[i] > nums[j]`\n\n\nThe number of **local inversions** is the number of indices `i` where:\n\n\n `0 <= i < n - 1`\n `nums[i] > nums[i + 1]`\n\n\nReturn `true` *if the number of **global inversions** is equal to the number of **local inversions***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math"
        ],
        "examples": [
            {
                "Input": "** nums = [1,0,2]",
                "Output": "** true",
                "Explanation": "** There is 1 global inversion and 1 local inversion."
            },
            {
                "Input": "** nums = [1,2,0]",
                "Output": "** false",
                "Explanation": "** There are 2 global inversions and 1 local inversion."
            }
        ]
    },
    {
        "Title": "Swap Adjacent in LR String",
        "slug": "swap-adjacent-in-lr-string",
        "description": "In a string composed of `'L'`, `'R'`, and `'X'` characters, like `\"RXXLRXRXL\"`, a move consists of either replacing one occurrence of `\"XL\"` with `\"LX\"`, or replacing one occurrence of `\"RX\"` with `\"XR\"`. Given the starting string `start` and the ending string `end`, return `True` if and only if there exists a sequence of moves to transform one string to the other.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** start = \"RXXLRXRXL\", end = \"XRLXXRRLX\"",
                "Output": "** true",
                "Explanation": "** We can transform start to end following these steps:\nRXXLRXRXL ->\nXRXLRXRXL ->\nXRLXRXRXL ->\nXRLXXRRXL ->\nXRLXXRRLX"
            },
            {
                "Input": "** start = \"X\", end = \"L\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Swim in Rising Water",
        "slug": "swim-in-rising-water",
        "description": "You are given an `n x n` integer matrix `grid` where each value `grid[i][j]` represents the elevation at that point `(i, j)`.\n\n\nThe rain starts to fall. At time `t`, the depth of the water everywhere is `t`. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most `t`. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.\n\n\nReturn *the least time until you can reach the bottom right square* `(n - 1, n - 1)` *if you start at the top left square* `(0, 0)`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Heap (Priority Queue)",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[0,2],[1,3]]",
                "Output": "** 3\nExplanation:\nAt time 0, you are in grid location (0, 0).\nYou cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.\nYou cannot reach point (1, 1) until time 3.\nWhen the depth of water is 3, we can swim anywhere inside the grid.",
                "Explanation": null
            },
            {
                "Input": "** grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]",
                "Output": "** 16",
                "Explanation": "** The final route is shown.\nWe need to wait until time 16 so that (0, 0) and (4, 4) are connected."
            }
        ]
    },
    {
        "Title": "K-th Symbol in Grammar",
        "slug": "k-th-symbol-in-grammar",
        "description": "We build a table of `n` rows (**1-indexed**). We start by writing `0` in the `1st` row. Now in every subsequent row, we look at the previous row and replace each occurrence of `0` with `01`, and each occurrence of `1` with `10`.\n\n\n For example, for `n = 3`, the `1st` row is `0`, the `2nd` row is `01`, and the `3rd` row is `0110`.\n\n\nGiven two integer `n` and `k`, return the `kth` (**1-indexed**) symbol in the `nth` row of a table of `n` rows.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Bit Manipulation",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** n = 1, k = 1",
                "Output": "** 0",
                "Explanation": "** row 1: 0"
            },
            {
                "Input": "** n = 2, k = 1",
                "Output": "** 0",
                "Explanation": "** \nrow 1: 0\nrow 2: 01"
            },
            {
                "Input": "** n = 2, k = 2",
                "Output": "** 1",
                "Explanation": "** \nrow 1: 0\nrow 2: 01"
            }
        ]
    },
    {
        "Title": "Reaching Points",
        "slug": "reaching-points",
        "description": "Given four integers `sx`, `sy`, `tx`, and `ty`, return `true` *if it is possible to convert the point* `(sx, sy)` *to the point* `(tx, ty)` *through some operations**, or* `false` *otherwise*.\n\n\nThe allowed operation on some point `(x, y)` is to convert it to either `(x, x + y)` or `(x + y, y)`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** sx = 1, sy = 1, tx = 3, ty = 5",
                "Output": "** true",
                "Explanation": "**\nOne series of moves that transforms the starting point to the target is:\n(1, 1) -> (1, 2)\n(1, 2) -> (3, 2)\n(3, 2) -> (3, 5)"
            },
            {
                "Input": "** sx = 1, sy = 1, tx = 2, ty = 2",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** sx = 1, sy = 1, tx = 1, ty = 1",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Rabbits in Forest",
        "slug": "rabbits-in-forest",
        "description": "There is a forest with an unknown number of rabbits. We asked n rabbits **\"How many rabbits have the same color as you?\"** and collected the answers in an integer array `answers` where `answers[i]` is the answer of the `ith` rabbit.\n\n\nGiven the array `answers`, return *the minimum number of rabbits that could be in the forest*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** answers = [1,1,2]",
                "Output": "** 5",
                "Explanation": "**\nThe two rabbits that answered \"1\" could both be the same color, say red.\nThe rabbit that answered \"2\" can't be red or the answers would be inconsistent.\nSay the rabbit that answered \"2\" was blue.\nThen there should be 2 other blue rabbits in the forest that didn't answer into the array.\nThe smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn't."
            },
            {
                "Input": "** answers = [10,10,10]",
                "Output": "** 11",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Transform to Chessboard",
        "slug": "transform-to-chessboard",
        "description": "You are given an `n x n` binary grid `board`. In each move, you can swap any two rows with each other, or any two columns with each other.\n\n\nReturn *the minimum number of moves to transform the board into a **chessboard board***. If the task is impossible, return `-1`.\n\n\nA **chessboard board** is a board where no `0`'s and no `1`'s are 4-directionally adjacent.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Bit Manipulation",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]",
                "Output": "** 2",
                "Explanation": "** One potential sequence of moves is shown.\nThe first move swaps the first and second column.\nThe second move swaps the second and third row."
            },
            {
                "Input": "** board = [[0,1],[1,0]]",
                "Output": "** 0",
                "Explanation": "** Also note that the board with 0 in the top left corner, is also a valid chessboard."
            },
            {
                "Input": "** board = [[1,0],[1,0]]",
                "Output": "** -1",
                "Explanation": "** No matter what sequence of moves you make, you cannot end with a valid chessboard."
            }
        ]
    },
    {
        "Title": "Minimum Distance Between BST Nodes",
        "slug": "minimum-distance-between-bst-nodes",
        "description": "Given the `root` of a Binary Search Tree (BST), return *the minimum difference between the values of any two different nodes in the tree*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [4,2,6,1,3]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** root = [1,0,48,null,null,12,49]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Letter Case Permutation",
        "slug": "letter-case-permutation",
        "description": "Given a string `s`, you\u00a0can transform every letter individually to be lowercase or uppercase to create another string.\n\n\nReturn *a list of all possible strings we could create*. Return the output in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Backtracking",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** s = \"a1b2\"",
                "Output": "** [\"a1b2\",\"a1B2\",\"A1b2\",\"A1B2\"]",
                "Explanation": null
            },
            {
                "Input": "** s = \"3z4\"",
                "Output": "** [\"3z4\",\"3Z4\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Is Graph Bipartite?",
        "slug": "is-graph-bipartite",
        "description": "There is an **undirected** graph with `n` nodes, where each node is numbered between `0` and `n - 1`. You are given a 2D array `graph`, where `graph[u]` is an array of nodes that node `u` is adjacent to. More formally, for each `v` in `graph[u]`, there is an undirected edge between node `u` and node `v`. The graph has the following properties:\n\n\n There are no self-edges (`graph[u]` does not contain `u`).\n There are no parallel edges (`graph[u]` does not contain duplicate values).\n If `v` is in `graph[u]`, then `u` is in `graph[v]` (the graph is undirected).\n The graph may not be connected, meaning there may be two nodes `u` and `v` such that there is no path between them.\n\n\nA graph is **bipartite** if the nodes can be partitioned into two independent sets `A` and `B` such that **every** edge in the graph connects a node in set `A` and a node in set `B`.\n\n\nReturn `true` *if and only if it is **bipartite***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** graph = [[1,2,3],[0,2],[0,1,3],[0,2]]",
                "Output": "** false",
                "Explanation": "** There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other."
            },
            {
                "Input": "** graph = [[1,3],[0,2],[1,3],[0,2]]",
                "Output": "** true",
                "Explanation": "** We can partition the nodes into two sets: {0, 2} and {1, 3}."
            }
        ]
    },
    {
        "Title": "K-th Smallest Prime Fraction",
        "slug": "k-th-smallest-prime-fraction",
        "description": "You are given a sorted integer array `arr` containing `1` and **prime** numbers, where all the integers of `arr` are unique. You are also given an integer `k`.\n\n\nFor every `i` and `j` where `0 <= i < j < arr.length`, we consider the fraction `arr[i] / arr[j]`.\n\n\nReturn *the* `kth` *smallest fraction considered*. Return your answer as an array of integers of size `2`, where `answer[0] == arr[i]` and `answer[1] == arr[j]`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** arr = [1,2,3,5], k = 3",
                "Output": "** [2,5]",
                "Explanation": "** The fractions to be considered in sorted order are:\n1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.\nThe third fraction is 2/5."
            },
            {
                "Input": "** arr = [1,7], k = 1",
                "Output": "** [1,7]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Cheapest Flights Within K Stops",
        "slug": "cheapest-flights-within-k-stops",
        "description": "There are `n` cities connected by some number of flights. You are given an array `flights` where `flights[i] = [fromi, toi, pricei]` indicates that there is a flight from city `fromi` to city `toi` with cost `pricei`.\n\n\nYou are also given three integers `src`, `dst`, and `k`, return ***the cheapest price** from* `src` *to* `dst` *with at most* `k` *stops.* If there is no such route, return`-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming",
            "Depth-First Search",
            "Breadth-First Search",
            "Graph",
            "Heap (Priority Queue)",
            "Shortest Path"
        ],
        "examples": [
            {
                "Input": "** n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1",
                "Output": "** 700",
                "Explanation": "**\nThe graph is shown above.\nThe optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.\nNote that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops."
            },
            {
                "Input": "** n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1",
                "Output": "** 200",
                "Explanation": "**\nThe graph is shown above.\nThe optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200."
            },
            {
                "Input": "** n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0",
                "Output": "** 500",
                "Explanation": "**\nThe graph is shown above.\nThe optimal path with no stops from city 0 to 2 is marked in red and has cost 500."
            }
        ]
    },
    {
        "Title": "Rotated Digits",
        "slug": "rotated-digits",
        "description": "An integer `x` is a **good** if after rotating each digit individually by 180 degrees, we get a valid number that is different from `x`. Each digit must be rotated - we cannot choose to leave it alone.\n\n\nA number is valid if each digit remains a digit after rotation. For example:\n\n\n `0`, `1`, and `8` rotate to themselves,\n `2` and `5` rotate to each other (in this case they are rotated in a different direction, in other words, `2` or `5` gets mirrored),\n `6` and `9` rotate to each other, and\n the rest of the numbers do not rotate to any other number and become invalid.\n\n\nGiven an integer `n`, return *the number of **good** integers in the range* `[1, n]`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** n = 10",
                "Output": "** 4",
                "Explanation": "** There are four good numbers in the range [1, 10] : 2, 5, 6, 9.\nNote that 1 and 10 are not good numbers, since they remain unchanged after rotating."
            },
            {
                "Input": "** n = 1",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** n = 2",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Escape The Ghosts",
        "slug": "escape-the-ghosts",
        "description": "You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point `[0, 0]`, and you are given a destination point `target = [xtarget, ytarget]` that you are trying to get to. There are several ghosts on the map with their starting positions given as a 2D array `ghosts`, where `ghosts[i] = [xi, yi]` represents the starting position of the `ith` ghost. All inputs are **integral coordinates**.\n\n\nEach turn, you and all the ghosts may independently choose to either **move 1 unit** in any of the four cardinal directions: north, east, south, or west, or **stay still**. All actions happen **simultaneously**.\n\n\nYou escape if and only if you can reach the target **before** any ghost reaches you. If you reach any square (including the target) at the **same time** as a ghost, it **does not** count as an escape.\n\n\nReturn `true` *if it is possible to escape regardless of how the ghosts move, otherwise return* `false`*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math"
        ],
        "examples": [
            {
                "Input": "** ghosts = [[1,0],[0,3]], target = [0,1]",
                "Output": "** true",
                "Explanation": "** You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you."
            },
            {
                "Input": "** ghosts = [[1,0]], target = [2,0]",
                "Output": "** false",
                "Explanation": "** You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination."
            },
            {
                "Input": "** ghosts = [[2,0]], target = [1,0]",
                "Output": "** false",
                "Explanation": "** The ghost can reach the target at the same time as you."
            }
        ]
    },
    {
        "Title": "Domino and Tromino Tiling",
        "slug": "domino-and-tromino-tiling",
        "description": "You have two types of tiles: a `2 x 1` domino shape and a tromino shape. You may rotate these shapes.\n\n\n![](https://assets.leetcode.com/uploads/2021/07/15/lc-domino.jpg)\nGiven an integer n, return *the number of ways to tile an* `2 x n` *board*. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\nIn a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** 5",
                "Explanation": "** The five different ways are show above."
            }
        ]
    },
    {
        "Title": "Custom Sort String",
        "slug": "custom-sort-string",
        "description": "You are given two strings `order` and `s`. All the characters of `order` are **unique** and were sorted in some custom order previously.\n\n\nPermute the characters of `s` so that they match the order that `order` was sorted. More specifically, if a character `x` occurs before a character `y` in `order`, then `x` should occur before `y` in the permuted string.\n\n\nReturn *any permutation of* `s` *that satisfies this property*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "**   order = \"cba\", s = \"abcd\"",
                "Output": "**   \"cbad\"",
                "Explanation": "**  `\"a\"`, `\"b\"`, `\"c\"` appear in order, so the order of `\"a\"`, `\"b\"`, `\"c\"` should be `\"c\"`, `\"b\"`, and `\"a\"`.\n\n\nSince `\"d\"` does not appear in `order`, it can be at any position in the returned string. `\"dcba\"`, `\"cdba\"`, `\"cbda\"` are also valid outputs."
            },
            {
                "Input": "**   order = \"bcafg\", s = \"abcd\"",
                "Output": "**   \"bcad\"",
                "Explanation": "**  The characters `\"b\"`, `\"c\"`, and `\"a\"` from `order` dictate the order for the characters in `s`. The character `\"d\"` in `s` does not appear in `order`, so its position is flexible.\n\n\nFollowing the order of appearance in `order`, `\"b\"`, `\"c\"`, and `\"a\"` from `s` should be arranged as `\"b\"`, `\"c\"`, `\"a\"`. `\"d\"` can be placed at any position since it's not in order. The output `\"bcad\"` correctly follows this rule. Other arrangements like `\"bacd\"` or `\"bcda\"` would also be valid, as long as `\"b\"`, `\"c\"`, `\"a\"` maintain their order.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= order.length <= 26`\n* `1 <= s.length <= 200`\n* `order` and `s` consist of lowercase English letters.\n* All the characters of `order` are **unique**.\n\n\nSimilarQuestions: [2545]"
            }
        ]
    },
    {
        "Title": "Number of Matching Subsequences",
        "slug": "number-of-matching-subsequences",
        "description": "Given a string `s` and an array of strings `words`, return *the number of* `words[i]` *that is a subsequence of* `s`.\n\n\nA **subsequence** of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\n\n For example, `\"ace\"` is a subsequence of `\"abcde\"`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Binary Search",
            "Dynamic Programming",
            "Trie",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** s = \"abcde\", words = [\"a\",\"bb\",\"acd\",\"ace\"]",
                "Output": "** 3",
                "Explanation": "** There are three strings in words that are a subsequence of s: \"a\", \"acd\", \"ace\"."
            },
            {
                "Input": "** s = \"dsahjpjauf\", words = [\"ahjpjau\",\"ja\",\"ahbwzgqnuk\",\"tnmlanowax\"]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Preimage Size of Factorial Zeroes Function",
        "slug": "preimage-size-of-factorial-zeroes-function",
        "description": "Let `f(x)` be the number of zeroes at the end of `x!`. Recall that `x! = 1 * 2 * 3 * ... * x` and by convention, `0! = 1`.\n\n\n For example, `f(3) = 0` because `3! = 6` has no zeroes at the end, while `f(11) = 2` because `11! = 39916800` has two zeroes at the end.\n\n\nGiven an integer `k`, return the number of non-negative integers `x` have the property that `f(x) = k`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** k = 0",
                "Output": "** 5",
                "Explanation": "** 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes."
            },
            {
                "Input": "** k = 5",
                "Output": "** 0",
                "Explanation": "** There is no x such that x! ends in k = 5 zeroes."
            },
            {
                "Input": "** k = 3",
                "Output": "** 5",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Valid Tic-Tac-Toe State",
        "slug": "valid-tic-tac-toe-state",
        "description": "Given a Tic-Tac-Toe board as a string array `board`, return `true` if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.\n\n\nThe board is a `3 x 3` array that consists of characters `' '`, `'X'`, and `'O'`. The `' '` character represents an empty square.\n\n\nHere are the rules of Tic-Tac-Toe:\n\n\n Players take turns placing characters into empty squares `' '`.\n The first player always places `'X'` characters, while the second player always places `'O'` characters.\n `'X'` and `'O'` characters are always placed into empty squares, never filled ones.\n The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.\n The game also ends if all squares are non-empty.\n No more moves can be played if the game is over.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** board = [\"O  \",\"   \",\"   \"]",
                "Output": "** false",
                "Explanation": "** The first player always plays \"X\"."
            },
            {
                "Input": "** board = [\"XOX\",\" X \",\"   \"]",
                "Output": "** false",
                "Explanation": "** Players take turns making moves."
            },
            {
                "Input": "** board = [\"XOX\",\"O O\",\"XOX\"]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Subarrays with Bounded Maximum",
        "slug": "number-of-subarrays-with-bounded-maximum",
        "description": "Given an integer array `nums` and two integers `left` and `right`, return *the number of contiguous non-empty **subarrays** such that the value of the maximum array element in that subarray is in the range* `[left, right]`.\n\n\nThe test cases are generated so that the answer will fit in a **32-bit** integer.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** nums = [2,1,4,3], left = 2, right = 3",
                "Output": "** 3",
                "Explanation": "** There are three subarrays that meet the requirements: [2], [2, 1], [3]."
            },
            {
                "Input": "** nums = [2,9,2,5,6], left = 2, right = 8",
                "Output": "** 7",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Rotate String",
        "slug": "rotate-string",
        "description": "Given two strings `s` and `goal`, return `true` *if and only if* `s` *can become* `goal` *after some number of **shifts** on* `s`.\n\n\nA **shift** on `s` consists of moving the leftmost character of `s` to the rightmost position.\n\n\n For example, if `s = \"abcde\"`, then it will be `\"bcdea\"` after one shift.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "String Matching"
        ],
        "examples": [
            {
                "Input": "** s = \"abcde\", goal = \"cdeab\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"abcde\", goal = \"abced\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "All Paths From Source to Target",
        "slug": "all-paths-from-source-to-target",
        "description": "Given a directed acyclic graph (**DAG**) of `n` nodes labeled from `0` to `n - 1`, find all possible paths from node `0` to node `n - 1` and return them in **any order**.\n\n\nThe graph is given as follows: `graph[i]` is a list of all nodes you can visit from node `i` (i.e., there is a directed edge from node `i` to node `graph[i][j]`).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Backtracking",
            "Depth-First Search",
            "Breadth-First Search",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** graph = [[1,2],[3],[3],[]]",
                "Output": "** [[0,1,3],[0,2,3]]",
                "Explanation": "** There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3."
            },
            {
                "Input": "** graph = [[4,3,1],[3,2,4],[3],[4],[]]",
                "Output": "** [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Smallest Rotation with Highest Score",
        "slug": "smallest-rotation-with-highest-score",
        "description": "You are given an array `nums`. You can rotate it by a non-negative integer `k` so that the array becomes `[nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]`. Afterward, any entries that are less than or equal to their index are worth one point.\n\n\n For example, if we have `nums = [2,4,1,3,0]`, and we rotate by `k = 2`, it becomes `[1,3,0,2,4]`. This is worth `3` points because `1 > 0` [no points], `3 > 1` [no points], `0 <= 2` [one point], `2 <= 3` [one point], `4 <= 4` [one point].\n\n\nReturn *the rotation index* `k` *that corresponds to the highest score we can achieve if we rotated* `nums` *by it*. If there are multiple answers, return the smallest such index `k`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [2,3,1,4,0]",
                "Output": "** 3",
                "Explanation": "** Scores for each k are listed below: \nk = 0,  nums = [2,3,1,4,0],    score 2\nk = 1,  nums = [3,1,4,0,2],    score 3\nk = 2,  nums = [1,4,0,2,3],    score 3\nk = 3,  nums = [4,0,2,3,1],    score 4\nk = 4,  nums = [0,2,3,1,4],    score 3\nSo we should choose k = 3, which has the highest score."
            },
            {
                "Input": "** nums = [1,3,0,2,4]",
                "Output": "** 0",
                "Explanation": "** nums will always have 3 points no matter how it shifts.\nSo we will choose the smallest k, which is 0."
            }
        ]
    },
    {
        "Title": "Champagne Tower",
        "slug": "champagne-tower",
        "description": "We stack glasses in a pyramid, where the **first** row has `1` glass, the **second** row has `2` glasses, and so on until the 100th row.\u00a0 Each glass holds one cup\u00a0of champagne.\n\n\nThen, some champagne is poured into the first glass at the top.\u00a0 When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.\u00a0 When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.\u00a0 (A glass at the bottom row has its excess champagne fall on the floor.)\n\n\nFor example, after one cup of champagne is poured, the top most glass is full.\u00a0 After two cups of champagne are poured, the two glasses on the second row are half full.\u00a0 After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.\u00a0 After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.\n\n\n![](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/09/tower.png)\n\n\nNow after pouring some non-negative integer cups of champagne, return how full the `jth` glass in the `ith` row is (both `i` and `j` are 0-indexed.)\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** poured = 1, query_row = 1, query_glass = 1",
                "Output": "** 0.00000",
                "Explanation": "** We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty."
            },
            {
                "Input": "** poured = 2, query_row = 1, query_glass = 1",
                "Output": "** 0.50000",
                "Explanation": "** We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange."
            },
            {
                "Input": "** poured = 100000009, query_row = 33, query_glass = 17",
                "Output": "** 1.00000",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Swaps To Make Sequences Increasing",
        "slug": "minimum-swaps-to-make-sequences-increasing",
        "description": "You are given two integer arrays of the same length `nums1` and `nums2`. In one operation, you are allowed to swap `nums1[i]` with `nums2[i]`.\n\n\n For example, if `nums1 = [1,2,3,8]`, and `nums2 = [5,6,7,4]`, you can swap the element at `i = 3` to obtain `nums1 = [1,2,3,4]` and `nums2 = [5,6,7,8]`.\n\n\nReturn *the minimum number of needed operations to make* `nums1` *and* `nums2` ***strictly increasing***. The test cases are generated so that the given input always makes it possible.\n\n\nAn array `arr` is **strictly increasing** if and only if `arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1]`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums1 = [1,3,5,4], nums2 = [1,2,3,7]",
                "Output": "** 1",
                "Explanation": "** \nSwap nums1[3] and nums2[3]. Then the sequences are:\nnums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4]\nwhich are both strictly increasing."
            },
            {
                "Input": "** nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Eventual Safe States",
        "slug": "find-eventual-safe-states",
        "description": "There is a directed graph of `n` nodes with each node labeled from `0` to `n - 1`. The graph is represented by a **0-indexed** 2D integer array `graph` where `graph[i]` is an integer array of nodes adjacent to node `i`, meaning there is an edge from node `i` to each node in `graph[i]`.\n\n\nA node is a **terminal node** if there are no outgoing edges. A node is a **safe node** if every possible path starting from that node leads to a **terminal node** (or another safe node).\n\n\nReturn *an array containing all the **safe nodes** of the graph*. The answer should be sorted in **ascending** order.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Graph",
            "Topological Sort"
        ],
        "examples": [
            {
                "Input": "** graph = [[1,2],[2,3],[5],[0],[5],[],[]]",
                "Output": "** [2,4,5,6]",
                "Explanation": "** The given graph is shown above.\nNodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.\nEvery path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6."
            }
        ]
    },
    {
        "Title": "Bricks Falling When Hit",
        "slug": "bricks-falling-when-hit",
        "description": "You are given an `m x n` binary `grid`, where each `1` represents a brick and `0` represents an empty space. A brick is **stable** if:\n\n\n It is directly connected to the top of the grid, or\n At least one other brick in its four adjacent cells is **stable**.\n\n\nYou are also given an array `hits`, which is a sequence of erasures we want to apply. Each time we want to erase the brick at the location `hits[i] = (rowi, coli)`. The brick on that location\u00a0(if it exists) will disappear. Some other bricks may no longer be stable because of that erasure and will **fall**. Once a brick falls, it is **immediately** erased from the `grid` (i.e., it does not land on other stable bricks).\n\n\nReturn *an array* `result`*, where each* `result[i]` *is the number of bricks that will **fall** after the* `ith` *erasure is applied.\n\n\nNote** that an erasure may refer to a location with no brick, and if it does, no bricks drop.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Union Find",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]",
                "Output": "** [2]",
                "Explanation": "** Starting with the grid:\n[[1,0,0,0],\n [1,1,1,0]]\nWe erase the underlined brick at (1,0), resulting in the grid:\n[[1,0,0,0],\n [0,1,1,0]]\nThe two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is:\n[[1,0,0,0],\n [0,0,0,0]]\nHence the result is [2]."
            },
            {
                "Input": "** grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]",
                "Output": "** [0,0]",
                "Explanation": "** Starting with the grid:\n[[1,0,0,0],\n [1,1,0,0]]\nWe erase the underlined brick at (1,1), resulting in the grid:\n[[1,0,0,0],\n [1,0,0,0]]\nAll remaining bricks are still stable, so no bricks fall. The grid remains the same:\n[[1,0,0,0],\n [1,0,0,0]]\nNext, we erase the underlined brick at (1,0), resulting in the grid:\n[[1,0,0,0],\n [0,0,0,0]]\nOnce again, all remaining bricks are still stable, so no bricks fall.\nHence the result is [0,0]."
            }
        ]
    },
    {
        "Title": "Unique Morse Code Words",
        "slug": "unique-morse-code-words",
        "description": "International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:\n\n\n `'a'` maps to `\".-\"`,\n `'b'` maps to `\"-...\"`,\n `'c'` maps to `\"-.-.\"`, and so on.\n\n\nFor convenience, the full table for the `26` letters of the English alphabet is given below:\n\n\n\n```\n\n[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\n```\n\nGiven an array of strings `words` where each word can be written as a concatenation of the Morse code of each letter.\n\n\n For example, `\"cab\"` can be written as `\"-.-..--...\"`, which is the concatenation of `\"-.-.\"`, `\".-\"`, and `\"-...\"`. We will call such a concatenation the **transformation** of a word.\n\n\nReturn *the number of different **transformations** among all words we have*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** words = [\"gin\",\"zen\",\"gig\",\"msg\"]",
                "Output": "** 2",
                "Explanation": "** The transformation of each word is:\n\"gin\" -> \"--...-.\"\n\"zen\" -> \"--...-.\"\n\"gig\" -> \"--...--.\"\n\"msg\" -> \"--...--.\"\nThere are 2 different transformations: \"--...-.\" and \"--...--.\"."
            },
            {
                "Input": "** words = [\"a\"]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Split Array With Same Average",
        "slug": "split-array-with-same-average",
        "description": "You are given an integer array `nums`.\n\n\nYou should move each element of `nums` into one of the two arrays `A` and `B` such that `A` and `B` are non-empty, and `average(A) == average(B)`.\n\n\nReturn `true` if it is possible to achieve that and `false` otherwise.\n\n\nNote** that for an array `arr`, `average(arr)` is the sum of all the elements of `arr` over the length of `arr`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5,6,7,8]",
                "Output": "** true",
                "Explanation": "** We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have an average of 4.5."
            },
            {
                "Input": "** nums = [3,1]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Lines To Write String",
        "slug": "number-of-lines-to-write-string",
        "description": "You are given a string `s` of lowercase English letters and an array `widths` denoting **how many pixels wide** each lowercase English letter is. Specifically, `widths[0]` is the width of `'a'`, `widths[1]` is the width of `'b'`, and so on.\n\n\nYou are trying to write `s` across several lines, where **each line is no longer than** `100` **pixels**. Starting at the beginning of `s`, write as many letters on the first line such that the total width does not exceed `100` pixels. Then, from where you stopped in `s`, continue writing as many letters as you can on the second line. Continue this process until you have written all of `s`.\n\n\nReturn *an array* `result` *of length 2 where:\n\n\n `result[0]` *is the total number of lines.\n `result[1]` *is the width of the last line in pixels.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "examples": [
            {
                "Input": "** widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"abcdefghijklmnopqrstuvwxyz\"",
                "Output": "** [3,60]",
                "Explanation": "** You can write s as follows:\nabcdefghij  // 100 pixels wide\nklmnopqrst  // 100 pixels wide\nuvwxyz      // 60 pixels wide\nThere are a total of 3 lines, and the last line is 60 pixels wide."
            },
            {
                "Input": "** widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"bbbcccdddaaa\"",
                "Output": "** [2,4]",
                "Explanation": "** You can write s as follows:\nbbbcccdddaa  // 98 pixels wide\na            // 4 pixels wide\nThere are a total of 2 lines, and the last line is 4 pixels wide."
            }
        ]
    },
    {
        "Title": "Max Increase to Keep City Skyline",
        "slug": "max-increase-to-keep-city-skyline",
        "description": "There is a city composed of `n x n` blocks, where each block contains a single building shaped like a vertical square prism. You are given a **0-indexed** `n x n` integer matrix `grid` where `grid[r][c]` represents the **height** of the building located in the block at row `r` and column `c`.\n\n\nA city's **skyline** is the\u00a0outer contour formed by all the building when viewing the side of the city from a distance. The **skyline** from each cardinal direction north, east, south, and west may be different.\n\n\nWe are allowed to increase the height of **any number of buildings by any amount** (the amount can be different per building). The height of a `0`-height building can also be increased. However, increasing the height of a building should **not** affect the city's **skyline** from any cardinal direction.\n\n\nReturn *the **maximum total sum** that the height of the buildings can be increased by **without** changing the city's **skyline** from any cardinal direction*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]",
                "Output": "** 35",
                "Explanation": "** The building heights are shown in the center of the above image.\nThe skylines when viewed from each cardinal direction are drawn in red.\nThe grid after increasing the height of buildings without affecting skylines is:\ngridNew = [ [8, 4, 8, 7],\n            [7, 4, 7, 7],\n            [9, 4, 8, 7],\n            [3, 3, 3, 3] ]"
            }
        ]
    },
    {
        "Title": "Soup Servings",
        "slug": "soup-servings",
        "description": "There are two types of soup: **type A** and **type B**. Initially, we have `n` ml of each type of soup. There are four kinds of operations:\n\n\n1. Serve `100` ml of **soup A** and `0` ml of **soup B**,\n2. Serve `75` ml of **soup A** and `25` ml of **soup B**,\n3. Serve `50` ml of **soup A** and `50` ml of **soup B**, and\n4. Serve `25` ml of **soup A** and `75` ml of **soup B**.\n\n\nWhen we serve some soup, we give it to someone, and we no longer have it. Each turn, we will choose from the four operations with an equal probability `0.25`. If the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. We stop once we no longer have some quantity of both types of soup.\n\n\nNote** that we do not have an operation where all `100` ml's of **soup B** are used first.\n\n\nReturn *the probability that **soup A** will be empty first, plus half the probability that **A** and **B** become empty at the same time*. Answers within `10-5` of the actual answer will be accepted.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Probability and Statistics"
        ],
        "examples": [
            {
                "Input": "** n = 50",
                "Output": "** 0.62500",
                "Explanation": "** If we choose the first two operations, A will become empty first.\nFor the third operation, A and B will become empty at the same time.\nFor the fourth operation, B will become empty first.\nSo the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625."
            },
            {
                "Input": "** n = 100",
                "Output": "** 0.71875",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Expressive Words",
        "slug": "expressive-words",
        "description": "Sometimes people repeat letters to represent extra feeling. For example:\n\n\n `\"hello\" -> \"heeellooo\"`\n `\"hi\" -> \"hiiii\"`\n\n\nIn these strings like `\"heeellooo\"`, we have groups of adjacent letters that are all the same: `\"h\"`, `\"eee\"`, `\"ll\"`, `\"ooo\"`.\n\n\nYou are given a string `s` and an array of query strings `words`. A query word is **stretchy** if it can be made to be equal to `s` by any number of applications of the following extension operation: choose a group consisting of characters `c`, and add some number of characters `c` to the group so that the size of the group is **three or more**.\n\n\n For example, starting with `\"hello\"`, we could do an extension on the group `\"o\"` to get `\"hellooo\"`, but we cannot get `\"helloo\"` since the group `\"oo\"` has a size less than three. Also, we could do another extension like `\"ll\" -> \"lllll\"` to get `\"helllllooo\"`. If `s = \"helllllooo\"`, then the query word `\"hello\"` would be **stretchy** because of these two extension operations: `query = \"hello\" -> \"hellooo\" -> \"helllllooo\" = s`.\n\n\nReturn *the number of query strings that are **stretchy***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"heeellooo\", words = [\"hello\", \"hi\", \"helo\"]",
                "Output": "** 1",
                "Explanation": "** \nWe can extend \"e\" and \"o\" in the word \"hello\" to get \"heeellooo\".\nWe can't extend \"helo\" to get \"heeellooo\" because the group \"ll\" is not size 3 or more."
            },
            {
                "Input": "** s = \"zzzzzyyyyy\", words = [\"zzyy\",\"zy\",\"zyy\"]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Chalkboard XOR Game",
        "slug": "chalkboard-xor-game",
        "description": "You are given an array of integers `nums` represents the numbers written on a chalkboard.\n\n\nAlice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first. If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become `0`, then that player loses. The bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is `0`.\n\n\nAlso, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to `0`, then that player wins.\n\n\nReturn `true` *if and only if Alice wins the game, assuming both players play optimally*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Bit Manipulation",
            "Brainteaser",
            "Game Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [1,1,2]",
                "Output": "** false",
                "Explanation": "** \nAlice has two choices: erase 1 or erase 2. \nIf she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. \nIf Alice erases 2 first, now nums become [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose."
            },
            {
                "Input": "** nums = [0,1]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Subdomain Visit Count",
        "slug": "subdomain-visit-count",
        "description": "A website domain `\"discuss.leetcode.com\"` consists of various subdomains. At the top level, we have `\"com\"`, at the next level, we have `\"leetcode.com\"`\u00a0and at the lowest level, `\"discuss.leetcode.com\"`. When we visit a domain like `\"discuss.leetcode.com\"`, we will also visit the parent domains `\"leetcode.com\"` and `\"com\"` implicitly.\n\n\nA **count-paired domain** is a domain that has one of the two formats `\"rep d1.d2.d3\"` or `\"rep d1.d2\"` where `rep` is the number of visits to the domain and `d1.d2.d3` is the domain itself.\n\n\n For example, `\"9001 discuss.leetcode.com\"` is a **count-paired domain** that indicates that `discuss.leetcode.com` was visited `9001` times.\n\n\nGiven an array of **count-paired domains** `cpdomains`, return *an array of the **count-paired domains** of each subdomain in the input*. You may return the answer in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** cpdomains = [\"9001 discuss.leetcode.com\"]",
                "Output": "** [\"9001 leetcode.com\",\"9001 discuss.leetcode.com\",\"9001 com\"]",
                "Explanation": "** We only have one website domain: \"discuss.leetcode.com\".\nAs discussed above, the subdomain \"leetcode.com\" and \"com\" will also be visited. So they will all be visited 9001 times."
            },
            {
                "Input": "** cpdomains = [\"900 google.mail.com\", \"50 yahoo.com\", \"1 intel.mail.com\", \"5 wiki.org\"]",
                "Output": "** [\"901 mail.com\",\"50 yahoo.com\",\"900 google.mail.com\",\"5 wiki.org\",\"5 org\",\"1 intel.mail.com\",\"951 com\"]",
                "Explanation": "** We will visit \"google.mail.com\" 900 times, \"yahoo.com\" 50 times, \"intel.mail.com\" once and \"wiki.org\" 5 times.\nFor the subdomains, we will visit \"mail.com\" 900 + 1 = 901 times, \"com\" 900 + 50 + 1 = 951 times, and \"org\" 5 times."
            }
        ]
    },
    {
        "Title": "Largest Triangle Area",
        "slug": "largest-triangle-area",
        "description": "Given an array of points on the **X-Y** plane `points` where `points[i] = [xi, yi]`, return *the area of the largest triangle that can be formed by any three different points*. Answers within `10-5` of the actual answer will be accepted.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Geometry"
        ],
        "examples": [
            {
                "Input": "** points = [[0,0],[0,1],[1,0],[0,2],[2,0]]",
                "Output": "** 2.00000",
                "Explanation": "** The five points are shown in the above figure. The red triangle is the largest."
            }
        ]
    },
    {
        "Title": "Largest Sum of Averages",
        "slug": "largest-sum-of-averages",
        "description": "You are given an integer array `nums` and an integer `k`. You can partition the array into **at most** `k` non-empty adjacent subarrays. The **score** of a partition is the sum of the averages of each subarray.\n\n\nNote that the partition must use every integer in `nums`, and that the score is not necessarily an integer.\n\n\nReturn *the maximum **score** you can achieve of all the possible partitions*. Answers within `10-6` of the actual answer will be accepted.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [9,1,2,3,9], k = 3",
                "Output": "** 20.00000",
                "Explanation": "** \nThe best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\nWe could have also partitioned nums into [9, 1], [2], [3, 9], for example.\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse."
            },
            {
                "Input": "** nums = [1,2,3,4,5,6,7], k = 4",
                "Output": "** 20.50000",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Tree Pruning",
        "slug": "binary-tree-pruning",
        "description": "Given the `root` of a binary tree, return *the same tree where every subtree (of the given tree) not containing a* `1` *has been removed*.\n\n\nA subtree of a node `node` is `node` plus every node that is a descendant of `node`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,null,0,0,1]",
                "Output": "** [1,null,0,null,1]",
                "Explanation": "** \nOnly the red nodes satisfy the property \"every subtree not containing a 1\".\nThe diagram on the right represents the answer."
            },
            {
                "Input": "** root = [1,0,1,0,0,0,1]",
                "Output": "** [1,null,1,null,1]",
                "Explanation": null
            },
            {
                "Input": "** root = [1,1,0,1,1,0,1,0]",
                "Output": "** [1,1,0,1,1,null,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Bus Routes",
        "slug": "bus-routes",
        "description": "You are given an array `routes` representing bus routes where `routes[i]` is a bus route that the `ith` bus repeats forever.\n\n\n For example, if `routes[0] = [1, 5, 7]`, this means that the `0th` bus travels in the sequence `1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ...` forever.\n\n\nYou will start at the bus stop `source` (You are not on any bus initially), and you want to go to the bus stop `target`. You can travel between bus stops by buses only.\n\n\nReturn *the least number of buses you must take to travel from* `source` *to* `target`. Return `-1` if it is not possible.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** routes = [[1,2,7],[3,6,7]], source = 1, target = 6",
                "Output": "** 2",
                "Explanation": "** The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6."
            },
            {
                "Input": "** routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12",
                "Output": "** -1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Ambiguous Coordinates",
        "slug": "ambiguous-coordinates",
        "description": "We had some 2-dimensional coordinates, like `\"(1, 3)\"` or `\"(2, 0.5)\"`. Then, we removed all commas, decimal points, and spaces and ended up with the string s.\n\n\n For example, `\"(1, 3)\"` becomes `s = \"(13)\"` and `\"(2, 0.5)\"` becomes `s = \"(205)\"`.\n\n\nReturn *a list of strings representing all possibilities for what our original coordinates could have been*.\n\n\nOur original representation never had extraneous zeroes, so we never started with numbers like `\"00\"`, `\"0.0\"`, `\"0.00\"`, `\"1.0\"`, `\"001\"`, `\"00.01\"`, or any other number that can be represented with fewer digits. Also, a decimal point within a number never occurs without at least one digit occurring before it, so we never started with numbers like `\".1\"`.\n\n\nThe final answer list can be returned in any order. All coordinates in the final answer have exactly one space between them (occurring after the comma.)\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Backtracking",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** s = \"(123)\"",
                "Output": "** [\"(1, 2.3)\",\"(1, 23)\",\"(1.2, 3)\",\"(12, 3)\"]",
                "Explanation": null
            },
            {
                "Input": "** s = \"(0123)\"",
                "Output": "** [\"(0, 1.23)\",\"(0, 12.3)\",\"(0, 123)\",\"(0.1, 2.3)\",\"(0.1, 23)\",\"(0.12, 3)\"]",
                "Explanation": "** 0.0, 00, 0001 or 00.01 are not allowed."
            },
            {
                "Input": "** s = \"(00011)\"",
                "Output": "** [\"(0, 0.011)\",\"(0.001, 1)\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Linked List Components",
        "slug": "linked-list-components",
        "description": "You are given the `head` of a linked list containing unique integer values and an integer array `nums` that is a subset of the linked list values.\n\n\nReturn *the number of connected components in* `nums` *where two values are connected if they appear **consecutively** in the linked list*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Linked List"
        ],
        "examples": [
            {
                "Input": "** head = [0,1,2,3], nums = [0,1,3]",
                "Output": "** 2",
                "Explanation": "** 0 and 1 are connected, so [0, 1] and [3] are the two connected components."
            },
            {
                "Input": "** head = [0,1,2,3,4], nums = [0,3,1,4]",
                "Output": "** 2",
                "Explanation": "** 0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components."
            }
        ]
    },
    {
        "Title": "Race Car",
        "slug": "race-car",
        "description": "Your car starts at position `0` and speed `+1` on an infinite number line. Your car can go into negative positions. Your car drives automatically according to a sequence of instructions `'A'` (accelerate) and `'R'` (reverse):\n\n\n When you get an instruction `'A'`, your car does the following:\n\t+ `position += speed`\n\t+ `speed *= 2`\n When you get an instruction `'R'`, your car does the following:\n\t+ If your speed is positive then `speed = -1`\n\t+ otherwise `speed = 1`\n Your position stays the same.\n\n\nFor example, after commands `\"AAR\"`, your car goes to positions `0 --> 1 --> 3 --> 3`, and your speed goes to `1 --> 2 --> 4 --> -1`.\n\n\nGiven a target position `target`, return *the length of the shortest sequence of instructions to get there*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** target = 3",
                "Output": "** 2",
                "Explanation": "** \nThe shortest instruction sequence is \"AA\".\nYour position goes from 0 --> 1 --> 3."
            },
            {
                "Input": "** target = 6",
                "Output": "** 5",
                "Explanation": "** \nThe shortest instruction sequence is \"AAARA\".\nYour position goes from 0 --> 1 --> 3 --> 7 --> 7 --> 6."
            }
        ]
    },
    {
        "Title": "Most Common Word",
        "slug": "most-common-word",
        "description": "Given a string `paragraph` and a string array of the banned words `banned`, return *the most frequent word that is not banned*. It is **guaranteed** there is **at least one word** that is not banned, and that the answer is **unique**.\n\n\nThe words in `paragraph` are **case-insensitive** and the answer should be returned in **lowercase**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\", banned = [\"hit\"]",
                "Output": "** \"ball\"",
                "Explanation": "** \n\"hit\" occurs 3 times, but it is a banned word.\n\"ball\" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. \nNote that words in the paragraph are not case sensitive,\nthat punctuation is ignored (even if adjacent to words, such as \"ball,\"), \nand that \"hit\" isn't the answer even though it occurs more because it is banned."
            },
            {
                "Input": "** paragraph = \"a.\", banned = []",
                "Output": "** \"a\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Short Encoding of Words",
        "slug": "short-encoding-of-words",
        "description": "A **valid encoding** of an array of `words` is any reference string `s` and array of indices `indices` such that:\n\n\n `words.length == indices.length`\n The reference string `s` ends with the `'#'` character.\n For each index `indices[i]`, the **substring** of `s` starting from `indices[i]` and up to (but not including) the next `'#'` character is equal to `words[i]`.\n\n\nGiven an array of `words`, return *the **length of the shortest reference string*** `s` *possible of any **valid encoding** of* `words`*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Trie"
        ],
        "examples": [
            {
                "Input": "** words = [\"time\", \"me\", \"bell\"]",
                "Output": "** 10",
                "Explanation": "** A valid encoding would be s = \"time#bell#\" and indices = [0, 2, 5].\nwords[0] = \"time\", the substring of s starting from indices[0] = 0 to the next '#' is underlined in \"time#bell#\"\nwords[1] = \"me\", the substring of s starting from indices[1] = 2 to the next '#' is underlined in \"time#bell#\"\nwords[2] = \"bell\", the substring of s starting from indices[2] = 5 to the next '#' is underlined in \"time#bell#\""
            },
            {
                "Input": "** words = [\"t\"]",
                "Output": "** 2",
                "Explanation": "** A valid encoding would be s = \"t#\" and indices = [0]."
            }
        ]
    },
    {
        "Title": "Shortest Distance to a Character",
        "slug": "shortest-distance-to-a-character",
        "description": "Given a string `s` and a character `c` that occurs in `s`, return *an array of integers* `answer` *where* `answer.length == s.length` *and* `answer[i]` *is the **distance** from index* `i` *to the **closest** occurrence of character* `c` *in* `s`.\n\n\nThe **distance** between two indices `i` and `j` is `abs(i - j)`, where `abs` is the absolute value function.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"loveleetcode\", c = \"e\"",
                "Output": "** [3,2,1,0,1,0,0,1,2,2,1,0]",
                "Explanation": "** The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).\nThe closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.\nThe closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.\nFor index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.\nThe closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2."
            },
            {
                "Input": "** s = \"aaab\", c = \"b\"",
                "Output": "** [3,2,1,0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Card Flipping Game",
        "slug": "card-flipping-game",
        "description": "You are given two **0-indexed** integer arrays `fronts` and `backs` of length `n`, where the `ith` card has the positive integer `fronts[i]` printed on the front and `backs[i]` printed on the back. Initially, each card is placed on a table such that the front number is facing up and the other is facing down. You may flip over any number of cards (possibly zero).\n\n\nAfter flipping the cards, an integer is considered **good** if it is facing down on some card and **not** facing up on any card.\n\n\nReturn *the minimum possible good integer after flipping the cards*. If there are no good integers, return `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** fronts = [1,2,4,4,7], backs = [1,3,4,1,3]",
                "Output": "** 2",
                "Explanation": "**\nIf we flip the second card, the face up numbers are [1,3,4,4,7] and the face down are [1,2,4,1,3].\n2 is the minimum good integer as it appears facing down but not facing up.\nIt can be shown that 2 is the minimum possible good integer obtainable after flipping some cards."
            },
            {
                "Input": "** fronts = [1], backs = [1]",
                "Output": "** 0",
                "Explanation": "**\nThere are no good integers no matter how we flip the cards, so we return 0."
            }
        ]
    },
    {
        "Title": "Binary Trees With Factors",
        "slug": "binary-trees-with-factors",
        "description": "Given an array of unique integers, `arr`, where each integer `arr[i]` is strictly greater than `1`.\n\n\nWe make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children.\n\n\nReturn *the number of binary trees we can make*. The answer may be too large so return the answer **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Dynamic Programming",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** arr = [2,4]",
                "Output": "** 3",
                "Explanation": "** We can make these trees: [2], [4], [4, 2, 2]"
            },
            {
                "Input": "** arr = [2,4,5,10]",
                "Output": "** 7",
                "Explanation": "** We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2]."
            }
        ]
    },
    {
        "Title": "Goat Latin",
        "slug": "goat-latin",
        "description": "You are given a string `sentence` that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only.\n\n\nWe would like to convert the sentence to \"Goat Latin\" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows:\n\n\n If a word begins with a vowel (`'a'`, `'e'`, `'i'`, `'o'`, or `'u'`), append `\"ma\"` to the end of the word.\n\t+ For example, the word `\"apple\"` becomes `\"applema\"`.\n If a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add `\"ma\"`.\n\t+ For example, the word `\"goat\"` becomes `\"oatgma\"`.\n Add one letter `'a'` to the end of each word per its word index in the sentence, starting with `1`.\n\t+ For example, the first word gets `\"a\"` added to the end, the second word gets `\"aa\"` added to the end, and so on.\n\n\nReturn *the final sentence representing the conversion from sentence to Goat Latin*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** sentence = \"I speak Goat Latin\"",
                "Output": "** \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"",
                "Explanation": null
            },
            {
                "Input": "** sentence = \"The quick brown fox jumped over the lazy dog\"",
                "Output": "** \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Friends Of Appropriate Ages",
        "slug": "friends-of-appropriate-ages",
        "description": "There are `n` persons on a social media website. You are given an integer array `ages` where `ages[i]` is the age of the `ith` person.\n\n\nA Person `x` will not send a friend request to a person `y` (`x != y`) if any of the following conditions is true:\n\n\n `age[y] <= 0.5 * age[x] + 7`\n `age[y] > age[x]`\n `age[y] > 100 && age[x] < 100`\n\n\nOtherwise, `x` will send a friend request to `y`.\n\n\nNote that if `x` sends a request to `y`, `y` will not necessarily send a request to `x`. Also, a person will not send a friend request to themself.\n\n\nReturn *the total number of friend requests made*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** ages = [16,16]",
                "Output": "** 2",
                "Explanation": "** 2 people friend request each other."
            },
            {
                "Input": "** ages = [16,17,18]",
                "Output": "** 2",
                "Explanation": "** Friend requests are made 17 -> 16, 18 -> 17."
            },
            {
                "Input": "** ages = [20,30,100,110,120]",
                "Output": "** 3",
                "Explanation": "** Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100."
            }
        ]
    },
    {
        "Title": "Most Profit Assigning Work",
        "slug": "most-profit-assigning-work",
        "description": "You have `n` jobs and `m` workers. You are given three arrays: `difficulty`, `profit`, and `worker` where:\n\n\n `difficulty[i]` and `profit[i]` are the difficulty and the profit of the `ith` job, and\n `worker[j]` is the ability of `jth` worker (i.e., the `jth` worker can only complete a job with difficulty at most `worker[j]`).\n\n\nEvery worker can be assigned **at most one job**, but one job can be **completed multiple times**.\n\n\n For example, if three workers attempt the same job that pays `$1`, then the total profit will be `$3`. If a worker cannot complete any job, their profit is `$0`.\n\n\nReturn the maximum profit we can achieve after assigning the workers to the jobs.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]",
                "Output": "** 100",
                "Explanation": "** Workers are assigned jobs of difficulty [4,4,6,6] and they get a profit of [20,20,30,30] separately."
            },
            {
                "Input": "** difficulty = [85,47,57], profit = [24,66,99], worker = [40,25,25]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Making A Large Island",
        "slug": "making-a-large-island",
        "description": "You are given an `n x n` binary matrix `grid`. You are allowed to change **at most one** `0` to be `1`.\n\n\nReturn *the size of the largest **island** in* `grid` *after applying this operation*.\n\n\nAn **island** is a 4-directionally connected group of `1`s.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,0],[0,1]]",
                "Output": "** 3",
                "Explanation": "** Change one 0 to 1 and connect two 1s, then we get an island with area = 3."
            },
            {
                "Input": "** grid = [[1,1],[1,0]]",
                "Output": "** 4",
                "Explanation": "** Change the 0 to 1 and make the island bigger, only one island with area = 4."
            },
            {
                "Input": "** grid = [[1,1],[1,1]]",
                "Output": "** 4",
                "Explanation": "** Can't change any 0 to 1, only one island with area = 4."
            }
        ]
    },
    {
        "Title": "Count Unique Characters of All Substrings of a Given String",
        "slug": "count-unique-characters-of-all-substrings-of-a-given-string",
        "description": "Let's define a function `countUniqueChars(s)` that returns the number of unique characters in\u00a0`s`.\n\n\n For example, calling `countUniqueChars(s)` if `s = \"LEETCODE\"` then `\"L\"`, `\"T\"`, `\"C\"`, `\"O\"`, `\"D\"` are the unique characters since they appear only once in `s`, therefore `countUniqueChars(s) = 5`.\n\n\nGiven a string `s`, return the sum of `countUniqueChars(t)` where `t` is a substring of `s`. The test cases are generated such that the answer fits in a 32-bit integer.\n\n\nNotice that some substrings can be repeated so in this case you have to count the repeated ones too.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"ABC\"",
                "Output": "** 10",
                "Explanation": "** All possible substrings are: \"A\",\"B\",\"C\",\"AB\",\"BC\" and \"ABC\".\nEvery substring is composed with only unique letters.\nSum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10"
            },
            {
                "Input": "** s = \"ABA\"",
                "Output": "** 8",
                "Explanation": "** The same as example 1, except countUniqueChars(\"ABA\") = 1."
            },
            {
                "Input": "** s = \"LEETCODE\"",
                "Output": "** 92",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Consecutive Numbers Sum",
        "slug": "consecutive-numbers-sum",
        "description": "Given an integer `n`, return *the number of ways you can write* `n` *as the sum of consecutive positive integers.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** n = 5",
                "Output": "** 2",
                "Explanation": "** 5 = 2 + 3"
            },
            {
                "Input": "** n = 9",
                "Output": "** 3",
                "Explanation": "** 9 = 4 + 5 = 2 + 3 + 4"
            },
            {
                "Input": "** n = 15",
                "Output": "** 4",
                "Explanation": "** 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5"
            }
        ]
    },
    {
        "Title": "Positions of Large Groups",
        "slug": "positions-of-large-groups",
        "description": "In a string `s`\u00a0of lowercase letters, these letters form consecutive groups of the same character.\n\n\nFor example, a string like `s = \"abbxxxxzyy\"` has the groups `\"a\"`, `\"bb\"`, `\"xxxx\"`, `\"z\"`, and\u00a0`\"yy\"`.\n\n\nA group is identified by an interval\u00a0`[start, end]`, where\u00a0`start`\u00a0and\u00a0`end`\u00a0denote the start and end\u00a0indices (inclusive) of the group. In the above example,\u00a0`\"xxxx\"`\u00a0has the interval\u00a0`[3,6]`.\n\n\nA group is considered\u00a0**large**\u00a0if it has 3 or more characters.\n\n\nReturn\u00a0*the intervals of every **large** group sorted in\u00a0**increasing order by start index***.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"abbxxxxzzy\"",
                "Output": "** [[3,6]]",
                "Explanation": "** \"xxxx\" is the only large group with start index 3 and end index 6."
            },
            {
                "Input": "** s = \"abc\"",
                "Output": "** []",
                "Explanation": "** We have groups \"a\", \"b\", and \"c\", none of which are large groups."
            },
            {
                "Input": "** s = \"abcdddeeeeaabbbcd\"",
                "Output": "** [[3,5],[6,9],[12,14]]",
                "Explanation": "** The large groups are \"ddd\", \"eeee\", and \"bbb\"."
            }
        ]
    },
    {
        "Title": "Masking Personal Information",
        "slug": "masking-personal-information",
        "description": "You are given a personal information string `s`, representing either an **email address** or a **phone number**. Return *the **masked** personal information using the below rules*.\n\n\nEmail address:\n\n\nAn email address is:\n\n\n A **name** consisting of uppercase and lowercase English letters, followed by\n The `'@'` symbol, followed by\n The **domain** consisting of uppercase and lowercase English letters with a dot `'.'` somewhere in the middle (not the first or last character).\n\n\nTo mask an email:\n\n\n The uppercase letters in the **name** and **domain** must be converted to lowercase letters.\n The middle letters of the **name** (i.e., all but the first and last letters) must be replaced by 5 asterisks `\"*****\"`.\n\n\nPhone number:\n\n\nA phone number is formatted as follows:\n\n\n The phone number contains 10-13 digits.\n The last 10 digits make up the **local number**.\n The remaining 0-3 digits, in the beginning, make up the **country code**.\n **Separation characters** from the set `{'+', '-', '(', ')', ' '}` separate the above digits in some way.\n\n\nTo mask a phone number:\n\n\n Remove all **separation characters**.\n The masked phone number should have the form:\n\t+ `\"***-***-XXXX\"` if the country code has 0 digits.\n\t+ `\"+*-***-***-XXXX\"` if the country code has 1 digit.\n\t+ `\"+**-***-***-XXXX\"` if the country code has 2 digits.\n\t+ `\"+***-***-***-XXXX\"` if the country code has 3 digits.\n `\"XXXX\"` is the last 4 digits of the **local number**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"LeetCode@LeetCode.com\"",
                "Output": "** \"l*****e@leetcode.com\"",
                "Explanation": "** s is an email address.\nThe name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks."
            },
            {
                "Input": "** s = \"AB@qq.com\"",
                "Output": "** \"a*****b@qq.com\"",
                "Explanation": "** s is an email address.\nThe name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.\nNote that even though \"ab\" is 2 characters, it still must have 5 asterisks in the middle."
            },
            {
                "Input": "** s = \"1(234)567-890\"",
                "Output": "** \"***-***-7890\"",
                "Explanation": "** s is a phone number.\nThere are 10 digits, so the local number is 10 digits and the country code is 0 digits.\nThus, the resulting masked number is \"***-***-7890\"."
            }
        ]
    },
    {
        "Title": "Flipping an Image",
        "slug": "flipping-an-image",
        "description": "Given an `n x n` binary matrix `image`, flip the image **horizontally**, then invert it, and return *the resulting image*.\n\n\nTo flip an image horizontally means that each row of the image is reversed.\n\n\n For example, flipping `[1,1,0]` horizontally results in `[0,1,1]`.\n\n\nTo invert an image means that each `0` is replaced by `1`, and each `1` is replaced by `0`.\n\n\n For example, inverting `[0,1,1]` results in `[1,0,0]`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "Bit Manipulation",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** image = [[1,1,0],[1,0,1],[0,0,0]]",
                "Output": "** [[1,0,0],[0,1,0],[1,1,1]]",
                "Explanation": "** First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\nThen, invert the image: [[1,0,0],[0,1,0],[1,1,1]]"
            },
            {
                "Input": "** image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]",
                "Output": "** [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]",
                "Explanation": "** First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].\nThen invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]"
            }
        ]
    },
    {
        "Title": "Find And Replace in String",
        "slug": "find-and-replace-in-string",
        "description": "You are given a **0-indexed** string `s` that you must perform `k` replacement operations on. The replacement operations are given as three **0-indexed** parallel arrays, `indices`, `sources`, and `targets`, all of length `k`.\n\n\nTo complete the `ith` replacement operation:\n\n\n1. Check if the **substring** `sources[i]` occurs at index `indices[i]` in the **original string** `s`.\n2. If it does not occur, **do nothing**.\n3. Otherwise if it does occur, **replace** that substring with `targets[i]`.\n\n\nFor example, if `s = \"abcd\"`, `indices[i] = 0`, `sources[i] = \"ab\"`, and `targets[i] = \"eee\"`, then the result of this replacement will be `\"eeecd\"`.\n\n\nAll replacement operations must occur **simultaneously**, meaning the replacement operations should not affect the indexing of each other. The testcases will be generated such that the replacements will **not overlap**.\n\n\n For example, a testcase with `s = \"abc\"`, `indices = [0, 1]`, and `sources = [\"ab\",\"bc\"]` will not be generated because the `\"ab\"` and `\"bc\"` replacements overlap.\n\n\nReturn *the **resulting string** after performing all replacement operations on* `s`.\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** s = \"abcd\", indices = [0, 2], sources = [\"a\", \"cd\"], targets = [\"eee\", \"ffff\"]",
                "Output": "** \"eeebffff\"",
                "Explanation": "**\n\"a\" occurs at index 0 in s, so we replace it with \"eee\".\n\"cd\" occurs at index 2 in s, so we replace it with \"ffff\"."
            },
            {
                "Input": "** s = \"abcd\", indices = [0, 2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]",
                "Output": "** \"eeecd\"",
                "Explanation": "**\n\"ab\" occurs at index 0 in s, so we replace it with \"eee\".\n\"ec\" does not occur at index 2 in s, so we do nothing."
            }
        ]
    },
    {
        "Title": "Sum of Distances in Tree",
        "slug": "sum-of-distances-in-tree",
        "description": "There is an undirected connected tree with `n` nodes labeled from `0` to `n - 1` and `n - 1` edges.\n\n\nYou are given the integer `n` and the array `edges` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree.\n\n\nReturn an array `answer` of length `n` where `answer[i]` is the sum of the distances between the `ith` node in the tree and all other nodes.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Tree",
            "Depth-First Search",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]",
                "Output": "** [8,12,6,10,10,10]",
                "Explanation": "** The tree is shown above.\nWe can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)\nequals 1 + 1 + 2 + 2 + 2 = 8.\nHence, answer[0] = 8, and so on."
            },
            {
                "Input": "** n = 1, edges = []",
                "Output": "** [0]",
                "Explanation": null
            },
            {
                "Input": "** n = 2, edges = [[1,0]]",
                "Output": "** [1,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Image Overlap",
        "slug": "image-overlap",
        "description": "You are given two images, `img1` and `img2`, represented as binary, square matrices of size `n x n`. A binary matrix has only `0`s and `1`s as values.\n\n\nWe **translate** one image however we choose by sliding all the `1` bits left, right, up, and/or down any number of units. We then place it on top of the other image. We can then calculate the **overlap** by counting the number of positions that have a `1` in **both** images.\n\n\nNote also that a translation does **not** include any kind of rotation. Any `1` bits that are translated outside of the matrix borders are erased.\n\n\nReturn *the largest possible overlap*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]",
                "Output": "** 3",
                "Explanation": "** We translate img1 to right by 1 unit and down by 1 unit.\n![](https://assets.leetcode.com/uploads/2020/09/09/overlap_step1.jpg)\nThe number of positions that have a 1 in both images is 3 (shown in red).\n![](https://assets.leetcode.com/uploads/2020/09/09/overlap_step2.jpg)"
            }
        ]
    },
    {
        "Title": "Rectangle Overlap",
        "slug": "rectangle-overlap",
        "description": "An axis-aligned rectangle is represented as a list `[x1, y1, x2, y2]`, where `(x1, y1)` is the coordinate of its bottom-left corner, and `(x2, y2)` is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.\n\n\nTwo rectangles overlap if the area of their intersection is **positive**. To be clear, two rectangles that only touch at the corner or edges do not overlap.\n\n\nGiven two axis-aligned rectangles `rec1` and `rec2`, return `true` *if they overlap, otherwise return* `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Geometry"
        ],
        "examples": [
            {
                "Input": "** rec1 = [0,0,2,2], rec2 = [1,1,3,3]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** rec1 = [0,0,1,1], rec2 = [1,0,2,1]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** rec1 = [0,0,1,1], rec2 = [2,2,3,3]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "New 21 Game",
        "slug": "new-21-game",
        "description": "Alice plays the following game, loosely based on the card game **\"21\"**.\n\n\nAlice starts with `0` points and draws numbers while she has less than `k` points. During each draw, she gains an integer number of points randomly from the range `[1, maxPts]`, where `maxPts` is an integer. Each draw is independent and the outcomes have equal probabilities.\n\n\nAlice stops drawing numbers when she gets `k` **or more points**.\n\n\nReturn the probability that Alice has `n` or fewer points.\n\n\nAnswers within `10-5` of the actual answer are considered accepted.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Sliding Window",
            "Probability and Statistics"
        ],
        "examples": [
            {
                "Input": "** n = 10, k = 1, maxPts = 10",
                "Output": "** 1.00000",
                "Explanation": "** Alice gets a single card, then stops."
            },
            {
                "Input": "** n = 6, k = 1, maxPts = 10",
                "Output": "** 0.60000",
                "Explanation": "** Alice gets a single card, then stops.\nIn 6 out of 10 possibilities, she is at or below 6 points."
            },
            {
                "Input": "** n = 21, k = 17, maxPts = 10",
                "Output": "** 0.73278",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Push Dominoes",
        "slug": "push-dominoes",
        "description": "There are `n` dominoes in a line, and we place each domino vertically upright. In the beginning, we simultaneously push some of the dominoes either to the left or to the right.\n\n\nAfter each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.\n\n\nWhen a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.\n\n\nFor the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.\n\n\nYou are given a string `dominoes` representing the initial state where:\n\n\n `dominoes[i] = 'L'`, if the `ith` domino has been pushed to the left,\n `dominoes[i] = 'R'`, if the `ith` domino has been pushed to the right, and\n `dominoes[i] = '.'`, if the `ith` domino has not been pushed.\n\n\nReturn *a string representing the final state*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Two Pointers",
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** dominoes = \".L.R...LR..L..\"",
                "Output": "** \"LL.RR.LLRRLL..\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Similar String Groups",
        "slug": "similar-string-groups",
        "description": "Two strings, `X` and `Y`, are considered similar if either they are identical or we can make them equivalent by swapping at most two letters (in distinct positions) within the string `X`.\n\n\nFor example, `\"tars\"`\u00a0and `\"rats\"`\u00a0are similar (swapping at positions `0` and `2`), and `\"rats\"` and `\"arts\"` are similar, but `\"star\"` is not similar to `\"tars\"`, `\"rats\"`, or `\"arts\"`.\n\n\nTogether, these form two connected groups by similarity: `{\"tars\", \"rats\", \"arts\"}` and `{\"star\"}`.\u00a0 Notice that `\"tars\"` and `\"arts\"` are in the same group even though they are not similar.\u00a0 Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.\n\n\nWe are given a list `strs` of strings where every string in `strs` is an anagram of every other string in `strs`. How many groups are there?\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find"
        ],
        "examples": [
            {
                "Input": "** strs = [\"tars\",\"rats\",\"arts\",\"star\"]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** strs = [\"omv\",\"ovm\"]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Magic Squares In Grid",
        "slug": "magic-squares-in-grid",
        "description": "A `3 x 3` magic square is a `3 x 3` grid filled with distinct numbers **from** `1` **to** `9` such that each row, column, and both diagonals all have the same sum.\n\n\nGiven a `row x col`\u00a0`grid`\u00a0of integers, how many `3 x 3` \"magic square\" subgrids are there?\u00a0 (Each subgrid is contiguous).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]",
                "Output": "** 1",
                "Explanation": "** \nThe following subgrid is a 3 x 3 magic square:\n![](https://assets.leetcode.com/uploads/2020/09/11/magic_valid.jpg)\nwhile this one is not:\n![](https://assets.leetcode.com/uploads/2020/09/11/magic_invalid.jpg)\nIn total, there is only one magic square inside the given grid."
            }
        ]
    },
    {
        "Title": "Keys and Rooms",
        "slug": "keys-and-rooms",
        "description": "There are `n` rooms labeled from `0` to `n - 1`\u00a0and all the rooms are locked except for room `0`. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.\n\n\nWhen you visit a room, you may find a set of **distinct keys** in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.\n\n\nGiven an array `rooms` where `rooms[i]` is the set of keys that you can obtain if you visited room `i`, return `true` *if you can visit **all** the rooms, or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** rooms = [[1],[2],[3],[]]",
                "Output": "** true",
                "Explanation": "** \nWe visit room 0 and pick up key 1.\nWe then visit room 1 and pick up key 2.\nWe then visit room 2 and pick up key 3.\nWe then visit room 3.\nSince we were able to visit every room, we return true."
            },
            {
                "Input": "** rooms = [[1,3],[3,0,1],[2],[0]]",
                "Output": "** false",
                "Explanation": "** We can not enter room number 2 since the only key that unlocks it is in that room."
            }
        ]
    },
    {
        "Title": "Split Array into Fibonacci Sequence",
        "slug": "split-array-into-fibonacci-sequence",
        "description": "You are given a string of digits `num`, such as `\"123456579\"`. We can split it into a Fibonacci-like sequence `[123, 456, 579]`.\n\n\nFormally, a **Fibonacci-like** sequence is a list `f` of non-negative integers such that:\n\n\n `0 <= f[i] < 231`, (that is, each integer fits in a **32-bit** signed integer type),\n `f.length >= 3`, and\n `f[i] + f[i + 1] == f[i + 2]` for all `0 <= i < f.length - 2`.\n\n\nNote that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number `0` itself.\n\n\nReturn any Fibonacci-like sequence split from `num`, or return `[]` if it cannot be done.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** num = \"1101111\"",
                "Output": "** [11,0,11,11]",
                "Explanation": "** The output [110, 1, 111] would also be accepted."
            },
            {
                "Input": "** num = \"112358130\"",
                "Output": "** []",
                "Explanation": "** The task is impossible."
            },
            {
                "Input": "** num = \"0123\"",
                "Output": "** []",
                "Explanation": "** Leading zeroes are not allowed, so \"01\", \"2\", \"3\" is not valid."
            }
        ]
    },
    {
        "Title": "Guess the Word",
        "slug": "guess-the-word",
        "description": "You are given an array of unique strings `words` where `words[i]` is six letters long. One word of `words` was chosen as a secret word.\n\n\nYou are also given the helper object `Master`. You may call `Master.guess(word)` where `word` is a six-letter-long string, and it must be from `words`. `Master.guess(word)` returns:\n\n\n `-1` if `word` is not from `words`, or\n an integer representing the number of exact matches (value and position) of your guess to the secret word.\n\n\nThere is a parameter `allowedGuesses` for each test case where `allowedGuesses` is the maximum number of times you can call `Master.guess(word)`.\n\n\nFor each test case, you should call `Master.guess` with the secret word without exceeding the maximum number of allowed guesses. You will get:\n\n\n **`\"Either you took too many guesses, or you did not find the secret word.\"`** if you called `Master.guess` more than `allowedGuesses` times or if you did not call `Master.guess` with the secret word, or\n **`\"You guessed the secret word correctly.\"`** if you called `Master.guess` with the secret word with the number of calls to `Master.guess` less than or equal to `allowedGuesses`.\n\n\nThe test cases are generated such that you can guess the secret word with a reasonable strategy (other than using the bruteforce method).\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "String",
            "Interactive",
            "Game Theory"
        ],
        "examples": [
            {
                "Input": "** secret = \"acckzz\", words = [\"acckzz\",\"ccbazz\",\"eiowzz\",\"abcczz\"], allowedGuesses = 10",
                "Output": "** You guessed the secret word correctly.",
                "Explanation": "**\nmaster.guess(\"aaaaaa\") returns -1, because \"aaaaaa\" is not in wordlist.\nmaster.guess(\"acckzz\") returns 6, because \"acckzz\" is secret and has all 6 matches.\nmaster.guess(\"ccbazz\") returns 3, because \"ccbazz\" has 3 matches.\nmaster.guess(\"eiowzz\") returns 2, because \"eiowzz\" has 2 matches.\nmaster.guess(\"abcczz\") returns 4, because \"abcczz\" has 4 matches.\nWe made 5 calls to master.guess, and one of them was the secret, so we pass the test case."
            },
            {
                "Input": "** secret = \"hamada\", words = [\"hamada\",\"khaled\"], allowedGuesses = 10",
                "Output": "** You guessed the secret word correctly.",
                "Explanation": "** Since there are two words, you can guess both."
            }
        ]
    },
    {
        "Title": "Backspace String Compare",
        "slug": "backspace-string-compare",
        "description": "Given two strings `s` and `t`, return `true` *if they are equal when both are typed into empty text editors*. `'#'` means a backspace character.\n\n\nNote that after backspacing an empty text, the text will continue empty.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String",
            "Stack",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** s = \"ab#c\", t = \"ad#c\"",
                "Output": "** true",
                "Explanation": "** Both s and t become \"ac\"."
            },
            {
                "Input": "** s = \"ab##\", t = \"c#d#\"",
                "Output": "** true",
                "Explanation": "** Both s and t become \"\"."
            },
            {
                "Input": "** s = \"a#c\", t = \"b\"",
                "Output": "** false",
                "Explanation": "** s becomes \"c\" while t becomes \"b\"."
            }
        ]
    },
    {
        "Title": "Longest Mountain in Array",
        "slug": "longest-mountain-in-array",
        "description": "You may recall that an array `arr` is a **mountain array** if and only if:\n\n\n `arr.length >= 3`\n There exists some index `i` (**0-indexed**) with `0 < i < arr.length - 1` such that:\n\t+ `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n\t+ `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\n\nGiven an integer array `arr`, return *the length of the longest subarray, which is a mountain*. Return `0` if there is no mountain subarray.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Dynamic Programming",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** arr = [2,1,4,7,3,2,5]",
                "Output": "** 5",
                "Explanation": "** The largest mountain is [1,4,7,3,2] which has length 5."
            },
            {
                "Input": "** arr = [2,2,2]",
                "Output": "** 0",
                "Explanation": "** There is no mountain."
            }
        ]
    },
    {
        "Title": "Hand of Straights",
        "slug": "hand-of-straights",
        "description": "Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size `groupSize`, and consists of `groupSize` consecutive cards.\n\n\nGiven an integer array `hand` where `hand[i]` is the value written on the `ith` card and an integer `groupSize`, return `true` if she can rearrange the cards, or `false` otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** hand = [1,2,3,6,2,3,4,7,8], groupSize = 3",
                "Output": "** true",
                "Explanation": "** Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]"
            },
            {
                "Input": "** hand = [1,2,3,4,5], groupSize = 4",
                "Output": "** false",
                "Explanation": "** Alice's hand can not be rearranged into groups of 4."
            }
        ]
    },
    {
        "Title": "Shortest Path Visiting All Nodes",
        "slug": "shortest-path-visiting-all-nodes",
        "description": "You have an undirected, connected graph of `n` nodes labeled from `0` to `n - 1`. You are given an array `graph` where `graph[i]` is a list of all the nodes connected with node `i` by an edge.\n\n\nReturn *the length of the shortest path that visits every node*. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Bit Manipulation",
            "Breadth-First Search",
            "Graph",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** graph = [[1,2,3],[0],[0],[0]]",
                "Output": "** 4",
                "Explanation": "** One possible path is [1,0,2,0,3]"
            },
            {
                "Input": "** graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]",
                "Output": "** 4",
                "Explanation": "** One possible path is [0,1,4,2,3]"
            }
        ]
    },
    {
        "Title": "Shifting Letters",
        "slug": "shifting-letters",
        "description": "You are given a string `s` of lowercase English letters and an integer array `shifts` of the same length.\n\n\nCall the `shift()` of a letter, the next letter in the alphabet, (wrapping around so that `'z'` becomes `'a'`).\n\n\n For example, `shift('a') = 'b'`, `shift('t') = 'u'`, and `shift('z') = 'a'`.\n\n\nNow for each `shifts[i] = x`, we want to shift the first `i + 1` letters of `s`, `x` times.\n\n\nReturn *the final string after all such shifts to s are applied*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** s = \"abc\", shifts = [3,5,9]",
                "Output": "** \"rpl\"",
                "Explanation": "** We start with \"abc\".\nAfter shifting the first 1 letters of s by 3, we have \"dbc\".\nAfter shifting the first 2 letters of s by 5, we have \"igc\".\nAfter shifting the first 3 letters of s by 9, we have \"rpl\", the answer."
            },
            {
                "Input": "** s = \"aaa\", shifts = [1,2,3]",
                "Output": "** \"gfd\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximize Distance to Closest Person",
        "slug": "maximize-distance-to-closest-person",
        "description": "You are given an array representing a row of `seats` where `seats[i] = 1` represents a person sitting in the `ith` seat, and `seats[i] = 0` represents that the `ith` seat is empty **(0-indexed)**.\n\n\nThere is at least one empty seat, and at least one person sitting.\n\n\nAlex wants to sit in the seat such that the distance between him and the closest person to him is maximized.\u00a0\n\n\nReturn *that maximum distance to the closest person*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** seats = [1,0,0,0,1,0,1]",
                "Output": "** 2",
                "Explanation": "** \nIf Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.\nIf Alex sits in any other open seat, the closest person has distance 1.\nThus, the maximum distance to the closest person is 2."
            }
        ]
    },
    {
        "Title": "Rectangle Area II",
        "slug": "rectangle-area-ii",
        "description": "You are given a 2D array of axis-aligned `rectangles`. Each `rectangle[i] = [xi1, yi1, xi2, yi2]` denotes the `ith` rectangle where `(xi1, yi1)` are the coordinates of the **bottom-left corner**, and `(xi2, yi2)` are the coordinates of the **top-right corner**.\n\n\nCalculate the **total area** covered by all `rectangles` in the plane. Any area covered by two or more rectangles should only be counted **once**.\n\n\nReturn *the **total area***. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Segment Tree",
            "Line Sweep",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]",
                "Output": "** 6",
                "Explanation": "** A total area of 6 is covered by all three rectangles, as illustrated in the picture.\nFrom (1,1) to (2,2), the green and red rectangles overlap.\nFrom (1,0) to (2,3), all three rectangles overlap."
            }
        ]
    },
    {
        "Title": "Loud and Rich",
        "slug": "loud-and-rich",
        "description": "There is a group of `n` people labeled from `0` to `n - 1` where each person has a different amount of money and a different level of quietness.\n\n\nYou are given an array `richer` where `richer[i] = [ai, bi]` indicates that `ai` has more money than `bi` and an integer array `quiet` where `quiet[i]` is the quietness of the `ith` person. All the given data in richer are **logically correct** (i.e., the data will not lead you to a situation where `x` is richer than `y` and `y` is richer than `x` at the same time).\n\n\nReturn *an integer array* `answer` *where* `answer[x] = y` *if* `y` *is the least quiet person (that is, the person* `y` *with the smallest value of* `quiet[y]`*) among all people who definitely have equal to or more money than the person* `x`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Graph",
            "Topological Sort"
        ],
        "examples": [
            {
                "Input": "** richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]",
                "Output": "** [5,5,2,5,4,5,6,7]",
                "Explanation": "** \nanswer[0] = 5.\nPerson 5 has more money than 3, which has more money than 1, which has more money than 0.\nThe only person who is quieter (has lower quiet[x]) is person 7, but it is not clear if they have more money than person 0.\nanswer[7] = 7.\nAmong all people that definitely have equal to or more money than person 7 (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x]) is person 7.\nThe other answers can be filled out with similar reasoning."
            },
            {
                "Input": "** richer = [], quiet = [0]",
                "Output": "** [0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Peak Index in a Mountain Array",
        "slug": "peak-index-in-a-mountain-array",
        "description": "You are given an integer **mountain** array `arr` of length `n` where the values increase to a **peak element** and then decrease.\n\n\nReturn the index of the peak element.\n\n\nYour task is to solve it in `O(log(n))` time complexity.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** arr = [0,1,0]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** arr = [0,2,1,0]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** arr = [0,10,5,2]",
                "Output": "** 1\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `3 <= arr.length <= 105`\n* `0 <= arr[i] <= 106`\n* `arr` is **guaranteed** to be a mountain array.\n\n\nSimilarQuestions: [162, 1095, 1671]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Car Fleet",
        "slug": "car-fleet",
        "description": "There are `n` cars at given miles away from the starting mile 0, traveling to reach the mile `target`.\n\n\nYou are given two integer array `position` and `speed`, both of length `n`, where `position[i]` is the starting mile of the `ith` car and `speed[i]` is the speed of the `ith` car in miles per hour.\n\n\nA car cannot pass another car, but it can catch up and then travel next to it at the speed of the slower car.\n\n\nA **car fleet** is a car or cars driving next to each other. The speed of the car fleet is the **minimum** speed of any car in the fleet.\n\n\nIf a car catches up to a car fleet at the mile `target`, it will still be considered as part of the car fleet.\n\n\nReturn the number of car fleets that will arrive at the destination.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Stack",
            "Sorting",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]",
                "Output": "** 3",
                "Explanation": "**\n\n\n* The cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12. The fleet forms at `target`.\n* The car starting at 0 (speed 1) does not catch up to any other car, so it is a fleet by itself.\n* The cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches `target`."
            },
            {
                "Input": "** target = 10, position = [3], speed = [3]",
                "Output": "** 1",
                "Explanation": "**\n\n\nThere is only one car, hence there is only one fleet."
            },
            {
                "Input": "** target = 100, position = [0,2,4], speed = [4,2,1]",
                "Output": "** 1",
                "Explanation": "**\n\n\n* The cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The car starting at 4 (speed 1) travels to 5.\n* Then, the fleet at 4 (speed 2) and the car at position 5 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches `target`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == position.length == speed.length`\n* `1 <= n <= 105`\n* `0 < target <= 106`\n* `0 <= position[i] < target`\n* All the values of `position` are **unique**.\n* `0 < speed[i] <= 106`\n\n\nSimilarQuestions: [1776, 2211]"
            }
        ]
    },
    {
        "Title": "K-Similar Strings",
        "slug": "k-similar-strings",
        "description": "Strings `s1` and `s2` are `k`**-similar** (for some non-negative integer `k`) if we can swap the positions of two letters in `s1` exactly `k` times so that the resulting string equals `s2`.\n\n\nGiven two anagrams `s1` and `s2`, return the smallest `k` for which `s1` and `s2` are `k`**-similar**.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** s1 = \"ab\", s2 = \"ba\"",
                "Output": "** 1",
                "Explanation": "** The two string are 1-similar because we can use one swap to change s1 to s2: \"ab\" --> \"ba\"."
            },
            {
                "Input": "** s1 = \"abc\", s2 = \"bca\"",
                "Output": "** 2",
                "Explanation": "** The two strings are 2-similar because we can use two swaps to change s1 to s2: \"abc\" --> \"bac\" --> \"bca\"."
            }
        ]
    },
    {
        "Title": "Exam Room",
        "slug": "exam-room",
        "description": "There is an exam room with `n` seats in a single row labeled from `0` to `n - 1`.\n\n\nWhen a student enters the room, they must sit in the seat that maximizes the distance to the closest person. If there are multiple such seats, they sit in the seat with the lowest number. If no one is in the room, then the student sits at seat number `0`.\n\n\nDesign a class that simulates the mentioned exam room.\n\n\nImplement the `ExamRoom` class:\n\n\n `ExamRoom(int n)` Initializes the object of the exam room with the number of the seats `n`.\n `int seat()` Returns the label of the seat at which the next student will set.\n `void leave(int p)` Indicates that the student sitting at seat `p` will leave the room. It is guaranteed that there will be a student sitting at seat `p`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Design",
            "Heap (Priority Queue)",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "[\"ExamRoom\", \"seat\", \"seat\", \"seat\", \"seat\", \"leave\", \"seat\"]\n[[10], [], [], [], [], [4], []]",
                "Output": "[null, 0, 9, 4, 2, null, 5]",
                "Explanation": "ExamRoom examRoom = new ExamRoom(10);\nexamRoom.seat(); // return 0, no one is in the room, then the student sits at seat number 0.\nexamRoom.seat(); // return 9, the student sits at the last seat number 9.\nexamRoom.seat(); // return 4, the student sits at the last seat number 4.\nexamRoom.seat(); // return 2, the student sits at the last seat number 2.\nexamRoom.leave(4);\nexamRoom.seat(); // return 5, the student sits at the last seat number 5."
            }
        ]
    },
    {
        "Title": "Score of Parentheses",
        "slug": "score-of-parentheses",
        "description": "Given a balanced parentheses string `s`, return *the **score** of the string*.\n\n\nThe **score** of a balanced parentheses string is based on the following rule:\n\n\n `\"()\"` has score `1`.\n `AB` has score `A + B`, where `A` and `B` are balanced parentheses strings.\n `(A)` has score `2 * A`, where `A` is a balanced parentheses string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** s = \"()\"",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** s = \"(())\"",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** s = \"()()\"",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Cost to Hire K Workers",
        "slug": "minimum-cost-to-hire-k-workers",
        "description": "There are `n` workers. You are given two integer arrays `quality` and `wage` where `quality[i]` is the quality of the `ith` worker and `wage[i]` is the minimum wage expectation for the `ith` worker.\n\n\nWe want to hire exactly `k` workers to form a **paid group**. To hire a group of `k` workers, we must pay them according to the following rules:\n\n\n1. Every worker in the paid group must be paid at least their minimum wage expectation.\n2. In the group, each worker's pay must be directly proportional to their quality. This means if a worker\u2019s quality is double that of another worker in the group, then they must be paid twice as much as the other worker.\n\n\nGiven the integer `k`, return *the least amount of money needed to form a paid group satisfying the above conditions*. Answers within `10-5` of the actual answer will be accepted.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** quality = [10,20,5], wage = [70,50,30], k = 2",
                "Output": "** 105.00000",
                "Explanation": "** We pay 70 to 0th worker and 35 to 2nd worker."
            },
            {
                "Input": "** quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3",
                "Output": "** 30.66667",
                "Explanation": "** We pay 4 to 0th worker, 13.33333 to 2nd and 3rd workers separately."
            }
        ]
    },
    {
        "Title": "Mirror Reflection",
        "slug": "mirror-reflection",
        "description": "There is a special square room with mirrors on each of the four walls. Except for the southwest corner, there are receptors on each of the remaining corners, numbered `0`, `1`, and `2`.\n\n\nThe square room has walls of length `p`\u00a0and a laser ray from the southwest corner first meets the east wall at a distance `q` from the `0th` receptor.\n\n\nGiven the two integers `p` and `q`, return *the number of the receptor that the ray meets first*.\n\n\nThe test cases are guaranteed so that the ray will meet a receptor eventually.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Geometry",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** p = 2, q = 1",
                "Output": "** 2",
                "Explanation": "** The ray meets receptor 2 the first time it gets reflected back to the left wall."
            }
        ]
    },
    {
        "Title": "Buddy Strings",
        "slug": "buddy-strings",
        "description": "Given two strings `s` and `goal`, return `true` *if you can swap two letters in* `s` *so the result is equal to* `goal`*, otherwise, return* `false`*.\n\n\nSwapping letters is defined as taking two indices `i` and `j` (0-indexed) such that `i != j` and swapping the characters at `s[i]` and `s[j]`.\n\n\n For example, swapping at indices `0` and `2` in `\"abcd\"` results in `\"cbad\"`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"ab\", goal = \"ba\"",
                "Output": "** true",
                "Explanation": "** You can swap s[0] = 'a' and s[1] = 'b' to get \"ba\", which is equal to goal."
            },
            {
                "Input": "** s = \"ab\", goal = \"ab\"",
                "Output": "** false",
                "Explanation": "** The only letters you can swap are s[0] = 'a' and s[1] = 'b', which results in \"ba\" != goal."
            },
            {
                "Input": "** s = \"aa\", goal = \"aa\"",
                "Output": "** true",
                "Explanation": "** You can swap s[0] = 'a' and s[1] = 'a' to get \"aa\", which is equal to goal."
            }
        ]
    },
    {
        "Title": "Lemonade Change",
        "slug": "lemonade-change",
        "description": "At a lemonade stand, each lemonade costs `$5`. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a `$5`, `$10`, or `$20` bill. You must provide the correct change to each customer so that the net transaction is that the customer pays `$5`.\n\n\nNote that you do not have any change in hand at first.\n\n\nGiven an integer array `bills` where `bills[i]` is the bill the `ith` customer pays, return `true` *if you can provide every customer with the correct change, or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** bills = [5,5,5,10,20]",
                "Output": "** true",
                "Explanation": "** \nFrom the first 3 customers, we collect three $5 bills in order.\nFrom the fourth customer, we collect a $10 bill and give back a $5.\nFrom the fifth customer, we give a $10 bill and a $5 bill.\nSince all customers got correct change, we output true."
            },
            {
                "Input": "** bills = [5,5,10,10,20]",
                "Output": "** false",
                "Explanation": "** \nFrom the first two customers in order, we collect two $5 bills.\nFor the next two customers in order, we collect a $10 bill and give back a $5 bill.\nFor the last customer, we can not give the change of $15 back because we only have two $10 bills.\nSince not every customer received the correct change, the answer is false."
            }
        ]
    },
    {
        "Title": "Score After Flipping Matrix",
        "slug": "score-after-flipping-matrix",
        "description": "You are given an `m x n` binary matrix `grid`.\n\n\nA **move** consists of choosing any row or column and toggling each value in that row or column (i.e., changing all `0`'s to `1`'s, and all `1`'s to `0`'s).\n\n\nEvery row of the matrix is interpreted as a binary number, and the **score** of the matrix is the sum of these numbers.\n\n\nReturn *the highest possible **score** after making any number of **moves** (including zero moves)*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Bit Manipulation",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]",
                "Output": "** 39",
                "Explanation": "** 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39"
            }
        ]
    },
    {
        "Title": "Shortest Subarray with Sum at Least K",
        "slug": "shortest-subarray-with-sum-at-least-k",
        "description": "Given an integer array `nums` and an integer `k`, return *the length of the shortest non-empty **subarray** of* `nums` *with a sum of at least* `k`. If there is no such **subarray**, return `-1`.\n\n\nA **subarray** is a **contiguous** part of an array.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Queue",
            "Sliding Window",
            "Heap (Priority Queue)",
            "Prefix Sum",
            "Monotonic Queue"
        ],
        "examples": [
            {
                "Input": "** nums = [1], k = 1",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2], k = 4",
                "Output": "** -1",
                "Explanation": null
            },
            {
                "Input": "** nums = [2,-1,2], k = 3",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "All Nodes Distance K in Binary Tree",
        "slug": "all-nodes-distance-k-in-binary-tree",
        "description": "Given the `root` of a binary tree, the value of a target node `target`, and an integer `k`, return *an array of the values of all nodes that have a distance* `k` *from the target node.\n\n\nYou can return the answer in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2",
                "Output": "** [7,4,1]\nExplanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Shortest Path to Get All Keys",
        "slug": "shortest-path-to-get-all-keys",
        "description": "You are given an `m x n` grid `grid` where:\n\n\n `'.'` is an empty cell.\n `'#'` is a wall.\n `'@'` is the starting point.\n Lowercase letters represent keys.\n Uppercase letters represent locks.\n\n\nYou start at the starting point and one move consists of walking one space in one of the four cardinal directions. You cannot walk outside the grid, or walk into a wall.\n\n\nIf you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key.\n\n\nFor some `1 <= k <= 6`, there is exactly one lowercase and one uppercase letter of the first `k` letters of the English alphabet in the grid. This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.\n\n\nReturn *the lowest number of moves to acquire all keys*. If it is impossible, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Bit Manipulation",
            "Breadth-First Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [\"@.a..\",\"###.#\",\"b.A.B\"]",
                "Output": "** 8",
                "Explanation": "** Note that the goal is to obtain all the keys not to open all the locks."
            },
            {
                "Input": "** grid = [\"@..aA\",\"..B#.\",\"....b\"]",
                "Output": "** 6",
                "Explanation": null
            },
            {
                "Input": "** grid = [\"@Aa\"]",
                "Output": "** -1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Smallest Subtree with all the Deepest Nodes",
        "slug": "smallest-subtree-with-all-the-deepest-nodes",
        "description": "Given the `root` of a binary tree, the depth of each node is **the shortest distance to the root**.\n\n\nReturn *the smallest subtree* such that it contains **all the deepest nodes** in the original tree.\n\n\nA node is called **the deepest** if it has the largest depth possible among any node in the entire tree.\n\n\nThe **subtree** of a node is a tree consisting of that node, plus the set of all descendants of that node.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [3,5,1,6,2,0,8,null,null,7,4]",
                "Output": "** [2,7,4]",
                "Explanation": "** We return the node with value 2, colored in yellow in the diagram.\nThe nodes coloured in blue are the deepest nodes of the tree.\nNotice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it."
            }
        ]
    },
    {
        "Title": "Prime Palindrome",
        "slug": "prime-palindrome",
        "description": "Given an integer n, return *the smallest **prime palindrome** greater than or equal to* `n`.\n\n\nAn integer is **prime** if it has exactly two divisors: `1` and itself. Note that `1` is not a prime number.\n\n\n For example, `2`, `3`, `5`, `7`, `11`, and `13` are all primes.\n\n\nAn integer is a **palindrome** if it reads the same from left to right as it does from right to left.\n\n\n For example, `101` and `12321` are palindromes.\n\n\nThe test cases are generated so that the answer always exists and is in the range `[2, 2 * 108]`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** n = 6",
                "Output": "** 7",
                "Explanation": null
            },
            {
                "Input": "** n = 8",
                "Output": "** 11",
                "Explanation": null
            },
            {
                "Input": "** n = 13",
                "Output": "** 101",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Transpose Matrix",
        "slug": "transpose-matrix",
        "description": "Given a 2D integer array `matrix`, return *the **transpose** of* `matrix`.\n\n\nThe **transpose** of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.\n\n\n![](https://assets.leetcode.com/uploads/2021/02/10/hint_transpose.png)\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** matrix = [[1,2,3],[4,5,6],[7,8,9]]",
                "Output": "** [[1,4,7],[2,5,8],[3,6,9]]",
                "Explanation": null
            },
            {
                "Input": "** matrix = [[1,2,3],[4,5,6]]",
                "Output": "** [[1,4],[2,5],[3,6]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Gap",
        "slug": "binary-gap",
        "description": "Given a positive integer `n`, find and return *the **longest distance** between any two **adjacent*** `1`*'s in the binary representation of* `n`*. If there are no two adjacent* `1`*'s, return* `0`*.\n\n\nTwo `1`'s are **adjacent** if there are only `0`'s separating them (possibly no `0`'s). The **distance** between two `1`'s is the absolute difference between their bit positions. For example, the two `1`'s in `\"1001\"` have a distance of 3.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** n = 22",
                "Output": "** 2",
                "Explanation": "** 22 in binary is \"10110\".\nThe first adjacent pair of 1's is \"10110\" with a distance of 2.\nThe second adjacent pair of 1's is \"10110\" with a distance of 1.\nThe answer is the largest of these two distances, which is 2.\nNote that \"10110\" is not a valid pair since there is a 1 separating the two 1's underlined."
            },
            {
                "Input": "** n = 8",
                "Output": "** 0",
                "Explanation": "** 8 in binary is \"1000\".\nThere are not any adjacent pairs of 1's in the binary representation of 8, so we return 0."
            },
            {
                "Input": "** n = 5",
                "Output": "** 2",
                "Explanation": "** 5 in binary is \"101\"."
            }
        ]
    },
    {
        "Title": "Reordered Power of 2",
        "slug": "reordered-power-of-2",
        "description": "You are given an integer `n`. We reorder the digits in any order (including the original order) such that the leading digit is not zero.\n\n\nReturn `true` *if and only if we can do this so that the resulting number is a power of two*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Math",
            "Sorting",
            "Counting",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** n = 10",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Advantage Shuffle",
        "slug": "advantage-shuffle",
        "description": "You are given two integer arrays `nums1` and `nums2` both of the same length. The **advantage** of `nums1` with respect to `nums2` is the number of indices `i` for which `nums1[i] > nums2[i]`.\n\n\nReturn *any permutation of* `nums1` *that maximizes its **advantage** with respect to* `nums2`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums1 = [2,7,11,15], nums2 = [1,10,4,11]",
                "Output": "** [2,11,7,15]",
                "Explanation": null
            },
            {
                "Input": "** nums1 = [12,24,8,32], nums2 = [13,25,32,11]",
                "Output": "** [24,32,8,12]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Number of Refueling Stops",
        "slug": "minimum-number-of-refueling-stops",
        "description": "A car travels from a starting position to a destination which is `target` miles east of the starting position.\n\n\nThere are gas stations along the way. The gas stations are represented as an array `stations` where `stations[i] = [positioni, fueli]` indicates that the `ith` gas station is `positioni` miles east of the starting position and has `fueli` liters of gas.\n\n\nThe car starts with an infinite tank of gas, which initially has `startFuel` liters of fuel in it. It uses one liter of gas per one mile that it drives. When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.\n\n\nReturn *the minimum number of refueling stops the car must make in order to reach its destination*. If it cannot reach the destination, return `-1`.\n\n\nNote that if the car reaches a gas station with `0` fuel left, the car can still refuel there. If the car reaches the destination with `0` fuel left, it is still considered to have arrived.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** target = 1, startFuel = 1, stations = []",
                "Output": "** 0",
                "Explanation": "** We can reach the target without refueling."
            },
            {
                "Input": "** target = 100, startFuel = 1, stations = [[10,100]]",
                "Output": "** -1",
                "Explanation": "** We can not reach the target (or even the first gas station)."
            },
            {
                "Input": "** target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]",
                "Output": "** 2",
                "Explanation": "** We start with 10 liters of fuel.\nWe drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.\nThen, we drive from position 10 to position 60 (expending 50 liters of fuel),\nand refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.\nWe made 2 refueling stops along the way, so we return 2."
            }
        ]
    },
    {
        "Title": "Leaf-Similar Trees",
        "slug": "leaf-similar-trees",
        "description": "Consider all the leaves of a binary tree, from\u00a0left to right order, the values of those\u00a0leaves form a **leaf value sequence***.\n\n\n![](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/16/tree.png)\n\n\nFor example, in the given tree above, the leaf value sequence is `(6, 7, 4, 9, 8)`.\n\n\nTwo binary trees are considered *leaf-similar*\u00a0if their leaf value sequence is the same.\n\n\nReturn `true` if and only if the two given trees with head nodes `root1` and `root2` are leaf-similar.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** root1 = [1,2,3], root2 = [1,3,2]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Length of Longest Fibonacci Subsequence",
        "slug": "length-of-longest-fibonacci-subsequence",
        "description": "A sequence `x1, x2, ..., xn` is *Fibonacci-like* if:\n\n\n `n >= 3`\n `xi + xi+1 == xi+2` for all `i + 2 <= n`\n\n\nGiven a **strictly increasing** array `arr` of positive integers forming a sequence, return *the **length** of the longest Fibonacci-like subsequence of* `arr`. If one does not exist, return `0`.\n\n\nA **subsequence** is derived from another sequence `arr` by deleting any number of elements (including none) from `arr`, without changing the order of the remaining elements. For example, `[3, 5, 8]` is a subsequence of `[3, 4, 5, 6, 7, 8]`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** arr = [1,2,3,4,5,6,7,8]",
                "Output": "** 5",
                "Explanation": "** The longest subsequence that is fibonacci-like: [1,2,3,5,8]."
            },
            {
                "Input": "** arr = [1,3,7,11,12,14,18]",
                "Output": "** 3",
                "Explanation": "The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18]."
            }
        ]
    },
    {
        "Title": "Walking Robot Simulation",
        "slug": "walking-robot-simulation",
        "description": "A robot on an infinite XY-plane starts at point `(0, 0)` facing north. The robot can receive a sequence of these three possible types of `commands`:\n\n\n `-2`: Turn left `90` degrees.\n `-1`: Turn right `90` degrees.\n `1 <= k <= 9`: Move forward `k` units, one unit at a time.\n\n\nSome of the grid squares are `obstacles`. The `ith` obstacle is at grid point `obstacles[i] = (xi, yi)`. If the robot runs into an obstacle, then it will instead stay in its current location and move on to the next command.\n\n\nReturn *the **maximum Euclidean distance** that the robot ever gets from the origin **squared** (i.e. if the distance is* `5`*, return* `25`*)*.\n\n\nNote:\n\n\n North means +Y direction.\n East means +X direction.\n South means -Y direction.\n West means -X direction.\n There can be obstacle in\u00a0[0,0].\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** commands = [4,-1,3], obstacles = []",
                "Output": "** 25",
                "Explanation": "** The robot starts at (0, 0):\n1. Move north 4 units to (0, 4).\n2. Turn right.\n3. Move east 3 units to (3, 4).\nThe furthest point the robot ever gets from the origin is (3, 4), which squared is 32 + 42 = 25 units away."
            },
            {
                "Input": "** commands = [4,-1,4,-2,4], obstacles = [[2,4]]",
                "Output": "** 65",
                "Explanation": "** The robot starts at (0, 0):\n1. Move north 4 units to (0, 4).\n2. Turn right.\n3. Move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4).\n4. Turn left.\n5. Move north 4 units to (1, 8).\nThe furthest point the robot ever gets from the origin is (1, 8), which squared is 12 + 82 = 65 units away."
            },
            {
                "Input": "** commands = [6,-1,-1,6], obstacles = []",
                "Output": "** 36",
                "Explanation": "** The robot starts at (0, 0):\n1. Move north 6 units to (0, 6).\n2. Turn right.\n3. Turn right.\n4. Move south 6 units to (0, 0).\nThe furthest point the robot ever gets from the origin is (0, 6), which squared is 62 = 36 units away."
            }
        ]
    },
    {
        "Title": "Koko Eating Bananas",
        "slug": "koko-eating-bananas",
        "description": "Koko loves to eat bananas. There are `n` piles of bananas, the `ith` pile has `piles[i]` bananas. The guards have gone and will come back in `h` hours.\n\n\nKoko can decide her bananas-per-hour eating speed of `k`. Each hour, she chooses some pile of bananas and eats `k` bananas from that pile. If the pile has less than `k` bananas, she eats all of them instead and will not eat any more bananas during this hour.\n\n\nKoko likes to eat slowly but still wants to finish eating all the bananas before the guards return.\n\n\nReturn *the minimum integer* `k` *such that she can eat all the bananas within* `h` *hours*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** piles = [3,6,7,11], h = 8",
                "Output": "** 4",
                "Explanation": null
            },
            {
                "Input": "** piles = [30,11,23,4,20], h = 5",
                "Output": "** 30",
                "Explanation": null
            },
            {
                "Input": "** piles = [30,11,23,4,20], h = 6",
                "Output": "** 23",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Middle of the Linked List",
        "slug": "middle-of-the-linked-list",
        "description": "Given the `head` of a singly linked list, return *the middle node of the linked list*.\n\n\nIf there are two middle nodes, return **the second middle** node.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Linked List",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** head = [1,2,3,4,5]",
                "Output": "** [3,4,5]",
                "Explanation": "** The middle node of the list is node 3."
            },
            {
                "Input": "** head = [1,2,3,4,5,6]",
                "Output": "** [4,5,6]",
                "Explanation": "** Since the list has two middle nodes with values 3 and 4, we return the second one."
            }
        ]
    },
    {
        "Title": "Stone Game",
        "slug": "stone-game",
        "description": "Alice and Bob play a game with piles of stones. There are an **even** number of piles arranged in a row, and each pile has a **positive** integer number of stones `piles[i]`.\n\n\nThe objective of the game is to end with the most stones. The **total** number of stones across all the piles is **odd**, so there are no ties.\n\n\nAlice and Bob take turns, with **Alice starting first**. Each turn, a player takes the entire pile of stones either from the **beginning** or from the **end** of the row. This continues until there are no more piles left, at which point the person with the **most stones wins**.\n\n\nAssuming Alice and Bob play optimally, return `true` *if Alice wins the game, or* `false` *if Bob wins*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Game Theory"
        ],
        "examples": [
            {
                "Input": "** piles = [5,3,4,5]",
                "Output": "** true",
                "Explanation": "** \nAlice starts first, and can only take the first 5 or the last 5.\nSay she takes the first 5, so that the row becomes [3, 4, 5].\nIf Bob takes 3, then the board is [4, 5], and Alice takes 5 to win with 10 points.\nIf Bob takes the last 5, then the board is [3, 4], and Alice takes 4 to win with 9 points.\nThis demonstrated that taking the first 5 was a winning move for Alice, so we return true."
            },
            {
                "Input": "** piles = [3,7,2,3]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Nth Magical Number",
        "slug": "nth-magical-number",
        "description": "A positive integer is *magical* if it is divisible by either `a` or `b`.\n\n\nGiven the three integers `n`, `a`, and `b`, return the `nth` magical number. Since the answer may be very large, **return it modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** n = 1, a = 2, b = 3",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** n = 4, a = 2, b = 3",
                "Output": "** 6",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Profitable Schemes",
        "slug": "profitable-schemes",
        "description": "There is a group of `n` members, and a list of various crimes they could commit. The `ith` crime generates a `profit[i]` and requires `group[i]` members to participate in it. If a member participates in one crime, that member can't participate in another crime.\n\n\nLet's call a **profitable scheme** any subset of these crimes that generates at least `minProfit` profit, and the total number of members participating in that subset of crimes is at most `n`.\n\n\nReturn the number of schemes that can be chosen. Since the answer may be very large, **return it modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** n = 5, minProfit = 3, group = [2,2], profit = [2,3]",
                "Output": "** 2",
                "Explanation": "** To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.\nIn total, there are 2 schemes."
            },
            {
                "Input": "** n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]",
                "Output": "** 7",
                "Explanation": "** To make a profit of at least 5, the group could commit any crimes, as long as they commit one.\nThere are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2)."
            }
        ]
    },
    {
        "Title": "Decoded String at Index",
        "slug": "decoded-string-at-index",
        "description": "You are given an encoded string `s`. To decode the string to a tape, the encoded string is read one character at a time and the following steps are taken:\n\n\n If the character read is a letter, that letter is written onto the tape.\n If the character read is a digit `d`, the entire current tape is repeatedly written `d - 1` more times in total.\n\n\nGiven an integer `k`, return *the* `kth` *letter (**1-indexed)** in the decoded string*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** s = \"leet2code3\", k = 10",
                "Output": "** \"o\"",
                "Explanation": "** The decoded string is \"leetleetcodeleetleetcodeleetleetcode\".\nThe 10th letter in the string is \"o\"."
            },
            {
                "Input": "** s = \"ha22\", k = 5",
                "Output": "** \"h\"",
                "Explanation": "** The decoded string is \"hahahaha\".\nThe 5th letter is \"h\"."
            },
            {
                "Input": "** s = \"a2345678999999999999999\", k = 1",
                "Output": "** \"a\"",
                "Explanation": "** The decoded string is \"a\" repeated 8301530446056247680 times.\nThe 1st letter is \"a\"."
            }
        ]
    },
    {
        "Title": "Boats to Save People",
        "slug": "boats-to-save-people",
        "description": "You are given an array `people` where `people[i]` is the weight of the `ith` person, and an **infinite number of boats** where each boat can carry a maximum weight of `limit`. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most `limit`.\n\n\nReturn *the minimum number of boats to carry every given person*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** people = [1,2], limit = 3",
                "Output": "** 1",
                "Explanation": "** 1 boat (1, 2)"
            },
            {
                "Input": "** people = [3,2,2,1], limit = 3",
                "Output": "** 3",
                "Explanation": "** 3 boats (1, 2), (2) and (3)"
            },
            {
                "Input": "** people = [3,5,3,4], limit = 5",
                "Output": "** 4",
                "Explanation": "** 4 boats (3), (3), (4), (5)"
            }
        ]
    },
    {
        "Title": "Reachable Nodes In Subdivided Graph",
        "slug": "reachable-nodes-in-subdivided-graph",
        "description": "You are given an undirected graph (the **\"original graph\"**) with `n` nodes labeled from `0` to `n - 1`. You decide to **subdivide** each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge.\n\n\nThe graph is given as a 2D array of `edges` where `edges[i] = [ui, vi, cnti]` indicates that there is an edge between nodes `ui` and `vi` in the original graph, and `cnti` is the total number of new nodes that you will **subdivide** the edge into. Note that `cnti == 0` means you will not subdivide the edge.\n\n\nTo **subdivide** the edge `[ui, vi]`, replace it with `(cnti + 1)` new edges and `cnti` new nodes. The new nodes are `x1`, `x2`, ..., `xcnti`, and the new edges are `[ui, x1]`, `[x1, x2]`, `[x2, x3]`, ..., `[xcnti-1, xcnti]`, `[xcnti, vi]`.\n\n\nIn this **new graph**, you want to know how many nodes are **reachable** from the node `0`, where a node is **reachable** if the distance is `maxMoves` or less.\n\n\nGiven the original graph and `maxMoves`, return *the number of nodes that are **reachable** from node* `0` *in the new graph*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Graph",
            "Heap (Priority Queue)",
            "Shortest Path"
        ],
        "examples": [
            {
                "Input": "** edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3",
                "Output": "** 13",
                "Explanation": "** The edge subdivisions are shown in the image above.\nThe nodes that are reachable are highlighted in yellow."
            }
        ]
    },
    {
        "Title": "Projection Area of 3D Shapes",
        "slug": "projection-area-of-3d-shapes",
        "description": "You are given an `n x n` `grid` where we place some `1 x 1 x 1` cubes that are axis-aligned with the `x`, `y`, and `z` axes.\n\n\nEach value `v = grid[i][j]` represents a tower of `v` cubes placed on top of the cell `(i, j)`.\n\n\nWe view the projection of these cubes onto the `xy`, `yz`, and `zx` planes.\n\n\nA **projection** is like a shadow, that maps our **3-dimensional** figure to a **2-dimensional** plane. We are viewing the \"shadow\" when looking at the cubes from the top, the front, and the side.\n\n\nReturn *the total area of all three projections*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Geometry",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,2],[3,4]]",
                "Output": "** 17",
                "Explanation": "** Here are the three projections (\"shadows\") of the shape made with each axis-aligned plane."
            }
        ]
    },
    {
        "Title": "Uncommon Words from Two Sentences",
        "slug": "uncommon-words-from-two-sentences",
        "description": "A **sentence** is a string of single-space separated words where each word consists only of lowercase letters.\n\n\nA word is **uncommon** if it appears exactly once in one of the sentences, and **does not appear** in the other sentence.\n\n\nGiven two **sentences** `s1` and `s2`, return *a list of all the **uncommon words***. You may return the answer in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** s1 = \"this apple is sweet\", s2 = \"this apple is sour\"",
                "Output": "** [\"sweet\",\"sour\"]",
                "Explanation": null
            },
            {
                "Input": "** s1 = \"apple apple\", s2 = \"banana\"",
                "Output": "** [\"banana\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Spiral Matrix III",
        "slug": "spiral-matrix-iii",
        "description": "You start at the cell `(rStart, cStart)` of an `rows x cols` grid facing east. The northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column.\n\n\nYou will walk in a clockwise spiral shape to visit every position in this grid. Whenever you move outside the grid's boundary, we continue our walk outside the grid (but may return to the grid boundary later.). Eventually, we reach all `rows * cols` spaces of the grid.\n\n\nReturn *an array of coordinates representing the positions of the grid in the order you visited them*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** rows = 1, cols = 4, rStart = 0, cStart = 0",
                "Output": "** [[0,0],[0,1],[0,2],[0,3]]",
                "Explanation": null
            },
            {
                "Input": "** rows = 5, cols = 6, rStart = 1, cStart = 4",
                "Output": "** [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Possible Bipartition",
        "slug": "possible-bipartition",
        "description": "We want to split a group of `n` people (labeled from `1` to `n`) into two groups of **any size**. Each person may dislike some other people, and they should not go into the same group.\n\n\nGiven the integer `n` and the array `dislikes` where `dislikes[i] = [ai, bi]` indicates that the person labeled `ai` does not like the person labeled `bi`, return `true` *if it is possible to split everyone into two groups in this way*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** n = 4, dislikes = [[1,2],[1,3],[2,4]]",
                "Output": "** true",
                "Explanation": "** The first group has [1,4], and the second group has [2,3]."
            },
            {
                "Input": "** n = 3, dislikes = [[1,2],[1,3],[2,3]]",
                "Output": "** false",
                "Explanation": "** We need at least 3 groups to divide them. We cannot put them in two groups."
            }
        ]
    },
    {
        "Title": "Super Egg Drop",
        "slug": "super-egg-drop",
        "description": "You are given `k` identical eggs and you have access to a building with `n` floors labeled from `1` to `n`.\n\n\nYou know that there exists a floor `f` where `0 <= f <= n` such that any egg dropped at a floor **higher** than `f` will **break**, and any egg dropped **at or below** floor `f` will **not break**.\n\n\nEach move, you may take an unbroken egg and drop it from any floor `x` (where `1 <= x <= n`). If the egg breaks, you can no longer use it. However, if the egg does not break, you may **reuse** it in future moves.\n\n\nReturn *the **minimum number of moves** that you need to determine **with certainty** what the value of* `f` is.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Binary Search",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** k = 1, n = 2",
                "Output": "** 2",
                "Explanation": "** \nDrop the egg from floor 1. If it breaks, we know that f = 0.\nOtherwise, drop the egg from floor 2. If it breaks, we know that f = 1.\nIf it does not break, then we know f = 2.\nHence, we need at minimum 2 moves to determine with certainty what the value of f is."
            },
            {
                "Input": "** k = 2, n = 6",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** k = 3, n = 14",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Fair Candy Swap",
        "slug": "fair-candy-swap",
        "description": "Alice and Bob have a different total number of candies. You are given two integer arrays `aliceSizes` and `bobSizes` where `aliceSizes[i]` is the number of candies of the `ith` box of candy that Alice has and `bobSizes[j]` is the number of candies of the `jth` box of candy that Bob has.\n\n\nSince they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. The total amount of candy a person has is the sum of the number of candies in each box they have.\n\n\nReturn a*n integer array* `answer` *where* `answer[0]` *is the number of candies in the box that Alice must exchange, and* `answer[1]` *is the number of candies in the box that Bob must exchange*. If there are multiple answers, you may **return any** one of them. It is guaranteed that at least one answer exists.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** aliceSizes = [1,1], bobSizes = [2,2]",
                "Output": "** [1,2]",
                "Explanation": null
            },
            {
                "Input": "** aliceSizes = [1,2], bobSizes = [2,3]",
                "Output": "** [1,2]",
                "Explanation": null
            },
            {
                "Input": "** aliceSizes = [2], bobSizes = [1,3]",
                "Output": "** [2,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Construct Binary Tree from Preorder and Postorder Traversal",
        "slug": "construct-binary-tree-from-preorder-and-postorder-traversal",
        "description": "Given two integer arrays, `preorder` and `postorder` where `preorder` is the preorder traversal of a binary tree of **distinct** values and `postorder` is the postorder traversal of the same tree, reconstruct and return *the binary tree*.\n\n\nIf there exist multiple answers, you can **return any** of them.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Divide and Conquer",
            "Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]",
                "Output": "** [1,2,3,4,5,6,7]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find and Replace Pattern",
        "slug": "find-and-replace-pattern",
        "description": "Given a list of strings `words` and a string `pattern`, return *a list of* `words[i]` *that match* `pattern`. You may return the answer in **any order**.\n\n\nA word matches the pattern if there exists a permutation of letters `p` so that after replacing every letter `x` in the pattern with `p(x)`, we get the desired word.\n\n\nRecall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** words = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\"",
                "Output": "** [\"mee\",\"aqq\"]",
                "Explanation": "** \"mee\" matches the pattern because there is a permutation {a -> m, b -> e, ...}. \n\"ccc\" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter."
            },
            {
                "Input": "** words = [\"a\",\"b\",\"c\"], pattern = \"a\"",
                "Output": "** [\"a\",\"b\",\"c\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sum of Subsequence Widths",
        "slug": "sum-of-subsequence-widths",
        "description": "The **width** of a sequence is the difference between the maximum and minimum elements in the sequence.\n\n\nGiven an array of integers `nums`, return *the sum of the **widths** of all the non-empty **subsequences** of* `nums`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\nA **subsequence** is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, `[3,6,2,7]` is a subsequence of the array `[0,3,1,6,2,2,7]`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [2,1,3]",
                "Output": "** 6\nExplanation: The subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].\nThe corresponding widths are 0, 0, 0, 1, 1, 2, 2.\nThe sum of these widths is 6.",
                "Explanation": null
            },
            {
                "Input": "** nums = [2]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Surface Area of 3D Shapes",
        "slug": "surface-area-of-3d-shapes",
        "description": "You are given an `n x n` `grid` where you have placed some `1 x 1 x 1` cubes. Each value `v = grid[i][j]` represents a tower of `v` cubes placed on top of cell `(i, j)`.\n\n\nAfter placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.\n\n\nReturn *the total surface area of the resulting shapes*.\n\n\nNote:** The bottom face of each shape counts toward its surface area.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Geometry",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,2],[3,4]]",
                "Output": "** 34",
                "Explanation": null
            },
            {
                "Input": "** grid = [[1,1,1],[1,0,1],[1,1,1]]",
                "Output": "** 32",
                "Explanation": null
            },
            {
                "Input": "** grid = [[2,2,2],[2,1,2],[2,2,2]]",
                "Output": "** 46",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Groups of Special-Equivalent Strings",
        "slug": "groups-of-special-equivalent-strings",
        "description": "You are given an array of strings of the same length `words`.\n\n\nIn one **move**, you can swap any two even indexed characters or any two odd indexed characters of a string `words[i]`.\n\n\nTwo strings `words[i]` and `words[j]` are **special-equivalent** if after any number of moves, `words[i] == words[j]`.\n\n\n For example, `words[i] = \"zzxy\"` and `words[j] = \"xyzz\"` are **special-equivalent** because we may make the moves `\"zzxy\" -> \"xzzy\" -> \"xyzz\"`.\n\n\nA **group of special-equivalent strings** from `words` is a non-empty subset of words such that:\n\n\n Every pair of strings in the group are special equivalent, and\n The group is the largest size possible (i.e., there is not a string `words[i]` not in the group such that `words[i]` is special-equivalent to every string in the group).\n\n\nReturn *the number of **groups of special-equivalent strings** from* `words`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** words = [\"abcd\",\"cdab\",\"cbad\",\"xyzz\",\"zzxy\",\"zzyx\"]",
                "Output": "** 3",
                "Explanation": "** \nOne group is [\"abcd\", \"cdab\", \"cbad\"], since they are all pairwise special equivalent, and none of the other strings is all pairwise special equivalent to these.\nThe other two groups are [\"xyzz\", \"zzxy\"] and [\"zzyx\"].\nNote that in particular, \"zzxy\" is not special equivalent to \"zzyx\"."
            },
            {
                "Input": "** words = [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "All Possible Full Binary Trees",
        "slug": "all-possible-full-binary-trees",
        "description": "Given an integer `n`, return *a list of all possible **full binary trees** with* `n` *nodes*. Each node of each tree in the answer must have `Node.val == 0`.\n\n\nEach element of the answer is the root node of one possible tree. You may return the final list of trees in **any order**.\n\n\nA **full binary tree** is a binary tree where each node has exactly `0` or `2` children.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming",
            "Tree",
            "Recursion",
            "Memoization",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** n = 7",
                "Output": "** [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Frequency Stack",
        "slug": "maximum-frequency-stack",
        "description": "Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.\n\n\nImplement the `FreqStack` class:\n\n\n `FreqStack()` constructs an empty frequency stack.\n `void push(int val)` pushes an integer `val` onto the top of the stack.\n `int pop()` removes and returns the most frequent element in the stack.\n\t+ If there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "Stack",
            "Design",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "[\"FreqStack\", \"push\", \"push\", \"push\", \"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\", \"pop\"]\n[[], [5], [7], [5], [7], [4], [5], [], [], [], []]",
                "Output": "[null, null, null, null, null, null, null, 5, 7, 5, 4]",
                "Explanation": "FreqStack freqStack = new FreqStack();\nfreqStack.push(5); // The stack is [5]\nfreqStack.push(7); // The stack is [5,7]\nfreqStack.push(5); // The stack is [5,7,5]\nfreqStack.push(7); // The stack is [5,7,5,7]\nfreqStack.push(4); // The stack is [5,7,5,7,4]\nfreqStack.push(5); // The stack is [5,7,5,7,4,5]\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].\nfreqStack.pop();   // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4].\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,4].\nfreqStack.pop();   // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7]."
            }
        ]
    },
    {
        "Title": "Monotonic Array",
        "slug": "monotonic-array",
        "description": "An array is **monotonic** if it is either monotone increasing or monotone decreasing.\n\n\nAn array `nums` is monotone increasing if for all `i <= j`, `nums[i] <= nums[j]`. An array `nums` is monotone decreasing if for all `i <= j`, `nums[i] >= nums[j]`.\n\n\nGiven an integer array `nums`, return `true` *if the given array is monotonic, or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,2,3]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** nums = [6,5,4,4]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,3,2]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Increasing Order Search Tree",
        "slug": "increasing-order-search-tree",
        "description": "Given the `root` of a binary search tree, rearrange the tree in **in-order** so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Stack",
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [5,3,6,2,4,null,8,1,null,null,null,7,9]",
                "Output": "** [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]",
                "Explanation": null
            },
            {
                "Input": "** root = [5,1,7]",
                "Output": "** [1,null,5,null,7]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Bitwise ORs of Subarrays",
        "slug": "bitwise-ors-of-subarrays",
        "description": "Given an integer array `arr`, return *the number of distinct bitwise ORs of all the non-empty subarrays of* `arr`.\n\n\nThe bitwise OR of a subarray is the bitwise OR of each integer in the subarray. The bitwise OR of a subarray of one integer is that integer.\n\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** arr = [0]",
                "Output": "** 1",
                "Explanation": "** There is only one possible result: 0."
            },
            {
                "Input": "** arr = [1,1,2]",
                "Output": "** 3",
                "Explanation": "** The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].\nThese yield the results 1, 1, 2, 1, 3, 3.\nThere are 3 unique values, so the answer is 3."
            },
            {
                "Input": "** arr = [1,2,4]",
                "Output": "** 6",
                "Explanation": "** The possible results are 1, 2, 3, 4, 6, and 7."
            }
        ]
    },
    {
        "Title": "Orderly Queue",
        "slug": "orderly-queue",
        "description": "You are given a string `s` and an integer `k`. You can choose one of the first `k` letters of `s` and append it at the end of the string.\n\n\nReturn *the lexicographically smallest string you could have after applying the mentioned step any number of moves*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "String",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** s = \"cba\", k = 1",
                "Output": "** \"acb\"",
                "Explanation": "** \nIn the first move, we move the 1st character 'c' to the end, obtaining the string \"bac\".\nIn the second move, we move the 1st character 'b' to the end, obtaining the final result \"acb\"."
            },
            {
                "Input": "** s = \"baaca\", k = 3",
                "Output": "** \"aaabc\"",
                "Explanation": "** \nIn the first move, we move the 1st character 'b' to the end, obtaining the string \"aacab\".\nIn the second move, we move the 3rd character 'c' to the end, obtaining the final result \"aaabc\"."
            }
        ]
    },
    {
        "Title": "RLE Iterator",
        "slug": "rle-iterator",
        "description": "We can use run-length encoding (i.e., **RLE**) to encode a sequence of integers. In a run-length encoded array of even length `encoding` (**0-indexed**), for all even `i`, `encoding[i]` tells us the number of times that the non-negative integer value `encoding[i + 1]` is repeated in the sequence.\n\n\n For example, the sequence `arr = [8,8,8,5,5]` can be encoded to be `encoding = [3,8,2,5]`. `encoding = [3,8,0,9,2,5]` and `encoding = [2,8,1,8,2,5]` are also valid **RLE** of `arr`.\n\n\nGiven a run-length encoded array, design an iterator that iterates through it.\n\n\nImplement the `RLEIterator` class:\n\n\n `RLEIterator(int[] encoded)` Initializes the object with the encoded array `encoded`.\n `int next(int n)` Exhausts the next `n` elements and returns the last element exhausted in this way. If there is no element left to exhaust, return `-1` instead.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Design",
            "Counting",
            "Iterator"
        ],
        "examples": [
            {
                "Input": "[\"RLEIterator\", \"next\", \"next\", \"next\", \"next\"]\n[[[3, 8, 0, 9, 2, 5]], [2], [1], [1], [2]]",
                "Output": "[null, 8, 8, 5, -1]",
                "Explanation": "RLEIterator rLEIterator = new RLEIterator([3, 8, 0, 9, 2, 5]); // This maps to the sequence [8,8,8,5,5].\nrLEIterator.next(2); // exhausts 2 terms of the sequence, returning 8. The remaining sequence is now [8, 5, 5].\nrLEIterator.next(1); // exhausts 1 term of the sequence, returning 8. The remaining sequence is now [5, 5].\nrLEIterator.next(1); // exhausts 1 term of the sequence, returning 5. The remaining sequence is now [5].\nrLEIterator.next(2); // exhausts 2 terms, returning -1. This is because the first term exhausted was 5,\nbut the second term did not exist. Since the last term exhausted does not exist, we return -1."
            }
        ]
    },
    {
        "Title": "Online Stock Span",
        "slug": "online-stock-span",
        "description": "Design an algorithm that collects daily price quotes for some stock and returns **the span** of that stock's price for the current day.\n\n\nThe **span** of the stock's price in one day is the maximum number of consecutive days (starting from that day and going backward) for which the stock price was less than or equal to the price of that day.\n\n\n For example, if the prices of the stock in the last four days is `[7,2,1,2]` and the price of the stock today is `2`, then the span of today is `4` because starting from today, the price of the stock was less than or equal `2` for `4` consecutive days.\n Also, if the prices of the stock in the last four days is `[7,34,1,2]` and the price of the stock today is `8`, then the span of today is `3` because starting from today, the price of the stock was less than or equal `8` for `3` consecutive days.\n\n\nImplement the `StockSpanner` class:\n\n\n `StockSpanner()` Initializes the object of the class.\n `int next(int price)` Returns the **span** of the stock's price given that today's price is `price`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Stack",
            "Design",
            "Monotonic Stack",
            "Data Stream"
        ],
        "examples": [
            {
                "Input": "[\"StockSpanner\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\"]\n[[], [100], [80], [60], [70], [60], [75], [85]]",
                "Output": "[null, 1, 1, 1, 2, 1, 4, 6]",
                "Explanation": "StockSpanner stockSpanner = new StockSpanner();\nstockSpanner.next(100); // return 1\nstockSpanner.next(80);  // return 1\nstockSpanner.next(60);  // return 1\nstockSpanner.next(70);  // return 2\nstockSpanner.next(60);  // return 1\nstockSpanner.next(75);  // return 4, because the last 4 prices (including today's price of 75) were less than or equal to today's price.\nstockSpanner.next(85);  // return 6"
            }
        ]
    },
    {
        "Title": "Numbers At Most N Given Digit Set",
        "slug": "numbers-at-most-n-given-digit-set",
        "description": "Given an array of `digits` which is sorted in **non-decreasing** order. You can write numbers using each `digits[i]` as many times as we want. For example, if `digits = ['1','3','5']`, we may write numbers such as `'13'`, `'551'`, and `'1351315'`.\n\n\nReturn *the number of positive integers that can be generated* that are less than or equal to a given integer `n`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "String",
            "Binary Search",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** digits = [\"1\",\"3\",\"5\",\"7\"], n = 100",
                "Output": "** 20",
                "Explanation": "** \nThe 20 numbers that can be written are:\n1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77."
            },
            {
                "Input": "** digits = [\"1\",\"4\",\"9\"], n = 1000000000",
                "Output": "** 29523",
                "Explanation": "** \nWe can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,\n81 four digit numbers, 243 five digit numbers, 729 six digit numbers,\n2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.\nIn total, this is 29523 integers that can be written using the digits array."
            },
            {
                "Input": "** digits = [\"7\"], n = 8",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Valid Permutations for DI Sequence",
        "slug": "valid-permutations-for-di-sequence",
        "description": "You are given a string `s` of length `n` where `s[i]` is either:\n\n\n `'D'` means decreasing, or\n `'I'` means increasing.\n\n\nA permutation `perm` of `n + 1` integers of all the integers in the range `[0, n]` is called a **valid permutation** if for all valid `i`:\n\n\n If `s[i] == 'D'`, then `perm[i] > perm[i + 1]`, and\n If `s[i] == 'I'`, then `perm[i] < perm[i + 1]`.\n\n\nReturn *the number of **valid permutations*** `perm`. Since the answer may be large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** s = \"DID\"",
                "Output": "** 5",
                "Explanation": "** The 5 valid permutations of (0, 1, 2, 3) are:\n(1, 0, 3, 2)\n(2, 0, 3, 1)\n(2, 1, 3, 0)\n(3, 0, 2, 1)\n(3, 1, 2, 0)"
            },
            {
                "Input": "** s = \"D\"",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Fruit Into Baskets",
        "slug": "fruit-into-baskets",
        "description": "You are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array `fruits` where `fruits[i]` is the **type** of fruit the `ith` tree produces.\n\n\nYou want to collect as much fruit as possible. However, the owner has some strict rules that you must follow:\n\n\n You only have **two** baskets, and each basket can only hold a **single type** of fruit. There is no limit on the amount of fruit each basket can hold.\n Starting from any tree of your choice, you must pick **exactly one fruit** from **every** tree (including the start tree) while moving to the right. The picked fruits must fit in one of your baskets.\n Once you reach a tree with fruit that cannot fit in your baskets, you must stop.\n\n\nGiven the integer array `fruits`, return *the **maximum** number of fruits you can pick*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** fruits = [1,2,1]",
                "Output": "** 3",
                "Explanation": "** We can pick from all 3 trees."
            },
            {
                "Input": "** fruits = [0,1,2,2]",
                "Output": "** 3",
                "Explanation": "** We can pick from trees [1,2,2].\nIf we had started at the first tree, we would only pick from trees [0,1]."
            },
            {
                "Input": "** fruits = [1,2,3,2,2]",
                "Output": "** 4",
                "Explanation": "** We can pick from trees [2,3,2,2].\nIf we had started at the first tree, we would only pick from trees [1,2]."
            }
        ]
    },
    {
        "Title": "Sort Array By Parity",
        "slug": "sort-array-by-parity",
        "description": "Given an integer array `nums`, move all the even integers at the beginning of the array followed by all the odd integers.\n\n\nReturn ***any array** that satisfies this condition*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [3,1,2,4]",
                "Output": "** [2,4,3,1]",
                "Explanation": "** The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted."
            },
            {
                "Input": "** nums = [0]",
                "Output": "** [0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Super Palindromes",
        "slug": "super-palindromes",
        "description": "Let's say a positive integer is a **super-palindrome** if it is a palindrome, and it is also the square of a palindrome.\n\n\nGiven two positive integers `left` and `right` represented as strings, return *the number of **super-palindromes** integers in the inclusive range* `[left, right]`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** left = \"4\", right = \"1000\"",
                "Output": "** 4",
                "Explanation": "4, 9, 121, and 484 are superpalindromes.\nNote that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome."
            },
            {
                "Input": "** left = \"1\", right = \"2\"",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sum of Subarray Minimums",
        "slug": "sum-of-subarray-minimums",
        "description": "Given an array of integers arr, find the sum of `min(b)`, where `b` ranges over every (contiguous) subarray of `arr`. Since the answer may be large, return the answer **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Stack",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** arr = [3,1,2,4]",
                "Output": "** 17",
                "Explanation": "** \nSubarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. \nMinimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.\nSum is 17."
            },
            {
                "Input": "** arr = [11,81,94,43,3]",
                "Output": "** 444",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Smallest Range I",
        "slug": "smallest-range-i",
        "description": "You are given an integer array `nums` and an integer `k`.\n\n\nIn one operation, you can choose any index `i` where `0 <= i < nums.length` and change `nums[i]` to `nums[i] + x` where `x` is an integer from the range `[-k, k]`. You can apply this operation **at most once** for each index `i`.\n\n\nThe **score** of `nums` is the difference between the maximum and minimum elements in `nums`.\n\n\nReturn *the minimum **score** of* `nums` *after applying the mentioned operation at most once for each index in it*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math"
        ],
        "examples": [
            {
                "Input": "** nums = [1], k = 0",
                "Output": "** 0",
                "Explanation": "** The score is max(nums) - min(nums) = 1 - 1 = 0."
            },
            {
                "Input": "** nums = [0,10], k = 2",
                "Output": "** 6",
                "Explanation": "** Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6."
            },
            {
                "Input": "** nums = [1,3,6], k = 3",
                "Output": "** 0",
                "Explanation": "** Change nums to be [4, 4, 4]. The score is max(nums) - min(nums) = 4 - 4 = 0."
            }
        ]
    },
    {
        "Title": "Snakes and Ladders",
        "slug": "snakes-and-ladders",
        "description": "You are given an `n x n` integer matrix `board` where the cells are labeled from `1` to `n2` in a [**Boustrophedon style**](https://en.wikipedia.org/wiki/Boustrophedon) starting from the bottom left of the board (i.e. `board[n - 1][0]`) and alternating direction each row.\n\n\nYou start on square `1` of the board. In each move, starting from square `curr`, do the following:\n\n\n Choose a destination square `next` with a label in the range `[curr + 1, min(curr + 6, n2)]`.\n\t+ This choice simulates the result of a standard **6-sided die roll**: i.e., there are always at most 6 destinations, regardless of the size of the board.\n If `next` has a snake or ladder, you **must** move to the destination of that snake or ladder. Otherwise, you move to `next`.\n The game ends when you reach the square `n2`.\n\n\nA board square on row `r` and column `c` has a snake or ladder if `board[r][c] != -1`. The destination of that snake or ladder is `board[r][c]`. Squares `1` and `n2` do not have a snake or ladder.\n\n\nNote that you only take a snake or ladder at most once per move. If the destination to a snake or ladder is the start of another snake or ladder, you do **not** follow the subsequent\u00a0snake or ladder.\n\n\n For example, suppose the board is `[[-1,4],[-1,3]]`, and on the first move, your destination square is `2`. You follow the ladder to square `3`, but do **not** follow the subsequent ladder to `4`.\n\n\nReturn *the least number of moves required to reach the square* `n2`*. If it is not possible to reach the square, return* `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Breadth-First Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]",
                "Output": "** 4",
                "Explanation": "** \nIn the beginning, you start at square 1 (at row 5, column 0).\nYou decide to move to square 2 and must take the ladder to square 15.\nYou then decide to move to square 17 and must take the snake to square 13.\nYou then decide to move to square 14 and must take the ladder to square 35.\nYou then decide to move to square 36, ending the game.\nThis is the lowest possible number of moves to reach the last square, so return 4."
            }
        ]
    },
    {
        "Title": "Smallest Range II",
        "slug": "smallest-range-ii",
        "description": "You are given an integer array `nums` and an integer `k`.\n\n\nFor each index `i` where `0 <= i < nums.length`, change `nums[i]` to be either `nums[i] + k` or `nums[i] - k`.\n\n\nThe **score** of `nums` is the difference between the maximum and minimum elements in `nums`.\n\n\nReturn *the minimum **score** of* `nums` *after changing the values at each index*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1], k = 0",
                "Output": "** 0",
                "Explanation": "** The score is max(nums) - min(nums) = 1 - 1 = 0."
            },
            {
                "Input": "** nums = [0,10], k = 2",
                "Output": "** 6",
                "Explanation": "** Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6."
            },
            {
                "Input": "** nums = [1,3,6], k = 3",
                "Output": "** 3",
                "Explanation": "** Change nums to be [4, 6, 3]. The score is max(nums) - min(nums) = 6 - 3 = 3."
            }
        ]
    },
    {
        "Title": "Online Election",
        "slug": "online-election",
        "description": "You are given two integer arrays `persons` and `times`. In an election, the `ith` vote was cast for `persons[i]` at time `times[i]`.\n\n\nFor each query at a time `t`, find the person that was leading the election at time `t`. Votes cast at time `t` will count towards our query. In the case of a tie, the most recent vote (among tied candidates) wins.\n\n\nImplement the `TopVotedCandidate` class:\n\n\n `TopVotedCandidate(int[] persons, int[] times)` Initializes the object with the `persons` and `times` arrays.\n `int q(int t)` Returns the number of the person that was leading the election at time `t` according to the mentioned rules.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Design"
        ],
        "examples": [
            {
                "Input": "[\"TopVotedCandidate\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\"]\n[[[0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]], [3], [12], [25], [15], [24], [8]]",
                "Output": "[null, 0, 1, 1, 0, 0, 1]",
                "Explanation": "TopVotedCandidate topVotedCandidate = new TopVotedCandidate([0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]);\ntopVotedCandidate.q(3); // return 0, At time 3, the votes are [0], and 0 is leading.\ntopVotedCandidate.q(12); // return 1, At time 12, the votes are [0,1,1], and 1 is leading.\ntopVotedCandidate.q(25); // return 1, At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)\ntopVotedCandidate.q(15); // return 0\ntopVotedCandidate.q(24); // return 0\ntopVotedCandidate.q(8); // return 1"
            }
        ]
    },
    {
        "Title": "Sort an Array",
        "slug": "sort-an-array",
        "description": "Given an array of integers `nums`, sort the array in ascending order and return it.\n\n\nYou must solve the problem **without using any built-in** functions in `O(nlog(n))` time complexity and with the smallest space complexity possible.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Divide and Conquer",
            "Sorting",
            "Heap (Priority Queue)",
            "Merge Sort",
            "Bucket Sort",
            "Radix Sort",
            "Counting Sort"
        ],
        "examples": [
            {
                "Input": "** nums = [5,2,3,1]",
                "Output": "** [1,2,3,5]",
                "Explanation": "** After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5)."
            },
            {
                "Input": "** nums = [5,1,1,2,0,0]",
                "Output": "** [0,0,1,1,2,5]",
                "Explanation": "** Note that the values of nums are not necessairly unique."
            }
        ]
    },
    {
        "Title": "Cat and Mouse",
        "slug": "cat-and-mouse",
        "description": "A game on an **undirected** graph is played by two players, Mouse and Cat, who alternate turns.\n\n\nThe graph is given as follows: `graph[a]` is a list of all nodes `b` such that `ab` is an edge of the graph.\n\n\nThe mouse starts at node `1` and goes first, the cat starts at node `2` and goes second, and there is a hole at node `0`.\n\n\nDuring each player's turn, they **must** travel along one\u00a0edge of the graph that meets where they are.\u00a0 For example, if the Mouse is at node 1, it **must** travel to any node in `graph[1]`.\n\n\nAdditionally, it is not allowed for the Cat to travel to the Hole (node `0`).\n\n\nThen, the game can end in three\u00a0ways:\n\n\n If ever the Cat occupies the same node as the Mouse, the Cat wins.\n If ever the Mouse reaches the Hole, the Mouse wins.\n If ever a position is repeated (i.e., the players are in the same position as a previous turn, and\u00a0it is the same player's turn to move), the game is a draw.\n\n\nGiven a `graph`, and assuming both players play optimally, return\n\n\n `1`\u00a0if the mouse wins the game,\n `2`\u00a0if the cat wins the game, or\n `0`\u00a0if the game is a draw.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Graph",
            "Topological Sort",
            "Memoization",
            "Game Theory"
        ],
        "examples": [
            {
                "Input": "** graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** graph = [[1,3],[0],[3],[0,2]]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "X of a Kind in a Deck of Cards",
        "slug": "x-of-a-kind-in-a-deck-of-cards",
        "description": "You are given an integer array `deck` where `deck[i]` represents the number written on the `ith` card.\n\n\nPartition the cards into **one or more groups** such that:\n\n\n Each group has **exactly** `x` cards where `x > 1`, and\n All the cards in one group have the same integer written on them.\n\n\nReturn `true` *if such partition is possible, or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Counting",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** deck = [1,2,3,4,4,3,2,1]",
                "Output": "** true",
                "Explanation": "Possible partition [1,1],[2,2],[3,3],[4,4]."
            },
            {
                "Input": "** deck = [1,1,1,2,2,2,3,3]",
                "Output": "** false",
                "Explanation": "No possible partition."
            }
        ]
    },
    {
        "Title": "Partition Array into Disjoint Intervals",
        "slug": "partition-array-into-disjoint-intervals",
        "description": "Given an integer array `nums`, partition it into two (contiguous) subarrays `left` and `right` so that:\n\n\n Every element in `left` is less than or equal to every element in `right`.\n `left` and `right` are non-empty.\n `left` has the smallest possible size.\n\n\nReturn *the length of* `left` *after such a partitioning*.\n\n\nTest cases are generated such that partitioning exists.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [5,0,3,8,6]",
                "Output": "** 3",
                "Explanation": "** left = [5,0,3], right = [8,6]"
            },
            {
                "Input": "** nums = [1,1,1,0,6,12]",
                "Output": "** 4",
                "Explanation": "** left = [1,1,1,0], right = [6,12]"
            }
        ]
    },
    {
        "Title": "Word Subsets",
        "slug": "word-subsets",
        "description": "You are given two string arrays `words1` and `words2`.\n\n\nA string `b` is a **subset** of string `a` if every letter in `b` occurs in `a` including multiplicity.\n\n\n For example, `\"wrr\"` is a subset of `\"warrior\"` but is not a subset of `\"world\"`.\n\n\nA string `a` from `words1` is **universal** if for every string `b` in `words2`, `b` is a subset of `a`.\n\n\nReturn an array of all the **universal** strings in `words1`. You may return the answer in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"e\",\"o\"]",
                "Output": "** [\"facebook\",\"google\",\"leetcode\"]",
                "Explanation": null
            },
            {
                "Input": "** words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"l\",\"e\"]",
                "Output": "** [\"apple\",\"google\",\"leetcode\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reverse Only Letters",
        "slug": "reverse-only-letters",
        "description": "Given a string `s`, reverse the string according to the following rules:\n\n\n All the characters that are not English letters remain in the same position.\n All the English letters (lowercase or uppercase) should be reversed.\n\n\nReturn `s` *after reversing it*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"ab-cd\"",
                "Output": "** \"dc-ba\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"a-bC-dEf-ghIj\"",
                "Output": "** \"j-Ih-gfE-dCba\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"Test1ng-Leet=code-Q!\"",
                "Output": "** \"Qedo1ct-eeLg=ntse-T!\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Sum Circular Subarray",
        "slug": "maximum-sum-circular-subarray",
        "description": "Given a **circular integer array** `nums` of length `n`, return *the maximum possible sum of a non-empty **subarray** of* `nums`.\n\n\nA **circular array** means the end of the array connects to the beginning of the array. Formally, the next element of `nums[i]` is `nums[(i + 1) % n]` and the previous element of `nums[i]` is `nums[(i - 1 + n) % n]`.\n\n\nA **subarray** may only include each element of the fixed buffer `nums` at most once. Formally, for a subarray `nums[i], nums[i + 1], ..., nums[j]`, there does not exist `i <= k1`, `k2 <= j` with `k1 % n == k2 % n`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Divide and Conquer",
            "Dynamic Programming",
            "Queue",
            "Monotonic Queue"
        ],
        "examples": [
            {
                "Input": "** nums = [1,-2,3,-2]",
                "Output": "** 3",
                "Explanation": "** Subarray [3] has maximum sum 3."
            },
            {
                "Input": "** nums = [5,-3,5]",
                "Output": "** 10",
                "Explanation": "** Subarray [5,5] has maximum sum 5 + 5 = 10."
            },
            {
                "Input": "** nums = [-3,-2,-3]",
                "Output": "** -2",
                "Explanation": "** Subarray [-2] has maximum sum -2."
            }
        ]
    },
    {
        "Title": "Complete Binary Tree Inserter",
        "slug": "complete-binary-tree-inserter",
        "description": "A **complete binary tree** is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.\n\n\nDesign an algorithm to insert a new node to a complete binary tree keeping it complete after the insertion.\n\n\nImplement the `CBTInserter` class:\n\n\n `CBTInserter(TreeNode root)` Initializes the data structure with the `root` of the complete binary tree.\n `int insert(int v)` Inserts a `TreeNode` into the tree with value `Node.val == val` so that the tree remains complete, and returns the value of the parent of the inserted `TreeNode`.\n `TreeNode get_root()` Returns the root node of the tree.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Breadth-First Search",
            "Design",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "[\"CBTInserter\", \"insert\", \"insert\", \"get_root\"]\n[[[1, 2]], [3], [4], []]",
                "Output": "[null, 1, 2, [1, 2, 3, 4]]",
                "Explanation": "CBTInserter cBTInserter = new CBTInserter([1, 2]);\ncBTInserter.insert(3);  // return 1\ncBTInserter.insert(4);  // return 2\ncBTInserter.get_root(); // return [1, 2, 3, 4]"
            }
        ]
    },
    {
        "Title": "Number of Music Playlists",
        "slug": "number-of-music-playlists",
        "description": "Your music player contains `n` different songs. You want to listen to `goal` songs (not necessarily different) during your trip. To avoid boredom, you will create a playlist so that:\n\n\n Every song is played **at least once**.\n A song can only be played again only if `k` other songs have been played.\n\n\nGiven `n`, `goal`, and `k`, return *the number of possible playlists that you can create*. Since the answer can be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Combinatorics"
        ],
        "examples": [
            {
                "Input": "** n = 3, goal = 3, k = 1",
                "Output": "** 6",
                "Explanation": "** There are 6 possible playlists: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], and [3, 2, 1]."
            },
            {
                "Input": "** n = 2, goal = 3, k = 0",
                "Output": "** 6",
                "Explanation": "** There are 6 possible playlists: [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], and [1, 2, 2]."
            },
            {
                "Input": "** n = 2, goal = 3, k = 1",
                "Output": "** 2",
                "Explanation": "** There are 2 possible playlists: [1, 2, 1] and [2, 1, 2]."
            }
        ]
    },
    {
        "Title": "Minimum Add to Make Parentheses Valid",
        "slug": "minimum-add-to-make-parentheses-valid",
        "description": "A parentheses string is valid if and only if:\n\n\n It is the empty string,\n It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid strings, or\n It can be written as `(A)`, where `A` is a valid string.\n\n\nYou are given a parentheses string `s`. In one move, you can insert a parenthesis at any position of the string.\n\n\n For example, if `s = \"()))\"`, you can insert an opening parenthesis to be `\"(**(**)))\"` or a closing parenthesis to be `\"())**)**)\"`.\n\n\nReturn *the minimum number of moves required to make* `s` *valid*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Stack",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"())\"",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** s = \"(((\"",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sort Array By Parity II",
        "slug": "sort-array-by-parity-ii",
        "description": "Given an array of integers `nums`, half of the integers in `nums` are **odd**, and the other half are **even**.\n\n\nSort the array so that whenever `nums[i]` is odd, `i` is **odd**, and whenever `nums[i]` is even, `i` is **even**.\n\n\nReturn *any answer array that satisfies this condition*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [4,2,5,7]",
                "Output": "** [4,5,2,7]",
                "Explanation": "** [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted."
            },
            {
                "Input": "** nums = [2,3]",
                "Output": "** [2,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "3Sum With Multiplicity",
        "slug": "3sum-with-multiplicity",
        "description": "Given an integer array `arr`, and an integer `target`, return the number of tuples `i, j, k` such that `i < j < k` and `arr[i] + arr[j] + arr[k] == target`.\n\n\nAs the answer can be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers",
            "Sorting",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** arr = [1,1,2,2,3,3,4,4,5,5], target = 8",
                "Output": "** 20",
                "Explanation": "** \nEnumerating by the values (arr[i], arr[j], arr[k]):\n(1, 2, 5) occurs 8 times;\n(1, 3, 4) occurs 8 times;\n(2, 2, 4) occurs 2 times;\n(2, 3, 3) occurs 2 times."
            },
            {
                "Input": "** arr = [1,1,2,2,2,2], target = 5",
                "Output": "** 12",
                "Explanation": "** \narr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:\nWe choose one 1 from [1,1] in 2 ways,\nand two 2s from [2,2,2,2] in 6 ways."
            },
            {
                "Input": "** arr = [2,1,3], target = 6",
                "Output": "** 1",
                "Explanation": "** (1, 2, 3) occured one time in the array so we return 1."
            }
        ]
    },
    {
        "Title": "Minimize Malware Spread",
        "slug": "minimize-malware-spread",
        "description": "You are given a network of `n` nodes represented as an `n x n` adjacency matrix `graph`, where the `ith` node is directly connected to the `jth` node if `graph[i][j] == 1`.\n\n\nSome nodes `initial` are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.\n\n\nSuppose `M(initial)` is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove **exactly one node** from `initial`.\n\n\nReturn the node that, if removed, would minimize `M(initial)`. If multiple nodes could be removed to minimize `M(initial)`, return such a node with **the smallest index**.\n\n\nNote that if a node was removed from the `initial` list of infected nodes, it might still be infected later due to the malware spread.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Long Pressed Name",
        "slug": "long-pressed-name",
        "description": "Your friend is typing his `name` into a keyboard. Sometimes, when typing a character `c`, the key might get *long pressed*, and the character will be typed 1 or more times.\n\n\nYou examine the `typed` characters of the keyboard. Return `True` if it is possible that it was your friends name, with some characters (possibly none) being long pressed.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** name = \"alex\", typed = \"aaleex\"",
                "Output": "** true",
                "Explanation": "** 'a' and 'e' in 'alex' were long pressed."
            },
            {
                "Input": "** name = \"saeed\", typed = \"ssaaedd\"",
                "Output": "** false",
                "Explanation": "** 'e' must have been pressed twice, but it was not in the typed output."
            }
        ]
    },
    {
        "Title": "Flip String to Monotone Increasing",
        "slug": "flip-string-to-monotone-increasing",
        "description": "A binary string is monotone increasing if it consists of some number of `0`'s (possibly none), followed by some number of `1`'s (also possibly none).\n\n\nYou are given a binary string `s`. You can flip `s[i]` changing it from `0` to `1` or from `1` to `0`.\n\n\nReturn *the minimum number of flips to make* `s` *monotone increasing*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"00110\"",
                "Output": "** 1",
                "Explanation": "** We flip the last digit to get 00111."
            },
            {
                "Input": "** s = \"010110\"",
                "Output": "** 2",
                "Explanation": "** We flip to get 011111, or alternatively 000111."
            },
            {
                "Input": "** s = \"00011000\"",
                "Output": "** 2",
                "Explanation": "** We flip to get 00000000."
            }
        ]
    },
    {
        "Title": "Three Equal Parts",
        "slug": "three-equal-parts",
        "description": "You are given an array `arr` which consists of only zeros and ones, divide the array into **three non-empty parts** such that all of these parts represent the same binary value.\n\n\nIf it is possible, return any `[i, j]` with `i + 1 < j`, such that:\n\n\n `arr[0], arr[1], ..., arr[i]` is the first part,\n `arr[i + 1], arr[i + 2], ..., arr[j - 1]` is the second part, and\n `arr[j], arr[j + 1], ..., arr[arr.length - 1]` is the third part.\n All three parts have equal binary values.\n\n\nIf it is not possible, return `[-1, -1]`.\n\n\nNote that the entire part is used when considering what binary value it represents. For example, `[1,1,0]` represents `6` in decimal, not `3`. Also, leading zeros **are allowed**, so `[0,1,1]` and `[1,1]` represent the same value.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math"
        ],
        "examples": [
            {
                "Input": "** arr = [1,0,1,0,1]",
                "Output": "** [0,3]",
                "Explanation": null
            },
            {
                "Input": "** arr = [1,1,0,1,1]",
                "Output": "** [-1,-1]",
                "Explanation": null
            },
            {
                "Input": "** arr = [1,1,0,0,1]",
                "Output": "** [0,2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimize Malware Spread II",
        "slug": "minimize-malware-spread-ii",
        "description": "You are given a network of `n` nodes represented as an `n x n` adjacency matrix `graph`, where the `ith` node is directly connected to the `jth` node if `graph[i][j] == 1`.\n\n\nSome nodes `initial` are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.\n\n\nSuppose `M(initial)` is the final number of nodes infected with malware in the entire network after the spread of malware stops.\n\n\nWe will remove **exactly one node** from `initial`, **completely removing it and any connections from this node to any other node**.\n\n\nReturn the node that, if removed, would minimize `M(initial)`. If multiple nodes could be removed to minimize `M(initial)`, return such a node with **the smallest index**.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Unique Email Addresses",
        "slug": "unique-email-addresses",
        "description": "Every **valid email** consists of a **local name** and a **domain name**, separated by the `'@'` sign. Besides lowercase letters, the email may contain one or more `'.'` or `'+'`.\n\n\n For example, in `\"alice@leetcode.com\"`, `\"alice\"` is the **local name**, and `\"leetcode.com\"` is the **domain name**.\n\n\nIf you add periods `'.'` between some characters in the **local name** part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule **does not apply** to **domain names**.\n\n\n For example, `\"alice.z@leetcode.com\"` and `\"alicez@leetcode.com\"` forward to the same email address.\n\n\nIf you add a plus `'+'` in the **local name**, everything after the first plus sign **will be ignored**. This allows certain emails to be filtered. Note that this rule **does not apply** to **domain names**.\n\n\n For example, `\"m.y+name@email.com\"` will be forwarded to `\"my@email.com\"`.\n\n\nIt is possible to use both of these rules at the same time.\n\n\nGiven an array of strings `emails` where we send one email to each `emails[i]`, return *the number of different addresses that actually receive mails*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** emails = [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]",
                "Output": "** 2",
                "Explanation": "** \"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails."
            },
            {
                "Input": "** emails = [\"a@leetcode.com\",\"b@leetcode.com\",\"c@leetcode.com\"]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Subarrays With Sum",
        "slug": "binary-subarrays-with-sum",
        "description": "Given a binary array `nums` and an integer `goal`, return *the number of non-empty **subarrays** with a sum* `goal`.\n\n\nA **subarray** is a contiguous part of the array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Sliding Window",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [1,0,1,0,1], goal = 2",
                "Output": "** 4",
                "Explanation": "** The 4 subarrays are bolded and underlined below:\r\n[**1,0,1**,0,1]\r\n[**1,0,1,0**,1]\r\n[1,**0,1,0,1**]\r\n[1,0,**1,0,1**]"
            },
            {
                "Input": "** nums = [0,0,0,0,0], goal = 0",
                "Output": "** 15",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Falling Path Sum",
        "slug": "minimum-falling-path-sum",
        "description": "Given an `n x n` array of integers `matrix`, return *the **minimum sum** of any **falling path** through* `matrix`.\n\n\nA **falling path** starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position `(row, col)` will be `(row + 1, col - 1)`, `(row + 1, col)`, or `(row + 1, col + 1)`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** matrix = [[2,1,3],[6,5,4],[7,8,9]]",
                "Output": "** 13",
                "Explanation": "** There are two falling paths with a minimum sum as shown."
            },
            {
                "Input": "** matrix = [[-19,57],[-40,-5]]",
                "Output": "** -59",
                "Explanation": "** The falling path with a minimum sum is shown."
            }
        ]
    },
    {
        "Title": "Beautiful Array",
        "slug": "beautiful-array",
        "description": "An array `nums` of length `n` is **beautiful** if:\n\n\n `nums` is a permutation of the integers in the range `[1, n]`.\n For every `0 <= i < j < n`, there is no index `k` with `i < k < j` where `2 * nums[k] == nums[i] + nums[j]`.\n\n\nGiven the integer `n`, return *any **beautiful** array* `nums` *of length* `n`. There will be at least one valid answer for the given `n`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Divide and Conquer"
        ],
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** [2,1,4,3]",
                "Explanation": null
            },
            {
                "Input": "** n = 5",
                "Output": "** [3,1,2,5,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Recent Calls",
        "slug": "number-of-recent-calls",
        "description": "You have a `RecentCounter` class which counts the number of recent requests within a certain time frame.\n\n\nImplement the `RecentCounter` class:\n\n\n `RecentCounter()` Initializes the counter with zero recent requests.\n `int ping(int t)` Adds a new request at time `t`, where `t` represents some time in milliseconds, and returns the number of requests that has happened in the past `3000` milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range `[t - 3000, t]`.\n\n\nIt is **guaranteed** that every call to `ping` uses a strictly larger value of `t` than the previous call.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Design",
            "Queue",
            "Data Stream"
        ],
        "examples": [
            {
                "Input": "[\"RecentCounter\", \"ping\", \"ping\", \"ping\", \"ping\"]\n[[], [1], [100], [3001], [3002]]",
                "Output": "[null, 1, 2, 3, 3]",
                "Explanation": "RecentCounter recentCounter = new RecentCounter();\nrecentCounter.ping(1);     // requests = [1], range is [-2999,1], return 1\nrecentCounter.ping(100);   // requests = [1, 100], range is [-2900,100], return 2\nrecentCounter.ping(3001);  // requests = [1, 100, 3001], range is [1,3001], return 3\nrecentCounter.ping(3002);  // requests = [1, 100, 3001, 3002], range is [2,3002], return 3"
            }
        ]
    },
    {
        "Title": "Shortest Bridge",
        "slug": "shortest-bridge",
        "description": "You are given an `n x n` binary matrix `grid` where `1` represents land and `0` represents water.\n\n\nAn **island** is a 4-directionally connected group of `1`'s not connected to any other `1`'s. There are **exactly two islands** in `grid`.\n\n\nYou may change `0`'s to `1`'s to connect the two islands to form **one island**.\n\n\nReturn *the smallest number of* `0`*'s you must flip to connect the two islands*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[0,1],[1,0]]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** grid = [[0,1,0],[0,0,0],[0,0,1]]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Knight Dialer",
        "slug": "knight-dialer",
        "description": "The chess knight has a **unique movement**,\u00a0it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an **L**). The possible movements of chess knight are shown in this diagram:\n\n\nA chess knight can move as indicated in the chess diagram below:\n\n\n![](https://assets.leetcode.com/uploads/2020/08/18/chess.jpg)\nWe have a chess knight and a phone pad as shown below, the knight **can only stand on a numeric cell**\u00a0(i.e. blue cell).\n\n\n![](https://assets.leetcode.com/uploads/2020/08/18/phone.jpg)\nGiven an integer `n`, return how many distinct phone numbers of length `n` we can dial.\n\n\nYou are allowed to place the knight **on any numeric cell** initially and then you should perform `n - 1` jumps to dial a number of length `n`. All jumps should be **valid** knight jumps.\n\n\nAs the answer may be very large, **return the answer modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** 10",
                "Explanation": "** We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient."
            },
            {
                "Input": "** n = 2",
                "Output": "** 20",
                "Explanation": "** All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]"
            },
            {
                "Input": "** n = 3131",
                "Output": "** 136006598",
                "Explanation": "** Please take care of the mod."
            }
        ]
    },
    {
        "Title": "Stamping The Sequence",
        "slug": "stamping-the-sequence",
        "description": "You are given two strings `stamp` and `target`. Initially, there is a string `s` of length `target.length` with all `s[i] == '?'`.\n\n\nIn one turn, you can place `stamp` over `s` and replace every letter in the `s` with the corresponding letter from `stamp`.\n\n\n For example, if `stamp = \"abc\"` and `target = \"abcba\"`, then `s` is `\"?????\"` initially. In one turn you can:\n\t+ place `stamp` at index `0` of `s` to obtain `\"abc??\"`,\n\t+ place `stamp` at index `1` of `s` to obtain `\"?abc?\"`, or\n\t+ place `stamp` at index `2` of `s` to obtain `\"??abc\"`.\n Note that `stamp` must be fully contained in the boundaries of `s` in order to stamp (i.e., you cannot place `stamp` at index `3` of `s`).\n\n\nWe want to convert `s` to `target` using **at most** `10 * target.length` turns.\n\n\nReturn *an array of the index of the left-most letter being stamped at each turn*. If we cannot obtain `target` from `s` within `10 * target.length` turns, return an empty array.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Stack",
            "Greedy",
            "Queue"
        ],
        "examples": [
            {
                "Input": "** stamp = \"abc\", target = \"ababc\"",
                "Output": "** [0,2]",
                "Explanation": "** Initially s = \"?????\".\n- Place stamp at index 0 to get \"abc??\".\n- Place stamp at index 2 to get \"ababc\".\n[1,0,2] would also be accepted as an answer, as well as some other answers."
            },
            {
                "Input": "** stamp = \"abca\", target = \"aabcaca\"",
                "Output": "** [3,0,1]",
                "Explanation": "** Initially s = \"???????\".\n- Place stamp at index 3 to get \"???abca\".\n- Place stamp at index 0 to get \"abcabca\".\n- Place stamp at index 1 to get \"aabcaca\"."
            }
        ]
    },
    {
        "Title": "Reorder Data in Log Files",
        "slug": "reorder-data-in-log-files",
        "description": "You are given an array of `logs`. Each log is a space-delimited string of words, where the first word is the **identifier**.\n\n\nThere are two types of logs:\n\n\n **Letter-logs**: All words (except the identifier) consist of lowercase English letters.\n **Digit-logs**: All words (except the identifier) consist of digits.\n\n\nReorder these logs so that:\n\n\n1. The **letter-logs** come before all **digit-logs**.\n2. The **letter-logs** are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.\n3. The **digit-logs** maintain their relative ordering.\n\n\nReturn *the final order of the logs*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** logs = [\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]",
                "Output": "** [\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"]",
                "Explanation": "**\nThe letter-log contents are all different, so their ordering is \"art can\", \"art zero\", \"own kit dig\".\nThe digit-logs have a relative order of \"dig1 8 1 5 1\", \"dig2 3 6\"."
            },
            {
                "Input": "** logs = [\"a1 9 2 3 1\",\"g1 act car\",\"zo4 4 7\",\"ab1 off key dog\",\"a8 act zoo\"]",
                "Output": "** [\"g1 act car\",\"a8 act zoo\",\"ab1 off key dog\",\"a1 9 2 3 1\",\"zo4 4 7\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Range Sum of BST",
        "slug": "range-sum-of-bst",
        "description": "Given the `root` node of a binary search tree and two integers `low` and `high`, return *the sum of values of all nodes with a value in the **inclusive** range* `[low, high]`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [10,5,15,3,7,null,18], low = 7, high = 15",
                "Output": "** 32",
                "Explanation": "** Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32."
            },
            {
                "Input": "** root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10",
                "Output": "** 23",
                "Explanation": "** Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23."
            }
        ]
    },
    {
        "Title": "Minimum Area Rectangle",
        "slug": "minimum-area-rectangle",
        "description": "You are given an array of points in the **X-Y** plane `points` where `points[i] = [xi, yi]`.\n\n\nReturn *the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes*. If there is not any such rectangle, return `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Geometry",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** points = [[1,1],[1,3],[3,1],[3,3],[2,2]]",
                "Output": "** 4",
                "Explanation": null
            },
            {
                "Input": "** points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Distinct Subsequences II",
        "slug": "distinct-subsequences-ii",
        "description": "Given a string s, return *the number of **distinct non-empty subsequences** of* `s`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\nA **subsequence** of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `\"ace\"` is a subsequence of `\"abcde\"` while `\"aec\"` is not.\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"abc\"",
                "Output": "** 7",
                "Explanation": "** The 7 distinct subsequences are \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", and \"abc\"."
            },
            {
                "Input": "** s = \"aba\"",
                "Output": "** 6",
                "Explanation": "** The 6 distinct subsequences are \"a\", \"b\", \"ab\", \"aa\", \"ba\", and \"aba\"."
            },
            {
                "Input": "** s = \"aaa\"",
                "Output": "** 3",
                "Explanation": "** The 3 distinct subsequences are \"a\", \"aa\" and \"aaa\"."
            }
        ]
    },
    {
        "Title": "Valid Mountain Array",
        "slug": "valid-mountain-array",
        "description": "Given an array of integers `arr`, return *`true` if and only if it is a valid mountain array*.\n\n\nRecall that arr is a mountain array if and only if:\n\n\n `arr.length >= 3`\n There exists some `i` with `0 < i < arr.length - 1` such that:\n\t+ `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n\t+ `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\n\n![](https://assets.leetcode.com/uploads/2019/10/20/hint_valid_mountain_array.png)\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** arr = [2,1]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** arr = [3,5,5]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** arr = [0,3,2,1]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "DI String Match",
        "slug": "di-string-match",
        "description": "A permutation `perm` of `n + 1` integers of all the integers in the range `[0, n]` can be represented as a string `s` of length `n` where:\n\n\n `s[i] == 'I'` if `perm[i] < perm[i + 1]`, and\n `s[i] == 'D'` if `perm[i] > perm[i + 1]`.\n\n\nGiven a string `s`, reconstruct the permutation `perm` and return it. If there are multiple valid permutations perm, return **any of them**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"IDID\"",
                "Output": "** [0,4,1,3,2]",
                "Explanation": null
            },
            {
                "Input": "** s = \"III\"",
                "Output": "** [0,1,2,3]",
                "Explanation": null
            },
            {
                "Input": "** s = \"DDI\"",
                "Output": "** [3,2,0,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find the Shortest Superstring",
        "slug": "find-the-shortest-superstring",
        "description": "Given an array of strings `words`, return *the smallest string that contains each string in* `words` *as a substring*. If there are multiple valid strings of the smallest length, return **any of them**.\n\n\nYou may assume that no string in `words` is a substring of another string in `words`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "String",
            "Dynamic Programming",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** words = [\"alex\",\"loves\",\"leetcode\"]",
                "Output": "** \"alexlovesleetcode\"",
                "Explanation": "** All permutations of \"alex\",\"loves\",\"leetcode\" would also be accepted."
            },
            {
                "Input": "** words = [\"catg\",\"ctaagt\",\"gcta\",\"ttca\",\"atgcatc\"]",
                "Output": "** \"gctaagttcatgcatc\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Delete Columns to Make Sorted",
        "slug": "delete-columns-to-make-sorted",
        "description": "You are given an array of `n` strings `strs`, all of the same length.\n\n\nThe strings can be arranged such that there is one on each line, making a grid.\n\n\n For example, `strs = [\"abc\", \"bce\", \"cae\"]` can be arranged as follows:\n\n\n\n```\n\nabc\nbce\ncae\n\n```\n\nYou want to **delete** the columns that are **not sorted lexicographically**. In the above example (**0-indexed**), columns 0 (`'a'`, `'b'`, `'c'`) and 2 (`'c'`, `'e'`, `'e'`) are sorted, while column 1 (`'b'`, `'c'`, `'a'`) is not, so you would delete column 1.\n\n\nReturn *the number of columns that you will delete*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "examples": [
            {
                "Input": "** strs = [\"cba\",\"daf\",\"ghi\"]",
                "Output": "** 1",
                "Explanation": "** The grid looks as follows:\n  cba\n  daf\n  ghi\nColumns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column."
            },
            {
                "Input": "** strs = [\"a\",\"b\"]",
                "Output": "** 0",
                "Explanation": "** The grid looks as follows:\n  a\n  b\nColumn 0 is the only column and is sorted, so you will not delete any columns."
            },
            {
                "Input": "** strs = [\"zyx\",\"wvu\",\"tsr\"]",
                "Output": "** 3",
                "Explanation": "** The grid looks as follows:\n  zyx\n  wvu\n  tsr\nAll 3 columns are not sorted, so you will delete all 3."
            }
        ]
    },
    {
        "Title": "Minimum Increment to Make Array Unique",
        "slug": "minimum-increment-to-make-array-unique",
        "description": "You are given an integer array `nums`. In one move, you can pick an index `i` where `0 <= i < nums.length` and increment `nums[i]` by `1`.\n\n\nReturn *the minimum number of moves to make every value in* `nums` ***unique***.\n\n\nThe test cases are generated so that the answer fits in a 32-bit integer.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,2]",
                "Output": "** 1",
                "Explanation": "** After 1 move, the array could be [1, 2, 3]."
            },
            {
                "Input": "** nums = [3,2,1,2,1,7]",
                "Output": "** 6",
                "Explanation": "** After 6 moves, the array could be [3, 4, 1, 2, 5, 7].\nIt can be shown with 5 or less moves that it is impossible for the array to have all unique values."
            }
        ]
    },
    {
        "Title": "Validate Stack Sequences",
        "slug": "validate-stack-sequences",
        "description": "Given two integer arrays `pushed` and `popped` each with distinct values, return `true` *if this could have been the result of a sequence of push and pop operations on an initially empty stack, or* `false` *otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Stack",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** pushed = [1,2,3,4,5], popped = [4,5,3,2,1]",
                "Output": "** true",
                "Explanation": "** We might do the following sequence:\npush(1), push(2), push(3), push(4),\npop() -> 4,\npush(5),\npop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1"
            },
            {
                "Input": "** pushed = [1,2,3,4,5], popped = [4,3,5,1,2]",
                "Output": "** false",
                "Explanation": "** 1 cannot be popped before 2."
            }
        ]
    },
    {
        "Title": "Most Stones Removed with Same Row or Column",
        "slug": "most-stones-removed-with-same-row-or-column",
        "description": "On a 2D plane, we place `n` stones at some integer coordinate points. Each coordinate point may have at most one stone.\n\n\nA stone can be removed if it shares either **the same row or the same column** as another stone that has not been removed.\n\n\nGiven an array `stones` of length `n` where `stones[i] = [xi, yi]` represents the location of the `ith` stone, return *the largest possible number of stones that can be removed*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Depth-First Search",
            "Union Find",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]",
                "Output": "** 5",
                "Explanation": "** One way to remove 5 stones is as follows:\n1. Remove stone [2,2] because it shares the same row as [2,1].\n2. Remove stone [2,1] because it shares the same column as [0,1].\n3. Remove stone [1,2] because it shares the same row as [1,0].\n4. Remove stone [1,0] because it shares the same column as [0,0].\n5. Remove stone [0,1] because it shares the same row as [0,0].\nStone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane."
            },
            {
                "Input": "** stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]",
                "Output": "** 3",
                "Explanation": "** One way to make 3 moves is as follows:\n1. Remove stone [2,2] because it shares the same row as [2,0].\n2. Remove stone [2,0] because it shares the same column as [0,0].\n3. Remove stone [0,2] because it shares the same row as [0,0].\nStones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane."
            },
            {
                "Input": "** stones = [[0,0]]",
                "Output": "** 0",
                "Explanation": "** [0,0] is the only stone on the plane, so you cannot remove it."
            }
        ]
    },
    {
        "Title": "Bag of Tokens",
        "slug": "bag-of-tokens",
        "description": "You start with an initial **power** of `power`, an initial **score** of `0`, and a bag of tokens given as an integer array `tokens`, where each\u00a0`tokens[i]` denotes the value of token*i*.\n\n\nYour goal is to **maximize** the total **score** by strategically playing these tokens. In one move, you can play an **unplayed** token in one of the two ways (but not both for the same token):\n\n\n **Face-up**: If your current power is **at least** `tokens[i]`, you may play token*i*, losing `tokens[i]` power and gaining `1` score.\n **Face-down**: If your current score is **at least** `1`, you may play token*i*, gaining `tokens[i]` power and losing `1` score.\n\n\nReturn *the **maximum** possible score you can achieve after playing **any** number of tokens*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** tokens = [100], power = 50",
                "Output": "** 0",
                "Explanation": "** Since your score is `0` initially, you cannot play the token face-down. You also cannot play it face-up since your power (`50`) is less than `tokens[0]`\u00a0(`100`)."
            },
            {
                "Input": "** tokens = [200,100], power = 150",
                "Output": "** 1",
                "Explanation": "** Play token*1* (`100`) face-up, reducing your power to\u00a0`50` and increasing your score to\u00a0`1`.\n\n\nThere is no need to play token*0*, since you cannot play it face-up to add to your score. The maximum score achievable is `1`."
            },
            {
                "Input": "** tokens = [100,200,300,400], power = 200",
                "Output": "** 2",
                "Explanation": "** Play the tokens in this order to get a score of `2`:\n\n\n1. Play token*0* (`100`) face-up, reducing power to `100` and increasing score to `1`.\n2. Play token*3* (`400`) face-down, increasing power to `500` and reducing score to `0`.\n3. Play token*1* (`200`) face-up, reducing power to `300` and increasing score to `1`.\n4. Play token*2* (`300`) face-up, reducing power to `0` and increasing score to `2`.\n\n\nThe maximum score achievable is `2`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= tokens.length <= 1000`\n* `0 <= tokens[i], power < 104`"
            }
        ]
    },
    {
        "Title": "Largest Time for Given Digits",
        "slug": "largest-time-for-given-digits",
        "description": "Given an array `arr` of 4 digits, find the latest 24-hour time that can be made using each digit **exactly once**.\n\n\n24-hour times are formatted as `\"HH:MM\"`, where `HH` is between `00` and `23`, and `MM` is between `00` and `59`. The earliest 24-hour time is `00:00`, and the latest is `23:59`.\n\n\nReturn *the latest 24-hour time in `\"HH:MM\"` format*. If no valid time can be made, return an empty string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** arr = [1,2,3,4]",
                "Output": "** \"23:41\"",
                "Explanation": "** The valid 24-hour times are \"12:34\", \"12:43\", \"13:24\", \"13:42\", \"14:23\", \"14:32\", \"21:34\", \"21:43\", \"23:14\", and \"23:41\". Of these times, \"23:41\" is the latest."
            },
            {
                "Input": "** arr = [5,5,5,5]",
                "Output": "** \"\"",
                "Explanation": "** There are no valid 24-hour times as \"55:55\" is not valid."
            }
        ]
    },
    {
        "Title": "Reveal Cards In Increasing Order",
        "slug": "reveal-cards-in-increasing-order",
        "description": "You are given an integer array `deck`. There is a deck of cards where every card has a unique integer. The integer on the `ith` card is `deck[i]`.\n\n\nYou can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.\n\n\nYou will do the following steps repeatedly until all cards are revealed:\n\n\n1. Take the top card of the deck, reveal it, and take it out of the deck.\n2. If there are still cards in the deck then put the next top card of the deck at the bottom of the deck.\n3. If there are still unrevealed cards, go back to step 1. Otherwise, stop.\n\n\nReturn *an ordering of the deck that would reveal the cards in increasing order*.\n\n\nNote** that the first entry in the answer is considered to be the top of the deck.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Queue",
            "Sorting",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** deck = [17,13,11,2,3,5,7]",
                "Output": "** [2,13,3,11,5,17,7]",
                "Explanation": "** \nWe get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it.\nAfter reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.\nWe reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].\nWe reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].\nWe reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].\nWe reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].\nWe reveal 11, and move 17 to the bottom.  The deck is now [13,17].\nWe reveal 13, and move 17 to the bottom.  The deck is now [17].\nWe reveal 17.\nSince all the cards revealed are in increasing order, the answer is correct."
            },
            {
                "Input": "** deck = [1,1000]",
                "Output": "** [1,1000]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Flip Equivalent Binary Trees",
        "slug": "flip-equivalent-binary-trees",
        "description": "For a binary tree **T**, we can define a **flip operation** as follows: choose any node, and swap the left and right child subtrees.\n\n\nA binary tree **X**\u00a0is *flip equivalent* to a binary tree **Y** if and only if we can make **X** equal to **Y** after some number of flip operations.\n\n\nGiven the roots of two binary trees `root1` and `root2`, return `true` if the two trees are flip equivalent or `false` otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]",
                "Output": "** true",
                "Explanation": "** We flipped at nodes with values 1, 3, and 5."
            }
        ]
    },
    {
        "Title": "Largest Component Size by Common Factor",
        "slug": "largest-component-size-by-common-factor",
        "description": "You are given an integer array of unique positive integers `nums`. Consider the following graph:\n\n\n There are `nums.length` nodes, labeled `nums[0]` to `nums[nums.length - 1]`,\n There is an undirected edge between `nums[i]` and `nums[j]` if `nums[i]` and `nums[j]` share a common factor greater than `1`.\n\n\nReturn *the size of the largest connected component in the graph*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Union Find",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [4,6,15,35]",
                "Output": "** 4",
                "Explanation": null
            },
            {
                "Input": "** nums = [20,50,9,63]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** nums = [2,3,6,7,4,12,21,39]",
                "Output": "** 8",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Verifying an Alien Dictionary",
        "slug": "verifying-an-alien-dictionary",
        "description": "In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different `order`. The `order` of the alphabet is some permutation of lowercase letters.\n\n\nGiven a sequence of `words` written in the alien language, and the `order` of the alphabet, return `true` if and only if the given `words` are sorted lexicographically in this alien language.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** words = [\"hello\",\"leetcode\"], order = \"hlabcdefgijkmnopqrstuvwxyz\"",
                "Output": "** true",
                "Explanation": "** As 'h' comes before 'l' in this language, then the sequence is sorted."
            },
            {
                "Input": "** words = [\"word\",\"world\",\"row\"], order = \"worldabcefghijkmnpqstuvxyz\"",
                "Output": "** false",
                "Explanation": "** As 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted."
            },
            {
                "Input": "** words = [\"apple\",\"app\"], order = \"abcdefghijklmnopqrstuvwxyz\"",
                "Output": "** false",
                "Explanation": "** The first three characters \"app\" match, and the second string is shorter (in size.) According to lexicographical rules \"apple\" > \"app\", because 'l' > '\u2205', where '\u2205' is defined as the blank character which is less than any other character ([More info](https://en.wikipedia.org/wiki/Lexicographical_order))."
            }
        ]
    },
    {
        "Title": "Array of Doubled Pairs",
        "slug": "array-of-doubled-pairs",
        "description": "Given an integer array of even length `arr`, return `true` *if it is possible to reorder* `arr` *such that* `arr[2 * i + 1] = 2 * arr[2 * i]` *for every* `0 <= i < len(arr) / 2`*, or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** arr = [3,1,3,6]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** arr = [2,1,2,6]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** arr = [4,-2,2,-4]",
                "Output": "** true",
                "Explanation": "** We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4]."
            }
        ]
    },
    {
        "Title": "Delete Columns to Make Sorted II",
        "slug": "delete-columns-to-make-sorted-ii",
        "description": "You are given an array of `n` strings `strs`, all of the same length.\n\n\nWe may choose any deletion indices, and we delete all the characters in those indices for each string.\n\n\nFor example, if we have `strs = [\"abcdef\",\"uvwxyz\"]` and deletion indices `{0, 2, 3}`, then the final array after deletions is `[\"bef\", \"vyz\"]`.\n\n\nSuppose we chose a set of deletion indices `answer` such that after deletions, the final array has its elements in **lexicographic** order (i.e., `strs[0] <= strs[1] <= strs[2] <= ... <= strs[n - 1]`). Return *the minimum possible value of* `answer.length`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** strs = [\"ca\",\"bb\",\"ac\"]",
                "Output": "** 1",
                "Explanation": "** \nAfter deleting the first column, strs = [\"a\", \"b\", \"c\"].\nNow strs is in lexicographic order (ie. strs[0] <= strs[1] <= strs[2]).\nWe require at least 1 deletion since initially strs was not in lexicographic order, so the answer is 1."
            },
            {
                "Input": "** strs = [\"xc\",\"yb\",\"za\"]",
                "Output": "** 0",
                "Explanation": "** \nstrs is already in lexicographic order, so we do not need to delete anything.\nNote that the rows of strs are not necessarily in lexicographic order:\ni.e., it is NOT necessarily true that (strs[0][0] <= strs[0][1] <= ...)"
            },
            {
                "Input": "** strs = [\"zyx\",\"wvu\",\"tsr\"]",
                "Output": "** 3",
                "Explanation": "** We have to delete every column."
            }
        ]
    },
    {
        "Title": "Tallest Billboard",
        "slug": "tallest-billboard",
        "description": "You are installing a billboard and want it to have the largest height. The billboard will have two steel supports, one on each side. Each steel support must be an equal height.\n\n\nYou are given a collection of `rods` that can be welded together. For example, if you have rods of lengths `1`, `2`, and `3`, you can weld them together to make a support of length `6`.\n\n\nReturn *the largest possible height of your billboard installation*. If you cannot support the billboard, return `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** rods = [1,2,3,6]",
                "Output": "** 6",
                "Explanation": "** We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6."
            },
            {
                "Input": "** rods = [1,2,3,4,5,6]",
                "Output": "** 10",
                "Explanation": "** We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10."
            },
            {
                "Input": "** rods = [1,2]",
                "Output": "** 0",
                "Explanation": "** The billboard cannot be supported, so we return 0."
            }
        ]
    },
    {
        "Title": "Prison Cells After N Days",
        "slug": "prison-cells-after-n-days",
        "description": "There are `8` prison cells in a row and each cell is either occupied or vacant.\n\n\nEach day, whether the cell is occupied or vacant changes according to the following rules:\n\n\n If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.\n Otherwise, it becomes vacant.\n\n\nNote** that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors.\n\n\nYou are given an integer array `cells` where `cells[i] == 1` if the `ith` cell is occupied and `cells[i] == 0` if the `ith` cell is vacant, and you are given an integer `n`.\n\n\nReturn the state of the prison after `n` days (i.e., `n` such changes described above).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** cells = [0,1,0,1,1,0,0,1], n = 7",
                "Output": "** [0,0,1,1,0,0,0,0]",
                "Explanation": "** The following table summarizes the state of the prison on each day:\nDay 0: [0, 1, 0, 1, 1, 0, 0, 1]\nDay 1: [0, 1, 1, 0, 0, 0, 0, 0]\nDay 2: [0, 0, 0, 0, 1, 1, 1, 0]\nDay 3: [0, 1, 1, 0, 0, 1, 0, 0]\nDay 4: [0, 0, 0, 0, 0, 1, 0, 0]\nDay 5: [0, 1, 1, 1, 0, 1, 0, 0]\nDay 6: [0, 0, 1, 0, 1, 1, 0, 0]\nDay 7: [0, 0, 1, 1, 0, 0, 0, 0]"
            },
            {
                "Input": "** cells = [1,0,0,1,0,0,1,0], n = 1000000000",
                "Output": "** [0,0,1,1,1,1,1,0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Check Completeness of a Binary Tree",
        "slug": "check-completeness-of-a-binary-tree",
        "description": "Given the `root` of a binary tree, determine if it is a *complete binary tree*.\n\n\nIn a **[complete binary tree](http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees)**, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between `1` and `2h` nodes inclusive at the last level `h`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2,3,4,5,6]",
                "Output": "** true",
                "Explanation": "** Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible."
            },
            {
                "Input": "** root = [1,2,3,4,5,null,7]",
                "Output": "** false",
                "Explanation": "** The node with value 7 isn't as far left as possible."
            }
        ]
    },
    {
        "Title": "Regions Cut By Slashes",
        "slug": "regions-cut-by-slashes",
        "description": "An `n x n` grid is composed of `1 x 1` squares where each `1 x 1` square consists of a `'/'`, `'\\'`, or blank space `' '`. These characters divide the square into contiguous regions.\n\n\nGiven the grid `grid` represented as a string array, return *the number of regions*.\n\n\nNote that backslash characters are escaped, so a `'\\'` is represented as `'\\\\'`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [\" /\",\"/ \"]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** grid = [\" /\",\"  \"]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** grid = [\"/\\\\\",\"\\\\/\"]",
                "Output": "** 5",
                "Explanation": "** Recall that because \\ characters are escaped, \"\\\\/\" refers to \\/, and \"/\\\\\" refers to /\\."
            }
        ]
    },
    {
        "Title": "Delete Columns to Make Sorted III",
        "slug": "delete-columns-to-make-sorted-iii",
        "description": "You are given an array of `n` strings `strs`, all of the same length.\n\n\nWe may choose any deletion indices, and we delete all the characters in those indices for each string.\n\n\nFor example, if we have `strs = [\"abcdef\",\"uvwxyz\"]` and deletion indices `{0, 2, 3}`, then the final array after deletions is `[\"bef\", \"vyz\"]`.\n\n\nSuppose we chose a set of deletion indices `answer` such that after deletions, the final array has **every string (row) in lexicographic** order. (i.e., `(strs[0][0] <= strs[0][1] <= ... <= strs[0][strs[0].length - 1])`, and `(strs[1][0] <= strs[1][1] <= ... <= strs[1][strs[1].length - 1])`, and so on). Return *the minimum possible value of* `answer.length`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** strs = [\"babca\",\"bbazb\"]",
                "Output": "** 3",
                "Explanation": "** After deleting columns 0, 1, and 4, the final array is strs = [\"bc\", \"az\"].\nBoth these rows are individually in lexicographic order (ie. strs[0][0] <= strs[0][1] and strs[1][0] <= strs[1][1]).\nNote that strs[0] > strs[1] - the array strs is not necessarily in lexicographic order."
            },
            {
                "Input": "** strs = [\"edcba\"]",
                "Output": "** 4",
                "Explanation": "** If we delete less than 4 columns, the only row will not be lexicographically sorted."
            },
            {
                "Input": "** strs = [\"ghi\",\"def\",\"abc\"]",
                "Output": "** 0",
                "Explanation": "** All rows are already lexicographically sorted."
            }
        ]
    },
    {
        "Title": "N-Repeated Element in Size 2N Array",
        "slug": "n-repeated-element-in-size-2n-array",
        "description": "You are given an integer array `nums` with the following properties:\n\n\n `nums.length == 2 * n`.\n `nums` contains `n + 1` **unique** elements.\n Exactly one element of `nums` is repeated `n` times.\n\n\nReturn *the element that is repeated* `n` *times*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,3]",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** nums = [2,1,2,5,3,2]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** nums = [5,1,5,2,5,3,5,4]",
                "Output": "** 5",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Width Ramp",
        "slug": "maximum-width-ramp",
        "description": "A **ramp** in an integer array `nums` is a pair `(i, j)` for which `i < j` and `nums[i] <= nums[j]`. The **width** of such a ramp is `j - i`.\n\n\nGiven an integer array `nums`, return *the maximum width of a **ramp** in* `nums`. If there is no **ramp** in `nums`, return `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Stack",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** nums = [6,0,8,2,1,5]",
                "Output": "** 4",
                "Explanation": "** The maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5."
            },
            {
                "Input": "** nums = [9,8,1,0,1,9,4,0,4,1]",
                "Output": "** 7",
                "Explanation": "** The maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1 and nums[9] = 1."
            }
        ]
    },
    {
        "Title": "Minimum Area Rectangle II",
        "slug": "minimum-area-rectangle-ii",
        "description": "You are given an array of points in the **X-Y** plane `points` where `points[i] = [xi, yi]`.\n\n\nReturn *the minimum area of any rectangle formed from these points, with sides **not necessarily parallel** to the X and Y axes*. If there is not any such rectangle, return `0`.\n\n\nAnswers within `10-5` of the actual answer will be accepted.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Geometry"
        ],
        "examples": [
            {
                "Input": "** points = [[1,2],[2,1],[1,0],[0,1]]",
                "Output": "** 2.00000",
                "Explanation": "** The minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2."
            },
            {
                "Input": "** points = [[0,1],[2,1],[1,1],[1,0],[2,0]]",
                "Output": "** 1.00000",
                "Explanation": "** The minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1."
            },
            {
                "Input": "** points = [[0,3],[1,2],[3,1],[1,3],[2,1]]",
                "Output": "** 0",
                "Explanation": "** There is no possible rectangle to form from these points."
            }
        ]
    },
    {
        "Title": "Least Operators to Express Number",
        "slug": "least-operators-to-express-number",
        "description": "Given a single positive integer `x`, we will write an expression of the form `x (op1) x (op2) x (op3) x ...` where each operator `op1`, `op2`, etc. is either addition, subtraction, multiplication, or division (`+`, `-`, `*`, or `/)`. For example, with `x = 3`, we might write `3 * 3 / 3 + 3 - 3` which is a value of 3.\n\n\nWhen writing such an expression, we adhere to the following conventions:\n\n\n The division operator (`/`) returns rational numbers.\n There are no parentheses placed anywhere.\n We use the usual order of operations: multiplication and division happen before addition and subtraction.\n It is not allowed to use the unary negation operator (`-`). For example, \"`x - x`\" is a valid expression as it only uses subtraction, but \"`-x + x`\" is not because it uses negation.\n\n\nWe would like to write an expression with the least number of operators such that the expression equals the given `target`. Return the least number of operators used.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Memoization"
        ],
        "examples": [
            {
                "Input": "** x = 3, target = 19",
                "Output": "** 5",
                "Explanation": "** 3 * 3 + 3 * 3 + 3 / 3.\nThe expression contains 5 operations."
            },
            {
                "Input": "** x = 5, target = 501",
                "Output": "** 8",
                "Explanation": "** 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.\nThe expression contains 8 operations."
            },
            {
                "Input": "** x = 100, target = 100000000",
                "Output": "** 3",
                "Explanation": "** 100 * 100 * 100 * 100.\nThe expression contains 3 operations."
            }
        ]
    },
    {
        "Title": "Univalued Binary Tree",
        "slug": "univalued-binary-tree",
        "description": "A binary tree is **uni-valued** if every node in the tree has the same value.\n\n\nGiven the `root` of a binary tree, return `true` *if the given tree is **uni-valued**, or* `false` *otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,1,1,1,1,null,1]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** root = [2,2,2,5,2]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Vowel Spellchecker",
        "slug": "vowel-spellchecker",
        "description": "Given a `wordlist`, we want to implement a spellchecker that converts a query word into a correct word.\n\n\nFor a given `query` word, the spell checker handles two categories of spelling mistakes:\n\n\n Capitalization: If the query matches a word in the wordlist (**case-insensitive**), then the query word is returned with the same case as the case in the wordlist.\n\t+ Example: `wordlist = [\"yellow\"]`, `query = \"YellOw\"`: `correct = \"yellow\"`\n\t+ Example: `wordlist = [\"Yellow\"]`, `query = \"yellow\"`: `correct = \"Yellow\"`\n\t+ Example: `wordlist = [\"yellow\"]`, `query = \"yellow\"`: `correct = \"yellow\"`\n Vowel Errors: If after replacing the vowels `('a', 'e', 'i', 'o', 'u')` of the query word with any vowel individually, it matches a word in the wordlist (**case-insensitive**), then the query word is returned with the same case as the match in the wordlist.\n\t+ Example: `wordlist = [\"YellOw\"]`, `query = \"yollow\"`: `correct = \"YellOw\"`\n\t+ Example: `wordlist = [\"YellOw\"]`, `query = \"yeellow\"`: `correct = \"\"` (no match)\n\t+ Example: `wordlist = [\"YellOw\"]`, `query = \"yllw\"`: `correct = \"\"` (no match)\n\n\nIn addition, the spell checker operates under the following precedence rules:\n\n\n When the query exactly matches a word in the wordlist (**case-sensitive**), you should return the same word back.\n When the query matches a word up to capitlization, you should return the first such match in the wordlist.\n When the query matches a word up to vowel errors, you should return the first such match in the wordlist.\n If the query has no matches in the wordlist, you should return the empty string.\n\n\nGiven some `queries`, return a list of words `answer`, where `answer[i]` is the correct word for `query = queries[i]`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** wordlist = [\"KiTe\",\"kite\",\"hare\",\"Hare\"], queries = [\"kite\",\"Kite\",\"KiTe\",\"Hare\",\"HARE\",\"Hear\",\"hear\",\"keti\",\"keet\",\"keto\"]",
                "Output": "** [\"kite\",\"KiTe\",\"KiTe\",\"Hare\",\"hare\",\"\",\"\",\"KiTe\",\"\",\"KiTe\"]",
                "Explanation": null
            },
            {
                "Input": "** wordlist = [\"yellow\"], queries = [\"YellOw\"]",
                "Output": "** [\"yellow\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Numbers With Same Consecutive Differences",
        "slug": "numbers-with-same-consecutive-differences",
        "description": "Given two integers n and k, return *an array of all the integers of length* `n` *where the difference between every two consecutive digits is* `k`. You may return the answer in **any order**.\n\n\nNote that the integers should not have leading zeros. Integers as `02` and `043` are not allowed.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Backtracking",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** n = 3, k = 7",
                "Output": "** [181,292,707,818,929]",
                "Explanation": "** Note that 070 is not a valid number, because it has leading zeroes."
            },
            {
                "Input": "** n = 2, k = 1",
                "Output": "** [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Tree Cameras",
        "slug": "binary-tree-cameras",
        "description": "You are given the `root` of a binary tree. We install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children.\n\n\nReturn *the minimum number of cameras needed to monitor all nodes of the tree*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [0,0,null,0,0]",
                "Output": "** 1",
                "Explanation": "** One camera is enough to monitor all nodes if placed as shown."
            },
            {
                "Input": "** root = [0,0,null,0,null,0,null,null,0]",
                "Output": "** 2",
                "Explanation": "** At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement."
            }
        ]
    },
    {
        "Title": "Pancake Sorting",
        "slug": "pancake-sorting",
        "description": "Given an array of integers `arr`, sort the array by performing a series of **pancake flips**.\n\n\nIn one pancake flip we do the following steps:\n\n\n Choose an integer `k` where `1 <= k <= arr.length`.\n Reverse the sub-array `arr[0...k-1]` (**0-indexed**).\n\n\nFor example, if `arr = [3,2,1,4]` and we performed a pancake flip choosing `k = 3`, we reverse the sub-array `[3,2,1]`, so `arr = [1,2,3,4]` after the pancake flip at `k = 3`.\n\n\nReturn *an array of the* `k`*-values corresponding to a sequence of pancake flips that sort* `arr`. Any valid answer that sorts the array within `10 * arr.length` flips will be judged as correct.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** arr = [3,2,4,1]",
                "Output": "** [4,2,4,3]",
                "Explanation": "** \nWe perform 4 pancake flips, with k values 4, 2, 4, and 3.\nStarting state: arr = [3, 2, 4, 1]\nAfter 1st flip (k = 4): arr = [1, 4, 2, 3]\nAfter 2nd flip (k = 2): arr = [4, 1, 2, 3]\nAfter 3rd flip (k = 4): arr = [3, 2, 1, 4]\nAfter 4th flip (k = 3): arr = [1, 2, 3, 4], which is sorted."
            },
            {
                "Input": "** arr = [1,2,3]",
                "Output": "** []",
                "Explanation": "** The input is already sorted, so there is no need to flip anything.\nNote that other answers, such as [3, 3], would also be accepted."
            }
        ]
    },
    {
        "Title": "Powerful Integers",
        "slug": "powerful-integers",
        "description": "Given three integers `x`, `y`, and `bound`, return *a list of all the **powerful integers** that have a value less than or equal to* `bound`.\n\n\nAn integer is **powerful** if it can be represented as `xi + yj` for some integers `i >= 0` and `j >= 0`.\n\n\nYou may return the answer in **any order**. In your answer, each value should occur **at most once**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Math",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** x = 2, y = 3, bound = 10",
                "Output": "** [2,3,4,5,7,9,10]",
                "Explanation": "**\n2 = 20 + 30\n3 = 21 + 30\n4 = 20 + 31\n5 = 21 + 31\n7 = 22 + 31\n9 = 23 + 30\n10 = 20 + 32"
            },
            {
                "Input": "** x = 3, y = 5, bound = 15",
                "Output": "** [2,4,6,8,10,14]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Flip Binary Tree To Match Preorder Traversal",
        "slug": "flip-binary-tree-to-match-preorder-traversal",
        "description": "You are given the `root` of a binary tree with `n` nodes, where each node is uniquely assigned a value from `1` to `n`. You are also given a sequence of `n` values `voyage`, which is the **desired** [**pre-order traversal**](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order) of the binary tree.\n\n\nAny node in the binary tree can be **flipped** by swapping its left and right subtrees. For example, flipping node 1 will have the following effect:\n\n\n![](https://assets.leetcode.com/uploads/2021/02/15/fliptree.jpg)\nFlip the **smallest** number of nodes so that the **pre-order traversal** of the tree **matches** `voyage`.\n\n\nReturn *a list of the values of all **flipped** nodes. You may return the answer in **any order**. If it is **impossible** to flip the nodes in the tree to make the pre-order traversal match* `voyage`*, return the list* `[-1]`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2], voyage = [2,1]",
                "Output": "** [-1]",
                "Explanation": "** It is impossible to flip the nodes such that the pre-order traversal matches voyage."
            },
            {
                "Input": "** root = [1,2,3], voyage = [1,3,2]",
                "Output": "** [1]",
                "Explanation": "** Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage."
            },
            {
                "Input": "** root = [1,2,3], voyage = [1,2,3]",
                "Output": "** []",
                "Explanation": "** The tree's pre-order traversal already matches voyage, so no nodes need to be flipped."
            }
        ]
    },
    {
        "Title": "Equal Rational Numbers",
        "slug": "equal-rational-numbers",
        "description": "Given two strings `s` and `t`, each of which represents a non-negative rational number, return `true` if and only if they represent the same number. The strings may use parentheses to denote the repeating part of the rational number.\n\n\nA **rational number** can be represented using up to three parts: `<IntegerPart>`, `<NonRepeatingPart>`, and a `<RepeatingPart>`. The number will be represented in one of the following three ways:\n\n\n `<IntegerPart>`\n\t+ For example, `12`, `0`, and `123`.\n `<IntegerPart>**<.>**<NonRepeatingPart>`\n\t+ For example, `0.5`, `1.`, `2.12`, and `123.0001`.\n `<IntegerPart>**<.>**<NonRepeatingPart>**<(>**<RepeatingPart>**<)>**`\n\t+ For example, `0.1(6)`, `1.(9)`, `123.00(1212)`.\n\n\nThe repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets. For example:\n\n\n `1/6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66)`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"0.(52)\", t = \"0.5(25)\"",
                "Output": "** true",
                "Explanation": "** Because \"0.(52)\" represents 0.52525252..., and \"0.5(25)\" represents 0.52525252525..... , the strings represent the same number."
            },
            {
                "Input": "** s = \"0.1666(6)\", t = \"0.166(66)\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"0.9(9)\", t = \"1.\"",
                "Output": "** true",
                "Explanation": "** \"0.9(9)\" represents 0.999999999... repeated forever, which equals 1.  [[See this link for an explanation.](https://en.wikipedia.org/wiki/0.999...)]\n\"1.\" represents the number 1, which is formed correctly: (IntegerPart) = \"1\" and (NonRepeatingPart) = \"\"."
            }
        ]
    },
    {
        "Title": "K Closest Points to Origin",
        "slug": "k-closest-points-to-origin",
        "description": "Given an array of `points` where `points[i] = [xi, yi]` represents a point on the **X-Y** plane and an integer `k`, return the `k` closest points to the origin `(0, 0)`.\n\n\nThe distance between two points on the **X-Y** plane is the Euclidean distance (i.e., `\u221a(x1 - x2)2 + (y1 - y2)2`).\n\n\nYou may return the answer in **any order**. The answer is **guaranteed** to be **unique** (except for the order that it is in).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Divide and Conquer",
            "Geometry",
            "Sorting",
            "Heap (Priority Queue)",
            "Quickselect"
        ],
        "examples": [
            {
                "Input": "** points = [[1,3],[-2,2]], k = 1",
                "Output": "** [[-2,2]]",
                "Explanation": "**\nThe distance between (1, 3) and the origin is sqrt(10).\nThe distance between (-2, 2) and the origin is sqrt(8).\nSince sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.\nWe only want the closest k = 1 points from the origin, so the answer is just [[-2,2]]."
            }
        ]
    },
    {
        "Title": "Subarray Sums Divisible by K",
        "slug": "subarray-sums-divisible-by-k",
        "description": "Given an integer array `nums` and an integer `k`, return *the number of non-empty **subarrays** that have a sum divisible by* `k`.\n\n\nA **subarray** is a **contiguous** part of an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [4,5,0,-2,-3,1], k = 5",
                "Output": "** 7",
                "Explanation": "** There are 7 subarrays with a sum divisible by k = 5:\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]"
            },
            {
                "Input": "** nums = [5], k = 9",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Odd Even Jump",
        "slug": "odd-even-jump",
        "description": "You are given an integer array `arr`. From some starting index, you can make a series of jumps. The (1st, 3rd, 5th, ...) jumps in the series are called **odd-numbered jumps**, and the (2nd, 4th, 6th, ...) jumps in the series are called **even-numbered jumps**. Note that the **jumps** are numbered, not the indices.\n\n\nYou may jump forward from index `i` to index `j` (with `i < j`) in the following way:\n\n\n During **odd-numbered jumps** (i.e., jumps 1, 3, 5, ...), you jump to the index `j` such that `arr[i] <= arr[j]` and `arr[j]` is the smallest possible value. If there are multiple such indices `j`, you can only jump to the **smallest** such index `j`.\n During **even-numbered jumps** (i.e., jumps 2, 4, 6, ...), you jump to the index `j` such that `arr[i] >= arr[j]` and `arr[j]` is the largest possible value. If there are multiple such indices `j`, you can only jump to the **smallest** such index `j`.\n It may be the case that for some index `i`, there are no legal jumps.\n\n\nA starting index is **good** if, starting from that index, you can reach the end of the array (index `arr.length - 1`) by jumping some number of times (possibly 0 or more than once).\n\n\nReturn *the number of **good** starting indices*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Stack",
            "Monotonic Stack",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** arr = [10,13,12,14,15]",
                "Output": "** 2",
                "Explanation": "** \nFrom starting index i = 0, we can make our 1st jump to i = 2 (since arr[2] is the smallest among arr[1], arr[2], arr[3], arr[4] that is greater or equal to arr[0]), then we cannot jump any more.\nFrom starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more.\nFrom starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end.\nFrom starting index i = 4, we have reached the end already.\nIn total, there are 2 different starting indices i = 3 and i = 4, where we can reach the end with some number of\njumps."
            },
            {
                "Input": "** arr = [2,3,1,1,4]",
                "Output": "** 3",
                "Explanation": "** \nFrom starting index i = 0, we make jumps to i = 1, i = 2, i = 3:\nDuring our 1st jump (odd-numbered), we first jump to i = 1 because arr[1] is the smallest value in [arr[1], arr[2], arr[3], arr[4]] that is greater than or equal to arr[0].\nDuring our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less than or equal to arr[1]. arr[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3\nDuring our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because arr[3] is the smallest value in [arr[3], arr[4]] that is greater than or equal to arr[2].\nWe can't jump from i = 3 to i = 4, so the starting index i = 0 is not good.\nIn a similar manner, we can deduce that:\nFrom starting index i = 1, we jump to i = 4, so we reach the end.\nFrom starting index i = 2, we jump to i = 3, and then we can't jump anymore.\nFrom starting index i = 3, we jump to i = 4, so we reach the end.\nFrom starting index i = 4, we are already at the end.\nIn total, there are 3 different starting indices i = 1, i = 3, and i = 4, where we can reach the end with some\nnumber of jumps."
            },
            {
                "Input": "** arr = [5,1,3,4,2]",
                "Output": "** 3",
                "Explanation": "** We can reach the end from starting indices 1, 2, and 4."
            }
        ]
    },
    {
        "Title": "Largest Perimeter Triangle",
        "slug": "largest-perimeter-triangle",
        "description": "Given an integer array `nums`, return *the largest perimeter of a triangle with a non-zero area, formed from three of these lengths*. If it is impossible to form any triangle of a non-zero area, return `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [2,1,2]",
                "Output": "** 5",
                "Explanation": "** You can form a triangle with three side lengths: 1, 2, and 2."
            },
            {
                "Input": "** nums = [1,2,1,10]",
                "Output": "** 0",
                "Explanation": "** \nYou cannot use the side lengths 1, 1, and 2 to form a triangle.\nYou cannot use the side lengths 1, 1, and 10 to form a triangle.\nYou cannot use the side lengths 1, 2, and 10 to form a triangle.\nAs we cannot use any three side lengths to form a triangle of non-zero area, we return 0."
            }
        ]
    },
    {
        "Title": "Squares of a Sorted Array",
        "slug": "squares-of-a-sorted-array",
        "description": "Given an integer array `nums` sorted in **non-decreasing** order, return *an array of **the squares of each number** sorted in non-decreasing order*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [-4,-1,0,3,10]",
                "Output": "** [0,1,9,16,100]",
                "Explanation": "** After squaring, the array becomes [16,1,0,9,100].\nAfter sorting, it becomes [0,1,9,16,100]."
            },
            {
                "Input": "** nums = [-7,-3,2,3,11]",
                "Output": "** [4,9,9,49,121]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Turbulent Subarray",
        "slug": "longest-turbulent-subarray",
        "description": "Given an integer array `arr`, return *the length of a maximum size turbulent subarray of* `arr`.\n\n\nA subarray is **turbulent** if the comparison sign flips between each adjacent pair of elements in the subarray.\n\n\nMore formally, a subarray `[arr[i], arr[i + 1], ..., arr[j]]` of `arr` is said to be turbulent if and only if:\n\n\n For `i <= k < j`:\n\t+ `arr[k] > arr[k + 1]` when `k` is odd, and\n\t+ `arr[k] < arr[k + 1]` when `k` is even.\n Or, for `i <= k < j`:\n\t+ `arr[k] > arr[k + 1]` when `k` is even, and\n\t+ `arr[k] < arr[k + 1]` when `k` is odd.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** arr = [9,4,2,10,7,8,8,1,9]",
                "Output": "** 5",
                "Explanation": "** arr[1] > arr[2] < arr[3] > arr[4] < arr[5]"
            },
            {
                "Input": "** arr = [4,8,12,16]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** arr = [100]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Distribute Coins in Binary Tree",
        "slug": "distribute-coins-in-binary-tree",
        "description": "You are given the `root` of a binary tree with `n` nodes where each `node` in the tree has `node.val` coins. There are `n` coins in total throughout the whole tree.\n\n\nIn one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent.\n\n\nReturn *the **minimum** number of moves required to make every node have **exactly** one coin*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [3,0,0]",
                "Output": "** 2",
                "Explanation": "** From the root of the tree, we move one coin to its left child, and one coin to its right child."
            },
            {
                "Input": "** root = [0,3,0]",
                "Output": "** 3",
                "Explanation": "** From the left child of the root, we move two coins to the root [taking two moves]. Then, we move one coin from the root of the tree to the right child."
            }
        ]
    },
    {
        "Title": "Unique Paths III",
        "slug": "unique-paths-iii",
        "description": "You are given an `m x n` integer array `grid` where `grid[i][j]` could be:\n\n\n `1` representing the starting square. There is exactly one starting square.\n `2` representing the ending square. There is exactly one ending square.\n `0` representing empty squares we can walk over.\n `-1` representing obstacles that we cannot walk over.\n\n\nReturn *the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Backtracking",
            "Bit Manipulation",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]",
                "Output": "** 2",
                "Explanation": "** We have the following two paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)"
            },
            {
                "Input": "** grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]",
                "Output": "** 4",
                "Explanation": "** We have the following four paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)"
            },
            {
                "Input": "** grid = [[0,1],[2,0]]",
                "Output": "** 0",
                "Explanation": "** There is no path that walks over every empty square exactly once.\nNote that the starting and ending square can be anywhere in the grid."
            }
        ]
    },
    {
        "Title": "Time Based Key-Value Store",
        "slug": "time-based-key-value-store",
        "description": "Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.\n\n\nImplement the `TimeMap` class:\n\n\n `TimeMap()` Initializes the object of the data structure.\n `void set(String key, String value, int timestamp)` Stores the key `key` with the value `value` at the given time `timestamp`.\n `String get(String key, int timestamp)` Returns a value such that `set` was called previously, with `timestamp_prev <= timestamp`. If there are multiple such values, it returns the value associated with the largest `timestamp_prev`. If there are no values, it returns `\"\"`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Binary Search",
            "Design"
        ],
        "examples": [
            {
                "Input": "[\"TimeMap\", \"set\", \"get\", \"get\", \"set\", \"get\", \"get\"]\n[[], [\"foo\", \"bar\", 1], [\"foo\", 1], [\"foo\", 3], [\"foo\", \"bar2\", 4], [\"foo\", 4], [\"foo\", 5]]",
                "Output": "[null, null, \"bar\", \"bar\", null, \"bar2\", \"bar2\"]",
                "Explanation": "TimeMap timeMap = new TimeMap();\ntimeMap.set(\"foo\", \"bar\", 1);  // store the key \"foo\" and value \"bar\" along with timestamp = 1.\ntimeMap.get(\"foo\", 1);         // return \"bar\"\ntimeMap.get(\"foo\", 3);         // return \"bar\", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is \"bar\".\ntimeMap.set(\"foo\", \"bar2\", 4); // store the key \"foo\" and value \"bar2\" along with timestamp = 4.\ntimeMap.get(\"foo\", 4);         // return \"bar2\"\ntimeMap.get(\"foo\", 5);         // return \"bar2\""
            }
        ]
    },
    {
        "Title": "Triples with Bitwise AND Equal To Zero",
        "slug": "triples-with-bitwise-and-equal-to-zero",
        "description": "Given an integer array nums, return *the number of **AND triples***.\n\n\nAn **AND triple** is a triple of indices `(i, j, k)` such that:\n\n\n `0 <= i < nums.length`\n `0 <= j < nums.length`\n `0 <= k < nums.length`\n `nums[i] & nums[j] & nums[k] == 0`, where `&` represents the bitwise-AND operator.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [2,1,3]",
                "Output": "** 12",
                "Explanation": "** We could choose the following i, j, k triples:\n(i=0, j=0, k=1) : 2 & 2 & 1\n(i=0, j=1, k=0) : 2 & 1 & 2\n(i=0, j=1, k=1) : 2 & 1 & 1\n(i=0, j=1, k=2) : 2 & 1 & 3\n(i=0, j=2, k=1) : 2 & 3 & 1\n(i=1, j=0, k=0) : 1 & 2 & 2\n(i=1, j=0, k=1) : 1 & 2 & 1\n(i=1, j=0, k=2) : 1 & 2 & 3\n(i=1, j=1, k=0) : 1 & 1 & 2\n(i=1, j=2, k=0) : 1 & 3 & 2\n(i=2, j=0, k=1) : 3 & 2 & 1\n(i=2, j=1, k=0) : 3 & 1 & 2"
            },
            {
                "Input": "** nums = [0,0,0]",
                "Output": "** 27",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Cost For Tickets",
        "slug": "minimum-cost-for-tickets",
        "description": "You have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array `days`. Each day is an integer from `1` to `365`.\n\n\nTrain tickets are sold in **three different ways**:\n\n\n a **1-day** pass is sold for `costs[0]` dollars,\n a **7-day** pass is sold for `costs[1]` dollars, and\n a **30-day** pass is sold for `costs[2]` dollars.\n\n\nThe passes allow that many days of consecutive travel.\n\n\n For example, if we get a **7-day** pass on day `2`, then we can travel for `7` days: `2`, `3`, `4`, `5`, `6`, `7`, and `8`.\n\n\nReturn *the minimum number of dollars you need to travel every day in the given list of days*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** days = [1,4,6,7,8,20], costs = [2,7,15]",
                "Output": "** 11",
                "Explanation": "** For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.\nOn day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.\nOn day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.\nIn total, you spent $11 and covered all the days of your travel."
            },
            {
                "Input": "** days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]",
                "Output": "** 17",
                "Explanation": "** For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.\nOn day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.\nIn total, you spent $17 and covered all the days of your travel."
            }
        ]
    },
    {
        "Title": "String Without AAA or BBB",
        "slug": "string-without-aaa-or-bbb",
        "description": "Given two integers `a` and `b`, return **any** string `s` such that:\n\n\n `s` has length `a + b` and contains exactly `a` `'a'` letters, and exactly `b` `'b'` letters,\n The substring `'aaa'` does not occur in `s`, and\n The substring `'bbb'` does not occur in `s`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** a = 1, b = 2",
                "Output": "** \"abb\"",
                "Explanation": "** \"abb\", \"bab\" and \"bba\" are all correct answers."
            },
            {
                "Input": "** a = 4, b = 1",
                "Output": "** \"aabaa\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sum of Even Numbers After Queries",
        "slug": "sum-of-even-numbers-after-queries",
        "description": "You are given an integer array `nums` and an array `queries` where `queries[i] = [vali, indexi]`.\n\n\nFor each query `i`, first, apply `nums[indexi] = nums[indexi] + vali`, then print the sum of the even values of `nums`.\n\n\nReturn *an integer array* `answer` *where* `answer[i]` *is the answer to the* `ith` *query*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]",
                "Output": "** [8,6,2,4]",
                "Explanation": "** At the beginning, the array is [1,2,3,4].\nAfter adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.\nAfter adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.\nAfter adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.\nAfter adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4."
            },
            {
                "Input": "** nums = [1], queries = [[4,0]]",
                "Output": "** [0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Interval List Intersections",
        "slug": "interval-list-intersections",
        "description": "You are given two lists of closed intervals, `firstList` and `secondList`, where `firstList[i] = [starti, endi]` and `secondList[j] = [startj, endj]`. Each list of intervals is pairwise **disjoint** and in **sorted order**.\n\n\nReturn *the intersection of these two interval lists*.\n\n\nA **closed interval** `[a, b]` (with `a <= b`) denotes the set of real numbers `x` with `a <= x <= b`.\n\n\nThe **intersection** of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of `[1, 3]` and `[2, 4]` is `[2, 3]`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]",
                "Output": "** [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Vertical Order Traversal of a Binary Tree",
        "slug": "vertical-order-traversal-of-a-binary-tree",
        "description": "Given the `root` of a binary tree, calculate the **vertical order traversal** of the binary tree.\n\n\nFor each node at position `(row, col)`, its left and right children will be at positions `(row + 1, col - 1)` and `(row + 1, col + 1)` respectively. The root of the tree is at `(0, 0)`.\n\n\nThe **vertical order traversal** of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.\n\n\nReturn *the **vertical order traversal** of the binary tree*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Sorting",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [3,9,20,null,null,15,7]",
                "Output": "** [[9],[3,15],[20],[7]]",
                "Explanation": "**\nColumn -1: Only node 9 is in this column.\nColumn 0: Nodes 3 and 15 are in this column in that order from top to bottom.\nColumn 1: Only node 20 is in this column.\nColumn 2: Only node 7 is in this column."
            },
            {
                "Input": "** root = [1,2,3,4,5,6,7]",
                "Output": "** [[4],[2],[1,5,6],[3],[7]]",
                "Explanation": "**\nColumn -2: Only node 4 is in this column.\nColumn -1: Only node 2 is in this column.\nColumn 0: Nodes 1, 5, and 6 are in this column.\n          1 is at the top, so it comes first.\n          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.\nColumn 1: Only node 3 is in this column.\nColumn 2: Only node 7 is in this column."
            },
            {
                "Input": "** root = [1,2,3,4,6,5,7]",
                "Output": "** [[4],[2],[1,5,6],[3],[7]]",
                "Explanation": "**\nThis case is the exact same as example 2, but with nodes 5 and 6 swapped.\nNote that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values."
            }
        ]
    },
    {
        "Title": "Smallest String Starting From Leaf",
        "slug": "smallest-string-starting-from-leaf",
        "description": "You are given the `root` of a binary tree where each node has a value in the range `[0, 25]` representing the letters `'a'` to `'z'`.\n\n\nReturn *the **lexicographically smallest** string that starts at a leaf of this tree and ends at the root*.\n\n\nAs a reminder, any shorter prefix of a string is **lexicographically smaller**.\n\n\n For example, `\"ab\"` is lexicographically smaller than `\"aba\"`.\n\n\nA leaf of a node is a node that has no children.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Backtracking",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [0,1,2,3,4,3,4]",
                "Output": "** \"dba\"",
                "Explanation": null
            },
            {
                "Input": "** root = [25,1,3,1,3,0,2]",
                "Output": "** \"adz\"",
                "Explanation": null
            },
            {
                "Input": "** root = [2,2,1,null,1,0,null,0]",
                "Output": "** \"abc\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Add to Array-Form of Integer",
        "slug": "add-to-array-form-of-integer",
        "description": "The **array-form** of an integer `num` is an array representing its digits in left to right order.\n\n\n For example, for `num = 1321`, the array form is `[1,3,2,1]`.\n\n\nGiven `num`, the **array-form** of an integer, and an integer `k`, return *the **array-form** of the integer* `num + k`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math"
        ],
        "examples": [
            {
                "Input": "** num = [1,2,0,0], k = 34",
                "Output": "** [1,2,3,4]",
                "Explanation": "** 1200 + 34 = 1234"
            },
            {
                "Input": "** num = [2,7,4], k = 181",
                "Output": "** [4,5,5]",
                "Explanation": "** 274 + 181 = 455"
            },
            {
                "Input": "** num = [2,1,5], k = 806",
                "Output": "** [1,0,2,1]",
                "Explanation": "** 215 + 806 = 1021"
            }
        ]
    },
    {
        "Title": "Satisfiability of Equality Equations",
        "slug": "satisfiability-of-equality-equations",
        "description": "You are given an array of strings `equations` that represent relationships between variables where each string `equations[i]` is of length `4` and takes one of two different forms: `\"xi==yi\"` or `\"xi!=yi\"`.Here, `xi` and `yi` are lowercase letters (not necessarily different) that represent one-letter variable names.\n\n\nReturn `true` *if it is possible to assign integers to variable names so as to satisfy all the given equations, or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Union Find",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** equations = [\"a==b\",\"b!=a\"]",
                "Output": "** false",
                "Explanation": "** If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.\nThere is no way to assign the variables to satisfy both equations."
            },
            {
                "Input": "** equations = [\"b==a\",\"a==b\"]",
                "Output": "** true",
                "Explanation": "** We could assign a = 1 and b = 1 to satisfy both equations."
            }
        ]
    },
    {
        "Title": "Broken Calculator",
        "slug": "broken-calculator",
        "description": "There is a broken calculator that has the integer `startValue` on its display initially. In one operation, you can:\n\n\n multiply the number on display by `2`, or\n subtract `1` from the number on display.\n\n\nGiven two integers `startValue` and `target`, return *the minimum number of operations needed to display* `target` *on the calculator*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** startValue = 2, target = 3",
                "Output": "** 2",
                "Explanation": "** Use double operation and then decrement operation {2 -> 4 -> 3}."
            },
            {
                "Input": "** startValue = 5, target = 8",
                "Output": "** 2",
                "Explanation": "** Use decrement and then double {5 -> 4 -> 8}."
            },
            {
                "Input": "** startValue = 3, target = 10",
                "Output": "** 3",
                "Explanation": "** Use double, decrement and double {3 -> 6 -> 5 -> 10}."
            }
        ]
    },
    {
        "Title": "Subarrays with K Different Integers",
        "slug": "subarrays-with-k-different-integers",
        "description": "Given an integer array `nums` and an integer `k`, return *the number of **good subarrays** of* `nums`.\n\n\nA **good array** is an array where the number of different integers in that array is exactly `k`.\n\n\n For example, `[1,2,3,1,2]` has `3` different integers: `1`, `2`, and `3`.\n\n\nA **subarray** is a **contiguous** part of an array.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Sliding Window",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,1,2,3], k = 2",
                "Output": "** 7",
                "Explanation": "** Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]"
            },
            {
                "Input": "** nums = [1,2,1,3,4], k = 3",
                "Output": "** 3",
                "Explanation": "** Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4]."
            }
        ]
    },
    {
        "Title": "Cousins in Binary Tree",
        "slug": "cousins-in-binary-tree",
        "description": "Given the `root` of a binary tree with unique values and the values of two different nodes of the tree `x` and `y`, return `true` *if the nodes corresponding to the values* `x` *and* `y` *in the tree are **cousins**, or* `false` *otherwise.\n\n\nTwo nodes of a binary tree are **cousins** if they have the same depth with different parents.\n\n\nNote that in a binary tree, the root node is at the depth `0`, and children of each depth `k` node are at the depth `k + 1`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2,3,4], x = 4, y = 3",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** root = [1,2,3,null,4,null,5], x = 5, y = 4",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** root = [1,2,3,null,4], x = 2, y = 3",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Rotting Oranges",
        "slug": "rotting-oranges",
        "description": "You are given an `m x n` `grid` where each cell can have one of three values:\n\n\n `0` representing an empty cell,\n `1` representing a fresh orange, or\n `2` representing a rotten orange.\n\n\nEvery minute, any fresh orange that is **4-directionally adjacent** to a rotten orange becomes rotten.\n\n\nReturn *the minimum number of minutes that must elapse until no cell has a fresh orange*. If *this is impossible, return* `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Breadth-First Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[2,1,1],[1,1,0],[0,1,1]]",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Number of K Consecutive Bit Flips",
        "slug": "minimum-number-of-k-consecutive-bit-flips",
        "description": "You are given a binary array `nums` and an integer `k`.\n\n\nA **k-bit flip** is choosing a **subarray** of length `k` from `nums` and simultaneously changing every `0` in the subarray to `1`, and every `1` in the subarray to `0`.\n\n\nReturn *the minimum number of **k-bit flips** required so that there is no* `0` *in the array*. If it is not possible, return `-1`.\n\n\nA **subarray** is a **contiguous** part of an array.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Bit Manipulation",
            "Queue",
            "Sliding Window",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [0,1,0], k = 1",
                "Output": "** 2",
                "Explanation": "** Flip nums[0], then flip nums[2]."
            },
            {
                "Input": "** nums = [1,1,0], k = 2",
                "Output": "** -1",
                "Explanation": "** No matter how we flip subarrays of size 2, we cannot make the array become [1,1,1]."
            },
            {
                "Input": "** nums = [0,0,0,1,0,1,1,0], k = 3",
                "Output": "** 3",
                "Explanation": "** \nFlip nums[0],nums[1],nums[2]: nums becomes [1,1,1,1,0,1,1,0]\nFlip nums[4],nums[5],nums[6]: nums becomes [1,1,1,1,1,0,0,0]\nFlip nums[5],nums[6],nums[7]: nums becomes [1,1,1,1,1,1,1,1]"
            }
        ]
    },
    {
        "Title": "Number of Squareful Arrays",
        "slug": "number-of-squareful-arrays",
        "description": "An array is **squareful** if the sum of every pair of adjacent elements is a **perfect square**.\n\n\nGiven an integer array nums, return *the number of permutations of* `nums` *that are **squareful***.\n\n\nTwo permutations `perm1` and `perm2` are different if there is some index `i` such that `perm1[i] != perm2[i]`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Backtracking",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** nums = [1,17,8]",
                "Output": "** 2",
                "Explanation": "** [1,8,17] and [17,8,1] are the valid permutations."
            },
            {
                "Input": "** nums = [2,2,2]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find the Town Judge",
        "slug": "find-the-town-judge",
        "description": "In a town, there are `n` people labeled from `1` to `n`. There is a rumor that one of these people is secretly the town judge.\n\n\nIf the town judge exists, then:\n\n\n1. The town judge trusts nobody.\n2. Everybody (except for the town judge) trusts the town judge.\n3. There is exactly one person that satisfies properties **1** and **2**.\n\n\nYou are given an array `trust` where `trust[i] = [ai, bi]` representing that the person labeled `ai` trusts the person labeled `bi`. If a trust relationship does not exist in `trust` array, then such a trust relationship does not exist.\n\n\nReturn *the label of the town judge if the town judge exists and can be identified, or return* `-1` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** n = 2, trust = [[1,2]]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** n = 3, trust = [[1,3],[2,3]]",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** n = 3, trust = [[1,3],[2,3],[3,1]]",
                "Output": "** -1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Binary Tree II",
        "slug": "maximum-binary-tree-ii",
        "description": "A **maximum tree** is a tree where every node has a value greater than any other value in its subtree.\n\n\nYou are given the `root` of a maximum binary tree and an integer `val`.\n\n\nJust as in the [previous problem](https://leetcode.com/problems/maximum-binary-tree/), the given tree was constructed from a list `a` (`root = Construct(a)`) recursively with the following `Construct(a)` routine:\n\n\n If `a` is empty, return `null`.\n Otherwise, let `a[i]` be the largest element of `a`. Create a `root` node with the value `a[i]`.\n The left child of `root` will be `Construct([a[0], a[1], ..., a[i - 1]])`.\n The right child of `root` will be `Construct([a[i + 1], a[i + 2], ..., a[a.length - 1]])`.\n Return `root`.\n\n\nNote that we were not given `a` directly, only a root node `root = Construct(a)`.\n\n\nSuppose `b` is a copy of `a` with the value `val` appended to it. It is guaranteed that `b` has unique values.\n\n\nReturn `Construct(b)`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [4,1,3,null,null,2], val = 5",
                "Output": "** [5,4,null,1,3,null,null,2]",
                "Explanation": "** a = [1,4,2,3], b = [1,4,2,3,5]"
            },
            {
                "Input": "** root = [5,2,4,null,1], val = 3",
                "Output": "** [5,2,4,null,1,null,3]",
                "Explanation": "** a = [2,1,5,4], b = [2,1,5,4,3]"
            },
            {
                "Input": "** root = [5,2,3,null,1], val = 4",
                "Output": "** [5,2,4,null,1,3]",
                "Explanation": "** a = [2,1,5,3], b = [2,1,5,3,4]"
            }
        ]
    },
    {
        "Title": "Available Captures for Rook",
        "slug": "available-captures-for-rook",
        "description": "On an `8 x 8` chessboard, there is **exactly one** white rook `'R'` and some number of white bishops `'B'`, black pawns `'p'`, and empty squares `'.'`.\n\n\nWhen the rook moves, it chooses one of four cardinal directions (north, east, south, or west), then moves in that direction until it chooses to stop, reaches the edge of the board, captures a black pawn, or is blocked by a white bishop. A rook is considered **attacking** a pawn if the rook can capture the pawn on the rook's turn. The **number of available captures** for the white rook is the number of pawns that the rook is **attacking**.\n\n\nReturn *the **number of available captures** for the white rook*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"R\",\".\",\".\",\".\",\"p\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]",
                "Output": "** 3",
                "Explanation": "** In this example, the rook is attacking all the pawns."
            },
            {
                "Input": "** board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"B\",\"R\",\"B\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]",
                "Output": "** 0",
                "Explanation": "** The bishops are blocking the rook from attacking any of the pawns."
            },
            {
                "Input": "** board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\"p\",\"p\",\".\",\"R\",\".\",\"p\",\"B\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]",
                "Output": "** 3",
                "Explanation": "** The rook is attacking the pawns at positions b5, d6, and f5."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Merge Stones",
        "slug": "minimum-cost-to-merge-stones",
        "description": "There are `n` piles of `stones` arranged in a row. The `ith` pile has `stones[i]` stones.\n\n\nA move consists of merging exactly `k` **consecutive** piles into one pile, and the cost of this move is equal to the total number of stones in these `k` piles.\n\n\nReturn *the minimum cost to merge all piles of stones into one pile*. If it is impossible, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** stones = [3,2,4,1], k = 2",
                "Output": "** 20",
                "Explanation": "** We start with [3, 2, 4, 1].\nWe merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].\nWe merge [4, 1] for a cost of 5, and we are left with [5, 5].\nWe merge [5, 5] for a cost of 10, and we are left with [10].\nThe total cost was 20, and this is the minimum possible."
            },
            {
                "Input": "** stones = [3,2,4,1], k = 3",
                "Output": "** -1",
                "Explanation": "** After any merge operation, there are 2 piles left, and we can't merge anymore.  So the task is impossible."
            },
            {
                "Input": "** stones = [3,5,1,2,6], k = 3",
                "Output": "** 25",
                "Explanation": "** We start with [3, 5, 1, 2, 6].\nWe merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6].\nWe merge [3, 8, 6] for a cost of 17, and we are left with [17].\nThe total cost was 25, and this is the minimum possible."
            }
        ]
    },
    {
        "Title": "Grid Illumination",
        "slug": "grid-illumination",
        "description": "There is a 2D `grid` of size `n x n` where each cell of this grid has a lamp that is initially **turned off**.\n\n\nYou are given a 2D array of lamp positions `lamps`, where `lamps[i] = [rowi, coli]` indicates that the lamp at `grid[rowi][coli]` is **turned on**. Even if the same lamp is listed more than once, it is turned on.\n\n\nWhen a lamp is turned on, it **illuminates its cell** and **all other cells** in the same **row, column, or diagonal**.\n\n\nYou are also given another 2D array `queries`, where `queries[j] = [rowj, colj]`. For the `jth` query, determine whether `grid[rowj][colj]` is illuminated or not. After answering the `jth` query, **turn off** the lamp at `grid[rowj][colj]` and its **8 adjacent lamps** if they exist. A lamp is adjacent if its cell shares either a side or corner with `grid[rowj][colj]`.\n\n\nReturn *an array of integers* `ans`*,* *where* `ans[j]` *should be* `1` *if the cell in the* `jth` *query was illuminated, or* `0` *if the lamp was not.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]",
                "Output": "** [1,0]",
                "Explanation": "** We have the initial grid with all lamps turned off. In the above picture we see the grid after turning on the lamp at grid[0][0] then turning on the lamp at grid[4][4].\nThe 0th\u00a0query asks if the lamp at grid[1][1] is illuminated or not (the blue square). It is illuminated, so set ans[0] = 1. Then, we turn off all lamps in the red square.\n![](https://assets.leetcode.com/uploads/2020/08/19/illu_step1.jpg)\nThe 1st\u00a0query asks if the lamp at grid[1][0] is illuminated or not (the blue square). It is not illuminated, so set ans[1] = 0. Then, we turn off all lamps in the red rectangle.\n![](https://assets.leetcode.com/uploads/2020/08/19/illu_step2.jpg)"
            }
        ]
    },
    {
        "Title": "Find Common Characters",
        "slug": "find-common-characters",
        "description": "Given a string array `words`, return *an array of all characters that show up in all strings within the* `words` *(including duplicates)*. You may return the answer in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** words = [\"bella\",\"label\",\"roller\"]",
                "Output": "** [\"e\",\"l\",\"l\"]",
                "Explanation": null
            },
            {
                "Input": "** words = [\"cool\",\"lock\",\"cook\"]",
                "Output": "** [\"c\",\"o\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Check If Word Is Valid After Substitutions",
        "slug": "check-if-word-is-valid-after-substitutions",
        "description": "Given a string `s`, determine if it is **valid**.\n\n\nA string `s` is **valid** if, starting with an empty string `t = \"\"`, you can **transform** `t` **into** `s` after performing the following operation **any number of times**:\n\n\n Insert string `\"abc\"` into any position in `t`. More formally, `t` becomes `tleft + \"abc\" + tright`, where `t == tleft + tright`. Note that `tleft` and `tright` may be **empty**.\n\n\nReturn `true` *if* `s` *is a **valid** string, otherwise, return* `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** s = \"aabcbc\"",
                "Output": "** true",
                "Explanation": "**\n\"\" -> \"abc\" -> \"aabcbc\"\nThus, \"aabcbc\" is valid."
            },
            {
                "Input": "** s = \"abcabcababcc\"",
                "Output": "** true",
                "Explanation": "**\n\"\" -> \"abc\" -> \"abcabc\" -> \"abcabcabc\" -> \"abcabcababcc\"\nThus, \"abcabcababcc\" is valid."
            },
            {
                "Input": "** s = \"abccba\"",
                "Output": "** false",
                "Explanation": "** It is impossible to get \"abccba\" using the operation."
            }
        ]
    },
    {
        "Title": "Max Consecutive Ones III",
        "slug": "max-consecutive-ones-iii",
        "description": "Given a binary array `nums` and an integer `k`, return *the maximum number of consecutive* `1`*'s in the array if you can flip at most* `k` `0`'s.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Sliding Window",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2",
                "Output": "** 6",
                "Explanation": "** [1,1,1,0,0,**1**,1,1,1,1,**1**]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined."
            },
            {
                "Input": "** nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3",
                "Output": "** 10",
                "Explanation": "** [0,0,1,1,**1**,**1**,1,1,1,**1**,1,1,0,0,0,1,1,1,1]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined."
            }
        ]
    },
    {
        "Title": "Maximize Sum Of Array After K Negations",
        "slug": "maximize-sum-of-array-after-k-negations",
        "description": "Given an integer array `nums` and an integer `k`, modify the array in the following way:\n\n\n choose an index `i` and replace `nums[i]` with `-nums[i]`.\n\n\nYou should apply this process exactly `k` times. You may choose the same index `i` multiple times.\n\n\nReturn *the largest possible sum of the array after modifying it in this way*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [4,2,3], k = 1",
                "Output": "** 5",
                "Explanation": "** Choose index 1 and nums becomes [4,-2,3]."
            },
            {
                "Input": "** nums = [3,-1,0,2], k = 3",
                "Output": "** 6",
                "Explanation": "** Choose indices (1, 2, 2) and nums becomes [3,1,0,2]."
            },
            {
                "Input": "** nums = [2,-3,-1,5,-4], k = 2",
                "Output": "** 13",
                "Explanation": "** Choose indices (1, 4) and nums becomes [2,3,-1,5,4]."
            }
        ]
    },
    {
        "Title": "Clumsy Factorial",
        "slug": "clumsy-factorial",
        "description": "The **factorial** of a positive integer `n` is the product of all positive integers less than or equal to `n`.\n\n\n For example, `factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1`.\n\n\nWe make a **clumsy factorial** using the integers in decreasing order by swapping out the multiply operations for a fixed rotation of operations with multiply `'*'`, divide `'/'`, add `'+'`, and subtract `'-'` in this order.\n\n\n For example, `clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1`.\n\n\nHowever, these operations are still applied using the usual order of operations of arithmetic. We do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right.\n\n\nAdditionally, the division that we use is floor division such that `10 * 9 / 8 = 90 / 8 = 11`.\n\n\nGiven an integer `n`, return *the clumsy factorial of* `n`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Stack",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** 7",
                "Explanation": "** 7 = 4 * 3 / 2 + 1"
            },
            {
                "Input": "** n = 10",
                "Output": "** 12",
                "Explanation": "** 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1"
            }
        ]
    },
    {
        "Title": "Minimum Domino Rotations For Equal Row",
        "slug": "minimum-domino-rotations-for-equal-row",
        "description": "In a row of dominoes, `tops[i]` and `bottoms[i]` represent the top and bottom halves of the `ith` domino. (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)\n\n\nWe may rotate the `ith` domino, so that `tops[i]` and `bottoms[i]` swap values.\n\n\nReturn the minimum number of rotations so that all the values in `tops` are the same, or all the values in `bottoms` are the same.\n\n\nIf it cannot be done, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** tops = [2,1,2,4,2,2], bottoms = [5,2,6,2,3,2]",
                "Output": "** 2",
                "Explanation": "** \nThe first figure represents the dominoes as given by tops and bottoms: before we do any rotations.\nIf we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure."
            }
        ]
    },
    {
        "Title": "Construct Binary Search Tree from Preorder Traversal",
        "slug": "construct-binary-search-tree-from-preorder-traversal",
        "description": "Given an array of integers preorder, which represents the **preorder traversal** of a BST (i.e., **binary search tree**), construct the tree and return *its root*.\n\n\nIt is **guaranteed** that there is always possible to find a binary search tree with the given requirements for the given test cases.\n\n\nA **binary search tree** is a binary tree where for every node, any descendant of `Node.left` has a value **strictly less than** `Node.val`, and any descendant of `Node.right` has a value **strictly greater than** `Node.val`.\n\n\nA **preorder traversal** of a binary tree displays the value of the node first, then traverses `Node.left`, then traverses `Node.right`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Stack",
            "Tree",
            "Binary Search Tree",
            "Monotonic Stack",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** preorder = [8,5,1,7,10,12]",
                "Output": "** [8,5,10,1,7,null,12]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Complement of Base 10 Integer",
        "slug": "complement-of-base-10-integer",
        "description": "The **complement** of an integer is the integer you get when you flip all the `0`'s to `1`'s and all the `1`'s to `0`'s in its binary representation.\n\n\n For example, The integer `5` is `\"101\"` in binary and its **complement** is `\"010\"` which is the integer `2`.\n\n\nGiven an integer `n`, return *its complement*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** n = 5",
                "Output": "** 2",
                "Explanation": "** 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10."
            },
            {
                "Input": "** n = 7",
                "Output": "** 0",
                "Explanation": "** 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10."
            },
            {
                "Input": "** n = 10",
                "Output": "** 5",
                "Explanation": "** 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10."
            }
        ]
    },
    {
        "Title": "Pairs of Songs With Total Durations Divisible by 60",
        "slug": "pairs-of-songs-with-total-durations-divisible-by-60",
        "description": "You are given a list of songs where the `ith` song has a duration of `time[i]` seconds.\n\n\nReturn *the number of pairs of songs for which their total duration in seconds is divisible by* `60`. Formally, we want the number of indices `i`, `j` such that `i < j` with `(time[i] + time[j]) % 60 == 0`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** time = [30,20,150,100,40]",
                "Output": "** 3",
                "Explanation": "** Three pairs have a total duration divisible by 60:\n(time[0] = 30, time[2] = 150): total duration 180\n(time[1] = 20, time[3] = 100): total duration 120\n(time[1] = 20, time[4] = 40): total duration 60"
            },
            {
                "Input": "** time = [60,60,60]",
                "Output": "** 3",
                "Explanation": "** All three pairs have a total duration of 120, which is divisible by 60."
            }
        ]
    },
    {
        "Title": "Capacity To Ship Packages Within D Days",
        "slug": "capacity-to-ship-packages-within-d-days",
        "description": "A conveyor belt has packages that must be shipped from one port to another within `days` days.\n\n\nThe `ith` package on the conveyor belt has a weight of `weights[i]`. Each day, we load the ship with packages on the conveyor belt (in the order given by `weights`). We may not load more weight than the maximum weight capacity of the ship.\n\n\nReturn the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within `days` days.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** weights = [1,2,3,4,5,6,7,8,9,10], days = 5",
                "Output": "** 15",
                "Explanation": "** A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\n1st day: 1, 2, 3, 4, 5\n2nd day: 6, 7\n3rd day: 8\n4th day: 9\n5th day: 10\n\nNote that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed."
            },
            {
                "Input": "** weights = [3,2,2,4,1,4], days = 3",
                "Output": "** 6",
                "Explanation": "** A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\n1st day: 3, 2\n2nd day: 2, 4\n3rd day: 1, 4"
            },
            {
                "Input": "** weights = [1,2,3,1,1], days = 4",
                "Output": "** 3",
                "Explanation": "**\n1st day: 1\n2nd day: 2\n3rd day: 3\n4th day: 1, 1"
            }
        ]
    },
    {
        "Title": "Numbers With Repeated Digits",
        "slug": "numbers-with-repeated-digits",
        "description": "Given an integer `n`, return *the number of positive integers in the range* `[1, n]` *that have **at least one** repeated digit*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** n = 20",
                "Output": "** 1",
                "Explanation": "** The only positive number (<= 20) with at least 1 repeated digit is 11."
            },
            {
                "Input": "** n = 100",
                "Output": "** 10",
                "Explanation": "** The positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100."
            },
            {
                "Input": "** n = 1000",
                "Output": "** 262",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Partition Array Into Three Parts With Equal Sum",
        "slug": "partition-array-into-three-parts-with-equal-sum",
        "description": "Given an array of integers `arr`, return `true` if we can partition the array into three **non-empty** parts with equal sums.\n\n\nFormally, we can partition the array if we can find indexes `i + 1 < j` with `(arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])`\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** arr = [0,2,1,-6,6,-7,9,1,2,0,1]",
                "Output": "** true",
                "Explanation": "** 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1"
            },
            {
                "Input": "** arr = [0,2,1,-6,6,7,9,-1,2,0,1]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** arr = [3,3,6,5,-2,2,5,1,-9,4]",
                "Output": "** true",
                "Explanation": "** 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4"
            }
        ]
    },
    {
        "Title": "Best Sightseeing Pair",
        "slug": "best-sightseeing-pair",
        "description": "You are given an integer array `values` where values[i] represents the value of the `ith` sightseeing spot. Two sightseeing spots `i` and `j` have a **distance** `j - i` between them.\n\n\nThe score of a pair (`i < j`) of sightseeing spots is `values[i] + values[j] + i - j`: the sum of the values of the sightseeing spots, minus the distance between them.\n\n\nReturn *the maximum score of a pair of sightseeing spots*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** values = [8,1,5,2,6]",
                "Output": "** 11",
                "Explanation": "** i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11"
            },
            {
                "Input": "** values = [1,2]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Smallest Integer Divisible by K",
        "slug": "smallest-integer-divisible-by-k",
        "description": "Given a positive integer `k`, you need to find the **length** of the **smallest** positive integer `n` such that `n` is divisible by `k`, and `n` only contains the digit `1`.\n\n\nReturn *the **length** of* `n`. If there is no such `n`, return -1.\n\n\nNote:** `n` may not fit in a 64-bit signed integer.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Math"
        ],
        "examples": [
            {
                "Input": "** k = 1",
                "Output": "** 1",
                "Explanation": "** The smallest answer is n = 1, which has length 1."
            },
            {
                "Input": "** k = 2",
                "Output": "** -1",
                "Explanation": "** There is no such positive integer n divisible by 2."
            },
            {
                "Input": "** k = 3",
                "Output": "** 3",
                "Explanation": "** The smallest answer is n = 111, which has length 3."
            }
        ]
    },
    {
        "Title": "Binary String With Substrings Representing 1 To N",
        "slug": "binary-string-with-substrings-representing-1-to-n",
        "description": "Given a binary string `s` and a positive integer `n`, return `true` *if the binary representation of all the integers in the range* `[1, n]` *are **substrings** of* `s`*, or* `false` *otherwise*.\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"0110\", n = 3",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"0110\", n = 4",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Convert to Base -2",
        "slug": "convert-to-base-2",
        "description": "Given an integer `n`, return *a binary string representing its representation in base* `-2`.\n\n\nNote** that the returned string should not have leading zeros unless the string is `\"0\"`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** \"110\"\n**Explantion:** (-2)2 + (-2)1 = 2",
                "Explanation": null
            },
            {
                "Input": "** n = 3",
                "Output": "** \"111\"\n**Explantion:** (-2)2 + (-2)1 + (-2)0 = 3",
                "Explanation": null
            },
            {
                "Input": "** n = 4",
                "Output": "** \"100\"\n**Explantion:** (-2)2 = 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Prefix Divisible By 5",
        "slug": "binary-prefix-divisible-by-5",
        "description": "You are given a binary array `nums` (**0-indexed**).\n\n\nWe define `xi` as the number whose binary representation is the subarray `nums[0..i]` (from most-significant-bit to least-significant-bit).\n\n\n For example, if `nums = [1,0,1]`, then `x0 = 1`, `x1 = 2`, and `x2 = 5`.\n\n\nReturn *an array of booleans* `answer` *where* `answer[i]` *is* `true` *if* `xi` *is divisible by* `5`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [0,1,1]",
                "Output": "** [true,false,false]",
                "Explanation": "** The input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10.\nOnly the first number is divisible by 5, so answer[0] is true."
            },
            {
                "Input": "** nums = [1,1,1]",
                "Output": "** [false,false,false]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Next Greater Node In Linked List",
        "slug": "next-greater-node-in-linked-list",
        "description": "You are given the `head` of a linked list with `n` nodes.\n\n\nFor each node in the list, find the value of the **next greater node**. That is, for each node, find the value of the first node that is next to it and has a **strictly larger** value than it.\n\n\nReturn an integer array `answer` where `answer[i]` is the value of the next greater node of the `ith` node (**1-indexed**). If the `ith` node does not have a next greater node, set `answer[i] = 0`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Linked List",
            "Stack",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** head = [2,1,5]",
                "Output": "** [5,5,0]",
                "Explanation": null
            },
            {
                "Input": "** head = [2,7,4,3,5]",
                "Output": "** [7,0,5,5,0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Enclaves",
        "slug": "number-of-enclaves",
        "description": "You are given an `m x n` binary matrix `grid`, where `0` represents a sea cell and `1` represents a land cell.\n\n\nA **move** consists of walking from one land cell to another adjacent (**4-directionally**) land cell or walking off the boundary of the `grid`.\n\n\nReturn *the number of land cells in* `grid` *for which we cannot walk off the boundary of the grid in any number of **moves***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]",
                "Output": "** 3",
                "Explanation": "** There are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary."
            },
            {
                "Input": "** grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]",
                "Output": "** 0",
                "Explanation": "** All 1s are either on the boundary or can reach the boundary."
            }
        ]
    },
    {
        "Title": "Remove Outermost Parentheses",
        "slug": "remove-outermost-parentheses",
        "description": "A valid parentheses string is either empty `\"\"`, `\"(\" + A + \")\"`, or `A + B`, where `A` and `B` are valid parentheses strings, and `+` represents string concatenation.\n\n\n For example, `\"\"`, `\"()\"`, `\"(())()\"`, and `\"(()(()))\"` are all valid parentheses strings.\n\n\nA valid parentheses string `s` is primitive if it is nonempty, and there does not exist a way to split it into `s = A + B`, with `A` and `B` nonempty valid parentheses strings.\n\n\nGiven a valid parentheses string `s`, consider its primitive decomposition: `s = P1 + P2 + ... + Pk`, where `Pi` are primitive valid parentheses strings.\n\n\nReturn `s` *after removing the outermost parentheses of every primitive string in the primitive decomposition of* `s`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** s = \"(()())(())\"",
                "Output": "** \"()()()\"",
                "Explanation": "** \nThe input string is \"(()())(())\", with primitive decomposition \"(()())\" + \"(())\".\nAfter removing outer parentheses of each part, this is \"()()\" + \"()\" = \"()()()\"."
            },
            {
                "Input": "** s = \"(()())(())(()(()))\"",
                "Output": "** \"()()()()(())\"",
                "Explanation": "** \nThe input string is \"(()())(())(()(()))\", with primitive decomposition \"(()())\" + \"(())\" + \"(()(()))\".\nAfter removing outer parentheses of each part, this is \"()()\" + \"()\" + \"()(())\" = \"()()()()(())\"."
            },
            {
                "Input": "** s = \"()()\"",
                "Output": "** \"\"",
                "Explanation": "** \nThe input string is \"()()\", with primitive decomposition \"()\" + \"()\".\nAfter removing outer parentheses of each part, this is \"\" + \"\" = \"\"."
            }
        ]
    },
    {
        "Title": "Sum of Root To Leaf Binary Numbers",
        "slug": "sum-of-root-to-leaf-binary-numbers",
        "description": "You are given the `root` of a binary tree where each node has a value `0` or `1`. Each root-to-leaf path represents a binary number starting with the most significant bit.\n\n\n For example, if the path is `0 -> 1 -> 1 -> 0 -> 1`, then this could represent `01101` in binary, which is `13`.\n\n\nFor all leaves in the tree, consider the numbers represented by the path from the root to that leaf. Return *the sum of these numbers*.\n\n\nThe test cases are generated so that the answer fits in a **32-bits** integer.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,0,1,0,1,0,1]",
                "Output": "** 22",
                "Explanation": "** (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22"
            }
        ]
    },
    {
        "Title": "Camelcase Matching",
        "slug": "camelcase-matching",
        "description": "Given an array of strings `queries` and a string `pattern`, return a boolean array `answer` where `answer[i]` is `true` if `queries[i]` matches `pattern`, and `false` otherwise.\n\n\nA query word `queries[i]` matches `pattern` if you can insert lowercase English letters pattern so that it equals the query. You may insert each character at any position and you may not insert any characters.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "String",
            "Trie",
            "String Matching"
        ],
        "examples": [
            {
                "Input": "** queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FB\"",
                "Output": "** [true,false,true,true,false]",
                "Explanation": "** \"FooBar\" can be generated like this \"F\" + \"oo\" + \"B\" + \"ar\".\n\"FootBall\" can be generated like this \"F\" + \"oot\" + \"B\" + \"all\".\n\"FrameBuffer\" can be generated like this \"F\" + \"rame\" + \"B\" + \"uffer\"."
            },
            {
                "Input": "** queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBa\"",
                "Output": "** [true,false,true,false,false]",
                "Explanation": "** \"FooBar\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\".\n\"FootBall\" can be generated like this \"Fo\" + \"ot\" + \"Ba\" + \"ll\"."
            },
            {
                "Input": "** queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBaT\"",
                "Output": "** [false,true,false,false,false]",
                "Explanation": "** \"FooBarTest\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\" + \"T\" + \"est\"."
            }
        ]
    },
    {
        "Title": "Video Stitching",
        "slug": "video-stitching",
        "description": "You are given a series of video clips from a sporting event that lasted `time` seconds. These video clips can be overlapping with each other and have varying lengths.\n\n\nEach video clip is described by an array `clips` where `clips[i] = [starti, endi]` indicates that the ith clip started at `starti` and ended at `endi`.\n\n\nWe can cut these clips into segments freely.\n\n\n For example, a clip `[0, 7]` can be cut into segments `[0, 1] + [1, 3] + [3, 7]`.\n\n\nReturn *the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event* `[0, time]`. If the task is impossible, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10",
                "Output": "** 3",
                "Explanation": "** We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.\nThen, we can reconstruct the sporting event as follows:\nWe cut [1,9] into segments [1,2] + [2,8] + [8,9].\nNow we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10]."
            },
            {
                "Input": "** clips = [[0,1],[1,2]], time = 5",
                "Output": "** -1",
                "Explanation": "** We cannot cover [0,5] with only [0,1] and [1,2]."
            },
            {
                "Input": "** clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], time = 9",
                "Output": "** 3",
                "Explanation": "** We can take clips [0,4], [4,7], and [6,9]."
            }
        ]
    },
    {
        "Title": "Divisor Game",
        "slug": "divisor-game",
        "description": "Alice and Bob take turns playing a game, with Alice starting first.\n\n\nInitially, there is a number `n` on the chalkboard. On each player's turn, that player makes a move consisting of:\n\n\n Choosing any `x` with `0 < x < n` and `n % x == 0`.\n Replacing the number `n` on the chalkboard with `n - x`.\n\n\nAlso, if a player cannot make a move, they lose the game.\n\n\nReturn `true` *if and only if Alice wins the game, assuming both players play optimally*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Brainteaser",
            "Game Theory"
        ],
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** true",
                "Explanation": "** Alice chooses 1, and Bob has no more moves."
            },
            {
                "Input": "** n = 3",
                "Output": "** false",
                "Explanation": "** Alice chooses 1, Bob chooses 1, and Alice has no more moves."
            }
        ]
    },
    {
        "Title": "Maximum Difference Between Node and Ancestor",
        "slug": "maximum-difference-between-node-and-ancestor",
        "description": "Given the `root` of a binary tree, find the maximum value `v` for which there exist **different** nodes `a` and `b` where `v = |a.val - b.val|` and `a` is an ancestor of `b`.\n\n\nA node `a` is an ancestor of `b` if either: any child of `a` is equal to `b`\u00a0or any child of `a` is an ancestor of `b`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [8,3,10,1,6,null,14,null,null,4,7,13]",
                "Output": "** 7",
                "Explanation": "** We have various ancestor-node differences, some of which are given below :\n|8 - 3| = 5\n|3 - 7| = 4\n|8 - 1| = 7\n|10 - 13| = 3\nAmong all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7."
            },
            {
                "Input": "** root = [1,null,2,null,0,3]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Arithmetic Subsequence",
        "slug": "longest-arithmetic-subsequence",
        "description": "Given an array `nums` of integers, return *the length of the longest arithmetic subsequence in* `nums`.\n\n\nNote** that:\n\n\n A **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n A sequence `seq` is arithmetic if `seq[i + 1] - seq[i]` are all the same value (for `0 <= i < seq.length - 1`).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [3,6,9,12]",
                "Output": "** 4",
                "Explanation": "**  The whole array is an arithmetic sequence with steps of length = 3."
            },
            {
                "Input": "** nums = [9,4,7,2,10]",
                "Output": "** 3",
                "Explanation": "**  The longest arithmetic subsequence is [4,7,10]."
            },
            {
                "Input": "** nums = [20,1,15,3,10,5,8]",
                "Output": "** 4",
                "Explanation": "**  The longest arithmetic subsequence is [20,15,10,5]."
            }
        ]
    },
    {
        "Title": "Recover a Tree From Preorder Traversal",
        "slug": "recover-a-tree-from-preorder-traversal",
        "description": "We run a\u00a0preorder\u00a0depth-first search (DFS) on the `root` of a binary tree.\n\n\nAt each node in this traversal, we output `D` dashes (where `D` is the depth of this node), then we output the value of this node.\u00a0 If the depth of a node is `D`, the depth of its immediate child is `D + 1`.\u00a0 The depth of the `root` node is `0`.\n\n\nIf a node has only one child, that child is guaranteed to be **the left child**.\n\n\nGiven the output `traversal` of this traversal, recover the tree and return *its* `root`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** traversal = \"1-2--3--4-5--6--7\"",
                "Output": "** [1,2,5,3,4,6,7]",
                "Explanation": null
            },
            {
                "Input": "** traversal = \"1-2--3---4-5--6---7\"",
                "Output": "** [1,2,5,3,null,6,null,4,null,7]",
                "Explanation": null
            },
            {
                "Input": "** traversal = \"1-401--349---90--88\"",
                "Output": "** [1,401,null,349,88,90]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Two City Scheduling",
        "slug": "two-city-scheduling",
        "description": "A company is planning to interview `2n` people. Given the array `costs` where `costs[i] = [aCosti, bCosti]`,\u00a0the cost of flying the `ith` person to city `a` is `aCosti`, and the cost of flying the `ith` person to city `b` is `bCosti`.\n\n\nReturn *the minimum cost to fly every person to a city* such that exactly `n` people arrive in each city.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** costs = [[10,20],[30,200],[400,50],[30,20]]",
                "Output": "** 110",
                "Explanation": "** \nThe first person goes to city A for a cost of 10.\nThe second person goes to city A for a cost of 30.\nThe third person goes to city B for a cost of 50.\nThe fourth person goes to city B for a cost of 20.\n\nThe total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city."
            },
            {
                "Input": "** costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]",
                "Output": "** 1859",
                "Explanation": null
            },
            {
                "Input": "** costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]",
                "Output": "** 3086",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Matrix Cells in Distance Order",
        "slug": "matrix-cells-in-distance-order",
        "description": "You are given four integers `row`, `cols`, `rCenter`, and `cCenter`. There is a `rows x cols` matrix and you are on the cell with the coordinates `(rCenter, cCenter)`.\n\n\nReturn *the coordinates of all cells in the matrix, sorted by their **distance** from* `(rCenter, cCenter)` *from the smallest distance to the largest distance*. You may return the answer in **any order** that satisfies this condition.\n\n\nThe **distance** between two cells `(r1, c1)` and `(r2, c2)` is `|r1 - r2| + |c1 - c2|`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Geometry",
            "Sorting",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** rows = 1, cols = 2, rCenter = 0, cCenter = 0",
                "Output": "** [[0,0],[0,1]]",
                "Explanation": "** The distances from (0, 0) to other cells are: [0,1]"
            },
            {
                "Input": "** rows = 2, cols = 2, rCenter = 0, cCenter = 1",
                "Output": "** [[0,1],[0,0],[1,1],[1,0]]",
                "Explanation": "** The distances from (0, 1) to other cells are: [0,1,1,2]\nThe answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct."
            },
            {
                "Input": "** rows = 2, cols = 3, rCenter = 1, cCenter = 2",
                "Output": "** [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]",
                "Explanation": "** The distances from (1, 2) to other cells are: [0,1,1,2,2,3]\nThere are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]]."
            }
        ]
    },
    {
        "Title": "Maximum Sum of Two Non-Overlapping Subarrays",
        "slug": "maximum-sum-of-two-non-overlapping-subarrays",
        "description": "Given an integer array `nums` and two integers `firstLen` and `secondLen`, return *the maximum sum of elements in two non-overlapping **subarrays** with lengths* `firstLen` *and* `secondLen`.\n\n\nThe array with length `firstLen` could occur before or after the array with length `secondLen`, but they have to be non-overlapping.\n\n\nA **subarray** is a **contiguous** part of an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [0,6,5,2,2,5,1,9,4], firstLen = 1, secondLen = 2",
                "Output": "** 20",
                "Explanation": "** One choice of subarrays is [9] with length 1, and [6,5] with length 2."
            },
            {
                "Input": "** nums = [3,8,1,3,2,1,8,9,0], firstLen = 3, secondLen = 2",
                "Output": "** 29",
                "Explanation": "** One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2."
            },
            {
                "Input": "** nums = [2,1,5,6,0,9,5,0,3,8], firstLen = 4, secondLen = 3",
                "Output": "** 31",
                "Explanation": "** One choice of subarrays is [5,6,0,9] with length 4, and [0,3,8] with length 3."
            }
        ]
    },
    {
        "Title": "Stream of Characters",
        "slug": "stream-of-characters",
        "description": "Design an algorithm that accepts a stream of characters and checks if a suffix of these characters is a string of a given array of strings `words`.\n\n\nFor example, if `words = [\"abc\", \"xyz\"]`\u00a0and the stream added the four characters (one by one) `'a'`, `'x'`, `'y'`, and `'z'`, your algorithm should detect that the suffix `\"xyz\"` of the characters `\"axyz\"` matches `\"xyz\"` from `words`.\n\n\nImplement the `StreamChecker` class:\n\n\n `StreamChecker(String[] words)` Initializes the object with the strings array `words`.\n `boolean query(char letter)` Accepts a new character from the stream and returns `true` if any non-empty suffix from the stream forms a word that is in `words`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "String",
            "Design",
            "Trie",
            "Data Stream"
        ],
        "examples": [
            {
                "Input": "[\"StreamChecker\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\"]\n[[[\"cd\", \"f\", \"kl\"]], [\"a\"], [\"b\"], [\"c\"], [\"d\"], [\"e\"], [\"f\"], [\"g\"], [\"h\"], [\"i\"], [\"j\"], [\"k\"], [\"l\"]]",
                "Output": "[null, false, false, false, true, false, true, false, false, false, false, false, true]",
                "Explanation": "StreamChecker streamChecker = new StreamChecker([\"cd\", \"f\", \"kl\"]);\nstreamChecker.query(\"a\"); // return False\nstreamChecker.query(\"b\"); // return False\nstreamChecker.query(\"c\"); // return False\nstreamChecker.query(\"d\"); // return True, because 'cd' is in the wordlist\nstreamChecker.query(\"e\"); // return False\nstreamChecker.query(\"f\"); // return True, because 'f' is in the wordlist\nstreamChecker.query(\"g\"); // return False\nstreamChecker.query(\"h\"); // return False\nstreamChecker.query(\"i\"); // return False\nstreamChecker.query(\"j\"); // return False\nstreamChecker.query(\"k\"); // return False\nstreamChecker.query(\"l\"); // return True, because 'kl' is in the wordlist"
            }
        ]
    },
    {
        "Title": "Moving Stones Until Consecutive",
        "slug": "moving-stones-until-consecutive",
        "description": "There are three stones in different positions on the X-axis. You are given three integers `a`, `b`, and `c`, the positions of the stones.\n\n\nIn one move, you pick up a stone at an endpoint (i.e., either the lowest or highest position stone), and move it to an unoccupied position between those endpoints. Formally, let's say the stones are currently at positions `x`, `y`, and `z` with `x < y < z`. You pick up the stone at either position `x` or position `z`, and move that stone to an integer position `k`, with `x < k < z` and `k != y`.\n\n\nThe game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).\n\n\nReturn *an integer array* `answer` *of length* `2` *where*:\n\n\n `answer[0]` *is the minimum number of moves you can play, and\n `answer[1]` *is the maximum number of moves you can play*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Brainteaser"
        ],
        "examples": [
            {
                "Input": "** a = 1, b = 2, c = 5",
                "Output": "** [1,2]",
                "Explanation": "** Move the stone from 5 to 3, or move the stone from 5 to 4 to 3."
            },
            {
                "Input": "** a = 4, b = 3, c = 2",
                "Output": "** [0,0]",
                "Explanation": "** We cannot make any moves."
            },
            {
                "Input": "** a = 3, b = 5, c = 1",
                "Output": "** [1,2]",
                "Explanation": "** Move the stone from 1 to 4; or move the stone from 1 to 2 to 4."
            }
        ]
    },
    {
        "Title": "Coloring A Border",
        "slug": "coloring-a-border",
        "description": "You are given an `m x n` integer matrix `grid`, and three integers `row`, `col`, and `color`. Each value in the grid represents the color of the grid square at that location.\n\n\nTwo squares are called **adjacent** if they are next to each other in any of the 4 directions.\n\n\nTwo squares belong to the same **connected component** if they have the same color and they are adjacent.\n\n\nThe **border of a connected component** is all the squares in the connected component that are either adjacent to (at least) a square not in the component, or on the boundary of the grid (the first or last row or column).\n\n\nYou should color the **border** of the **connected component** that contains the square `grid[row][col]` with `color`.\n\n\nReturn *the final grid*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,1],[1,2]], row = 0, col = 0, color = 3",
                "Output": "** [[3,3],[3,2]]",
                "Explanation": null
            },
            {
                "Input": "** grid = [[1,2,2],[2,3,2]], row = 0, col = 1, color = 3",
                "Output": "** [[1,3,3],[2,3,3]]",
                "Explanation": null
            },
            {
                "Input": "** grid = [[1,1,1],[1,1,1],[1,1,1]], row = 1, col = 1, color = 2",
                "Output": "** [[2,2,2],[2,1,2],[2,2,2]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Uncrossed Lines",
        "slug": "uncrossed-lines",
        "description": "You are given two integer arrays `nums1` and `nums2`. We write the integers of `nums1` and `nums2` (in the order they are given) on two separate horizontal lines.\n\n\nWe may draw connecting lines: a straight line connecting two numbers `nums1[i]` and `nums2[j]` such that:\n\n\n `nums1[i] == nums2[j]`, and\n the line we draw does not intersect any other connecting (non-horizontal) line.\n\n\nNote that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line).\n\n\nReturn *the maximum number of connecting lines we can draw in this way*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums1 = [1,4,2], nums2 = [1,2,4]",
                "Output": "** 2",
                "Explanation": "** We can draw 2 uncrossed lines as in the diagram.\nWe cannot draw 3 uncrossed lines, because the line from nums1[1] = 4 to nums2[2] = 4 will intersect the line from nums1[2]=2 to nums2[1]=2."
            }
        ]
    },
    {
        "Title": "Escape a Large Maze",
        "slug": "escape-a-large-maze",
        "description": "There is a 1 million by 1 million grid on an XY-plane, and the coordinates of each grid square are `(x, y)`.\n\n\nWe start at the `source = [sx, sy]` square and want to reach the `target = [tx, ty]` square. There is also an array of `blocked` squares, where each `blocked[i] = [xi, yi]` represents a blocked square with coordinates `(xi, yi)`.\n\n\nEach move, we can walk one square north, east, south, or west if the square is **not** in the array of `blocked` squares. We are also not allowed to walk outside of the grid.\n\n\nReturn `true` *if and only if it is possible to reach the* `target` *square from the* `source` *square through a sequence of valid moves*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Depth-First Search",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]",
                "Output": "** false",
                "Explanation": "** The target square is inaccessible starting from the source square because we cannot move.\nWe cannot move north or east because those squares are blocked.\nWe cannot move south or west because we cannot go outside of the grid."
            },
            {
                "Input": "** blocked = [], source = [0,0], target = [999999,999999]",
                "Output": "** true",
                "Explanation": "** Because there are no blocked cells, it is possible to reach the target square."
            }
        ]
    },
    {
        "Title": "Valid Boomerang",
        "slug": "valid-boomerang",
        "description": "Given an array `points` where `points[i] = [xi, yi]` represents a point on the **X-Y** plane, return `true` *if these points are a **boomerang***.\n\n\nA **boomerang** is a set of three points that are **all distinct** and **not in a straight line**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Geometry"
        ],
        "examples": [
            {
                "Input": "** points = [[1,1],[2,3],[3,2]]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** points = [[1,1],[2,2],[3,3]]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Search Tree to Greater Sum Tree",
        "slug": "binary-search-tree-to-greater-sum-tree",
        "description": "Given the `root` of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.\n\n\nAs a reminder, a *binary search tree* is a tree that satisfies these constraints:\n\n\n The left subtree of a node contains only nodes with keys **less than** the node's key.\n The right subtree of a node contains only nodes with keys **greater than** the node's key.\n Both the left and right subtrees must also be binary search trees.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]",
                "Output": "** [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Score Triangulation of Polygon",
        "slug": "minimum-score-triangulation-of-polygon",
        "description": "You have a convex `n`-sided polygon where each vertex has an integer value. You are given an integer array `values` where `values[i]` is the value of the `ith` vertex (i.e., **clockwise order**).\n\n\nYou will **triangulate** the polygon into `n - 2` triangles. For each triangle, the value of that triangle is the product of the values of its vertices, and the total score of the triangulation is the sum of these values over all `n - 2` triangles in the triangulation.\n\n\nReturn *the smallest possible total score that you can achieve with some triangulation of the polygon*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** values = [1,2,3]",
                "Output": "** 6",
                "Explanation": "** The polygon is already triangulated, and the score of the only triangle is 6."
            },
            {
                "Input": "** values = [3,7,4,5]",
                "Output": "** 144",
                "Explanation": "** There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144.\nThe minimum score is 144."
            },
            {
                "Input": "** values = [1,3,1,4,1,5]",
                "Output": "** 13",
                "Explanation": "** The minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13."
            }
        ]
    },
    {
        "Title": "Moving Stones Until Consecutive II",
        "slug": "moving-stones-until-consecutive-ii",
        "description": "There are some stones in different positions on the X-axis. You are given an integer array `stones`, the positions of the stones.\n\n\nCall a stone an **endpoint stone** if it has the smallest or largest position. In one move, you pick up an **endpoint stone** and move it to an unoccupied position so that it is no longer an **endpoint stone**.\n\n\n In particular, if the stones are at say, `stones = [1,2,5]`, you cannot move the endpoint stone at position `5`, since moving it to any position (such as `0`, or `3`) will still keep that stone as an endpoint stone.\n\n\nThe game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).\n\n\nReturn *an integer array* `answer` *of length* `2` *where*:\n\n\n `answer[0]` *is the minimum number of moves you can play, and\n `answer[1]` *is the maximum number of moves you can play*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Two Pointers",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** stones = [7,4,9]",
                "Output": "** [1,2]",
                "Explanation": "** We can move 4 -> 8 for one move to finish the game.\nOr, we can move 9 -> 5, 4 -> 6 for two moves to finish the game."
            },
            {
                "Input": "** stones = [6,5,4,3,10]",
                "Output": "** [2,3]",
                "Explanation": "** We can move 3 -> 8 then 10 -> 7 to finish the game.\nOr, we can move 3 -> 7, 4 -> 8, 5 -> 9 to finish the game.\nNotice we cannot move 10 -> 2 to finish the game, because that would be an illegal move."
            }
        ]
    },
    {
        "Title": "Robot Bounded In Circle",
        "slug": "robot-bounded-in-circle",
        "description": "On an infinite plane, a robot initially stands at `(0, 0)` and faces north. Note that:\n\n\n The **north direction** is the positive direction of the y-axis.\n The **south direction** is the negative direction of the y-axis.\n The **east direction** is the positive direction of the x-axis.\n The **west direction** is the negative direction of the x-axis.\n\n\nThe robot can receive one of three instructions:\n\n\n `\"G\"`: go straight 1 unit.\n `\"L\"`: turn 90 degrees to the left (i.e., anti-clockwise direction).\n `\"R\"`: turn 90 degrees to the right (i.e., clockwise direction).\n\n\nThe robot performs the `instructions` given in order, and repeats them forever.\n\n\nReturn `true` if and only if there exists a circle in the plane such that the robot never leaves the circle.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "String",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** instructions = \"GGLLGG\"",
                "Output": "** true",
                "Explanation": "** The robot is initially at (0, 0) facing the north direction.\n\"G\": move one step. Position: (0, 1). Direction: North.\n\"G\": move one step. Position: (0, 2). Direction: North.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: West.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: South.\n\"G\": move one step. Position: (0, 1). Direction: South.\n\"G\": move one step. Position: (0, 0). Direction: South.\nRepeating the instructions, the robot goes into the cycle: (0, 0) --> (0, 1) --> (0, 2) --> (0, 1) --> (0, 0).\nBased on that, we return true."
            },
            {
                "Input": "** instructions = \"GG\"",
                "Output": "** false",
                "Explanation": "** The robot is initially at (0, 0) facing the north direction.\n\"G\": move one step. Position: (0, 1). Direction: North.\n\"G\": move one step. Position: (0, 2). Direction: North.\nRepeating the instructions, keeps advancing in the north direction and does not go into cycles.\nBased on that, we return false."
            },
            {
                "Input": "** instructions = \"GL\"",
                "Output": "** true",
                "Explanation": "** The robot is initially at (0, 0) facing the north direction.\n\"G\": move one step. Position: (0, 1). Direction: North.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 1). Direction: West.\n\"G\": move one step. Position: (-1, 1). Direction: West.\n\"L\": turn 90 degrees anti-clockwise. Position: (-1, 1). Direction: South.\n\"G\": move one step. Position: (-1, 0). Direction: South.\n\"L\": turn 90 degrees anti-clockwise. Position: (-1, 0). Direction: East.\n\"G\": move one step. Position: (0, 0). Direction: East.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 0). Direction: North.\nRepeating the instructions, the robot goes into the cycle: (0, 0) --> (0, 1) --> (-1, 1) --> (-1, 0) --> (0, 0).\nBased on that, we return true."
            }
        ]
    },
    {
        "Title": "Flower Planting With No Adjacent",
        "slug": "flower-planting-with-no-adjacent",
        "description": "You have `n` gardens, labeled from `1` to `n`, and an array `paths` where `paths[i] = [xi, yi]` describes a bidirectional path between garden `xi` to garden `yi`. In each garden, you want to plant one of 4 types of flowers.\n\n\nAll gardens have **at most 3** paths coming into or leaving it.\n\n\nYour task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers.\n\n\nReturn ***any** such a choice as an array* `answer`*, where* `answer[i]` *is the type of flower planted in the* `(i+1)th` *garden. The flower types are denoted* `1`*,* `2`*,* `3`*, or* `4`*. It is guaranteed an answer exists.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** n = 3, paths = [[1,2],[2,3],[3,1]]",
                "Output": "** [1,2,3]",
                "Explanation": "**\nGardens 1 and 2 have different types.\nGardens 2 and 3 have different types.\nGardens 3 and 1 have different types.\nHence, [1,2,3] is a valid answer. Other valid answers include [1,2,4], [1,4,2], and [3,2,1]."
            },
            {
                "Input": "** n = 4, paths = [[1,2],[3,4]]",
                "Output": "** [1,2,1,2]",
                "Explanation": null
            },
            {
                "Input": "** n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]",
                "Output": "** [1,2,3,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Partition Array for Maximum Sum",
        "slug": "partition-array-for-maximum-sum",
        "description": "Given an integer array `arr`, partition the array into (contiguous) subarrays of length **at most** `k`. After partitioning, each subarray has their values changed to become the maximum value of that subarray.\n\n\nReturn *the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a **32-bit** integer.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** arr = [1,15,7,9,2,5,10], k = 3",
                "Output": "** 84",
                "Explanation": "** arr becomes [15,15,15,9,10,10,10]"
            },
            {
                "Input": "** arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4",
                "Output": "** 83",
                "Explanation": null
            },
            {
                "Input": "** arr = [1], k = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Duplicate Substring",
        "slug": "longest-duplicate-substring",
        "description": "Given a string `s`, consider all *duplicated substrings*: (contiguous) substrings of s that occur 2 or more times.\u00a0The occurrences\u00a0may overlap.\n\n\nReturn **any** duplicated\u00a0substring that has the longest possible length.\u00a0If `s` does not have a duplicated substring, the answer is `\"\"`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Binary Search",
            "Sliding Window",
            "Rolling Hash",
            "Suffix Array",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "** s = \"banana\"",
                "Output": "** \"ana\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"abcd\"",
                "Output": "** \"\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Customers Who Bought All Products",
        "slug": "customers-who-bought-all-products",
        "description": "Table: `Customer`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| customer_id | int     |\n| product_key | int     |\n+-------------+---------+\nThis table may contain duplicates rows. \ncustomer_id is not NULL.\nproduct_key is a foreign key (reference column) to Product table.\n\n```\n\n\u00a0\n\n\nTable: `Product`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| product_key | int     |\n+-------------+---------+\nproduct_key is the primary key (column with unique values) for this table.\n\n```\n\n\u00a0\n\n\nWrite a solution to report the customer ids from the `Customer` table that bought all the products in the `Product` table.\n\n\nReturn the result table in **any order**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nCustomer table:\n+-------------+-------------+\n| customer_id | product_key |\n+-------------+-------------+\n| 1           | 5           |\n| 2           | 6           |\n| 3           | 5           |\n| 3           | 6           |\n| 1           | 6           |\n+-------------+-------------+\nProduct table:\n+-------------+\n| product_key |\n+-------------+\n| 5           |\n| 6           |\n+-------------+",
                "Output": "** \n+-------------+\n| customer_id |\n+-------------+\n| 1           |\n| 3           |\n+-------------+",
                "Explanation": "** \nThe customers who bought all the products (5 and 6) are customers with IDs 1 and 3."
            }
        ]
    },
    {
        "Title": "Last Stone Weight",
        "slug": "last-stone-weight",
        "description": "You are given an array of integers `stones` where `stones[i]` is the weight of the `ith` stone.\n\n\nWe are playing a game with the stones. On each turn, we choose the **heaviest two stones** and smash them together. Suppose the heaviest two stones have weights `x` and `y` with `x <= y`. The result of this smash is:\n\n\n If `x == y`, both stones are destroyed, and\n If `x != y`, the stone of weight `x` is destroyed, and the stone of weight `y` has new weight `y - x`.\n\n\nAt the end of the game, there is **at most one** stone left.\n\n\nReturn *the weight of the last remaining stone*. If there are no stones left, return `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** stones = [2,7,4,1,8,1]",
                "Output": "** 1",
                "Explanation": "** \nWe combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,\nwe combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,\nwe combine 2 and 1 to get 1 so the array converts to [1,1,1] then,\nwe combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone."
            },
            {
                "Input": "** stones = [1]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove All Adjacent Duplicates In String",
        "slug": "remove-all-adjacent-duplicates-in-string",
        "description": "You are given a string `s` consisting of lowercase English letters. A **duplicate removal** consists of choosing two **adjacent** and **equal** letters and removing them.\n\n\nWe repeatedly make **duplicate removals** on `s` until we no longer can.\n\n\nReturn *the final string after all such duplicate removals have been made*. It can be proven that the answer is **unique**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** s = \"abbaca\"",
                "Output": "** \"ca\"",
                "Explanation": "** \nFor example, in \"abbaca\" we could remove \"bb\" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is \"aaca\", of which only \"aa\" is possible, so the final string is \"ca\"."
            },
            {
                "Input": "** s = \"azxxzy\"",
                "Output": "** \"ay\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest String Chain",
        "slug": "longest-string-chain",
        "description": "You are given an array of `words` where each word consists of lowercase English letters.\n\n\n`wordA` is a **predecessor** of `wordB` if and only if we can insert **exactly one** letter anywhere in `wordA` **without changing the order of the other characters** to make it equal to `wordB`.\n\n\n For example, `\"abc\"` is a **predecessor** of `\"abac\"`, while `\"cba\"` is not a **predecessor** of `\"bcad\"`.\n\n\nA **word chain**is a sequence of words `[word1, word2, ..., wordk]` with `k >= 1`, where `word1` is a **predecessor** of `word2`, `word2` is a **predecessor** of `word3`, and so on. A single word is trivially a **word chain** with `k == 1`.\n\n\nReturn *the **length** of the **longest possible word chain** with words chosen from the given list of* `words`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers",
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** words = [\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"]",
                "Output": "** 4",
                "Explanation": "One of the longest word chains is [\"a\",\"ba\",\"bda\",\"bdca\"]."
            },
            {
                "Input": "** words = [\"xbc\",\"pcxbcf\",\"xb\",\"cxbc\",\"pcxbc\"]",
                "Output": "** 5",
                "Explanation": "** All the words can be put in a word chain [\"xb\", \"xbc\", \"cxbc\", \"pcxbc\", \"pcxbcf\"]."
            },
            {
                "Input": "** words = [\"abcd\",\"dbqca\"]",
                "Output": "** 1",
                "Explanation": "** The trivial word chain [\"abcd\"] is one of the longest word chains.\n[\"abcd\",\"dbqca\"] is not a valid word chain because the ordering of the letters is changed."
            }
        ]
    },
    {
        "Title": "Last Stone Weight II",
        "slug": "last-stone-weight-ii",
        "description": "You are given an array of integers `stones` where `stones[i]` is the weight of the `ith` stone.\n\n\nWe are playing a game with the stones. On each turn, we choose any two stones and smash them together. Suppose the stones have weights `x` and `y` with `x <= y`. The result of this smash is:\n\n\n If `x == y`, both stones are destroyed, and\n If `x != y`, the stone of weight `x` is destroyed, and the stone of weight `y` has new weight `y - x`.\n\n\nAt the end of the game, there is **at most one** stone left.\n\n\nReturn *the smallest possible weight of the left stone*. If there are no stones left, return `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** stones = [2,7,4,1,8,1]",
                "Output": "** 1",
                "Explanation": "**\nWe can combine 2 and 4 to get 2, so the array converts to [2,7,1,8,1] then,\nwe can combine 7 and 8 to get 1, so the array converts to [2,1,1,1] then,\nwe can combine 2 and 1 to get 1, so the array converts to [1,1,1] then,\nwe can combine 1 and 1 to get 0, so the array converts to [1], then that's the optimal value."
            },
            {
                "Input": "** stones = [31,26,33,21,40]",
                "Output": "** 5",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Actors and Directors Who Cooperated At Least Three Times",
        "slug": "actors-and-directors-who-cooperated-at-least-three-times",
        "description": "Table: `ActorDirector`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| actor_id    | int     |\n| director_id | int     |\n| timestamp   | int     |\n+-------------+---------+\ntimestamp is the primary key (column with unique values) for this table.\n\n```\n\n\u00a0\n\n\nWrite a solution to find all the pairs `(actor_id, director_id)` where the actor has cooperated with the director at least three times.\n\n\nReturn the result table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nActorDirector table:\n+-------------+-------------+-------------+\n| actor_id    | director_id | timestamp   |\n+-------------+-------------+-------------+\n| 1           | 1           | 0           |\n| 1           | 1           | 1           |\n| 1           | 1           | 2           |\n| 1           | 2           | 3           |\n| 1           | 2           | 4           |\n| 2           | 1           | 5           |\n| 2           | 1           | 6           |\n+-------------+-------------+-------------+",
                "Output": "** \n+-------------+-------------+\n| actor_id    | director_id |\n+-------------+-------------+\n| 1           | 1           |\n+-------------+-------------+",
                "Explanation": "** The only pair is (1, 1) where they cooperated exactly 3 times."
            }
        ]
    },
    {
        "Title": "Height Checker",
        "slug": "height-checker",
        "description": "A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in **non-decreasing order** by height. Let this ordering be represented by the integer array `expected` where `expected[i]` is the expected height of the `ith` student in line.\n\n\nYou are given an integer array `heights` representing the **current order** that the students are standing in. Each `heights[i]` is the height of the `ith` student in line (**0-indexed**).\n\n\nReturn *the **number of indices** where* `heights[i] != expected[i]`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting",
            "Counting Sort"
        ],
        "examples": [
            {
                "Input": "** heights = [1,1,4,2,1,3]",
                "Output": "** 3",
                "Explanation": "** \nheights:  [1,1,4,2,1,3]\nexpected: [1,1,1,2,3,4]\nIndices 2, 4, and 5 do not match."
            },
            {
                "Input": "** heights = [5,1,2,3,4]",
                "Output": "** 5",
                "Explanation": "**\nheights:  [5,1,2,3,4]\nexpected: [1,2,3,4,5]\nAll indices do not match."
            },
            {
                "Input": "** heights = [1,2,3,4,5]",
                "Output": "** 0",
                "Explanation": "**\nheights:  [1,2,3,4,5]\nexpected: [1,2,3,4,5]\nAll indices match."
            }
        ]
    },
    {
        "Title": "Grumpy Bookstore Owner",
        "slug": "grumpy-bookstore-owner",
        "description": "There is a bookstore owner that has a store open for `n` minutes. Every minute, some number of customers enter the store. You are given an integer array `customers` of length `n` where `customers[i]` is the number of the customer that enters the store at the start of the `ith` minute and all those customers leave after the end of that minute.\n\n\nOn some minutes, the bookstore owner is grumpy. You are given a binary array grumpy where `grumpy[i]` is `1` if the bookstore owner is grumpy during the `ith` minute, and is `0` otherwise.\n\n\nWhen the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise, they are satisfied.\n\n\nThe bookstore owner knows a secret technique to keep themselves not grumpy for `minutes` consecutive minutes, but can only use it once.\n\n\nReturn *the maximum number of customers that can be satisfied throughout the day*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3",
                "Output": "** 16",
                "Explanation": "** The bookstore owner keeps themselves not grumpy for the last 3 minutes. \nThe maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16."
            },
            {
                "Input": "** customers = [1], grumpy = [0], minutes = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Previous Permutation With One Swap",
        "slug": "previous-permutation-with-one-swap",
        "description": "Given an array of positive integers `arr` (not necessarily distinct), return *the* *lexicographically* *largest permutation that is smaller than* `arr`, that can be **made with exactly one swap**. If it cannot be done, then return the same array.\n\n\nNote** that a *swap* exchanges the positions of two numbers `arr[i]` and `arr[j]`\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** arr = [3,2,1]",
                "Output": "** [3,1,2]",
                "Explanation": "** Swapping 2 and 1."
            },
            {
                "Input": "** arr = [1,1,5]",
                "Output": "** [1,1,5]",
                "Explanation": "** This is already the smallest permutation."
            },
            {
                "Input": "** arr = [1,9,4,6,7]",
                "Output": "** [1,7,4,6,9]",
                "Explanation": "** Swapping 9 and 7."
            }
        ]
    },
    {
        "Title": "Distant Barcodes",
        "slug": "distant-barcodes",
        "description": "In a warehouse, there is a row of barcodes, where the `ith` barcode is `barcodes[i]`.\n\n\nRearrange the barcodes so that no two adjacent barcodes are equal. You may return any answer, and it is guaranteed an answer exists.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** barcodes = [1,1,1,2,2,2]",
                "Output": "** [2,1,2,1,2,1]",
                "Explanation": null
            },
            {
                "Input": "** barcodes = [1,1,1,1,2,2,3,3]",
                "Output": "** [1,3,1,3,1,2,1,2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Lexicographically Smallest Equivalent String",
        "slug": "lexicographically-smallest-equivalent-string",
        "description": "You are given two strings of the same length `s1` and `s2` and a string `baseStr`.\n\n\nWe say `s1[i]` and `s2[i]` are equivalent characters.\n\n\n For example, if `s1 = \"abc\"` and `s2 = \"cde\"`, then we have `'a' == 'c'`, `'b' == 'd'`, and `'c' == 'e'`.\n\n\nEquivalent characters follow the usual rules of any equivalence relation:\n\n\n **Reflexivity:** `'a' == 'a'`.\n **Symmetry:** `'a' == 'b'` implies `'b' == 'a'`.\n **Transitivity:** `'a' == 'b'` and `'b' == 'c'` implies `'a' == 'c'`.\n\n\nFor example, given the equivalency information from `s1 = \"abc\"` and `s2 = \"cde\"`, `\"acd\"` and `\"aab\"` are equivalent strings of `baseStr = \"eed\"`, and `\"aab\"` is the lexicographically smallest equivalent string of `baseStr`.\n\n\nReturn *the lexicographically smallest equivalent string of* `baseStr` *by using the equivalency information from* `s1` *and* `s2`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Union Find"
        ],
        "examples": [
            {
                "Input": "** s1 = \"parker\", s2 = \"morris\", baseStr = \"parser\"",
                "Output": "** \"makkek\"",
                "Explanation": "** Based on the equivalency information in s1 and s2, we can group their characters as [m,p], [a,o], [k,r,s], [e,i].\nThe characters in each group are equivalent and sorted in lexicographical order.\nSo the answer is \"makkek\"."
            },
            {
                "Input": "** s1 = \"hello\", s2 = \"world\", baseStr = \"hold\"",
                "Output": "** \"hdld\"",
                "Explanation": "** Based on the equivalency information in s1 and s2, we can group their characters as [h,w], [d,e,o], [l,r].\nSo only the second letter 'o' in baseStr is changed to 'd', the answer is \"hdld\"."
            },
            {
                "Input": "** s1 = \"leetcode\", s2 = \"programs\", baseStr = \"sourcecode\"",
                "Output": "** \"aauaaaaada\"",
                "Explanation": "** We group the equivalent characters in s1 and s2 as [a,o,e,r,s,c], [l,p], [g,t] and [d,m], thus all letters in baseStr except 'u' and 'd' are transformed to 'a', the answer is \"aauaaaaada\"."
            }
        ]
    },
    {
        "Title": "Product Sales Analysis I",
        "slug": "product-sales-analysis-i",
        "description": "Table: `Sales`\n\n\n\n```\n\n+-------------+-------+\n| Column Name | Type  |\n+-------------+-------+\n| sale_id     | int   |\n| product_id  | int   |\n| year        | int   |\n| quantity    | int   |\n| price       | int   |\n+-------------+-------+\n(sale_id, year) is the primary key (combination of columns with unique values) of this table.\nproduct_id is a foreign key (reference column) to Product table.\nEach row of this table shows a sale on the product product_id in a certain year.\nNote that the price is per unit.\n\n```\n\n\u00a0\n\n\nTable: `Product`\n\n\n\n```\n\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| product_id   | int     |\n| product_name | varchar |\n+--------------+---------+\nproduct_id is the primary key (column with unique values) of this table.\nEach row of this table indicates the product name of each product.\n\n```\n\n\u00a0\n\n\nWrite a solution to report the `product_name`, `year`, and `price` for each `sale_id` in the `Sales` table.\n\n\nReturn the resulting table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nSales table:\n+---------+------------+------+----------+-------+\n| sale_id | product_id | year | quantity | price |\n+---------+------------+------+----------+-------+ \n| 1       | 100        | 2008 | 10       | 5000  |\n| 2       | 100        | 2009 | 12       | 5000  |\n| 7       | 200        | 2011 | 15       | 9000  |\n+---------+------------+------+----------+-------+\nProduct table:\n+------------+--------------+\n| product_id | product_name |\n+------------+--------------+\n| 100        | Nokia        |\n| 200        | Apple        |\n| 300        | Samsung      |\n+------------+--------------+",
                "Output": "** \n+--------------+-------+-------+\n| product_name | year  | price |\n+--------------+-------+-------+\n| Nokia        | 2008  | 5000  |\n| Nokia        | 2009  | 5000  |\n| Apple        | 2011  | 9000  |\n+--------------+-------+-------+",
                "Explanation": "** \nFrom sale_id = 1, we can conclude that Nokia was sold for 5000 in the year 2008.\nFrom sale_id = 2, we can conclude that Nokia was sold for 5000 in the year 2009.\nFrom sale_id = 7, we can conclude that Apple was sold for 9000 in the year 2011."
            }
        ]
    },
    {
        "Title": "Product Sales Analysis III",
        "slug": "product-sales-analysis-iii",
        "description": "Table: `Sales`\n\n\n\n```\n\n+-------------+-------+\n| Column Name | Type  |\n+-------------+-------+\n| sale_id     | int   |\n| product_id  | int   |\n| year        | int   |\n| quantity    | int   |\n| price       | int   |\n+-------------+-------+\n(sale_id, year) is the primary key (combination of columns with unique values) of this table.\nproduct_id is a foreign key (reference column) to Product table.\nEach row of this table shows a sale on the product product_id in a certain year.\nNote that the price is per unit.\n\n```\n\n\u00a0\n\n\nTable: `Product`\n\n\n\n```\n\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| product_id   | int     |\n| product_name | varchar |\n+--------------+---------+\nproduct_id is the primary key (column with unique values) of this table.\nEach row of this table indicates the product name of each product.\n\n```\n\n\u00a0\n\n\nWrite a solution to select\u00a0the **product id**, **year**, **quantity**, and **price** for the **first year** of every product sold.\n\n\nReturn the resulting table in **any order**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nSales table:\n+---------+------------+------+----------+-------+\n| sale_id | product_id | year | quantity | price |\n+---------+------------+------+----------+-------+ \n| 1       | 100        | 2008 | 10       | 5000  |\n| 2       | 100        | 2009 | 12       | 5000  |\n| 7       | 200        | 2011 | 15       | 9000  |\n+---------+------------+------+----------+-------+\nProduct table:\n+------------+--------------+\n| product_id | product_name |\n+------------+--------------+\n| 100        | Nokia        |\n| 200        | Apple        |\n| 300        | Samsung      |\n+------------+--------------+",
                "Output": "** \n+------------+------------+----------+-------+\n| product_id | first_year | quantity | price |\n+------------+------------+----------+-------+ \n| 100        | 2008       | 10       | 5000  |\n| 200        | 2011       | 15       | 9000  |\n+------------+------------+----------+-------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Greatest Common Divisor of Strings",
        "slug": "greatest-common-divisor-of-strings",
        "description": "For two strings `s` and `t`, we say \"`t` divides `s`\" if and only if `s = t + t + t + ... + t + t` (i.e., `t` is concatenated with itself one or more times).\n\n\nGiven two strings `str1` and `str2`, return *the largest string* `x` *such that* `x` *divides both* `str1` *and* `str2`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "String"
        ],
        "examples": [
            {
                "Input": "** str1 = \"ABCABC\", str2 = \"ABC\"",
                "Output": "** \"ABC\"",
                "Explanation": null
            },
            {
                "Input": "** str1 = \"ABABAB\", str2 = \"ABAB\"",
                "Output": "** \"AB\"",
                "Explanation": null
            },
            {
                "Input": "** str1 = \"LEET\", str2 = \"CODE\"",
                "Output": "** \"\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Flip Columns For Maximum Number of Equal Rows",
        "slug": "flip-columns-for-maximum-number-of-equal-rows",
        "description": "You are given an `m x n` binary matrix `matrix`.\n\n\nYou can choose any number of columns in the matrix and flip every cell in that column (i.e., Change the value of the cell from `0` to `1` or vice versa).\n\n\nReturn *the maximum number of rows that have all values equal after some number of flips*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** matrix = [[0,1],[1,1]]",
                "Output": "** 1",
                "Explanation": "** After flipping no values, 1 row has all values equal."
            },
            {
                "Input": "** matrix = [[0,1],[1,0]]",
                "Output": "** 2",
                "Explanation": "** After flipping values in the first column, both rows have equal values."
            },
            {
                "Input": "** matrix = [[0,0,0],[0,0,1],[1,1,0]]",
                "Output": "** 2",
                "Explanation": "** After flipping values in the first two columns, the last two rows have equal values."
            }
        ]
    },
    {
        "Title": "Adding Two Negabinary Numbers",
        "slug": "adding-two-negabinary-numbers",
        "description": "Given two numbers `arr1` and `arr2` in base **-2**, return the result of adding them together.\n\n\nEach number is given in *array format*:\u00a0 as an array of 0s and 1s, from most significant bit to least significant bit.\u00a0 For example, `arr = [1,1,0,1]` represents the number `(-2)^3\u00a0+ (-2)^2 + (-2)^0 = -3`.\u00a0 A number `arr` in *array, format* is also guaranteed to have no leading zeros: either\u00a0`arr == [0]` or `arr[0] == 1`.\n\n\nReturn the result of adding `arr1` and `arr2` in the same format: as an array of 0s and 1s with no leading zeros.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math"
        ],
        "examples": [
            {
                "Input": "** arr1 = [1,1,1,1,1], arr2 = [1,0,1]",
                "Output": "** [1,0,0,0,0]",
                "Explanation": "** arr1 represents 11, arr2 represents 5, the output represents 16."
            },
            {
                "Input": "** arr1 = [0], arr2 = [0]",
                "Output": "** [0]",
                "Explanation": null
            },
            {
                "Input": "** arr1 = [0], arr2 = [1]",
                "Output": "** [1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Submatrices That Sum to Target",
        "slug": "number-of-submatrices-that-sum-to-target",
        "description": "Given a `matrix`\u00a0and a `target`, return the number of non-empty submatrices that sum to target.\n\n\nA submatrix `x1, y1, x2, y2` is the set of all cells `matrix[x][y]` with `x1 <= x <= x2` and `y1 <= y <= y2`.\n\n\nTwo submatrices `(x1, y1, x2, y2)` and `(x1', y1', x2', y2')` are different if they have some coordinate\u00a0that is different: for example, if `x1 != x1'`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Matrix",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0",
                "Output": "** 4",
                "Explanation": "** The four 1x1 submatrices that only contain 0."
            }
        ]
    },
    {
        "Title": "Project Employees I",
        "slug": "project-employees-i",
        "description": "Table: `Project`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| project_id  | int     |\n| employee_id | int     |\n+-------------+---------+\n(project_id, employee_id) is the primary key of this table.\nemployee_id is a foreign key to Employee table.\nEach row of this table indicates that the employee with employee_id is working on the project with project_id.\n\n```\n\n\u00a0\n\n\nTable: `Employee`\n\n\n\n```\n\n+------------------+---------+\n| Column Name      | Type    |\n+------------------+---------+\n| employee_id      | int     |\n| name             | varchar |\n| experience_years | int     |\n+------------------+---------+\nemployee_id is the primary key of this table. It's guaranteed that experience_years is not NULL.\nEach row of this table contains information about one employee.\n\n```\n\n\u00a0\n\n\nWrite an SQL query that reports the **average** experience years of all the employees for each project, **rounded to 2 digits**.\n\n\nReturn the result table in **any order**.\n\n\nThe query result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nProject table:\n+-------------+-------------+\n| project_id  | employee_id |\n+-------------+-------------+\n| 1           | 1           |\n| 1           | 2           |\n| 1           | 3           |\n| 2           | 1           |\n| 2           | 4           |\n+-------------+-------------+\nEmployee table:\n+-------------+--------+------------------+\n| employee_id | name   | experience_years |\n+-------------+--------+------------------+\n| 1           | Khaled | 3                |\n| 2           | Ali    | 2                |\n| 3           | John   | 1                |\n| 4           | Doe    | 2                |\n+-------------+--------+------------------+",
                "Output": "** \n+-------------+---------------+\n| project_id  | average_years |\n+-------------+---------------+\n| 1           | 2.00          |\n| 2           | 2.50          |\n+-------------+---------------+",
                "Explanation": "** The average experience years for the first project is (3 + 2 + 1) / 3 = 2.00 and for the second project is (3 + 2) / 2 = 2.50"
            }
        ]
    },
    {
        "Title": "Occurrences After Bigram",
        "slug": "occurrences-after-bigram",
        "description": "Given two strings `first` and `second`, consider occurrences in some text of the form `\"first second third\"`, where `second` comes immediately after `first`, and `third` comes immediately after `second`.\n\n\nReturn *an array of all the words* `third` *for each occurrence of* `\"first second third\"`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** text = \"alice is a good girl she is a good student\", first = \"a\", second = \"good\"",
                "Output": "** [\"girl\",\"student\"]",
                "Explanation": null
            },
            {
                "Input": "** text = \"we will we will rock you\", first = \"we\", second = \"will\"",
                "Output": "** [\"we\",\"rock\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Letter Tile Possibilities",
        "slug": "letter-tile-possibilities",
        "description": "You have `n`\u00a0\u00a0`tiles`, where each tile has one letter `tiles[i]` printed on it.\n\n\nReturn *the number of possible non-empty sequences of letters* you can make using the letters printed on those `tiles`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Backtracking",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** tiles = \"AAB\"",
                "Output": "** 8",
                "Explanation": "** The possible sequences are \"A\", \"B\", \"AA\", \"AB\", \"BA\", \"AAB\", \"ABA\", \"BAA\"."
            },
            {
                "Input": "** tiles = \"AAABBC\"",
                "Output": "** 188",
                "Explanation": null
            },
            {
                "Input": "** tiles = \"V\"",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Insufficient Nodes in Root to Leaf Paths",
        "slug": "insufficient-nodes-in-root-to-leaf-paths",
        "description": "Given the `root` of a binary tree and an integer `limit`, delete all **insufficient nodes** in the tree simultaneously, and return *the root of the resulting binary tree*.\n\n\nA node is **insufficient** if every root to **leaf** path intersecting this node has a sum strictly less than `limit`.\n\n\nA **leaf** is a node with no children.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1",
                "Output": "** [1,2,3,4,null,null,7,8,9,null,14]",
                "Explanation": null
            },
            {
                "Input": "** root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22",
                "Output": "** [5,4,8,11,null,17,4,7,null,null,null,5]",
                "Explanation": null
            },
            {
                "Input": "** root = [1,2,-3,-5,null,4,null], limit = -1",
                "Output": "** [1,null,-3,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Smallest Subsequence of Distinct Characters",
        "slug": "smallest-subsequence-of-distinct-characters",
        "description": "Given a string `s`, return *the* *lexicographically smallest* *subsequence* *of* `s` *that contains all the distinct characters of* `s` *exactly once*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Stack",
            "Greedy",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** s = \"bcabc\"",
                "Output": "** \"abc\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"cbacdcbc\"",
                "Output": "** \"acdb\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sales Analysis III",
        "slug": "sales-analysis-iii",
        "description": "Table: `Product`\n\n\n\n```\n\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| product_id   | int     |\n| product_name | varchar |\n| unit_price   | int     |\n+--------------+---------+\nproduct_id is the primary key (column with unique values) of this table.\nEach row of this table indicates the name and the price of each product.\n\n```\n\nTable: `Sales`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| seller_id   | int     |\n| product_id  | int     |\n| buyer_id    | int     |\n| sale_date   | date    |\n| quantity    | int     |\n| price       | int     |\n+-------------+---------+\nThis table can have duplicate rows.\nproduct_id is a foreign key (reference column) to the Product table.\nEach row of this table contains some information about one sale.\n\n```\n\n\u00a0\n\n\nWrite a solution to\u00a0report\u00a0the **products** that were **only** sold in the first quarter of `2019`. That is, between `2019-01-01` and `2019-03-31` inclusive.\n\n\nReturn the result table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nProduct table:\n+------------+--------------+------------+\n| product_id | product_name | unit_price |\n+------------+--------------+------------+\n| 1          | S8           | 1000       |\n| 2          | G4           | 800        |\n| 3          | iPhone       | 1400       |\n+------------+--------------+------------+\nSales table:\n+-----------+------------+----------+------------+----------+-------+\n| seller_id | product_id | buyer_id | sale_date  | quantity | price |\n+-----------+------------+----------+------------+----------+-------+\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\n| 2         | 2          | 3        | 2019-06-02 | 1        | 800   |\n| 3         | 3          | 4        | 2019-05-13 | 2        | 2800  |\n+-----------+------------+----------+------------+----------+-------+",
                "Output": "** \n+-------------+--------------+\n| product_id  | product_name |\n+-------------+--------------+\n| 1           | S8           |\n+-------------+--------------+",
                "Explanation": "** \nThe product with id 1 was only sold in the spring of 2019.\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\nThe product with id 3 was sold after spring 2019.\nWe return only product 1 as it is the product that was only sold in the spring of 2019."
            }
        ]
    },
    {
        "Title": "Duplicate Zeros",
        "slug": "duplicate-zeros",
        "description": "Given a fixed-length integer array `arr`, duplicate each occurrence of zero, shifting the remaining elements to the right.\n\n\nNote** that elements beyond the length of the original array are not written. Do the above modifications to the input array in place and do not return anything.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** arr = [1,0,2,3,0,4,5,0]",
                "Output": "** [1,0,0,2,3,0,0,4]",
                "Explanation": "** After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]"
            },
            {
                "Input": "** arr = [1,2,3]",
                "Output": "** [1,2,3]",
                "Explanation": "** After calling your function, the input array is modified to: [1,2,3]"
            }
        ]
    },
    {
        "Title": "Largest Values From Labels",
        "slug": "largest-values-from-labels",
        "description": "There is a set of `n` items. You are given two integer arrays `values` and `labels` where the value and the label of the `ith` element are `values[i]` and `labels[i]` respectively. You are also given two integers `numWanted` and `useLimit`.\n\n\nChoose a subset `s` of the `n` elements such that:\n\n\n The size of the subset `s` is **less than or equal to** `numWanted`.\n There are **at most** `useLimit` items with the same label in `s`.\n\n\nThe **score** of a subset is the sum of the values in the subset.\n\n\nReturn *the maximum **score** of a subset* `s`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy",
            "Sorting",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** values = [5,4,3,2,1], labels = [1,1,2,2,3], numWanted = 3, useLimit = 1",
                "Output": "** 9",
                "Explanation": "** The subset chosen is the first, third, and fifth items."
            },
            {
                "Input": "** values = [5,4,3,2,1], labels = [1,3,3,3,2], numWanted = 3, useLimit = 2",
                "Output": "** 12",
                "Explanation": "** The subset chosen is the first, second, and third items."
            },
            {
                "Input": "** values = [9,8,8,7,6], labels = [0,0,0,1,1], numWanted = 3, useLimit = 1",
                "Output": "** 16",
                "Explanation": "** The subset chosen is the first and fourth items."
            }
        ]
    },
    {
        "Title": "Shortest Path in Binary Matrix",
        "slug": "shortest-path-in-binary-matrix",
        "description": "Given an `n x n` binary matrix `grid`, return *the length of the shortest **clear path** in the matrix*. If there is no clear path, return `-1`.\n\n\nA **clear path** in a binary matrix is a path from the **top-left** cell (i.e., `(0, 0)`) to the **bottom-right** cell (i.e., `(n - 1, n - 1)`) such that:\n\n\n All the visited cells of the path are `0`.\n All the adjacent cells of the path are **8-directionally** connected (i.e., they are different and they share an edge or a corner).\n\n\nThe **length of a clear path** is the number of visited cells of this path.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Breadth-First Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[0,1],[1,0]]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** grid = [[0,0,0],[1,1,0],[1,1,0]]",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Shortest Common Supersequence ",
        "slug": "shortest-common-supersequence",
        "description": "Given two strings `str1` and `str2`, return *the shortest string that has both* `str1` *and* `str2` *as **subsequences***. If there are multiple valid strings, return **any** of them.\n\n\nA string `s` is a **subsequence** of string `t` if deleting some number of characters from `t` (possibly `0`) results in the string `s`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** str1 = \"abac\", str2 = \"cab\"",
                "Output": "** \"cabac\"",
                "Explanation": "** \nstr1 = \"abac\" is a subsequence of \"cabac\" because we can delete the first \"c\".\nstr2 = \"cab\" is a subsequence of \"cabac\" because we can delete the last \"ac\".\nThe answer provided is the shortest such string that satisfies these properties."
            },
            {
                "Input": "** str1 = \"aaaaaaaa\", str2 = \"aaaaaaaa\"",
                "Output": "** \"aaaaaaaa\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Statistics from a Large Sample",
        "slug": "statistics-from-a-large-sample",
        "description": "You are given a large sample of integers in the range `[0, 255]`. Since the sample is so large, it is represented by an array `count`\u00a0where `count[k]` is the **number of times** that `k` appears in the sample.\n\n\nCalculate the following statistics:\n\n\n `minimum`: The minimum element in the sample.\n `maximum`: The maximum element in the sample.\n `mean`: The average of the sample, calculated as the total sum of all elements divided by the total number of elements.\n `median`:\n\t+ If the sample has an odd number of elements, then the `median` is the middle element once the sample is sorted.\n\t+ If the sample has an even number of elements, then the `median` is the average of the two middle elements once the sample is sorted.\n `mode`: The number that appears the most in the sample. It is guaranteed to be **unique**.\n\n\nReturn *the statistics of the sample as an array of floating-point numbers* `[minimum, maximum, mean, median, mode]`*. Answers within* `10-5` *of the actual answer will be accepted.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Probability and Statistics"
        ],
        "examples": [
            {
                "Input": "** count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                "Output": "** [1.00000,3.00000,2.37500,2.50000,3.00000]",
                "Explanation": "** The sample represented by count is [1,2,2,2,3,3,3,3].\nThe minimum and maximum are 1 and 3 respectively.\nThe mean is (1+2+2+2+3+3+3+3) / 8 = 19 / 8 = 2.375.\nSince the size of the sample is even, the median is the average of the two middle elements 2 and 3, which is 2.5.\nThe mode is 3 as it appears the most in the sample."
            },
            {
                "Input": "** count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                "Output": "** [1.00000,4.00000,2.18182,2.00000,1.00000]",
                "Explanation": "** The sample represented by count is [1,1,1,1,2,2,2,3,3,4,4].\nThe minimum and maximum are 1 and 4 respectively.\nThe mean is (1+1+1+1+2+2+2+3+3+4+4) / 11 = 24 / 11 = 2.18181818... (for display purposes, the output shows the rounded number 2.18182).\nSince the size of the sample is odd, the median is the middle element 2.\nThe mode is 1 as it appears the most in the sample."
            }
        ]
    },
    {
        "Title": "Car Pooling",
        "slug": "car-pooling",
        "description": "There is a car with `capacity` empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west).\n\n\nYou are given the integer `capacity` and an array `trips` where `trips[i] = [numPassengersi, fromi, toi]` indicates that the `ith` trip has `numPassengersi` passengers and the locations to pick them up and drop them off are `fromi` and `toi` respectively. The locations are given as the number of kilometers due east from the car's initial location.\n\n\nReturn `true` *if it is possible to pick up and drop off all passengers for all the given trips, or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sorting",
            "Heap (Priority Queue)",
            "Simulation",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** trips = [[2,1,5],[3,3,7]], capacity = 4",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** trips = [[2,1,5],[3,3,7]], capacity = 5",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find in Mountain Array",
        "slug": "find-in-mountain-array",
        "description": "(This problem is an **interactive problem**.)\n\n\nYou may recall that an array `arr` is a **mountain array** if and only if:\n\n\n `arr.length >= 3`\n There exists some `i` with `0 < i < arr.length - 1` such that:\n\t+ `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n\t+ `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\n\nGiven a mountain array `mountainArr`, return the **minimum** `index` such that `mountainArr.get(index) == target`. If such an `index` does not exist, return `-1`.\n\n\nYou cannot access the mountain array directly.** You may only access the array using a `MountainArray` interface:\n\n\n `MountainArray.get(k)` returns the element of the array at index `k` (0-indexed).\n `MountainArray.length()` returns the length of the array.\n\n\nSubmissions making more than `100` calls to `MountainArray.get` will be judged *Wrong Answer*. Also, any solutions that attempt to circumvent the judge will result in disqualification.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Interactive"
        ],
        "examples": [
            {
                "Input": "** array = [1,2,3,4,5,3,1], target = 3",
                "Output": "** 2",
                "Explanation": "** 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2."
            },
            {
                "Input": "** array = [0,1,2,4,2,1], target = 3",
                "Output": "** -1",
                "Explanation": "** 3 does not exist in the array, so we return -1."
            }
        ]
    },
    {
        "Title": "Brace Expansion II",
        "slug": "brace-expansion-ii",
        "description": "Under the grammar given below, strings can represent a set of lowercase words. Let\u00a0`R(expr)`\u00a0denote the set of words the expression represents.\n\n\nThe grammar can best be understood through simple examples:\n\n\n Single letters represent a singleton set containing that word.\n\t+ `R(\"a\") = {\"a\"}`\n\t+ `R(\"w\") = {\"w\"}`\n When we take a comma-delimited list of two or more expressions, we take the union of possibilities.\n\t+ `R(\"{a,b,c}\") = {\"a\",\"b\",\"c\"}`\n\t+ `R(\"{{a,b},{b,c}}\") = {\"a\",\"b\",\"c\"}` (notice the final set only contains each word at most once)\n When we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression.\n\t+ `R(\"{a,b}{c,d}\") = {\"ac\",\"ad\",\"bc\",\"bd\"}`\n\t+ `R(\"a{b,c}{d,e}f{g,h}\") = {\"abdfg\", \"abdfh\", \"abefg\", \"abefh\", \"acdfg\", \"acdfh\", \"acefg\", \"acefh\"}`\n\n\nFormally, the three rules for our grammar:\n\n\n For every lowercase letter `x`, we have `R(x) = {x}`.\n For expressions `e1, e2, ... , ek` with `k >= 2`, we have `R({e1, e2, ...}) = R(e1) \u222a R(e2) \u222a ...`\n For expressions `e1` and `e2`, we have `R(e1 + e2) = {a + b for (a, b) in R(e1) \u00d7 R(e2)}`, where `+` denotes concatenation, and `\u00d7` denotes the cartesian product.\n\n\nGiven an expression representing a set of words under the given grammar, return *the sorted list of words that the expression represents*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Backtracking",
            "Stack",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** expression = \"{a,b}{c,{d,e}}\"",
                "Output": "** [\"ac\",\"ad\",\"ae\",\"bc\",\"bd\",\"be\"]",
                "Explanation": null
            },
            {
                "Input": "** expression = \"{{a,z},a{b,c},{ab,z}}\"",
                "Output": "** [\"a\",\"ab\",\"ac\",\"z\"]",
                "Explanation": "** Each distinct word is written only once in the final answer."
            }
        ]
    },
    {
        "Title": "Distribute Candies to People",
        "slug": "distribute-candies-to-people",
        "description": "We distribute some\u00a0number of `candies`, to a row of **`n =\u00a0num_people`**\u00a0people in the following way:\n\n\nWe then give 1 candy to the first person, 2 candies to the second person, and so on until we give `n`\u00a0candies to the last person.\n\n\nThen, we go back to the start of the row, giving `n\u00a0+ 1` candies to the first person, `n\u00a0+ 2` candies to the second person, and so on until we give `2 * n`\u00a0candies to the last person.\n\n\nThis process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies.\u00a0 The last person will receive all of our remaining candies (not necessarily one more than the previous gift).\n\n\nReturn an array (of length `num_people`\u00a0and sum `candies`) that represents the final distribution of candies.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** candies = 7, num_people = 4",
                "Output": "** [1,2,3,1]",
                "Explanation": "**\nOn the first turn, ans[0] += 1, and the array is [1,0,0,0].\nOn the second turn, ans[1] += 2, and the array is [1,2,0,0].\nOn the third turn, ans[2] += 3, and the array is [1,2,3,0].\nOn the fourth turn, ans[3] += 1 (because there is only one candy left), and the final array is [1,2,3,1]."
            },
            {
                "Input": "** candies = 10, num_people = 3",
                "Output": "** [5,2,3]",
                "Explanation": "** \nOn the first turn, ans[0] += 1, and the array is [1,0,0].\nOn the second turn, ans[1] += 2, and the array is [1,2,0].\nOn the third turn, ans[2] += 3, and the array is [1,2,3].\nOn the fourth turn, ans[0] += 4, and the final array is [5,2,3]."
            }
        ]
    },
    {
        "Title": "Path In Zigzag Labelled Binary Tree",
        "slug": "path-in-zigzag-labelled-binary-tree",
        "description": "In an infinite binary tree where every node has two children, the nodes are labelled in row order.\n\n\nIn the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left.\n\n\n![](https://assets.leetcode.com/uploads/2019/06/24/tree.png)\n\n\nGiven the `label` of a node in this tree, return the labels in the path from the root of the tree to the\u00a0node with that `label`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** label = 14",
                "Output": "** [1,3,4,14]",
                "Explanation": null
            },
            {
                "Input": "** label = 26",
                "Output": "** [1,2,6,10,26]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Filling Bookcase Shelves",
        "slug": "filling-bookcase-shelves",
        "description": "You are given an array `books` where `books[i] = [thicknessi, heighti]` indicates the thickness and height of the `ith` book. You are also given an integer `shelfWidth`.\n\n\nWe want to place these books in order onto bookcase shelves that have a total width `shelfWidth`.\n\n\nWe choose some of the books to place on this shelf such that the sum of their thickness is less than or equal to `shelfWidth`, then build another level of the shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down. We repeat this process until there are no more books to place.\n\n\nNote that at each step of the above process, the order of the books we place is the same order as the given sequence of books.\n\n\n For example, if we have an ordered list of `5` books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf.\n\n\nReturn *the minimum possible height that the total bookshelf can be after placing shelves in this manner*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelfWidth = 4",
                "Output": "** 6",
                "Explanation": "**\nThe sum of the heights of the 3 shelves is 1 + 3 + 2 = 6.\nNotice that book number 2 does not have to be on the first shelf."
            }
        ]
    },
    {
        "Title": "Parsing A Boolean Expression",
        "slug": "parsing-a-boolean-expression",
        "description": "A **boolean expression** is an expression that evaluates to either `true` or `false`. It can be in one of the following shapes:\n\n\n `'t'` that evaluates to `true`.\n `'f'` that evaluates to `false`.\n `'!(subExpr)'` that evaluates to **the logical NOT** of the inner expression `subExpr`.\n `'&(subExpr1, subExpr2, ..., subExprn)'` that evaluates to **the logical AND** of the inner expressions `subExpr1, subExpr2, ..., subExprn` where `n >= 1`.\n `'|(subExpr1, subExpr2, ..., subExprn)'` that evaluates to **the logical OR** of the inner expressions `subExpr1, subExpr2, ..., subExprn` where `n >= 1`.\n\n\nGiven a string `expression` that represents a **boolean expression**, return *the evaluation of that expression*.\n\n\nIt is **guaranteed** that the given expression is valid and follows the given rules.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Stack",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** expression = \"&(|(f))\"",
                "Output": "** false",
                "Explanation": "** \nFirst, evaluate |(f) --> f. The expression is now \"&(f)\".\nThen, evaluate &(f) --> f. The expression is now \"f\".\nFinally, return false."
            },
            {
                "Input": "** expression = \"|(f,f,f,t)\"",
                "Output": "** true",
                "Explanation": "** The evaluation of (false OR false OR false OR true) is true."
            },
            {
                "Input": "** expression = \"!(&(f,t))\"",
                "Output": "** true",
                "Explanation": "** \nFirst, evaluate &(f,t) --> (false AND true) --> false --> f. The expression is now \"!(f)\".\nThen, evaluate !(f) --> NOT false --> true. We return true."
            }
        ]
    },
    {
        "Title": "Defanging an IP Address",
        "slug": "defanging-an-ip-address",
        "description": "Given a valid (IPv4) IP `address`, return a defanged version of that IP address.\n\n\nA *defanged\u00a0IP address*\u00a0replaces every period `\".\"` with `\"[.]\"`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** address = \"1.1.1.1\"",
                "Output": "** \"1[.]1[.]1[.]1\"",
                "Explanation": null
            },
            {
                "Input": "** address = \"255.100.50.0\"",
                "Output": "** \"255[.]100[.]50[.]0\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Corporate Flight Bookings",
        "slug": "corporate-flight-bookings",
        "description": "There are `n` flights that are labeled from `1` to `n`.\n\n\nYou are given an array of flight bookings `bookings`, where `bookings[i] = [firsti, lasti, seatsi]` represents a booking for flights `firsti` through `lasti` (**inclusive**) with `seatsi` seats reserved for **each flight** in the range.\n\n\nReturn *an array* `answer` *of length* `n`*, where* `answer[i]` *is the total number of seats reserved for flight* `i`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5",
                "Output": "** [10,55,45,25,25]",
                "Explanation": "**\nFlight labels:        1   2   3   4   5\nBooking 1 reserved:  10  10\nBooking 2 reserved:      20  20\nBooking 3 reserved:      25  25  25  25\nTotal seats:         10  55  45  25  25\nHence, answer = [10,55,45,25,25]"
            },
            {
                "Input": "** bookings = [[1,2,10],[2,2,15]], n = 2",
                "Output": "** [10,25]",
                "Explanation": "**\nFlight labels:        1   2\nBooking 1 reserved:  10  10\nBooking 2 reserved:      15\nTotal seats:         10  25\nHence, answer = [10,25]"
            }
        ]
    },
    {
        "Title": "Delete Nodes And Return Forest",
        "slug": "delete-nodes-and-return-forest",
        "description": "Given the `root` of a binary tree, each node in the tree has a distinct value.\n\n\nAfter deleting all nodes with a value in `to_delete`, we are left with a forest (a disjoint union of trees).\n\n\nReturn the roots of the trees in the remaining forest. You may return the result in any order.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2,3,4,5,6,7], to_delete = [3,5]",
                "Output": "** [[1,2,null,4],[6],[7]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Nesting Depth of Two Valid Parentheses Strings",
        "slug": "maximum-nesting-depth-of-two-valid-parentheses-strings",
        "description": "A string is a *valid parentheses string*\u00a0(denoted VPS) if and only if it consists of `\"(\"` and `\")\"` characters only, and:\n\n\n It is the empty string, or\n It can be written as\u00a0`AB`\u00a0(`A`\u00a0concatenated with\u00a0`B`), where\u00a0`A`\u00a0and\u00a0`B`\u00a0are VPS's, or\n It can be written as\u00a0`(A)`, where\u00a0`A`\u00a0is a VPS.\n\n\nWe can\u00a0similarly define the *nesting depth* `depth(S)` of any VPS `S` as follows:\n\n\n `depth(\"\") = 0`\n `depth(A + B) = max(depth(A), depth(B))`, where `A` and `B` are VPS's\n `depth(\"(\" + A + \")\") = 1 + depth(A)`, where `A` is a VPS.\n\n\nFor example,\u00a0 `\"\"`,\u00a0`\"()()\"`, and\u00a0`\"()(()())\"`\u00a0are VPS's (with nesting depths 0, 1, and 2), and `\")(\"` and `\"(()\"` are not VPS's.\n\n\n\u00a0\n\n\nGiven a VPS seq, split it into two disjoint subsequences `A` and `B`, such that\u00a0`A` and `B` are VPS's (and\u00a0`A.length + B.length = seq.length`).\n\n\nNow choose **any** such `A` and `B` such that\u00a0`max(depth(A), depth(B))` is the minimum possible value.\n\n\nReturn an `answer` array (of length `seq.length`) that encodes such a\u00a0choice of `A` and `B`:\u00a0 `answer[i] = 0` if `seq[i]` is part of `A`, else `answer[i] = 1`.\u00a0 Note that even though multiple answers may exist, you may return any of them.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** seq = \"(()())\"",
                "Output": "** [0,1,1,1,1,0]",
                "Explanation": null
            },
            {
                "Input": "** seq = \"()(())()\"",
                "Output": "** [0,0,0,1,1,0,1,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Print in Order",
        "slug": "print-in-order",
        "description": "Suppose we have a class:\n\n\n\n```\n\npublic class Foo {\n  public void first() { print(\"first\"); }\n  public void second() { print(\"second\"); }\n  public void third() { print(\"third\"); }\n}\n\n```\n\nThe same instance of `Foo` will be passed to three different threads. Thread A will call `first()`, thread B will call `second()`, and thread C will call `third()`. Design a mechanism and modify the program to ensure that `second()` is executed after `first()`, and `third()` is executed after `second()`.\n\n\nNote:\n\n\nWe do not know how the threads will be scheduled in the operating system, even though the numbers in the input seem to imply the ordering. The input format you see is mainly to ensure our tests' comprehensiveness.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Concurrency"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** \"firstsecondthird\"",
                "Explanation": "** There are three threads being fired asynchronously. The input [1,2,3] means thread A calls first(), thread B calls second(), and thread C calls third(). \"firstsecondthird\" is the correct output."
            },
            {
                "Input": "** nums = [1,3,2]",
                "Output": "** \"firstsecondthird\"",
                "Explanation": "** The input [1,3,2] means thread A calls first(), thread B calls third(), and thread C calls second(). \"firstsecondthird\" is the correct output."
            }
        ]
    },
    {
        "Title": "Print FooBar Alternately",
        "slug": "print-foobar-alternately",
        "description": "Suppose you are given the following code:\n\n\n\n```\n\nclass FooBar {\n  public void foo() {\n    for (int i = 0; i < n; i++) {\n      print(\"foo\");\n    }\n  }\n\n  public void bar() {\n    for (int i = 0; i < n; i++) {\n      print(\"bar\");\n    }\n  }\n}\n\n```\n\nThe same instance of `FooBar` will be passed to two different threads:\n\n\n thread `A` will call `foo()`, while\n thread `B` will call `bar()`.\n\n\nModify the given program to output `\"foobar\"` `n` times.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Concurrency"
        ],
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** \"foobar\"",
                "Explanation": "** There are two threads being fired asynchronously. One of them calls foo(), while the other calls bar().\n\"foobar\" is being output 1 time."
            },
            {
                "Input": "** n = 2",
                "Output": "** \"foobarfoobar\"",
                "Explanation": "** \"foobar\" is being output 2 times."
            }
        ]
    },
    {
        "Title": "Print Zero Even Odd",
        "slug": "print-zero-even-odd",
        "description": "You have a function `printNumber` that can be called with an integer parameter and prints it to the console.\n\n\n For example, calling `printNumber(7)` prints `7` to the console.\n\n\nYou are given an instance of the class `ZeroEvenOdd` that has three functions: `zero`, `even`, and `odd`. The same instance of `ZeroEvenOdd` will be passed to three different threads:\n\n\n **Thread A:** calls `zero()` that should only output `0`'s.\n **Thread B:** calls `even()` that should only output even numbers.\n **Thread C:** calls `odd()` that should only output odd numbers.\n\n\nModify the given class to output the series `\"010203040506...\"` where the length of the series must be `2n`.\n\n\nImplement the `ZeroEvenOdd` class:\n\n\n `ZeroEvenOdd(int n)` Initializes the object with the number `n` that represents the numbers that should be printed.\n `void zero(printNumber)` Calls `printNumber` to output one zero.\n `void even(printNumber)` Calls `printNumber` to output one even number.\n `void odd(printNumber)` Calls `printNumber` to output one odd number.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Concurrency"
        ],
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** \"0102\"",
                "Explanation": "** There are three threads being fired asynchronously.\nOne of them calls zero(), the other calls even(), and the last one calls odd().\n\"0102\" is the correct output."
            },
            {
                "Input": "** n = 5",
                "Output": "** \"0102030405\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Building H2O",
        "slug": "building-h2o",
        "description": "There are two kinds of threads: `oxygen` and `hydrogen`. Your goal is to group these threads to form water molecules.\n\n\nThere is a barrier where each thread has to wait until a complete molecule can be formed. Hydrogen and oxygen threads will be given `releaseHydrogen` and `releaseOxygen` methods respectively, which will allow them to pass the barrier. These threads should pass the barrier in groups of three, and they must immediately bond with each other to form a water molecule. You must guarantee that all the threads from one molecule bond before any other threads from the next molecule do.\n\n\nIn other words:\n\n\n If an oxygen thread arrives at the barrier when no hydrogen threads are present, it must wait for two hydrogen threads.\n If a hydrogen thread arrives at the barrier when no other threads are present, it must wait for an oxygen thread and another hydrogen thread.\n\n\nWe do not have to worry about matching the threads up explicitly; the threads do not necessarily know which other threads they are paired up with. The key is that threads pass the barriers in complete sets; thus, if we examine the sequence of threads that bind and divide them into groups of three, each group should contain one oxygen and two hydrogen threads.\n\n\nWrite synchronization code for oxygen and hydrogen molecules that enforces these constraints.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Concurrency"
        ],
        "examples": [
            {
                "Input": "** water = \"HOH\"",
                "Output": "** \"HHO\"",
                "Explanation": "** \"HOH\" and \"OHH\" are also valid answers."
            },
            {
                "Input": "** water = \"OOHHHH\"",
                "Output": "** \"HHOHHO\"",
                "Explanation": "** \"HOHHHO\", \"OHHHHO\", \"HHOHOH\", \"HOHHOH\", \"OHHHOH\", \"HHOOHH\", \"HOHOHH\" and \"OHHOHH\" are also valid answers."
            }
        ]
    },
    {
        "Title": "Relative Sort Array",
        "slug": "relative-sort-array",
        "description": "Given two arrays `arr1` and `arr2`, the elements of `arr2` are distinct, and all elements in `arr2` are also in `arr1`.\n\n\nSort the elements of `arr1` such that the relative ordering of items in `arr1` are the same as in `arr2`. Elements that do not appear in `arr2` should be placed at the end of `arr1` in **ascending** order.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Counting Sort"
        ],
        "examples": [
            {
                "Input": "** arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]",
                "Output": "** [2,2,2,1,4,3,3,9,6,7,19]",
                "Explanation": null
            },
            {
                "Input": "** arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6]",
                "Output": "** [22,28,8,6,17,44]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Lowest Common Ancestor of Deepest Leaves",
        "slug": "lowest-common-ancestor-of-deepest-leaves",
        "description": "Given the `root` of a binary tree, return *the lowest common ancestor of its deepest leaves*.\n\n\nRecall that:\n\n\n The node of a binary tree is a leaf if and only if it has no children\n The depth of the root of the tree is `0`. if the depth of a node is `d`, the depth of each of its children is `d + 1`.\n The lowest common ancestor of a set `S` of nodes, is the node `A` with the largest depth such that every node in `S` is in the subtree with root `A`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [3,5,1,6,2,0,8,null,null,7,4]",
                "Output": "** [2,7,4]",
                "Explanation": "** We return the node with value 2, colored in yellow in the diagram.\nThe nodes coloured in blue are the deepest leaf-nodes of the tree.\nNote that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3."
            }
        ]
    },
    {
        "Title": "Longest Well-Performing Interval",
        "slug": "longest-well-performing-interval",
        "description": "We are given `hours`, a list of the number of hours worked per day for a given employee.\n\n\nA day is considered to be a *tiring day* if and only if the number of hours worked is (strictly) greater than `8`.\n\n\nA *well-performing interval* is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days.\n\n\nReturn the length of the longest well-performing interval.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Stack",
            "Monotonic Stack",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** hours = [9,9,6,0,6,6,9]",
                "Output": "** 3",
                "Explanation": "** The longest well-performing interval is [9,9,6]."
            },
            {
                "Input": "** hours = [6,6,6]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Smallest Sufficient Team",
        "slug": "smallest-sufficient-team",
        "description": "In a project, you have a list of required skills `req_skills`, and a list of people. The `ith` person `people[i]` contains a list of skills that the person has.\n\n\nConsider a sufficient team: a set of people such that for every required skill in `req_skills`, there is at least one person in the team who has that skill. We can represent these teams by the index of each person.\n\n\n For example, `team = [0, 1, 3]` represents the people with skills `people[0]`, `people[1]`, and `people[3]`.\n\n\nReturn *any sufficient team of the smallest possible size, represented by the index of each person*. You may return the answer in **any order**.\n\n\nIt is **guaranteed** an answer exists.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** req_skills = [\"java\",\"nodejs\",\"reactjs\"], people = [[\"java\"],[\"nodejs\"],[\"nodejs\",\"reactjs\"]]",
                "Output": "** [0,2]",
                "Explanation": null
            },
            {
                "Input": "** req_skills = [\"algorithms\",\"math\",\"java\",\"reactjs\",\"csharp\",\"aws\"], people = [[\"algorithms\",\"math\",\"java\"],[\"algorithms\",\"math\",\"reactjs\"],[\"java\",\"csharp\",\"aws\"],[\"reactjs\",\"csharp\"],[\"csharp\",\"math\"],[\"aws\",\"java\"]]",
                "Output": "** [1,2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Equivalent Domino Pairs",
        "slug": "number-of-equivalent-domino-pairs",
        "description": "Given a list of `dominoes`, `dominoes[i] = [a, b]` is **equivalent to** `dominoes[j] = [c, d]` if and only if either (`a == c` and `b == d`), or (`a == d` and `b == c`) - that is, one domino can be rotated to be equal to another domino.\n\n\nReturn *the number of pairs* `(i, j)` *for which* `0 <= i < j < dominoes.length`*, and* `dominoes[i]` *is **equivalent to*** `dominoes[j]`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** dominoes = [[1,2],[2,1],[3,4],[5,6]]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Shortest Path with Alternating Colors",
        "slug": "shortest-path-with-alternating-colors",
        "description": "You are given an integer `n`, the number of nodes in a directed graph where the nodes are labeled from `0` to `n - 1`. Each edge is red or blue in this graph, and there could be self-edges and parallel edges.\n\n\nYou are given two arrays `redEdges` and `blueEdges` where:\n\n\n `redEdges[i] = [ai, bi]` indicates that there is a directed red edge from node `ai` to node `bi` in the graph, and\n `blueEdges[j] = [uj, vj]` indicates that there is a directed blue edge from node `uj` to node `vj` in the graph.\n\n\nReturn an array `answer` of length `n`, where each `answer[x]` is the length of the shortest path from node `0` to node `x` such that the edge colors alternate along the path, or `-1` if such a path does not exist.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Breadth-First Search",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** n = 3, redEdges = [[0,1],[1,2]], blueEdges = []",
                "Output": "** [0,1,-1]",
                "Explanation": null
            },
            {
                "Input": "** n = 3, redEdges = [[0,1]], blueEdges = [[2,1]]",
                "Output": "** [0,1,-1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Cost Tree From Leaf Values",
        "slug": "minimum-cost-tree-from-leaf-values",
        "description": "Given an array `arr` of positive integers, consider all binary trees such that:\n\n\n Each node has either `0` or `2` children;\n The values of `arr` correspond to the values of each **leaf** in an in-order traversal of the tree.\n The value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree, respectively.\n\n\nAmong all possible binary trees considered, return *the smallest possible sum of the values of each non-leaf node*. It is guaranteed this sum fits into a **32-bit** integer.\n\n\nA node is a **leaf** if and only if it has zero children.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Stack",
            "Greedy",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** arr = [6,2,4]",
                "Output": "** 32",
                "Explanation": "** There are two possible trees shown.\nThe first has a non-leaf node sum 36, and the second has non-leaf node sum 32."
            },
            {
                "Input": "** arr = [4,11]",
                "Output": "** 44",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum of Absolute Value Expression",
        "slug": "maximum-of-absolute-value-expression",
        "description": "Given two arrays of integers with equal lengths, return the maximum value of:\n\n\n`|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|`\n\n\nwhere the maximum is taken over all `0 <= i, j < arr1.length`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math"
        ],
        "examples": [
            {
                "Input": "** arr1 = [1,2,3,4], arr2 = [-1,4,5,6]",
                "Output": "** 13",
                "Explanation": null
            },
            {
                "Input": "** arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]",
                "Output": "** 20",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "N-th Tribonacci Number",
        "slug": "n-th-tribonacci-number",
        "description": "The Tribonacci sequence Tn is defined as follows:\u00a0\n\n\nT0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.\n\n\nGiven `n`, return the value of Tn.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Memoization"
        ],
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** 4",
                "Explanation": "**\r\nT_3 = 0 + 1 + 1 = 2\r\nT_4 = 1 + 1 + 2 = 4"
            },
            {
                "Input": "** n = 25",
                "Output": "** 1389537",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Alphabet Board Path",
        "slug": "alphabet-board-path",
        "description": "On an alphabet board, we start at position `(0, 0)`, corresponding to character\u00a0`board[0][0]`.\n\n\nHere, `board = [\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"uvwxy\", \"z\"]`, as shown in the diagram below.\n\n\n![](https://assets.leetcode.com/uploads/2019/07/28/azboard.png)\n\n\nWe may make the following moves:\n\n\n `'U'` moves our position up one row, if the position exists on the board;\n `'D'` moves our position down one row, if the position exists on the board;\n `'L'` moves our position left one column, if the position exists on the board;\n `'R'` moves our position right one column, if the position exists on the board;\n `'!'`\u00a0adds the character `board[r][c]` at our current position `(r, c)`\u00a0to the\u00a0answer.\n\n\n(Here, the only positions that exist on the board are positions with letters on them.)\n\n\nReturn a sequence of moves that makes our answer equal to `target`\u00a0in the minimum number of moves.\u00a0 You may return any path that does so.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** target = \"leet\"",
                "Output": "** \"DDR!UURRR!!DDD!\"",
                "Explanation": null
            },
            {
                "Input": "** target = \"code\"",
                "Output": "** \"RR!DDRR!UUL!R!\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Largest 1-Bordered Square",
        "slug": "largest-1-bordered-square",
        "description": "Given a 2D `grid` of `0`s and `1`s, return the number of elements in\u00a0the largest **square**\u00a0subgrid that has all `1`s on its **border**, or `0` if such a subgrid\u00a0doesn't exist in the `grid`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,1,1],[1,0,1],[1,1,1]]",
                "Output": "** 9",
                "Explanation": null
            },
            {
                "Input": "** grid = [[1,1,0,0]]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Stone Game II",
        "slug": "stone-game-ii",
        "description": "Alice and Bob continue their\u00a0games with piles of stones.\u00a0 There are a number of\u00a0piles\u00a0**arranged in a row**, and each pile has a positive integer number of stones\u00a0`piles[i]`.\u00a0 The objective of the game is to end with the most\u00a0stones.\u00a0\n\n\nAlice\u00a0and Bob take turns, with Alice starting first.\u00a0 Initially, `M = 1`.\n\n\nOn each player's turn, that player\u00a0can take **all the stones** in the **first** `X` remaining piles, where `1 <= X <= 2M`.\u00a0 Then, we set\u00a0`M = max(M, X)`.\n\n\nThe game continues until all the stones have been taken.\n\n\nAssuming Alice and Bob play optimally, return the maximum number of stones Alice\u00a0can get.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Prefix Sum",
            "Game Theory"
        ],
        "examples": [
            {
                "Input": "** piles = [2,7,9,4,4]",
                "Output": "** 10",
                "Explanation": "**  If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 piles in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get 2 + 7 = 9 piles in total. So we return 10 since it's larger."
            },
            {
                "Input": "** piles = [1,2,3,4,5,100]",
                "Output": "** 104",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "User Activity for the Past 30 Days I",
        "slug": "user-activity-for-the-past-30-days-i",
        "description": "Table: `Activity`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| user_id       | int     |\n| session_id    | int     |\n| activity_date | date    |\n| activity_type | enum    |\n+---------------+---------+\nThis table may have duplicate rows.\nThe activity_type column is an ENUM (category) of type ('open_session', 'end_session', 'scroll_down', 'send_message').\nThe table shows the user activities for a social media website. \nNote that each session belongs to exactly one user.\n\n```\n\n\u00a0\n\n\nWrite a solution to find the daily active user count for a period of `30` days ending `2019-07-27` inclusively. A user was active on someday if they made at least one activity on that day.\n\n\nReturn the result table in **any order**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nActivity table:\n+---------+------------+---------------+---------------+\n| user_id | session_id | activity_date | activity_type |\n+---------+------------+---------------+---------------+\n| 1       | 1          | 2019-07-20    | open_session  |\n| 1       | 1          | 2019-07-20    | scroll_down   |\n| 1       | 1          | 2019-07-20    | end_session   |\n| 2       | 4          | 2019-07-20    | open_session  |\n| 2       | 4          | 2019-07-21    | send_message  |\n| 2       | 4          | 2019-07-21    | end_session   |\n| 3       | 2          | 2019-07-21    | open_session  |\n| 3       | 2          | 2019-07-21    | send_message  |\n| 3       | 2          | 2019-07-21    | end_session   |\n| 4       | 3          | 2019-06-25    | open_session  |\n| 4       | 3          | 2019-06-25    | end_session   |\n+---------+------------+---------------+---------------+",
                "Output": "** \n+------------+--------------+ \n| day        | active_users |\n+------------+--------------+ \n| 2019-07-20 | 2            |\n| 2019-07-21 | 2            |\n+------------+--------------+",
                "Explanation": "** Note that we do not care about days with zero active users."
            }
        ]
    },
    {
        "Title": "Longest Common Subsequence",
        "slug": "longest-common-subsequence",
        "description": "Given two strings `text1` and `text2`, return *the length of their longest **common subsequence**.* If there is no **common subsequence**, return `0`.\n\n\nA **subsequence** of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\n\n For example, `\"ace\"` is a subsequence of `\"abcde\"`.\n\n\nA **common subsequence** of two strings is a subsequence that is common to both strings.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** text1 = \"abcde\", text2 = \"ace\"",
                "Output": "** 3",
                "Explanation": "** The longest common subsequence is \"ace\" and its length is 3."
            },
            {
                "Input": "** text1 = \"abc\", text2 = \"abc\"",
                "Output": "** 3",
                "Explanation": "** The longest common subsequence is \"abc\" and its length is 3."
            },
            {
                "Input": "** text1 = \"abc\", text2 = \"def\"",
                "Output": "** 0",
                "Explanation": "** There is no such common subsequence, so the result is 0."
            }
        ]
    },
    {
        "Title": "Decrease Elements To Make Array Zigzag",
        "slug": "decrease-elements-to-make-array-zigzag",
        "description": "Given an array `nums` of integers, a *move*\u00a0consists of choosing any element and **decreasing it by 1**.\n\n\nAn array `A` is a\u00a0*zigzag array*\u00a0if either:\n\n\n Every even-indexed element is greater than adjacent elements, ie.\u00a0`A[0] > A[1] < A[2] > A[3] < A[4] > ...`\n OR, every odd-indexed element is greater than adjacent elements, ie.\u00a0`A[0] < A[1] > A[2] < A[3] > A[4] < ...`\n\n\nReturn the minimum number of moves to transform the given array `nums` into a zigzag array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 2",
                "Explanation": "** We can decrease 2 to 0 or 3 to 1."
            },
            {
                "Input": "** nums = [9,6,1,6,2]",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Tree Coloring Game",
        "slug": "binary-tree-coloring-game",
        "description": "Two players play a turn based game on a binary tree. We are given the `root` of this binary tree, and the number of nodes `n` in the tree. `n` is odd, and each node has a distinct value from `1` to `n`.\n\n\nInitially, the first player names a value `x` with `1 <= x <= n`, and the second player names a value `y` with `1 <= y <= n` and `y != x`. The first player colors the node with value `x` red, and the second player colors the node with value `y` blue.\n\n\nThen, the players take turns starting with the first player. In each turn, that player chooses a node of their color (red if player 1, blue if player 2) and colors an **uncolored** neighbor of the chosen node (either the left child, right child, or parent of the chosen node.)\n\n\nIf (and only if) a player cannot choose such a node in this way, they must pass their turn. If both players pass their turn, the game ends, and the winner is the player that colored more nodes.\n\n\nYou are the second player. If it is possible to choose such a `y` to ensure you win the game, return `true`. If it is not possible, return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3",
                "Output": "** true",
                "Explanation": "** The second player can choose the node with value 2."
            }
        ]
    },
    {
        "Title": "Snapshot Array",
        "slug": "snapshot-array",
        "description": "Implement a SnapshotArray that supports the following interface:\n\n\n `SnapshotArray(int length)` initializes an array-like data structure with the given length. **Initially, each element equals 0**.\n `void set(index, val)` sets the element at the given `index` to be equal to `val`.\n `int snap()` takes a snapshot of the array and returns the `snap_id`: the total number of times we called `snap()` minus `1`.\n `int get(index, snap_id)` returns the value at the given `index`, at the time we took the snapshot with the given `snap_id`\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Design"
        ],
        "examples": [
            {
                "Input": "** [\"SnapshotArray\",\"set\",\"snap\",\"set\",\"get\"]\n[[3],[0,5],[],[0,6],[0,0]]",
                "Output": "** [null,null,0,null,5]",
                "Explanation": "** \nSnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3\nsnapshotArr.set(0,5);  // Set array[0] = 5\nsnapshotArr.snap();  // Take a snapshot, return snap_id = 0\nsnapshotArr.set(0,6);\nsnapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5"
            }
        ]
    },
    {
        "Title": "Longest Chunked Palindrome Decomposition",
        "slug": "longest-chunked-palindrome-decomposition",
        "description": "You are given a string `text`. You should split it to k substrings `(subtext1, subtext2, ..., subtextk)` such that:\n\n\n `subtexti` is a **non-empty** string.\n The concatenation of all the substrings is equal to `text` (i.e., `subtext1 + subtext2 + ... + subtextk == text`).\n `subtexti == subtextk - i + 1` for all valid values of `i` (i.e., `1 <= i <= k`).\n\n\nReturn the largest possible value of `k`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Two Pointers",
            "String",
            "Dynamic Programming",
            "Greedy",
            "Rolling Hash",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "** text = \"ghiabcdefhelloadamhelloabcdefghi\"",
                "Output": "** 7",
                "Explanation": "** We can split the string on \"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)\"."
            },
            {
                "Input": "** text = \"merchant\"",
                "Output": "** 1",
                "Explanation": "** We can split the string on \"(merchant)\"."
            },
            {
                "Input": "** text = \"antaprezatepzapreanta\"",
                "Output": "** 11",
                "Explanation": "** We can split the string on \"(a)(nt)(a)(pre)(za)(tep)(za)(pre)(a)(nt)(a)\"."
            }
        ]
    },
    {
        "Title": "Article Views I",
        "slug": "article-views-i",
        "description": "Table: `Views`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| article_id    | int     |\n| author_id     | int     |\n| viewer_id     | int     |\n| view_date     | date    |\n+---------------+---------+\nThere is no primary key (column with unique values) for this table, the table may have duplicate rows.\nEach row of this table indicates that some viewer viewed an article (written by some author) on some date. \nNote that equal author_id and viewer_id indicate the same person.\n\n```\n\n\u00a0\n\n\nWrite a solution to find all the authors that viewed at least one of their own articles.\n\n\nReturn the result table sorted by `id` in ascending order.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nViews table:\n+------------+-----------+-----------+------------+\n| article_id | author_id | viewer_id | view_date  |\n+------------+-----------+-----------+------------+\n| 1          | 3         | 5         | 2019-08-01 |\n| 1          | 3         | 6         | 2019-08-02 |\n| 2          | 7         | 7         | 2019-08-01 |\n| 2          | 7         | 6         | 2019-08-02 |\n| 4          | 7         | 1         | 2019-07-22 |\n| 3          | 4         | 4         | 2019-07-21 |\n| 3          | 4         | 4         | 2019-07-21 |\n+------------+-----------+-----------+------------+",
                "Output": "** \n+------+\n| id   |\n+------+\n| 4    |\n| 7    |\n+------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Day of the Year",
        "slug": "day-of-the-year",
        "description": "Given a string `date` representing a [Gregorian calendar](https://en.wikipedia.org/wiki/Gregorian_calendar) date formatted as `YYYY-MM-DD`, return *the day number of the year*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "String"
        ],
        "examples": [
            {
                "Input": "** date = \"2019-01-09\"",
                "Output": "** 9",
                "Explanation": "** Given date is the 9th day of the year in 2019."
            },
            {
                "Input": "** date = \"2019-02-10\"",
                "Output": "** 41",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Dice Rolls With Target Sum",
        "slug": "number-of-dice-rolls-with-target-sum",
        "description": "You have `n` dice, and each dice has `k` faces numbered from `1` to `k`.\n\n\nGiven three integers `n`, `k`, and `target`, return *the number of possible ways (out of the* `kn` *total ways)* *to roll the dice, so the sum of the face-up numbers equals* `target`. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** n = 1, k = 6, target = 3",
                "Output": "** 1",
                "Explanation": "** You throw one die with 6 faces.\nThere is only one way to get a sum of 3."
            },
            {
                "Input": "** n = 2, k = 6, target = 7",
                "Output": "** 6",
                "Explanation": "** You throw two dice, each with 6 faces.\nThere are 6 ways to get a sum of 7: 1+6, 2+5, 3+4, 4+3, 5+2, 6+1."
            },
            {
                "Input": "** n = 30, k = 30, target = 500",
                "Output": "** 222616187",
                "Explanation": "** The answer must be returned modulo 109 + 7."
            }
        ]
    },
    {
        "Title": "Swap For Longest Repeated Character Substring",
        "slug": "swap-for-longest-repeated-character-substring",
        "description": "You are given a string `text`. You can swap two of the characters in the `text`.\n\n\nReturn *the length of the longest substring with repeated characters*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** text = \"ababa\"",
                "Output": "** 3",
                "Explanation": "** We can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. Then, the longest repeated character substring is \"aaa\" with length 3."
            },
            {
                "Input": "** text = \"aaabaaa\"",
                "Output": "** 6",
                "Explanation": "** Swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring \"aaaaaa\" with length 6."
            },
            {
                "Input": "** text = \"aaaaa\"",
                "Output": "** 5",
                "Explanation": "** No need to swap, longest repeated character substring is \"aaaaa\" with length is 5."
            }
        ]
    },
    {
        "Title": "Online Majority Element In Subarray",
        "slug": "online-majority-element-in-subarray",
        "description": "Design a data structure that efficiently finds the **majority element** of a given subarray.\n\n\nThe **majority element** of a subarray is an element that occurs `threshold` times or more in the subarray.\n\n\nImplementing the `MajorityChecker` class:\n\n\n `MajorityChecker(int[] arr)` Initializes the instance of the class with the given array `arr`.\n `int query(int left, int right, int threshold)` returns the element in the subarray `arr[left...right]` that occurs at least `threshold` times, or `-1` if no such element exists.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Design",
            "Binary Indexed Tree",
            "Segment Tree"
        ],
        "examples": [
            {
                "Input": "[\"MajorityChecker\", \"query\", \"query\", \"query\"]\n[[[1, 1, 2, 2, 1, 1]], [0, 5, 4], [0, 3, 3], [2, 3, 2]]",
                "Output": "[null, 1, -1, 2]",
                "Explanation": "MajorityChecker majorityChecker = new MajorityChecker([1, 1, 2, 2, 1, 1]);\nmajorityChecker.query(0, 5, 4); // return 1\nmajorityChecker.query(0, 3, 3); // return -1\nmajorityChecker.query(2, 3, 2); // return 2"
            }
        ]
    },
    {
        "Title": "Market Analysis I",
        "slug": "market-analysis-i",
        "description": "Table: `Users`\n\n\n\n```\n\n+----------------+---------+\n| Column Name    | Type    |\n+----------------+---------+\n| user_id        | int     |\n| join_date      | date    |\n| favorite_brand | varchar |\n+----------------+---------+\nuser_id is the primary key (column with unique values) of this table.\nThis table has the info of the users of an online shopping website where users can sell and buy items.\n\n```\n\n\u00a0\n\n\nTable: `Orders`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| order_id      | int     |\n| order_date    | date    |\n| item_id       | int     |\n| buyer_id      | int     |\n| seller_id     | int     |\n+---------------+---------+\norder_id is the primary key (column with unique values) of this table.\nitem_id is a foreign key (reference column) to the Items table.\nbuyer_id and seller_id are foreign keys to the Users table.\n\n```\n\n\u00a0\n\n\nTable: `Items`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| item_id       | int     |\n| item_brand    | varchar |\n+---------------+---------+\nitem_id is the primary key (column with unique values) of this table.\n\n```\n\n\u00a0\n\n\nWrite a solution\u00a0to find for each user, the join date and the number of orders they made as a buyer in `2019`.\n\n\nReturn the result table in **any order**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nUsers table:\n+---------+------------+----------------+\n| user_id | join_date  | favorite_brand |\n+---------+------------+----------------+\n| 1       | 2018-01-01 | Lenovo         |\n| 2       | 2018-02-09 | Samsung        |\n| 3       | 2018-01-19 | LG             |\n| 4       | 2018-05-21 | HP             |\n+---------+------------+----------------+\nOrders table:\n+----------+------------+---------+----------+-----------+\n| order_id | order_date | item_id | buyer_id | seller_id |\n+----------+------------+---------+----------+-----------+\n| 1        | 2019-08-01 | 4       | 1        | 2         |\n| 2        | 2018-08-02 | 2       | 1        | 3         |\n| 3        | 2019-08-03 | 3       | 2        | 3         |\n| 4        | 2018-08-04 | 1       | 4        | 2         |\n| 5        | 2018-08-04 | 1       | 3        | 4         |\n| 6        | 2019-08-05 | 2       | 2        | 4         |\n+----------+------------+---------+----------+-----------+\nItems table:\n+---------+------------+\n| item_id | item_brand |\n+---------+------------+\n| 1       | Samsung    |\n| 2       | Lenovo     |\n| 3       | LG         |\n| 4       | HP         |\n+---------+------------+",
                "Output": "** \n+-----------+------------+----------------+\n| buyer_id  | join_date  | orders_in_2019 |\n+-----------+------------+----------------+\n| 1         | 2018-01-01 | 1              |\n| 2         | 2018-02-09 | 2              |\n| 3         | 2018-01-19 | 0              |\n| 4         | 2018-05-21 | 0              |\n+-----------+------------+----------------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Words That Can Be Formed by Characters",
        "slug": "find-words-that-can-be-formed-by-characters",
        "description": "You are given an array of strings `words` and a string `chars`.\n\n\nA string is **good** if it can be formed by characters from `chars` (each character can only be used once).\n\n\nReturn *the sum of lengths of all good strings in words*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** words = [\"cat\",\"bt\",\"hat\",\"tree\"], chars = \"atach\"",
                "Output": "** 6",
                "Explanation": "** The strings that can be formed are \"cat\" and \"hat\" so the answer is 3 + 3 = 6."
            },
            {
                "Input": "** words = [\"hello\",\"world\",\"leetcode\"], chars = \"welldonehoneyr\"",
                "Output": "** 10",
                "Explanation": "** The strings that can be formed are \"hello\" and \"world\" so the answer is 5 + 5 = 10."
            }
        ]
    },
    {
        "Title": "Maximum Level Sum of a Binary Tree",
        "slug": "maximum-level-sum-of-a-binary-tree",
        "description": "Given the `root` of a binary tree, the level of its root is `1`, the level of its children is `2`, and so on.\n\n\nReturn the **smallest** level `x` such that the sum of all the values of nodes at level `x` is **maximal**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,7,0,7,-8,null,null]",
                "Output": "** 2",
                "Explanation": "** \nLevel 1 sum = 1.\nLevel 2 sum = 7 + 0 = 7.\nLevel 3 sum = 7 + -8 = -1.\nSo we return the level with the maximum sum which is level 2."
            }
        ]
    },
    {
        "Title": "As Far from Land as Possible",
        "slug": "as-far-from-land-as-possible",
        "description": "Given an `n x n` `grid`\u00a0containing only values `0` and `1`, where\u00a0`0` represents water\u00a0and `1` represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance.\u00a0If no land or water exists in the grid, return `-1`.\n\n\nThe distance used in this problem is the Manhattan distance:\u00a0the distance between two cells `(x0, y0)` and `(x1, y1)` is `|x0 - x1| + |y0 - y1|`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Breadth-First Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,0,1],[0,0,0],[1,0,1]]",
                "Output": "** 2",
                "Explanation": "** The cell (1, 1) is as far as possible from all the land with distance 2."
            },
            {
                "Input": "** grid = [[1,0,0],[0,0,0],[0,0,0]]",
                "Output": "** 4",
                "Explanation": "** The cell (2, 2) is as far as possible from all the land with distance 4."
            }
        ]
    },
    {
        "Title": "Last Substring in Lexicographical Order",
        "slug": "last-substring-in-lexicographical-order",
        "description": "Given a string `s`, return *the last substring of* `s` *in lexicographical order*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"abab\"",
                "Output": "** \"bab\"",
                "Explanation": "** The substrings are [\"a\", \"ab\", \"aba\", \"abab\", \"b\", \"ba\", \"bab\"]. The lexicographically maximum substring is \"bab\"."
            },
            {
                "Input": "** s = \"leetcode\"",
                "Output": "** \"tcode\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Product Price at a Given Date",
        "slug": "product-price-at-a-given-date",
        "description": "Table: `Products`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| product_id    | int     |\n| new_price     | int     |\n| change_date   | date    |\n+---------------+---------+\n(product_id, change_date) is the primary key (combination of columns with unique values) of this table.\nEach row of this table indicates that the price of some product was changed to a new price at some date.\n```\n\n\u00a0\n\n\nWrite a solution to find the prices of all products on `2019-08-16`. Assume the price of all products before any change is `10`.\n\n\nReturn the result table in **any order**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nProducts table:\n+------------+-----------+-------------+\n| product_id | new_price | change_date |\n+------------+-----------+-------------+\n| 1          | 20        | 2019-08-14  |\n| 2          | 50        | 2019-08-14  |\n| 1          | 30        | 2019-08-15  |\n| 1          | 35        | 2019-08-16  |\n| 2          | 65        | 2019-08-17  |\n| 3          | 20        | 2019-08-18  |\n+------------+-----------+-------------+",
                "Output": "** \n+------------+-------+\n| product_id | price |\n+------------+-------+\n| 2          | 50    |\n| 1          | 35    |\n| 3          | 10    |\n+------------+-------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Invalid Transactions",
        "slug": "invalid-transactions",
        "description": "A transaction is possibly invalid if:\n\n\n the amount exceeds `$1000`, or;\n if it occurs within (and including) `60` minutes of another transaction with the **same name** in a **different city**.\n\n\nYou are given an array of strings `transaction` where `transactions[i]` consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction.\n\n\nReturn a list of `transactions` that are possibly invalid. You may return the answer in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** transactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]",
                "Output": "** [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]",
                "Explanation": "** The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too."
            },
            {
                "Input": "** transactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"]",
                "Output": "** [\"alice,50,1200,mtv\"]",
                "Explanation": null
            },
            {
                "Input": "** transactions = [\"alice,20,800,mtv\",\"bob,50,1200,mtv\"]",
                "Output": "** [\"bob,50,1200,mtv\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Compare Strings by Frequency of the Smallest Character",
        "slug": "compare-strings-by-frequency-of-the-smallest-character",
        "description": "Let the function `f(s)` be the **frequency of the lexicographically smallest character** in a non-empty string `s`. For example, if `s = \"dcce\"` then `f(s) = 2` because the lexicographically smallest character is `'c'`, which has a frequency of 2.\n\n\nYou are given an array of strings `words` and another array of query strings `queries`. For each query `queries[i]`, count the **number of words** in `words` such that `f(queries[i])` < `f(W)` for each `W` in `words`.\n\n\nReturn *an integer array* `answer`*, where each* `answer[i]` *is the answer to the* `ith` *query*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** queries = [\"cbd\"], words = [\"zaaaz\"]",
                "Output": "** [1]",
                "Explanation": "** On the first query we have f(\"cbd\") = 1, f(\"zaaaz\") = 3 so f(\"cbd\") < f(\"zaaaz\")."
            },
            {
                "Input": "** queries = [\"bbb\",\"cc\"], words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]",
                "Output": "** [1,2]",
                "Explanation": "** On the first query only f(\"bbb\") < f(\"aaaa\"). On the second query both f(\"aaa\") and f(\"aaaa\") are both > f(\"cc\")."
            }
        ]
    },
    {
        "Title": "Remove Zero Sum Consecutive Nodes from Linked List",
        "slug": "remove-zero-sum-consecutive-nodes-from-linked-list",
        "description": "Given the `head` of a linked list, we repeatedly delete consecutive sequences of nodes that sum to `0` until there are no such sequences.\n\n\nAfter doing so, return the head of the final linked list.\u00a0 You may return any such answer.\n\n\n\u00a0\n\n\n(Note that in the examples below, all sequences are serializations of `ListNode` objects.)\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Linked List"
        ],
        "examples": [
            {
                "Input": "** head = [1,2,-3,3,1]",
                "Output": "** [3,1]\n**Note:** The answer [1,2,1] would also be accepted.",
                "Explanation": null
            },
            {
                "Input": "** head = [1,2,3,-3,4]",
                "Output": "** [1,2,4]",
                "Explanation": null
            },
            {
                "Input": "** head = [1,2,3,-3,-2]",
                "Output": "** [1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Dinner Plate Stacks",
        "slug": "dinner-plate-stacks",
        "description": "You have an infinite number of stacks arranged in a row and numbered (left to right) from `0`, each of the stacks has the same maximum capacity.\n\n\nImplement the `DinnerPlates` class:\n\n\n `DinnerPlates(int capacity)` Initializes the object with the maximum capacity of the stacks `capacity`.\n `void push(int val)` Pushes the given integer `val` into the leftmost stack with a size less than `capacity`.\n `int pop()` Returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns `-1` if all the stacks are empty.\n `int popAtStack(int index)` Returns the value at the top of the stack with the given index `index` and removes it from that stack or returns `-1` if the stack with that given index is empty.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "Stack",
            "Design",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "[\"DinnerPlates\", \"push\", \"push\", \"push\", \"push\", \"push\", \"popAtStack\", \"push\", \"push\", \"popAtStack\", \"popAtStack\", \"pop\", \"pop\", \"pop\", \"pop\", \"pop\"]\n[[2], [1], [2], [3], [4], [5], [0], [20], [21], [0], [2], [], [], [], [], []]",
                "Output": "[null, null, null, null, null, null, 2, null, null, 20, 21, 5, 4, 3, 1, -1]",
                "Explanation": "** \nDinnerPlates D = DinnerPlates(2);  // Initialize with capacity = 2\nD.push(1);\nD.push(2);\nD.push(3);\nD.push(4);\nD.push(5);         // The stacks are now:  2  4\n                                           1  3  5\n                                           \ufe48 \ufe48 \ufe48\nD.popAtStack(0);   // Returns 2.  The stacks are now:     4\n                                                       1  3  5\n                                                       \ufe48 \ufe48 \ufe48\nD.push(20);        // The stacks are now: 20  4\n                                           1  3  5\n                                           \ufe48 \ufe48 \ufe48\nD.push(21);        // The stacks are now: 20  4 21\n                                           1  3  5\n                                           \ufe48 \ufe48 \ufe48\nD.popAtStack(0);   // Returns 20.  The stacks are now:     4 21\n                                                        1  3  5\n                                                        \ufe48 \ufe48 \ufe48\nD.popAtStack(2);   // Returns 21.  The stacks are now:     4\n                                                        1  3  5\n                                                        \ufe48 \ufe48 \ufe48 \nD.pop()            // Returns 5.  The stacks are now:      4\n                                                        1  3 \n                                                        \ufe48 \ufe48  \nD.pop()            // Returns 4.  The stacks are now:   1  3 \n                                                        \ufe48 \ufe48   \nD.pop()            // Returns 3.  The stacks are now:   1 \n                                                        \ufe48   \nD.pop()            // Returns 1.  There are no stacks.\nD.pop()            // Returns -1.  There are still no stacks."
            }
        ]
    },
    {
        "Title": "Immediate Food Delivery II",
        "slug": "immediate-food-delivery-ii",
        "description": "Table: `Delivery`\n\n\n\n```\n\n+-----------------------------+---------+\n| Column Name                 | Type    |\n+-----------------------------+---------+\n| delivery_id                 | int     |\n| customer_id                 | int     |\n| order_date                  | date    |\n| customer_pref_delivery_date | date    |\n+-----------------------------+---------+\ndelivery_id is the column of unique values of this table.\nThe table holds information about food delivery to customers that make orders at some date and specify a preferred delivery date (on the same order date or after it).\n\n```\n\n\u00a0\n\n\nIf the customer's preferred delivery date is the same as the order date, then the order is called **immediate;** otherwise, it is called **scheduled**.\n\n\nThe **first order** of a customer is the order with the earliest order date that the customer made. It is guaranteed that a customer has precisely one first order.\n\n\nWrite a solution to find the percentage of immediate orders in the first orders of all customers, **rounded to 2 decimal places**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nDelivery table:\n+-------------+-------------+------------+-----------------------------+\n| delivery_id | customer_id | order_date | customer_pref_delivery_date |\n+-------------+-------------+------------+-----------------------------+\n| 1           | 1           | 2019-08-01 | 2019-08-02                  |\n| 2           | 2           | 2019-08-02 | 2019-08-02                  |\n| 3           | 1           | 2019-08-11 | 2019-08-12                  |\n| 4           | 3           | 2019-08-24 | 2019-08-24                  |\n| 5           | 3           | 2019-08-21 | 2019-08-22                  |\n| 6           | 2           | 2019-08-11 | 2019-08-13                  |\n| 7           | 4           | 2019-08-09 | 2019-08-09                  |\n+-------------+-------------+------------+-----------------------------+",
                "Output": "** \n+----------------------+\n| immediate_percentage |\n+----------------------+\n| 50.00                |\n+----------------------+",
                "Explanation": "** \nThe customer id 1 has a first order with delivery id 1 and it is scheduled.\nThe customer id 2 has a first order with delivery id 2 and it is immediate.\nThe customer id 3 has a first order with delivery id 5 and it is scheduled.\nThe customer id 4 has a first order with delivery id 7 and it is immediate.\nHence, half the customers have immediate first orders."
            }
        ]
    },
    {
        "Title": "Prime Arrangements",
        "slug": "prime-arrangements",
        "description": "Return the number of permutations of 1 to `n` so that prime numbers are at prime indices (1-indexed.)\n\n\n(Recall that an integer\u00a0is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers\u00a0both smaller than it.)\n\n\nSince the answer may be large, return the answer **modulo `10^9 + 7`**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** n = 5",
                "Output": "** 12",
                "Explanation": "** For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1."
            },
            {
                "Input": "** n = 100",
                "Output": "** 682289015",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Can Make Palindrome from Substring",
        "slug": "can-make-palindrome-from-substring",
        "description": "You are given a string `s` and array `queries` where `queries[i] = [lefti, righti, ki]`. We may rearrange the substring `s[lefti...righti]` for each query and then choose up to `ki` of them to replace with any lowercase English letter.\n\n\nIf the substring is possible to be a palindrome string after the operations above, the result of the query is `true`. Otherwise, the result is `false`.\n\n\nReturn a boolean array `answer` where `answer[i]` is the result of the `ith` query `queries[i]`.\n\n\nNote that each letter is counted individually for replacement, so if, for example `s[lefti...righti] = \"aaa\"`, and `ki = 2`, we can only replace two of the letters. Also, note that no query modifies the initial string `s`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Bit Manipulation",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** s = \"lyb\", queries = [[0,1,0],[2,2,1]]",
                "Output": "** [false,true]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Valid Words for Each Puzzle",
        "slug": "number-of-valid-words-for-each-puzzle",
        "description": "With respect to a given `puzzle` string, a `word` is *valid* if both the following conditions are satisfied:\n `word` contains the first letter of `puzzle`.\n For each letter in `word`, that letter is in `puzzle`.\n\t+ For example, if the puzzle is `\"abcdefg\"`, then valid words are `\"faced\"`, `\"cabbage\"`, and `\"baggage\"`, while\n\t+ invalid words are `\"beefed\"` (does not include `'a'`) and `\"based\"` (includes `'s'` which is not in the puzzle).\n\n\nReturn *an array* `answer`*, where* `answer[i]` *is the number of words in the given word list* `words` *that is valid with respect to the puzzle* `puzzles[i]`.\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Bit Manipulation",
            "Trie"
        ],
        "examples": [
            {
                "Input": "** words = [\"aaaa\",\"asas\",\"able\",\"ability\",\"actt\",\"actor\",\"access\"], puzzles = [\"aboveyz\",\"abrodyz\",\"abslute\",\"absoryz\",\"actresz\",\"gaswxyz\"]",
                "Output": "** [1,1,3,2,4,0]",
                "Explanation": "** \n1 valid word for \"aboveyz\" : \"aaaa\" \n1 valid word for \"abrodyz\" : \"aaaa\"\n3 valid words for \"abslute\" : \"aaaa\", \"asas\", \"able\"\n2 valid words for \"absoryz\" : \"aaaa\", \"asas\"\n4 valid words for \"actresz\" : \"aaaa\", \"asas\", \"actt\", \"access\"\nThere are no valid words for \"gaswxyz\" cause none of the words in the list contains letter 'g'."
            },
            {
                "Input": "** words = [\"apple\",\"pleas\",\"please\"], puzzles = [\"aelwxyz\",\"aelpxyz\",\"aelpsxy\",\"saelpxy\",\"xaelpsy\"]",
                "Output": "** [0,1,3,2,0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reformat Department Table",
        "slug": "reformat-department-table",
        "description": "Table: `Department`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| revenue     | int     |\n| month       | varchar |\n+-------------+---------+\nIn SQL,(id, month) is the primary key of this table.\nThe table has information about the revenue of each department per month.\nThe month has values in [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"].\n\n```\n\n\u00a0\n\n\nReformat the table such that there is a department id column and a revenue column **for each month**.\n\n\nReturn the result table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nDepartment table:\n+------+---------+-------+\n| id   | revenue | month |\n+------+---------+-------+\n| 1    | 8000    | Jan   |\n| 2    | 9000    | Jan   |\n| 3    | 10000   | Feb   |\n| 1    | 7000    | Feb   |\n| 1    | 6000    | Mar   |\n+------+---------+-------+",
                "Output": "** \n+------+-------------+-------------+-------------+-----+-------------+\n| id   | Jan_Revenue | Feb_Revenue | Mar_Revenue | ... | Dec_Revenue |\n+------+-------------+-------------+-------------+-----+-------------+\n| 1    | 8000        | 7000        | 6000        | ... | null        |\n| 2    | 9000        | null        | null        | ... | null        |\n| 3    | null        | 10000       | null        | ... | null        |\n+------+-------------+-------------+-------------+-----+-------------+",
                "Explanation": "** The revenue from Apr to Dec is null.\nNote that the result table has 13 columns (1 for the department id + 12 for the months)."
            }
        ]
    },
    {
        "Title": "Distance Between Bus Stops",
        "slug": "distance-between-bus-stops",
        "description": "A bus\u00a0has `n` stops numbered from `0` to `n - 1` that form\u00a0a circle. We know the distance between all pairs of neighboring stops where `distance[i]` is the distance between the stops number\u00a0`i` and `(i + 1) % n`.\n\n\nThe bus goes along both directions\u00a0i.e. clockwise and counterclockwise.\n\n\nReturn the shortest distance between the given\u00a0`start`\u00a0and `destination`\u00a0stops.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** distance = [1,2,3,4], start = 0, destination = 1",
                "Output": "** 1",
                "Explanation": "** Distance between 0 and 1 is 1 or 9, minimum is 1."
            },
            {
                "Input": "** distance = [1,2,3,4], start = 0, destination = 2",
                "Output": "** 3",
                "Explanation": "** Distance between 0 and 2 is 3 or 7, minimum is 3."
            },
            {
                "Input": "** distance = [1,2,3,4], start = 0, destination = 3",
                "Output": "** 4",
                "Explanation": "** Distance between 0 and 3 is 6 or 4, minimum is 4."
            }
        ]
    },
    {
        "Title": "Day of the Week",
        "slug": "day-of-the-week",
        "description": "Given a date, return the corresponding day of the week for that date.\n\n\nThe input is given as three integers representing the `day`, `month` and `year` respectively.\n\n\nReturn the answer as one of the following values\u00a0`{\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"}`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** day = 31, month = 8, year = 2019",
                "Output": "** \"Saturday\"",
                "Explanation": null
            },
            {
                "Input": "** day = 18, month = 7, year = 1999",
                "Output": "** \"Sunday\"",
                "Explanation": null
            },
            {
                "Input": "** day = 15, month = 8, year = 1993",
                "Output": "** \"Sunday\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Subarray Sum with One Deletion",
        "slug": "maximum-subarray-sum-with-one-deletion",
        "description": "Given an array of integers, return the maximum sum for a **non-empty**\u00a0subarray (contiguous elements) with at most one element deletion.\u00a0In other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the\u00a0sum of the remaining elements is maximum possible.\n\n\nNote that the subarray needs to be **non-empty** after deleting one element.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** arr = [1,-2,0,3]",
                "Output": "** 4",
                "Explanation": "** Because we can choose [1, -2, 0, 3] and drop -2, thus the subarray [1, 0, 3] becomes the maximum value."
            },
            {
                "Input": "** arr = [1,-2,-2,3]",
                "Output": "** 3",
                "Explanation": "** We just choose [3] and it's the maximum sum."
            },
            {
                "Input": "** arr = [-1,-1,-1,-1]",
                "Output": "** -1",
                "Explanation": "**\u00a0The final subarray needs to be non-empty. You can't choose [-1] and delete -1 from it, then get an empty subarray to make the sum equals to 0."
            }
        ]
    },
    {
        "Title": "Make Array Strictly Increasing",
        "slug": "make-array-strictly-increasing",
        "description": "Given two integer arrays\u00a0`arr1` and `arr2`, return the minimum number of operations (possibly zero) needed\u00a0to make `arr1` strictly increasing.\n\n\nIn one operation, you can choose two indices\u00a0`0 <=\u00a0i < arr1.length`\u00a0and\u00a0`0 <= j < arr2.length`\u00a0and do the assignment\u00a0`arr1[i] = arr2[j]`.\n\n\nIf there is no way to make\u00a0`arr1`\u00a0strictly increasing,\u00a0return\u00a0`-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Dynamic Programming",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]",
                "Output": "** 1",
                "Explanation": "** Replace 5 with 2, then arr1 = [1, 2, 3, 6, 7]."
            },
            {
                "Input": "** arr1 = [1,5,3,6,7], arr2 = [4,3,1]",
                "Output": "** 2",
                "Explanation": "** Replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7]."
            },
            {
                "Input": "** arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]",
                "Output": "** -1",
                "Explanation": "** You can't make arr1 strictly increasing."
            }
        ]
    },
    {
        "Title": "Maximum Number of Balloons",
        "slug": "maximum-number-of-balloons",
        "description": "Given a string `text`, you want to use the characters of `text` to form as many instances of the word **\"balloon\"** as possible.\n\n\nYou can use each character in `text` **at most once**. Return the maximum number of instances that can be formed.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** text = \"leetcode\"",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reverse Substrings Between Each Pair of Parentheses",
        "slug": "reverse-substrings-between-each-pair-of-parentheses",
        "description": "You are given a string `s` that consists of lower case English letters and brackets.\n\n\nReverse the strings in each pair of matching parentheses, starting from the innermost one.\n\n\nYour result should **not** contain any brackets.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** s = \"(abcd)\"",
                "Output": "** \"dcba\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"(u(love)i)\"",
                "Output": "** \"iloveu\"",
                "Explanation": "** The substring \"love\" is reversed first, then the whole string is reversed."
            },
            {
                "Input": "** s = \"(ed(et(oc))el)\"",
                "Output": "** \"leetcode\"",
                "Explanation": "** First, we reverse the substring \"oc\", then \"etco\", and finally, the whole string."
            }
        ]
    },
    {
        "Title": "K-Concatenation Maximum Sum",
        "slug": "k-concatenation-maximum-sum",
        "description": "Given an integer array `arr` and an integer `k`, modify the array by repeating it `k` times.\n\n\nFor example, if `arr = [1, 2]` and `k = 3` then the modified array will be `[1, 2, 1, 2, 1, 2]`.\n\n\nReturn the maximum sub-array sum in the modified array. Note that the length of the sub-array can be `0` and its sum in that case is `0`.\n\n\nAs the answer can be very large, return the answer **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** arr = [1,2], k = 3",
                "Output": "** 9",
                "Explanation": null
            },
            {
                "Input": "** arr = [1,-2,1], k = 5",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** arr = [-1,-2], k = 7",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Critical Connections in a Network",
        "slug": "critical-connections-in-a-network",
        "description": "There are `n` servers numbered from `0` to `n - 1` connected by undirected server-to-server `connections` forming a network where `connections[i] = [ai, bi]` represents a connection between servers `ai` and `bi`. Any server can reach other servers directly or indirectly through the network.\n\n\nA *critical connection* is a connection that, if removed, will make some servers unable to reach some other server.\n\n\nReturn all critical connections in the network in any order.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Depth-First Search",
            "Graph",
            "Biconnected Component"
        ],
        "examples": [
            {
                "Input": "** n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]",
                "Output": "** [[1,3]]",
                "Explanation": "** [[3,1]] is also accepted."
            }
        ]
    },
    {
        "Title": "Monthly Transactions I",
        "slug": "monthly-transactions-i",
        "description": "Table: `Transactions`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| country       | varchar |\n| state         | enum    |\n| amount        | int     |\n| trans_date    | date    |\n+---------------+---------+\nid is the primary key of this table.\nThe table has information about incoming transactions.\nThe state column is an enum of type [\"approved\", \"declined\"].\n\n```\n\n\u00a0\n\n\nWrite an SQL query to find for each month and country, the number of transactions and their total amount, the number of approved transactions and their total amount.\n\n\nReturn the result table in **any order**.\n\n\nThe query result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nTransactions table:\n+------+---------+----------+--------+------------+\n| id   | country | state    | amount | trans_date |\n+------+---------+----------+--------+------------+\n| 121  | US      | approved | 1000   | 2018-12-18 |\n| 122  | US      | declined | 2000   | 2018-12-19 |\n| 123  | US      | approved | 2000   | 2019-01-01 |\n| 124  | DE      | approved | 2000   | 2019-01-07 |\n+------+---------+----------+--------+------------+",
                "Output": "** \n+----------+---------+-------------+----------------+--------------------+-----------------------+\n| month    | country | trans_count | approved_count | trans_total_amount | approved_total_amount |\n+----------+---------+-------------+----------------+--------------------+-----------------------+\n| 2018-12  | US      | 2           | 1              | 3000               | 1000                  |\n| 2019-01  | US      | 1           | 1              | 2000               | 2000                  |\n| 2019-01  | DE      | 1           | 1              | 2000               | 2000                  |\n+----------+---------+-------------+----------------+--------------------+-----------------------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Fizz Buzz Multithreaded",
        "slug": "fizz-buzz-multithreaded",
        "description": "You have the four functions:\n\n\n `printFizz` that prints the word `\"fizz\"` to the console,\n `printBuzz` that prints the word `\"buzz\"` to the console,\n `printFizzBuzz` that prints the word `\"fizzbuzz\"` to the console, and\n `printNumber` that prints a given integer to the console.\n\n\nYou are given an instance of the class `FizzBuzz` that has four functions: `fizz`, `buzz`, `fizzbuzz` and `number`. The same instance of `FizzBuzz` will be passed to four different threads:\n\n\n **Thread A:** calls `fizz()` that should output the word `\"fizz\"`.\n **Thread B:** calls `buzz()` that should output the word `\"buzz\"`.\n **Thread C:** calls `fizzbuzz()` that should output the word `\"fizzbuzz\"`.\n **Thread D:** calls `number()` that should only output the integers.\n\n\nModify the given class to output the series `[1, 2, \"fizz\", 4, \"buzz\", ...]` where the `ith` token (**1-indexed**) of the series is:\n\n\n `\"fizzbuzz\"` if `i` is divisible by `3` and `5`,\n `\"fizz\"` if `i` is divisible by `3` and not `5`,\n `\"buzz\"` if `i` is divisible by `5` and not `3`, or\n `i` if `i` is not divisible by `3` or `5`.\n\n\nImplement the `FizzBuzz` class:\n\n\n `FizzBuzz(int n)` Initializes the object with the number `n` that represents the length of the sequence that should be printed.\n `void fizz(printFizz)` Calls `printFizz` to output `\"fizz\"`.\n `void buzz(printBuzz)` Calls `printBuzz` to output `\"buzz\"`.\n `void fizzbuzz(printFizzBuzz)` Calls `printFizzBuzz` to output `\"fizzbuzz\"`.\n `void number(printNumber)` Calls `printnumber` to output the numbers.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Concurrency"
        ],
        "examples": [
            {
                "Input": "** n = 15",
                "Output": "** [1,2,\"fizz\",4,\"buzz\",\"fizz\",7,8,\"fizz\",\"buzz\",11,\"fizz\",13,14,\"fizzbuzz\"]",
                "Explanation": null
            },
            {
                "Input": "** n = 5",
                "Output": "** [1,2,\"fizz\",4,\"buzz\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Absolute Difference",
        "slug": "minimum-absolute-difference",
        "description": "Given an array of **distinct** integers `arr`, find all pairs of elements with the minimum absolute difference of any two elements.\n\n\nReturn a list of pairs in ascending order(with respect to pairs), each pair `[a, b]` follows\n\n\n `a, b` are from `arr`\n `a < b`\n `b - a` equals to the minimum absolute difference of any two elements in `arr`\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** arr = [4,2,1,3]",
                "Output": "** [[1,2],[2,3],[3,4]]",
                "Explanation": "** The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order."
            },
            {
                "Input": "** arr = [1,3,6,10,15]",
                "Output": "** [[1,3]]",
                "Explanation": null
            },
            {
                "Input": "** arr = [3,8,-10,23,19,-4,-14,27]",
                "Output": "** [[-14,-10],[19,23],[23,27]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Ugly Number III",
        "slug": "ugly-number-iii",
        "description": "An **ugly number** is a positive integer that is divisible by `a`, `b`, or `c`.\n\n\nGiven four integers `n`, `a`, `b`, and `c`, return the `nth` **ugly number**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Binary Search",
            "Combinatorics",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** n = 3, a = 2, b = 3, c = 5",
                "Output": "** 4",
                "Explanation": "** The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4."
            },
            {
                "Input": "** n = 4, a = 2, b = 3, c = 4",
                "Output": "** 6",
                "Explanation": "** The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6."
            },
            {
                "Input": "** n = 5, a = 2, b = 11, c = 13",
                "Output": "** 10",
                "Explanation": "** The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5th is 10."
            }
        ]
    },
    {
        "Title": "Smallest String With Swaps",
        "slug": "smallest-string-with-swaps",
        "description": "You are given a string `s`, and an array of pairs of indices in the string\u00a0`pairs`\u00a0where\u00a0`pairs[i] =\u00a0[a, b]`\u00a0indicates 2 indices(0-indexed) of the string.\n\n\nYou can\u00a0swap the characters at any pair of indices in the given\u00a0`pairs`\u00a0**any number of times**.\n\n\nReturn the\u00a0lexicographically smallest string that `s`\u00a0can be changed to after using the swaps.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** s = \"dcab\", pairs = [[0,3],[1,2]]",
                "Output": "** \"bacd\"\n**Explaination:** \nSwap s[0] and s[3], s = \"bcad\"\nSwap s[1] and s[2], s = \"bacd\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"dcab\", pairs = [[0,3],[1,2],[0,2]]",
                "Output": "** \"abcd\"\n**Explaination:** \nSwap s[0] and s[3], s = \"bcad\"\nSwap s[0] and s[2], s = \"acbd\"\nSwap s[1] and s[2], s = \"abcd\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"cba\", pairs = [[0,1],[1,2]]",
                "Output": "** \"abc\"\n**Explaination:** \nSwap s[0] and s[1], s = \"bca\"\nSwap s[1] and s[2], s = \"bac\"\nSwap s[0] and s[1], s = \"abc\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sort Items by Groups Respecting Dependencies",
        "slug": "sort-items-by-groups-respecting-dependencies",
        "description": "There are\u00a0`n`\u00a0items each\u00a0belonging to zero or one of\u00a0`m`\u00a0groups where `group[i]`\u00a0is the group that the `i`-th item belongs to and it's equal to `-1`\u00a0if the `i`-th item belongs to no group. The items and the groups are zero indexed. A group can have no item belonging to it.\n\n\nReturn a sorted list of the items such that:\n\n\n The items that belong to the same group are next to each other in the sorted list.\n There are some\u00a0relations\u00a0between these items where\u00a0`beforeItems[i]`\u00a0is a list containing all the items that should come before the\u00a0`i`-th item in the sorted array (to the left of the\u00a0`i`-th item).\n\n\nReturn any solution if there is more than one solution and return an **empty list**\u00a0if there is no solution.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Graph",
            "Topological Sort"
        ],
        "examples": [
            {
                "Input": "** n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]]",
                "Output": "** []",
                "Explanation": "**\u00a0This is the same as example 1 except that 4 needs to be before 6 in the sorted list."
            }
        ]
    },
    {
        "Title": "Last Person to Fit in the Bus",
        "slug": "last-person-to-fit-in-the-bus",
        "description": "Table: `Queue`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| person_id   | int     |\n| person_name | varchar |\n| weight      | int     |\n| turn        | int     |\n+-------------+---------+\nperson_id column contains unique values.\nThis table has the information about all people waiting for a bus.\nThe person_id and turn columns will contain all numbers from 1 to n, where n is the number of rows in the table.\nturn determines the order of which the people will board the bus, where turn=1 denotes the first person to board and turn=n denotes the last person to board.\nweight is the weight of the person in kilograms.\n\n```\n\n\u00a0\n\n\nThere is a queue of people waiting to board a bus. However, the bus has a weight limit of `1000` **kilograms**, so there may be some people who cannot board.\n\n\nWrite a solution to find the `person_name` of the **last person** that can fit on the bus without exceeding the weight limit. The test cases are generated such that the first person does not exceed the weight limit.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nQueue table:\n+-----------+-------------+--------+------+\n| person_id | person_name | weight | turn |\n+-----------+-------------+--------+------+\n| 5         | Alice       | 250    | 1    |\n| 4         | Bob         | 175    | 5    |\n| 3         | Alex        | 350    | 2    |\n| 6         | John Cena   | 400    | 3    |\n| 1         | Winston     | 500    | 6    |\n| 2         | Marie       | 200    | 4    |\n+-----------+-------------+--------+------+",
                "Output": "** \n+-------------+\n| person_name |\n+-------------+\n| John Cena   |\n+-------------+",
                "Explanation": "** The folowing table is ordered by the turn for simplicity.\n+------+----+-----------+--------+--------------+\n| Turn | ID | Name      | Weight | Total Weight |\n+------+----+-----------+--------+--------------+\n| 1    | 5  | Alice     | 250    | 250          |\n| 2    | 3  | Alex      | 350    | 600          |\n| 3    | 6  | John Cena | 400    | 1000         | (last person to board)\n| 4    | 2  | Marie     | 200    | 1200         | (cannot board)\n| 5    | 4  | Bob       | 175    | ___          |\n| 6    | 1  | Winston   | 500    | ___          |\n+------+----+-----------+--------+--------------+"
            }
        ]
    },
    {
        "Title": "Design Skiplist",
        "slug": "design-skiplist",
        "description": "Design a **Skiplist** without using any built-in libraries.\n\n\nA **skiplist** is a data structure that takes `O(log(n))` time to add, erase and search. Comparing with treap and red-black tree which has the same function and performance, the code length of Skiplist can be comparatively short and the idea behind Skiplists is just simple linked lists.\n\n\nFor example, we have a Skiplist containing `[30,40,50,60,70,90]` and we want to add `80` and `45` into it. The Skiplist works this way:\n\n\n![](https://assets.leetcode.com/uploads/2019/09/27/1506_skiplist.gif)  \n\nArtyom Kalinin [CC BY-SA 3.0], via [Wikimedia Commons](https://commons.wikimedia.org/wiki/File:Skip_list_add_element-en.gif \"Artyom Kalinin [CC BY-SA 3.0 (https://creativecommons.org/licenses/by-sa/3.0)], via Wikimedia Commons\")\n\n\nYou can see there are many layers in the Skiplist. Each layer is a sorted linked list. With the help of the top layers, add, erase and search can be faster than `O(n)`. It can be proven that the average time complexity for each operation is `O(log(n))` and space complexity is `O(n)`.\n\n\nSee more about Skiplist: <https://en.wikipedia.org/wiki/Skip_list>\n\n\nImplement the `Skiplist` class:\n\n\n `Skiplist()` Initializes the object of the skiplist.\n `bool search(int target)` Returns `true` if the integer `target` exists in the Skiplist or `false` otherwise.\n `void add(int num)` Inserts the value `num` into the SkipList.\n `bool erase(int num)` Removes the value `num` from the Skiplist and returns `true`. If `num` does not exist in the Skiplist, do nothing and return `false`. If there exist multiple `num` values, removing any one of them is fine.\n\n\nNote that duplicates may exist in the Skiplist, your code needs to handle this situation.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Linked List",
            "Design"
        ],
        "examples": [
            {
                "Input": "[\"Skiplist\", \"add\", \"add\", \"add\", \"search\", \"add\", \"search\", \"erase\", \"erase\", \"search\"]\n[[], [1], [2], [3], [0], [4], [1], [0], [1], [1]]",
                "Output": "[null, null, null, null, false, null, true, false, true, false]",
                "Explanation": "Skiplist skiplist = new Skiplist();\nskiplist.add(1);\nskiplist.add(2);\nskiplist.add(3);\nskiplist.search(0); // return False\nskiplist.add(4);\nskiplist.search(1); // return True\nskiplist.erase(0);  // return False, 0 is not in skiplist.\nskiplist.erase(1);  // return True\nskiplist.search(1); // return False, 1 has already been erased."
            }
        ]
    },
    {
        "Title": "Unique Number of Occurrences",
        "slug": "unique-number-of-occurrences",
        "description": "Given an array of integers `arr`, return `true` *if the number of occurrences of each value in the array is **unique** or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** arr = [1,2,2,1,1,3]",
                "Output": "** true",
                "Explanation": "**\u00a0The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences."
            },
            {
                "Input": "** arr = [1,2]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** arr = [-3,0,1,-3,1,1,1,-3,10,0]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Get Equal Substrings Within Budget",
        "slug": "get-equal-substrings-within-budget",
        "description": "You are given two strings `s` and `t` of the same length and an integer `maxCost`.\n\n\nYou want to change `s` to `t`. Changing the `ith` character of `s` to `ith` character of `t` costs `|s[i] - t[i]|` (i.e., the absolute difference between the ASCII values of the characters).\n\n\nReturn *the maximum length of a substring of* `s` *that can be changed to be the same as the corresponding substring of* `t` *with a cost less than or equal to* `maxCost`. If there is no substring from `s` that can be changed to its corresponding substring from `t`, return `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Binary Search",
            "Sliding Window",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** s = \"abcd\", t = \"bcdf\", maxCost = 3",
                "Output": "** 3",
                "Explanation": "** \"abc\" of s can change to \"bcd\".\nThat costs 3, so the maximum length is 3."
            },
            {
                "Input": "** s = \"abcd\", t = \"cdef\", maxCost = 3",
                "Output": "** 1",
                "Explanation": "** Each character in s costs 2 to change to character in t,  so the maximum length is 1."
            },
            {
                "Input": "** s = \"abcd\", t = \"acde\", maxCost = 0",
                "Output": "** 1",
                "Explanation": "** You cannot make any change, so the maximum length is 1."
            }
        ]
    },
    {
        "Title": "Remove All Adjacent Duplicates in String II",
        "slug": "remove-all-adjacent-duplicates-in-string-ii",
        "description": "You are given a string `s` and an integer `k`, a `k` **duplicate removal** consists of choosing `k` adjacent and equal letters from `s` and removing them, causing the left and the right side of the deleted substring to concatenate together.\n\n\nWe repeatedly make `k` **duplicate removals** on `s` until we no longer can.\n\n\nReturn *the final string after all such duplicate removals have been made*. It is guaranteed that the answer is **unique**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** s = \"abcd\", k = 2",
                "Output": "** \"abcd\"",
                "Explanation": "** There's nothing to delete."
            },
            {
                "Input": "** s = \"deeedbbcccbdaa\", k = 3",
                "Output": "** \"aa\"",
                "Explanation": "**First delete \"eee\" and \"ccc\", get \"ddbbbdaa\"\nThen delete \"bbb\", get \"dddaa\"\nFinally delete \"ddd\", get \"aa\""
            },
            {
                "Input": "** s = \"pbbcggttciiippooaais\", k = 2",
                "Output": "** \"ps\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Moves to Reach Target with Rotations",
        "slug": "minimum-moves-to-reach-target-with-rotations",
        "description": "In an\u00a0`n*n`\u00a0grid, there is a snake that spans 2 cells and starts moving from the top left corner at `(0, 0)` and `(0, 1)`. The grid has empty cells represented by zeros and blocked cells represented by ones. The snake wants to reach the lower right corner at\u00a0`(n-1, n-2)`\u00a0and\u00a0`(n-1, n-1)`.\n\n\nIn one move the snake can:\n\n\n Move one cell to the right\u00a0if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.\n Move down one cell\u00a0if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.\n Rotate clockwise if it's in a horizontal position and the two cells under it are both empty. In that case the snake moves from\u00a0`(r, c)`\u00a0and\u00a0`(r, c+1)`\u00a0to\u00a0`(r, c)`\u00a0and\u00a0`(r+1, c)`.  \n\n![](https://assets.leetcode.com/uploads/2019/09/24/image-2.png)\n Rotate counterclockwise\u00a0if it's in a vertical position and the two cells to its right are both empty. In that case the snake moves from\u00a0`(r, c)`\u00a0and\u00a0`(r+1, c)`\u00a0to\u00a0`(r, c)`\u00a0and\u00a0`(r, c+1)`.  \n\n![](https://assets.leetcode.com/uploads/2019/09/24/image-1.png)\n\n\nReturn the minimum number of moves to reach the target.\n\n\nIf there is no way to reach the target, return\u00a0`-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Breadth-First Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[0,0,1,1,1,1],\n\u00a0              [0,0,0,0,1,1],\n\u00a0              [1,1,0,0,0,1],\n\u00a0              [1,1,1,0,0,1],\n\u00a0              [1,1,1,0,0,1],\n\u00a0              [1,1,1,0,0,0]]",
                "Output": "** 9",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Queries Quality and Percentage",
        "slug": "queries-quality-and-percentage",
        "description": "Table: `Queries`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| query_name  | varchar |\n| result      | varchar |\n| position    | int     |\n| rating      | int     |\n+-------------+---------+\nThis table may have duplicate rows.\nThis table contains information collected from some queries on a database.\nThe position column has a value from **1** to **500**.\nThe rating column has a value from **1** to **5**. Query with rating less than 3 is a poor query.\n\n```\n\n\u00a0\n\n\nWe define query `quality` as:\n\n\n\n> \n> The average of the ratio between query rating and its position.\n> \n> \n> \n\n\nWe also define `poor query percentage` as:\n\n\n\n> \n> The percentage of all queries with rating less than 3.\n> \n> \n> \n\n\nWrite a solution to find each `query_name`, the `quality` and `poor_query_percentage`.\n\n\nBoth `quality` and `poor_query_percentage` should be **rounded to 2 decimal places**.\n\n\nReturn the result table in **any order**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nQueries table:\n+------------+-------------------+----------+--------+\n| query_name | result            | position | rating |\n+------------+-------------------+----------+--------+\n| Dog        | Golden Retriever  | 1        | 5      |\n| Dog        | German Shepherd   | 2        | 5      |\n| Dog        | Mule              | 200      | 1      |\n| Cat        | Shirazi           | 5        | 2      |\n| Cat        | Siamese           | 3        | 3      |\n| Cat        | Sphynx            | 7        | 4      |\n+------------+-------------------+----------+--------+",
                "Output": "** \n+------------+---------+-----------------------+\n| query_name | quality | poor_query_percentage |\n+------------+---------+-----------------------+\n| Dog        | 2.50    | 33.33                 |\n| Cat        | 0.66    | 33.33                 |\n+------------+---------+-----------------------+",
                "Explanation": "** \nDog queries quality is ((5 / 1) + (5 / 2) + (1 / 200)) / 3 = 2.50\nDog queries poor_ query_percentage is (1 / 3) * 100 = 33.33\n\nCat queries quality equals ((2 / 5) + (3 / 3) + (4 / 7)) / 3 = 0.66\nCat queries poor_ query_percentage is (1 / 3) * 100 = 33.33"
            }
        ]
    },
    {
        "Title": "Minimum Cost to Move Chips to The Same Position",
        "slug": "minimum-cost-to-move-chips-to-the-same-position",
        "description": "We have `n` chips, where the position of the `ith` chip is `position[i]`.\n\n\nWe need to move all the chips to **the same position**. In one step, we can change the position of the `ith` chip from `position[i]` to:\n\n\n `position[i] + 2` or `position[i] - 2` with `cost = 0`.\n `position[i] + 1` or `position[i] - 1` with `cost = 1`.\n\n\nReturn *the minimum cost* needed to move all the chips to the same position.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** position = [1,2,3]",
                "Output": "** 1",
                "Explanation": "** First step: Move the chip at position 3 to position 1 with cost = 0.\nSecond step: Move the chip at position 2 to position 1 with cost = 1.\nTotal cost is 1."
            },
            {
                "Input": "** position = [2,2,2,3,3]",
                "Output": "** 2",
                "Explanation": "** We can move the two chips at position  3 to position 2. Each move has cost = 1. The total cost = 2."
            }
        ]
    },
    {
        "Title": "Longest Arithmetic Subsequence of Given Difference",
        "slug": "longest-arithmetic-subsequence-of-given-difference",
        "description": "Given an integer array `arr` and an integer `difference`, return the length of the longest subsequence in `arr` which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals `difference`.\n\n\nA **subsequence** is a sequence that can be derived from `arr` by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** arr = [1,2,3,4], difference = 1",
                "Output": "** 4",
                "Explanation": "** The longest arithmetic subsequence is [1,2,3,4]."
            },
            {
                "Input": "** arr = [1,3,5,7], difference = 1",
                "Output": "** 1",
                "Explanation": "** The longest arithmetic subsequence is any single element."
            },
            {
                "Input": "** arr = [1,5,7,8,5,3,4,2,1], difference = -2",
                "Output": "** 4",
                "Explanation": "** The longest arithmetic subsequence is [7,5,3,1]."
            }
        ]
    },
    {
        "Title": "Path with Maximum Gold",
        "slug": "path-with-maximum-gold",
        "description": "In a gold mine `grid` of size `m x n`, each cell in this mine has an integer representing the amount of gold in that cell, `0` if it is empty.\n\n\nReturn the maximum amount of gold you can collect under the conditions:\n\n\n Every time you are located in a cell you will collect all the gold in that cell.\n From your position, you can walk one step to the left, right, up, or down.\n You can't visit the same cell more than once.\n Never visit a cell with `0` gold.\n You can start and stop collecting gold from **any** position in the grid that has some gold.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Backtracking",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[0,6,0],[5,8,7],[0,9,0]]",
                "Output": "** 24",
                "Explanation": "**\n[[0,6,0],\n [5,8,7],\n [0,9,0]]\nPath to get the maximum gold, 9 -> 8 -> 7."
            },
            {
                "Input": "** grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]",
                "Output": "** 28",
                "Explanation": "**\n[[1,0,7],\n [2,0,6],\n [3,4,5],\n [0,3,0],\n [9,0,20]]\nPath to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7."
            }
        ]
    },
    {
        "Title": "Count Vowels Permutation",
        "slug": "count-vowels-permutation",
        "description": "Given an integer `n`, your task is to count how many strings of length `n` can be formed under the following rules:\n\n\n Each character is a lower case vowel\u00a0(`'a'`, `'e'`, `'i'`, `'o'`, `'u'`)\n Each vowel\u00a0`'a'` may only be followed by an `'e'`.\n Each vowel\u00a0`'e'` may only be followed by an `'a'`\u00a0or an `'i'`.\n Each vowel\u00a0`'i'` **may not** be followed by another `'i'`.\n Each vowel\u00a0`'o'` may only be followed by an `'i'` or a\u00a0`'u'`.\n Each vowel\u00a0`'u'` may only be followed by an `'a'`.\n\n\nSince the answer\u00a0may be too large,\u00a0return it modulo\u00a0`10^9 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** 5",
                "Explanation": "** All possible strings are: \"a\", \"e\", \"i\" , \"o\" and \"u\"."
            },
            {
                "Input": "** n = 2",
                "Output": "** 10",
                "Explanation": "** All possible strings are: \"ae\", \"ea\", \"ei\", \"ia\", \"ie\", \"io\", \"iu\", \"oi\", \"ou\" and \"ua\"."
            },
            {
                "Input": "** n = 5",
                "Output": "** 68",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Split a String in Balanced Strings",
        "slug": "split-a-string-in-balanced-strings",
        "description": "Balanced** strings are those that have an equal quantity of `'L'` and `'R'` characters.\n\n\nGiven a **balanced** string `s`, split it into some number of substrings such that:\n\n\n Each substring is balanced.\n\n\nReturn *the **maximum** number of balanced strings you can obtain.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Greedy",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** s = \"RLRRLLRLRL\"",
                "Output": "** 4",
                "Explanation": "** s can be split into \"RL\", \"RRLL\", \"RL\", \"RL\", each substring contains same number of 'L' and 'R'."
            },
            {
                "Input": "** s = \"RLRRRLLRLL\"",
                "Output": "** 2",
                "Explanation": "** s can be split into \"RL\", \"RRRLLRLL\", each substring contains same number of 'L' and 'R'.\nNote that s cannot be split into \"RL\", \"RR\", \"RL\", \"LR\", \"LL\", because the 2nd and 5th substrings are not balanced."
            },
            {
                "Input": "** s = \"LLLLRRRR\"",
                "Output": "** 1",
                "Explanation": "** s can be split into \"LLLLRRRR\"."
            }
        ]
    },
    {
        "Title": "Queens That Can Attack the King",
        "slug": "queens-that-can-attack-the-king",
        "description": "On a **0-indexed** `8 x 8` chessboard, there can be multiple black queens and one white king.\n\n\nYou are given a 2D integer array `queens` where `queens[i] = [xQueeni, yQueeni]` represents the position of the `ith` black queen on the chessboard. You are also given an integer array `king` of length `2` where `king = [xKing, yKing]` represents the position of the white king.\n\n\nReturn *the coordinates of the black queens that can directly attack the king*. You may return the answer in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]",
                "Output": "** [[0,1],[1,0],[3,3]]",
                "Explanation": "** The diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king (i.e., marked with red dashes)."
            },
            {
                "Input": "** queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]",
                "Output": "** [[2,2],[3,4],[4,4]]",
                "Explanation": "** The diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king (i.e., marked with red dashes)."
            }
        ]
    },
    {
        "Title": "Dice Roll Simulation",
        "slug": "dice-roll-simulation",
        "description": "A die simulator generates a random number from `1` to `6` for each roll. You introduced a constraint to the generator such that it cannot roll the number `i` more than `rollMax[i]` (**1-indexed**) consecutive times.\n\n\nGiven an array of integers `rollMax` and an integer `n`, return *the number of distinct sequences that can be obtained with exact* `n` *rolls*. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n\nTwo sequences are considered different if at least one element differs from each other.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** n = 2, rollMax = [1,1,2,2,2,3]",
                "Output": "** 34",
                "Explanation": "** There will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34."
            },
            {
                "Input": "** n = 2, rollMax = [1,1,1,1,1,1]",
                "Output": "** 30",
                "Explanation": null
            },
            {
                "Input": "** n = 3, rollMax = [1,1,1,2,2,3]",
                "Output": "** 181",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Equal Frequency",
        "slug": "maximum-equal-frequency",
        "description": "Given an array `nums` of positive integers, return the longest possible length of an array prefix of `nums`, such that it is possible to remove **exactly one** element from this prefix so that every number that has appeared in it will have the same number of occurrences.\n\n\nIf after removing one element there are no remaining elements, it's still considered that every appeared number has the same number of ocurrences (0).\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** nums = [2,2,1,1,5,3,3,5]",
                "Output": "** 7",
                "Explanation": "** For the subarray [2,2,1,1,5,3,3] of length 7, if we remove nums[4] = 5, we will get [2,2,1,1,3,3], so that each number will appear exactly twice."
            },
            {
                "Input": "** nums = [1,1,1,2,2,2,3,3,3,4,4,4,5]",
                "Output": "** 13",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "The Dining Philosophers",
        "slug": "the-dining-philosophers",
        "description": "Five silent philosophers\u00a0sit at a round table with bowls of spaghetti. Forks are placed between each pair of adjacent philosophers.\n\n\nEach philosopher must alternately think and eat. However, a philosopher can only eat spaghetti when they have both left and right forks. Each fork can be held by only one philosopher and so a philosopher can use the fork only if it is not being used by another philosopher. After an individual philosopher finishes eating, they need to put down both forks so that the forks become available to others. A philosopher can take the fork on their right or the one on their left as they become available, but cannot start eating before getting both forks.\n\n\nEating is not limited by the remaining amounts of spaghetti or stomach space; an infinite supply and an infinite demand are assumed.\n\n\nDesign a discipline of behaviour (a concurrent algorithm) such that no philosopher will starve;\u00a0*i.e.*, each can forever continue to alternate between eating and thinking, assuming that no philosopher can know when others may want to eat or think.\n\n\n![](https://assets.leetcode.com/uploads/2019/09/24/an_illustration_of_the_dining_philosophers_problem.png)\n\n\nThe problem statement and the image above are taken from [wikipedia.org](https://en.wikipedia.org/wiki/Dining_philosophers_problem)\n\n\n\u00a0\n\n\nThe philosophers' ids are numbered from **0** to **4** in a **clockwise** order. Implement the function\u00a0`void wantsToEat(philosopher, pickLeftFork, pickRightFork, eat, putLeftFork, putRightFork)` where:\n\n\n `philosopher`\u00a0is the id of the philosopher who wants to eat.\n `pickLeftFork`\u00a0and\u00a0`pickRightFork`\u00a0are functions you can call to pick the corresponding forks of that philosopher.\n `eat`\u00a0is a function you can call to let the philosopher eat once he has picked\u00a0both forks.\n `putLeftFork`\u00a0and\u00a0`putRightFork`\u00a0are functions you can call to put down the corresponding forks of that philosopher.\n The philosophers are assumed to be thinking as long as they are not asking to eat (the function is not being called with their number).\n\n\nFive threads, each representing a philosopher, will\u00a0simultaneously use one object of your class to simulate the process. The function may be called for the same philosopher more than once, even before the last call ends.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Concurrency"
        ],
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** [[4,2,1],[4,1,1],[0,1,1],[2,2,1],[2,1,1],[2,0,3],[2,1,2],[2,2,2],[4,0,3],[4,1,2],[0,2,1],[4,2,2],[3,2,1],[3,1,1],[0,0,3],[0,1,2],[0,2,2],[1,2,1],[1,1,1],[3,0,3],[3,1,2],[3,2,2],[1,0,3],[1,1,2],[1,2,2]]",
                "Explanation": "**\nn is the number of times each philosopher will call the function.\nThe output array describes the calls you made to the functions controlling the forks and the eat function, its format is:\noutput[i] = [a, b, c] (three integers)\n- a is the id of a philosopher.\n- b specifies the fork: {1 : left, 2 : right}.\n- c specifies the operation: {1 : pick, 2 : put, 3 : eat}."
            }
        ]
    },
    {
        "Title": "Airplane Seat Assignment Probability",
        "slug": "airplane-seat-assignment-probability",
        "description": "`n` passengers board an airplane with exactly `n` seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of the passengers will:\n\n\n Take their own seat if it is still available, and\n Pick other seats randomly when they find their seat occupied\n\n\nReturn *the probability that the* `nth` *person gets his own seat*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Brainteaser",
            "Probability and Statistics"
        ],
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** 1.00000",
                "Explanation": "** The first person can only get the first seat."
            },
            {
                "Input": "** n = 2",
                "Output": "** 0.50000",
                "Explanation": "** The second person has a probability of 0.5 to get the second seat (when first person gets the first seat)."
            }
        ]
    },
    {
        "Title": "Check If It Is a Straight Line",
        "slug": "check-if-it-is-a-straight-line",
        "description": "You are given an array\u00a0`coordinates`, `coordinates[i] = [x, y]`, where `[x, y]` represents the coordinate of a point. Check if these points\u00a0make a straight line in the XY plane.\n\n\n\u00a0\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Geometry"
        ],
        "examples": [
            {
                "Input": "** coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove Sub-Folders from the Filesystem",
        "slug": "remove-sub-folders-from-the-filesystem",
        "description": "Given a list of folders `folder`, return *the folders after removing all **sub-folders** in those folders*. You may return the answer in **any order**.\n\n\nIf a `folder[i]` is located within another `folder[j]`, it is called a **sub-folder** of it.\n\n\nThe format of a path is one or more concatenated strings of the form: `'/'` followed by one or more lowercase English letters.\n\n\n For example, `\"/leetcode\"` and `\"/leetcode/problems\"` are valid paths while an empty string and `\"/\"` are not.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Depth-First Search",
            "Trie"
        ],
        "examples": [
            {
                "Input": "** folder = [\"/a\",\"/a/b\",\"/c/d\",\"/c/d/e\",\"/c/f\"]",
                "Output": "** [\"/a\",\"/c/d\",\"/c/f\"]",
                "Explanation": "** Folders \"/a/b\" is a subfolder of \"/a\" and \"/c/d/e\" is inside of folder \"/c/d\" in our filesystem."
            },
            {
                "Input": "** folder = [\"/a\",\"/a/b/c\",\"/a/b/d\"]",
                "Output": "** [\"/a\"]",
                "Explanation": "** Folders \"/a/b/c\" and \"/a/b/d\" will be removed because they are subfolders of \"/a\"."
            },
            {
                "Input": "** folder = [\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]",
                "Output": "** [\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Replace the Substring for Balanced String",
        "slug": "replace-the-substring-for-balanced-string",
        "description": "You are given a string s of length `n` containing only four kinds of characters: `'Q'`, `'W'`, `'E'`, and `'R'`.\n\n\nA string is said to be **balanced**if each of its characters appears `n / 4` times where `n` is the length of the string.\n\n\nReturn *the minimum length of the substring that can be replaced with **any** other string of the same length to make* `s` ***balanced***. If s is already **balanced**, return `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** s = \"QWER\"",
                "Output": "** 0",
                "Explanation": "** s is already balanced."
            },
            {
                "Input": "** s = \"QQWE\"",
                "Output": "** 1",
                "Explanation": "** We need to replace a 'Q' to 'R', so that \"RQWE\" (or \"QRWE\") is balanced."
            },
            {
                "Input": "** s = \"QQQW\"",
                "Output": "** 2",
                "Explanation": "** We can replace the first \"QQ\" to \"ER\"."
            }
        ]
    },
    {
        "Title": "Find Positive Integer Solution for a Given Equation",
        "slug": "find-positive-integer-solution-for-a-given-equation",
        "description": "Given a callable function `f(x, y)` **with a hidden formula** and a value `z`, reverse engineer the formula and return *all positive integer pairs* `x` *and* `y` *where* `f(x,y) == z`. You may return the pairs in any order.\n\n\nWhile the exact formula is hidden, the function is monotonically increasing, i.e.:\n\n\n `f(x, y) < f(x + 1, y)`\n `f(x, y) < f(x, y + 1)`\n\n\nThe function interface is defined like this:\n\n\n\n```\n\ninterface CustomFunction {\npublic:\n  // Returns some positive integer f(x, y) for two positive integers x and y based on a formula.\n  int f(int x, int y);\n};\n\n```\n\nWe will judge your solution as follows:\n\n\n The judge has a list of `9` hidden implementations of `CustomFunction`, along with a way to generate an **answer key** of all valid pairs for a specific `z`.\n The judge will receive two inputs: a `function_id` (to determine which implementation to test your code with), and the target `z`.\n The judge will call your `findSolution` and compare your results with the **answer key**.\n If your results match the **answer key**, your solution will be `Accepted`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Two Pointers",
            "Binary Search",
            "Interactive"
        ],
        "examples": [
            {
                "Input": "** function_id = 1, z = 5",
                "Output": "** [[1,4],[2,3],[3,2],[4,1]]",
                "Explanation": "** The hidden formula for function_id = 1 is f(x, y) = x + y.\nThe following positive integer values of x and y make f(x, y) equal to 5:\nx=1, y=4 -> f(1, 4) = 1 + 4 = 5.\nx=2, y=3 -> f(2, 3) = 2 + 3 = 5.\nx=3, y=2 -> f(3, 2) = 3 + 2 = 5.\nx=4, y=1 -> f(4, 1) = 4 + 1 = 5."
            },
            {
                "Input": "** function_id = 2, z = 5",
                "Output": "** [[1,5],[5,1]]",
                "Explanation": "** The hidden formula for function_id = 2 is f(x, y) = x * y.\nThe following positive integer values of x and y make f(x, y) equal to 5:\nx=1, y=5 -> f(1, 5) = 1 * 5 = 5.\nx=5, y=1 -> f(5, 1) = 5 * 1 = 5."
            }
        ]
    },
    {
        "Title": "Circular Permutation in Binary Representation",
        "slug": "circular-permutation-in-binary-representation",
        "description": "Given 2 integers `n` and `start`. Your task is return **any** permutation `p`\u00a0of `(0,1,2.....,2^n -1)` such that :\n\n\n `p[0] = start`\n `p[i]` and `p[i+1]`\u00a0differ by only one bit in their binary representation.\n `p[0]` and `p[2^n -1]`\u00a0must also differ by only one bit in their binary representation.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Backtracking",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** n = 2, start = 3",
                "Output": "** [3,2,0,1]",
                "Explanation": "** The binary representation of the permutation is (11,10,00,01). \r\nAll the adjacent element differ by one bit. Another valid permutation is [3,1,0,2]"
            },
            {
                "Input": "** n = 3, start = 2",
                "Output": "** [2,6,7,5,4,0,1,3]",
                "Explanation": "** The binary representation of the permutation is (010,110,111,101,100,000,001,011)."
            }
        ]
    },
    {
        "Title": "Maximum Length of a Concatenated String with Unique Characters",
        "slug": "maximum-length-of-a-concatenated-string-with-unique-characters",
        "description": "You are given an array of strings `arr`. A string `s` is formed by the **concatenation** of a **subsequence** of `arr` that has **unique characters**.\n\n\nReturn *the **maximum** possible length* of `s`.\n\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Backtracking",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** arr = [\"un\",\"iq\",\"ue\"]",
                "Output": "** 4",
                "Explanation": "** All the valid concatenations are:\n- \"\"\n- \"un\"\n- \"iq\"\n- \"ue\"\n- \"uniq\" (\"un\" + \"iq\")\n- \"ique\" (\"iq\" + \"ue\")\nMaximum length is 4."
            },
            {
                "Input": "** arr = [\"cha\",\"r\",\"act\",\"ers\"]",
                "Output": "** 6",
                "Explanation": "** Possible longest valid concatenations are \"chaers\" (\"cha\" + \"ers\") and \"acters\" (\"act\" + \"ers\")."
            },
            {
                "Input": "** arr = [\"abcdefghijklmnopqrstuvwxyz\"]",
                "Output": "** 26",
                "Explanation": "** The only string in arr has all 26 characters."
            }
        ]
    },
    {
        "Title": "Tiling a Rectangle with the Fewest Squares",
        "slug": "tiling-a-rectangle-with-the-fewest-squares",
        "description": "Given a rectangle of size `n` x `m`, return *the minimum number of integer-sided squares that tile the rectangle*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** n = 2, m = 3",
                "Output": "** 3",
                "Explanation": "** 3 squares are necessary to cover the rectangle.\n2 (squares of 1x1)\n1 (square of 2x2)"
            },
            {
                "Input": "** n = 5, m = 8",
                "Output": "** 5",
                "Explanation": null
            },
            {
                "Input": "** n = 11, m = 13",
                "Output": "** 6",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Swaps to Make Strings Equal",
        "slug": "minimum-swaps-to-make-strings-equal",
        "description": "You are given two strings `s1` and `s2` of equal length consisting of letters `\"x\"` and `\"y\"` **only**. Your task is to make these two strings equal to each other. You can swap any two characters that belong to **different** strings, which means: swap `s1[i]` and `s2[j]`.\n\n\nReturn the minimum number of swaps required to make `s1` and `s2` equal, or return `-1` if it is impossible to do so.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s1 = \"xx\", s2 = \"yy\"",
                "Output": "** 1",
                "Explanation": "** Swap s1[0] and s2[1], s1 = \"yx\", s2 = \"yx\"."
            },
            {
                "Input": "** s1 = \"xy\", s2 = \"yx\"",
                "Output": "** 2",
                "Explanation": "** Swap s1[0] and s2[0], s1 = \"yy\", s2 = \"xx\".\nSwap s1[0] and s2[1], s1 = \"xy\", s2 = \"xy\".\nNote that you cannot swap s1[0] and s1[1] to make s1 equal to \"yx\", cause we can only swap chars in different strings."
            },
            {
                "Input": "** s1 = \"xx\", s2 = \"xy\"",
                "Output": "** -1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count Number of Nice Subarrays",
        "slug": "count-number-of-nice-subarrays",
        "description": "Given an array of integers `nums` and an integer `k`. A continuous subarray is called **nice** if there are `k` odd numbers on it.\n\n\nReturn *the number of **nice** sub-arrays*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [1,1,2,1,1], k = 3",
                "Output": "** 2",
                "Explanation": "** The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1]."
            },
            {
                "Input": "** nums = [2,4,6], k = 1",
                "Output": "** 0",
                "Explanation": "** There is no odd numbers in the array."
            },
            {
                "Input": "** nums = [2,2,2,1,2,2,1,2,2,2], k = 2",
                "Output": "** 16",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Remove to Make Valid Parentheses",
        "slug": "minimum-remove-to-make-valid-parentheses",
        "description": "Given a string s of `'('` , `')'` and lowercase English characters.\n\n\nYour task is to remove the minimum number of parentheses ( `'('` or `')'`, in any positions ) so that the resulting *parentheses string* is valid and return **any** valid string.\n\n\nFormally, a *parentheses string* is valid if and only if:\n\n\n It is the empty string, contains only lowercase characters, or\n It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid strings, or\n It can be written as `(A)`, where `A` is a valid string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** s = \"lee(t(c)o)de)\"",
                "Output": "** \"lee(t(c)o)de\"",
                "Explanation": "** \"lee(t(co)de)\" , \"lee(t(c)ode)\" would also be accepted."
            },
            {
                "Input": "** s = \"a)b(c)d\"",
                "Output": "** \"ab(c)d\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"))((\"",
                "Output": "** \"\"",
                "Explanation": "** An empty string is also valid."
            }
        ]
    },
    {
        "Title": "Check If It Is a Good Array",
        "slug": "check-if-it-is-a-good-array",
        "description": "Given an array `nums` of\u00a0positive integers. Your task is to select some subset of `nums`, multiply each element by an integer and add all these numbers.\u00a0The array is said to be\u00a0**good**if you can obtain a sum of\u00a0`1`\u00a0from the array by any possible subset and multiplicand.\n\n\nReturn\u00a0`True`\u00a0if the array is **good**otherwise\u00a0return\u00a0`False`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [12,5,7,23]",
                "Output": "** true",
                "Explanation": "** Pick numbers 5 and 7.\n5*3 + 7*(-2) = 1"
            },
            {
                "Input": "** nums = [29,6,10]",
                "Output": "** true",
                "Explanation": "** Pick numbers 29, 6 and 10.\n29*1 + 6*(-3) + 10*(-1) = 1"
            },
            {
                "Input": "** nums = [3,6]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Average Selling Price",
        "slug": "average-selling-price",
        "description": "Table: `Prices`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| product_id    | int     |\n| start_date    | date    |\n| end_date      | date    |\n| price         | int     |\n+---------------+---------+\n(product_id, start_date, end_date) is the primary key (combination of columns with unique values) for this table.\nEach row of this table indicates the price of the product_id in the period from start_date to end_date.\nFor each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id.\n\n```\n\n\u00a0\n\n\nTable: `UnitsSold`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| product_id    | int     |\n| purchase_date | date    |\n| units         | int     |\n+---------------+---------+\nThis table may contain duplicate rows.\nEach row of this table indicates the date, units, and product_id of each product sold. \n\n```\n\n\u00a0\n\n\nWrite a solution to find the average selling price for each product. `average_price` should be **rounded to 2 decimal places**.\n\n\nReturn the result table in **any order**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nPrices table:\n+------------+------------+------------+--------+\n| product_id | start_date | end_date   | price  |\n+------------+------------+------------+--------+\n| 1          | 2019-02-17 | 2019-02-28 | 5      |\n| 1          | 2019-03-01 | 2019-03-22 | 20     |\n| 2          | 2019-02-01 | 2019-02-20 | 15     |\n| 2          | 2019-02-21 | 2019-03-31 | 30     |\n+------------+------------+------------+--------+\nUnitsSold table:\n+------------+---------------+-------+\n| product_id | purchase_date | units |\n+------------+---------------+-------+\n| 1          | 2019-02-25    | 100   |\n| 1          | 2019-03-01    | 15    |\n| 2          | 2019-02-10    | 200   |\n| 2          | 2019-03-22    | 30    |\n+------------+---------------+-------+",
                "Output": "** \n+------------+---------------+\n| product_id | average_price |\n+------------+---------------+\n| 1          | 6.96          |\n| 2          | 16.96         |\n+------------+---------------+",
                "Explanation": "** \nAverage selling price = Total Price of Product / Number of products sold.\nAverage selling price for product 1 = ((100 * 5) + (15 * 20)) / 115 = 6.96\nAverage selling price for product 2 = ((200 * 15) + (30 * 30)) / 230 = 16.96"
            }
        ]
    },
    {
        "Title": "Cells with Odd Values in a Matrix",
        "slug": "cells-with-odd-values-in-a-matrix",
        "description": "There is an `m x n` matrix that is initialized to all `0`'s. There is also a 2D array `indices` where each `indices[i] = [ri, ci]` represents a **0-indexed location** to perform some increment operations on the matrix.\n\n\nFor each location `indices[i]`, do **both** of the following:\n\n\n1. Increment **all** the cells on row `ri`.\n2. Increment **all** the cells on column `ci`.\n\n\nGiven `m`, `n`, and `indices`, return *the **number of odd-valued cells** in the matrix after applying the increment to all locations in* `indices`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** m = 2, n = 3, indices = [[0,1],[1,1]]",
                "Output": "** 6",
                "Explanation": "** Initial matrix = [[0,0,0],[0,0,0]].\nAfter applying first increment it becomes [[1,2,1],[0,1,0]].\nThe final matrix is [[1,3,1],[1,3,1]], which contains 6 odd numbers."
            },
            {
                "Input": "** m = 2, n = 2, indices = [[1,1],[0,0]]",
                "Output": "** 0",
                "Explanation": "** Final matrix = [[2,2],[2,2]]. There are no odd numbers in the final matrix."
            }
        ]
    },
    {
        "Title": "Reconstruct a 2-Row Binary Matrix",
        "slug": "reconstruct-a-2-row-binary-matrix",
        "description": "Given the following details of a matrix with `n` columns and `2` rows :\n\n\n The matrix is a binary matrix, which means each element in the matrix can be `0` or `1`.\n The sum of elements of the 0-th(upper) row is given as `upper`.\n The sum of elements of the 1-st(lower) row is given as `lower`.\n The sum of elements in the i-th column(0-indexed) is `colsum[i]`, where `colsum` is given as an integer array with length `n`.\n\n\nYour task is to reconstruct the matrix with `upper`, `lower` and `colsum`.\n\n\nReturn it as a 2-D integer array.\n\n\nIf there are more than one valid solution, any of them will be accepted.\n\n\nIf no valid solution exists, return an empty 2-D array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** upper = 2, lower = 1, colsum = [1,1,1]",
                "Output": "** [[1,1,0],[0,0,1]]",
                "Explanation": "** [[1,0,1],[0,1,0]], and [[0,1,1],[1,0,0]] are also correct answers."
            },
            {
                "Input": "** upper = 2, lower = 3, colsum = [2,2,1,1]",
                "Output": "** []",
                "Explanation": null
            },
            {
                "Input": "** upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1]",
                "Output": "** [[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Closed Islands",
        "slug": "number-of-closed-islands",
        "description": "Given a 2D\u00a0`grid` consists of `0s` (land)\u00a0and `1s` (water).\u00a0 An *island* is a maximal 4-directionally connected group of `0s` and a *closed island*\u00a0is an island **totally**\u00a0(all left, top, right, bottom) surrounded by `1s.`\n\n\nReturn the number of *closed islands*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]",
                "Output": "** 2",
                "Explanation": "** \nIslands in gray are closed because they are completely surrounded by water (group of 1s)."
            },
            {
                "Input": "** grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Score Words Formed by Letters",
        "slug": "maximum-score-words-formed-by-letters",
        "description": "Given a list of `words`, list of\u00a0 single\u00a0`letters` (might be repeating)\u00a0and `score`\u00a0of every character.\n\n\nReturn the maximum score of **any** valid set of words formed by using the given letters (`words[i]` cannot be used two\u00a0or more times).\n\n\nIt is not necessary to use all characters in `letters` and each letter can only be used once. Score of letters\u00a0`'a'`, `'b'`, `'c'`, ... ,`'z'` is given by\u00a0`score[0]`, `score[1]`, ... , `score[25]` respectively.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "String",
            "Dynamic Programming",
            "Backtracking",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** words = [\"dog\",\"cat\",\"dad\",\"good\"], letters = [\"a\",\"a\",\"c\",\"d\",\"d\",\"d\",\"g\",\"o\",\"o\"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]",
                "Output": "** 23",
                "Explanation": "**\nScore  a=1, c=9, d=5, g=3, o=2\nGiven letters, we can form the words \"dad\" (5+1+5) and \"good\" (3+2+2+5) with a score of 23.\nWords \"dad\" and \"dog\" only get a score of 21."
            },
            {
                "Input": "** words = [\"xxxz\",\"ax\",\"bx\",\"cx\"], letters = [\"z\",\"a\",\"b\",\"c\",\"x\",\"x\",\"x\"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]",
                "Output": "** 27",
                "Explanation": "**\nScore  a=4, b=4, c=4, x=5, z=10\nGiven letters, we can form the words \"ax\" (4+5), \"bx\" (4+5) and \"cx\" (4+5) with a score of 27.\nWord \"xxxz\" only get a score of 25."
            },
            {
                "Input": "** words = [\"leetcode\"], letters = [\"l\",\"e\",\"t\",\"c\",\"o\",\"d\"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]",
                "Output": "** 0",
                "Explanation": "**\nLetter \"e\" can only be used once."
            }
        ]
    },
    {
        "Title": "Shift 2D Grid",
        "slug": "shift-2d-grid",
        "description": "Given a 2D `grid` of size `m x n`\u00a0and an integer `k`. You need to shift the `grid`\u00a0`k` times.\n\n\nIn one shift operation:\n\n\n Element at `grid[i][j]` moves to `grid[i][j + 1]`.\n Element at `grid[i][n - 1]` moves to `grid[i + 1][0]`.\n Element at `grid[m\u00a0- 1][n - 1]` moves to `grid[0][0]`.\n\n\nReturn the *2D grid* after applying shift operation `k` times.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1",
                "Output": "** [[9,1,2],[3,4,5],[6,7,8]]",
                "Explanation": null
            },
            {
                "Input": "** grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4",
                "Output": "** [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Elements in a Contaminated Binary Tree",
        "slug": "find-elements-in-a-contaminated-binary-tree",
        "description": "Given a binary tree with the following rules:\n\n\n1. `root.val == 0`\n2. If `treeNode.val == x` and `treeNode.left != null`, then `treeNode.left.val == 2 * x + 1`\n3. If `treeNode.val == x` and `treeNode.right != null`, then `treeNode.right.val == 2 * x + 2`\n\n\nNow the binary tree is contaminated, which means all `treeNode.val` have been changed to `-1`.\n\n\nImplement the `FindElements` class:\n\n\n `FindElements(TreeNode* root)` Initializes the object with a contaminated binary tree and recovers it.\n `bool find(int target)` Returns `true` if the `target` value exists in the recovered binary tree.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Design",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "[\"FindElements\",\"find\",\"find\"]\n[[[-1,null,-1]],[1],[2]]",
                "Output": "[null,false,true]",
                "Explanation": "FindElements findElements = new FindElements([-1,null,-1]); \nfindElements.find(1); // return False \nfindElements.find(2); // return True"
            },
            {
                "Input": "[\"FindElements\",\"find\",\"find\",\"find\"]\n[[[-1,-1,-1,-1,-1]],[1],[3],[5]]",
                "Output": "[null,true,true,false]",
                "Explanation": "FindElements findElements = new FindElements([-1,-1,-1,-1,-1]);\nfindElements.find(1); // return True\nfindElements.find(3); // return True\nfindElements.find(5); // return False"
            },
            {
                "Input": "[\"FindElements\",\"find\",\"find\",\"find\",\"find\"]\n[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]",
                "Output": "[null,true,false,false,true]",
                "Explanation": "FindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);\nfindElements.find(2); // return True\nfindElements.find(3); // return False\nfindElements.find(4); // return False\nfindElements.find(5); // return True"
            }
        ]
    },
    {
        "Title": "Greatest Sum Divisible by Three",
        "slug": "greatest-sum-divisible-by-three",
        "description": "Given an integer array `nums`, return *the **maximum possible sum** of elements of the array such that it is divisible by three*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [3,6,5,1,8]",
                "Output": "** 18",
                "Explanation": "** Pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3)."
            },
            {
                "Input": "** nums = [4]",
                "Output": "** 0",
                "Explanation": "** Since 4 is not divisible by 3, do not pick any number."
            },
            {
                "Input": "** nums = [1,2,3,4,4]",
                "Output": "** 12",
                "Explanation": "** Pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3)."
            }
        ]
    },
    {
        "Title": "Minimum Moves to Move a Box to Their Target Location",
        "slug": "minimum-moves-to-move-a-box-to-their-target-location",
        "description": "A storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations.\n\n\nThe game is represented by an `m x n` grid of characters `grid` where each element is a wall, floor, or box.\n\n\nYour task is to move the box `'B'` to the target position `'T'` under the following rules:\n\n\n The character `'S'` represents the player. The player can move up, down, left, right in `grid` if it is a floor (empty cell).\n The character `'.'` represents the floor which means a free cell to walk.\n The character\u00a0`'#'`\u00a0represents the wall which means an obstacle (impossible to walk there).\n There is only one box `'B'` and one target cell `'T'` in the `grid`.\n The box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. This is a **push**.\n The player cannot walk through the box.\n\n\nReturn *the minimum number of **pushes** to move the box to the target*. If there is no way to reach the target, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Breadth-First Search",
            "Heap (Priority Queue)",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\".\",\".\",\"B\",\".\",\"#\"],\n               [\"#\",\".\",\"#\",\"#\",\".\",\"#\"],\n               [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n               [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]",
                "Output": "** 3",
                "Explanation": "** We return only the number of times the box is pushed."
            }
        ]
    },
    {
        "Title": "Minimum Time Visiting All Points",
        "slug": "minimum-time-visiting-all-points",
        "description": "On a 2D plane, there are `n` points with integer coordinates `points[i] = [xi, yi]`. Return *the **minimum time** in seconds to visit all the points in the order given by* `points`.\n\n\nYou can move according to these rules:\n\n\n In `1` second, you can either:\n\t+ move vertically by one\u00a0unit,\n\t+ move horizontally by one unit, or\n\t+ move diagonally `sqrt(2)` units (in other words, move one unit vertically then one unit horizontally in `1` second).\n You have to visit the points in the same order as they appear in the array.\n You are allowed to pass through points that appear later in the order, but these do not count as visits.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Geometry"
        ],
        "examples": [
            {
                "Input": "** points = [[1,1],[3,4],[-1,0]]",
                "Output": "** 7",
                "Explanation": "** One optimal path is **[1,1]** -> [2,2] -> [3,3] -> **[3,4]** -> [2,3] -> [1,2] -> [0,1] -> **[-1,0]**   \nTime from [1,1] to [3,4] = 3 seconds \nTime from [3,4] to [-1,0] = 4 seconds\nTotal time = 7 seconds"
            }
        ]
    },
    {
        "Title": "Count Servers that Communicate",
        "slug": "count-servers-that-communicate",
        "description": "You are given a map of a server center, represented as a `m * n` integer matrix\u00a0`grid`, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.  \n\n  \n\nReturn the number of servers\u00a0that communicate with any other server.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Matrix",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,0],[0,1]]",
                "Output": "** 0",
                "Explanation": "**\u00a0No servers can communicate with others."
            },
            {
                "Input": "** grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]",
                "Output": "** 4",
                "Explanation": "**\u00a0The two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server at right bottom corner can't communicate with any other server."
            }
        ]
    },
    {
        "Title": "Search Suggestions System",
        "slug": "search-suggestions-system",
        "description": "You are given an array of strings `products` and a string `searchWord`.\n\n\nDesign a system that suggests at most three product names from `products` after each character of `searchWord` is typed. Suggested products should have common prefix with `searchWord`. If there are more than three products with a common prefix return the three lexicographically minimums products.\n\n\nReturn *a list of lists of the suggested products after each character of* `searchWord` *is typed*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Binary Search",
            "Trie",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** products = [\"mobile\",\"mouse\",\"moneypot\",\"monitor\",\"mousepad\"], searchWord = \"mouse\"",
                "Output": "** [[\"mobile\",\"moneypot\",\"monitor\"],[\"mobile\",\"moneypot\",\"monitor\"],[\"mouse\",\"mousepad\"],[\"mouse\",\"mousepad\"],[\"mouse\",\"mousepad\"]]",
                "Explanation": "** products sorted lexicographically = [\"mobile\",\"moneypot\",\"monitor\",\"mouse\",\"mousepad\"].\nAfter typing m and mo all products match and we show user [\"mobile\",\"moneypot\",\"monitor\"].\nAfter typing mou, mous and mouse the system suggests [\"mouse\",\"mousepad\"]."
            },
            {
                "Input": "** products = [\"havana\"], searchWord = \"havana\"",
                "Output": "** [[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"]]",
                "Explanation": "** The only word \"havana\" will be always suggested while typing the search word."
            }
        ]
    },
    {
        "Title": "Number of Ways to Stay in the Same Place After Some Steps",
        "slug": "number-of-ways-to-stay-in-the-same-place-after-some-steps",
        "description": "You have a pointer at index `0` in an array of size `arrLen`. At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time).\n\n\nGiven two integers `steps` and `arrLen`, return the number of ways such that your pointer is still at index `0` after **exactly** `steps` steps. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** steps = 3, arrLen = 2",
                "Output": "** 4",
                "Explanation": "** There are 4 differents ways to stay at index 0 after 3 steps.\nRight, Left, Stay\nStay, Right, Left\nRight, Stay, Left\nStay, Stay, Stay"
            },
            {
                "Input": "** steps = 2, arrLen = 4",
                "Output": "** 2",
                "Explanation": "** There are 2 differents ways to stay at index 0 after 2 steps\nRight, Left\nStay, Stay"
            },
            {
                "Input": "** steps = 4, arrLen = 2",
                "Output": "** 8",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Winner on a Tic Tac Toe Game",
        "slug": "find-winner-on-a-tic-tac-toe-game",
        "description": "Tic-tac-toe** is played by two players `A` and `B` on a `3 x 3` grid. The rules of Tic-Tac-Toe are:\n\n\n Players take turns placing characters into empty squares `' '`.\n The first player `A` always places `'X'` characters, while the second player `B` always places `'O'` characters.\n `'X'` and `'O'` characters are always placed into empty squares, never on filled ones.\n The game ends when there are **three** of the same (non-empty) character filling any row, column, or diagonal.\n The game also ends if all squares are non-empty.\n No more moves can be played if the game is over.\n\n\nGiven a 2D integer array `moves` where `moves[i] = [rowi, coli]` indicates that the `ith` move will be played on `grid[rowi][coli]`. return *the winner of the game if it exists* (`A` or `B`). In case the game ends in a draw return `\"Draw\"`. If there are still movements to play return `\"Pending\"`.\n\n\nYou can assume that `moves` is valid (i.e., it follows the rules of **Tic-Tac-Toe**), the grid is initially empty, and `A` will play first.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]",
                "Output": "** \"A\"",
                "Explanation": "** A wins, they always play first."
            },
            {
                "Input": "** moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]",
                "Output": "** \"B\"",
                "Explanation": "** B wins."
            },
            {
                "Input": "** moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]",
                "Output": "** \"Draw\"",
                "Explanation": "** The game ends in a draw since there are no moves to make."
            }
        ]
    },
    {
        "Title": "Number of Burgers with No Waste of Ingredients",
        "slug": "number-of-burgers-with-no-waste-of-ingredients",
        "description": "Given two integers `tomatoSlices` and `cheeseSlices`. The ingredients of different burgers are as follows:\n\n\n **Jumbo Burger:** `4` tomato slices and `1` cheese slice.\n **Small Burger:** `2` Tomato slices and `1` cheese slice.\n\n\nReturn `[total_jumbo, total_small]` so that the number of remaining `tomatoSlices` equal to `0` and the number of remaining `cheeseSlices` equal to `0`. If it is not possible to make the remaining `tomatoSlices` and `cheeseSlices` equal to `0` return `[]`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** tomatoSlices = 16, cheeseSlices = 7",
                "Output": "** [1,6]\n**Explantion:** To make one jumbo burger and 6 small burgers we need 4*1 + 2*6 = 16 tomato and 1 + 6 = 7 cheese.\nThere will be no remaining ingredients.",
                "Explanation": null
            },
            {
                "Input": "** tomatoSlices = 17, cheeseSlices = 4",
                "Output": "** []\n**Explantion:** There will be no way to use all ingredients to make small and jumbo burgers.",
                "Explanation": null
            },
            {
                "Input": "** tomatoSlices = 4, cheeseSlices = 17",
                "Output": "** []\n**Explantion:** Making 1 jumbo burger there will be 16 cheese remaining and making 2 small burgers there will be 15 cheese remaining.",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count Square Submatrices with All Ones",
        "slug": "count-square-submatrices-with-all-ones",
        "description": "Given a `m * n` matrix of ones and zeros, return how many **square** submatrices have all ones.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** matrix =\n[\n\u00a0 [0,1,1,1],\n\u00a0 [1,1,1,1],\n\u00a0 [0,1,1,1]\n]",
                "Output": "** 15",
                "Explanation": "** \nThere are **10** squares of side 1.\nThere are **4** squares of side 2.\nThere is  **1** square of side 3.\nTotal number of squares = 10 + 4 + 1 = **15**."
            },
            {
                "Input": "** matrix = \n[\n  [1,0,1],\n  [1,1,0],\n  [1,1,0]\n]",
                "Output": "** 7",
                "Explanation": "** \nThere are **6** squares of side 1.  \nThere is **1** square of side 2. \nTotal number of squares = 6 + 1 = **7**."
            }
        ]
    },
    {
        "Title": "Palindrome Partitioning III",
        "slug": "palindrome-partitioning-iii",
        "description": "You are given a string `s` containing lowercase letters and an integer `k`. You need to :\n\n\n First, change some characters of `s` to other lowercase English letters.\n Then divide `s` into `k` non-empty disjoint substrings such that each substring is a palindrome.\n\n\nReturn *the minimal number of characters that you need to change to divide the string*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"abc\", k = 2",
                "Output": "** 1",
                "Explanation": "**\u00a0You can split the string into \"ab\" and \"c\", and change 1 character in \"ab\" to make it palindrome."
            },
            {
                "Input": "** s = \"aabbc\", k = 3",
                "Output": "** 0",
                "Explanation": "**\u00a0You can split the string into \"aa\", \"bb\" and \"c\", all of them are palindrome."
            },
            {
                "Input": "** s = \"leetcode\", k = 8",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Students and Examinations",
        "slug": "students-and-examinations",
        "description": "Table: `Students`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| student_id    | int     |\n| student_name  | varchar |\n+---------------+---------+\nstudent_id is the primary key (column with unique values) for this table.\nEach row of this table contains the ID and the name of one student in the school.\n\n```\n\n\u00a0\n\n\nTable: `Subjects`\n\n\n\n```\n\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| subject_name | varchar |\n+--------------+---------+\nsubject_name is the primary key (column with unique values) for this table.\nEach row of this table contains the name of one subject in the school.\n\n```\n\n\u00a0\n\n\nTable: `Examinations`\n\n\n\n```\n\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| student_id   | int     |\n| subject_name | varchar |\n+--------------+---------+\nThere is no primary key (column with unique values) for this table. It may contain duplicates.\nEach student from the Students table takes every course from the Subjects table.\nEach row of this table indicates that a student with ID student_id attended the exam of subject_name.\n\n```\n\n\u00a0\n\n\nWrite a solution to find the number of times each student attended each exam.\n\n\nReturn the result table ordered by `student_id` and `subject_name`.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nStudents table:\n+------------+--------------+\n| student_id | student_name |\n+------------+--------------+\n| 1          | Alice        |\n| 2          | Bob          |\n| 13         | John         |\n| 6          | Alex         |\n+------------+--------------+\nSubjects table:\n+--------------+\n| subject_name |\n+--------------+\n| Math         |\n| Physics      |\n| Programming  |\n+--------------+\nExaminations table:\n+------------+--------------+\n| student_id | subject_name |\n+------------+--------------+\n| 1          | Math         |\n| 1          | Physics      |\n| 1          | Programming  |\n| 2          | Programming  |\n| 1          | Physics      |\n| 1          | Math         |\n| 13         | Math         |\n| 13         | Programming  |\n| 13         | Physics      |\n| 2          | Math         |\n| 1          | Math         |\n+------------+--------------+",
                "Output": "** \n+------------+--------------+--------------+----------------+\n| student_id | student_name | subject_name | attended_exams |\n+------------+--------------+--------------+----------------+\n| 1          | Alice        | Math         | 3              |\n| 1          | Alice        | Physics      | 2              |\n| 1          | Alice        | Programming  | 1              |\n| 2          | Bob          | Math         | 1              |\n| 2          | Bob          | Physics      | 0              |\n| 2          | Bob          | Programming  | 1              |\n| 6          | Alex         | Math         | 0              |\n| 6          | Alex         | Physics      | 0              |\n| 6          | Alex         | Programming  | 0              |\n| 13         | John         | Math         | 1              |\n| 13         | John         | Physics      | 1              |\n| 13         | John         | Programming  | 1              |\n+------------+--------------+--------------+----------------+",
                "Explanation": "** \nThe result table should contain all students and all subjects.\nAlice attended the Math exam 3 times, the Physics exam 2 times, and the Programming exam 1 time.\nBob attended the Math exam 1 time, the Programming exam 1 time, and did not attend the Physics exam.\nAlex did not attend any exams.\nJohn attended the Math exam 1 time, the Physics exam 1 time, and the Programming exam 1 time."
            }
        ]
    },
    {
        "Title": "Subtract the Product and Sum of Digits of an Integer",
        "slug": "subtract-the-product-and-sum-of-digits-of-an-integer",
        "description": "Given an integer number `n`, return the difference between the product of its digits and the sum of its digits.\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** n = 234",
                "Output": "** 15",
                "Explanation": "** \nProduct of digits = 2 * 3 * 4 = 24 \nSum of digits = 2 + 3 + 4 = 9 \nResult = 24 - 9 = 15"
            },
            {
                "Input": "** n = 4421",
                "Output": "** 21",
                "Explanation": "**Product of digits = 4 * 4 * 2 * 1 = 32 \nSum of digits = 4 + 4 + 2 + 1 = 11 \nResult = 32 - 11 = 21"
            }
        ]
    },
    {
        "Title": "Group the People Given the Group Size They Belong To",
        "slug": "group-the-people-given-the-group-size-they-belong-to",
        "description": "There are `n` people\u00a0that are split into some unknown number of groups. Each person is labeled with a\u00a0**unique ID**\u00a0from\u00a0`0`\u00a0to\u00a0`n - 1`.\n\n\nYou are given an integer array\u00a0`groupSizes`, where `groupSizes[i]`\u00a0is the size of the group that person\u00a0`i`\u00a0is in. For example, if\u00a0`groupSizes[1] = 3`, then\u00a0person\u00a0`1`\u00a0must be in a\u00a0group of size\u00a0`3`.\n\n\nReturn\u00a0*a list of groups\u00a0such that\u00a0each person\u00a0`i`\u00a0is in a group of size\u00a0`groupSizes[i]`*.\n\n\nEach person should\u00a0appear in\u00a0**exactly one group**,\u00a0and every person must be in a group. If there are\u00a0multiple answers, **return any of them**. It is **guaranteed** that there will be **at least one** valid solution for the given input.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** groupSizes = [3,3,3,3,3,1,3]",
                "Output": "** [[5],[0,1,2],[3,4,6]]",
                "Explanation": "** \nThe first group is [5]. The size is 1, and groupSizes[5] = 1.\nThe second group is [0,1,2]. The size is 3, and groupSizes[0] = groupSizes[1] = groupSizes[2] = 3.\nThe third group is [3,4,6]. The size is 3, and groupSizes[3] = groupSizes[4] = groupSizes[6] = 3.\nOther possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]]."
            },
            {
                "Input": "** groupSizes = [2,1,3,3,3,2]",
                "Output": "** [[1],[0,5],[2,3,4]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find the Smallest Divisor Given a Threshold",
        "slug": "find-the-smallest-divisor-given-a-threshold",
        "description": "Given an array of integers `nums` and an integer `threshold`, we will choose a positive integer `divisor`, divide all the array by it, and sum the division's result. Find the **smallest** `divisor` such that the result mentioned above is less than or equal to `threshold`.\n\n\nEach result of the division is rounded to the nearest integer greater than or equal to that element. (For example: `7/3 = 3` and `10/2 = 5`).\n\n\nThe test cases are generated so\u00a0that there will be an answer.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,5,9], threshold = 6",
                "Output": "** 5",
                "Explanation": "** We can get a sum to 17 (1+2+5+9) if the divisor is 1. \nIf the divisor is 4 we can get a sum of 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2)."
            },
            {
                "Input": "** nums = [44,22,33,11,1], threshold = 5",
                "Output": "** 44",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
        "slug": "minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix",
        "description": "Given a `m x n` binary matrix `mat`. In one step, you can choose one cell and flip it and all the four neighbors of it if they exist (Flip is changing `1` to `0` and `0` to `1`). A pair of cells are called neighbors if they share one edge.\n\n\nReturn the *minimum number of steps* required to convert `mat` to a zero matrix or `-1` if you cannot.\n\n\nA **binary matrix** is a matrix with all cells equal to `0` or `1` only.\n\n\nA **zero matrix** is a matrix with all cells equal to `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Bit Manipulation",
            "Breadth-First Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** mat = [[0,0],[0,1]]",
                "Output": "** 3",
                "Explanation": "** One possible solution is to flip (1, 0) then (0, 1) and finally (1, 1) as shown."
            }
        ]
    },
    {
        "Title": "Iterator for Combination",
        "slug": "iterator-for-combination",
        "description": "Design the `CombinationIterator` class:\n\n\n `CombinationIterator(string characters, int combinationLength)` Initializes the object with a string `characters` of **sorted distinct** lowercase English letters and a number `combinationLength` as arguments.\n `next()` Returns the next combination of length `combinationLength` in **lexicographical order**.\n `hasNext()` Returns `true` if and only if there exists a next combination.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Backtracking",
            "Design",
            "Iterator"
        ],
        "examples": [
            {
                "Input": "[\"CombinationIterator\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[\"abc\", 2], [], [], [], [], [], []]",
                "Output": "[null, \"ab\", true, \"ac\", true, \"bc\", false]",
                "Explanation": "CombinationIterator itr = new CombinationIterator(\"abc\", 2);\nitr.next();    // return \"ab\"\nitr.hasNext(); // return True\nitr.next();    // return \"ac\"\nitr.hasNext(); // return True\nitr.next();    // return \"bc\"\nitr.hasNext(); // return False"
            }
        ]
    },
    {
        "Title": "Element Appearing More Than 25% In Sorted Array",
        "slug": "element-appearing-more-than-25-in-sorted-array",
        "description": "Given an integer array **sorted** in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** arr = [1,2,2,6,6,6,6,7,10]",
                "Output": "** 6",
                "Explanation": null
            },
            {
                "Input": "** arr = [1,1]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove Covered Intervals",
        "slug": "remove-covered-intervals",
        "description": "Given an array `intervals` where `intervals[i] = [li, ri]` represent the interval `[li, ri)`, remove all intervals that are covered by another interval in the list.\n\n\nThe interval `[a, b)` is covered by the interval `[c, d)` if and only if `c <= a` and `b <= d`.\n\n\nReturn *the number of remaining intervals*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** intervals = [[1,4],[3,6],[2,8]]",
                "Output": "** 2",
                "Explanation": "** Interval [3,6] is covered by [2,8], therefore it is removed."
            },
            {
                "Input": "** intervals = [[1,4],[2,3]]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Falling Path Sum II",
        "slug": "minimum-falling-path-sum-ii",
        "description": "Given an `n x n` integer matrix `grid`, return *the minimum sum of a **falling path with non-zero shifts***.\n\n\nA **falling path with non-zero shifts** is a choice of exactly one element from each row of `grid` such that no two elements chosen in adjacent rows are in the same column.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,2,3],[4,5,6],[7,8,9]]",
                "Output": "** 13",
                "Explanation": "** \nThe possible falling paths are:\n[1,5,9], [1,5,7], [1,6,7], [1,6,8],\n[2,4,8], [2,4,9], [2,6,7], [2,6,8],\n[3,4,8], [3,4,9], [3,5,7], [3,5,9]\nThe falling path with the smallest sum is\u00a0[1,5,7], so the answer is\u00a013."
            }
        ]
    },
    {
        "Title": "Convert Binary Number in a Linked List to Integer",
        "slug": "convert-binary-number-in-a-linked-list-to-integer",
        "description": "Given `head` which is a reference node to a singly-linked list. The value of each node in the linked list is either `0` or `1`. The linked list holds the binary representation of a number.\n\n\nReturn the *decimal value* of the number in the linked list.\n\n\nThe **most significant bit** is at the head of the linked list.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Linked List",
            "Math"
        ],
        "examples": [
            {
                "Input": "** head = [1,0,1]",
                "Output": "** 5",
                "Explanation": "** (101) in base 2 = (5) in base 10"
            }
        ]
    },
    {
        "Title": "Sequential Digits",
        "slug": "sequential-digits",
        "description": "An\u00a0integer has *sequential digits* if and only if each digit in the number is one more than the previous digit.\n\n\nReturn a **sorted** list of all the integers\u00a0in the range `[low, high]`\u00a0inclusive that have sequential digits.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** low = 100, high = 300",
                "Output": "** [123,234]",
                "Explanation": null
            },
            {
                "Input": "** low = 1000, high = 13000",
                "Output": "** [1234,2345,3456,4567,5678,6789,12345]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
        "slug": "maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold",
        "description": "Given a `m x n` matrix `mat` and an integer `threshold`, return *the maximum side-length of a square with a sum less than or equal to* `threshold` *or return* `0` *if there is no such square*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Matrix",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4",
                "Output": "** 2",
                "Explanation": "** The maximum side length of square with sum less than 4 is 2 as shown."
            }
        ]
    },
    {
        "Title": "Shortest Path in a Grid with Obstacles Elimination",
        "slug": "shortest-path-in-a-grid-with-obstacles-elimination",
        "description": "You are given an `m x n` integer matrix `grid` where each cell is either `0` (empty) or `1` (obstacle). You can move up, down, left, or right from and to an empty cell in **one step**.\n\n\nReturn *the minimum number of **steps** to walk from the upper left corner* `(0, 0)` *to the lower right corner* `(m - 1, n - 1)` *given that you can eliminate **at most*** `k` *obstacles*. If it is not possible to find such walk return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Breadth-First Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]], k = 1",
                "Output": "** 6",
                "Explanation": "** \nThe shortest path without eliminating any obstacle is 10.\nThe shortest path with one obstacle elimination at position (3,2) is 6. Such path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> **(3,2)** -> (4,2)."
            },
            {
                "Input": "** grid = [[0,1,1],[1,1,1],[1,0,0]], k = 1",
                "Output": "** -1",
                "Explanation": "** We need to eliminate at least two obstacles to find such a walk."
            }
        ]
    },
    {
        "Title": "Find Numbers with Even Number of Digits",
        "slug": "find-numbers-with-even-number-of-digits",
        "description": "Given an array `nums` of integers, return how many of them contain an **even number** of digits.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [12,345,2,6,7896]",
                "Output": "** 2",
                "Explanation": "**12 contains 2 digits (even number of digits).\u00a0\n345 contains 3 digits (odd number of digits).\u00a0\n2 contains 1 digit (odd number of digits).\u00a0\n6 contains 1 digit (odd number of digits).\u00a0\n7896 contains 4 digits (even number of digits).\u00a0\nTherefore only 12 and 7896 contain an even number of digits."
            },
            {
                "Input": "** nums = [555,901,482,1771]",
                "Output": "** 1",
                "Explanation": "** \nOnly 1771 contains an even number of digits."
            }
        ]
    },
    {
        "Title": "Divide Array in Sets of K Consecutive Numbers",
        "slug": "divide-array-in-sets-of-k-consecutive-numbers",
        "description": "Given an array of integers `nums` and a positive integer `k`, check whether it is possible to divide this array into sets of `k` consecutive numbers.\n\n\nReturn `true` *if it is possible*.Otherwise, return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,3,4,4,5,6], k = 4",
                "Output": "** true",
                "Explanation": "** Array can be divided into [1,2,3,4] and [3,4,5,6]."
            },
            {
                "Input": "** nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3",
                "Output": "** true",
                "Explanation": "** Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11]."
            },
            {
                "Input": "** nums = [1,2,3,4], k = 3",
                "Output": "** false",
                "Explanation": "** Each array should be divided in subarrays of size 3."
            }
        ]
    },
    {
        "Title": "Maximum Number of Occurrences of a Substring",
        "slug": "maximum-number-of-occurrences-of-a-substring",
        "description": "Given a string `s`, return the maximum number of occurrences of **any** substring under the following rules:\n\n\n The number of unique characters in the substring must be less than or equal to `maxLetters`.\n The substring size must be between `minSize` and `maxSize` inclusive.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** s = \"aababcaab\", maxLetters = 2, minSize = 3, maxSize = 4",
                "Output": "** 2",
                "Explanation": "** Substring \"aab\" has 2 occurrences in the original string.\nIt satisfies the conditions, 2 unique letters and size 3 (between minSize and maxSize)."
            },
            {
                "Input": "** s = \"aaaa\", maxLetters = 1, minSize = 3, maxSize = 3",
                "Output": "** 2",
                "Explanation": "** Substring \"aaa\" occur 2 times in the string. It can overlap."
            }
        ]
    },
    {
        "Title": "Maximum Candies You Can Get from Boxes",
        "slug": "maximum-candies-you-can-get-from-boxes",
        "description": "You have `n` boxes labeled from `0` to `n - 1`. You are given four arrays: `status`, `candies`, `keys`, and `containedBoxes` where:\n\n\n `status[i]` is `1` if the `ith` box is open and `0` if the `ith` box is closed,\n `candies[i]` is the number of candies in the `ith` box,\n `keys[i]` is a list of the labels of the boxes you can open after opening the `ith` box.\n `containedBoxes[i]` is a list of the boxes you found inside the `ith` box.\n\n\nYou are given an integer array `initialBoxes` that contains the labels of the boxes you initially have. You can take all the candies in **any open box** and you can use the keys in it to open new boxes and you also can use the boxes you find in it.\n\n\nReturn *the maximum number of candies you can get following the rules above*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Breadth-First Search",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]",
                "Output": "** 16",
                "Explanation": "** You will be initially given box 0. You will find 7 candies in it and boxes 1 and 2.\nBox 1 is closed and you do not have a key for it so you will open box 2. You will find 4 candies and a key to box 1 in box 2.\nIn box 1, you will find 5 candies and box 3 but you will not find a key to box 3 so box 3 will remain closed.\nTotal number of candies collected = 7 + 4 + 5 = 16 candy."
            },
            {
                "Input": "** status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]",
                "Output": "** 6",
                "Explanation": "** You have initially box 0. Opening it you can find boxes 1,2,3,4 and 5 and their keys.\nThe total number of candies will be 6."
            }
        ]
    },
    {
        "Title": "Replace Elements with Greatest Element on Right Side",
        "slug": "replace-elements-with-greatest-element-on-right-side",
        "description": "Given an array `arr`,\u00a0replace every element in that array with the greatest element among the elements to its\u00a0right, and replace the last element with `-1`.\n\n\nAfter doing so, return the array.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** arr = [17,18,5,4,6,1]",
                "Output": "** [18,6,6,6,1,-1]",
                "Explanation": "** \n- index 0 --> the greatest element to the right of index 0 is index 1 (18).\n- index 1 --> the greatest element to the right of index 1 is index 4 (6).\n- index 2 --> the greatest element to the right of index 2 is index 4 (6).\n- index 3 --> the greatest element to the right of index 3 is index 4 (6).\n- index 4 --> the greatest element to the right of index 4 is index 5 (1).\n- index 5 --> there are no elements to the right of index 5, so we put -1."
            },
            {
                "Input": "** arr = [400]",
                "Output": "** [-1]",
                "Explanation": "** There are no elements to the right of index 0."
            }
        ]
    },
    {
        "Title": "Sum of Mutated Array Closest to Target",
        "slug": "sum-of-mutated-array-closest-to-target",
        "description": "Given an integer array `arr` and a target value `target`, return the integer `value` such that when we change all the integers larger than `value` in the given array to be equal to `value`, the sum of the array gets as close as possible (in absolute difference) to `target`.\n\n\nIn case of a tie, return the minimum such integer.\n\n\nNotice that the answer is not neccesarilly a number from `arr`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** arr = [4,9,3], target = 10",
                "Output": "** 3",
                "Explanation": "** When using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer."
            },
            {
                "Input": "** arr = [2,3,5], target = 10",
                "Output": "** 5",
                "Explanation": null
            },
            {
                "Input": "** arr = [60864,25176,27249,21296,20204], target = 56803",
                "Output": "** 11361",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Paths with Max Score",
        "slug": "number-of-paths-with-max-score",
        "description": "You are given a square `board`\u00a0of characters. You can move on the board starting at the bottom right square marked with the character\u00a0`'S'`.\n\n\nYou need\u00a0to reach the top left square marked with the character `'E'`. The rest of the squares are labeled either with a numeric character\u00a0`1, 2, ..., 9` or with an obstacle `'X'`. In one move you can go up, left or up-left (diagonally) only if there is no obstacle there.\n\n\nReturn a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, **taken modulo `10^9 + 7`**.\n\n\nIn case there is no path, return\u00a0`[0, 0]`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** board = [\"E23\",\"2X2\",\"12S\"]",
                "Output": "** [7,1]",
                "Explanation": null
            },
            {
                "Input": "** board = [\"E12\",\"1X1\",\"21S\"]",
                "Output": "** [4,2]",
                "Explanation": null
            },
            {
                "Input": "** board = [\"E11\",\"XXX\",\"11S\"]",
                "Output": "** [0,0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Deepest Leaves Sum",
        "slug": "deepest-leaves-sum",
        "description": "Given the `root` of a binary tree, return *the sum of values of its deepest leaves*.\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2,3,4,5,null,6,7,null,null,null,null,8]",
                "Output": "** 15",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find N Unique Integers Sum up to Zero",
        "slug": "find-n-unique-integers-sum-up-to-zero",
        "description": "Given an integer `n`, return **any** array containing `n` **unique** integers such that they add up to `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math"
        ],
        "examples": [
            {
                "Input": "** n = 5",
                "Output": "** [-7,-1,1,3,4]",
                "Explanation": "** These arrays also are accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4]."
            },
            {
                "Input": "** n = 3",
                "Output": "** [-1,0,1]",
                "Explanation": null
            },
            {
                "Input": "** n = 1",
                "Output": "** [0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "All Elements in Two Binary Search Trees",
        "slug": "all-elements-in-two-binary-search-trees",
        "description": "Given two binary search trees `root1` and `root2`, return *a list containing all the integers from both trees sorted in **ascending** order*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Sorting",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root1 = [2,1,4], root2 = [1,0,3]",
                "Output": "** [0,1,1,2,3,4]",
                "Explanation": null
            },
            {
                "Input": "** root1 = [1,null,8], root2 = [8,1]",
                "Output": "** [1,1,8,8]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Jump Game III",
        "slug": "jump-game-iii",
        "description": "Given an array of non-negative integers `arr`, you are initially positioned at `start`\u00a0index of the array. When you are at index `i`, you can jump\u00a0to `i + arr[i]` or `i - arr[i]`, check if you can reach\u00a0**any** index with value 0.\n\n\nNotice that you can not jump outside of the array at any time.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** arr = [4,2,3,0,3,1,2], start = 5",
                "Output": "** true",
                "Explanation": "** \nAll possible ways to reach at index 3 with value 0 are: \nindex 5 -> index 4 -> index 1 -> index 3 \nindex 5 -> index 6 -> index 4 -> index 1 -> index 3"
            },
            {
                "Input": "** arr = [4,2,3,0,3,1,2], start = 0",
                "Output": "** true",
                "Explanation": "**One possible way to reach at index 3 with value 0 is: \nindex 0 -> index 4 -> index 1 -> index 3"
            },
            {
                "Input": "** arr = [3,0,2,1,2], start = 2",
                "Output": "** false",
                "Explanation": "** There is no way to reach at index 1 with value 0."
            }
        ]
    },
    {
        "Title": "Verbal Arithmetic Puzzle",
        "slug": "verbal-arithmetic-puzzle",
        "description": "Given an equation, represented by `words` on the left side and the `result` on the right side.\n\n\nYou need to check if the equation is solvable under the following rules:\n\n\n Each character is decoded as one digit (0 - 9).\n No two characters can map to the same digit.\n Each `words[i]` and `result` are decoded as one number **without** leading zeros.\n Sum of numbers on the left side (`words`) will equal to the number on the right side (`result`).\n\n\nReturn `true` *if the equation is solvable, otherwise return* `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "String",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** words = [\"SEND\",\"MORE\"], result = \"MONEY\"",
                "Output": "** true",
                "Explanation": "** Map 'S'-> 9, 'E'->5, 'N'->6, 'D'->7, 'M'->1, 'O'->0, 'R'->8, 'Y'->'2'\nSuch that: \"SEND\" + \"MORE\" = \"MONEY\" ,  9567 + 1085 = 10652"
            },
            {
                "Input": "** words = [\"SIX\",\"SEVEN\",\"SEVEN\"], result = \"TWENTY\"",
                "Output": "** true",
                "Explanation": "** Map 'S'-> 6, 'I'->5, 'X'->0, 'E'->8, 'V'->7, 'N'->2, 'T'->1, 'W'->'3', 'Y'->4\nSuch that: \"SIX\" + \"SEVEN\" + \"SEVEN\" = \"TWENTY\" ,  650 + 68782 + 68782 = 138214"
            },
            {
                "Input": "** words = [\"LEET\",\"CODE\"], result = \"POINT\"",
                "Output": "** false",
                "Explanation": "** There is no possible mapping to satisfy the equation, so we return false.\nNote that two different characters cannot map to the same digit."
            }
        ]
    },
    {
        "Title": "Decrypt String from Alphabet to Integer Mapping",
        "slug": "decrypt-string-from-alphabet-to-integer-mapping",
        "description": "You are given a string `s` formed by digits and `'#'`. We want to map `s` to English lowercase characters as follows:\n\n\n Characters (`'a'` to `'i'`) are represented by (`'1'` to `'9'`) respectively.\n Characters (`'j'` to `'z'`) are represented by (`'10#'` to `'26#'`) respectively.\n\n\nReturn *the string formed after mapping*.\n\n\nThe test cases are generated so that a unique mapping will always exist.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"10#11#12\"",
                "Output": "** \"jkab\"",
                "Explanation": "** \"j\" -> \"10#\" , \"k\" -> \"11#\" , \"a\" -> \"1\" , \"b\" -> \"2\"."
            },
            {
                "Input": "** s = \"1326#\"",
                "Output": "** \"acz\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "XOR Queries of a Subarray",
        "slug": "xor-queries-of-a-subarray",
        "description": "You are given an array `arr` of positive integers. You are also given the array `queries` where `queries[i] = [lefti, righti]`.\n\n\nFor each query `i` compute the **XOR** of elements from `lefti` to `righti` (that is, `arr[lefti] XOR arr[lefti + 1] XOR ... XOR arr[righti]` ).\n\n\nReturn an array `answer` where `answer[i]` is the answer to the `ith` query.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Bit Manipulation",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]",
                "Output": "** [2,7,14,8]",
                "Explanation": "** \nThe binary representation of the elements in the array are:\n1 = 0001 \n3 = 0011 \n4 = 0100 \n8 = 1000 \nThe XOR values for queries are:\n[0,1] = 1 xor 3 = 2 \n[1,2] = 3 xor 4 = 7 \n[0,3] = 1 xor 3 xor 4 xor 8 = 14 \n[3,3] = 8"
            },
            {
                "Input": "** arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]",
                "Output": "** [8,0,4,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Insertion Steps to Make a String Palindrome",
        "slug": "minimum-insertion-steps-to-make-a-string-palindrome",
        "description": "Given a string `s`. In one step you can insert any character at any index of the string.\n\n\nReturn *the minimum number of steps* to make `s`\u00a0palindrome.\n\n\nA\u00a0**Palindrome String**\u00a0is one that reads the same backward as well as forward.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"zzazz\"",
                "Output": "** 0",
                "Explanation": "** The string \"zzazz\" is already palindrome we do not need any insertions."
            },
            {
                "Input": "** s = \"mbadm\"",
                "Output": "** 2",
                "Explanation": "** String can be \"mbdadbm\" or \"mdbabdm\"."
            },
            {
                "Input": "** s = \"leetcode\"",
                "Output": "** 5",
                "Explanation": "** Inserting 5 characters the string becomes \"leetcodocteel\"."
            }
        ]
    },
    {
        "Title": "Decompress Run-Length Encoded List",
        "slug": "decompress-run-length-encoded-list",
        "description": "We are given a list `nums` of integers representing a list compressed with run-length encoding.\n\n\nConsider each adjacent pair\u00a0of elements `[freq, val] = [nums[2*i], nums[2*i+1]]`\u00a0(with `i >= 0`).\u00a0 For each such pair, there are `freq` elements with value `val` concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list.\n\n\nReturn the decompressed list.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** [2,4,4,4]",
                "Explanation": "** The first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2].\nThe second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4].\nAt the end the concatenation [2] + [4,4,4] is [2,4,4,4]."
            },
            {
                "Input": "** nums = [1,1,2,3]",
                "Output": "** [1,3,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Matrix Block Sum",
        "slug": "matrix-block-sum",
        "description": "Given a `m x n` matrix `mat` and an integer `k`, return *a matrix* `answer` *where each* `answer[i][j]` *is the sum of all elements* `mat[r][c]` *for*:\n\n\n `i - k <= r <= i + k,`\n `j - k <= c <= j + k`, and\n `(r, c)` is a valid position in the matrix.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1",
                "Output": "** [[12,21,16],[27,45,33],[24,39,28]]",
                "Explanation": null
            },
            {
                "Input": "** mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2",
                "Output": "** [[45,45,45],[45,45,45],[45,45,45]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sum of Nodes with Even-Valued Grandparent",
        "slug": "sum-of-nodes-with-even-valued-grandparent",
        "description": "Given the `root` of a binary tree, return *the sum of values of nodes with an **even-valued grandparent***. If there are no nodes with an **even-valued grandparent**, return `0`.\n\n\nA **grandparent** of a node is the parent of its parent if it exists.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]",
                "Output": "** 18",
                "Explanation": "** The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents."
            },
            {
                "Input": "** root = [1]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Distinct Echo Substrings",
        "slug": "distinct-echo-substrings",
        "description": "Return the number of **distinct** non-empty substrings of `text`\u00a0that can be written as the concatenation of some string with itself (i.e. it can be written as `a + a`\u00a0where `a` is some string).\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Trie",
            "Rolling Hash",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "** text = \"abcabcabc\"",
                "Output": "** 3",
                "Explanation": "** The 3 substrings are \"abcabc\", \"bcabca\" and \"cabcab\"."
            },
            {
                "Input": "** text = \"leetcodeleetcode\"",
                "Output": "** 2",
                "Explanation": "** The 2 substrings are \"ee\" and \"leetcodeleetcode\"."
            }
        ]
    },
    {
        "Title": "Convert Integer to the Sum of Two No-Zero Integers",
        "slug": "convert-integer-to-the-sum-of-two-no-zero-integers",
        "description": "No-Zero integer** is a positive integer that **does not contain any `0`** in its decimal representation.\n\n\nGiven an integer `n`, return *a list of two integers* `[a, b]` *where*:\n\n\n `a` and `b` are **No-Zero integers**.\n `a + b = n`\n\n\nThe test cases are generated so that there is at least one valid solution. If there are many valid solutions, you can return any of them.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** [1,1]",
                "Explanation": "** Let a = 1 and b = 1.\nBoth a and b are no-zero integers, and a + b = 2 = n."
            },
            {
                "Input": "** n = 11",
                "Output": "** [2,9]",
                "Explanation": "** Let a = 2 and b = 9.\nBoth a and b are no-zero integers, and a + b = 9 = n.\nNote that there are other valid answers as [8, 3] that can be accepted."
            }
        ]
    },
    {
        "Title": "Minimum Flips to Make a OR b Equal to c",
        "slug": "minimum-flips-to-make-a-or-b-equal-to-c",
        "description": "Given 3 positives numbers `a`, `b` and `c`. Return the minimum flips required in some bits of `a` and `b` to make (\u00a0`a` OR `b` == `c`\u00a0). (bitwise OR operation).  \n\r\nFlip operation\u00a0consists of change\u00a0**any**\u00a0single bit 1 to 0 or change the bit 0 to 1\u00a0in their binary representation.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** a = 2, b = 6, c = 5",
                "Output": "** 3",
                "Explanation": "** After flips a = 1 , b = 4 , c = 5 such that (a OR b == c)"
            }
        ]
    },
    {
        "Title": "Number of Operations to Make Network Connected",
        "slug": "number-of-operations-to-make-network-connected",
        "description": "There are `n` computers numbered from `0` to `n - 1` connected by ethernet cables `connections` forming a network where `connections[i] = [ai, bi]` represents a connection between computers `ai` and `bi`. Any computer can reach any other computer directly or indirectly through the network.\n\n\nYou are given an initial computer network `connections`. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected.\n\n\nReturn *the minimum number of times you need to do this in order to make all the computers connected*. If it is not possible, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** n = 4, connections = [[0,1],[0,2],[1,2]]",
                "Output": "** 1",
                "Explanation": "** Remove cable between computer 1 and 2 and place between computers 1 and 3."
            },
            {
                "Input": "** n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Distance to Type a Word Using Two Fingers",
        "slug": "minimum-distance-to-type-a-word-using-two-fingers",
        "description": "![](https://assets.leetcode.com/uploads/2020/01/02/leetcode_keyboard.png)\nYou have a keyboard layout as shown above in the **X-Y** plane, where each English uppercase letter is located at some coordinate.\n\n\n For example, the letter `'A'` is located at coordinate `(0, 0)`, the letter `'B'` is located at coordinate `(0, 1)`, the letter `'P'` is located at coordinate `(2, 3)` and the letter `'Z'` is located at coordinate `(4, 1)`.\n\n\nGiven the string `word`, return *the minimum total **distance** to type such string using only two fingers*.\n\n\nThe **distance** between coordinates `(x1, y1)` and `(x2, y2)` is `|x1 - x2| + |y1 - y2|`.\n\n\nNote** that the initial positions of your two fingers are considered free so do not count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** word = \"CAKE\"",
                "Output": "** 3",
                "Explanation": "** Using two fingers, one optimal way to type \"CAKE\" is: \nFinger 1 on letter 'C' -> cost = 0 \nFinger 1 on letter 'A' -> cost = Distance from letter 'C' to letter 'A' = 2 \nFinger 2 on letter 'K' -> cost = 0 \nFinger 2 on letter 'E' -> cost = Distance from letter 'K' to letter 'E' = 1 \nTotal distance = 3"
            },
            {
                "Input": "** word = \"HAPPY\"",
                "Output": "** 6",
                "Explanation": "** Using two fingers, one optimal way to type \"HAPPY\" is:\nFinger 1 on letter 'H' -> cost = 0\nFinger 1 on letter 'A' -> cost = Distance from letter 'H' to letter 'A' = 2\nFinger 2 on letter 'P' -> cost = 0\nFinger 2 on letter 'P' -> cost = Distance from letter 'P' to letter 'P' = 0\nFinger 1 on letter 'Y' -> cost = Distance from letter 'A' to letter 'Y' = 4\nTotal distance = 6"
            }
        ]
    },
    {
        "Title": "Restaurant Growth",
        "slug": "restaurant-growth",
        "description": "Table: `Customer`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| customer_id   | int     |\n| name          | varchar |\n| visited_on    | date    |\n| amount        | int     |\n+---------------+---------+\nIn SQL,(customer_id, visited_on) is the primary key for this table.\nThis table contains data about customer transactions in a restaurant.\nvisited_on is the date on which the customer with ID (customer_id) has visited the restaurant.\namount is the total paid by a customer.\n\n```\n\n\u00a0\n\n\nYou are the restaurant owner and you want to analyze a possible expansion (there will be at least one customer every day).\n\n\nCompute the moving average of how much the customer paid in a seven days window (i.e., current day + 6 days before). `average_amount` should be **rounded to two decimal places**.\n\n\nReturn the result table ordered by `visited_on` **in ascending order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nCustomer table:\n+-------------+--------------+--------------+-------------+\n| customer_id | name         | visited_on   | amount      |\n+-------------+--------------+--------------+-------------+\n| 1           | Jhon         | 2019-01-01   | 100         |\n| 2           | Daniel       | 2019-01-02   | 110         |\n| 3           | Jade         | 2019-01-03   | 120         |\n| 4           | Khaled       | 2019-01-04   | 130         |\n| 5           | Winston      | 2019-01-05   | 110         | \n| 6           | Elvis        | 2019-01-06   | 140         | \n| 7           | Anna         | 2019-01-07   | 150         |\n| 8           | Maria        | 2019-01-08   | 80          |\n| 9           | Jaze         | 2019-01-09   | 110         | \n| 1           | Jhon         | 2019-01-10   | 130         | \n| 3           | Jade         | 2019-01-10   | 150         | \n+-------------+--------------+--------------+-------------+",
                "Output": "** \n+--------------+--------------+----------------+\n| visited_on   | amount       | average_amount |\n+--------------+--------------+----------------+\n| 2019-01-07   | 860          | 122.86         |\n| 2019-01-08   | 840          | 120            |\n| 2019-01-09   | 840          | 120            |\n| 2019-01-10   | 1000         | 142.86         |\n+--------------+--------------+----------------+",
                "Explanation": "** \n1st moving average from 2019-01-01 to 2019-01-07 has an average_amount of (100 + 110 + 120 + 130 + 110 + 140 + 150)/7 = 122.86\n2nd moving average from 2019-01-02 to 2019-01-08 has an average_amount of (110 + 120 + 130 + 110 + 140 + 150 + 80)/7 = 120\n3rd moving average from 2019-01-03 to 2019-01-09 has an average_amount of (120 + 130 + 110 + 140 + 150 + 80 + 110)/7 = 120\n4th moving average from 2019-01-04 to 2019-01-10 has an average_amount of (130 + 110 + 140 + 150 + 80 + 110 + 130 + 150)/7 = 142.86"
            }
        ]
    },
    {
        "Title": "Maximum 69 Number",
        "slug": "maximum-69-number",
        "description": "You are given a positive integer `num` consisting only of digits `6` and `9`.\n\n\nReturn *the maximum number you can get by changing **at most** one digit (*`6` *becomes* `9`*, and* `9` *becomes* `6`*)*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** num = 9669",
                "Output": "** 9969",
                "Explanation": "** \nChanging the first digit results in 6669.\nChanging the second digit results in 9969.\nChanging the third digit results in 9699.\nChanging the fourth digit results in 9666.\nThe maximum number is 9969."
            },
            {
                "Input": "** num = 9996",
                "Output": "** 9999",
                "Explanation": "** Changing the last digit 6 to 9 results in the maximum number."
            },
            {
                "Input": "** num = 9999",
                "Output": "** 9999",
                "Explanation": "** It is better not to apply any change."
            }
        ]
    },
    {
        "Title": "Print Words Vertically",
        "slug": "print-words-vertically",
        "description": "Given a string `s`.\u00a0Return\u00a0all the words vertically in the same order in which they appear in `s`.  \n\r\nWords are returned as a list of strings, complete with\u00a0spaces when is necessary. (Trailing spaces are not allowed).  \n\r\nEach word would be put on only one column and that in one column there will be only one word.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** s = \"HOW ARE YOU\"",
                "Output": "** [\"HAY\",\"ORO\",\"WEU\"]",
                "Explanation": "** Each word is printed vertically. \r\n \"HAY\"\r\n\u00a0\"ORO\"\r\n\u00a0\"WEU\""
            },
            {
                "Input": "** s = \"TO BE OR NOT TO BE\"",
                "Output": "** [\"TBONTB\",\"OEROOE\",\"   T\"]",
                "Explanation": "** Trailing spaces is not allowed. \r\n\"TBONTB\"\r\n\"OEROOE\"\r\n\"   T\""
            },
            {
                "Input": "** s = \"CONTEST IS COMING\"",
                "Output": "** [\"CIC\",\"OSO\",\"N M\",\"T I\",\"E N\",\"S G\",\"T\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Number of Taps to Open to Water a Garden",
        "slug": "minimum-number-of-taps-to-open-to-water-a-garden",
        "description": "There is a one-dimensional garden on the x-axis. The garden starts at the point `0` and ends at the point `n`. (i.e., the\u00a0length of the garden is `n`).\n\n\nThere are `n + 1` taps located at points `[0, 1, ..., n]` in the garden.\n\n\nGiven an integer `n` and an integer array `ranges` of length `n + 1` where `ranges[i]` (0-indexed) means the `i-th` tap can water the area `[i - ranges[i], i + ranges[i]]` if it was open.\n\n\nReturn *the minimum number of taps* that should be open to water the whole garden, If the garden cannot be watered return **-1**.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** n = 5, ranges = [3,4,1,1,0,0]",
                "Output": "** 1",
                "Explanation": "** The tap at point 0 can cover the interval [-3,3]\nThe tap at point 1 can cover the interval [-3,5]\nThe tap at point 2 can cover the interval [1,3]\nThe tap at point 3 can cover the interval [2,4]\nThe tap at point 4 can cover the interval [4,4]\nThe tap at point 5 can cover the interval [5,5]\nOpening Only the second tap will water the whole garden [0,5]"
            }
        ]
    },
    {
        "Title": "List the Products Ordered in a Period",
        "slug": "list-the-products-ordered-in-a-period",
        "description": "Table: `Products`\n\n\n\n```\n\n+------------------+---------+\n| Column Name      | Type    |\n+------------------+---------+\n| product_id       | int     |\n| product_name     | varchar |\n| product_category | varchar |\n+------------------+---------+\nproduct_id is the primary key (column with unique values) for this table.\nThis table contains data about the company's products.\n\n```\n\n\u00a0\n\n\nTable: `Orders`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| product_id    | int     |\n| order_date    | date    |\n| unit          | int     |\n+---------------+---------+\nThis table may have duplicate rows.\nproduct_id is a foreign key (reference column) to the Products table.\nunit is the number of products ordered in order_date.\n\n```\n\n\u00a0\n\n\nWrite a solution to get the names of products that have at least `100` units ordered in **February 2020** and their amount.\n\n\nReturn the result table in **any order**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nProducts table:\n+-------------+-----------------------+------------------+\n| product_id  | product_name          | product_category |\n+-------------+-----------------------+------------------+\n| 1           | Leetcode Solutions    | Book             |\n| 2           | Jewels of Stringology | Book             |\n| 3           | HP                    | Laptop           |\n| 4           | Lenovo                | Laptop           |\n| 5           | Leetcode Kit          | T-shirt          |\n+-------------+-----------------------+------------------+\nOrders table:\n+--------------+--------------+----------+\n| product_id   | order_date   | unit     |\n+--------------+--------------+----------+\n| 1            | 2020-02-05   | 60       |\n| 1            | 2020-02-10   | 70       |\n| 2            | 2020-01-18   | 30       |\n| 2            | 2020-02-11   | 80       |\n| 3            | 2020-02-17   | 2        |\n| 3            | 2020-02-24   | 3        |\n| 4            | 2020-03-01   | 20       |\n| 4            | 2020-03-04   | 30       |\n| 4            | 2020-03-04   | 60       |\n| 5            | 2020-02-25   | 50       |\n| 5            | 2020-02-27   | 50       |\n| 5            | 2020-03-01   | 50       |\n+--------------+--------------+----------+",
                "Output": "** \n+--------------------+---------+\n| product_name       | unit    |\n+--------------------+---------+\n| Leetcode Solutions | 130     |\n| Leetcode Kit       | 100     |\n+--------------------+---------+",
                "Explanation": "** \nProducts with product_id = 1 is ordered in February a total of (60 + 70) = 130.\nProducts with product_id = 2 is ordered in February a total of 80.\nProducts with product_id = 3 is ordered in February a total of (2 + 3) = 5.\nProducts with product_id = 4 was not ordered in February 2020.\nProducts with product_id = 5 is ordered in February a total of (50 + 50) = 100."
            }
        ]
    },
    {
        "Title": "Break a Palindrome",
        "slug": "break-a-palindrome",
        "description": "Given a palindromic string of lowercase English letters `palindrome`, replace **exactly one** character with any lowercase English letter so that the resulting string is **not** a palindrome and that it is the **lexicographically smallest** one possible.\n\n\nReturn *the resulting string. If there is no way to replace a character to make it not a palindrome, return an **empty string**.\n\n\nA string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly smaller than the corresponding character in `b`. For example, `\"abcc\"` is lexicographically smaller than `\"abcd\"` because the first position they differ is at the fourth character, and `'c'` is smaller than `'d'`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** palindrome = \"abccba\"",
                "Output": "** \"aaccba\"",
                "Explanation": "** There are many ways to make \"abccba\" not a palindrome, such as \"zbccba\", \"aaccba\", and \"abacba\".\nOf all the ways, \"aaccba\" is the lexicographically smallest."
            },
            {
                "Input": "** palindrome = \"a\"",
                "Output": "** \"\"",
                "Explanation": "** There is no way to replace a single character to make \"a\" not a palindrome, so return an empty string."
            }
        ]
    },
    {
        "Title": "Sort the Matrix Diagonally",
        "slug": "sort-the-matrix-diagonally",
        "description": "A **matrix diagonal** is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the **matrix diagonal** starting from `mat[2][0]`, where `mat` is a `6 x 3` matrix, includes cells `mat[2][0]`, `mat[3][1]`, and `mat[4][2]`.\n\n\nGiven an `m x n` matrix `mat` of integers, sort each **matrix diagonal** in ascending order and return *the resulting matrix*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sorting",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]",
                "Output": "** [[1,1,1,1],[1,2,2,2],[1,2,3,3]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reverse Subarray To Maximize Array Value",
        "slug": "reverse-subarray-to-maximize-array-value",
        "description": "You are given an integer array `nums`. The *value* of this array is defined as the sum of `|nums[i] - nums[i + 1]|` for all `0 <= i < nums.length - 1`.\n\n\nYou are allowed to select any subarray of the given array and reverse it. You can perform this operation **only once**.\n\n\nFind maximum possible value of the final array.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums = [2,3,1,5,4]",
                "Output": "** 10",
                "Explanation": "** By reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10."
            },
            {
                "Input": "** nums = [2,4,9,24,2,1,10]",
                "Output": "** 68",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Rank Transform of an Array",
        "slug": "rank-transform-of-an-array",
        "description": "Given an array of integers\u00a0`arr`, replace each element with its rank.\n\n\nThe rank represents how large the element is. The rank has the following rules:\n\n\n Rank is an integer starting from 1.\n The larger the element, the larger the rank. If two elements are equal, their rank must be the same.\n Rank should be as small as possible.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** arr = [40,10,20,30]",
                "Output": "** [4,1,2,3]",
                "Explanation": "40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest."
            },
            {
                "Input": "** arr = [100,100,100]",
                "Output": "** [1,1,1]",
                "Explanation": "Same elements share the same rank."
            },
            {
                "Input": "** arr = [37,12,28,9,100,56,80,5,12]",
                "Output": "** [5,3,4,2,8,6,7,1,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove Palindromic Subsequences",
        "slug": "remove-palindromic-subsequences",
        "description": "You are given a string `s` consisting **only** of letters `'a'` and `'b'`. In a single step you can remove one **palindromic subsequence** from `s`.\n\n\nReturn *the **minimum** number of steps to make the given string empty*.\n\n\nA string is a **subsequence** of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does **not** necessarily need to be contiguous.\n\n\nA string is called **palindrome** if is one that reads the same backward as well as forward.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"ababa\"",
                "Output": "** 1",
                "Explanation": "** s is already a palindrome, so its entirety can be removed in a single step."
            },
            {
                "Input": "** s = \"abb\"",
                "Output": "** 2",
                "Explanation": "** \"abb\" -> \"bb\" -> \"\". \nRemove palindromic subsequence \"a\" then \"bb\"."
            },
            {
                "Input": "** s = \"baabb\"",
                "Output": "** 2",
                "Explanation": "** \"baabb\" -> \"b\" -> \"\". \nRemove palindromic subsequence \"baab\" then \"b\"."
            }
        ]
    },
    {
        "Title": "Filter Restaurants by Vegan-Friendly, Price and Distance",
        "slug": "filter-restaurants-by-vegan-friendly-price-and-distance",
        "description": "Given the array `restaurants` where \u00a0`restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]`. You have to filter the restaurants using three filters.\n\n\nThe `veganFriendly` filter will be either *true* (meaning you should only include restaurants with `veganFriendlyi` set to true)\u00a0or *false*\u00a0(meaning you can include any restaurant). In addition, you have the filters\u00a0`maxPrice` and `maxDistance`\u00a0which\u00a0are the maximum value for price and distance of restaurants you should consider respectively.\n\n\nReturn the array of restaurant ***IDs*** after filtering, ordered by **rating** from highest to lowest. For restaurants with the same rating, order them by ***id*** from highest to lowest. For simplicity `veganFriendlyi` and `veganFriendly` take value *1* when it is *true*, and *0* when it is *false*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10",
                "Output": "** [3,1,5]",
                "Explanation": "**The restaurants are:\nRestaurant 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10]\nRestaurant 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5]\nRestaurant 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4]\nRestaurant 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3]\nRestaurant 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1] \nAfter filter restaurants with veganFriendly = 1, maxPrice = 50 and maxDistance = 10 we have restaurant 3, restaurant 1 and restaurant 5 (ordered by rating from highest to lowest)."
            },
            {
                "Input": "** restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10",
                "Output": "** [4,3,2,1,5]",
                "Explanation": "** The restaurants are the same as in example 1, but in this case the filter veganFriendly = 0, therefore all restaurants are considered."
            },
            {
                "Input": "** restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3",
                "Output": "** [4,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance",
        "slug": "find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance",
        "description": "There are `n` cities numbered from `0` to `n-1`. Given the array `edges` where `edges[i] = [fromi, toi, weighti]` represents a bidirectional and weighted edge between cities `fromi` and `toi`, and given the integer `distanceThreshold`.\n\n\nReturn the city with the smallest number of cities that are reachable through some path and whose distance is **at most** `distanceThreshold`, If there are multiple such cities, return the city with the greatest number.\n\n\nNotice that the distance of a path connecting cities ***i*** and ***j*** is equal to the sum of the edges' weights along that path.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming",
            "Graph",
            "Shortest Path"
        ],
        "examples": [
            {
                "Input": "** n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4",
                "Output": "** 3",
                "Explanation": "** The figure above describes the graph.\u00a0\nThe neighboring cities at a distanceThreshold = 4 for each city are:\nCity 0 -> [City 1, City 2]\u00a0\nCity 1 -> [City 0, City 2, City 3]\u00a0\nCity 2 -> [City 0, City 1, City 3]\u00a0\nCity 3 -> [City 1, City 2]\u00a0\nCities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number."
            },
            {
                "Input": "** n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2",
                "Output": "** 0",
                "Explanation": "** The figure above describes the graph.\u00a0\nThe neighboring cities at a distanceThreshold = 2 for each city are:\nCity 0 -> [City 1]\u00a0\nCity 1 -> [City 0, City 4]\u00a0\nCity 2 -> [City 3, City 4]\u00a0\nCity 3 -> [City 2, City 4]\nCity 4 -> [City 1, City 2, City 3]\u00a0\nThe city 0 has 1 neighboring city at a distanceThreshold = 2."
            }
        ]
    },
    {
        "Title": "Minimum Difficulty of a Job Schedule",
        "slug": "minimum-difficulty-of-a-job-schedule",
        "description": "You want to schedule a list of jobs in `d` days. Jobs are dependent (i.e To work on the `ith` job, you have to finish all the jobs `j` where `0 <= j < i`).\n\n\nYou have to finish **at least** one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the `d` days. The difficulty of a day is the maximum difficulty of a job done on that day.\n\n\nYou are given an integer array `jobDifficulty` and an integer `d`. The difficulty of the `ith` job is `jobDifficulty[i]`.\n\n\nReturn *the minimum difficulty of a job schedule*. If you cannot find a schedule for the jobs return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** jobDifficulty = [6,5,4,3,2,1], d = 2",
                "Output": "** 7",
                "Explanation": "** First day you can finish the first 5 jobs, total difficulty = 6.\nSecond day you can finish the last job, total difficulty = 1.\nThe difficulty of the schedule = 6 + 1 = 7"
            }
        ]
    },
    {
        "Title": "The K Weakest Rows in a Matrix",
        "slug": "the-k-weakest-rows-in-a-matrix",
        "description": "You are given an `m x n` binary matrix `mat` of `1`'s (representing soldiers) and `0`'s (representing civilians). The soldiers are positioned **in front** of the civilians. That is, all the `1`'s will appear to the **left** of all the `0`'s in each row.\n\n\nA row `i` is **weaker** than a row `j` if one of the following is true:\n\n\n The number of soldiers in row `i` is less than the number of soldiers in row `j`.\n Both rows have the same number of soldiers and `i < j`.\n\n\nReturn *the indices of the* `k` ***weakest** rows in the matrix ordered from weakest to strongest*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Binary Search",
            "Sorting",
            "Heap (Priority Queue)",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** mat = \n[[1,1,0,0,0],\n [1,1,1,1,0],\n [1,0,0,0,0],\n [1,1,0,0,0],\n [1,1,1,1,1]], \nk = 3",
                "Output": "** [2,0,3]",
                "Explanation": "** \nThe number of soldiers in each row is: \n- Row 0: 2 \n- Row 1: 4 \n- Row 2: 1 \n- Row 3: 2 \n- Row 4: 5 \nThe rows ordered from weakest to strongest are [2,0,3,1,4]."
            },
            {
                "Input": "** mat = \n[[1,0,0,0],\n [1,1,1,1],\n [1,0,0,0],\n [1,0,0,0]], \nk = 2",
                "Output": "** [0,2]",
                "Explanation": "** \nThe number of soldiers in each row is: \n- Row 0: 1 \n- Row 1: 4 \n- Row 2: 1 \n- Row 3: 1 \nThe rows ordered from weakest to strongest are [0,2,3,1]."
            }
        ]
    },
    {
        "Title": "Reduce Array Size to The Half",
        "slug": "reduce-array-size-to-the-half",
        "description": "You are given an integer array `arr`. You can choose a set of integers and remove all the occurrences of these integers in the array.\n\n\nReturn *the minimum size of the set so that **at least** half of the integers of the array are removed*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** arr = [3,3,3,3,5,5,5,2,2,7]",
                "Output": "** 2",
                "Explanation": "** Choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array).\nPossible sets of size 2 are {3,5},{3,2},{5,2}.\nChoosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has a size greater than half of the size of the old array."
            },
            {
                "Input": "** arr = [7,7,7,7,7,7]",
                "Output": "** 1",
                "Explanation": "** The only possible set you can choose is {7}. This will make the new array empty."
            }
        ]
    },
    {
        "Title": "Maximum Product of Splitted Binary Tree",
        "slug": "maximum-product-of-splitted-binary-tree",
        "description": "Given the `root` of a binary tree, split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized.\n\n\nReturn *the maximum product of the sums of the two subtrees*. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n\nNote** that you need to maximize the answer before taking the mod and not after taking it.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2,3,4,5,6]",
                "Output": "** 110",
                "Explanation": "** Remove the red edge and get 2 binary trees with sum 11 and 10. Their product is 110 (11*10)"
            },
            {
                "Input": "** root = [1,null,2,3,4,null,null,5,6]",
                "Output": "** 90",
                "Explanation": "** Remove the red edge and get 2 binary trees with sum 15 and 6.Their product is 90 (15*6)"
            }
        ]
    },
    {
        "Title": "Jump Game V",
        "slug": "jump-game-v",
        "description": "Given an array of\u00a0integers `arr` and an integer `d`. In one step you can jump from index `i` to index:\n\n\n `i + x` where:\u00a0`i + x < arr.length` and  `0 <\u00a0x <= d`.\n `i - x` where:\u00a0`i - x >= 0` and  `0 <\u00a0x <= d`.\n\n\nIn addition, you can only jump from index `i` to index `j`\u00a0if `arr[i] > arr[j]` and `arr[i] > arr[k]` for all indices `k` between `i` and `j` (More formally `min(i,\u00a0j) < k < max(i, j)`).\n\n\nYou can choose any index of the array and start jumping. Return *the maximum number of indices*\u00a0you can visit.\n\n\nNotice that you can not jump outside of the array at any time.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2",
                "Output": "** 4",
                "Explanation": "** You can start at index 10. You can jump 10 --> 8 --> 6 --> 7 as shown.\nNote that if you start at index 6 you can only jump to index 7. You cannot jump to index 5 because 13 > 9. You cannot jump to index 4 because index 5 is between index 4 and 6 and 13 > 9.\nSimilarly You cannot jump from index 3 to index 2 or index 1."
            }
        ]
    },
    {
        "Title": "Movie Rating",
        "slug": "movie-rating",
        "description": "Table: `Movies`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| movie_id      | int     |\n| title         | varchar |\n+---------------+---------+\nmovie_id is the primary key (column with unique values) for this table.\ntitle is the name of the movie.\n\n```\n\n\u00a0\n\n\nTable: `Users`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| user_id       | int     |\n| name          | varchar |\n+---------------+---------+\nuser_id is the primary key (column with unique values) for this table.\n\n```\n\n\u00a0\n\n\nTable: `MovieRating`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| movie_id      | int     |\n| user_id       | int     |\n| rating        | int     |\n| created_at    | date    |\n+---------------+---------+\n(movie_id, user_id) is the primary key (column with unique values)\u00a0for this table.\nThis table contains the rating of a movie by a user in their review.\ncreated_at is the user's review date. \n\n```\n\n\u00a0\n\n\nWrite a solution to:\n\n\n Find the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name.\n Find the movie name with the **highest average** rating in `February 2020`. In case of a tie, return the lexicographically smaller movie name.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nMovies table:\n+-------------+--------------+\n| movie_id    |  title       |\n+-------------+--------------+\n| 1           | Avengers     |\n| 2           | Frozen 2     |\n| 3           | Joker        |\n+-------------+--------------+\nUsers table:\n+-------------+--------------+\n| user_id     |  name        |\n+-------------+--------------+\n| 1           | Daniel       |\n| 2           | Monica       |\n| 3           | Maria        |\n| 4           | James        |\n+-------------+--------------+\nMovieRating table:\n+-------------+--------------+--------------+-------------+\n| movie_id    | user_id      | rating       | created_at  |\n+-------------+--------------+--------------+-------------+\n| 1           | 1            | 3            | 2020-01-12  |\n| 1           | 2            | 4            | 2020-02-11  |\n| 1           | 3            | 2            | 2020-02-12  |\n| 1           | 4            | 1            | 2020-01-01  |\n| 2           | 1            | 5            | 2020-02-17  | \n| 2           | 2            | 2            | 2020-02-01  | \n| 2           | 3            | 2            | 2020-03-01  |\n| 3           | 1            | 3            | 2020-02-22  | \n| 3           | 2            | 4            | 2020-02-25  | \n+-------------+--------------+--------------+-------------+",
                "Output": "** \n+--------------+\n| results      |\n+--------------+\n| Daniel       |\n| Frozen 2     |\n+--------------+",
                "Explanation": "** \nDaniel and Monica have rated 3 movies (\"Avengers\", \"Frozen 2\" and \"Joker\") but Daniel is smaller lexicographically.\nFrozen 2 and Joker have a rating average of 3.5 in February but Frozen 2 is smaller lexicographically."
            }
        ]
    },
    {
        "Title": "Number of Steps to Reduce a Number to Zero",
        "slug": "number-of-steps-to-reduce-a-number-to-zero",
        "description": "Given an integer `num`, return *the number of steps to reduce it to zero*.\n\n\nIn one step, if the current number is even, you have to divide it by `2`, otherwise, you have to subtract `1` from it.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** num = 14",
                "Output": "** 6",
                "Explanation": "**\u00a0\nStep 1) 14 is even; divide by 2 and obtain 7.\u00a0\nStep 2) 7 is odd; subtract 1 and obtain 6.\nStep 3) 6 is even; divide by 2 and obtain 3.\u00a0\nStep 4) 3 is odd; subtract 1 and obtain 2.\u00a0\nStep 5) 2 is even; divide by 2 and obtain 1.\u00a0\nStep 6) 1 is odd; subtract 1 and obtain 0."
            },
            {
                "Input": "** num = 8",
                "Output": "** 4",
                "Explanation": "**\u00a0\nStep 1) 8 is even; divide by 2 and obtain 4.\u00a0\nStep 2) 4 is even; divide by 2 and obtain 2.\u00a0\nStep 3) 2 is even; divide by 2 and obtain 1.\u00a0\nStep 4) 1 is odd; subtract 1 and obtain 0."
            },
            {
                "Input": "** num = 123",
                "Output": "** 12",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
        "slug": "number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold",
        "description": "Given an array of integers `arr` and two integers `k` and `threshold`, return *the number of sub-arrays of size* `k` *and average greater than or equal to* `threshold`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4",
                "Output": "** 3",
                "Explanation": "** Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold)."
            },
            {
                "Input": "** arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5",
                "Output": "** 6",
                "Explanation": "** The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers."
            }
        ]
    },
    {
        "Title": "Angle Between Hands of a Clock",
        "slug": "angle-between-hands-of-a-clock",
        "description": "Given two numbers, `hour` and `minutes`, return *the smaller angle (in degrees) formed between the* `hour` *and the* `minute` *hand*.\n\n\nAnswers within `10-5` of the actual value will be accepted as correct.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** hour = 12, minutes = 30",
                "Output": "** 165",
                "Explanation": null
            },
            {
                "Input": "** hour = 3, minutes = 30",
                "Output": "** 75",
                "Explanation": null
            },
            {
                "Input": "** hour = 3, minutes = 15",
                "Output": "** 7.5",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Jump Game IV",
        "slug": "jump-game-iv",
        "description": "Given an array of\u00a0integers `arr`, you are initially positioned at the first index of the array.\n\n\nIn one step you can jump from index `i` to index:\n\n\n `i + 1` where:\u00a0`i + 1 < arr.length`.\n `i - 1` where:\u00a0`i - 1 >= 0`.\n `j` where: `arr[i] == arr[j]` and `i != j`.\n\n\nReturn *the minimum number of steps* to reach the **last index** of the array.\n\n\nNotice that you can not jump outside of the array at any time.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** arr = [100,-23,-23,404,100,23,23,23,3,404]",
                "Output": "** 3",
                "Explanation": "** You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array."
            },
            {
                "Input": "** arr = [7]",
                "Output": "** 0",
                "Explanation": "** Start index is the last index. You do not need to jump."
            },
            {
                "Input": "** arr = [7,6,9,6,9,6,9,7]",
                "Output": "** 1",
                "Explanation": "** You can jump directly from index 0 to index 7 which is last index of the array."
            }
        ]
    },
    {
        "Title": "Check If N and Its Double Exist",
        "slug": "check-if-n-and-its-double-exist",
        "description": "Given an array `arr` of integers, check if there exist two indices `i` and `j` such that :\n\n\n `i != j`\n `0 <= i, j < arr.length`\n `arr[i] == 2 * arr[j]`\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** arr = [10,2,5,3]",
                "Output": "** true",
                "Explanation": "** For i = 0 and j = 2, arr[i] == 10 == 2 * 5 == 2 * arr[j]"
            },
            {
                "Input": "** arr = [3,1,7,11]",
                "Output": "** false",
                "Explanation": "** There is no i and j that satisfy the conditions."
            }
        ]
    },
    {
        "Title": "Minimum Number of Steps to Make Two Strings Anagram",
        "slug": "minimum-number-of-steps-to-make-two-strings-anagram",
        "description": "You are given two strings of the same length `s` and `t`. In one step you can choose **any character** of `t` and replace it with **another character**.\n\n\nReturn *the minimum number of steps* to make `t` an anagram of `s`.\n\n\nAn **Anagram** of a string is a string that contains the same characters with a different (or the same) ordering.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** s = \"bab\", t = \"aba\"",
                "Output": "** 1",
                "Explanation": "** Replace the first 'a' in t with b, t = \"bba\" which is anagram of s."
            },
            {
                "Input": "** s = \"leetcode\", t = \"practice\"",
                "Output": "** 5",
                "Explanation": "** Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s."
            },
            {
                "Input": "** s = \"anagram\", t = \"mangaar\"",
                "Output": "** 0",
                "Explanation": "** \"anagram\" and \"mangaar\" are anagrams."
            }
        ]
    },
    {
        "Title": "Maximum Students Taking Exam",
        "slug": "maximum-students-taking-exam",
        "description": "Given a `m\u00a0* n`\u00a0matrix `seats`\u00a0\u00a0that represent seats distributions\u00a0in a classroom.\u00a0If a seat\u00a0is\u00a0broken, it is denoted by `'#'` character otherwise it is denoted by a `'.'` character.\n\n\nStudents can see the answers of those sitting next to the left, right, upper left and upper right, but he cannot see the answers of the student sitting\u00a0directly in front or behind him. Return the **maximum** number of students that can take the exam together\u00a0without any cheating being possible.\n\n\nStudents must be placed in seats in good condition.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Bit Manipulation",
            "Matrix",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** seats = [[\"#\",\".\",\"#\",\"#\",\".\",\"#\"],\n\u00a0               [\".\",\"#\",\"#\",\"#\",\"#\",\".\"],\n\u00a0               [\"#\",\".\",\"#\",\"#\",\".\",\"#\"]]",
                "Output": "** 4",
                "Explanation": "** Teacher can place 4 students in available seats so they don't cheat on the exam."
            }
        ]
    },
    {
        "Title": "Count Negative Numbers in a Sorted Matrix",
        "slug": "count-negative-numbers-in-a-sorted-matrix",
        "description": "Given a `m x n` matrix `grid` which is sorted in non-increasing order both row-wise and column-wise, return *the number of **negative** numbers in* `grid`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Binary Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]",
                "Output": "** 8",
                "Explanation": "** There are 8 negatives number in the matrix."
            },
            {
                "Input": "** grid = [[3,2],[1,0]]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Number of Events That Can Be Attended",
        "slug": "maximum-number-of-events-that-can-be-attended",
        "description": "You are given an array of `events` where `events[i] = [startDayi, endDayi]`. Every event `i` starts at `startDayi`and ends at `endDayi`.\n\n\nYou can attend an event `i` at any day `d` where `startTimei <= d <= endTimei`. You can only attend one event at any time `d`.\n\n\nReturn *the maximum number of events you can attend*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** events = [[1,2],[2,3],[3,4]]",
                "Output": "** 3",
                "Explanation": "** You can attend all the three events.\nOne way to attend them all is as shown.\nAttend the first event on day 1.\nAttend the second event on day 2.\nAttend the third event on day 3."
            }
        ]
    },
    {
        "Title": "Construct Target Array With Multiple Sums",
        "slug": "construct-target-array-with-multiple-sums",
        "description": "You are given an array `target` of n integers. From a starting array `arr` consisting of `n` 1's, you may perform the following procedure :\n\n\n let `x` be the sum of all elements currently in your array.\n choose index `i`, such that `0 <= i < n` and set the value of `arr` at index `i` to `x`.\n You may repeat this procedure as many times as needed.\n\n\nReturn `true` *if it is possible to construct the* `target` *array from* `arr`*, otherwise, return* `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** target = [9,3,5]",
                "Output": "** true",
                "Explanation": "** Start with arr = [1, 1, 1] \n[1, 1, 1], sum = 3 choose index 1\n[1, 3, 1], sum = 5 choose index 2\n[1, 3, 5], sum = 9 choose index 0\n[9, 3, 5] Done"
            },
            {
                "Input": "** target = [1,1,1,2]",
                "Output": "** false",
                "Explanation": "** Impossible to create target array from [1,1,1,1]."
            },
            {
                "Input": "** target = [8,5]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sort Integers by The Number of 1 Bits",
        "slug": "sort-integers-by-the-number-of-1-bits",
        "description": "You are given an integer array `arr`. Sort the integers in the array\u00a0in ascending order by the number of `1`'s\u00a0in their binary representation and in case of two or more integers have the same number of `1`'s you have to sort them in ascending order.\n\n\nReturn *the array after sorting it*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Bit Manipulation",
            "Sorting",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** arr = [0,1,2,3,4,5,6,7,8]",
                "Output": "** [0,1,2,4,8,3,5,6,7]\n**Explantion:** [0] is the only integer with 0 bits.\n[1,2,4,8] all have 1 bit.\n[3,5,6] have 2 bits.\n[7] has 3 bits.\nThe sorted array by bits is [0,1,2,4,8,3,5,6,7]",
                "Explanation": null
            },
            {
                "Input": "** arr = [1024,512,256,128,64,32,16,8,4,2,1]",
                "Output": "** [1,2,4,8,16,32,64,128,256,512,1024]\n**Explantion:** All integers have 1 bit in the binary representation, you should just sort them in ascending order.",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Apply Discount Every n Orders",
        "slug": "apply-discount-every-n-orders",
        "description": "There is a supermarket that is frequented by many customers. The products sold at the supermarket are represented as two parallel integer arrays `products` and `prices`, where the `ith` product has an ID of `products[i]` and a price of `prices[i]`.\n\n\nWhen a customer is paying, their bill is represented as two parallel integer arrays `product` and `amount`, where the `jth` product they purchased has an ID of `product[j]`, and `amount[j]` is how much of the product they bought. Their subtotal is calculated as the sum of each `amount[j] * (price of the jth product)`.\n\n\nThe supermarket decided to have a sale. Every `nth` customer paying for their groceries will be given a **percentage discount**. The discount amount is given by `discount`, where they will be given `discount` percent off their subtotal. More formally, if their subtotal is `bill`, then they would actually pay `bill * ((100 - discount) / 100)`.\n\n\nImplement the `Cashier` class:\n\n\n `Cashier(int n, int discount, int[] products, int[] prices)` Initializes the object with `n`, the `discount`, and the `products` and their `prices`.\n `double getBill(int[] product, int[] amount)` Returns the final total of the bill with the discount applied (if any). Answers within `10-5` of the actual value will be accepted.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Design"
        ],
        "examples": [
            {
                "Input": "[\"Cashier\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\"]\n[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]",
                "Output": "[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]",
                "Explanation": "Cashier cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);\ncashier.getBill([1,2],[1,2]);                        // return 500.0. 1st customer, no discount.\n                                                     // bill = 1 * 100 + 2 * 200 = 500.\ncashier.getBill([3,7],[10,10]);                      // return 4000.0. 2nd customer, no discount.\n                                                     // bill = 10 * 300 + 10 * 100 = 4000.\ncashier.getBill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]);    // return 800.0. 3rd customer, 50% discount.\n                                                     // Original bill = 1600\n                                                     // Actual bill = 1600 * ((100 - 50) / 100) = 800.\ncashier.getBill([4],[10]);                           // return 4000.0. 4th customer, no discount.\ncashier.getBill([7,3],[10,10]);                      // return 4000.0. 5th customer, no discount.\ncashier.getBill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // return 7350.0. 6th customer, 50% discount.\n                                                     // Original bill = 14700, but with\n                                                     // Actual bill = 14700 * ((100 - 50) / 100) = 7350.\ncashier.getBill([2,3,5],[5,3,2]);                    // return 2500.0.  7th customer, no discount."
            }
        ]
    },
    {
        "Title": "Number of Substrings Containing All Three Characters",
        "slug": "number-of-substrings-containing-all-three-characters",
        "description": "Given a string `s`\u00a0consisting only of characters *a*, *b* and *c*.\n\n\nReturn the number of substrings containing **at least**\u00a0one occurrence of all these characters *a*, *b* and *c*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** s = \"abcabc\"",
                "Output": "** 10",
                "Explanation": "** The substrings containing\u00a0at least\u00a0one occurrence of the characters\u00a0*a*,\u00a0*b*\u00a0and\u00a0*c are \"*abc*\", \"*abca*\", \"*abcab*\", \"*abcabc*\", \"*bca*\", \"*bcab*\", \"*bcabc*\", \"*cab*\", \"*cabc*\"* and *\"*abc*\"* (**again**)*.*"
            },
            {
                "Input": "** s = \"aaacb\"",
                "Output": "** 3",
                "Explanation": "** The substrings containing\u00a0at least\u00a0one occurrence of the characters\u00a0*a*,\u00a0*b*\u00a0and\u00a0*c are \"*aaacb*\", \"*aacb*\"* and *\"*acb*\".*"
            },
            {
                "Input": "** s = \"abc\"",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count All Valid Pickup and Delivery Options",
        "slug": "count-all-valid-pickup-and-delivery-options",
        "description": "Given `n` orders, each order consists of a pickup and a delivery service.\n\n\nCount all valid pickup/delivery possible sequences such that delivery(i) is always after of\u00a0pickup(i).\u00a0\n\n\nSince the answer\u00a0may be too large,\u00a0return it modulo\u00a010^9 + 7.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Combinatorics"
        ],
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** 1",
                "Explanation": "** Unique order (P1, D1), Delivery 1 always is after of Pickup 1."
            },
            {
                "Input": "** n = 2",
                "Output": "** 6",
                "Explanation": "** All possible orders: \n(P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).\nThis is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2."
            },
            {
                "Input": "** n = 3",
                "Output": "** 90",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Days Between Two Dates",
        "slug": "number-of-days-between-two-dates",
        "description": "Write a program to count the number of days between two dates.\n\n\nThe two dates are given as strings, their format is `YYYY-MM-DD`\u00a0as shown in the examples.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "String"
        ],
        "examples": [
            {
                "Input": "** date1 = \"2019-06-29\", date2 = \"2019-06-30\"",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** date1 = \"2020-01-15\", date2 = \"2019-12-31\"",
                "Output": "** 15",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Validate Binary Tree Nodes",
        "slug": "validate-binary-tree-nodes",
        "description": "You have `n` binary tree nodes numbered from `0` to `n - 1` where node `i` has two children `leftChild[i]` and `rightChild[i]`, return `true` if and only if **all** the given nodes form **exactly one** valid binary tree.\n\n\nIf node `i` has no left child then `leftChild[i]` will equal `-1`, similarly for the right child.\n\n\nNote that the nodes have no values and that we only use the node numbers in this problem.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** n = 2, leftChild = [1,0], rightChild = [-1,-1]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Closest Divisors",
        "slug": "closest-divisors",
        "description": "Given an integer `num`, find the closest two integers in absolute difference whose product equals\u00a0`num + 1`\u00a0or `num + 2`.\n\n\nReturn the two integers in any order.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** num = 8",
                "Output": "** [3,3]",
                "Explanation": "** For num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen."
            },
            {
                "Input": "** num = 123",
                "Output": "** [5,25]",
                "Explanation": null
            },
            {
                "Input": "** num = 999",
                "Output": "** [40,25]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Largest Multiple of Three",
        "slug": "largest-multiple-of-three",
        "description": "Given an array of digits `digits`, return *the largest multiple of **three** that can be formed by concatenating some of the given digits in **any order***. If there is no answer return an empty string.\n\n\nSince the answer may not fit in an integer data type, return the answer as a string. Note that the returning answer must not contain unnecessary leading zeros.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** digits = [8,1,9]",
                "Output": "** \"981\"",
                "Explanation": null
            },
            {
                "Input": "** digits = [8,6,7,1,0]",
                "Output": "** \"8760\"",
                "Explanation": null
            },
            {
                "Input": "** digits = [1]",
                "Output": "** \"\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "How Many Numbers Are Smaller Than the Current Number",
        "slug": "how-many-numbers-are-smaller-than-the-current-number",
        "description": "Given the array `nums`, for each `nums[i]` find out how many numbers in the array are smaller than it. That is, for each `nums[i]` you have to count the number of valid `j's`\u00a0such that\u00a0`j != i` **and** `nums[j] < nums[i]`.\n\n\nReturn the answer in an array.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [8,1,2,2,3]",
                "Output": "** [4,0,1,1,3]",
                "Explanation": "** \nFor nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). \nFor nums[1]=1 does not exist any smaller number than it.\nFor nums[2]=2 there exist one smaller number than it (1). \nFor nums[3]=2 there exist one smaller number than it (1). \nFor nums[4]=3 there exist three smaller numbers than it (1, 2 and 2)."
            },
            {
                "Input": "** nums = [6,5,4,8]",
                "Output": "** [2,1,0,3]",
                "Explanation": null
            },
            {
                "Input": "** nums = [7,7,7,7]",
                "Output": "** [0,0,0,0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Rank Teams by Votes",
        "slug": "rank-teams-by-votes",
        "description": "In a special ranking system, each voter gives a rank from highest to lowest to all teams participating in the competition.\n\n\nThe ordering of teams is decided by who received the most position-one votes. If two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. If two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter.\n\n\nYou are given an array of strings `votes` which is the votes of all voters in the ranking systems. Sort all teams according to the ranking system described above.\n\n\nReturn *a string of all teams **sorted** by the ranking system*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Sorting",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** votes = [\"ABC\",\"ACB\",\"ABC\",\"ACB\",\"ACB\"]",
                "Output": "** \"ACB\"",
                "Explanation": "** \nTeam A was ranked first place by 5 voters. No other team was voted as first place, so team A is the first team.\nTeam B was ranked second by 2 voters and ranked third by 3 voters.\nTeam C was ranked second by 3 voters and ranked third by 2 voters.\nAs most of the voters ranked C second, team C is the second team, and team B is the third."
            },
            {
                "Input": "** votes = [\"WXYZ\",\"XYZW\"]",
                "Output": "** \"XWYZ\"",
                "Explanation": "**\nX is the winner due to the tie-breaking rule. X has the same votes as W for the first position, but X has one vote in the second position, while W does not have any votes in the second position."
            },
            {
                "Input": "** votes = [\"ZMNAGUEDSJYLBOPHRQICWFXTVK\"]",
                "Output": "** \"ZMNAGUEDSJYLBOPHRQICWFXTVK\"",
                "Explanation": "** Only one voter, so their votes are used for the ranking."
            }
        ]
    },
    {
        "Title": "Linked List in Binary Tree",
        "slug": "linked-list-in-binary-tree",
        "description": "Given a binary tree `root` and a\u00a0linked list with\u00a0`head`\u00a0as the first node.\u00a0\n\n\nReturn True if all the elements in the linked list starting from the `head` correspond to some *downward path* connected in the binary tree\u00a0otherwise return False.\n\n\nIn this context downward path means a path that starts at some node and goes downwards.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]",
                "Output": "** false",
                "Explanation": "** There is no path in the binary tree that contains all the elements of the linked list from head."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Make at Least One Valid Path in a Grid",
        "slug": "minimum-cost-to-make-at-least-one-valid-path-in-a-grid",
        "description": "Given an `m x n` grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of `grid[i][j]` can be:\n\n\n `1` which means go to the cell to the right. (i.e go from `grid[i][j]` to `grid[i][j + 1]`)\n `2` which means go to the cell to the left. (i.e go from `grid[i][j]` to `grid[i][j - 1]`)\n `3` which means go to the lower cell. (i.e go from `grid[i][j]` to `grid[i + 1][j]`)\n `4` which means go to the upper cell. (i.e go from `grid[i][j]` to `grid[i - 1][j]`)\n\n\nNotice that there could be some signs on the cells of the grid that point outside the grid.\n\n\nYou will initially start at the upper left cell `(0, 0)`. A valid path in the grid is a path that starts from the upper left cell `(0, 0)` and ends at the bottom-right cell `(m - 1, n - 1)` following the signs on the grid. The valid path does not have to be the shortest.\n\n\nYou can modify the sign on a cell with `cost = 1`. You can modify the sign on a cell **one time only**.\n\n\nReturn *the minimum cost to make the grid have at least one valid path*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Breadth-First Search",
            "Graph",
            "Heap (Priority Queue)",
            "Matrix",
            "Shortest Path"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]",
                "Output": "** 3",
                "Explanation": "** You will start at point (0, 0).\nThe path to (3, 3) is as follows. (0, 0) --> (0, 1) --> (0, 2) --> (0, 3) change the arrow to down with cost = 1 --> (1, 3) --> (1, 2) --> (1, 1) --> (1, 0) change the arrow to down with cost = 1 --> (2, 0) --> (2, 1) --> (2, 2) --> (2, 3) change the arrow to down with cost = 1 --> (3, 3)\nThe total cost = 3."
            },
            {
                "Input": "** grid = [[1,1,3],[3,2,2],[1,1,4]]",
                "Output": "** 0",
                "Explanation": "** You can follow the path from (0, 0) to (2, 2)."
            },
            {
                "Input": "** grid = [[1,2],[4,3]]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Increasing Decreasing String",
        "slug": "increasing-decreasing-string",
        "description": "You are given a string `s`. Reorder the string using the following algorithm:\n\n\n1. Pick the **smallest** character from `s` and **append** it to the result.\n2. Pick the **smallest** character from `s` which is greater than the last appended character to the result and **append** it.\n3. Repeat step 2 until you cannot pick more characters.\n4. Pick the **largest** character from `s` and **append** it to the result.\n5. Pick the **largest** character from `s` which is smaller than the last appended character to the result and **append** it.\n6. Repeat step 5 until you cannot pick more characters.\n7. Repeat the steps from 1 to 6 until you pick all characters from `s`.\n\n\nIn each step, If the smallest or the largest character appears more than once you can choose any occurrence and append it to the result.\n\n\nReturn *the result string after sorting* `s` *with this algorithm*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** s = \"aaaabbbbcccc\"",
                "Output": "** \"abccbaabccba\"",
                "Explanation": "** After steps 1, 2 and 3 of the first iteration, result = \"abc\"\nAfter steps 4, 5 and 6 of the first iteration, result = \"abccba\"\nFirst iteration is done. Now s = \"aabbcc\" and we go back to step 1\nAfter steps 1, 2 and 3 of the second iteration, result = \"abccbaabc\"\nAfter steps 4, 5 and 6 of the second iteration, result = \"abccbaabccba\""
            },
            {
                "Input": "** s = \"rat\"",
                "Output": "** \"art\"",
                "Explanation": "** The word \"rat\" becomes \"art\" after re-ordering it with the mentioned algorithm."
            }
        ]
    },
    {
        "Title": "Find the Longest Substring Containing Vowels in Even Counts",
        "slug": "find-the-longest-substring-containing-vowels-in-even-counts",
        "description": "Given the string `s`, return the size of the longest substring containing each vowel an even number of times. That is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Bit Manipulation",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** s = \"eleetminicoworoep\"",
                "Output": "** 13",
                "Explanation": "** The longest substring is \"leetminicowor\" which contains two each of the vowels: **e**, **i** and **o** and zero of the vowels: **a** and **u**."
            },
            {
                "Input": "** s = \"leetcodeisgreat\"",
                "Output": "** 5",
                "Explanation": "** The longest substring is \"leetc\" which contains two e's."
            },
            {
                "Input": "** s = \"bcbcbc\"",
                "Output": "** 6",
                "Explanation": "** In this case, the given string \"bcbcbc\" is the longest because all vowels: **a**, **e**, **i**, **o** and **u** appear zero times."
            }
        ]
    },
    {
        "Title": "Longest ZigZag Path in a Binary Tree",
        "slug": "longest-zigzag-path-in-a-binary-tree",
        "description": "You are given the `root` of a binary tree.\n\n\nA ZigZag path for a binary tree is defined as follow:\n\n\n Choose **any** node in the binary tree and a direction (right or left).\n If the current direction is right, move to the right child of the current node; otherwise, move to the left child.\n Change the direction from right to left or from left to right.\n Repeat the second and third steps until you can't move in the tree.\n\n\nZigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).\n\n\nReturn *the longest **ZigZag** path contained in that tree*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1]",
                "Output": "** 3",
                "Explanation": "** Longest ZigZag path in blue nodes (right -> left -> right)."
            },
            {
                "Input": "** root = [1,1,1,null,1,null,null,1,1,null,1]",
                "Output": "** 4",
                "Explanation": "** Longest ZigZag path in blue nodes (left -> right -> left -> right)."
            }
        ]
    },
    {
        "Title": "Maximum Sum BST in Binary Tree",
        "slug": "maximum-sum-bst-in-binary-tree",
        "description": "Given a **binary tree** `root`, return *the maximum sum of all keys of **any** sub-tree which is also a Binary Search Tree (BST)*.\n\n\nAssume a BST is defined as follows:\n\n\n The left subtree of a node contains only nodes with keys **less than** the node's key.\n The right subtree of a node contains only nodes with keys **greater than** the node's key.\n Both the left and right subtrees must also be binary search trees.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]",
                "Output": "** 20",
                "Explanation": "** Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3."
            },
            {
                "Input": "** root = [4,3,null,1,2]",
                "Output": "** 2",
                "Explanation": "** Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2."
            }
        ]
    },
    {
        "Title": "Generate a String With Characters That Have Odd Counts",
        "slug": "generate-a-string-with-characters-that-have-odd-counts",
        "description": "Given an\u00a0integer `n`, *return a string with `n`\u00a0characters such that each character in such string occurs **an odd number of times***.\n\n\nThe returned string must contain only lowercase English letters. If there are multiples valid strings, return **any** of them. \u00a0\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** \"pppz\"",
                "Explanation": "** \"pppz\" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as \"ohhh\" and \"love\"."
            },
            {
                "Input": "** n = 2",
                "Output": "** \"xy\"",
                "Explanation": "** \"xy\" is a valid string since the characters 'x' and 'y' occur once. Note that there are many other valid strings such as \"ag\" and \"ur\"."
            },
            {
                "Input": "** n = 7",
                "Output": "** \"holasss\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Times Binary String Is Prefix-Aligned",
        "slug": "number-of-times-binary-string-is-prefix-aligned",
        "description": "You have a **1-indexed** binary string of length `n` where all the bits are `0` initially. We will flip all the bits of this binary string (i.e., change them from `0` to `1`) one by one. You are given a **1-indexed** integer array `flips` where `flips[i]` indicates that the bit at index `i` will be flipped in the `ith` step.\n\n\nA binary string is **prefix-aligned** if, after the `ith` step, all the bits in the **inclusive** range `[1, i]` are ones and all the other bits are zeros.\n\n\nReturn *the number of times the binary string is **prefix-aligned** during the flipping process*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** flips = [3,2,4,1,5]",
                "Output": "** 2",
                "Explanation": "** The binary string is initially \"00000\".\nAfter applying step 1: The string becomes \"00100\", which is not prefix-aligned.\nAfter applying step 2: The string becomes \"01100\", which is not prefix-aligned.\nAfter applying step 3: The string becomes \"01110\", which is not prefix-aligned.\nAfter applying step 4: The string becomes \"11110\", which is prefix-aligned.\nAfter applying step 5: The string becomes \"11111\", which is prefix-aligned.\nWe can see that the string was prefix-aligned 2 times, so we return 2."
            },
            {
                "Input": "** flips = [4,1,2,3]",
                "Output": "** 1",
                "Explanation": "** The binary string is initially \"0000\".\nAfter applying step 1: The string becomes \"0001\", which is not prefix-aligned.\nAfter applying step 2: The string becomes \"1001\", which is not prefix-aligned.\nAfter applying step 3: The string becomes \"1101\", which is not prefix-aligned.\nAfter applying step 4: The string becomes \"1111\", which is prefix-aligned.\nWe can see that the string was prefix-aligned 1 time, so we return 1."
            }
        ]
    },
    {
        "Title": "Time Needed to Inform All Employees",
        "slug": "time-needed-to-inform-all-employees",
        "description": "A company has `n` employees with a unique ID for each employee from `0` to `n - 1`. The head of the company is the one with `headID`.\n\n\nEach employee has one direct manager given in the `manager` array where `manager[i]` is the direct manager of the `i-th` employee, `manager[headID] = -1`. Also, it is guaranteed that the subordination relationships have a tree structure.\n\n\nThe head of the company wants to inform all the company employees of an urgent piece of news. He will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news.\n\n\nThe `i-th` employee needs `informTime[i]` minutes to inform all of his direct subordinates (i.e., After informTime[i] minutes, all his direct subordinates can start spreading the news).\n\n\nReturn *the number of minutes* needed to inform all the employees about the urgent news.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]",
                "Output": "** 1",
                "Explanation": "** The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all.\nThe tree structure of the employees in the company is shown."
            }
        ]
    },
    {
        "Title": "Frog Position After T Seconds",
        "slug": "frog-position-after-t-seconds",
        "description": "Given an undirected tree consisting of `n` vertices numbered from `1` to `n`. A frog starts jumping from **vertex 1**. In one second, the frog jumps from its current vertex to another **unvisited** vertex if they are directly connected. The frog can not jump back to a visited vertex. In case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. Otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex.\n\n\nThe edges of the undirected tree are given in the array `edges`, where `edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai` and `bi`.\n\n\nReturn the probability that after `t` seconds the frog is on the vertex `target`.* Answers within `10-5` of the actual answer will be accepted.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4",
                "Output": "** 0.16666666666666666",
                "Explanation": "** The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after **second 1** and then jumping with 1/2 probability to vertex 4 after **second 2**. Thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 = 0.16666666666666666."
            }
        ]
    },
    {
        "Title": "Replace Employee ID With The Unique Identifier",
        "slug": "replace-employee-id-with-the-unique-identifier",
        "description": "Table: `Employees`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| name          | varchar |\n+---------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains the id and the name of an employee in a company.\n\n```\n\n\u00a0\n\n\nTable: `EmployeeUNI`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| unique_id     | int     |\n+---------------+---------+\n(id, unique_id) is the primary key (combination of columns with unique values) for this table.\nEach row of this table contains the id and the corresponding unique id of an employee in the company.\n\n```\n\n\u00a0\n\n\nWrite a solution to show the **unique ID** of each user, If a user does not have a unique ID replace just show `null`.\n\n\nReturn the result table in **any** order.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nEmployees table:\n+----+----------+\n| id | name     |\n+----+----------+\n| 1  | Alice    |\n| 7  | Bob      |\n| 11 | Meir     |\n| 90 | Winston  |\n| 3  | Jonathan |\n+----+----------+\nEmployeeUNI table:\n+----+-----------+\n| id | unique_id |\n+----+-----------+\n| 3  | 1         |\n| 11 | 2         |\n| 90 | 3         |\n+----+-----------+",
                "Output": "** \n+-----------+----------+\n| unique_id | name     |\n+-----------+----------+\n| null      | Alice    |\n| null      | Bob      |\n| 2         | Meir     |\n| 3         | Winston  |\n| 1         | Jonathan |\n+-----------+----------+",
                "Explanation": "** \nAlice and Bob do not have a unique ID, We will show null instead.\nThe unique ID of Meir is 2.\nThe unique ID of Winston is 3.\nThe unique ID of Jonathan is 1."
            }
        ]
    },
    {
        "Title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
        "slug": "find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree",
        "description": "Given two binary trees `original` and `cloned` and given a reference to a node `target` in the original tree.\n\n\nThe `cloned` tree is a **copy of** the `original` tree.\n\n\nReturn *a reference to the same node* in the `cloned` tree.\n\n\nNote** that you are **not allowed** to change any of the two trees or the `target` node and the answer **must be** a reference to a node in the `cloned` tree.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** tree = [7,4,3,null,null,6,19], target = 3",
                "Output": "** 3",
                "Explanation": "** In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree."
            },
            {
                "Input": "** tree = [7], target =  7",
                "Output": "** 7",
                "Explanation": null
            },
            {
                "Input": "** tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Lucky Numbers in a Matrix",
        "slug": "lucky-numbers-in-a-matrix",
        "description": "Given an `m x n` matrix of **distinct** numbers, return *all **lucky numbers** in the matrix in **any** order*.\n\n\nA **lucky number** is an element of the matrix such that it is the minimum element in its row and maximum in its column.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** matrix = [[3,7,8],[9,11,13],[15,16,17]]",
                "Output": "** [15]",
                "Explanation": "** 15 is the only lucky number since it is the minimum in its row and the maximum in its column."
            },
            {
                "Input": "** matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]",
                "Output": "** [12]",
                "Explanation": "** 12 is the only lucky number since it is the minimum in its row and the maximum in its column."
            },
            {
                "Input": "** matrix = [[7,8],[1,2]]",
                "Output": "** [7]",
                "Explanation": "** 7 is the only lucky number since it is the minimum in its row and the maximum in its column."
            }
        ]
    },
    {
        "Title": "Design a Stack With Increment Operation",
        "slug": "design-a-stack-with-increment-operation",
        "description": "Design a stack that supports increment operations on its elements.\n\n\nImplement the `CustomStack` class:\n\n\n `CustomStack(int maxSize)` Initializes the object with `maxSize` which is the maximum number of elements in the stack.\n `void push(int x)` Adds `x` to the top of the stack if the stack has not reached the `maxSize`.\n `int pop()` Pops and returns the top of the stack or `-1` if the stack is empty.\n `void inc(int k, int val)` Increments the bottom `k` elements of the stack by `val`. If there are less than `k` elements in the stack, increment all the elements in the stack.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Stack",
            "Design"
        ],
        "examples": [
            {
                "Input": "[\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]",
                "Output": "[null,null,null,2,null,null,null,null,null,103,202,201,-1]",
                "Explanation": "CustomStack stk = new CustomStack(3); // Stack is Empty []\nstk.push(1);                          // stack becomes [1]\nstk.push(2);                          // stack becomes [1, 2]\nstk.pop();                            // return 2 --> Return top of the stack 2, stack becomes [1]\nstk.push(2);                          // stack becomes [1, 2]\nstk.push(3);                          // stack becomes [1, 2, 3]\nstk.push(4);                          // stack still [1, 2, 3], Do not add another elements as size is 4\nstk.increment(5, 100);                // stack becomes [101, 102, 103]\nstk.increment(2, 100);                // stack becomes [201, 202, 103]\nstk.pop();                            // return 103 --> Return top of the stack 103, stack becomes [201, 202]\nstk.pop();                            // return 202 --> Return top of the stack 202, stack becomes [201]\nstk.pop();                            // return 201 --> Return top of the stack 201, stack becomes []\nstk.pop();                            // return -1 --> Stack is empty return -1."
            }
        ]
    },
    {
        "Title": "Balance a Binary Search Tree",
        "slug": "balance-a-binary-search-tree",
        "description": "Given the `root` of a binary search tree, return *a **balanced** binary search tree with the same node values*. If there is more than one answer, return **any of them**.\n\n\nA binary search tree is **balanced** if the depth of the two subtrees of every node never differs by more than `1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Divide and Conquer",
            "Greedy",
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,null,2,null,3,null,4,null,null]",
                "Output": "** [2,1,3,null,null,null,4]",
                "Explanation": "** This is not the only correct answer, [3,1,4,null,2] is also correct."
            },
            {
                "Input": "** root = [2,1,3]",
                "Output": "** [2,1,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Performance of a Team",
        "slug": "maximum-performance-of-a-team",
        "description": "You are given two integers `n` and `k` and two integer arrays `speed` and `efficiency` both of length `n`. There are `n` engineers numbered from `1` to `n`. `speed[i]` and `efficiency[i]` represent the speed and efficiency of the `ith` engineer respectively.\n\n\nChoose **at most** `k` different engineers out of the `n` engineers to form a team with the maximum **performance**.\n\n\nThe performance of a team is the sum of its engineers' speeds multiplied by the minimum efficiency among its engineers.\n\n\nReturn *the maximum performance of this team*. Since the answer can be a huge number, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2",
                "Output": "** 60",
                "Explanation": "** \nWe have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60."
            },
            {
                "Input": "** n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3",
                "Output": "** 68",
                "Explanation": "**This is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68."
            },
            {
                "Input": "** n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4",
                "Output": "** 72",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find the Distance Value Between Two Arrays",
        "slug": "find-the-distance-value-between-two-arrays",
        "description": "Given two integer arrays `arr1` and `arr2`, and the integer `d`, *return the distance value between the two arrays*.\n\n\nThe distance value is defined as the number of elements `arr1[i]` such that there is not any element `arr2[j]` where `|arr1[i]-arr2[j]| <= d`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2",
                "Output": "** 2",
                "Explanation": "** \nFor arr1[0]=4 we have: \n|4-10|=6 > d=2 \n|4-9|=5 > d=2 \n|4-1|=3 > d=2 \n|4-8|=4 > d=2 \nFor arr1[1]=5 we have: \n|5-10|=5 > d=2 \n|5-9|=4 > d=2 \n|5-1|=4 > d=2 \n|5-8|=3 > d=2\nFor arr1[2]=8 we have:\n**|8-10|=2 <= d=2**\n**|8-9|=1 <= d=2**\n|8-1|=7 > d=2\n**|8-8|=0 <= d=2**"
            },
            {
                "Input": "** arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Cinema Seat Allocation",
        "slug": "cinema-seat-allocation",
        "description": "![](https://assets.leetcode.com/uploads/2020/02/14/cinema_seats_1.png)\n\n\nA cinema\u00a0has `n`\u00a0rows of seats, numbered from 1 to `n`\u00a0and there are ten\u00a0seats in each row, labelled from 1\u00a0to 10\u00a0as shown in the figure above.\n\n\nGiven the array `reservedSeats` containing the numbers of seats already reserved, for example, `reservedSeats[i] = [3,8]`\u00a0means the seat located in row **3** and labelled with **8**\u00a0is already reserved.\n\n\nReturn the maximum number of four-person groups\u00a0you can assign on the cinema\u00a0seats.* A four-person group\u00a0occupies four\u00a0adjacent seats **in one single row**. Seats across an aisle (such as [3,3]\u00a0and [3,4]) are not considered to be adjacent, but there is an exceptional case\u00a0on which an aisle split\u00a0a four-person group, in that case, the aisle split\u00a0a four-person group in the middle,\u00a0which means to have two people on each side.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]",
                "Output": "** 4",
                "Explanation": "** The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group."
            }
        ]
    },
    {
        "Title": "Sort Integers by The Power Value",
        "slug": "sort-integers-by-the-power-value",
        "description": "The power of an integer `x` is defined as the number of steps needed to transform `x` into `1` using the following steps:\n\n\n if `x` is even then `x = x / 2`\n if `x` is odd then `x = 3 * x + 1`\n\n\nFor example, the power of `x = 3` is `7` because `3` needs `7` steps to become `1` (`3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1`).\n\n\nGiven three integers `lo`, `hi` and `k`. The task is to sort all integers in the interval `[lo, hi]` by the power value in **ascending order**, if two or more integers have **the same** power value sort them by **ascending order**.\n\n\nReturn the `kth` integer in the range `[lo, hi]` sorted by the power value.\n\n\nNotice that for any integer `x` `(lo <= x <= hi)` it is **guaranteed** that `x` will transform into `1` using these steps and that the power of `x` is will **fit** in a 32-bit signed integer.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming",
            "Memoization",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** lo = 12, hi = 15, k = 2",
                "Output": "** 13",
                "Explanation": "** The power of 12 is 9 (12 --> 6 --> 3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1)\nThe power of 13 is 9\nThe power of 14 is 17\nThe power of 15 is 17\nThe interval sorted by the power value [12,13,14,15]. For k = 2 answer is the second element which is 13.\nNotice that 12 and 13 have the same power value and we sorted them in ascending order. Same for 14 and 15."
            },
            {
                "Input": "** lo = 7, hi = 11, k = 4",
                "Output": "** 7",
                "Explanation": "** The power array corresponding to the interval [7, 8, 9, 10, 11] is [16, 3, 19, 6, 14].\nThe interval sorted by power is [8, 10, 11, 7, 9].\nThe fourth number in the sorted array is 7."
            }
        ]
    },
    {
        "Title": "Pizza With 3n Slices",
        "slug": "pizza-with-3n-slices",
        "description": "There is a pizza with `3n` slices of varying size, you and your friends will take slices of pizza as follows:\n\n\n You will pick **any** pizza slice.\n Your friend Alice will pick the next slice in the anti-clockwise direction of your pick.\n Your friend Bob will pick the next slice in the clockwise direction of your pick.\n Repeat until there are no more slices of pizzas.\n\n\nGiven an integer array `slices` that represent the sizes of the pizza slices in a clockwise direction, return *the maximum possible sum of slice sizes that you can pick*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** slices = [1,2,3,4,5,6]",
                "Output": "** 10",
                "Explanation": "** Pick pizza slice of size 4, Alice and Bob will pick slices with size 3 and 5 respectively. Then Pick slices with size 6, finally Alice and Bob will pick slice of size 2 and 1 respectively. Total = 4 + 6."
            },
            {
                "Input": "** slices = [8,9,8,6,1,1]",
                "Output": "** 16",
                "Explanation": "** Pick pizza slice of size 8 in each turn. If you pick slice with size 9 your partners will pick slices of size 8."
            }
        ]
    },
    {
        "Title": "Create Target Array in the Given Order",
        "slug": "create-target-array-in-the-given-order",
        "description": "Given two arrays of integers\u00a0`nums` and `index`. Your task is to create *target* array under the following rules:\n\n\n Initially *target* array is empty.\n From left to right read nums[i] and index[i], insert at index `index[i]`\u00a0the value `nums[i]`\u00a0in\u00a0*target* array.\n Repeat the previous step until there are no elements to read in `nums` and `index.`\n\n\nReturn the *target* array.\n\n\nIt is guaranteed that the insertion operations will be valid.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [0,1,2,3,4], index = [0,1,2,2,1]",
                "Output": "** [0,4,1,3,2]",
                "Explanation": "**\nnums       index     target\n0            0        [0]\n1            1        [0,1]\n2            2        [0,1,2]\n3            2        [0,1,3,2]\n4            1        [0,4,1,3,2]"
            },
            {
                "Input": "** nums = [1,2,3,4,0], index = [0,1,2,3,0]",
                "Output": "** [0,1,2,3,4]",
                "Explanation": "**\nnums       index     target\n1            0        [1]\n2            1        [1,2]\n3            2        [1,2,3]\n4            3        [1,2,3,4]\n0            0        [0,1,2,3,4]"
            },
            {
                "Input": "** nums = [1], index = [0]",
                "Output": "** [1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Four Divisors",
        "slug": "four-divisors",
        "description": "Given an integer array `nums`, return *the sum of divisors of the integers in that array that have exactly four divisors*. If there is no such integer in the array, return `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math"
        ],
        "examples": [
            {
                "Input": "** nums = [21,4,7]",
                "Output": "** 32",
                "Explanation": "** \n21 has 4 divisors: 1, 3, 7, 21\n4 has 3 divisors: 1, 2, 4\n7 has 2 divisors: 1, 7\nThe answer is the sum of divisors of 21 only."
            },
            {
                "Input": "** nums = [21,21]",
                "Output": "** 64",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Check if There is a Valid Path in a Grid",
        "slug": "check-if-there-is-a-valid-path-in-a-grid",
        "description": "You are given an `m x n` `grid`. Each cell of `grid` represents a street. The street of `grid[i][j]` can be:\n\n\n `1` which means a street connecting the left cell and the right cell.\n `2` which means a street connecting the upper cell and the lower cell.\n `3` which means a street connecting the left cell and the lower cell.\n `4` which means a street connecting the right cell and the lower cell.\n `5` which means a street connecting the left cell and the upper cell.\n `6` which means a street connecting the right cell and the upper cell.\n\n\n![](https://assets.leetcode.com/uploads/2020/03/05/main.png)\nYou will initially start at the street of the upper-left cell `(0, 0)`. A valid path in the grid is a path that starts from the upper left cell `(0, 0)` and ends at the bottom-right cell `(m - 1, n - 1)`. **The path should only follow the streets**.\n\n\nNotice** that you are **not allowed** to change any street.\n\n\nReturn `true` *if there is a valid path in the grid or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[2,4,3],[6,5,2]]",
                "Output": "** true",
                "Explanation": "** As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1)."
            },
            {
                "Input": "** grid = [[1,2,1],[1,2,1]]",
                "Output": "** false",
                "Explanation": "** As shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0)"
            }
        ]
    },
    {
        "Title": "Longest Happy Prefix",
        "slug": "longest-happy-prefix",
        "description": "A string is called a **happy prefix** if is a **non-empty** prefix which is also a suffix (excluding itself).\n\n\nGiven a string `s`, return *the **longest happy prefix** of* `s`. Return an empty string `\"\"` if no such prefix exists.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Rolling Hash",
            "String Matching",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "** s = \"level\"",
                "Output": "** \"l\"",
                "Explanation": "** s contains 4 prefix excluding itself (\"l\", \"le\", \"lev\", \"leve\"), and suffix (\"l\", \"el\", \"vel\", \"evel\"). The largest prefix which is also suffix is given by \"l\"."
            },
            {
                "Input": "** s = \"ababab\"",
                "Output": "** \"abab\"",
                "Explanation": "** \"abab\" is the largest prefix which is also suffix. They can overlap in the original string."
            }
        ]
    },
    {
        "Title": "Capital Gain/Loss",
        "slug": "capital-gainloss",
        "description": "Table: `Stocks`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| stock_name    | varchar |\n| operation     | enum    |\n| operation_day | int     |\n| price         | int     |\n+---------------+---------+\n(stock_name, operation_day) is the primary key (combination of columns with unique values) for this table.\nThe operation column is an ENUM (category) of type ('Sell', 'Buy')\nEach row of this table indicates that the stock which has stock_name had an operation on the day operation_day with the price.\nIt is guaranteed that each 'Sell' operation for a stock has a corresponding 'Buy' operation in a previous day. It is also guaranteed that each 'Buy' operation for a stock has a corresponding 'Sell' operation in an upcoming day.\n\n```\n\n\u00a0\n\n\nWrite a solution to report the **Capital gain/loss** for each stock.\n\n\nThe **Capital gain/loss** of a stock is the total gain or loss after buying and selling the stock one or many times.\n\n\nReturn the result table in **any order**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nStocks table:\n+---------------+-----------+---------------+--------+\n| stock_name    | operation | operation_day | price  |\n+---------------+-----------+---------------+--------+\n| Leetcode      | Buy       | 1             | 1000   |\n| Corona Masks  | Buy       | 2             | 10     |\n| Leetcode      | Sell      | 5             | 9000   |\n| Handbags      | Buy       | 17            | 30000  |\n| Corona Masks  | Sell      | 3             | 1010   |\n| Corona Masks  | Buy       | 4             | 1000   |\n| Corona Masks  | Sell      | 5             | 500    |\n| Corona Masks  | Buy       | 6             | 1000   |\n| Handbags      | Sell      | 29            | 7000   |\n| Corona Masks  | Sell      | 10            | 10000  |\n+---------------+-----------+---------------+--------+",
                "Output": "** \n+---------------+-------------------+\n| stock_name    | capital_gain_loss |\n+---------------+-------------------+\n| Corona Masks  | 9500              |\n| Leetcode      | 8000              |\n| Handbags      | -23000            |\n+---------------+-------------------+",
                "Explanation": "** \nLeetcode stock was bought at day 1 for 1000$ and was sold at day 5 for 9000$. Capital gain = 9000 - 1000 = 8000$.\nHandbags stock was bought at day 17 for 30000$ and was sold at day 29 for 7000$. Capital loss = 7000 - 30000 = -23000$.\nCorona Masks stock was bought at day 1 for 10$ and was sold at day 3 for 1010$. It was bought again at day 4 for 1000$ and was sold at day 5 for 500$. At last, it was bought at day 6 for 1000$ and was sold at day 10 for 10000$. Capital gain/loss is the sum of capital gains/losses for each ('Buy' --> 'Sell') operation = (1010 - 10) + (500 - 1000) + (10000 - 1000) = 1000 - 500 + 9000 = 9500$."
            }
        ]
    },
    {
        "Title": "Find Lucky Integer in an Array",
        "slug": "find-lucky-integer-in-an-array",
        "description": "Given an array of integers `arr`, a **lucky integer** is an integer that has a frequency in the array equal to its value.\n\n\nReturn *the largest **lucky integer** in the array*. If there is no **lucky integer** return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** arr = [2,2,3,4]",
                "Output": "** 2",
                "Explanation": "** The only lucky number in the array is 2 because frequency[2] == 2."
            },
            {
                "Input": "** arr = [1,2,2,3,3,3]",
                "Output": "** 3",
                "Explanation": "** 1, 2 and 3 are all lucky numbers, return the largest of them."
            },
            {
                "Input": "** arr = [2,2,2,3,3]",
                "Output": "** -1",
                "Explanation": "** There are no lucky numbers in the array."
            }
        ]
    },
    {
        "Title": "Count Number of Teams",
        "slug": "count-number-of-teams",
        "description": "There are `n` soldiers standing in a line. Each soldier is assigned a **unique** `rating` value.\n\n\nYou have to form a team of 3 soldiers amongst them under the following rules:\n\n\n Choose 3 soldiers with index (`i`, `j`, `k`) with rating (`rating[i]`, `rating[j]`, `rating[k]`).\n A team is valid if: (`rating[i] < rating[j] < rating[k]`) or (`rating[i] > rating[j] > rating[k]`) where (`0 <= i < j < k < n`).\n\n\nReturn the number of teams you can form given the conditions. (soldiers can be part of multiple teams).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Binary Indexed Tree"
        ],
        "examples": [
            {
                "Input": "** rating = [2,5,3,4,1]",
                "Output": "** 3",
                "Explanation": "** We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1)."
            },
            {
                "Input": "** rating = [2,1,3]",
                "Output": "** 0",
                "Explanation": "** We can't form any team given the conditions."
            },
            {
                "Input": "** rating = [1,2,3,4]",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Design Underground System",
        "slug": "design-underground-system",
        "description": "An underground railway system is keeping track of customer travel times between different stations. They are using this data to calculate the average time it takes to travel from one station to another.\n\n\nImplement the `UndergroundSystem` class:\n\n\n `void checkIn(int id, string stationName, int t)`\n\t+ A customer with a card ID equal to `id`, checks in at the station `stationName` at time `t`.\n\t+ A customer can only be checked into one place at a time.\n `void checkOut(int id, string stationName, int t)`\n\t+ A customer with a card ID equal to `id`, checks out from the station `stationName` at time `t`.\n `double getAverageTime(string startStation, string endStation)`\n\t+ Returns the average time it takes to travel from `startStation` to `endStation`.\n\t+ The average time is computed from all the previous traveling times from `startStation` to `endStation` that happened **directly**, meaning a check in at `startStation` followed by a check out from `endStation`.\n\t+ The time it takes to travel from `startStation` to `endStation` **may be different** from the time it takes to travel from `endStation` to `startStation`.\n\t+ There will be at least one customer that has traveled from `startStation` to `endStation` before `getAverageTime` is called.\n\n\nYou may assume all calls to the `checkIn` and `checkOut` methods are consistent. If a customer checks in at time `t1` then checks out at time `t2`, then `t1 < t2`. All events happen in chronological order.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Design"
        ],
        "examples": [
            {
                "Input": "[\"UndergroundSystem\",\"checkIn\",\"checkIn\",\"checkIn\",\"checkOut\",\"checkOut\",\"checkOut\",\"getAverageTime\",\"getAverageTime\",\"checkIn\",\"getAverageTime\",\"checkOut\",\"getAverageTime\"]\n[[],[45,\"Leyton\",3],[32,\"Paradise\",8],[27,\"Leyton\",10],[45,\"Waterloo\",15],[27,\"Waterloo\",20],[32,\"Cambridge\",22],[\"Paradise\",\"Cambridge\"],[\"Leyton\",\"Waterloo\"],[10,\"Leyton\",24],[\"Leyton\",\"Waterloo\"],[10,\"Waterloo\",38],[\"Leyton\",\"Waterloo\"]]",
                "Output": "[null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000]",
                "Explanation": "UndergroundSystem undergroundSystem = new UndergroundSystem();\nundergroundSystem.checkIn(45, \"Leyton\", 3);\nundergroundSystem.checkIn(32, \"Paradise\", 8);\nundergroundSystem.checkIn(27, \"Leyton\", 10);\nundergroundSystem.checkOut(45, \"Waterloo\", 15);  // Customer 45 \"Leyton\" -> \"Waterloo\" in 15-3 = 12\nundergroundSystem.checkOut(27, \"Waterloo\", 20);  // Customer 27 \"Leyton\" -> \"Waterloo\" in 20-10 = 10\nundergroundSystem.checkOut(32, \"Cambridge\", 22); // Customer 32 \"Paradise\" -> \"Cambridge\" in 22-8 = 14\nundergroundSystem.getAverageTime(\"Paradise\", \"Cambridge\"); // return 14.00000. One trip \"Paradise\" -> \"Cambridge\", (14) / 1 = 14\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 11.00000. Two trips \"Leyton\" -> \"Waterloo\", (10 + 12) / 2 = 11\nundergroundSystem.checkIn(10, \"Leyton\", 24);\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 11.00000\nundergroundSystem.checkOut(10, \"Waterloo\", 38);  // Customer 10 \"Leyton\" -> \"Waterloo\" in 38-24 = 14\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 12.00000. Three trips \"Leyton\" -> \"Waterloo\", (10 + 12 + 14) / 3 = 12"
            },
            {
                "Input": "[\"UndergroundSystem\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\"]\n[[],[10,\"Leyton\",3],[10,\"Paradise\",8],[\"Leyton\",\"Paradise\"],[5,\"Leyton\",10],[5,\"Paradise\",16],[\"Leyton\",\"Paradise\"],[2,\"Leyton\",21],[2,\"Paradise\",30],[\"Leyton\",\"Paradise\"]]",
                "Output": "[null,null,null,5.00000,null,null,5.50000,null,null,6.66667]",
                "Explanation": "UndergroundSystem undergroundSystem = new UndergroundSystem();\nundergroundSystem.checkIn(10, \"Leyton\", 3);\nundergroundSystem.checkOut(10, \"Paradise\", 8); // Customer 10 \"Leyton\" -> \"Paradise\" in 8-3 = 5\nundergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 5.00000, (5) / 1 = 5\nundergroundSystem.checkIn(5, \"Leyton\", 10);\nundergroundSystem.checkOut(5, \"Paradise\", 16); // Customer 5 \"Leyton\" -> \"Paradise\" in 16-10 = 6\nundergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 5.50000, (5 + 6) / 2 = 5.5\nundergroundSystem.checkIn(2, \"Leyton\", 21);\nundergroundSystem.checkOut(2, \"Paradise\", 30); // Customer 2 \"Leyton\" -> \"Paradise\" in 30-21 = 9\nundergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 6.66667, (5 + 6 + 9) / 3 = 6.66667"
            }
        ]
    },
    {
        "Title": "Find All Good Strings",
        "slug": "find-all-good-strings",
        "description": "Given the strings `s1` and `s2` of size `n` and the string `evil`, return *the number of **good** strings*.\n\n\nA **good** string has size `n`, it is alphabetically greater than or equal to `s1`, it is alphabetically smaller than or equal to `s2`, and it does not contain the string `evil` as a substring. Since the answer can be a huge number, return this **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming",
            "String Matching"
        ],
        "examples": [
            {
                "Input": "** n = 2, s1 = \"aa\", s2 = \"da\", evil = \"b\"",
                "Output": "** 51",
                "Explanation": "** There are 25 good strings starting with 'a': \"aa\",\"ac\",\"ad\",...,\"az\". Then there are 25 good strings starting with 'c': \"ca\",\"cc\",\"cd\",...,\"cz\" and finally there is one good string starting with 'd': \"da\"."
            },
            {
                "Input": "** n = 8, s1 = \"leetcode\", s2 = \"leetgoes\", evil = \"leet\"",
                "Output": "** 0",
                "Explanation": "** All strings greater than or equal to s1 and smaller than or equal to s2 start with the prefix \"leet\", therefore, there is not any good string."
            },
            {
                "Input": "** n = 2, s1 = \"gx\", s2 = \"gz\", evil = \"x\"",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count Largest Group",
        "slug": "count-largest-group",
        "description": "You are given an integer `n`.\n\n\nEach number from `1` to `n` is grouped according to the sum of its digits.\n\n\nReturn *the number of groups that have the largest size*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "Math"
        ],
        "examples": [
            {
                "Input": "** n = 13",
                "Output": "** 4",
                "Explanation": "** There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:\n[1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9].\nThere are 4 groups with largest size."
            },
            {
                "Input": "** n = 2",
                "Output": "** 2",
                "Explanation": "** There are 2 groups [1], [2] of size 1."
            }
        ]
    },
    {
        "Title": "Construct K Palindrome Strings",
        "slug": "construct-k-palindrome-strings",
        "description": "Given a string `s` and an integer `k`, return `true` *if you can use all the characters in* `s` *to construct* `k` *palindrome strings or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Greedy",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** s = \"annabelle\", k = 2",
                "Output": "** true",
                "Explanation": "** You can construct two palindromes using all characters in s.\nSome possible constructions \"anna\" + \"elble\", \"anbna\" + \"elle\", \"anellena\" + \"b\""
            },
            {
                "Input": "** s = \"leetcode\", k = 3",
                "Output": "** false",
                "Explanation": "** It is impossible to construct 3 palindromes using all the characters of s."
            },
            {
                "Input": "** s = \"true\", k = 4",
                "Output": "** true",
                "Explanation": "** The only possible solution is to put each character in a separate string."
            }
        ]
    },
    {
        "Title": "Circle and Rectangle Overlapping",
        "slug": "circle-and-rectangle-overlapping",
        "description": "You are given a circle represented as `(radius, xCenter, yCenter)` and an axis-aligned rectangle represented as `(x1, y1, x2, y2)`, where `(x1, y1)` are the coordinates of the bottom-left corner, and `(x2, y2)` are the coordinates of the top-right corner of the rectangle.\n\n\nReturn `true` *if the circle and rectangle are overlapped otherwise return* `false`. In other words, check if there is **any** point `(xi, yi)` that belongs to the circle and the rectangle at the same time.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Geometry"
        ],
        "examples": [
            {
                "Input": "** radius = 1, xCenter = 0, yCenter = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1",
                "Output": "** true",
                "Explanation": "** Circle and rectangle share the point (1,0)."
            },
            {
                "Input": "** radius = 1, xCenter = 0, yCenter = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reducing Dishes",
        "slug": "reducing-dishes",
        "description": "A chef has collected data on the `satisfaction` level of his `n` dishes. Chef can cook any dish in 1 unit of time.\n\n\nLike-time coefficient** of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level i.e. `time[i] * satisfaction[i]`.\n\n\nReturn the maximum sum of **like-time coefficient** that the chef can obtain after preparing some amount of dishes.\n\n\nDishes can be prepared in **any** order and the chef can discard some dishes to get this maximum value.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** satisfaction = [-1,-8,0,5,-9]",
                "Output": "** 14",
                "Explanation": "** After Removing the second and last dish, the maximum total **like-time coefficient** will be equal to (-1*1 + 0*2 + 5*3 = 14).\nEach dish is prepared in one unit of time."
            },
            {
                "Input": "** satisfaction = [4,3,2]",
                "Output": "** 20",
                "Explanation": "** Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)"
            },
            {
                "Input": "** satisfaction = [-1,-4,-5]",
                "Output": "** 0",
                "Explanation": "** People do not like the dishes. No dish is prepared."
            }
        ]
    },
    {
        "Title": "Minimum Subsequence in Non-Increasing Order",
        "slug": "minimum-subsequence-in-non-increasing-order",
        "description": "Given the array `nums`, obtain a subsequence of the array whose sum of elements is **strictly greater** than the sum of the non\u00a0included elements in such subsequence.\u00a0\n\n\nIf there are multiple solutions, return the subsequence with **minimum size** and if there still exist multiple solutions, return the subsequence with the **maximum total sum** of all its elements. A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array.\u00a0\n\n\nNote that the solution with the given constraints is guaranteed to be\u00a0**unique**. Also return the answer sorted in **non-increasing** order.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [4,3,10,9,8]",
                "Output": "** [10,9]",
                "Explanation": "** The subsequences [10,9] and [10,8] are minimal such that the sum of their elements is strictly greater than the sum of elements not included. However, the subsequence [10,9] has the maximum total sum of its elements."
            },
            {
                "Input": "** nums = [4,4,7,6,7]",
                "Output": "** [7,7,6]",
                "Explanation": "** The subsequence [7,7] has the sum of its elements equal to 14 which is not strictly greater than the sum of elements not included (14 = 4 + 4 + 6). Therefore, the subsequence [7,6,7] is the minimal satisfying the conditions. Note the subsequence has to be returned in non-increasing order."
            }
        ]
    },
    {
        "Title": "Number of Steps to Reduce a Number in Binary Representation to One",
        "slug": "number-of-steps-to-reduce-a-number-in-binary-representation-to-one",
        "description": "Given the binary representation of an integer as a string `s`, return *the number of steps to reduce it to* `1` *under the following rules*:\n\n\n If the current number is even, you have to divide it by `2`.\n If the current number is odd, you have to add `1` to it.\n\n\nIt is guaranteed that you can always reach one for all test cases.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** s = \"1101\"",
                "Output": "** 6",
                "Explanation": "** \"1101\" corressponds to number 13 in their decimal representation.\nStep 1) 13 is odd, add 1 and obtain 14.\u00a0\nStep 2) 14 is even, divide by 2 and obtain 7.\nStep 3) 7 is odd, add 1 and obtain 8.\nStep 4) 8 is even, divide by 2 and obtain 4.\u00a0 \nStep 5) 4 is even, divide by 2 and obtain 2.\u00a0\nStep 6) 2 is even, divide by 2 and obtain 1."
            },
            {
                "Input": "** s = \"10\"",
                "Output": "** 1",
                "Explanation": "** \"10\" corresponds to number 2 in their decimal representation.\nStep 1) 2 is even, divide by 2 and obtain 1."
            },
            {
                "Input": "** s = \"1\"",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Happy String",
        "slug": "longest-happy-string",
        "description": "A string `s` is called **happy** if it satisfies the following conditions:\n\n\n `s` only contains the letters `'a'`, `'b'`, and `'c'`.\n `s` does not contain any of `\"aaa\"`, `\"bbb\"`, or `\"ccc\"` as a substring.\n `s` contains **at most** `a` occurrences of the letter `'a'`.\n `s` contains **at most** `b` occurrences of the letter `'b'`.\n `s` contains **at most** `c` occurrences of the letter `'c'`.\n\n\nGiven three integers `a`, `b`, and `c`, return *the **longest possible happy** string*. If there are multiple longest happy strings, return *any of them*. If there is no such string, return *the empty string* `\"\"`.\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Greedy",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** a = 1, b = 1, c = 7",
                "Output": "** \"ccaccbcc\"",
                "Explanation": "** \"ccbccacc\" would also be a correct answer."
            },
            {
                "Input": "** a = 7, b = 1, c = 0",
                "Output": "** \"aabaa\"",
                "Explanation": "** It is the only correct answer in this case."
            }
        ]
    },
    {
        "Title": "Stone Game III",
        "slug": "stone-game-iii",
        "description": "Alice and Bob continue their games with piles of stones. There are several stones **arranged in a row**, and each stone has an associated value which is an integer given in the array `stoneValue`.\n\n\nAlice and Bob take turns, with Alice starting first. On each player's turn, that player can take `1`, `2`, or `3` stones from the **first** remaining stones in the row.\n\n\nThe score of each player is the sum of the values of the stones taken. The score of each player is `0` initially.\n\n\nThe objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. The game continues until all the stones have been taken.\n\n\nAssume Alice and Bob **play optimally**.\n\n\nReturn `\"Alice\"` *if Alice will win,* `\"Bob\"` *if Bob will win, or* `\"Tie\"` *if they will end the game with the same score*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Game Theory"
        ],
        "examples": [
            {
                "Input": "** stoneValue = [1,2,3,7]",
                "Output": "** \"Bob\"",
                "Explanation": "** Alice will always lose. Her best move will be to take three piles and the score become 6. Now the score of Bob is 7 and Bob wins."
            },
            {
                "Input": "** stoneValue = [1,2,3,-9]",
                "Output": "** \"Alice\"",
                "Explanation": "** Alice must choose all the three piles at the first move to win and leave Bob with negative score.\nIf Alice chooses one pile her score will be 1 and the next move Bob's score becomes 5. In the next move, Alice will take the pile with value = -9 and lose.\nIf Alice chooses two piles her score will be 3 and the next move Bob's score becomes 3. In the next move, Alice will take the pile with value = -9 and also lose.\nRemember that both play optimally so here Alice will choose the scenario that makes her win."
            },
            {
                "Input": "** stoneValue = [1,2,3,6]",
                "Output": "** \"Tie\"",
                "Explanation": "** Alice cannot win this game. She can end the game in a draw if she decided to choose all the first three piles, otherwise she will lose."
            }
        ]
    },
    {
        "Title": "Top Travellers",
        "slug": "top-travellers",
        "description": "Table: `Users`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| name          | varchar |\n+---------------+---------+\nid is the column with unique values for this table.\nname is the name of the user.\n\n```\n\n\u00a0\n\n\nTable: `Rides`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| user_id       | int     |\n| distance      | int     |\n+---------------+---------+\nid is the column with unique values for this table.\nuser_id is the id of the user who traveled the distance \"distance\".\n\n```\n\n\u00a0\n\n\nWrite a solution\u00a0to report the distance traveled by each user.\n\n\nReturn the result table ordered by `travelled_distance` in **descending order**, if two or more users traveled the same distance, order them by their `name` in **ascending order**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nUsers table:\n+------+-----------+\n| id   | name      |\n+------+-----------+\n| 1    | Alice     |\n| 2    | Bob       |\n| 3    | Alex      |\n| 4    | Donald    |\n| 7    | Lee       |\n| 13   | Jonathan  |\n| 19   | Elvis     |\n+------+-----------+\nRides table:\n+------+----------+----------+\n| id   | user_id  | distance |\n+------+----------+----------+\n| 1    | 1        | 120      |\n| 2    | 2        | 317      |\n| 3    | 3        | 222      |\n| 4    | 7        | 100      |\n| 5    | 13       | 312      |\n| 6    | 19       | 50       |\n| 7    | 7        | 120      |\n| 8    | 19       | 400      |\n| 9    | 7        | 230      |\n+------+----------+----------+",
                "Output": "** \n+----------+--------------------+\n| name     | travelled_distance |\n+----------+--------------------+\n| Elvis    | 450                |\n| Lee      | 450                |\n| Bob      | 317                |\n| Jonathan | 312                |\n| Alex     | 222                |\n| Alice    | 120                |\n| Donald   | 0                  |\n+----------+--------------------+",
                "Explanation": "** \nElvis and Lee traveled 450 miles, Elvis is the top traveler as his name is alphabetically smaller than Lee.\nBob, Jonathan, Alex, and Alice have only one ride and we just order them by the total distances of the ride.\nDonald did not have any rides, the distance traveled by him is 0."
            }
        ]
    },
    {
        "Title": "String Matching in an Array",
        "slug": "string-matching-in-an-array",
        "description": "Given an array of string `words`, return *all strings in* `words` *that is a **substring** of another word*. You can return the answer in **any order**.\n\n\nA **substring** is a contiguous sequence of characters within a string\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "String",
            "String Matching"
        ],
        "examples": [
            {
                "Input": "** words = [\"mass\",\"as\",\"hero\",\"superhero\"]",
                "Output": "** [\"as\",\"hero\"]",
                "Explanation": "** \"as\" is substring of \"mass\" and \"hero\" is substring of \"superhero\".\n[\"hero\",\"as\"] is also a valid answer."
            },
            {
                "Input": "** words = [\"leetcode\",\"et\",\"code\"]",
                "Output": "** [\"et\",\"code\"]",
                "Explanation": "** \"et\", \"code\" are substring of \"leetcode\"."
            },
            {
                "Input": "** words = [\"blue\",\"green\",\"bu\"]",
                "Output": "** []",
                "Explanation": "** No string of words is substring of another string."
            }
        ]
    },
    {
        "Title": "Queries on a Permutation With Key",
        "slug": "queries-on-a-permutation-with-key",
        "description": "Given the array `queries` of positive integers between `1` and `m`, you have to process all `queries[i]` (from `i=0` to `i=queries.length-1`) according to the following rules:\n\n\n In the beginning, you have the permutation `P=[1,2,3,...,m]`.\n For the current `i`, find the position of `queries[i]` in the permutation `P` (**indexing from 0**) and then move this at the beginning of the permutation `P`. Notice that the position of `queries[i]` in `P` is the result for `queries[i]`.\n\n\nReturn an array containing the result for the given `queries`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Indexed Tree",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** queries = [3,1,2,1], m = 5",
                "Output": "** [2,1,2,1]",
                "Explanation": "** The queries are processed as follow: \nFor i=0: queries[i]=3, P=[1,2,3,4,5], position of 3 in P is **2**, then we move 3 to the beginning of P resulting in P=[3,1,2,4,5]. \nFor i=1: queries[i]=1, P=[3,1,2,4,5], position of 1 in P is **1**, then we move 1 to the beginning of P resulting in P=[1,3,2,4,5]. \nFor i=2: queries[i]=2, P=[1,3,2,4,5], position of 2 in P is **2**, then we move 2 to the beginning of P resulting in P=[2,1,3,4,5]. \nFor i=3: queries[i]=1, P=[2,1,3,4,5], position of 1 in P is **1**, then we move 1 to the beginning of P resulting in P=[1,2,3,4,5]. \nTherefore, the array containing the result is [2,1,2,1]."
            },
            {
                "Input": "** queries = [4,1,2,2], m = 4",
                "Output": "** [3,1,2,0]",
                "Explanation": null
            },
            {
                "Input": "** queries = [7,5,5,8,3], m = 8",
                "Output": "** [6,5,0,7,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "HTML Entity Parser",
        "slug": "html-entity-parser",
        "description": "HTML entity parser** is the parser that takes HTML code as input and replace all the entities of the special characters by the characters itself.\n\n\nThe special characters and their entities for HTML are:\n\n\n **Quotation Mark:** the entity is `&quot;` and symbol character is `\"`.\n **Single Quote Mark:** the entity is `&apos;` and symbol character is `'`.\n **Ampersand:** the entity is `&amp;` and symbol character is `&`.\n **Greater Than Sign:** the entity is `&gt;` and symbol character is `>`.\n **Less Than Sign:** the entity is `&lt;` and symbol character is `<`.\n **Slash:** the entity is `&frasl;` and symbol character is `/`.\n\n\nGiven the input `text` string to the HTML parser, you have to implement the entity parser.\n\n\nReturn *the text after replacing the entities by the special characters*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** text = \"&amp; is an HTML entity but &ambassador; is not.\"",
                "Output": "** \"& is an HTML entity but &ambassador; is not.\"",
                "Explanation": "** The parser will replace the &amp; entity by &"
            },
            {
                "Input": "** text = \"and I quote: &quot;...&quot;\"",
                "Output": "** \"and I quote: \\\"...\\\"\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Ways to Paint N \u00d7 3 Grid",
        "slug": "number-of-ways-to-paint-n-3-grid",
        "description": "You have a `grid` of size `n x 3` and you want to paint each cell of the grid with exactly one of the three colors: **Red**, **Yellow,** or **Green** while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color).\n\n\nGiven `n` the number of rows of the grid, return *the number of ways* you can paint this `grid`. As the answer may grow large, the answer **must be** computed modulo `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** 12",
                "Explanation": "** There are 12 possible way to paint the grid as shown."
            }
        ]
    },
    {
        "Title": "Minimum Value to Get Positive Step by Step Sum",
        "slug": "minimum-value-to-get-positive-step-by-step-sum",
        "description": "Given an array of integers\u00a0`nums`, you start with an initial **positive** value *startValue**.\n\n\nIn each iteration, you calculate the step by step sum of *startValue*\u00a0plus\u00a0elements in `nums`\u00a0(from left to right).\n\n\nReturn the minimum **positive** value of\u00a0*startValue* such that the step by step sum is never less than 1.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [-3,2,-3,4,2]",
                "Output": "** 5",
                "Explanation": "** If you choose startValue = 4, in the third iteration your step by step sum is less than 1.\n**step by step sum**\n**startValue = 4 | startValue = 5 | nums**\n  (4 **-3** ) = 1  | (5 **-3** ) = 2    |  -3\n  (1 **+2** ) = 3  | (2 **+2** ) = 4    |   2\n  (3 **-3** ) = 0  | (4 **-3** ) = 1    |  -3\n  (0 **+4** ) = 4  | (1 **+4** ) = 5    |   4\n  (4 **+2** ) = 6  | (5 **+2** ) = 7    |   2"
            },
            {
                "Input": "** nums = [1,2]",
                "Output": "** 1",
                "Explanation": "** Minimum start value should be positive."
            },
            {
                "Input": "** nums = [1,-2,-3]",
                "Output": "** 5",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find the Minimum Number of Fibonacci Numbers Whose Sum Is K",
        "slug": "find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k",
        "description": "Given an integer\u00a0`k`, *return the minimum number of Fibonacci numbers whose sum is equal to* `k`. The same Fibonacci number can be used multiple times.\n\n\nThe Fibonacci numbers are defined as:\n\n\n `F1 = 1`\n `F2 = 1`\n `Fn = Fn-1 + Fn-2` for `n > 2.`\n\n\nIt is guaranteed that for the given constraints we can always find such Fibonacci numbers that sum up to `k`.\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** k = 7",
                "Output": "** 2",
                "Explanation": "** The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ... \nFor k = 7 we can use 2 + 5 = 7."
            },
            {
                "Input": "** k = 10",
                "Output": "** 2",
                "Explanation": "** For k = 10 we can use 2 + 8 = 10."
            },
            {
                "Input": "** k = 19",
                "Output": "** 3",
                "Explanation": "** For k = 19 we can use 1 + 5 + 13 = 19."
            }
        ]
    },
    {
        "Title": "The k-th Lexicographical String of All Happy Strings of Length n",
        "slug": "the-k-th-lexicographical-string-of-all-happy-strings-of-length-n",
        "description": "A **happy string** is a string that:\n\n\n consists only of letters of the set `['a', 'b', 'c']`.\n `s[i] != s[i + 1]` for all values of `i` from `1` to `s.length - 1` (string is 1-indexed).\n\n\nFor example, strings **\"abc\", \"ac\", \"b\"** and **\"abcbabcbcb\"** are all happy strings and strings **\"aa\", \"baa\"** and **\"ababbc\"** are not happy strings.\n\n\nGiven two integers `n` and `k`, consider a list of all happy strings of length `n` sorted in lexicographical order.\n\n\nReturn *the kth string* of this list or return an **empty string** if there are less than `k` happy strings of length `n`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** n = 1, k = 3",
                "Output": "** \"c\"",
                "Explanation": "** The list [\"a\", \"b\", \"c\"] contains all happy strings of length 1. The third string is \"c\"."
            },
            {
                "Input": "** n = 1, k = 4",
                "Output": "** \"\"",
                "Explanation": "** There are only 3 happy strings of length 1."
            },
            {
                "Input": "** n = 3, k = 9",
                "Output": "** \"cab\"",
                "Explanation": "** There are 12 different happy string of length 3 [\"aba\", \"abc\", \"aca\", \"acb\", \"bab\", \"bac\", \"bca\", \"bcb\", \"cab\", \"cac\", \"cba\", \"cbc\"]. You will find the 9th string = \"cab\""
            }
        ]
    },
    {
        "Title": "Restore The Array",
        "slug": "restore-the-array",
        "description": "A program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits `s` and all we know is that all integers in the array were in the range `[1, k]` and there are no leading zeros in the array.\n\n\nGiven the string `s` and the integer `k`, return *the number of the possible arrays that can be printed as* `s` *using the mentioned program*. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"1000\", k = 10000",
                "Output": "** 1",
                "Explanation": "** The only possible array is [1000]"
            },
            {
                "Input": "** s = \"1000\", k = 10",
                "Output": "** 0",
                "Explanation": "** There cannot be an array that was printed this way and has all integer >= 1 and <= 10."
            },
            {
                "Input": "** s = \"1317\", k = 2000",
                "Output": "** 8",
                "Explanation": "** Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]"
            }
        ]
    },
    {
        "Title": "Reformat The String",
        "slug": "reformat-the-string",
        "description": "You are given an alphanumeric string `s`. (**Alphanumeric string** is a string consisting of lowercase English letters and digits).\n\n\nYou have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. That is, no two adjacent characters have the same type.\n\n\nReturn *the reformatted string* or return **an empty string** if it is impossible to reformat the string.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"a0b1c2\"",
                "Output": "** \"0a1b2c\"",
                "Explanation": "** No two adjacent characters have the same type in \"0a1b2c\". \"a0b1c2\", \"0a1b2c\", \"0c2a1b\" are also valid permutations."
            },
            {
                "Input": "** s = \"leetcode\"",
                "Output": "** \"\"",
                "Explanation": "** \"leetcode\" has only characters so we cannot separate them by digits."
            },
            {
                "Input": "** s = \"1229857369\"",
                "Output": "** \"\"",
                "Explanation": "** \"1229857369\" has only digits so we cannot separate them by characters."
            }
        ]
    },
    {
        "Title": "Display Table of Food Orders in a Restaurant",
        "slug": "display-table-of-food-orders-in-a-restaurant",
        "description": "Given\u00a0the array `orders`, which represents the orders that customers have done in a restaurant. More specifically\u00a0`orders[i]=[customerNamei,tableNumberi,foodItemi]` where `customerNamei` is the name of the customer, `tableNumberi`\u00a0is the table customer sit at, and `foodItemi`\u00a0is the item customer orders.\n\n\nReturn the restaurant's \u201c**display table**\u201d*. The \u201c**display table**\u201d is a table whose row entries denote how many of each food item each table ordered. The first column is the table number and the remaining columns correspond to each food item in alphabetical order. The first row should be a header whose first column is \u201cTable\u201d, followed by the names of the food items. Note that the customer names are not part of the table. Additionally, the rows should be sorted in numerically increasing order.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Sorting",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** orders = [[\"David\",\"3\",\"Ceviche\"],[\"Corina\",\"10\",\"Beef Burrito\"],[\"David\",\"3\",\"Fried Chicken\"],[\"Carla\",\"5\",\"Water\"],[\"Carla\",\"5\",\"Ceviche\"],[\"Rous\",\"3\",\"Ceviche\"]]",
                "Output": "** [[\"Table\",\"Beef Burrito\",\"Ceviche\",\"Fried Chicken\",\"Water\"],[\"3\",\"0\",\"2\",\"1\",\"0\"],[\"5\",\"0\",\"1\",\"0\",\"1\"],[\"10\",\"1\",\"0\",\"0\",\"0\"]]",
                "Explanation": "**The displaying table looks like:\r\n**Table,Beef Burrito,Ceviche,Fried Chicken,Water**\r\n3    ,0           ,2      ,1            ,0\r\n5    ,0           ,1      ,0            ,1\r\n10   ,1           ,0      ,0            ,0\r\nFor the table 3: David orders \"Ceviche\" and \"Fried Chicken\", and Rous orders \"Ceviche\".\r\nFor the table 5: Carla orders \"Water\" and \"Ceviche\".\r\nFor the table 10: Corina orders \"Beef Burrito\"."
            },
            {
                "Input": "** orders = [[\"James\",\"12\",\"Fried Chicken\"],[\"Ratesh\",\"12\",\"Fried Chicken\"],[\"Amadeus\",\"12\",\"Fried Chicken\"],[\"Adam\",\"1\",\"Canadian Waffles\"],[\"Brianna\",\"1\",\"Canadian Waffles\"]]",
                "Output": "** [[\"Table\",\"Canadian Waffles\",\"Fried Chicken\"],[\"1\",\"2\",\"0\"],[\"12\",\"0\",\"3\"]]",
                "Explanation": "** \r\nFor the table 1: Adam and Brianna order \"Canadian Waffles\".\r\nFor the table 12: James, Ratesh and Amadeus order \"Fried Chicken\"."
            },
            {
                "Input": "** orders = [[\"Laura\",\"2\",\"Bean Burrito\"],[\"Jhon\",\"2\",\"Beef Burrito\"],[\"Melissa\",\"2\",\"Soda\"]]",
                "Output": "** [[\"Table\",\"Bean Burrito\",\"Beef Burrito\",\"Soda\"],[\"2\",\"1\",\"1\",\"1\"]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Number of Frogs Croaking",
        "slug": "minimum-number-of-frogs-croaking",
        "description": "You are given the string `croakOfFrogs`, which represents a combination of the string `\"croak\"` from different frogs, that is, multiple frogs can croak at the same time, so multiple `\"croak\"` are mixed.\n\n\nReturn the minimum number of* different *frogs to finish all the croaks in the given string.\n\n\nA valid `\"croak\"` means a frog is printing five letters `'c'`, `'r'`, `'o'`, `'a'`, and `'k'` **sequentially**. The frogs have to print all five letters to finish a croak. If the given string is not a combination of a valid `\"croak\"` return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** croakOfFrogs = \"croakcroak\"",
                "Output": "** 1",
                "Explanation": "** One frog yelling \"croak**\"** twice."
            },
            {
                "Input": "** croakOfFrogs = \"crcoakroak\"",
                "Output": "** 2",
                "Explanation": "** The minimum number of frogs is two. \nThe first frog could yell \"**cr**c**oak**roak\".\nThe second frog could yell later \"cr**c**oak**roak**\"."
            },
            {
                "Input": "** croakOfFrogs = \"croakcrook\"",
                "Output": "** -1",
                "Explanation": "** The given string is an invalid combination of \"croak**\"** from different frogs."
            }
        ]
    },
    {
        "Title": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
        "slug": "build-array-where-you-can-find-the-maximum-exactly-k-comparisons",
        "description": "You are given three integers `n`, `m` and `k`. Consider the following algorithm to find the maximum element of an array of positive integers:\n\n\n![](https://assets.leetcode.com/uploads/2020/04/02/e.png)\nYou should build the array arr which has the following properties:\n\n\n `arr` has exactly `n` integers.\n `1 <= arr[i] <= m` where `(0 <= i < n)`.\n After applying the mentioned algorithm to `arr`, the value `search_cost` is equal to `k`.\n\n\nReturn *the number of ways* to build the array `arr` under the mentioned conditions. As the answer may grow large, the answer **must be** computed modulo `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** n = 2, m = 3, k = 1",
                "Output": "** 6",
                "Explanation": "** The possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2] [3, 3]"
            },
            {
                "Input": "** n = 5, m = 2, k = 3",
                "Output": "** 0",
                "Explanation": "** There are no possible arrays that satisfy the mentioned conditions."
            },
            {
                "Input": "** n = 9, m = 1, k = 1",
                "Output": "** 1",
                "Explanation": "** The only possible array is [1, 1, 1, 1, 1, 1, 1, 1, 1]"
            }
        ]
    },
    {
        "Title": "Maximum Score After Splitting a String",
        "slug": "maximum-score-after-splitting-a-string",
        "description": "Given a\u00a0string `s`\u00a0of zeros and ones, *return the maximum score after splitting the string into two **non-empty** substrings* (i.e. **left** substring and **right** substring).\n\n\nThe score after splitting a string is the number of **zeros** in the **left** substring plus the number of **ones** in the **right** substring.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** s = \"011101\"",
                "Output": "** 5",
                "Explanation": "** \nAll possible ways of splitting s into two non-empty substrings are:\nleft = \"0\" and right = \"11101\", score = 1 + 4 = 5 \nleft = \"01\" and right = \"1101\", score = 1 + 3 = 4 \nleft = \"011\" and right = \"101\", score = 1 + 2 = 3 \nleft = \"0111\" and right = \"01\", score = 1 + 1 = 2 \nleft = \"01110\" and right = \"1\", score = 2 + 1 = 3"
            },
            {
                "Input": "** s = \"00111\"",
                "Output": "** 5",
                "Explanation": "** When left = \"00\" and right = \"111\", we get the maximum score = 2 + 3 = 5"
            },
            {
                "Input": "** s = \"1111\"",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Points You Can Obtain from Cards",
        "slug": "maximum-points-you-can-obtain-from-cards",
        "description": "There are several cards **arranged in a row**, and each card has an associated number of points. The points are given in the integer array `cardPoints`.\n\n\nIn one step, you can take one card from the beginning or from the end of the row. You have to take exactly `k` cards.\n\n\nYour score is the sum of the points of the cards you have taken.\n\n\nGiven the integer array `cardPoints` and the integer `k`, return the *maximum score* you can obtain.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sliding Window",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** cardPoints = [1,2,3,4,5,6,1], k = 3",
                "Output": "** 12",
                "Explanation": "** After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12."
            },
            {
                "Input": "** cardPoints = [2,2,2], k = 2",
                "Output": "** 4",
                "Explanation": "** Regardless of which two cards you take, your score will always be 4."
            },
            {
                "Input": "** cardPoints = [9,7,7,9,7,7,9], k = 7",
                "Output": "** 55",
                "Explanation": "** You have to take all the cards. Your score is the sum of points of all cards."
            }
        ]
    },
    {
        "Title": "Diagonal Traverse II",
        "slug": "diagonal-traverse-ii",
        "description": "Given a 2D integer array `nums`, return *all elements of* `nums` *in diagonal order as shown in the below images*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** nums = [[1,2,3],[4,5,6],[7,8,9]]",
                "Output": "** [1,4,2,7,5,3,8,6,9]",
                "Explanation": null
            },
            {
                "Input": "** nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]",
                "Output": "** [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Constrained Subsequence Sum",
        "slug": "constrained-subsequence-sum",
        "description": "Given an integer array `nums` and an integer `k`, return the maximum sum of a **non-empty** subsequence of that array such that for every two **consecutive** integers in the subsequence, `nums[i]` and `nums[j]`, where `i < j`, the condition `j - i <= k` is satisfied.\n\n\nA *subsequence* of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Queue",
            "Sliding Window",
            "Heap (Priority Queue)",
            "Monotonic Queue"
        ],
        "examples": [
            {
                "Input": "** nums = [10,2,-10,5,20], k = 2",
                "Output": "** 37",
                "Explanation": "** The subsequence is [10, 2, 5, 20]."
            },
            {
                "Input": "** nums = [-1,-2,-3], k = 1",
                "Output": "** -1",
                "Explanation": "** The subsequence must be non-empty, so we choose the largest number."
            },
            {
                "Input": "** nums = [10,-2,-10,-5,20], k = 2",
                "Output": "** 23",
                "Explanation": "** The subsequence is [10, -2, -5, 20]."
            }
        ]
    },
    {
        "Title": "Kids With the Greatest Number of Candies",
        "slug": "kids-with-the-greatest-number-of-candies",
        "description": "There are `n` kids with candies. You are given an integer array `candies`, where each `candies[i]` represents the number of candies the `ith` kid has, and an integer `extraCandies`, denoting the number of extra candies that you have.\n\n\nReturn *a boolean array* `result` *of length* `n`*, where* `result[i]` *is* `true` *if, after giving the* `ith` *kid all the* `extraCandies`*, they will have the **greatest** number of candies among all the kids**, or* `false` *otherwise*.\n\n\nNote that **multiple** kids can have the **greatest** number of candies.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** candies = [2,3,5,1,3], extraCandies = 3",
                "Output": "** [true,true,true,false,true]",
                "Explanation": "** If you give all extraCandies to:\n- Kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids.\n- Kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids.\n- Kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids.\n- Kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids.\n- Kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids."
            },
            {
                "Input": "** candies = [4,2,1,1,2], extraCandies = 1",
                "Output": "** [true,false,false,false,false]",
                "Explanation": "** There is only 1 extra candy.\nKid 1 will always have the greatest number of candies, even if a different kid is given the extra candy."
            },
            {
                "Input": "** candies = [12,1,12], extraCandies = 10",
                "Output": "** [true,false,true]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Max Difference You Can Get From Changing an Integer",
        "slug": "max-difference-you-can-get-from-changing-an-integer",
        "description": "You are given an integer `num`. You will apply the following steps exactly **two** times:\n\n\n Pick a digit `x (0 <= x <= 9)`.\n Pick another digit `y (0 <= y <= 9)`. The digit `y` can be equal to `x`.\n Replace all the occurrences of `x` in the decimal representation of `num` by `y`.\n The new integer **cannot** have any leading zeros, also the new integer **cannot** be 0.\n\n\nLet `a` and `b` be the results of applying the operations to `num` the first and second times, respectively.\n\n\nReturn *the max difference* between `a` and `b`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** num = 555",
                "Output": "** 888",
                "Explanation": "** The first time pick x = 5 and y = 9 and store the new integer in a.\nThe second time pick x = 5 and y = 1 and store the new integer in b.\nWe have now a = 999 and b = 111 and max difference = 888"
            },
            {
                "Input": "** num = 9",
                "Output": "** 8",
                "Explanation": "** The first time pick x = 9 and y = 9 and store the new integer in a.\nThe second time pick x = 9 and y = 1 and store the new integer in b.\nWe have now a = 9 and b = 1 and max difference = 8"
            }
        ]
    },
    {
        "Title": "Check If a String Can Break Another String",
        "slug": "check-if-a-string-can-break-another-string",
        "description": "Given two strings: `s1` and `s2` with the same\u00a0size, check if some\u00a0permutation of string `s1` can break\u00a0some\u00a0permutation of string `s2` or vice-versa. In other words `s2` can break `s1`\u00a0or vice-versa.\n\n\nA string `x`\u00a0can break\u00a0string `y`\u00a0(both of size `n`) if `x[i] >= y[i]`\u00a0(in alphabetical order)\u00a0for all `i`\u00a0between `0` and `n-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** s1 = \"abc\", s2 = \"xya\"",
                "Output": "** true",
                "Explanation": "** \"ayx\" is a permutation of s2=\"xya\" which can break to string \"abc\" which is a permutation of s1=\"abc\"."
            },
            {
                "Input": "** s1 = \"abe\", s2 = \"acd\"",
                "Output": "** false",
                "Explanation": "** All permutations for s1=\"abe\" are: \"abe\", \"aeb\", \"bae\", \"bea\", \"eab\" and \"eba\" and all permutation for s2=\"acd\" are: \"acd\", \"adc\", \"cad\", \"cda\", \"dac\" and \"dca\". However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa."
            },
            {
                "Input": "** s1 = \"leetcodee\", s2 = \"interview\"",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Ways to Wear Different Hats to Each Other",
        "slug": "number-of-ways-to-wear-different-hats-to-each-other",
        "description": "There are `n` people and `40` types of hats labeled from `1` to `40`.\n\n\nGiven a 2D integer array `hats`, where `hats[i]` is a list of all hats preferred by the `ith` person.\n\n\nReturn *the number of ways that the `n` people wear different hats to each other*.\n\n\nSince the answer may be too large, return it modulo `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** hats = [[3,4],[4,5],[5]]",
                "Output": "** 1",
                "Explanation": "** There is only one way to choose hats given the conditions. \nFirst person choose hat 3, Second person choose hat 4 and last one hat 5."
            },
            {
                "Input": "** hats = [[3,5,1],[3,5]]",
                "Output": "** 4",
                "Explanation": "** There are 4 ways to choose hats:\n(3,5), (5,3), (1,3) and (1,5)"
            },
            {
                "Input": "** hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]",
                "Output": "** 24",
                "Explanation": "** Each person can choose hats labeled from 1 to 4.\nNumber of Permutations of (1,2,3,4) = 24."
            }
        ]
    },
    {
        "Title": "Destination City",
        "slug": "destination-city",
        "description": "You are given the array `paths`, where `paths[i] = [cityAi, cityBi]` means there exists a direct path going from `cityAi` to `cityBi`. *Return the destination city, that is, the city without any path outgoing to another city.\n\n\nIt is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** paths = [[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]",
                "Output": "** \"Sao Paulo\"",
                "Explanation": "** Starting at \"London\" city you will reach \"Sao Paulo\" city which is the destination city. Your trip consist of: \"London\" -> \"New York\" -> \"Lima\" -> \"Sao Paulo\"."
            },
            {
                "Input": "** paths = [[\"B\",\"C\"],[\"D\",\"B\"],[\"C\",\"A\"]]",
                "Output": "** \"A\"",
                "Explanation": "** All possible trips are:\u00a0\n\"D\" -> \"B\" -> \"C\" -> \"A\".\u00a0\n\"B\" -> \"C\" -> \"A\".\u00a0\n\"C\" -> \"A\".\u00a0\n\"A\".\u00a0\nClearly the destination city is \"A\"."
            },
            {
                "Input": "** paths = [[\"A\",\"Z\"]]",
                "Output": "** \"Z\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Check If All 1's Are at Least Length K Places Away",
        "slug": "check-if-all-1s-are-at-least-length-k-places-away",
        "description": "Given an binary array `nums` and an integer `k`, return `true` *if all* `1`*'s are at least* `k` *places away from each other, otherwise return* `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [1,0,0,0,1,0,0,1], k = 2",
                "Output": "** true",
                "Explanation": "** Each of the 1s are at least 2 places away from each other."
            },
            {
                "Input": "** nums = [1,0,0,1,0,1], k = 2",
                "Output": "** false",
                "Explanation": "** The second 1 and third 1 are only one apart from each other."
            }
        ]
    },
    {
        "Title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
        "slug": "longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit",
        "description": "Given an array of integers `nums` and an integer `limit`, return the size of the longest **non-empty** subarray such that the absolute difference between any two elements of this subarray is less than or equal to `limit`*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Queue",
            "Sliding Window",
            "Heap (Priority Queue)",
            "Ordered Set",
            "Monotonic Queue"
        ],
        "examples": [
            {
                "Input": "** nums = [8,2,4,7], limit = 4",
                "Output": "** 2",
                "Explanation": "** All subarrays are: \n[8] with maximum absolute diff |8-8| = 0 <= 4.\n[8,2] with maximum absolute diff |8-2| = 6 > 4. \n[8,2,4] with maximum absolute diff |8-2| = 6 > 4.\n[8,2,4,7] with maximum absolute diff |8-2| = 6 > 4.\n[2] with maximum absolute diff |2-2| = 0 <= 4.\n[2,4] with maximum absolute diff |2-4| = 2 <= 4.\n[2,4,7] with maximum absolute diff |2-7| = 5 > 4.\n[4] with maximum absolute diff |4-4| = 0 <= 4.\n[4,7] with maximum absolute diff |4-7| = 3 <= 4.\n[7] with maximum absolute diff |7-7| = 0 <= 4. \nTherefore, the size of the longest subarray is 2."
            },
            {
                "Input": "** nums = [10,1,2,4,7,2], limit = 5",
                "Output": "** 4",
                "Explanation": "** The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5."
            },
            {
                "Input": "** nums = [4,2,2,2,4,4,2,2], limit = 0",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find the Kth Smallest Sum of a Matrix With Sorted Rows",
        "slug": "find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows",
        "description": "You are given an `m x n` matrix `mat` that has its rows sorted in non-decreasing order and an integer `k`.\n\n\nYou are allowed to choose **exactly one element** from each row to form an array.\n\n\nReturn *the* `kth` *smallest array sum among all possible arrays*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Heap (Priority Queue)",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** mat = [[1,3,11],[2,4,6]], k = 5",
                "Output": "** 7",
                "Explanation": "** Choosing one element from each row, the first k smallest sum are:\n[1,2], [1,4], [3,2], [3,4], [1,6]. Where the 5th sum is 7."
            },
            {
                "Input": "** mat = [[1,3,11],[2,4,6]], k = 9",
                "Output": "** 17",
                "Explanation": null
            },
            {
                "Input": "** mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7",
                "Output": "** 9",
                "Explanation": "** Choosing one element from each row, the first k smallest sum are:\n[1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]. Where the 7th sum is 9."
            }
        ]
    },
    {
        "Title": "Build an Array With Stack Operations",
        "slug": "build-an-array-with-stack-operations",
        "description": "You are given an integer array `target` and an integer `n`.\n\n\nYou have an empty stack with the two following operations:\n\n\n **`\"Push\"`**: pushes an integer to the top of the stack.\n **`\"Pop\"`**: removes the integer on the top of the stack.\n\n\nYou also have a stream of the integers in the range `[1, n]`.\n\n\nUse the two stack operations to make the numbers in the stack (from the bottom to the top) equal to `target`. You should follow the following rules:\n\n\n If the stream of the integers is not empty, pick the next integer from the stream and push it to the top of the stack.\n If the stack is not empty, pop the integer at the top of the stack.\n If, at any moment, the elements in the stack (from the bottom to the top) are equal to `target`, do not read new integers from the stream and do not do more operations on the stack.\n\n\nReturn *the stack operations needed to build* `target` following the mentioned rules. If there are multiple valid answers, return **any of them**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Stack",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** target = [1,3], n = 3",
                "Output": "** [\"Push\",\"Push\",\"Pop\",\"Push\"]",
                "Explanation": "** Initially the stack s is empty. The last element is the top of the stack.\nRead 1 from the stream and push it to the stack. s = [1].\nRead 2 from the stream and push it to the stack. s = [1,2].\nPop the integer on the top of the stack. s = [1].\nRead 3 from the stream and push it to the stack. s = [1,3]."
            },
            {
                "Input": "** target = [1,2,3], n = 3",
                "Output": "** [\"Push\",\"Push\",\"Push\"]",
                "Explanation": "** Initially the stack s is empty. The last element is the top of the stack.\nRead 1 from the stream and push it to the stack. s = [1].\nRead 2 from the stream and push it to the stack. s = [1,2].\nRead 3 from the stream and push it to the stack. s = [1,2,3]."
            },
            {
                "Input": "** target = [1,2], n = 4",
                "Output": "** [\"Push\",\"Push\"]",
                "Explanation": "** Initially the stack s is empty. The last element is the top of the stack.\nRead 1 from the stream and push it to the stack. s = [1].\nRead 2 from the stream and push it to the stack. s = [1,2].\nSince the stack (from the bottom to the top) is equal to target, we stop the stack operations.\nThe answers that read integer 3 from the stream are not accepted."
            }
        ]
    },
    {
        "Title": "Count Triplets That Can Form Two Arrays of Equal XOR",
        "slug": "count-triplets-that-can-form-two-arrays-of-equal-xor",
        "description": "Given an array of integers `arr`.\n\n\nWe want to select three indices `i`, `j` and `k` where `(0 <= i < j <= k < arr.length)`.\n\n\nLet's define `a` and `b` as follows:\n\n\n `a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]`\n `b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]`\n\n\nNote that **^** denotes the **bitwise-xor** operation.\n\n\nReturn *the number of triplets* (`i`, `j` and `k`) Where `a == b`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Bit Manipulation",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** arr = [2,3,1,6,7]",
                "Output": "** 4",
                "Explanation": "** The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4)"
            },
            {
                "Input": "** arr = [1,1,1,1,1]",
                "Output": "** 10",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Time to Collect All Apples in a Tree",
        "slug": "minimum-time-to-collect-all-apples-in-a-tree",
        "description": "Given an undirected tree consisting of `n` vertices numbered from `0` to `n-1`, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. *Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at **vertex 0** and coming back to this vertex.\n\n\nThe edges of the undirected tree are given in the array `edges`, where `edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai` and `bi`. Additionally, there is a boolean array `hasApple`, where `hasApple[i] = true` means that vertex `i` has an apple; otherwise, it does not have any apple.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]",
                "Output": "** 8",
                "Explanation": "** The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows."
            },
            {
                "Input": "** n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,false,true,false]",
                "Output": "** 6",
                "Explanation": "** The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows."
            }
        ]
    },
    {
        "Title": "Number of Ways of Cutting a Pizza",
        "slug": "number-of-ways-of-cutting-a-pizza",
        "description": "Given a rectangular pizza represented as a `rows x cols`\u00a0matrix containing the following characters: `'A'` (an apple) and `'.'` (empty cell) and given the integer `k`. You have to cut the pizza into `k` pieces using `k-1` cuts.\u00a0\n\n\nFor each cut you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces. If you cut the pizza vertically, give the left part of the pizza to a person. If you cut the pizza horizontally, give the upper part of the pizza to a person. Give the last piece of pizza to the last person.\n\n\nReturn the number of ways of cutting the pizza such that each piece contains **at least** one apple.*Since the answer can be a huge number, return this modulo 10^9 + 7.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Memoization",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** pizza = [\"A..\",\"AA.\",\"...\"], k = 3",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** pizza = [\"A..\",\"A..\",\"...\"], k = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Simplified Fractions",
        "slug": "simplified-fractions",
        "description": "Given an integer `n`, return *a list of all **simplified** fractions between* `0` *and* `1` *(exclusive) such that the denominator is less-than-or-equal-to* `n`. You can return the answer in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "String",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** [\"1/2\"]",
                "Explanation": "** \"1/2\" is the only unique fraction with a denominator less-than-or-equal-to 2."
            },
            {
                "Input": "** n = 3",
                "Output": "** [\"1/2\",\"1/3\",\"2/3\"]",
                "Explanation": null
            },
            {
                "Input": "** n = 4",
                "Output": "** [\"1/2\",\"1/3\",\"1/4\",\"2/3\",\"3/4\"]",
                "Explanation": "** \"2/4\" is not a simplified fraction because it can be simplified to \"1/2\"."
            }
        ]
    },
    {
        "Title": "Count Good Nodes in Binary Tree",
        "slug": "count-good-nodes-in-binary-tree",
        "description": "Given a binary tree `root`, a node *X* in the tree is named\u00a0**good** if in the path from root to *X* there are no nodes with a value *greater than* X.\n\n\nReturn the number of **good** nodes in the binary tree.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1]",
                "Output": "** 1",
                "Explanation": "** Root is considered as **good**."
            }
        ]
    },
    {
        "Title": "Form Largest Integer With Digits That Add up to Target",
        "slug": "form-largest-integer-with-digits-that-add-up-to-target",
        "description": "Given an array of integers `cost` and an integer `target`, return *the **maximum** integer you can paint under the following rules*:\n\n\n The cost of painting a digit `(i + 1)` is given by `cost[i]` (**0-indexed**).\n The total cost used must be equal to `target`.\n The integer does not have `0` digits.\n\n\nSince the answer may be very large, return it as a string. If there is no way to paint any integer given the condition, return `\"0\"`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** cost = [4,3,2,5,6,7,2,5,5], target = 9",
                "Output": "** \"7772\"",
                "Explanation": "** The cost to paint the digit '7' is 2, and the digit '2' is 3. Then cost(\"7772\") = 2*3+ 3*1 = 9. You could also paint \"977\", but \"7772\" is the largest number.\n**Digit cost**\n  1  ->   4\n  2  ->   3\n  3  ->   2\n  4  ->   5\n  5  ->   6\n  6  ->   7\n  7  ->   2\n  8  ->   5\n  9  ->   5"
            },
            {
                "Input": "** cost = [7,6,5,5,5,6,8,7,8], target = 12",
                "Output": "** \"85\"",
                "Explanation": "** The cost to paint the digit '8' is 7, and the digit '5' is 5. Then cost(\"85\") = 7 + 5 = 12."
            },
            {
                "Input": "** cost = [2,4,6,2,4,6,4,4,4], target = 5",
                "Output": "** \"0\"",
                "Explanation": "** It is impossible to paint any integer with total cost equal to target."
            }
        ]
    },
    {
        "Title": "Number of Students Doing Homework at a Given Time",
        "slug": "number-of-students-doing-homework-at-a-given-time",
        "description": "Given two integer arrays `startTime` and `endTime` and given an integer `queryTime`.\n\n\nThe `ith` student started doing their homework at the time `startTime[i]` and finished it at time `endTime[i]`.\n\n\nReturn *the number of students* doing their homework at time `queryTime`. More formally, return the number of students where `queryTime` lays in the interval `[startTime[i], endTime[i]]` inclusive.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** startTime = [1,2,3], endTime = [3,2,7], queryTime = 4",
                "Output": "** 1",
                "Explanation": "** We have 3 students where:\nThe first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4.\nThe second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4.\nThe third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4."
            },
            {
                "Input": "** startTime = [4], endTime = [4], queryTime = 4",
                "Output": "** 1",
                "Explanation": "** The only student was doing their homework at the queryTime."
            }
        ]
    },
    {
        "Title": "Rearrange Words in a Sentence",
        "slug": "rearrange-words-in-a-sentence",
        "description": "Given a sentence\u00a0`text` (A\u00a0*sentence*\u00a0is a string of space-separated words) in the following format:\n\n\n First letter is in upper case.\n Each word in `text` are separated by a single space.\n\n\nYour task is to rearrange the words in text such that\u00a0all words are rearranged in an increasing order of their lengths. If two words have the same length, arrange them in their original order.\n\n\nReturn the new text\u00a0following the format shown above.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** text = \"Leetcode is cool\"",
                "Output": "** \"Is cool leetcode\"",
                "Explanation": "** There are 3 words, \"Leetcode\" of length 8, \"is\" of length 2 and \"cool\" of length 4.\nOutput is ordered by length and the new first word starts with capital letter."
            },
            {
                "Input": "** text = \"Keep calm and code on\"",
                "Output": "** \"On and keep calm code\"",
                "Explanation": "** Output is ordered as follows:\n\"On\" 2 letters.\n\"and\" 3 letters.\n\"keep\" 4 letters in case of tie order by position in original text.\n\"calm\" 4 letters.\n\"code\" 4 letters."
            },
            {
                "Input": "** text = \"To be or not to be\"",
                "Output": "** \"To be or to be not\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "People Whose List of Favorite Companies Is Not a Subset of Another List",
        "slug": "people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list",
        "description": "Given the array `favoriteCompanies` where `favoriteCompanies[i]` is the list of favorites companies for the `ith` person (**indexed from 0**).\n\n\nReturn the indices of people whose list of favorite companies is not a **subset** of any other list of favorites companies*. You must return the indices in increasing order.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"google\",\"microsoft\"],[\"google\",\"facebook\"],[\"google\"],[\"amazon\"]]",
                "Output": "** [0,1,4]",
                "Explanation": "** \nPerson with index=2 has favoriteCompanies[2]=[\"google\",\"facebook\"] which is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] corresponding to the person with index 0. \nPerson with index=3 has favoriteCompanies[3]=[\"google\"] which is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] and favoriteCompanies[1]=[\"google\",\"microsoft\"]. \nOther lists of favorite companies are not a subset of another list, therefore, the answer is [0,1,4]."
            },
            {
                "Input": "** favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"leetcode\",\"amazon\"],[\"facebook\",\"google\"]]",
                "Output": "** [0,1]",
                "Explanation": "** In this case favoriteCompanies[2]=[\"facebook\",\"google\"] is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"], therefore, the answer is [0,1]."
            },
            {
                "Input": "** favoriteCompanies = [[\"leetcode\"],[\"google\"],[\"facebook\"],[\"amazon\"]]",
                "Output": "** [0,1,2,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Number of Darts Inside of a Circular Dartboard",
        "slug": "maximum-number-of-darts-inside-of-a-circular-dartboard",
        "description": "Alice is throwing `n` darts on a very large wall. You are given an array `darts` where `darts[i] = [xi, yi]` is the position of the `ith` dart that Alice threw on the wall.\n\n\nBob knows the positions of the `n` darts on the wall. He wants to place a dartboard of radius `r` on the wall so that the maximum number of darts that Alice throws lie\u00a0on the dartboard.\n\n\nGiven the integer `r`, return *the maximum number of darts that can lie on the dartboard*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Geometry"
        ],
        "examples": [
            {
                "Input": "** darts = [[-2,0],[2,0],[0,2],[0,-2]], r = 2",
                "Output": "** 4",
                "Explanation": "** Circle dartboard with center in (0,0) and radius = 2 contain all points."
            },
            {
                "Input": "** darts = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5",
                "Output": "** 5",
                "Explanation": "** Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8)."
            }
        ]
    },
    {
        "Title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence",
        "slug": "check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence",
        "description": "Given a `sentence` that consists of some words separated by a **single space**, and a `searchWord`, check if `searchWord` is a prefix of any word in `sentence`.\n\n\nReturn *the index of the word in* `sentence` *(**1-indexed**) where* `searchWord` *is a prefix of this word*. If `searchWord` is a prefix of more than one word, return the index of the first word **(minimum index)**. If there is no such word return `-1`.\n\n\nA **prefix** of a string `s` is any leading contiguous substring of `s`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String",
            "String Matching"
        ],
        "examples": [
            {
                "Input": "** sentence = \"i love eating burger\", searchWord = \"burg\"",
                "Output": "** 4",
                "Explanation": "** \"burg\" is prefix of \"burger\" which is the 4th word in the sentence."
            },
            {
                "Input": "** sentence = \"this problem is an easy problem\", searchWord = \"pro\"",
                "Output": "** 2",
                "Explanation": "** \"pro\" is prefix of \"problem\" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index."
            },
            {
                "Input": "** sentence = \"i am tired\", searchWord = \"you\"",
                "Output": "** -1",
                "Explanation": "** \"you\" is not a prefix of any word in the sentence."
            }
        ]
    },
    {
        "Title": "Maximum Number of Vowels in a Substring of Given Length",
        "slug": "maximum-number-of-vowels-in-a-substring-of-given-length",
        "description": "Given a string `s` and an integer `k`, return *the maximum number of vowel letters in any substring of* `s` *with length* `k`.\n\n\nVowel letters** in English are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** s = \"abciiidef\", k = 3",
                "Output": "** 3",
                "Explanation": "** The substring \"iii\" contains 3 vowel letters."
            },
            {
                "Input": "** s = \"aeiou\", k = 2",
                "Output": "** 2",
                "Explanation": "** Any substring of length 2 contains 2 vowels."
            },
            {
                "Input": "** s = \"leetcode\", k = 3",
                "Output": "** 2",
                "Explanation": "** \"lee\", \"eet\" and \"ode\" contain 2 vowels."
            }
        ]
    },
    {
        "Title": "Pseudo-Palindromic Paths in a Binary Tree",
        "slug": "pseudo-palindromic-paths-in-a-binary-tree",
        "description": "Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be **pseudo-palindromic** if at least one permutation of the node values in the path is a palindrome.\n\n\nReturn the number of **pseudo-palindromic** paths going from the root node to leaf nodes.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Bit Manipulation",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [2,3,1,3,1,null,1]",
                "Output": "** 2",
                "Explanation": "** The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome)."
            }
        ]
    },
    {
        "Title": "Max Dot Product of Two Subsequences",
        "slug": "max-dot-product-of-two-subsequences",
        "description": "Given two arrays `nums1`\u00a0and `nums2`.\n\n\nReturn the maximum dot product\u00a0between\u00a0**non-empty** subsequences of nums1 and nums2 with the same length.\n\n\nA subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie,\u00a0`[2,3,5]`\u00a0is a subsequence of\u00a0`[1,2,3,4,5]`\u00a0while `[1,5,3]`\u00a0is not).\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums1 = [2,1,-2,5], nums2 = [3,0,-6]",
                "Output": "** 18",
                "Explanation": "** Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2.\nTheir dot product is (2*3 + (-2)*(-6)) = 18."
            },
            {
                "Input": "** nums1 = [3,-2], nums2 = [2,-6,7]",
                "Output": "** 21",
                "Explanation": "** Take subsequence [3] from nums1 and subsequence [7] from nums2.\nTheir dot product is (3*7) = 21."
            },
            {
                "Input": "** nums1 = [-1,-1], nums2 = [1,1]",
                "Output": "** -1",
                "Explanation": "** Take subsequence [-1] from nums1 and subsequence [1] from nums2.\nTheir dot product is -1."
            }
        ]
    },
    {
        "Title": "Make Two Arrays Equal by Reversing Subarrays",
        "slug": "make-two-arrays-equal-by-reversing-subarrays",
        "description": "You are given two integer arrays of equal length `target` and `arr`. In one step, you can select any **non-empty subarray** of `arr` and reverse it. You are allowed to make any number of steps.\n\n\nReturn `true` *if you can make* `arr` *equal to* `target`*or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** target = [1,2,3,4], arr = [2,4,1,3]",
                "Output": "** true",
                "Explanation": "** You can follow the next steps to convert arr to target:\n1- Reverse subarray [2,4,1], arr becomes [1,4,2,3]\n2- Reverse subarray [4,2], arr becomes [1,2,4,3]\n3- Reverse subarray [4,3], arr becomes [1,2,3,4]\nThere are multiple ways to convert arr to target, this is not the only way to do so."
            },
            {
                "Input": "** target = [7], arr = [7]",
                "Output": "** true",
                "Explanation": "** arr is equal to target without any reverses."
            },
            {
                "Input": "** target = [3,7,9], arr = [3,7,11]",
                "Output": "** false",
                "Explanation": "** arr does not have value 9 and it can never be converted to target."
            }
        ]
    },
    {
        "Title": "Check If a String Contains All Binary Codes of Size K",
        "slug": "check-if-a-string-contains-all-binary-codes-of-size-k",
        "description": "Given a binary string `s` and an integer `k`, return `true` *if every binary code of length* `k` *is a substring of* `s`. Otherwise, return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Bit Manipulation",
            "Rolling Hash",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "** s = \"00110110\", k = 2",
                "Output": "** true",
                "Explanation": "** The binary codes of length 2 are \"00\", \"01\", \"10\" and \"11\". They can be all found as substrings at indices 0, 1, 3 and 2 respectively."
            },
            {
                "Input": "** s = \"0110\", k = 1",
                "Output": "** true",
                "Explanation": "** The binary codes of length 1 are \"0\" and \"1\", it is clear that both exist as a substring."
            },
            {
                "Input": "** s = \"0110\", k = 2",
                "Output": "** false",
                "Explanation": "** The binary code \"00\" is of length 2 and does not exist in the array."
            }
        ]
    },
    {
        "Title": "Course Schedule IV",
        "slug": "course-schedule-iv",
        "description": "There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you **must** take course `ai` first if you want to take course `bi`.\n\n\n For example, the pair `[0, 1]` indicates that you have to take course `0` before you can take course `1`.\n\n\nPrerequisites can also be **indirect**. If course `a` is a prerequisite of course `b`, and course `b` is a prerequisite of course `c`, then course `a` is a prerequisite of course `c`.\n\n\nYou are also given an array `queries` where `queries[j] = [uj, vj]`. For the `jth` query, you should answer whether course `uj` is a prerequisite of course `vj` or not.\n\n\nReturn *a boolean array* `answer`*, where* `answer[j]` *is the answer to the* `jth` *query.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Graph",
            "Topological Sort"
        ],
        "examples": [
            {
                "Input": "** numCourses = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]]",
                "Output": "** [false,true]",
                "Explanation": "** The pair [1, 0] indicates that you have to take course 1 before you can take course 0.\nCourse 0 is not a prerequisite of course 1, but the opposite is true."
            },
            {
                "Input": "** numCourses = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]]",
                "Output": "** [true,true]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Cherry Pickup II",
        "slug": "cherry-pickup-ii",
        "description": "You are given a `rows x cols` matrix `grid` representing a field of cherries where `grid[i][j]` represents the number of cherries that you can collect from the `(i, j)` cell.\n\n\nYou have two robots that can collect cherries for you:\n\n\n **Robot #1** is located at the **top-left corner** `(0, 0)`, and\n **Robot #2** is located at the **top-right corner** `(0, cols - 1)`.\n\n\nReturn *the maximum number of cherries collection using both robots by following the rules below*:\n\n\n From a cell `(i, j)`, robots can move to cell `(i + 1, j - 1)`, `(i + 1, j)`, or `(i + 1, j + 1)`.\n When any robot passes through a cell, It picks up all cherries, and the cell becomes an empty cell.\n When both robots stay in the same cell, only one takes the cherries.\n Both robots cannot move outside of the grid at any moment.\n Both robots should reach the bottom row in `grid`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]]",
                "Output": "** 24",
                "Explanation": "** Path of robot #1 and #2 are described in color green and blue respectively.\nCherries taken by Robot #1, (3 + 2 + 5 + 2) = 12.\nCherries taken by Robot #2, (1 + 5 + 5 + 1) = 12.\nTotal of cherries: 12 + 12 = 24."
            },
            {
                "Input": "** grid = [[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]]",
                "Output": "** 28",
                "Explanation": "** Path of robot #1 and #2 are described in color green and blue respectively.\nCherries taken by Robot #1, (1 + 9 + 5 + 2) = 17.\nCherries taken by Robot #2, (1 + 3 + 4 + 3) = 11.\nTotal of cherries: 17 + 11 = 28."
            }
        ]
    },
    {
        "Title": "Maximum Product of Two Elements in an Array",
        "slug": "maximum-product-of-two-elements-in-an-array",
        "description": "Given the array of integers `nums`, you will choose two different indices `i` and `j` of that array. *Return the maximum value of* `(nums[i]-1)*(nums[j]-1)`.\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** nums = [3,4,5,2]",
                "Output": "** 12",
                "Explanation": "** If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12."
            },
            {
                "Input": "** nums = [1,5,4,5]",
                "Output": "** 16",
                "Explanation": "** Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16."
            },
            {
                "Input": "** nums = [3,7]",
                "Output": "** 12",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
        "slug": "maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts",
        "description": "You are given a rectangular cake of size `h x w` and two arrays of integers `horizontalCuts` and `verticalCuts` where:\n\n\n `horizontalCuts[i]` is the distance from the top of the rectangular cake to the `ith` horizontal cut and similarly, and\n `verticalCuts[j]` is the distance from the left of the rectangular cake to the `jth` vertical cut.\n\n\nReturn *the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays* `horizontalCuts` *and* `verticalCuts`. Since the answer can be a large number, return this **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]",
                "Output": "** 4",
                "Explanation": "** The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green piece of cake has the maximum area."
            },
            {
                "Input": "** h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]",
                "Output": "** 6",
                "Explanation": "** The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green and yellow pieces of cake have the maximum area."
            }
        ]
    },
    {
        "Title": "Reorder Routes to Make All Paths Lead to the City Zero",
        "slug": "reorder-routes-to-make-all-paths-lead-to-the-city-zero",
        "description": "There are `n` cities numbered from `0` to `n - 1` and `n - 1` roads such that there is only one way to travel between two different cities (this network form a tree). Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow.\n\n\nRoads are represented by `connections` where `connections[i] = [ai, bi]` represents a road from city `ai` to city `bi`.\n\n\nThis year, there will be a big event in the capital (city `0`), and many people want to travel to this city.\n\n\nYour task consists of reorienting some roads such that each city can visit the city `0`. Return the **minimum** number of edges changed.\n\n\nIt's **guaranteed** that each city can reach city `0` after reorder.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]",
                "Output": "** 3",
                "Explanation": "** Change the direction of edges show in red such that each node can reach the node 0 (capital)."
            },
            {
                "Input": "** n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]",
                "Output": "** 2",
                "Explanation": "** Change the direction of edges show in red such that each node can reach the node 0 (capital)."
            }
        ]
    },
    {
        "Title": "Probability of a Two Boxes Having The Same Number of Distinct Balls",
        "slug": "probability-of-a-two-boxes-having-the-same-number-of-distinct-balls",
        "description": "Given `2n` balls of `k` distinct colors. You will be given an integer array `balls` of size `k` where `balls[i]` is the number of balls of color `i`.\n\n\nAll the balls will be **shuffled uniformly at random**, then we will distribute the first `n` balls to the first box and the remaining `n` balls to the other box (Please read the explanation of the second example carefully).\n\n\nPlease note that the two boxes are considered different. For example, if we have two balls of colors `a` and `b`, and two boxes `[]` and `()`, then the distribution `[a] (b)` is considered different than the distribution `[b] (a)` (Please read the explanation of the first example carefully).\n\n\nReturn *the probability* that the two boxes have the same number of distinct balls. Answers within `10-5` of the actual value will be accepted as correct.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Backtracking",
            "Combinatorics",
            "Probability and Statistics"
        ],
        "examples": [
            {
                "Input": "** balls = [1,1]",
                "Output": "** 1.00000",
                "Explanation": "** Only 2 ways to divide the balls equally:\n- A ball of color 1 to box 1 and a ball of color 2 to box 2\n- A ball of color 2 to box 1 and a ball of color 1 to box 2\nIn both ways, the number of distinct colors in each box is equal. The probability is 2/2 = 1"
            },
            {
                "Input": "** balls = [2,1,1]",
                "Output": "** 0.66667",
                "Explanation": "** We have the set of balls [1, 1, 2, 3]\nThis set of balls will be shuffled randomly and we may have one of the 12 distinct shuffles with equal probability (i.e. 1/12):\n[1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]\nAfter that, we add the first two balls to the first box and the second two balls to the second box.\nWe can see that 8 of these 12 possible random distributions have the same number of distinct colors of balls in each box.\nProbability is 8/12 = 0.66667"
            },
            {
                "Input": "** balls = [1,2,1,2]",
                "Output": "** 0.60000",
                "Explanation": "** The set of balls is [1, 2, 2, 3, 4, 4]. It is hard to display all the 180 possible random shuffles of this set but it is easy to check that 108 of them will have the same number of distinct colors in each box.\nProbability = 108 / 180 = 0.6"
            }
        ]
    },
    {
        "Title": "Shuffle the Array",
        "slug": "shuffle-the-array",
        "description": "Given the array `nums` consisting of `2n` elements in the form `[x1,x2,...,xn,y1,y2,...,yn]`.\n\n\nReturn the array in the form* `[x1,y1,x2,y2,...,xn,yn]`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [2,5,1,3,4,7], n = 3",
                "Output": "** [2,3,5,4,1,7]",
                "Explanation": "** Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7]."
            },
            {
                "Input": "** nums = [1,2,3,4,4,3,2,1], n = 4",
                "Output": "** [1,4,2,3,3,2,4,1]",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,1,2,2], n = 2",
                "Output": "** [1,2,1,2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "The k Strongest Values in an Array",
        "slug": "the-k-strongest-values-in-an-array",
        "description": "Given an array of integers `arr` and an integer `k`.\n\n\nA value `arr[i]` is said to be stronger than a value `arr[j]` if `|arr[i] - m| > |arr[j] - m|` where `m` is the **median** of the array.  \n\nIf `|arr[i] - m| == |arr[j] - m|`, then `arr[i]` is said to be stronger than `arr[j]` if `arr[i] > arr[j]`.\n\n\nReturn *a list of the strongest `k`* values in the array. return the answer **in any arbitrary order**.\n\n\nMedian** is the middle value in an ordered integer list. More formally, if the length of the list is n, the median is the element in position `((n - 1) / 2)` in the sorted list **(0-indexed)**.\n\n\n For `arr = [6, -3, 7, 2, 11]`, `n = 5` and the median is obtained by sorting the array `arr = [-3, 2, 6, 7, 11]` and the median is `arr[m]` where `m = ((5 - 1) / 2) = 2`. The median is `6`.\n For `arr = [-7, 22, 17,\u20093]`, `n = 4` and the median is obtained by sorting the array `arr = [-7, 3, 17, 22]` and the median is `arr[m]` where `m = ((4 - 1) / 2) = 1`. The median is `3`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** arr = [1,2,3,4,5], k = 2",
                "Output": "** [5,1]",
                "Explanation": "** Median is 3, the elements of the array sorted by the strongest are [5,1,4,2,3]. The strongest 2 elements are [5, 1]. [1, 5] is also **accepted** answer.\nPlease note that although |5 - 3| == |1 - 3| but 5 is stronger than 1 because 5 > 1."
            },
            {
                "Input": "** arr = [1,1,3,5,5], k = 2",
                "Output": "** [5,5]",
                "Explanation": "** Median is 3, the elements of the array sorted by the strongest are [5,5,1,1,3]. The strongest 2 elements are [5, 5]."
            },
            {
                "Input": "** arr = [6,7,11,7,6,8], k = 5",
                "Output": "** [11,8,6,6,7]",
                "Explanation": "** Median is 7, the elements of the array sorted by the strongest are [11,8,6,6,7,7].\nAny permutation of [11,8,6,6,7] is **accepted**."
            }
        ]
    },
    {
        "Title": "Paint House III",
        "slug": "paint-house-iii",
        "description": "There is a row of `m` houses in a small city, each house must be painted with one of the `n` colors (labeled from `1` to `n`), some houses that have been painted last summer should not be painted again.\n\n\nA neighborhood is a maximal group of continuous houses that are painted with the same color.\n\n\n For example: `houses = [1,2,2,3,3,2,1,1]` contains `5` neighborhoods `[{1}, {2,2}, {3,3}, {2}, {1,1}]`.\n\n\nGiven an array `houses`, an `m x n` matrix `cost` and an integer `target` where:\n\n\n `houses[i]`: is the color of the house `i`, and `0` if the house is not painted yet.\n `cost[i][j]`: is the cost of paint the house `i` with the color `j + 1`.\n\n\nReturn *the minimum cost of painting all the remaining houses in such a way that there are exactly* `target` *neighborhoods*. If it is not possible, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3",
                "Output": "** 9",
                "Explanation": "** Paint houses of this way [1,2,2,1,1]\nThis array contains target = 3 neighborhoods, [{1}, {2,2}, {1,1}].\nCost of paint all houses (1 + 1 + 1 + 1 + 5) = 9."
            },
            {
                "Input": "** houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3",
                "Output": "** 11",
                "Explanation": "** Some houses are already painted, Paint the houses of this way [2,2,1,2,2]\nThis array contains target = 3 neighborhoods, [{2,2}, {1}, {2,2}]. \nCost of paint the first and last house (10 + 1) = 11."
            },
            {
                "Input": "** houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3",
                "Output": "** -1",
                "Explanation": "** Houses are already painted with a total of 4 neighborhoods [{3},{1},{2},{3}] different of target = 3."
            }
        ]
    },
    {
        "Title": "Final Prices With a Special Discount in a Shop",
        "slug": "final-prices-with-a-special-discount-in-a-shop",
        "description": "You are given an integer array `prices` where `prices[i]` is the price of the `ith` item in a shop.\n\n\nThere is a special discount for items in the shop. If you buy the `ith` item, then you will receive a discount equivalent to `prices[j]` where `j` is the minimum index such that `j > i` and `prices[j] <= prices[i]`. Otherwise, you will not receive any discount at all.\n\n\nReturn an integer array `answer` where `answer[i]` is the final price you will pay for the `ith` item of the shop, considering the special discount.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Stack",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** prices = [8,4,6,2,3]",
                "Output": "** [4,2,4,2,3]",
                "Explanation": "** \nFor item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4.\nFor item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2.\nFor item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4.\nFor items 3 and 4 you will not receive any discount at all."
            },
            {
                "Input": "** prices = [1,2,3,4,5]",
                "Output": "** [1,2,3,4,5]",
                "Explanation": "** In this case, for all items, you will not receive any discount at all."
            },
            {
                "Input": "** prices = [10,1,1,6]",
                "Output": "** [9,0,1,6]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Subrectangle Queries",
        "slug": "subrectangle-queries",
        "description": "Implement the class `SubrectangleQueries`\u00a0which receives a `rows x cols` rectangle as a matrix of integers in the constructor and supports two methods:\n\n\n1.`updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)`\n\n\n Updates all values with `newValue` in the subrectangle whose upper left coordinate is `(row1,col1)` and bottom right coordinate is `(row2,col2)`.\n\n\n2.`getValue(int row, int col)`\n\n\n Returns the current value of the coordinate `(row,col)` from\u00a0the rectangle.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Design",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\"]\n[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]",
                "Output": "[null,1,null,5,5,null,10,5]",
                "Explanation": "SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);  \n// The initial rectangle (4x3) looks like:\n// 1 2 1\n// 4 3 4\n// 3 2 1\n// 1 1 1\nsubrectangleQueries.getValue(0, 2); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 3, 2, 5);\n// After this update the rectangle looks like:\n// 5 5 5\n// 5 5 5\n// 5 5 5\n// 5 5 5 \nsubrectangleQueries.getValue(0, 2); // return 5\nsubrectangleQueries.getValue(3, 1); // return 5\nsubrectangleQueries.updateSubrectangle(3, 0, 3, 2, 10);\n// After this update the rectangle looks like:\n// 5   5   5\n// 5   5   5\n// 5   5   5\n// 10  10  10 \nsubrectangleQueries.getValue(3, 1); // return 10\nsubrectangleQueries.getValue(0, 2); // return 5"
            },
            {
                "Input": "[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\"]\n[[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]",
                "Output": "[null,1,null,100,100,null,20]",
                "Explanation": "SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,1,1],[2,2,2],[3,3,3]]);\nsubrectangleQueries.getValue(0, 0); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 2, 2, 100);\nsubrectangleQueries.getValue(0, 0); // return 100\nsubrectangleQueries.getValue(2, 2); // return 100\nsubrectangleQueries.updateSubrectangle(1, 1, 2, 2, 20);\nsubrectangleQueries.getValue(2, 2); // return 20"
            }
        ]
    },
    {
        "Title": "Find Two Non-overlapping Sub-arrays Each With Target Sum",
        "slug": "find-two-non-overlapping-sub-arrays-each-with-target-sum",
        "description": "You are given an array of integers `arr` and an integer `target`.\n\n\nYou have to find **two non-overlapping sub-arrays** of `arr` each with a sum equal `target`. There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is **minimum**.\n\n\nReturn *the minimum sum of the lengths* of the two required sub-arrays, or return `-1` if you cannot find such two sub-arrays.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Dynamic Programming",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** arr = [3,2,2,4,3], target = 3",
                "Output": "** 2",
                "Explanation": "** Only two sub-arrays have sum = 3 ([3] and [3]). The sum of their lengths is 2."
            },
            {
                "Input": "** arr = [7,3,4,7], target = 7",
                "Output": "** 2",
                "Explanation": "** Although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2."
            },
            {
                "Input": "** arr = [4,3,2,6,2,3,4], target = 6",
                "Output": "** -1",
                "Explanation": "** We have only one sub-array of sum = 6."
            }
        ]
    },
    {
        "Title": "Allocate Mailboxes",
        "slug": "allocate-mailboxes",
        "description": "Given the array `houses` where `houses[i]` is the location of the `ith` house along a street and an integer `k`, allocate `k` mailboxes in the street.\n\n\nReturn *the **minimum** total distance between each house and its nearest mailbox*.\n\n\nThe test cases are generated so that the answer fits in a 32-bit integer.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** houses = [1,4,8,10,20], k = 3",
                "Output": "** 5",
                "Explanation": "** Allocate mailboxes in position 3, 9 and 20.\nMinimum total distance from each houses to nearest mailboxes is |3-1| + |4-3| + |9-8| + |10-9| + |20-20| = 5"
            },
            {
                "Input": "** houses = [2,3,5,12,18], k = 2",
                "Output": "** 9",
                "Explanation": "** Allocate mailboxes in position 3 and 14.\nMinimum total distance from each houses to nearest mailboxes is |2-3| + |3-3| + |5-3| + |12-14| + |18-14| = 9."
            }
        ]
    },
    {
        "Title": "Running Sum of 1d Array",
        "slug": "running-sum-of-1d-array",
        "description": "Given an array `nums`. We define a running sum of an array as\u00a0`runningSum[i] = sum(nums[0]\u2026nums[i])`.\n\n\nReturn the running sum of `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** [1,3,6,10]",
                "Explanation": "** Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4]."
            },
            {
                "Input": "** nums = [1,1,1,1,1]",
                "Output": "** [1,2,3,4,5]",
                "Explanation": "** Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1]."
            },
            {
                "Input": "** nums = [3,1,2,10,1]",
                "Output": "** [3,4,6,16,17]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Least Number of Unique Integers after K Removals",
        "slug": "least-number-of-unique-integers-after-k-removals",
        "description": "Given an array of integers\u00a0`arr`\u00a0and an integer `k`.\u00a0Find the *least number of unique integers*\u00a0after removing **exactly** `k` elements**.\n\n\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy",
            "Sorting",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** arr = [5,5,4], k = 1",
                "Output": "** 1",
                "Explanation": "Remove the single 4, only 5 is left."
            },
            {
                "Input": "** arr = [4,3,1,1,3,3,2], k = 3",
                "Output": "** 2",
                "Explanation": "Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left."
            }
        ]
    },
    {
        "Title": "Minimum Number of Days to Make m Bouquets",
        "slug": "minimum-number-of-days-to-make-m-bouquets",
        "description": "You are given an integer array `bloomDay`, an integer `m` and an integer `k`.\n\n\nYou want to make `m` bouquets. To make a bouquet, you need to use `k` **adjacent flowers** from the garden.\n\n\nThe garden consists of `n` flowers, the `ith` flower will bloom in the `bloomDay[i]` and then can be used in **exactly one** bouquet.\n\n\nReturn *the minimum number of days you need to wait to be able to make* `m` *bouquets from the garden*. If it is impossible to make m bouquets return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** bloomDay = [1,10,3,10,2], m = 3, k = 1",
                "Output": "** 3",
                "Explanation": "** Let us see what happened in the first three days. x means flower bloomed and _ means flower did not bloom in the garden.\nWe need 3 bouquets each should contain 1 flower.\nAfter day 1: [x, _, _, _, _]   // we can only make one bouquet.\nAfter day 2: [x, _, _, _, x]   // we can only make two bouquets.\nAfter day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3."
            },
            {
                "Input": "** bloomDay = [1,10,3,10,2], m = 3, k = 2",
                "Output": "** -1",
                "Explanation": "** We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1."
            },
            {
                "Input": "** bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3",
                "Output": "** 12",
                "Explanation": "** We need 2 bouquets each should have 3 flowers.\nHere is the garden after the 7 and 12 days:\nAfter day 7: [x, x, x, x, _, x, x]\nWe can make one bouquet of the first three flowers that bloomed. We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent.\nAfter day 12: [x, x, x, x, x, x, x]\nIt is obvious that we can make two bouquets in different ways."
            }
        ]
    },
    {
        "Title": "Kth Ancestor of a Tree Node",
        "slug": "kth-ancestor-of-a-tree-node",
        "description": "You are given a tree with `n` nodes numbered from `0` to `n - 1` in the form of a parent array `parent` where `parent[i]` is the parent of `ith` node. The root of the tree is node `0`. Find the `kth` ancestor of a given node.\n\n\nThe `kth` ancestor of a tree node is the `kth` node in the path from that node to the root node.\n\n\nImplement the `TreeAncestor` class:\n\n\n `TreeAncestor(int n, int[] parent)` Initializes the object with the number of nodes in the tree and the parent array.\n `int getKthAncestor(int node, int k)` return the `kth` ancestor of the given node `node`. If there is no such ancestor, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Binary Search",
            "Dynamic Programming",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Design"
        ],
        "examples": [
            {
                "Input": "[\"TreeAncestor\", \"getKthAncestor\", \"getKthAncestor\", \"getKthAncestor\"]\n[[7, [-1, 0, 0, 1, 1, 2, 2]], [3, 1], [5, 2], [6, 3]]",
                "Output": "[null, 1, 0, -1]",
                "Explanation": "TreeAncestor treeAncestor = new TreeAncestor(7, [-1, 0, 0, 1, 1, 2, 2]);\ntreeAncestor.getKthAncestor(3, 1); // returns 1 which is the parent of 3\ntreeAncestor.getKthAncestor(5, 2); // returns 0 which is the grandparent of 5\ntreeAncestor.getKthAncestor(6, 3); // returns -1 because there is no such ancestor"
            }
        ]
    },
    {
        "Title": "Group Sold Products By The Date",
        "slug": "group-sold-products-by-the-date",
        "description": "Table `Activities`:\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| sell_date   | date    |\n| product     | varchar |\n+-------------+---------+\nThere is no primary key (column with unique values) for this table. It may contain duplicates.\nEach row of this table contains the product name and the date it was sold in a market.\n\n```\n\n\u00a0\n\n\nWrite a solution to find for each date the number of different products sold and their names.\n\n\nThe sold products names for each date should be sorted lexicographically.\n\n\nReturn the result table ordered by `sell_date`.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nActivities table:\n+------------+------------+\n| sell_date  | product     |\n+------------+------------+\n| 2020-05-30 | Headphone  |\n| 2020-06-01 | Pencil     |\n| 2020-06-02 | Mask       |\n| 2020-05-30 | Basketball |\n| 2020-06-01 | Bible      |\n| 2020-06-02 | Mask       |\n| 2020-05-30 | T-Shirt    |\n+------------+------------+",
                "Output": "** \n+------------+----------+------------------------------+\n| sell_date  | num_sold | products                     |\n+------------+----------+------------------------------+\n| 2020-05-30 | 3        | Basketball,Headphone,T-shirt |\n| 2020-06-01 | 2        | Bible,Pencil                 |\n| 2020-06-02 | 1        | Mask                         |\n+------------+----------+------------------------------+",
                "Explanation": "** \nFor 2020-05-30, Sold items were (Headphone, Basketball, T-shirt), we sort them lexicographically and separate them by a comma.\nFor 2020-06-01, Sold items were (Pencil, Bible), we sort them lexicographically and separate them by a comma.\nFor 2020-06-02, the Sold item is (Mask), we just return it."
            }
        ]
    },
    {
        "Title": "XOR Operation in an Array",
        "slug": "xor-operation-in-an-array",
        "description": "You are given an integer `n` and an integer `start`.\n\n\nDefine an array `nums` where `nums[i] = start + 2 * i` (**0-indexed**) and `n == nums.length`.\n\n\nReturn *the bitwise XOR of all elements of* `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** n = 5, start = 0",
                "Output": "** 8",
                "Explanation": "** Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.\nWhere \"^\" corresponds to bitwise XOR operator."
            },
            {
                "Input": "** n = 4, start = 3",
                "Output": "** 8",
                "Explanation": "** Array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8."
            }
        ]
    },
    {
        "Title": "Making File Names Unique",
        "slug": "making-file-names-unique",
        "description": "Given an array of strings `names` of size `n`. You will create `n` folders in your file system **such that**, at the `ith` minute, you will create a folder with the name `names[i]`.\n\n\nSince two files **cannot** have the same name, if you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of `(k)`, where, `k` is the **smallest positive integer** such that the obtained name remains unique.\n\n\nReturn *an array of strings of length* `n` where `ans[i]` is the actual name the system will assign to the `ith` folder when you create it.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** names = [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]",
                "Output": "** [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]",
                "Explanation": "** Let's see how the file system creates folder names:\n\"pes\" --> not assigned before, remains \"pes\"\n\"fifa\" --> not assigned before, remains \"fifa\"\n\"gta\" --> not assigned before, remains \"gta\"\n\"pes(2019)\" --> not assigned before, remains \"pes(2019)\""
            },
            {
                "Input": "** names = [\"gta\",\"gta(1)\",\"gta\",\"avalon\"]",
                "Output": "** [\"gta\",\"gta(1)\",\"gta(2)\",\"avalon\"]",
                "Explanation": "** Let's see how the file system creates folder names:\n\"gta\" --> not assigned before, remains \"gta\"\n\"gta(1)\" --> not assigned before, remains \"gta(1)\"\n\"gta\" --> the name is reserved, system adds (k), since \"gta(1)\" is also reserved, systems put k = 2. it becomes \"gta(2)\"\n\"avalon\" --> not assigned before, remains \"avalon\""
            },
            {
                "Input": "** names = [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece\"]",
                "Output": "** [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece(4)\"]",
                "Explanation": "** When the last folder is created, the smallest positive valid k is 4, and it becomes \"onepiece(4)\"."
            }
        ]
    },
    {
        "Title": "Avoid Flood in The City",
        "slug": "avoid-flood-in-the-city",
        "description": "Your country has an infinite number of lakes. Initially, all the lakes are empty, but when it rains over the `nth` lake, the `nth` lake becomes full of water. If it rains over a lake that is **full of water**, there will be a **flood**. Your goal is to avoid floods in any lake.\n\n\nGiven an integer array `rains` where:\n\n\n `rains[i] > 0` means there will be rains over the `rains[i]` lake.\n `rains[i] == 0` means there are no rains this day and you can choose **one lake** this day and **dry it**.\n\n\nReturn *an array `ans`* where:\n\n\n `ans.length == rains.length`\n `ans[i] == -1` if `rains[i] > 0`.\n `ans[i]` is the lake you choose to dry in the `ith` day if `rains[i] == 0`.\n\n\nIf there are multiple valid answers return **any** of them. If it is impossible to avoid flood return **an empty array**.\n\n\nNotice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Greedy",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** rains = [1,2,3,4]",
                "Output": "** [-1,-1,-1,-1]",
                "Explanation": "** After the first day full lakes are [1]\nAfter the second day full lakes are [1,2]\nAfter the third day full lakes are [1,2,3]\nAfter the fourth day full lakes are [1,2,3,4]\nThere's no day to dry any lake and there is no flood in any lake."
            },
            {
                "Input": "** rains = [1,2,0,0,2,1]",
                "Output": "** [-1,-1,2,1,-1,-1]",
                "Explanation": "** After the first day full lakes are [1]\nAfter the second day full lakes are [1,2]\nAfter the third day, we dry lake 2. Full lakes are [1]\nAfter the fourth day, we dry lake 1. There is no full lakes.\nAfter the fifth day, full lakes are [2].\nAfter the sixth day, full lakes are [1,2].\nIt is easy that this scenario is flood-free. [-1,-1,1,2,-1,-1] is another acceptable scenario."
            },
            {
                "Input": "** rains = [1,2,0,1,2]",
                "Output": "** []",
                "Explanation": "** After the second day, full lakes are  [1,2]. We have to dry one lake in the third day.\nAfter that, it will rain over lakes [1,2]. It's easy to prove that no matter which lake you choose to dry in the 3rd day, the other one will flood."
            }
        ]
    },
    {
        "Title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
        "slug": "find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree",
        "description": "Given a weighted undirected connected graph with `n`\u00a0vertices numbered from `0` to `n - 1`,\u00a0and an array `edges`\u00a0where `edges[i] = [ai, bi, weighti]` represents a bidirectional and weighted edge between nodes\u00a0`ai`\u00a0and `bi`. A minimum spanning tree (MST) is a subset of the graph's edges that connects all vertices without cycles\u00a0and with the minimum possible total edge weight.\n\n\nFind *all the critical and pseudo-critical edges in the given graph's minimum spanning tree (MST)*. An MST edge whose deletion from the graph would cause the MST weight to increase is called a\u00a0*critical edge*. On\u00a0the other hand, a pseudo-critical edge is that which can appear in some MSTs but not all.\n\n\nNote that you can return the indices of the edges in any order.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Union Find",
            "Graph",
            "Sorting",
            "Minimum Spanning Tree",
            "Strongly Connected Component"
        ],
        "examples": [
            {
                "Input": "** n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]",
                "Output": "** [[0,1],[2,3,4,5]]",
                "Explanation": "** The figure above describes the graph.\nThe following figure shows all the possible MSTs:\n![](https://assets.leetcode.com/uploads/2020/06/04/msts.png)\nNotice that the two edges 0 and 1 appear in all MSTs, therefore they are critical edges, so we return them in the first list of the output.\nThe edges 2, 3, 4, and 5 are only part of some MSTs, therefore they are considered pseudo-critical edges. We add them to the second list of the output."
            },
            {
                "Input": "** n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]]",
                "Output": "** [[],[0,1,2,3]]",
                "Explanation": "** We can observe that since all 4 edges have equal weight, choosing any 3 edges from the given 4 will yield an MST. Therefore all 4 edges are pseudo-critical."
            }
        ]
    },
    {
        "Title": "Average Salary Excluding the Minimum and Maximum Salary",
        "slug": "average-salary-excluding-the-minimum-and-maximum-salary",
        "description": "You are given an array of **unique** integers `salary` where `salary[i]` is the salary of the `ith` employee.\n\n\nReturn *the average salary of employees excluding the minimum and maximum salary*. Answers within `10-5` of the actual answer will be accepted.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** salary = [4000,3000,1000,2000]",
                "Output": "** 2500.00000",
                "Explanation": "** Minimum salary and maximum salary are 1000 and 4000 respectively.\nAverage salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500"
            },
            {
                "Input": "** salary = [1000,2000,3000]",
                "Output": "** 2000.00000",
                "Explanation": "** Minimum salary and maximum salary are 1000 and 3000 respectively.\nAverage salary excluding minimum and maximum salary is (2000) / 1 = 2000"
            }
        ]
    },
    {
        "Title": "The kth Factor of n",
        "slug": "the-kth-factor-of-n",
        "description": "You are given two positive integers `n` and `k`. A factor of an integer `n` is defined as an integer `i` where `n % i == 0`.\n\n\nConsider a list of all factors of `n` sorted in **ascending order**, return *the* `kth` *factor* in this list or return `-1` if `n` has less than `k` factors.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** n = 12, k = 3",
                "Output": "** 3",
                "Explanation": "** Factors list is [1, 2, 3, 4, 6, 12], the 3rd factor is 3."
            },
            {
                "Input": "** n = 7, k = 2",
                "Output": "** 7",
                "Explanation": "** Factors list is [1, 7], the 2nd factor is 7."
            },
            {
                "Input": "** n = 4, k = 4",
                "Output": "** -1",
                "Explanation": "** Factors list is [1, 2, 4], there is only 3 factors. We should return -1."
            }
        ]
    },
    {
        "Title": "Longest Subarray of 1's After Deleting One Element",
        "slug": "longest-subarray-of-1s-after-deleting-one-element",
        "description": "Given a binary array `nums`, you should delete one element from it.\n\n\nReturn *the size of the longest non-empty subarray containing only* `1`*'s in the resulting array*. Return `0` if there is no such subarray.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [1,1,0,1]",
                "Output": "** 3",
                "Explanation": "** After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's."
            },
            {
                "Input": "** nums = [0,1,1,1,0,1,1,0,1]",
                "Output": "** 5",
                "Explanation": "** After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1]."
            },
            {
                "Input": "** nums = [1,1,1]",
                "Output": "** 2",
                "Explanation": "** You must delete one element."
            }
        ]
    },
    {
        "Title": "Parallel Courses II",
        "slug": "parallel-courses-ii",
        "description": "You are given an integer `n`, which indicates that there are `n` courses labeled from `1` to `n`. You are also given an array `relations` where `relations[i] = [prevCoursei, nextCoursei]`, representing a prerequisite relationship between course `prevCoursei` and course `nextCoursei`: course `prevCoursei` has to be taken before course `nextCoursei`. Also, you are given the integer `k`.\n\n\nIn one semester, you can take **at most** `k` courses as long as you have taken all the prerequisites in the **previous** semesters for the courses you are taking.\n\n\nReturn *the **minimum** number of semesters needed to take all courses*. The testcases will be generated such that it is possible to take every course.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Bit Manipulation",
            "Graph",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** n = 4, relations = [[2,1],[3,1],[1,4]], k = 2",
                "Output": "** 3",
                "Explanation": "** The figure above represents the given graph.\nIn the first semester, you can take courses 2 and 3.\nIn the second semester, you can take course 1.\nIn the third semester, you can take course 4."
            },
            {
                "Input": "** n = 5, relations = [[2,1],[3,1],[4,1],[1,5]], k = 2",
                "Output": "** 4",
                "Explanation": "** The figure above represents the given graph.\nIn the first semester, you can only take courses 2 and 3 since you cannot take more than two per semester.\nIn the second semester, you can take course 4.\nIn the third semester, you can take course 1.\nIn the fourth semester, you can take course 5."
            }
        ]
    },
    {
        "Title": "Path Crossing",
        "slug": "path-crossing",
        "description": "Given a string `path`, where `path[i] = 'N'`, `'S'`, `'E'` or `'W'`, each representing moving one unit north, south, east, or west, respectively. You start at the origin `(0, 0)` on a 2D plane and walk on the path specified by `path`.\n\n\nReturn `true` *if the path crosses itself at any point, that is, if at any time you are on a location you have previously visited*. Return `false` otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** path = \"NES\"",
                "Output": "** false",
                "Explanation": "** Notice that the path doesn't cross any point more than once."
            },
            {
                "Input": "** path = \"NESWW\"",
                "Output": "** true",
                "Explanation": "** Notice that the path visits the origin twice."
            }
        ]
    },
    {
        "Title": "Check If Array Pairs Are Divisible by k",
        "slug": "check-if-array-pairs-are-divisible-by-k",
        "description": "Given an array of integers `arr` of even length `n` and an integer `k`.\n\n\nWe want to divide the array into exactly `n / 2` pairs such that the sum of each pair is divisible by `k`.\n\n\nReturn `true` *If you can find a way to do that or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** arr = [1,2,3,4,5,10,6,7,8,9], k = 5",
                "Output": "** true",
                "Explanation": "** Pairs are (1,9),(2,8),(3,7),(4,6) and (5,10)."
            },
            {
                "Input": "** arr = [1,2,3,4,5,6], k = 7",
                "Output": "** true",
                "Explanation": "** Pairs are (1,6),(2,5) and(3,4)."
            },
            {
                "Input": "** arr = [1,2,3,4,5,6], k = 10",
                "Output": "** false",
                "Explanation": "** You can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10."
            }
        ]
    },
    {
        "Title": "Number of Subsequences That Satisfy the Given Sum Condition",
        "slug": "number-of-subsequences-that-satisfy-the-given-sum-condition",
        "description": "You are given an array of integers `nums` and an integer `target`.\n\n\nReturn *the number of **non-empty** subsequences of* `nums` *such that the sum of the minimum and maximum element on it is less or equal to* `target`. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [3,5,6,7], target = 9",
                "Output": "** 4",
                "Explanation": "** There are 4 subsequences that satisfy the condition.\n[3] -> Min value + max value <= target (3 + 3 <= 9)\n[3,5] -> (3 + 5 <= 9)\n[3,5,6] -> (3 + 6 <= 9)\n[3,6] -> (3 + 6 <= 9)"
            },
            {
                "Input": "** nums = [3,3,6,8], target = 10",
                "Output": "** 6",
                "Explanation": "** There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).\n[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]"
            },
            {
                "Input": "** nums = [2,3,3,4,6,7], target = 12",
                "Output": "** 61",
                "Explanation": "** There are 63 non-empty subsequences, two of them do not satisfy the condition ([6,7], [7]).\nNumber of valid subsequences (63 - 2 = 61)."
            }
        ]
    },
    {
        "Title": "Max Value of Equation",
        "slug": "max-value-of-equation",
        "description": "You are given an array `points` containing the coordinates of points on a 2D plane, sorted by the x-values, where `points[i] = [xi, yi]` such that `xi < xj` for all `1 <= i < j <= points.length`. You are also given an integer `k`.\n\n\nReturn *the maximum value of the equation* `yi + yj + |xi - xj|` where `|xi - xj| <= k` and `1 <= i < j <= points.length`.\n\n\nIt is guaranteed that there exists at least one pair of points that satisfy the constraint `|xi - xj| <= k`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Queue",
            "Sliding Window",
            "Heap (Priority Queue)",
            "Monotonic Queue"
        ],
        "examples": [
            {
                "Input": "** points = [[1,3],[2,0],[5,10],[6,-10]], k = 1",
                "Output": "** 4",
                "Explanation": "** The first two points satisfy the condition |xi - xj| <= 1 and if we calculate the equation we get 3 + 0 + |1 - 2| = 4. Third and fourth points also satisfy the condition and give a value of 10 + -10 + |5 - 6| = 1.\nNo other pairs satisfy the condition, so we return the max of 4 and 1."
            },
            {
                "Input": "** points = [[0,0],[3,0],[9,2]], k = 3",
                "Output": "** 3",
                "Explanation": "** Only the first two points have an absolute difference of 3 or less in the x-values, and give the value of 0 + 0 + |0 - 3| = 3."
            }
        ]
    },
    {
        "Title": "Can Make Arithmetic Progression From Sequence",
        "slug": "can-make-arithmetic-progression-from-sequence",
        "description": "A sequence of numbers is called an **arithmetic progression** if the difference between any two consecutive elements is the same.\n\n\nGiven an array of numbers `arr`, return `true` *if the array can be rearranged to form an **arithmetic progression**. Otherwise, return* `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** arr = [3,5,1]",
                "Output": "** true",
                "Explanation": "** We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements."
            },
            {
                "Input": "** arr = [1,2,4]",
                "Output": "** false",
                "Explanation": "** There is no way to reorder the elements to obtain an arithmetic progression."
            }
        ]
    },
    {
        "Title": "Last Moment Before All Ants Fall Out of a Plank",
        "slug": "last-moment-before-all-ants-fall-out-of-a-plank",
        "description": "We have a wooden plank of the length `n` **units**. Some ants are walking on the plank, each ant moves with a speed of **1 unit per second**. Some of the ants move to the **left**, the other move to the **right**.\n\n\nWhen two ants moving in two **different** directions meet at some point, they change their directions and continue moving again. Assume changing directions does not take any additional time.\n\n\nWhen an ant reaches **one end** of the plank at a time `t`, it falls out of the plank immediately.\n\n\nGiven an integer `n` and two integer arrays `left` and `right`, the positions of the ants moving to the left and the right, return *the moment when the last ant(s) fall out of the plank*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Brainteaser",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** n = 4, left = [4,3], right = [0,1]",
                "Output": "** 4",
                "Explanation": "** In the image above:\n-The ant at index 0 is named A and going to the right.\n-The ant at index 1 is named B and going to the right.\n-The ant at index 3 is named C and going to the left.\n-The ant at index 4 is named D and going to the left.\nThe last moment when an ant was on the plank is t = 4 seconds. After that, it falls immediately out of the plank. (i.e., We can say that at t = 4.0000000001, there are no ants on the plank)."
            },
            {
                "Input": "** n = 7, left = [], right = [0,1,2,3,4,5,6,7]",
                "Output": "** 7",
                "Explanation": "** All ants are going to the right, the ant at index 0 needs 7 seconds to fall."
            },
            {
                "Input": "** n = 7, left = [0,1,2,3,4,5,6,7], right = []",
                "Output": "** 7",
                "Explanation": "** All ants are going to the left, the ant at index 7 needs 7 seconds to fall."
            }
        ]
    },
    {
        "Title": "Count Submatrices With All Ones",
        "slug": "count-submatrices-with-all-ones",
        "description": "Given an `m x n` binary matrix `mat`, *return the number of **submatrices** that have all ones*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Stack",
            "Matrix",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** mat = [[1,0,1],[1,1,0],[1,1,0]]",
                "Output": "** 13",
                "Explanation": "** \nThere are 6 rectangles of side 1x1.\nThere are 2 rectangles of side 1x2.\nThere are 3 rectangles of side 2x1.\nThere is 1 rectangle of side 2x2. \nThere is 1 rectangle of side 3x1.\nTotal number of rectangles = 6 + 2 + 3 + 1 + 1 = 13."
            },
            {
                "Input": "** mat = [[0,1,1,0],[0,1,1,1],[1,1,1,0]]",
                "Output": "** 24",
                "Explanation": "** \nThere are 8 rectangles of side 1x1.\nThere are 5 rectangles of side 1x2.\nThere are 2 rectangles of side 1x3. \nThere are 4 rectangles of side 2x1.\nThere are 2 rectangles of side 2x2. \nThere are 2 rectangles of side 3x1. \nThere is 1 rectangle of side 3x2. \nTotal number of rectangles = 8 + 5 + 2 + 4 + 2 + 2 + 1 = 24."
            }
        ]
    },
    {
        "Title": "Minimum Possible Integer After at Most K Adjacent Swaps On Digits",
        "slug": "minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits",
        "description": "You are given a string `num` representing **the digits** of a very large integer and an integer `k`. You are allowed to swap any two adjacent digits of the integer **at most** `k` times.\n\n\nReturn *the minimum integer you can obtain also as a string*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Greedy",
            "Binary Indexed Tree",
            "Segment Tree"
        ],
        "examples": [
            {
                "Input": "** num = \"4321\", k = 4",
                "Output": "** \"1342\"",
                "Explanation": "** The steps to obtain the minimum integer from 4321 with 4 adjacent swaps are shown."
            }
        ]
    },
    {
        "Title": "Reformat Date",
        "slug": "reformat-date",
        "description": "Given a `date` string in the form\u00a0`Day Month Year`, where:\n\n\n `Day`\u00a0is in the set `{\"1st\", \"2nd\", \"3rd\", \"4th\", ..., \"30th\", \"31st\"}`.\n `Month`\u00a0is in the set `{\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"}`.\n `Year`\u00a0is in the range `[1900, 2100]`.\n\n\nConvert the date string to the format `YYYY-MM-DD`, where:\n\n\n `YYYY` denotes the 4 digit year.\n `MM` denotes the 2 digit month.\n `DD` denotes the 2 digit day.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** date = \"20th Oct 2052\"",
                "Output": "** \"2052-10-20\"",
                "Explanation": null
            },
            {
                "Input": "** date = \"6th Jun 1933\"",
                "Output": "** \"1933-06-06\"",
                "Explanation": null
            },
            {
                "Input": "** date = \"26th May 1960\"",
                "Output": "** \"1960-05-26\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Range Sum of Sorted Subarray Sums",
        "slug": "range-sum-of-sorted-subarray-sums",
        "description": "You are given the array `nums` consisting of `n` positive integers. You computed the sum of all non-empty continuous subarrays from the array and then sorted them in non-decreasing order, creating a new array of `n * (n + 1) / 2` numbers.\n\n\nReturn the sum of the numbers from index* `left` *to index* `right` (**indexed from 1**)*, inclusive, in the new array.* Since the answer can be a huge number return it modulo `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4], n = 4, left = 1, right = 5",
                "Output": "** 13",
                "Explanation": "** All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13."
            },
            {
                "Input": "** nums = [1,2,3,4], n = 4, left = 3, right = 4",
                "Output": "** 6",
                "Explanation": "** The given array is the same as example 1. We have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6."
            },
            {
                "Input": "** nums = [1,2,3,4], n = 4, left = 1, right = 10",
                "Output": "** 50",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Difference Between Largest and Smallest Value in Three Moves",
        "slug": "minimum-difference-between-largest-and-smallest-value-in-three-moves",
        "description": "You are given an integer array `nums`.\n\n\nIn one move, you can choose one element of `nums` and change it to **any value**.\n\n\nReturn *the minimum difference between the largest and smallest value of `nums` **after performing at most three moves***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [5,3,2,4]",
                "Output": "** 0",
                "Explanation": "** We can make at most 3 moves.\nIn the first move, change 2 to 3. nums becomes [5,3,3,4].\nIn the second move, change 4 to 3. nums becomes [5,3,3,3].\nIn the third move, change 5 to 3. nums becomes [3,3,3,3].\nAfter performing 3 moves, the difference between the minimum and maximum is 3 - 3 = 0."
            },
            {
                "Input": "** nums = [1,5,0,10,14]",
                "Output": "** 1",
                "Explanation": "** We can make at most 3 moves.\nIn the first move, change 5 to 0. nums becomes [1,0,0,10,14].\nIn the second move, change 10 to 0. nums becomes [1,0,0,0,14].\nIn the third move, change 14 to 1. nums becomes [1,0,0,0,1].\nAfter performing 3 moves, the difference between the minimum and maximum is 1 - 0 = 1.\nIt can be shown that there is no way to make the difference 0 in 3 moves."
            },
            {
                "Input": "** nums = [3,100,20]",
                "Output": "** 0",
                "Explanation": "** We can make at most 3 moves.\nIn the first move, change 100 to 7. nums becomes [3,7,20].\nIn the second move, change 20 to 7. nums becomes [3,7,7].\nIn the third move, change 3 to 7. nums becomes [7,7,7].\nAfter performing 3 moves, the difference between the minimum and maximum is 7 - 7 = 0."
            }
        ]
    },
    {
        "Title": "Stone Game IV",
        "slug": "stone-game-iv",
        "description": "Alice and Bob take turns playing a game, with Alice starting first.\n\n\nInitially, there are `n` stones in a pile. On each player's turn, that player makes a *move* consisting of removing **any** non-zero **square number** of stones in the pile.\n\n\nAlso, if a player cannot make a move, he/she loses the game.\n\n\nGiven a positive integer `n`, return `true` if and only if Alice wins the game otherwise return `false`, assuming both players play optimally.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Game Theory"
        ],
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** true",
                "Explanation": "** Alice can remove 1 stone winning the game because Bob doesn't have any moves."
            },
            {
                "Input": "** n = 2",
                "Output": "** false",
                "Explanation": "** Alice can only remove 1 stone, after that Bob removes the last one winning the game (2 -> 1 -> 0)."
            },
            {
                "Input": "** n = 4",
                "Output": "** true",
                "Explanation": "** n is already a perfect square, Alice can win with one move, removing 4 stones (4 -> 0)."
            }
        ]
    },
    {
        "Title": "Number of Good Pairs",
        "slug": "number-of-good-pairs",
        "description": "Given an array of integers `nums`, return *the number of **good pairs***.\n\n\nA pair `(i, j)` is called *good* if `nums[i] == nums[j]` and `i` < `j`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,1,1,3]",
                "Output": "** 4",
                "Explanation": "** There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed."
            },
            {
                "Input": "** nums = [1,1,1,1]",
                "Output": "** 6",
                "Explanation": "** Each pair in the array are *good*."
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Substrings With Only 1s",
        "slug": "number-of-substrings-with-only-1s",
        "description": "Given a binary string `s`, return *the number of substrings with all characters* `1`*'s*. Since the answer may be too large, return it modulo `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"0110111\"",
                "Output": "** 9",
                "Explanation": "** There are 9 substring in total with only 1's characters.\n\"1\" -> 5 times.\n\"11\" -> 3 times.\n\"111\" -> 1 time."
            },
            {
                "Input": "** s = \"101\"",
                "Output": "** 2",
                "Explanation": "** Substring \"1\" is shown 2 times in s."
            },
            {
                "Input": "** s = \"111111\"",
                "Output": "** 21",
                "Explanation": "** Each substring contains only 1's characters."
            }
        ]
    },
    {
        "Title": "Best Position for a Service Centre",
        "slug": "best-position-for-a-service-centre",
        "description": "A delivery company wants to build a new service center in a new city. The company knows the positions of all the customers in this city on a 2D-Map and wants to build the new center in a position such that **the sum of the euclidean distances to all customers is minimum**.\n\n\nGiven an array `positions` where `positions[i] = [xi, yi]` is the position of the `ith` customer on the map, return *the minimum sum of the euclidean distances* to all customers.\n\n\nIn other words, you need to choose the position of the service center `[xcentre, ycentre]` such that the following formula is minimized:\n\n\n![](https://assets.leetcode.com/uploads/2020/06/25/q4_edited.jpg)\nAnswers within `10-5` of the actual value will be accepted.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Geometry",
            "Randomized"
        ],
        "examples": [
            {
                "Input": "** positions = [[0,1],[1,0],[1,2],[2,1]]",
                "Output": "** 4.00000",
                "Explanation": "** As shown, you can see that choosing [xcentre, ycentre] = [1, 1] will make the distance to each customer = 1, the sum of all distances is 4 which is the minimum possible we can achieve."
            },
            {
                "Input": "** positions = [[1,1],[3,3]]",
                "Output": "** 2.82843",
                "Explanation": "** The minimum possible sum of distances = sqrt(2) + sqrt(2) = 2.82843"
            }
        ]
    },
    {
        "Title": "Find Users With Valid E-Mails",
        "slug": "find-users-with-valid-e-mails",
        "description": "Table: `Users`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| user_id       | int     |\n| name          | varchar |\n| mail          | varchar |\n+---------------+---------+\nuser_id is the primary key (column with unique values) for this table.\nThis table contains information of the users signed up in a website. Some e-mails are invalid.\n\n```\n\n\u00a0\n\n\nWrite a solution to find the users who have **valid emails**.\n\n\nA valid e-mail has a prefix name and a domain where:\n\n\n **The prefix name** is a string that may contain letters (upper or lower case), digits, underscore `'_'`, period `'.'`, and/or dash `'-'`. The prefix name **must** start with a letter.\n **The domain** is `'@leetcode.com'`.\n\n\nReturn the result table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nUsers table:\n+---------+-----------+-------------------------+\n| user_id | name      | mail                    |\n+---------+-----------+-------------------------+\n| 1       | Winston   | winston@leetcode.com    |\n| 2       | Jonathan  | jonathanisgreat         |\n| 3       | Annabelle | bella-@leetcode.com     |\n| 4       | Sally     | sally.come@leetcode.com |\n| 5       | Marwan    | quarz#2020@leetcode.com |\n| 6       | David     | david69@gmail.com       |\n| 7       | Shapiro   | .shapo@leetcode.com     |\n+---------+-----------+-------------------------+",
                "Output": "** \n+---------+-----------+-------------------------+\n| user_id | name      | mail                    |\n+---------+-----------+-------------------------+\n| 1       | Winston   | winston@leetcode.com    |\n| 3       | Annabelle | bella-@leetcode.com     |\n| 4       | Sally     | sally.come@leetcode.com |\n+---------+-----------+-------------------------+",
                "Explanation": "** \nThe mail of user 2 does not have a domain.\nThe mail of user 5 has the # sign which is not allowed.\nThe mail of user 6 does not have the leetcode domain.\nThe mail of user 7 starts with a period."
            }
        ]
    },
    {
        "Title": "Water Bottles",
        "slug": "water-bottles",
        "description": "There are `numBottles` water bottles that are initially full of water. You can exchange `numExchange` empty water bottles from the market with one full water bottle.\n\n\nThe operation of drinking a full water bottle turns it into an empty bottle.\n\n\nGiven the two integers `numBottles` and `numExchange`, return *the **maximum** number of water bottles you can drink*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** numBottles = 9, numExchange = 3",
                "Output": "** 13",
                "Explanation": "** You can exchange 3 empty bottles to get 1 full water bottle.\nNumber of water bottles you can drink: 9 + 3 + 1 = 13."
            },
            {
                "Input": "** numBottles = 15, numExchange = 4",
                "Output": "** 19",
                "Explanation": "** You can exchange 4 empty bottles to get 1 full water bottle. \nNumber of water bottles you can drink: 15 + 3 + 1 = 19."
            }
        ]
    },
    {
        "Title": "Number of Nodes in the Sub-Tree With the Same Label",
        "slug": "number-of-nodes-in-the-sub-tree-with-the-same-label",
        "description": "You are given a tree (i.e. a connected, undirected graph that has no cycles) consisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1` `edges`. The **root** of the tree is the node `0`, and each node of the tree has **a label** which is a lower-case character given in the string `labels` (i.e. The node with the number `i` has the label `labels[i]`).\n\n\nThe `edges` array is given on the form `edges[i] = [ai, bi]`, which means there is an edge between nodes `ai` and `bi` in the tree.\n\n\nReturn *an array of size `n`* where `ans[i]` is the number of nodes in the subtree of the `ith` node which have the same label as node `i`.\n\n\nA subtree of a tree `T` is the tree consisting of a node in `T` and all of its descendant nodes.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], labels = \"abaedcd\"",
                "Output": "** [2,1,1,1,1,1,1]",
                "Explanation": "** Node 0 has label 'a' and its sub-tree has node 2 with label 'a' as well, thus the answer is 2. Notice that any node is part of its sub-tree.\nNode 1 has a label 'b'. The sub-tree of node 1 contains nodes 1,4 and 5, as nodes 4 and 5 have different labels than node 1, the answer is just 1 (the node itself)."
            },
            {
                "Input": "** n = 4, edges = [[0,1],[1,2],[0,3]], labels = \"bbbb\"",
                "Output": "** [4,2,1,1]",
                "Explanation": "** The sub-tree of node 2 contains only node 2, so the answer is 1.\nThe sub-tree of node 3 contains only node 3, so the answer is 1.\nThe sub-tree of node 1 contains nodes 1 and 2, both have label 'b', thus the answer is 2.\nThe sub-tree of node 0 contains nodes 0, 1, 2 and 3, all with label 'b', thus the answer is 4."
            },
            {
                "Input": "** n = 5, edges = [[0,1],[0,2],[1,3],[0,4]], labels = \"aabab\"",
                "Output": "** [3,2,1,1,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Number of Non-Overlapping Substrings",
        "slug": "maximum-number-of-non-overlapping-substrings",
        "description": "Given a string `s` of lowercase letters, you need to find the maximum number of **non-empty** substrings of `s` that meet the following conditions:\n\n\n1. The substrings do not overlap, that is for any two substrings `s[i..j]` and `s[x..y]`, either `j < x` or `i > y` is true.\n2. A substring that contains a certain character `c` must also contain all occurrences of `c`.\n\n\nFind *the maximum number of substrings that meet the above conditions*. If there are multiple solutions with the same number of substrings, *return the one with minimum total length.* It can be shown that there exists a unique solution of minimum total length.\n\n\nNotice that you can return the substrings in **any** order.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"adefaddaccc\"",
                "Output": "** [\"e\",\"f\",\"ccc\"]",
                "Explanation": "**\u00a0The following are all the possible substrings that meet the conditions:\n[\n\u00a0 \"adefaddaccc\"\n\u00a0 \"adefadda\",\n\u00a0 \"ef\",\n\u00a0 \"e\",\n  \"f\",\n\u00a0 \"ccc\",\n]\nIf we choose the first string, we cannot choose anything else and we'd get only 1. If we choose \"adefadda\", we are left with \"ccc\" which is the only one that doesn't overlap, thus obtaining 2 substrings. Notice also, that it's not optimal to choose \"ef\" since it can be split into two. Therefore, the optimal way is to choose [\"e\",\"f\",\"ccc\"] which gives us 3 substrings. No other solution of the same number of substrings exist."
            },
            {
                "Input": "** s = \"abbaccd\"",
                "Output": "** [\"d\",\"bb\",\"cc\"]",
                "Explanation": "** Notice that while the set of substrings [\"d\",\"abba\",\"cc\"] also has length 3, it's considered incorrect since it has larger total length."
            }
        ]
    },
    {
        "Title": "Find a Value of a Mysterious Function Closest to Target",
        "slug": "find-a-value-of-a-mysterious-function-closest-to-target",
        "description": "![](https://assets.leetcode.com/uploads/2020/07/09/change.png)\n\n\nWinston was given the above mysterious function `func`. He has an integer array `arr` and an integer `target` and he wants to find the values `l` and `r` that make the value `|func(arr, l, r) - target|` minimum possible.\n\n\nReturn *the minimum possible value* of `|func(arr, l, r) - target|`.\n\n\nNotice that `func` should be called with the values `l` and `r` where `0 <= l, r < arr.length`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Bit Manipulation",
            "Segment Tree"
        ],
        "examples": [
            {
                "Input": "** arr = [9,12,3,7,15], target = 5",
                "Output": "** 2",
                "Explanation": "** Calling func with all the pairs of [l,r] = [[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]], Winston got the following results [9,12,3,7,15,8,0,3,7,0,0,3,0,0,0]. The value closest to 5 is 7 and 3, thus the minimum difference is 2."
            },
            {
                "Input": "** arr = [1000000,1000000,1000000], target = 1",
                "Output": "** 999999",
                "Explanation": "** Winston called the func with all possible values of [l,r] and he always got 1000000, thus the min difference is 999999."
            },
            {
                "Input": "** arr = [1,2,4,8,16], target = 0",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count Odd Numbers in an Interval Range",
        "slug": "count-odd-numbers-in-an-interval-range",
        "description": "Given two non-negative integers `low` and `high`. Return the *count of odd numbers between* `low` *and* `high`*(inclusive)*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** low = 3, high = 7",
                "Output": "** 3",
                "Explanation": "** The odd numbers between 3 and 7 are [3,5,7]."
            },
            {
                "Input": "** low = 8, high = 10",
                "Output": "** 1",
                "Explanation": "** The odd numbers between 8 and 10 are [9]."
            }
        ]
    },
    {
        "Title": "Number of Sub-arrays With Odd Sum",
        "slug": "number-of-sub-arrays-with-odd-sum",
        "description": "Given an array of integers `arr`, return *the number of subarrays with an **odd** sum*.\n\n\nSince the answer can be very large, return it modulo `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** arr = [1,3,5]",
                "Output": "** 4",
                "Explanation": "** All subarrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]\nAll sub-arrays sum are [1,4,9,3,8,5].\nOdd sums are [1,9,3,5] so the answer is 4."
            },
            {
                "Input": "** arr = [2,4,6]",
                "Output": "** 0",
                "Explanation": "** All subarrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]\nAll sub-arrays sum are [2,6,12,4,10,6].\nAll sub-arrays have even sum and the answer is 0."
            },
            {
                "Input": "** arr = [1,2,3,4,5,6,7]",
                "Output": "** 16",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Good Ways to Split a String",
        "slug": "number-of-good-ways-to-split-a-string",
        "description": "You are given a string `s`.\n\n\nA split is called **good** if you can split `s` into two non-empty strings `sleft` and `sright` where their concatenation is equal to `s` (i.e., `sleft + sright = s`) and the number of distinct letters in `sleft` and `sright` is the same.\n\n\nReturn *the number of **good splits** you can make in `s`*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Dynamic Programming",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** s = \"aacaba\"",
                "Output": "** 2",
                "Explanation": "** There are 5 ways to split \"aacaba\" and 2 of them are good. \n(\"a\", \"acaba\") Left string and right string contains 1 and 3 different letters respectively.\n(\"aa\", \"caba\") Left string and right string contains 1 and 3 different letters respectively.\n(\"aac\", \"aba\") Left string and right string contains 2 and 2 different letters respectively (good split).\n(\"aaca\", \"ba\") Left string and right string contains 2 and 2 different letters respectively (good split).\n(\"aacab\", \"a\") Left string and right string contains 3 and 1 different letters respectively."
            },
            {
                "Input": "** s = \"abcd\"",
                "Output": "** 1",
                "Explanation": "** Split the string as follows (\"ab\", \"cd\")."
            }
        ]
    },
    {
        "Title": "Minimum Number of Increments on Subarrays to Form a Target Array",
        "slug": "minimum-number-of-increments-on-subarrays-to-form-a-target-array",
        "description": "You are given an integer array `target`. You have an integer array `initial` of the same size as `target` with all elements initially zeros.\n\n\nIn one operation you can choose **any** subarray from `initial` and increment each value by one.\n\n\nReturn *the minimum number of operations to form a* `target` *array from* `initial`.\n\n\nThe test cases are generated so that the answer fits in a 32-bit integer.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Stack",
            "Greedy",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** target = [1,2,3,2,1]",
                "Output": "** 3",
                "Explanation": "** We need at least 3 operations to form the target array from the initial array.\n[**0,0,0,0,0**] increment 1 from index 0 to 4 (inclusive).\n[1,**1,1,1**,1] increment 1 from index 1 to 3 (inclusive).\n[1,2,**2**,2,1] increment 1 at index 2.\n[1,2,3,2,1] target array is formed."
            },
            {
                "Input": "** target = [3,1,1,2]",
                "Output": "** 4",
                "Explanation": "** [**0,0,0,0**] -> [1,1,1,**1**] -> [**1**,1,1,2] -> [**2**,1,1,2] -> [3,1,1,2]"
            },
            {
                "Input": "** target = [3,1,5,4,2]",
                "Output": "** 7",
                "Explanation": "** [**0,0,0,0,0**] -> [**1**,1,1,1,1] -> [**2**,1,1,1,1] -> [3,1,**1,1,1**] -> [3,1,**2,2**,2] -> [3,1,**3,3**,2] -> [3,1,**4**,4,2] -> [3,1,5,4,2]."
            }
        ]
    },
    {
        "Title": "Patients With a Condition",
        "slug": "patients-with-a-condition",
        "description": "Table: `Patients`\n\n\n\n```\n\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| patient_id   | int     |\n| patient_name | varchar |\n| conditions   | varchar |\n+--------------+---------+\npatient_id is the primary key (column with unique values) for this table.\n'conditions' contains 0 or more code separated by spaces. \nThis table contains information of the patients in the hospital.\n\n```\n\n\u00a0\n\n\nWrite a solution to find the patient\\_id, patient\\_name, and conditions of the patients who have Type I Diabetes. Type I Diabetes always starts with `DIAB1` prefix.\n\n\nReturn the result table in **any order**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nPatients table:\n+------------+--------------+--------------+\n| patient_id | patient_name | conditions   |\n+------------+--------------+--------------+\n| 1          | Daniel       | YFEV COUGH   |\n| 2          | Alice        |              |\n| 3          | Bob          | DIAB100 MYOP |\n| 4          | George       | ACNE DIAB100 |\n| 5          | Alain        | DIAB201      |\n+------------+--------------+--------------+",
                "Output": "** \n+------------+--------------+--------------+\n| patient_id | patient_name | conditions   |\n+------------+--------------+--------------+\n| 3          | Bob          | DIAB100 MYOP |\n| 4          | George       | ACNE DIAB100 | \n+------------+--------------+--------------+",
                "Explanation": "** Bob and George both have a condition that starts with DIAB1."
            }
        ]
    },
    {
        "Title": "Shuffle String",
        "slug": "shuffle-string",
        "description": "You are given a string `s` and an integer array `indices` of the **same length**. The string `s` will be shuffled such that the character at the `ith` position moves to `indices[i]` in the shuffled string.\n\n\nReturn *the shuffled string*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"codeleet\", indices = [4,5,6,7,0,2,1,3]",
                "Output": "** \"leetcode\"",
                "Explanation": "** As shown, \"codeleet\" becomes \"leetcode\" after shuffling."
            }
        ]
    },
    {
        "Title": "Minimum Suffix Flips",
        "slug": "minimum-suffix-flips",
        "description": "You are given a **0-indexed** binary string `target` of length `n`. You have another binary string `s` of length `n` that is initially set to all zeros. You want to make `s` equal to `target`.\n\n\nIn one operation, you can pick an index `i` where `0 <= i < n` and flip all bits in the **inclusive** range `[i, n - 1]`. Flip means changing `'0'` to `'1'` and `'1'` to `'0'`.\n\n\nReturn *the minimum number of operations needed to make* `s` *equal to* `target`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** target = \"10111\"",
                "Output": "** 3",
                "Explanation": "** Initially, s = \"00000\".\nChoose index i = 2: \"00000\" -> \"00111\"\nChoose index i = 0: \"00111\" -> \"11000\"\nChoose index i = 1: \"11000\" -> \"10111\"\nWe need at least 3 flip operations to form target."
            },
            {
                "Input": "** target = \"101\"",
                "Output": "** 3",
                "Explanation": "** Initially, s = \"000\".\nChoose index i = 0: \"000\" -> \"111\"\nChoose index i = 1: \"111\" -> \"100\"\nChoose index i = 2: \"100\" -> \"101\"\nWe need at least 3 flip operations to form target."
            },
            {
                "Input": "** target = \"00000\"",
                "Output": "** 0",
                "Explanation": "** We do not need any operations since the initial s already equals target."
            }
        ]
    },
    {
        "Title": "Number of Good Leaf Nodes Pairs",
        "slug": "number-of-good-leaf-nodes-pairs",
        "description": "You are given the `root` of a binary tree and an integer `distance`. A pair of two different **leaf** nodes of a binary tree is said to be good if the length of **the shortest path** between them is less than or equal to `distance`.\n\n\nReturn *the number of good leaf node pairs* in the tree.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,2,3,null,4], distance = 3",
                "Output": "** 1",
                "Explanation": "** The leaf nodes of the tree are 3 and 4 and the length of the shortest path between them is 3. This is the only good pair."
            },
            {
                "Input": "** root = [1,2,3,4,5,6,7], distance = 3",
                "Output": "** 2",
                "Explanation": "** The good pairs are [4,5] and [6,7] with shortest path = 2. The pair [4,6] is not good because the length of ther shortest path between them is 4."
            }
        ]
    },
    {
        "Title": "String Compression II",
        "slug": "string-compression-ii",
        "description": "[Run-length encoding](http://en.wikipedia.org/wiki/Run-length_encoding) is a string compression method that works by\u00a0replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string\u00a0`\"aabccc\"`\u00a0we replace `\"aa\"`\u00a0by\u00a0`\"a2\"`\u00a0and replace `\"ccc\"`\u00a0by\u00a0`\"c3\"`. Thus the compressed string becomes `\"a2bc3\"`.\n\n\nNotice that in this problem, we are not adding\u00a0`'1'`\u00a0after single characters.\n\n\nGiven a\u00a0string `s`\u00a0and an integer `k`. You need to delete **at most**\u00a0`k` characters from\u00a0`s`\u00a0such that the run-length encoded version of `s`\u00a0has minimum length.\n\n\nFind the *minimum length of the run-length encoded\u00a0version of* `s` *after deleting at most* `k` *characters*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"aaabcccd\", k = 2",
                "Output": "** 4",
                "Explanation": "** Compressing s without deleting anything will give us \"a3bc3d\" of length 6. Deleting any of the characters 'a' or 'c' would at most decrease the length of the compressed string to 5, for instance delete 2 'a' then we will have s = \"abcccd\" which compressed is abc3d. Therefore, the optimal way is to delete 'b' and 'd', then the compressed version of s will be \"a3c3\" of length 4."
            },
            {
                "Input": "** s = \"aabbaa\", k = 2",
                "Output": "** 2",
                "Explanation": "** If we delete both 'b' characters, the resulting compressed string would be \"a4\" of length 2."
            },
            {
                "Input": "** s = \"aaaaaaaaaaa\", k = 0",
                "Output": "** 3",
                "Explanation": "** Since k is zero, we cannot delete anything. The compressed string is \"a11\" of length 3."
            }
        ]
    },
    {
        "Title": "Count Good Triplets",
        "slug": "count-good-triplets",
        "description": "Given an array of integers `arr`, and three integers\u00a0`a`,\u00a0`b`\u00a0and\u00a0`c`. You need to find the number of good triplets.\n\n\nA triplet `(arr[i], arr[j], arr[k])`\u00a0is **good** if the following conditions are true:\n\n\n `0 <= i < j < k <\u00a0arr.length`\n `|arr[i] - arr[j]| <= a`\n `|arr[j] - arr[k]| <= b`\n `|arr[i] - arr[k]| <= c`\n\n\nWhere `|x|` denotes the absolute value of `x`.\n\n\nReturn *the number of good triplets*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3",
                "Output": "** 4",
                "Explanation": "**\u00a0There are 4 good triplets: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)]."
            },
            {
                "Input": "** arr = [1,1,2,2,3], a = 0, b = 0, c = 1",
                "Output": "** 0",
                "Explanation": "** No triplet satisfies all conditions."
            }
        ]
    },
    {
        "Title": "Find the Winner of an Array Game",
        "slug": "find-the-winner-of-an-array-game",
        "description": "Given an integer array `arr` of **distinct** integers and an integer `k`.\n\n\nA game will be played between the first two elements of the array (i.e. `arr[0]` and `arr[1]`). In each round of the game, we compare `arr[0]` with `arr[1]`, the larger integer wins and remains at position `0`, and the smaller integer moves to the end of the array. The game ends when an integer wins `k` consecutive rounds.\n\n\nReturn *the integer which will win the game*.\n\n\nIt is **guaranteed** that there will be a winner of the game.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** arr = [2,1,3,5,4,6,7], k = 2",
                "Output": "** 5",
                "Explanation": "** Let's see the rounds of the game:\nRound |       arr       | winner | win_count\n  1   | [2,1,3,5,4,6,7] | 2      | 1\n  2   | [2,3,5,4,6,7,1] | 3      | 1\n  3   | [3,5,4,6,7,1,2] | 5      | 1\n  4   | [5,4,6,7,1,2,3] | 5      | 2\nSo we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games."
            },
            {
                "Input": "** arr = [3,2,1], k = 10",
                "Output": "** 3",
                "Explanation": "** 3 will win the first 10 rounds consecutively."
            }
        ]
    },
    {
        "Title": "Minimum Swaps to Arrange a Binary Grid",
        "slug": "minimum-swaps-to-arrange-a-binary-grid",
        "description": "Given an `n x n` binary `grid`, in one step you can choose two **adjacent rows** of the grid and swap them.\n\n\nA grid is said to be **valid** if all the cells above the main diagonal are **zeros**.\n\n\nReturn *the minimum number of steps* needed to make the grid valid, or **-1** if the grid cannot be valid.\n\n\nThe main diagonal of a grid is the diagonal that starts at cell `(1, 1)` and ends at cell `(n, n)`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[0,0,1],[1,1,0],[1,0,0]]",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]",
                "Output": "** -1",
                "Explanation": "** All rows are similar, swaps have no effect on the grid."
            },
            {
                "Input": "** grid = [[1,0,0],[1,1,0],[1,1,1]]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Get the Maximum Score",
        "slug": "get-the-maximum-score",
        "description": "You are given two **sorted** arrays of distinct integers `nums1` and `nums2`.\n\n\nA **validpath** is defined as follows:\n\n\n Choose array `nums1` or `nums2` to traverse (from index-0).\n Traverse the current array from left to right.\n If you are reading any value that is present in `nums1` and `nums2` you are allowed to change your path to the other array. (Only one repeated value is considered in the valid path).\n\n\nThe **score** is defined as the sum of unique values in a valid path.\n\n\nReturn *the maximum score you can obtain of all possible **valid paths***. Since the answer may be too large, return it modulo `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Two Pointers",
            "Dynamic Programming",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]",
                "Output": "** 30",
                "Explanation": "** Valid paths:\n[2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10],  (starting from nums1)\n[4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10]    (starting from nums2)\nThe maximum is obtained with the path in green **[2,4,6,8,10]**."
            }
        ]
    },
    {
        "Title": "Kth Missing Positive Number",
        "slug": "kth-missing-positive-number",
        "description": "Given an array `arr` of positive integers sorted in a **strictly increasing order**, and an integer `k`.\n\n\nReturn *the* `kth` ***positive** integer that is **missing** from this array.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** arr = [2,3,4,7,11], k = 5",
                "Output": "** 9",
                "Explanation": "** The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th\u00a0missing positive integer is 9."
            },
            {
                "Input": "** arr = [1,2,3,4], k = 2",
                "Output": "** 6",
                "Explanation": "** The missing positive integers are [5,6,7,...]. The 2nd missing positive integer is 6."
            }
        ]
    },
    {
        "Title": "Can Convert String in K Moves",
        "slug": "can-convert-string-in-k-moves",
        "description": "Given two strings\u00a0`s`\u00a0and\u00a0`t`, your goal is to convert\u00a0`s`\u00a0into\u00a0`t`\u00a0in\u00a0`k`moves or less.\n\n\nDuring the\u00a0`ith`\u00a0(`1 <= i <= k`)\u00a0move you can:\n\n\n Choose any index\u00a0`j`\u00a0(1-indexed) from\u00a0`s`, such that\u00a0`1 <= j <= s.length`\u00a0and `j`\u00a0has not been chosen in any previous move,\u00a0and shift the character at that index\u00a0`i`\u00a0times.\n Do nothing.\n\n\nShifting a character means replacing it by the next letter in the alphabet\u00a0(wrapping around so that\u00a0`'z'`\u00a0becomes\u00a0`'a'`). Shifting a character by\u00a0`i`\u00a0means applying the shift operations\u00a0`i`\u00a0times.\n\n\nRemember that any index\u00a0`j`\u00a0can be picked at most once.\n\n\nReturn\u00a0`true`\u00a0if it's possible to convert\u00a0`s`\u00a0into\u00a0`t`\u00a0in no more than\u00a0`k`\u00a0moves, otherwise return\u00a0`false`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"input\", t = \"ouput\", k = 9",
                "Output": "** true",
                "Explanation": "** In the 6th move, we shift 'i' 6 times to get 'o'. And in the 7th move we shift 'n' to get 'u'."
            },
            {
                "Input": "** s = \"abc\", t = \"bcd\", k = 10",
                "Output": "** false",
                "Explanation": "** We need to shift each character in s one time to convert it into t. We can shift 'a' to 'b' during the 1st move. However, there is no way to shift the other characters in the remaining moves to obtain t from s."
            },
            {
                "Input": "** s = \"aab\", t = \"bbb\", k = 27",
                "Output": "** true",
                "Explanation": "** In the 1st move, we shift the first 'a' 1 time to get 'b'. In the 27th move, we shift the second 'a' 27 times to get 'b'."
            }
        ]
    },
    {
        "Title": "Minimum Insertions to Balance a Parentheses String",
        "slug": "minimum-insertions-to-balance-a-parentheses-string",
        "description": "Given a parentheses string `s` containing only the characters `'('` and `')'`. A parentheses string is **balanced** if:\n\n\n Any left parenthesis `'('` must have a corresponding two consecutive right parenthesis `'))'`.\n Left parenthesis `'('` must go before the corresponding two consecutive right parenthesis `'))'`.\n\n\nIn other words, we treat `'('` as an opening parenthesis and `'))'` as a closing parenthesis.\n\n\n For example, `\"())\"`, `\"())(())))\"` and `\"(())())))\"` are balanced, `\")()\"`, `\"()))\"` and `\"(()))\"` are not balanced.\n\n\nYou can insert the characters `'('` and `')'` at any position of the string to balance it if needed.\n\n\nReturn *the minimum number of insertions* needed to make `s` balanced.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Stack",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"(()))\"",
                "Output": "** 1",
                "Explanation": "** The second '(' has two matching '))', but the first '(' has only ')' matching. We need to add one more ')' at the end of the string to be \"(())))\" which is balanced."
            },
            {
                "Input": "** s = \"())\"",
                "Output": "** 0",
                "Explanation": "** The string is already balanced."
            },
            {
                "Input": "** s = \"))())(\"",
                "Output": "** 3",
                "Explanation": "** Add '(' to match the first '))', Add '))' to match the last '('."
            }
        ]
    },
    {
        "Title": "Find Longest Awesome Substring",
        "slug": "find-longest-awesome-substring",
        "description": "You are given a string `s`. An **awesome** substring is a non-empty substring of `s` such that we can make any number of swaps in order to make it a palindrome.\n\n\nReturn *the length of the maximum length **awesome substring** of* `s`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "String",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** s = \"3242415\"",
                "Output": "** 5",
                "Explanation": "** \"24241\" is the longest awesome substring, we can form the palindrome \"24142\" with some swaps."
            },
            {
                "Input": "** s = \"12345678\"",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** s = \"213123\"",
                "Output": "** 6",
                "Explanation": "** \"213123\" is the longest awesome substring, we can form the palindrome \"231132\" with some swaps."
            }
        ]
    },
    {
        "Title": "Make The String Great",
        "slug": "make-the-string-great",
        "description": "Given a string `s` of lower and upper case English letters.\n\n\nA good string is a string which doesn't have **two adjacent characters** `s[i]` and `s[i + 1]` where:\n\n\n `0 <= i <= s.length - 2`\n `s[i]` is a lower-case letter and `s[i + 1]` is the same letter but in upper-case or **vice-versa**.\n\n\nTo make the string good, you can choose **two adjacent** characters that make the string bad and remove them. You can keep doing this until the string becomes good.\n\n\nReturn *the string* after making it good. The answer is guaranteed to be unique under the given constraints.\n\n\nNotice** that an empty string is also good.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** s = \"leEeetcode\"",
                "Output": "** \"leetcode\"",
                "Explanation": "** In the first step, either you choose i = 1 or i = 2, both will result \"leEeetcode\" to be reduced to \"leetcode\"."
            },
            {
                "Input": "** s = \"abBAcC\"",
                "Output": "** \"\"",
                "Explanation": "** We have many possible scenarios, and all lead to the same answer. For example:\n\"abBAcC\" --> \"aAcC\" --> \"cC\" --> \"\"\n\"abBAcC\" --> \"abBA\" --> \"aA\" --> \"\""
            },
            {
                "Input": "** s = \"s\"",
                "Output": "** \"s\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Kth Bit in Nth Binary String",
        "slug": "find-kth-bit-in-nth-binary-string",
        "description": "Given two positive integers `n` and `k`, the binary string `Sn` is formed as follows:\n\n\n `S1 = \"0\"`\n `Si = Si - 1 + \"1\" + reverse(invert(Si - 1))` for `i > 1`\n\n\nWhere `+` denotes the concatenation operation, `reverse(x)` returns the reversed string `x`, and `invert(x)` inverts all the bits in `x` (`0` changes to `1` and `1` changes to `0`).\n\n\nFor example, the first four strings in the above sequence are:\n\n\n `S1 = \"0\"`\n `S2 = \"0**1**1\"`\n `S3 = \"011**1**001\"`\n `S4 = \"0111001**1**0110001\"`\n\n\nReturn *the* `kth` *bit* *in* `Sn`. It is guaranteed that `k` is valid for the given `n`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Recursion",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** n = 3, k = 1",
                "Output": "** \"0\"",
                "Explanation": "** S3 is \"**0**111001\".\nThe 1st bit is \"0\"."
            },
            {
                "Input": "** n = 4, k = 11",
                "Output": "** \"1\"",
                "Explanation": "** S4 is \"0111001101**1**0001\".\nThe 11th bit is \"1\"."
            }
        ]
    },
    {
        "Title": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
        "slug": "maximum-number-of-non-overlapping-subarrays-with-sum-equals-target",
        "description": "Given an array `nums` and an integer `target`, return *the maximum number of **non-empty** **non-overlapping** subarrays such that the sum of values in each subarray is equal to* `target`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [1,1,1,1,1], target = 2",
                "Output": "** 2",
                "Explanation": "** There are 2 non-overlapping subarrays [**1,1**,1,**1,1**] with sum equals to target(2)."
            },
            {
                "Input": "** nums = [-1,3,5,1,4,2,-9], target = 6",
                "Output": "** 2",
                "Explanation": "** There are 3 subarrays with sum equal to 6.\n([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Cut a Stick",
        "slug": "minimum-cost-to-cut-a-stick",
        "description": "Given a wooden stick of length `n` units. The stick is labelled from `0` to `n`. For example, a stick of length **6** is labelled as follows:\n\n\n![](https://assets.leetcode.com/uploads/2020/07/21/statement.jpg)\nGiven an integer array `cuts` where `cuts[i]` denotes a position you should perform a cut at.\n\n\nYou should perform the cuts in order, you can change the order of the cuts as you wish.\n\n\nThe cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.\n\n\nReturn *the minimum total cost* of the cuts.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** n = 7, cuts = [1,3,4,5]",
                "Output": "** 16",
                "Explanation": "** Using cuts order = [1, 3, 4, 5] as in the input leads to the following scenario:\n![](https://assets.leetcode.com/uploads/2020/07/21/e11.jpg)\nThe first cut is done to a rod of length 7 so the cost is 7. The second cut is done to a rod of length 6 (i.e. the second part of the first cut), the third is done to a rod of length 4 and the last cut is to a rod of length 3. The total cost is 7 + 6 + 4 + 3 = 20.\nRearranging the cuts to be [3, 5, 1, 4] for example will lead to a scenario with total cost = 16 (as shown in the example photo 7 + 4 + 3 + 2 = 16)."
            }
        ]
    },
    {
        "Title": "Three Consecutive Odds",
        "slug": "three-consecutive-odds",
        "description": "Given an integer array `arr`, return `true`\u00a0if there are three consecutive odd numbers in the array. Otherwise, return\u00a0`false`.\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** arr = [2,6,4,1]",
                "Output": "** false",
                "Explanation": "** There are no three consecutive odds."
            },
            {
                "Input": "** arr = [1,2,34,3,4,5,7,23,12]",
                "Output": "** true",
                "Explanation": "** [5,7,23] are three consecutive odds."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Make Array Equal",
        "slug": "minimum-operations-to-make-array-equal",
        "description": "You have an array `arr` of length `n` where `arr[i] = (2 * i) + 1` for all valid values of `i` (i.e.,\u00a0`0 <= i < n`).\n\n\nIn one operation, you can select two indices `x` and `y` where `0 <= x, y < n` and subtract `1` from `arr[x]` and add `1` to `arr[y]` (i.e., perform `arr[x] -=1` and `arr[y] += 1`). The goal is to make all the elements of the array **equal**. It is **guaranteed** that all the elements of the array can be made equal using some operations.\n\n\nGiven an integer `n`, the length of the array, return *the minimum number of operations* needed to make all the elements of arr equal.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** 2",
                "Explanation": "** arr = [1, 3, 5]\nFirst operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]\nIn the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3]."
            },
            {
                "Input": "** n = 6",
                "Output": "** 9",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Magnetic Force Between Two Balls",
        "slug": "magnetic-force-between-two-balls",
        "description": "In the universe Earth C-137, Rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. Rick has `n` empty baskets, the `ith` basket is at `position[i]`, Morty has `m` balls and needs to distribute the balls into the baskets such that the **minimum magnetic force** between any two balls is **maximum**.\n\n\nRick stated that magnetic force between two different balls at positions `x` and `y` is `|x - y|`.\n\n\nGiven the integer array `position` and the integer `m`. Return *the required force*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** position = [1,2,3,4,7], m = 3",
                "Output": "** 3",
                "Explanation": "** Distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs [3, 3, 6]. The minimum magnetic force is 3. We cannot achieve a larger minimum magnetic force than 3."
            }
        ]
    },
    {
        "Title": "Minimum Number of Days to Eat N Oranges",
        "slug": "minimum-number-of-days-to-eat-n-oranges",
        "description": "There are `n` oranges in the kitchen and you decided to eat some of these oranges every day as follows:\n\n\n Eat one orange.\n If the number of remaining oranges `n` is divisible by `2` then you can eat `n / 2` oranges.\n If the number of remaining oranges `n` is divisible by `3` then you can eat `2 * (n / 3)` oranges.\n\n\nYou can only choose one of the actions per day.\n\n\nGiven the integer `n`, return *the minimum number of days to eat* `n` *oranges*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Memoization"
        ],
        "examples": [
            {
                "Input": "** n = 10",
                "Output": "** 4",
                "Explanation": "** You have 10 oranges.\nDay 1: Eat 1 orange,  10 - 1 = 9.  \nDay 2: Eat 6 oranges, 9 - 2*(9/3) = 9 - 6 = 3. (Since 9 is divisible by 3)\nDay 3: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. \nDay 4: Eat the last orange  1 - 1  = 0.\nYou need at least 4 days to eat the 10 oranges."
            },
            {
                "Input": "** n = 6",
                "Output": "** 3",
                "Explanation": "** You have 6 oranges.\nDay 1: Eat 3 oranges, 6 - 6/2 = 6 - 3 = 3. (Since 6 is divisible by 2).\nDay 2: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. (Since 3 is divisible by 3)\nDay 3: Eat the last orange  1 - 1  = 0.\nYou need at least 3 days to eat the 6 oranges."
            }
        ]
    },
    {
        "Title": "Thousand Separator",
        "slug": "thousand-separator",
        "description": "Given an integer `n`, add a dot (\".\") as the thousands separator and return it in string format.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** n = 987",
                "Output": "** \"987\"",
                "Explanation": null
            },
            {
                "Input": "** n = 1234",
                "Output": "** \"1.234\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Number of Vertices to Reach All Nodes",
        "slug": "minimum-number-of-vertices-to-reach-all-nodes",
        "description": "Given a**directed acyclic graph**,\u00a0with\u00a0`n`\u00a0vertices numbered from\u00a0`0`\u00a0to\u00a0`n-1`,\u00a0and an array\u00a0`edges`\u00a0where\u00a0`edges[i] = [fromi, toi]`\u00a0represents a directed edge from node\u00a0`fromi`\u00a0to node\u00a0`toi`.\n\n\nFind *the smallest set of vertices from which all nodes in the graph are reachable*. It's guaranteed that a unique solution exists.\n\n\nNotice that you can return the vertices in any order.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Graph"
        ],
        "examples": [
            {
                "Input": "** n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]",
                "Output": "** [0,3]",
                "Explanation": "** It's not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3]."
            },
            {
                "Input": "** n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]",
                "Output": "** [0,2,3]",
                "Explanation": "** Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4."
            }
        ]
    },
    {
        "Title": "Minimum Numbers of Function Calls to Make Target Array",
        "slug": "minimum-numbers-of-function-calls-to-make-target-array",
        "description": "You are given an integer array `nums`. You have an integer array `arr` of the same length with all values set to `0` initially. You also have the following `modify` function:\n\n\n![](https://assets.leetcode.com/uploads/2020/07/10/sample_2_1887.png)\nYou want to use the modify function to convert `arr` to `nums` using the minimum number of calls.\n\n\nReturn *the minimum number of function calls to make* `nums` *from* `arr`.\n\n\nThe test cases are generated so that the answer fits in a **32-bit** signed integer.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [1,5]",
                "Output": "** 5",
                "Explanation": "** Increment by 1 (second element): [0, 0] to get [0, 1] (1 operation).\nDouble all the elements: [0, 1] -> [0, 2] -> [0, 4] (2 operations).\nIncrement by 1 (both elements)  [0, 4] -> [1, 4] -> **[1, 5]** (2 operations).\nTotal of operations: 1 + 2 + 2 = 5."
            },
            {
                "Input": "** nums = [2,2]",
                "Output": "** 3",
                "Explanation": "** Increment by 1 (both elements) [0, 0] -> [0, 1] -> [1, 1] (2 operations).\nDouble all the elements: [1, 1] -> **[2, 2]** (1 operation).\nTotal of operations: 2 + 1 = 3."
            },
            {
                "Input": "** nums = [4,2,5]",
                "Output": "** 6",
                "Explanation": "** (initial)[0,0,0] -> [1,0,0] -> [1,0,1] -> [2,0,2] -> [2,1,2] -> [4,2,4] -> **[4,2,5]**(nums)."
            }
        ]
    },
    {
        "Title": "Most Visited Sector in  a Circular Track",
        "slug": "most-visited-sector-in-a-circular-track",
        "description": "Given an integer `n` and an integer array `rounds`. We have a circular track which consists of `n` sectors labeled from `1` to `n`. A marathon will be held on this track, the marathon consists of `m` rounds. The `ith` round starts at sector `rounds[i - 1]` and ends at sector `rounds[i]`. For example, round 1 starts at sector `rounds[0]` and ends at sector `rounds[1]`\n\n\nReturn *an array of the most visited sectors* sorted in **ascending** order.\n\n\nNotice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** n = 4, rounds = [1,3,1,2]",
                "Output": "** [1,2]",
                "Explanation": "** The marathon starts at sector 1. The order of the visited sectors is as follows:\n1 --> 2 --> 3 (end of round 1) --> 4 --> 1 (end of round 2) --> 2 (end of round 3 and the marathon)\nWe can see that both sectors 1 and 2 are visited twice and they are the most visited sectors. Sectors 3 and 4 are visited only once."
            }
        ]
    },
    {
        "Title": "Maximum Number of Coins You Can Get",
        "slug": "maximum-number-of-coins-you-can-get",
        "description": "There are `3n` piles of coins of varying size, you and your friends will take piles of coins as follows:\n\n\n In each step, you will choose **any** `3` piles of coins (not necessarily consecutive).\n Of your choice, Alice will pick the pile with the maximum number of coins.\n You will pick the next pile with the maximum number of coins.\n Your friend Bob will pick the last pile.\n Repeat until there are no more piles of coins.\n\n\nGiven an array of integers `piles` where `piles[i]` is the number of coins in the `ith` pile.\n\n\nReturn the maximum number of coins that you can have.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Greedy",
            "Sorting",
            "Game Theory"
        ],
        "examples": [
            {
                "Input": "** piles = [2,4,1,2,7,8]",
                "Output": "** 9",
                "Explanation": "** Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with **7** coins and Bob the last one.\nChoose the triplet (1, 2, 4), Alice Pick the pile with 4 coins, you the pile with **2** coins and Bob the last one.\nThe maximum number of coins which you can have are: 7 + 2 = 9.\nOn the other hand if we choose this arrangement (1, **2**, 8), (2, **4**, 7) you only get 2 + 4 = 6 coins which is not optimal."
            },
            {
                "Input": "** piles = [2,4,5]",
                "Output": "** 4",
                "Explanation": null
            },
            {
                "Input": "** piles = [9,8,7,6,5,1,2,3,4]",
                "Output": "** 18",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Latest Group of Size M",
        "slug": "find-latest-group-of-size-m",
        "description": "Given an array `arr` that represents a permutation of numbers from `1` to `n`.\n\n\nYou have a binary string of size `n` that initially has all its bits set to zero. At each step `i` (assuming both the binary string and `arr` are 1-indexed) from `1` to `n`, the bit at position `arr[i]` is set to `1`.\n\n\nYou are also given an integer `m`. Find the latest step at which there exists a group of ones of length `m`. A group of ones is a contiguous substring of `1`'s such that it cannot be extended in either direction.\n\n\nReturn *the latest step at which there exists a group of ones of length **exactly*** `m`. *If no such group exists, return* `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** arr = [3,5,1,2,4], m = 1",
                "Output": "** 4",
                "Explanation": "** \nStep 1: \"00100\", groups: [\"1\"]\nStep 2: \"00101\", groups: [\"1\", \"1\"]\nStep 3: \"10101\", groups: [\"1\", \"1\", \"1\"]\nStep 4: \"11101\", groups: [\"111\", \"1\"]\nStep 5: \"11111\", groups: [\"11111\"]\nThe latest step at which there exists a group of size 1 is step 4."
            },
            {
                "Input": "** arr = [3,1,5,4,2], m = 2",
                "Output": "** -1",
                "Explanation": "** \nStep 1: \"00100\", groups: [\"1\"]\nStep 2: \"10100\", groups: [\"1\", \"1\"]\nStep 3: \"10101\", groups: [\"1\", \"1\", \"1\"]\nStep 4: \"10111\", groups: [\"1\", \"111\"]\nStep 5: \"11111\", groups: [\"11111\"]\nNo group of size 2 exists during any step."
            }
        ]
    },
    {
        "Title": "Stone Game V",
        "slug": "stone-game-v",
        "description": "There are several stones **arranged in a row**, and each stone has an associated value which is an integer given in the array `stoneValue`.\n\n\nIn each round of the game, Alice divides the row into **two non-empty rows** (i.e. left row and right row), then Bob calculates the value of each row which is the sum of the values of all the stones in this row. Bob throws away the row which has the maximum value, and Alice's score increases by the value of the remaining row. If the value of the two rows are equal, Bob lets Alice decide which row will be thrown away. The next round starts with the remaining row.\n\n\nThe game ends when there is only **one stone remaining**. Alice's is initially **zero**.\n\n\nReturn *the maximum score that Alice can obtain*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Game Theory"
        ],
        "examples": [
            {
                "Input": "** stoneValue = [6,2,3,4,5,5]",
                "Output": "** 18",
                "Explanation": "** In the first round, Alice divides the row to [6,2,3], [4,5,5]. The left row has the value 11 and the right row has value 14. Bob throws away the right row and Alice's score is now 11.\nIn the second round Alice divides the row to [6], [2,3]. This time Bob throws away the left row and Alice's score becomes 16 (11 + 5).\nThe last round Alice has only one choice to divide the row which is [2], [3]. Bob throws away the right row and Alice's score is now 18 (16 + 2). The game ends because only one stone is remaining in the row."
            },
            {
                "Input": "** stoneValue = [7,7,7,7,7,7,7]",
                "Output": "** 28",
                "Explanation": null
            },
            {
                "Input": "** stoneValue = [4]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Detect Pattern of Length M Repeated K or More Times",
        "slug": "detect-pattern-of-length-m-repeated-k-or-more-times",
        "description": "Given an array of positive integers `arr`, find a pattern of length `m` that is repeated `k` or more times.\n\n\nA **pattern** is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times **consecutively** without overlapping. A pattern is defined by its length and the number of repetitions.\n\n\nReturn `true` *if there exists a pattern of length* `m` *that is repeated* `k` *or more times, otherwise return* `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** arr = [1,2,4,4,4,4], m = 1, k = 3",
                "Output": "** true",
                "Explanation": "** The pattern **(4)** of length 1 is repeated 4 consecutive times. Notice that pattern can be repeated k or more times but not less."
            },
            {
                "Input": "** arr = [1,2,1,2,1,1,1,3], m = 2, k = 2",
                "Output": "** true",
                "Explanation": "** The pattern **(1,2)** of length 2 is repeated 2 consecutive times. Another valid pattern **(2,1) is** also repeated 2 times."
            },
            {
                "Input": "** arr = [1,2,1,2,1,3], m = 2, k = 3",
                "Output": "** false",
                "Explanation": "** The pattern (1,2) is of length 2 but is repeated only 2 times. There is no pattern of length 2 that is repeated 3 or more times."
            }
        ]
    },
    {
        "Title": "Maximum Length of Subarray With Positive Product",
        "slug": "maximum-length-of-subarray-with-positive-product",
        "description": "Given an array of integers `nums`, find the maximum length of a subarray where the product of all its elements is positive.\n\n\nA subarray of an array is a consecutive sequence of zero or more values taken out of that array.\n\n\nReturn *the maximum length of a subarray with positive product*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums = [1,-2,-3,4]",
                "Output": "** 4",
                "Explanation": "** The array nums already has a positive product of 24."
            },
            {
                "Input": "** nums = [0,1,-2,-3,-4]",
                "Output": "** 3",
                "Explanation": "** The longest subarray with positive product is [1,-2,-3] which has a product of 6.\nNotice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive."
            },
            {
                "Input": "** nums = [-1,-2,-3,0,1]",
                "Output": "** 2",
                "Explanation": "** The longest subarray with positive product is [-1,-2] or [-2,-3]."
            }
        ]
    },
    {
        "Title": "Minimum Number of Days to Disconnect Island",
        "slug": "minimum-number-of-days-to-disconnect-island",
        "description": "You are given an `m x n` binary grid `grid` where `1` represents land and `0` represents water. An **island** is a maximal **4-directionally** (horizontal or vertical) connected group of `1`'s.\n\n\nThe grid is said to be **connected** if we have **exactly one island**, otherwise is said **disconnected**.\n\n\nIn one day, we are allowed to change **any** single land cell `(1)` into a water cell `(0)`.\n\n\nReturn *the minimum number of days to disconnect the grid*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Matrix",
            "Strongly Connected Component"
        ],
        "examples": [
            {
                "Input": "** grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]",
                "Output": "** 2",
                "Explanation": "** We need at least 2 days to get a disconnected grid.\nChange land grid[1][1] and grid[0][2] to water and get 2 disconnected island."
            },
            {
                "Input": "** grid = [[1,1]]",
                "Output": "** 2",
                "Explanation": "** Grid of full water is also disconnected ([[1,1]] -> [[0,0]]), 0 islands."
            }
        ]
    },
    {
        "Title": "Number of Ways to Reorder Array to Get Same BST",
        "slug": "number-of-ways-to-reorder-array-to-get-same-bst",
        "description": "Given an array `nums` that represents a permutation of integers from `1` to `n`. We are going to construct a binary search tree (BST) by inserting the elements of `nums` in order into an initially empty BST. Find the number of different ways to reorder `nums` so that the constructed BST is identical to that formed from the original array `nums`.\n\n\n For example, given `nums = [2,1,3]`, we will have 2 as the root, 1 as a left child, and 3 as a right child. The array `[2,3,1]` also yields the same BST but `[3,2,1]` yields a different BST.\n\n\nReturn *the number of ways to reorder* `nums` *such that the BST formed is identical to the original BST formed from* `nums`.\n\n\nSince the answer may be very large, **return it modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Divide and Conquer",
            "Dynamic Programming",
            "Tree",
            "Union Find",
            "Binary Search Tree",
            "Memoization",
            "Combinatorics",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** nums = [2,1,3]",
                "Output": "** 1",
                "Explanation": "** We can reorder nums to be [2,3,1] which will yield the same BST. There are no other ways to reorder nums which will yield the same BST."
            },
            {
                "Input": "** nums = [3,4,5,1,2]",
                "Output": "** 5",
                "Explanation": "** The following 5 arrays will yield the same BST: \n[3,1,2,4,5]\n[3,1,4,2,5]\n[3,1,4,5,2]\n[3,4,1,2,5]\n[3,4,1,5,2]"
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 0",
                "Explanation": "** There are no other orderings of nums that will yield the same BST."
            }
        ]
    },
    {
        "Title": "Matrix Diagonal Sum",
        "slug": "matrix-diagonal-sum",
        "description": "Given a\u00a0square\u00a0matrix\u00a0`mat`, return the sum of the matrix diagonals.\n\n\nOnly include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** mat = [[**1**,2,**3**],\n\u00a0             [4,**5**,6],\n\u00a0             [**7**,8,**9**]]",
                "Output": "** 25",
                "Explanation": "** Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25\nNotice that element mat[1][1] = 5 is counted only once."
            }
        ]
    },
    {
        "Title": "Number of Ways to Split a String",
        "slug": "number-of-ways-to-split-a-string",
        "description": "Given a binary string `s`, you can split `s` into 3 **non-empty** strings `s1`, `s2`, and `s3` where `s1 + s2 + s3 = s`.\n\n\nReturn the number of ways `s` can be split such that the number of ones is the same in `s1`, `s2`, and `s3`. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"10101\"",
                "Output": "** 4",
                "Explanation": "** There are four ways to split s in 3 parts where each part contain the same number of letters '1'.\n\"1|010|1\"\n\"1|01|01\"\n\"10|10|1\"\n\"10|1|01\""
            },
            {
                "Input": "** s = \"1001\"",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** s = \"0000\"",
                "Output": "** 3",
                "Explanation": "** There are three ways to split s in 3 parts.\n\"0|0|00\"\n\"0|00|0\"\n\"00|0|0\""
            }
        ]
    },
    {
        "Title": "Shortest Subarray to be Removed to Make Array Sorted",
        "slug": "shortest-subarray-to-be-removed-to-make-array-sorted",
        "description": "Given an integer array `arr`, remove a subarray (can be empty) from `arr` such that the remaining elements in `arr` are **non-decreasing**.\n\n\nReturn *the length of the shortest subarray to remove*.\n\n\nA **subarray** is a contiguous subsequence of the array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Stack",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** arr = [1,2,3,10,4,2,3,5]",
                "Output": "** 3",
                "Explanation": "** The shortest subarray we can remove is [10,4,2] of length 3. The remaining elements after that will be [1,2,3,3,5] which are sorted.\nAnother correct solution is to remove the subarray [3,10,4]."
            },
            {
                "Input": "** arr = [5,4,3,2,1]",
                "Output": "** 4",
                "Explanation": "** Since the array is strictly decreasing, we can only keep a single element. Therefore we need to remove a subarray of length 4, either [5,4,3,2] or [4,3,2,1]."
            },
            {
                "Input": "** arr = [1,2,3]",
                "Output": "** 0",
                "Explanation": "** The array is already non-decreasing. We do not need to remove any elements."
            }
        ]
    },
    {
        "Title": "Count All Possible Routes",
        "slug": "count-all-possible-routes",
        "description": "You are given an array of **distinct** positive integers locations where `locations[i]` represents the position of city `i`. You are also given integers `start`, `finish` and `fuel` representing the starting city, ending city, and the initial amount of fuel you have, respectively.\n\n\nAt each step, if you are at city `i`, you can pick any city `j` such that `j != i` and `0 <= j < locations.length` and move to city `j`. Moving from city `i` to city `j` reduces the amount of fuel you have by `|locations[i] - locations[j]|`. Please notice that `|x|` denotes the absolute value of `x`.\n\n\nNotice that `fuel` **cannot** become negative at any point in time, and that you are **allowed** to visit any city more than once (including `start` and `finish`).\n\n\nReturn *the count of all possible routes from* `start` *to* `finish`. Since the answer may be too large, return it modulo `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Memoization"
        ],
        "examples": [
            {
                "Input": "** locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5",
                "Output": "** 4",
                "Explanation": "** The following are all possible routes, each uses 5 units of fuel:\n1 -> 3\n1 -> 2 -> 3\n1 -> 4 -> 3\n1 -> 4 -> 2 -> 3"
            },
            {
                "Input": "** locations = [4,3,1], start = 1, finish = 0, fuel = 6",
                "Output": "** 5",
                "Explanation": "** The following are all possible routes:\n1 -> 0, used fuel = 1\n1 -> 2 -> 0, used fuel = 5\n1 -> 2 -> 1 -> 0, used fuel = 5\n1 -> 0 -> 1 -> 0, used fuel = 3\n1 -> 0 -> 1 -> 0 -> 1 -> 0, used fuel = 5"
            },
            {
                "Input": "** locations = [5,2,1], start = 0, finish = 2, fuel = 3",
                "Output": "** 0",
                "Explanation": "** It is impossible to get from 0 to 2 using only 3 units of fuel since the shortest route needs 4 units of fuel."
            }
        ]
    },
    {
        "Title": "Replace All ?'s to Avoid Consecutive Repeating Characters",
        "slug": "replace-all-s-to-avoid-consecutive-repeating-characters",
        "description": "Given a string `s` containing only lowercase English letters and the `'?'` character, convert **all** the `'?'` characters into lowercase letters such that the final string does not contain any **consecutive repeating** characters. You **cannot** modify the non `'?'` characters.\n\n\nIt is **guaranteed** that there are no consecutive repeating characters in the given string **except** for `'?'`.\n\n\nReturn *the final string after all the conversions (possibly zero) have been made*. If there is more than one solution, return **any of them**. It can be shown that an answer is always possible with the given constraints.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"?zs\"",
                "Output": "** \"azs\"",
                "Explanation": "** There are 25 solutions for this problem. From \"azs\" to \"yzs\", all are valid. Only \"z\" is an invalid modification as the string will consist of consecutive repeating characters in \"zzs\"."
            },
            {
                "Input": "** s = \"ubv?w\"",
                "Output": "** \"ubvaw\"",
                "Explanation": "** There are 24 solutions for this problem. Only \"v\" and \"w\" are invalid modifications as the strings will consist of consecutive repeating characters in \"ubvvw\" and \"ubvww\"."
            }
        ]
    },
    {
        "Title": "Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
        "slug": "number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers",
        "description": "Given two arrays of integers `nums1` and `nums2`, return the number of triplets formed (type 1 and type 2) under the following rules:\n\n\n Type 1: Triplet (i, j, k) if `nums1[i]2 == nums2[j] * nums2[k]` where `0 <= i < nums1.length` and `0 <= j < k < nums2.length`.\n Type 2: Triplet (i, j, k) if `nums2[i]2 == nums1[j] * nums1[k]` where `0 <= i < nums2.length` and `0 <= j < k < nums1.length`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** nums1 = [7,4], nums2 = [5,2,8,9]",
                "Output": "** 1",
                "Explanation": "** Type 1: (1, 1, 2), nums1[1]2 = nums2[1] * nums2[2]. (42 = 2 * 8)."
            },
            {
                "Input": "** nums1 = [1,1], nums2 = [1,1,1]",
                "Output": "** 9",
                "Explanation": "** All Triplets are valid, because 12 = 1 * 1.\nType 1: (0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2).  nums1[i]2 = nums2[j] * nums2[k].\nType 2: (0,0,1), (1,0,1), (2,0,1). nums2[i]2 = nums1[j] * nums1[k]."
            },
            {
                "Input": "** nums1 = [7,7,8,3], nums2 = [1,2,9,7]",
                "Output": "** 2",
                "Explanation": "** There are 2 valid triplets.\nType 1: (3,0,2).  nums1[3]2 = nums2[0] * nums2[2].\nType 2: (3,0,1).  nums2[3]2 = nums1[0] * nums1[1]."
            }
        ]
    },
    {
        "Title": "Minimum Time to Make Rope Colorful",
        "slug": "minimum-time-to-make-rope-colorful",
        "description": "Alice has `n` balloons arranged on a rope. You are given a **0-indexed** string `colors` where `colors[i]` is the color of the `ith` balloon.\n\n\nAlice wants the rope to be **colorful**. She does not want **two consecutive balloons** to be of the same color, so she asks Bob for help. Bob can remove some balloons from the rope to make it **colorful**. You are given a **0-indexed** integer array `neededTime` where `neededTime[i]` is the time (in seconds) that Bob needs to remove the `ith` balloon from the rope.\n\n\nReturn *the **minimum time** Bob needs to make the rope **colorful***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Dynamic Programming",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** colors = \"abaac\", neededTime = [1,2,3,4,5]",
                "Output": "** 3",
                "Explanation": "** In the above image, 'a' is blue, 'b' is red, and 'c' is green.\nBob can remove the blue balloon at index 2. This takes 3 seconds.\nThere are no longer two consecutive balloons of the same color. Total time = 3."
            },
            {
                "Input": "** colors = \"abc\", neededTime = [1,2,3]",
                "Output": "** 0",
                "Explanation": "** The rope is already colorful. Bob does not need to remove any balloons from the rope."
            },
            {
                "Input": "** colors = \"aabaa\", neededTime = [1,2,3,4,1]",
                "Output": "** 2",
                "Explanation": "** Bob will remove the balloons at indices 0 and 4. Each balloons takes 1 second to remove.\nThere are no longer two consecutive balloons of the same color. Total time = 1 + 1 = 2."
            }
        ]
    },
    {
        "Title": "Customer Who Visited but Did Not Make Any Transactions",
        "slug": "customer-who-visited-but-did-not-make-any-transactions",
        "description": "Table: `Visits`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| visit_id    | int     |\n| customer_id | int     |\n+-------------+---------+\nvisit_id is the column with unique values for this table.\nThis table contains information about the customers who visited the mall.\n\n```\n\n\u00a0\n\n\nTable: `Transactions`\n\n\n\n```\n\n+----------------+---------+\n| Column Name    | Type    |\n+----------------+---------+\n| transaction_id | int     |\n| visit_id       | int     |\n| amount         | int     |\n+----------------+---------+\ntransaction_id is column with unique values for this table.\nThis table contains information about the transactions made during the visit_id.\n\n```\n\n\u00a0\n\n\nWrite a\u00a0solution to find the IDs of the users who visited without making any transactions and the number of times they made these types of visits.\n\n\nReturn the result table sorted in **any order**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nVisits\n+----------+-------------+\n| visit_id | customer_id |\n+----------+-------------+\n| 1        | 23          |\n| 2        | 9           |\n| 4        | 30          |\n| 5        | 54          |\n| 6        | 96          |\n| 7        | 54          |\n| 8        | 54          |\n+----------+-------------+\nTransactions\n+----------------+----------+--------+\n| transaction_id | visit_id | amount |\n+----------------+----------+--------+\n| 2              | 5        | 310    |\n| 3              | 5        | 300    |\n| 9              | 5        | 200    |\n| 12             | 1        | 910    |\n| 13             | 2        | 970    |\n+----------------+----------+--------+",
                "Output": "** \n+-------------+----------------+\n| customer_id | count_no_trans |\n+-------------+----------------+\n| 54          | 2              |\n| 30          | 1              |\n| 96          | 1              |\n+-------------+----------------+",
                "Explanation": "** \nCustomer with id = 23 visited the mall once and made one transaction during the visit with id = 12.\nCustomer with id = 9 visited the mall once and made one transaction during the visit with id = 13.\nCustomer with id = 30 visited the mall once and did not make any transactions.\nCustomer with id = 54 visited the mall three times. During 2 visits they did not make any transactions, and during one visit they made 3 transactions.\nCustomer with id = 96 visited the mall once and did not make any transactions.\nAs we can see, users with IDs 30 and 96 visited the mall one time without making any transactions. Also, user 54 visited the mall twice and did not make any transactions."
            }
        ]
    },
    {
        "Title": "Special Positions in a Binary Matrix",
        "slug": "special-positions-in-a-binary-matrix",
        "description": "Given an `m x n` binary matrix `mat`, return *the number of special positions in* `mat`*.\n\n\nA position `(i, j)` is called **special** if `mat[i][j] == 1` and all other elements in row `i` and column `j` are `0` (rows and columns are **0-indexed**).\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** mat = [[1,0,0],[0,0,1],[1,0,0]]",
                "Output": "** 1",
                "Explanation": "** (1, 2) is a special position because mat[1][2] == 1 and all other elements in row 1 and column 2 are 0."
            },
            {
                "Input": "** mat = [[1,0,0],[0,1,0],[0,0,1]]",
                "Output": "** 3",
                "Explanation": "** (0, 0), (1, 1) and (2, 2) are special positions."
            }
        ]
    },
    {
        "Title": "Count Unhappy Friends",
        "slug": "count-unhappy-friends",
        "description": "You are given a list of\u00a0`preferences`\u00a0for\u00a0`n`\u00a0friends, where `n` is always **even**.\n\n\nFor each person `i`,\u00a0`preferences[i]`\u00a0contains\u00a0a list of friends\u00a0**sorted** in the **order of preference**. In other words, a friend earlier in the list is more preferred than a friend later in the list.\u00a0Friends in\u00a0each list are\u00a0denoted by integers from `0` to `n-1`.\n\n\nAll the friends are divided into pairs.\u00a0The pairings are\u00a0given in a list\u00a0`pairs`,\u00a0where `pairs[i] = [xi, yi]` denotes `xi`\u00a0is paired with `yi` and `yi` is paired with `xi`.\n\n\nHowever, this pairing may cause some of the friends to be unhappy.\u00a0A friend `x`\u00a0is unhappy if `x`\u00a0is paired with `y`\u00a0and there exists a friend `u`\u00a0who\u00a0is paired with `v`\u00a0but:\n\n\n `x`\u00a0prefers `u`\u00a0over `y`,\u00a0and\n `u`\u00a0prefers `x`\u00a0over `v`.\n\n\nReturn *the number of unhappy friends*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]",
                "Output": "** 2",
                "Explanation": "**\nFriend 1 is unhappy because:\n- 1 is paired with 0 but prefers 3 over 0, and\n- 3 prefers 1 over 2.\nFriend 3 is unhappy because:\n- 3 is paired with 2 but prefers 1 over 2, and\n- 1 prefers 3 over 0.\nFriends 0 and 2 are happy."
            },
            {
                "Input": "** n = 2, preferences = [[1], [0]], pairs = [[1, 0]]",
                "Output": "** 0",
                "Explanation": "** Both friends 0 and 1 are happy."
            },
            {
                "Input": "** n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Min Cost to Connect All Points",
        "slug": "min-cost-to-connect-all-points",
        "description": "You are given an array `points` representing integer coordinates of some points on a 2D-plane, where `points[i] = [xi, yi]`.\n\n\nThe cost of connecting two points `[xi, yi]` and `[xj, yj]` is the **manhattan distance** between them: `|xi - xj| + |yi - yj|`, where `|val|` denotes the absolute value of `val`.\n\n\nReturn *the minimum cost to make all points connected.* All points are connected if there is **exactly one** simple path between any two points.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Union Find",
            "Graph",
            "Minimum Spanning Tree"
        ],
        "examples": [
            {
                "Input": "** points = [[0,0],[2,2],[3,10],[5,2],[7,0]]",
                "Output": "** 20",
                "Explanation": "** \n![](https://assets.leetcode.com/uploads/2020/08/26/c.png)\nWe can connect the points as shown above to get the minimum cost of 20.\nNotice that there is a unique path between every pair of points."
            }
        ]
    },
    {
        "Title": "Check If String Is Transformable With Substring Sort Operations",
        "slug": "check-if-string-is-transformable-with-substring-sort-operations",
        "description": "Given two strings `s` and `t`, transform string `s` into string `t` using the following operation any number of times:\n\n\n Choose a **non-empty** substring in `s` and sort it in place so the characters are in **ascending order**.\n\t+ For example, applying the operation on the underlined substring in `\"14234\"` results in `\"12344\"`.\n\n\nReturn `true` if *it is possible to transform `s` into `t`*. Otherwise, return `false`.\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** s = \"84532\", t = \"34852\"",
                "Output": "** true",
                "Explanation": "** You can transform s into t using the following sort operations:\n\"84532\" (from index 2 to 3) -> \"84352\"\n\"84352\" (from index 0 to 2) -> \"34852\""
            },
            {
                "Input": "** s = \"34521\", t = \"23415\"",
                "Output": "** true",
                "Explanation": "** You can transform s into t using the following sort operations:\n\"34521\" -> \"23451\"\n\"23451\" -> \"23415\""
            },
            {
                "Input": "** s = \"12345\", t = \"12435\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Bank Account Summary II",
        "slug": "bank-account-summary-ii",
        "description": "Table: `Users`\n\n\n\n```\n\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| account      | int     |\n| name         | varchar |\n+--------------+---------+\naccount is the primary key (column with unique values) for this table.\nEach row of this table contains the account number of each user in the bank.\nThere will be no two users having the same name in the table.\n\n```\n\n\u00a0\n\n\nTable: `Transactions`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| trans_id      | int     |\n| account       | int     |\n| amount        | int     |\n| transacted_on | date    |\n+---------------+---------+\ntrans_id is the primary key (column with unique values) for this table.\nEach row of this table contains all changes made to all accounts.\namount is positive if the user received money and negative if they transferred money.\nAll accounts start with a balance of 0.\n\n```\n\n\u00a0\n\n\nWrite a solution to report the name and balance of users with a balance higher than `10000`. The balance of an account is equal to the sum of the amounts of all transactions involving that account.\n\n\nReturn the result table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nUsers table:\n+------------+--------------+\n| account    | name         |\n+------------+--------------+\n| 900001     | Alice        |\n| 900002     | Bob          |\n| 900003     | Charlie      |\n+------------+--------------+\nTransactions table:\n+------------+------------+------------+---------------+\n| trans_id   | account    | amount     | transacted_on |\n+------------+------------+------------+---------------+\n| 1          | 900001     | 7000       |  2020-08-01   |\n| 2          | 900001     | 7000       |  2020-09-01   |\n| 3          | 900001     | -3000      |  2020-09-02   |\n| 4          | 900002     | 1000       |  2020-09-12   |\n| 5          | 900003     | 6000       |  2020-08-07   |\n| 6          | 900003     | 6000       |  2020-09-07   |\n| 7          | 900003     | -4000      |  2020-09-11   |\n+------------+------------+------------+---------------+",
                "Output": "** \n+------------+------------+\n| name       | balance    |\n+------------+------------+\n| Alice      | 11000      |\n+------------+------------+",
                "Explanation": "** \nAlice's balance is (7000 + 7000 - 3000) = 11000.\nBob's balance is 1000.\nCharlie's balance is (6000 + 6000 - 4000) = 8000."
            }
        ]
    },
    {
        "Title": "Sum of All Odd Length Subarrays",
        "slug": "sum-of-all-odd-length-subarrays",
        "description": "Given an array of positive integers `arr`, return *the sum of all possible **odd-length subarrays** of* `arr`.\n\n\nA **subarray** is a contiguous subsequence of the array.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** arr = [1,4,2,5,3]",
                "Output": "** 58",
                "Explanation": "** The odd-length subarrays of arr and their sums are:\n[1] = 1\n[4] = 4\n[2] = 2\n[5] = 5\n[3] = 3\n[1,4,2] = 7\n[4,2,5] = 11\n[2,5,3] = 10\n[1,4,2,5,3] = 15\nIf we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58"
            },
            {
                "Input": "** arr = [1,2]",
                "Output": "** 3",
                "Explanation": "** There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3."
            },
            {
                "Input": "** arr = [10,11,12]",
                "Output": "** 66",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Sum Obtained of Any Permutation",
        "slug": "maximum-sum-obtained-of-any-permutation",
        "description": "We have an array of integers, `nums`, and an array of `requests` where `requests[i] = [starti, endi]`. The `ith` request asks for the sum of `nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]`. Both `starti` and `endi` are *0-indexed*.\n\n\nReturn *the maximum total sum of all requests **among all permutations** of* `nums`.\n\n\nSince the answer may be too large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5], requests = [[1,3],[0,1]]",
                "Output": "** 19",
                "Explanation": "** One permutation of nums is [2,1,3,4,5] with the following result: \nrequests[0] -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8\nrequests[1] -> nums[0] + nums[1] = 2 + 1 = 3\nTotal sum: 8 + 3 = 11.\nA permutation with a higher total sum is [3,5,4,2,1] with the following result:\nrequests[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11\nrequests[1] -> nums[0] + nums[1] = 3 + 5  = 8\nTotal sum: 11 + 8 = 19, which is the best that you can do."
            },
            {
                "Input": "** nums = [1,2,3,4,5,6], requests = [[0,1]]",
                "Output": "** 11",
                "Explanation": "** A permutation with the max total sum is [6,5,4,3,2,1] with request sums [11]."
            },
            {
                "Input": "** nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]",
                "Output": "** 47",
                "Explanation": "** A permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10]."
            }
        ]
    },
    {
        "Title": "Make Sum Divisible by P",
        "slug": "make-sum-divisible-by-p",
        "description": "Given an array of positive integers `nums`, remove the **smallest** subarray (possibly **empty**) such that the **sum** of the remaining elements is divisible by `p`. It is **not** allowed to remove the whole array.\n\n\nReturn *the length of the smallest subarray that you need to remove, or* `-1` *if it's impossible*.\n\n\nA **subarray** is defined as a contiguous block of elements in the array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [3,1,4,2], p = 6",
                "Output": "** 1",
                "Explanation": "** The sum of the elements in nums is 10, which is not divisible by 6. We can remove the subarray [4], and the sum of the remaining elements is 6, which is divisible by 6."
            },
            {
                "Input": "** nums = [6,3,5,2], p = 9",
                "Output": "** 2",
                "Explanation": "** We cannot remove a single element to get a sum divisible by 9. The best way is to remove the subarray [5,2], leaving us with [6,3] with sum 9."
            },
            {
                "Input": "** nums = [1,2,3], p = 3",
                "Output": "** 0",
                "Explanation": "** Here the sum is 6. which is already divisible by 3. Thus we do not need to remove anything."
            }
        ]
    },
    {
        "Title": "Strange Printer II",
        "slug": "strange-printer-ii",
        "description": "There is a strange printer with the following two special requirements:\n\n\n On each turn, the printer will print a solid rectangular pattern of a single color on the grid. This will cover up the existing colors in the rectangle.\n Once the printer has used a color for the above operation, **the same color cannot be used again**.\n\n\nYou are given a `m x n` matrix `targetGrid`, where `targetGrid[row][col]` is the color in the position `(row, col)` of the grid.\n\n\nReturn `true` *if it is possible to print the matrix* `targetGrid`*,* *otherwise, return* `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Graph",
            "Topological Sort",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Rearrange Spaces Between Words",
        "slug": "rearrange-spaces-between-words",
        "description": "You are given a string `text` of words that are placed among some number of spaces. Each word consists of one or more lowercase English letters and are separated by at least one space. It's guaranteed that `text` **contains at least one word**.\n\n\nRearrange the spaces so that there is an **equal** number of spaces between every pair of adjacent words and that number is **maximized**. If you cannot redistribute all the spaces equally, place the **extra spaces at the end**, meaning the returned string should be the same length as `text`.\n\n\nReturn *the string after rearranging the spaces*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** text = \"  this   is  a sentence \"",
                "Output": "** \"this   is   a   sentence\"",
                "Explanation": "** There are a total of 9 spaces and 4 words. We can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces."
            },
            {
                "Input": "** text = \" practice   makes   perfect\"",
                "Output": "** \"practice   makes   perfect \"",
                "Explanation": "** There are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. We place this extra space at the end of the string."
            }
        ]
    },
    {
        "Title": "Split a String Into the Max Number of Unique Substrings",
        "slug": "split-a-string-into-the-max-number-of-unique-substrings",
        "description": "Given a string\u00a0`s`,\u00a0return *the maximum\u00a0number of unique substrings that the given string can be split into*.\n\n\nYou can split string\u00a0`s` into any list of\u00a0**non-empty substrings**, where the concatenation of the substrings forms the original string.\u00a0However, you must split the substrings such that all of them are **unique**.\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** s = \"ababccc\"",
                "Output": "** 5",
                "Explanation": "One way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. Splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times."
            },
            {
                "Input": "** s = \"aba\"",
                "Output": "** 2",
                "Explanation": "One way to split maximally is ['a', 'ba']."
            },
            {
                "Input": "** s = \"aa\"",
                "Output": "** 1",
                "Explanation": "It is impossible to split the string any further."
            }
        ]
    },
    {
        "Title": "Maximum Non Negative Product in a Matrix",
        "slug": "maximum-non-negative-product-in-a-matrix",
        "description": "You are given a `m x n` matrix `grid`. Initially, you are located at the top-left corner `(0, 0)`, and in each step, you can only **move right or down** in the matrix.\n\n\nAmong all possible paths starting from the top-left corner `(0, 0)` and ending in the bottom-right corner `(m - 1, n - 1)`, find the path with the **maximum non-negative product**. The product of a path is the product of all integers in the grid cells visited along the path.\n\n\nReturn the *maximum non-negative product **modulo*** `109 + 7`. *If the maximum product is **negative**, return* `-1`.\n\n\nNotice that the modulo is performed after getting the maximum product.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[-1,-2,-3],[-2,-3,-3],[-3,-3,-2]]",
                "Output": "** -1",
                "Explanation": "** It is not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1."
            },
            {
                "Input": "** grid = [[1,-2,1],[1,-2,1],[3,-4,1]]",
                "Output": "** 8",
                "Explanation": "** Maximum non-negative product is shown (1 * 1 * -2 * -4 * 1 = 8)."
            },
            {
                "Input": "** grid = [[1,3],[0,-4]]",
                "Output": "** 0",
                "Explanation": "** Maximum non-negative product is shown (1 * 0 * -4 = 0)."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Connect Two Groups of Points",
        "slug": "minimum-cost-to-connect-two-groups-of-points",
        "description": "You are given two groups of points where the first group has `size1` points, the second group has `size2` points, and `size1 >= size2`.\n\n\nThe `cost` of the connection between any two points are given in an `size1 x size2` matrix where `cost[i][j]` is the cost of connecting point `i` of the first group and point `j` of the second group. The groups are connected if **each point in both groups is connected to one or more points in the opposite group**. In other words, each point in the first group must be connected to at least one point in the second group, and each point in the second group must be connected to at least one point in the first group.\n\n\nReturn *the minimum cost it takes to connect the two groups*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Bit Manipulation",
            "Matrix",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** cost = [[15, 96], [36, 2]]",
                "Output": "** 17",
                "Explanation": "The optimal way of connecting the groups is:\n1--A\n2--B\nThis results in a total cost of 17."
            },
            {
                "Input": "** cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]]",
                "Output": "** 4",
                "Explanation": "The optimal way of connecting the groups is:\n1--A\n2--B\n2--C\n3--A\nThis results in a total cost of 4.\nNote that there are multiple points connected to point 2 in the first group and point A in the second group. This does not matter as there is no limit to the number of points that can be connected. We only care about the minimum total cost."
            }
        ]
    },
    {
        "Title": "Crawler Log Folder",
        "slug": "crawler-log-folder",
        "description": "The Leetcode file system keeps a log each time some user performs a *change folder* operation.\n\n\nThe operations are described below:\n\n\n `\"../\"` : Move to the parent folder of the current folder. (If you are already in the main folder, **remain in the same folder**).\n `\"./\"` : Remain in the same folder.\n `\"x/\"` : Move to the child folder named `x` (This folder is **guaranteed to always exist**).\n\n\nYou are given a list of strings `logs` where `logs[i]` is the operation performed by the user at the `ith` step.\n\n\nThe file system starts in the main folder, then the operations in `logs` are performed.\n\n\nReturn *the minimum number of operations needed to go back to the main folder after the change folder operations.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "String",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** logs = [\"d1/\",\"d2/\",\"../\",\"d21/\",\"./\"]",
                "Output": "** 2",
                "Explanation": "** Use this change folder operation \"../\" 2 times and go back to the main folder."
            },
            {
                "Input": "** logs = [\"d1/\",\"d2/\",\"./\",\"d3/\",\"../\",\"d31/\"]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Profit of Operating a Centennial Wheel",
        "slug": "maximum-profit-of-operating-a-centennial-wheel",
        "description": "You are the operator of a Centennial Wheel that has **four gondolas**, and each gondola has room for **up** **to** **four people**. You have the ability to rotate the gondolas **counterclockwise**, which costs you `runningCost` dollars.\n\n\nYou are given an array `customers` of length `n` where `customers[i]` is the number of new customers arriving just before the `ith` rotation (0-indexed). This means you **must rotate the wheel** `i` **times before the** `customers[i]` **customers arrive**. **You cannot make customers wait if there is room in the gondola**. Each customer pays `boardingCost` dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again.\n\n\nYou can stop the wheel at any time, including **before** **serving** **all** **customers**. If you decide to stop serving customers, **all subsequent rotations are free** in order to get all the customers down safely. Note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait **for the next rotation**.\n\n\nReturn *the minimum number of rotations you need to perform to maximize your profit.* If there is **no scenario** where the profit is positive, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** customers = [8,3], boardingCost = 5, runningCost = 6",
                "Output": "** 3",
                "Explanation": "** The numbers written on the gondolas are the number of people currently there.\n1. 8 customers arrive, 4 board and 4 wait for the next gondola, the wheel rotates. Current profit is 4 * $5 - 1 * $6 = $14.\n2. 3 customers arrive, the 4 waiting board the wheel and the other 3 wait, the wheel rotates. Current profit is 8 * $5 - 2 * $6 = $28.\n3. The final 3 customers board the gondola, the wheel rotates. Current profit is 11 * $5 - 3 * $6 = $37.\nThe highest profit was $37 after rotating the wheel 3 times."
            }
        ]
    },
    {
        "Title": "Throne Inheritance",
        "slug": "throne-inheritance",
        "description": "A kingdom consists of a king, his children, his grandchildren, and so on. Every once in a while, someone in the family dies or a child is born.\n\n\nThe kingdom has a well-defined order of inheritance that consists of the king as the first member. Let's define the recursive function `Successor(x, curOrder)`, which given a person `x` and the inheritance order so far, returns who should be the next person after `x` in the order of inheritance.\n\n\n\n```\n\nSuccessor(x, curOrder):\n    if x has no children or all of x's children are in curOrder:\n        if x is the king return null\n        else return Successor(x's parent, curOrder)\n    else return x's oldest child who's not in curOrder\n\n```\n\nFor example, assume we have a kingdom that consists of the king, his children Alice and Bob (Alice is older than Bob), and finally Alice's son Jack.\n\n\n1. In the beginning, `curOrder` will be `[\"king\"]`.\n2. Calling `Successor(king, curOrder)` will return Alice, so we append to `curOrder` to get `[\"king\", \"Alice\"]`.\n3. Calling `Successor(Alice, curOrder)` will return Jack, so we append to `curOrder` to get `[\"king\", \"Alice\", \"Jack\"]`.\n4. Calling `Successor(Jack, curOrder)` will return Bob, so we append to `curOrder` to get `[\"king\", \"Alice\", \"Jack\", \"Bob\"]`.\n5. Calling `Successor(Bob, curOrder)` will return `null`. Thus the order of inheritance will be `[\"king\", \"Alice\", \"Jack\", \"Bob\"]`.\n\n\nUsing the above function, we can always obtain a unique order of inheritance.\n\n\nImplement the `ThroneInheritance` class:\n\n\n `ThroneInheritance(string kingName)` Initializes an object of the `ThroneInheritance` class. The name of the king is given as part of the constructor.\n `void birth(string parentName, string childName)` Indicates that `parentName` gave birth to `childName`.\n `void death(string name)` Indicates the death of `name`. The death of the person doesn't affect the `Successor` function nor the current inheritance order. You can treat it as just marking the person as dead.\n `string[] getInheritanceOrder()` Returns a list representing the current order of inheritance **excluding** dead people.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Tree",
            "Depth-First Search",
            "Design"
        ],
        "examples": [
            {
                "Input": "[\"ThroneInheritance\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"getInheritanceOrder\", \"death\", \"getInheritanceOrder\"]\n[[\"king\"], [\"king\", \"andy\"], [\"king\", \"bob\"], [\"king\", \"catherine\"], [\"andy\", \"matthew\"], [\"bob\", \"alex\"], [\"bob\", \"asha\"], [null], [\"bob\"], [null]]",
                "Output": "[null, null, null, null, null, null, null, [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"], null, [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]]",
                "Explanation": "ThroneInheritance t= new ThroneInheritance(\"king\"); // order: **king**\nt.birth(\"king\", \"andy\"); // order: king > **andy**\nt.birth(\"king\", \"bob\"); // order: king > andy > **bob**\nt.birth(\"king\", \"catherine\"); // order: king > andy > bob > **catherine**\nt.birth(\"andy\", \"matthew\"); // order: king > andy > **matthew** > bob > catherine\nt.birth(\"bob\", \"alex\"); // order: king > andy > matthew > bob > **alex** > catherine\nt.birth(\"bob\", \"asha\"); // order: king > andy > matthew > bob > alex > **asha** > catherine\nt.getInheritanceOrder(); // return [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"]\nt.death(\"bob\"); // order: king > andy > matthew > **~~bob~~** > alex > asha > catherine\nt.getInheritanceOrder(); // return [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]"
            }
        ]
    },
    {
        "Title": "Maximum Number of Achievable Transfer Requests",
        "slug": "maximum-number-of-achievable-transfer-requests",
        "description": "We have `n` buildings numbered from `0` to `n - 1`. Each building has a number of employees. It's transfer season, and some employees want to change the building they reside in.\n\n\nYou are given an array `requests` where `requests[i] = [fromi, toi]` represents an employee's request to transfer from building `fromi` to building `toi`.\n\n\nAll buildings are full**, so a list of requests is achievable only if for each building, the **net change in employee transfers is zero**. This means the number of employees **leaving** is **equal** to the number of employees **moving in**. For example if `n = 3` and two employees are leaving building `0`, one is leaving building `1`, and one is leaving building `2`, there should be two employees moving to building `0`, one employee moving to building `1`, and one employee moving to building `2`.\n\n\nReturn *the maximum number of achievable requests*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Backtracking",
            "Bit Manipulation",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]",
                "Output": "** 5\n**Explantion:** Let's see the requests:\nFrom building 0 we have employees x and y and both want to move to building 1.\nFrom building 1 we have employees a and b and they want to move to buildings 2 and 0 respectively.\nFrom building 2 we have employee z and they want to move to building 0.\nFrom building 3 we have employee c and they want to move to building 4.\nFrom building 4 we don't have any requests.\nWe can achieve the requests of users x and b by swapping their places.\nWe can achieve the requests of users y, a and z by swapping the places in the 3 buildings.",
                "Explanation": null
            },
            {
                "Input": "** n = 3, requests = [[0,0],[1,2],[2,1]]",
                "Output": "** 3\n**Explantion:** Let's see the requests:\nFrom building 0 we have employee x and they want to stay in the same building 0.\nFrom building 1 we have employee y and they want to move to building 2.\nFrom building 2 we have employee z and they want to move to building 1.\nWe can achieve all the requests.",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Design Parking System",
        "slug": "design-parking-system",
        "description": "Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.\n\n\nImplement the `ParkingSystem` class:\n\n\n `ParkingSystem(int big, int medium, int small)` Initializes object of the `ParkingSystem` class. The number of slots for each parking space are given as part of the constructor.\n `bool addCar(int carType)` Checks whether there is a parking space of `carType` for the car that wants to get into the parking lot. `carType` can be of three kinds: big, medium, or small, which are represented by `1`, `2`, and `3` respectively. **A car can only park in a parking space of its** `carType`. If there is no space available, return `false`, else park the car in that size space and return `true`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Design",
            "Simulation",
            "Counting"
        ],
        "examples": [
            {
                "Input": "[\"ParkingSystem\", \"addCar\", \"addCar\", \"addCar\", \"addCar\"]\n[[1, 1, 0], [1], [2], [3], [1]]",
                "Output": "[null, true, true, false, false]",
                "Explanation": "ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);\nparkingSystem.addCar(1); // return true because there is 1 available slot for a big car\nparkingSystem.addCar(2); // return true because there is 1 available slot for a medium car\nparkingSystem.addCar(3); // return false because there is no available slot for a small car\nparkingSystem.addCar(1); // return false because there is no available slot for a big car. It is already occupied."
            }
        ]
    },
    {
        "Title": "Alert Using Same Key-Card Three or More Times in a One Hour Period",
        "slug": "alert-using-same-key-card-three-or-more-times-in-a-one-hour-period",
        "description": "LeetCode company workers use key-cards to unlock office doors. Each time a worker uses their key-card, the security system saves the worker's name and the time when it was used. The system emits an **alert** if any worker uses the key-card **three or more times** in a one-hour period.\n\n\nYou are given a list of strings `keyName` and `keyTime` where `[keyName[i], keyTime[i]]` corresponds to a person's name and the time when their key-card was used **in a** **single day**.\n\n\nAccess times are given in the **24-hour time format \"HH:MM\"**, such as `\"23:51\"` and `\"09:49\"`.\n\n\nReturn a *list of unique worker names who received an alert for frequent keycard use*. Sort the names in **ascending order alphabetically**.\n\n\nNotice that `\"10:00\"` - `\"11:00\"` is considered to be within a one-hour period, while `\"22:51\"` - `\"23:52\"` is not considered to be within a one-hour period.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** keyName = [\"daniel\",\"daniel\",\"daniel\",\"luis\",\"luis\",\"luis\",\"luis\"], keyTime = [\"10:00\",\"10:40\",\"11:00\",\"09:00\",\"11:00\",\"13:00\",\"15:00\"]",
                "Output": "** [\"daniel\"]",
                "Explanation": "** \"daniel\" used the keycard 3 times in a one-hour period (\"10:00\",\"10:40\", \"11:00\")."
            },
            {
                "Input": "** keyName = [\"alice\",\"alice\",\"alice\",\"bob\",\"bob\",\"bob\",\"bob\"], keyTime = [\"12:01\",\"12:00\",\"18:00\",\"21:00\",\"21:20\",\"21:30\",\"23:00\"]",
                "Output": "** [\"bob\"]",
                "Explanation": "** \"bob\" used the keycard 3 times in a one-hour period (\"21:00\",\"21:20\", \"21:30\")."
            }
        ]
    },
    {
        "Title": "Find Valid Matrix Given Row and Column Sums",
        "slug": "find-valid-matrix-given-row-and-column-sums",
        "description": "You are given two arrays `rowSum` and `colSum` of non-negative integers where `rowSum[i]` is the sum of the elements in the `ith` row and `colSum[j]` is the sum of the elements of the `jth` column of a 2D matrix. In other words, you do not know the elements of the matrix, but you do know the sums of each row and column.\n\n\nFind any matrix of **non-negative** integers of size `rowSum.length x colSum.length` that satisfies the `rowSum` and `colSum` requirements.\n\n\nReturn *a 2D array representing **any** matrix that fulfills the requirements*. It's guaranteed that **at least one** matrix that fulfills the requirements exists.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** rowSum = [3,8], colSum = [4,7]",
                "Output": "** [[3,0],\n         [1,7]]",
                "Explanation": "** \n0th row: 3 + 0 = 3 == rowSum[0]\n1st row: 1 + 7 = 8 == rowSum[1]\n0th column: 3 + 1 = 4 == colSum[0]\n1st column: 0 + 7 = 7 == colSum[1]\nThe row and column sums match, and all matrix elements are non-negative.\nAnother possible matrix is: [[1,2],\n                             [3,5]]"
            },
            {
                "Input": "** rowSum = [5,7,10], colSum = [8,6,8]",
                "Output": "** [[0,5,0],\n         [6,1,0],\n         [2,0,8]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Servers That Handled Most Number of Requests",
        "slug": "find-servers-that-handled-most-number-of-requests",
        "description": "You have `k` servers numbered from `0` to `k-1` that are being used to handle multiple requests simultaneously. Each server has infinite computational capacity but **cannot handle more than one request at a time**. The requests are assigned to servers according to a specific algorithm:\n\n\n The `ith` (0-indexed) request arrives.\n If all servers are busy, the request is dropped (not handled at all).\n If the `(i % k)th` server is available, assign the request to that server.\n Otherwise, assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). For example, if the `ith` server is busy, try to assign the request to the `(i+1)th` server, then the `(i+2)th` server, and so on.\n\n\nYou are given a **strictly increasing** array `arrival` of positive integers, where `arrival[i]` represents the arrival time of the `ith` request, and another array `load`, where `load[i]` represents the load of the `ith` request (the time it takes to complete). Your goal is to find the **busiest server(s)**. A server is considered **busiest** if it handled the most number of requests successfully among all the servers.\n\n\nReturn *a list containing the IDs (0-indexed) of the **busiest server(s)***. You may return the IDs in any order.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Heap (Priority Queue)",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3]",
                "Output": "** [1]",
                "Explanation": "** \nAll of the servers start out available.\nThe first 3 requests are handled by the first 3 servers in order.\nRequest 3 comes in. Server 0 is busy, so it's assigned to the next available server, which is 1.\nRequest 4 comes in. It cannot be handled since all servers are busy, so it is dropped.\nServers 0 and 2 handled one request each, while server 1 handled two requests. Hence server 1 is the busiest server."
            }
        ]
    },
    {
        "Title": "Special Array With X Elements Greater Than or Equal X",
        "slug": "special-array-with-x-elements-greater-than-or-equal-x",
        "description": "You are given an array `nums` of non-negative integers. `nums` is considered **special** if there exists a number `x` such that there are **exactly** `x` numbers in `nums` that are **greater than or equal to** `x`.\n\n\nNotice that `x` **does not** have to be an element in `nums`.\n\n\nReturn `x` *if the array is **special**, otherwise, return* `-1`. It can be proven that if `nums` is special, the value for `x` is **unique**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [3,5]",
                "Output": "** 2",
                "Explanation": "** There are 2 values (3 and 5) that are greater than or equal to 2."
            },
            {
                "Input": "** nums = [0,0]",
                "Output": "** -1",
                "Explanation": "** No numbers fit the criteria for x.\nIf x = 0, there should be 0 numbers >= x, but there are 2.\nIf x = 1, there should be 1 number >= x, but there are 0.\nIf x = 2, there should be 2 numbers >= x, but there are 0.\nx cannot be greater since there are only 2 numbers in nums."
            },
            {
                "Input": "** nums = [0,4,3,0,4]",
                "Output": "** 3",
                "Explanation": "** There are 3 values that are greater than or equal to 3."
            }
        ]
    },
    {
        "Title": "Even Odd Tree",
        "slug": "even-odd-tree",
        "description": "A binary tree is named **Even-Odd** if it meets the following conditions:\n\n\n The root of the binary tree is at level index `0`, its children are at level index `1`, their children are at level index `2`, etc.\n For every **even-indexed** level, all nodes at the level have **odd** integer values in **strictly increasing** order (from left to right).\n For every **odd-indexed** level, all nodes at the level have **even** integer values in **strictly decreasing** order (from left to right).\n\n\nGiven the `root` of a binary tree, *return* `true` *if the binary tree is **Even-Odd**, otherwise return* `false`*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,10,4,3,null,7,9,12,8,6,null,null,2]",
                "Output": "** true",
                "Explanation": "** The node values on each level are:\nLevel 0: [1]\nLevel 1: [10,4]\nLevel 2: [3,7,9]\nLevel 3: [12,8,6,2]\nSince levels 0 and 2 are all odd and increasing and levels 1 and 3 are all even and decreasing, the tree is Even-Odd."
            },
            {
                "Input": "** root = [5,4,2,3,3,7]",
                "Output": "** false",
                "Explanation": "** The node values on each level are:\nLevel 0: [5]\nLevel 1: [4,2]\nLevel 2: [3,3,7]\nNode values in level 2 must be in strictly increasing order, so the tree is not Even-Odd."
            },
            {
                "Input": "** root = [5,9,1,3,5,7]",
                "Output": "** false",
                "Explanation": "** Node values in the level 1 should be even integers."
            }
        ]
    },
    {
        "Title": "Maximum Number of Visible Points",
        "slug": "maximum-number-of-visible-points",
        "description": "You are given an array `points`, an integer `angle`, and your `location`, where `location = [posx, posy]` and `points[i] = [xi, yi]` both denote **integral coordinates** on the X-Y plane.\n\n\nInitially, you are facing directly east from your position. You **cannot move** from your position, but you can **rotate**. In other words, `posx` and `posy` cannot be changed. Your field of view in **degrees** is represented by `angle`, determining how wide you can see from any given view direction. Let `d` be the amount in degrees that you rotate counterclockwise. Then, your field of view is the **inclusive** range of angles `[d - angle/2, d + angle/2]`.\n\n\n\nYour browser does not support the video tag or this video format.\n\n\n\nYou can **see** some set of points if, for each point, the **angle** formed by the point, your position, and the immediate east direction from your position is **in your field of view**.\n\n\nThere can be multiple points at one coordinate. There may be points at your location, and you can always see these points regardless of your rotation. Points do not obstruct your vision to other points.\n\n\nReturn *the maximum number of points you can see*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Geometry",
            "Sliding Window",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1]",
                "Output": "** 3",
                "Explanation": "** The shaded region represents your field of view. All points can be made visible in your field of view, including [3,3] even though [2,2] is in front and in the same line of sight."
            },
            {
                "Input": "** points = [[1,0],[2,1]], angle = 13, location = [1,1]",
                "Output": "** 1",
                "Explanation": "** You can only see one of the two points, as shown above."
            }
        ]
    },
    {
        "Title": "Minimum One Bit Operations to Make Integers Zero",
        "slug": "minimum-one-bit-operations-to-make-integers-zero",
        "description": "Given an integer `n`, you must transform it into `0` using the following operations any number of times:\n\n\n Change the rightmost (`0th`) bit in the binary representation of `n`.\n Change the `ith` bit in the binary representation of `n` if the `(i-1)th` bit is set to `1` and the `(i-2)th` through `0th` bits are set to `0`.\n\n\nReturn *the minimum number of operations to transform* `n` *into* `0`*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Bit Manipulation",
            "Memoization"
        ],
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** 2",
                "Explanation": "** The binary representation of 3 is \"11\".\n\"11\" -> \"01\" with the 2nd operation since the 0th bit is 1.\n\"01\" -> \"00\" with the 1st operation."
            },
            {
                "Input": "** n = 6",
                "Output": "** 4",
                "Explanation": "** The binary representation of 6 is \"110\".\n\"110\" -> \"010\" with the 2nd operation since the 1st bit is 1 and 0th through 0th bits are 0.\n\"010\" -> \"011\" with the 1st operation.\n\"011\" -> \"001\" with the 2nd operation since the 0th bit is 1.\n\"001\" -> \"000\" with the 1st operation."
            }
        ]
    },
    {
        "Title": "Maximum Nesting Depth of the Parentheses",
        "slug": "maximum-nesting-depth-of-the-parentheses",
        "description": "Given a **valid parentheses string** `s`, return the **nesting depth** of`s`. The nesting depth is the **maximum** number of nested parentheses.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** s = \"(1+(2\\*3)+((8)/4))+1\"",
                "Output": "** 3",
                "Explanation": "**\n\n\nDigit 8 is inside of 3 nested parentheses in the string."
            },
            {
                "Input": "** s = \"(1)+((2))+(((3)))\"",
                "Output": "** 3",
                "Explanation": "**\n\n\nDigit 3 is inside of 3 nested parentheses in the string."
            },
            {
                "Input": "** s = \"()(())((()()))\"",
                "Output": "** 3\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 100`\n* `s` consists of digits `0-9` and characters `'+'`, `'-'`, `'*'`, `'/'`, `'('`, and `')'`.\n* It is guaranteed that parentheses expression `s` is a VPS.\n\n\nSimilarQuestions: [1111]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximal Network Rank",
        "slug": "maximal-network-rank",
        "description": "There is an infrastructure of `n` cities with some number of `roads` connecting these cities. Each `roads[i] = [ai, bi]` indicates that there is a bidirectional road between cities `ai` and `bi`.\n\n\nThe **network rank**of **two different cities** is defined as the total number of\u00a0**directly** connected roads to **either** city. If a road is directly connected to both cities, it is only counted **once**.\n\n\nThe **maximal network rank** of the infrastructure is the **maximum network rank** of all pairs of different cities.\n\n\nGiven the integer `n` and the array `roads`, return *the **maximal network rank** of the entire infrastructure*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Graph"
        ],
        "examples": [
            {
                "Input": "** n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]",
                "Output": "** 5",
                "Explanation": "** The network rank of 2 and 5 is 5. Notice that all the cities do not have to be connected."
            }
        ]
    },
    {
        "Title": "Split Two Strings to Make Palindrome",
        "slug": "split-two-strings-to-make-palindrome",
        "description": "You are given two strings `a` and `b` of the same length. Choose an index and split both strings **at the same index**, splitting `a` into two strings: `aprefix` and `asuffix` where `a = aprefix + asuffix`, and splitting `b` into two strings: `bprefix` and `bsuffix` where `b = bprefix + bsuffix`. Check if `aprefix + bsuffix` or `bprefix + asuffix` forms a palindrome.\n\n\nWhen you split a string `s` into `sprefix` and `ssuffix`, either `ssuffix` or `sprefix` is allowed to be empty. For example, if `s = \"abc\"`, then `\"\" + \"abc\"`, `\"a\" + \"bc\"`, `\"ab\" + \"c\"` , and `\"abc\" + \"\"` are valid splits.\n\n\nReturn `true` *if it is possible to form* *a palindrome string, otherwise return* `false`.\n\n\nNotice** that\u00a0`x + y` denotes the concatenation of strings `x` and `y`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** a = \"x\", b = \"y\"",
                "Output": "** true\n**Explaination:** If either a or b are palindromes the answer is true since you can split in the following way:\naprefix = \"\", asuffix = \"x\"\nbprefix = \"\", bsuffix = \"y\"\nThen, aprefix + bsuffix = \"\" + \"y\" = \"y\", which is a palindrome.",
                "Explanation": null
            },
            {
                "Input": "** a = \"xbdef\", b = \"xecab\"",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** a = \"ulacfd\", b = \"jizalu\"",
                "Output": "** true\n**Explaination:** Split them at index 3:\naprefix = \"ula\", asuffix = \"cfd\"\nbprefix = \"jiz\", bsuffix = \"alu\"\nThen, aprefix + bsuffix = \"ula\" + \"alu\" = \"ulaalu\", which is a palindrome.",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count Subtrees With Max Distance Between Cities",
        "slug": "count-subtrees-with-max-distance-between-cities",
        "description": "There are `n` cities numbered from `1` to `n`. You are given an array `edges` of size `n-1`, where `edges[i] = [ui, vi]` represents a bidirectional edge between cities `ui` and `vi`. There exists a unique path between each pair of cities. In other words, the cities form a **tree**.\n\n\nA **subtree** is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. Two subtrees are different if there is a city in one subtree that is not present in the other.\n\n\nFor each `d` from `1` to `n-1`, find the number of subtrees in which the **maximum distance** between any two cities in the subtree is equal to `d`.\n\n\nReturn *an array of size* `n-1` *where the* `dth`*element **(1-indexed)** is the number of subtrees in which the **maximum distance** between any two cities is equal to* `d`.\n\n\nNotice**\u00a0that\u00a0the **distance** between the two cities is the number of edges in the path between them.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Bit Manipulation",
            "Tree",
            "Enumeration",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** n = 2, edges = [[1,2]]",
                "Output": "** [1]",
                "Explanation": null
            },
            {
                "Input": "** n = 3, edges = [[1,2],[2,3]]",
                "Output": "** [2,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Mean of Array After Removing Some Elements",
        "slug": "mean-of-array-after-removing-some-elements",
        "description": "Given an integer array `arr`, return *the mean of the remaining integers after removing the smallest `5%` and the largest `5%` of the elements.\n\n\nAnswers within `10-5` of the **actual answer** will be considered accepted.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]",
                "Output": "** 2.00000",
                "Explanation": "** After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2."
            },
            {
                "Input": "** arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]",
                "Output": "** 4.00000",
                "Explanation": null
            },
            {
                "Input": "** arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]",
                "Output": "** 4.77778",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Coordinate With Maximum Network Quality",
        "slug": "coordinate-with-maximum-network-quality",
        "description": "You are given an array of network towers `towers`, where `towers[i] = [xi, yi, qi]` denotes the `ith` network tower with location `(xi, yi)` and quality factor `qi`. All the coordinates are **integral coordinates** on the X-Y plane, and the distance between the two coordinates is the **Euclidean distance**.\n\n\nYou are also given an integer `radius` where a tower is **reachable** if the distance is **less than or equal to** `radius`. Outside that distance, the signal becomes garbled, and the tower is **not reachable**.\n\n\nThe signal quality of the `ith` tower at a coordinate `(x, y)` is calculated with the formula `\u230aqi / (1 + d)\u230b`, where `d` is the distance between the tower and the coordinate. The **network quality** at a coordinate is the sum of the signal qualities from all the **reachable** towers.\n\n\nReturn *the array* `[cx, cy]` *representing the **integral** coordinate* `(cx, cy)` *where the **network quality** is maximum. If there are multiple coordinates with the same **network quality**, return the lexicographically minimum **non-negative** coordinate.\n\n\nNote:\n\n\n A coordinate `(x1, y1)` is lexicographically smaller than `(x2, y2)` if either:\n\t+ `x1 < x2`, or\n\t+ `x1 == x2` and `y1 < y2`.\n `\u230aval\u230b` is the greatest integer less than or equal to `val` (the floor function).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2",
                "Output": "** [2,1]",
                "Explanation": "** At coordinate (2, 1) the total quality is 13.\n- Quality of 7 from (2, 1) results in \u230a7 / (1 + sqrt(0)\u230b = \u230a7\u230b = 7\n- Quality of 5 from (1, 2) results in \u230a5 / (1 + sqrt(2)\u230b = \u230a2.07\u230b = 2\n- Quality of 9 from (3, 1) results in \u230a9 / (1 + sqrt(1)\u230b = \u230a4.5\u230b = 4\nNo other coordinate has a higher network quality."
            }
        ]
    },
    {
        "Title": "Number of Sets of K Non-Overlapping Line Segments",
        "slug": "number-of-sets-of-k-non-overlapping-line-segments",
        "description": "Given `n` points on a 1-D plane, where the `ith` point (from `0` to `n-1`) is at `x = i`, find the number of ways we can draw **exactly** `k` **non-overlapping** line segments such that each segment covers two or more points. The endpoints of each segment must have **integral coordinates**. The `k` line segments **do not** have to cover all `n` points, and they are **allowed** to share endpoints.\n\n\nReturn *the number of ways we can draw* `k` *non-overlapping line segments**.* Since this number can be huge, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Combinatorics"
        ],
        "examples": [
            {
                "Input": "** n = 4, k = 2",
                "Output": "** 5",
                "Explanation": "** The two line segments are shown in red and blue.\nThe image above shows the 5 different ways {(0,2),(2,3)}, {(0,1),(1,3)}, {(0,1),(2,3)}, {(1,2),(2,3)}, {(0,1),(1,2)}."
            }
        ]
    },
    {
        "Title": "Fancy Sequence",
        "slug": "fancy-sequence",
        "description": "Write an API that generates fancy sequences using the `append`, `addAll`, and `multAll` operations.\n\n\nImplement the `Fancy` class:\n\n\n `Fancy()` Initializes the object with an empty sequence.\n `void append(val)` Appends an integer `val` to the end of the sequence.\n `void addAll(inc)` Increments all existing values in the sequence by an integer `inc`.\n `void multAll(m)` Multiplies all existing values in the sequence by an integer `m`.\n `int getIndex(idx)` Gets the current value at index `idx` (0-indexed) of the sequence **modulo** `109 + 7`. If the index is greater or equal than the length of the sequence, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Design",
            "Segment Tree"
        ],
        "examples": [
            {
                "Input": "[\"Fancy\", \"append\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"getIndex\", \"getIndex\"]\n[[], [2], [3], [7], [2], [0], [3], [10], [2], [0], [1], [2]]",
                "Output": "[null, null, null, null, null, 10, null, null, null, 26, 34, 20]",
                "Explanation": "Fancy fancy = new Fancy();\nfancy.append(2);   // fancy sequence: [2]\nfancy.addAll(3);   // fancy sequence: [2+3] -> [5]\nfancy.append(7);   // fancy sequence: [5, 7]\nfancy.multAll(2);  // fancy sequence: [5*2, 7*2] -> [10, 14]\nfancy.getIndex(0); // return 10\nfancy.addAll(3);   // fancy sequence: [10+3, 14+3] -> [13, 17]\nfancy.append(10);  // fancy sequence: [13, 17, 10]\nfancy.multAll(2);  // fancy sequence: [13*2, 17*2, 10*2] -> [26, 34, 20]\nfancy.getIndex(0); // return 26\nfancy.getIndex(1); // return 34\nfancy.getIndex(2); // return 20"
            }
        ]
    },
    {
        "Title": "Largest Substring Between Two Equal Characters",
        "slug": "largest-substring-between-two-equal-characters",
        "description": "Given a string `s`, return *the length of the longest substring between two equal characters, excluding the two characters.* If there is no such substring return `-1`.\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"aa\"",
                "Output": "** 0",
                "Explanation": "** The optimal substring here is an empty substring between the two 'a's."
            },
            {
                "Input": "** s = \"abca\"",
                "Output": "** 2",
                "Explanation": "** The optimal substring here is \"bc\"."
            },
            {
                "Input": "** s = \"cbzxy\"",
                "Output": "** -1",
                "Explanation": "** There are no characters that appear twice in s."
            }
        ]
    },
    {
        "Title": "Lexicographically Smallest String After Applying Operations",
        "slug": "lexicographically-smallest-string-after-applying-operations",
        "description": "You are given a string `s` of **even length** consisting of digits from `0` to `9`, and two integers `a` and `b`.\n\n\nYou can apply either of the following two operations any number of times and in any order on `s`:\n\n\n Add `a` to all odd indices of `s` **(0-indexed)**. Digits post `9` are cycled back to `0`. For example, if `s = \"3456\"` and `a = 5`, `s` becomes `\"3951\"`.\n Rotate `s` to the right by `b` positions. For example, if `s = \"3456\"` and `b = 1`, `s` becomes `\"6345\"`.\n\n\nReturn *the **lexicographically smallest** string you can obtain by applying the above operations any number of times on* `s`.\n\n\nA string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, string `a` has a letter that appears earlier in the alphabet than the corresponding letter in `b`. For example, `\"0158\"` is lexicographically smaller than `\"0190\"` because the first position they differ is at the third letter, and `'5'` comes before `'9'`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** s = \"5525\", a = 9, b = 2",
                "Output": "** \"2050\"",
                "Explanation": "** We can apply the following operations:\nStart:  \"5525\"\nRotate: \"2555\"\nAdd:    \"2454\"\nAdd:    \"2353\"\nRotate: \"5323\"\nAdd:    \"5222\"\nAdd:    \"5121\"\nRotate: \"2151\"\nAdd:    \"2050\"\u200b\u200b\u200b\u200b\u200b\nThere is no way to obtain a string that is lexicographically smaller than \"2050\"."
            },
            {
                "Input": "** s = \"74\", a = 5, b = 1",
                "Output": "** \"24\"",
                "Explanation": "** We can apply the following operations:\nStart:  \"74\"\nRotate: \"47\"\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bAdd:    \"42\"\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bRotate: \"24\"\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\nThere is no way to obtain a string that is lexicographically smaller than \"24\"."
            },
            {
                "Input": "** s = \"0011\", a = 4, b = 2",
                "Output": "** \"0011\"",
                "Explanation": "** There are no sequence of operations that will give us a lexicographically smaller string than \"0011\"."
            }
        ]
    },
    {
        "Title": "Best Team With No Conflicts",
        "slug": "best-team-with-no-conflicts",
        "description": "You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the **sum** of scores of all the players in the team.\n\n\nHowever, the basketball team is not allowed to have **conflicts**. A **conflict** exists if a younger player has a **strictly higher** score than an older player. A conflict does **not** occur between players of the same age.\n\n\nGiven two lists, `scores` and `ages`, where each `scores[i]` and `ages[i]` represents the score and age of the `ith` player, respectively, return *the highest overall score of all possible basketball teams*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** scores = [1,3,5,10,15], ages = [1,2,3,4,5]",
                "Output": "** 34",
                "Explanation": "**\u00a0You can choose all the players."
            },
            {
                "Input": "** scores = [4,5,6,5], ages = [2,1,2,1]",
                "Output": "** 16",
                "Explanation": "**\u00a0It is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age."
            },
            {
                "Input": "** scores = [1,2,3,5], ages = [8,9,10,1]",
                "Output": "** 6",
                "Explanation": "**\u00a0It is best to choose the first 3 players."
            }
        ]
    },
    {
        "Title": "Graph Connectivity With Threshold",
        "slug": "graph-connectivity-with-threshold",
        "description": "We have `n` cities labeled from `1` to `n`. Two different cities with labels `x` and `y` are directly connected by a bidirectional road if and only if `x` and `y` share a common divisor **strictly greater** than some `threshold`. More formally, cities with labels `x` and `y` have a road between them if there exists an integer `z` such that all of the following are true:\n\n\n `x % z == 0`,\n `y % z == 0`, and\n `z > threshold`.\n\n\nGiven the two integers, `n` and `threshold`, and an array of `queries`, you must determine for each `queries[i] = [ai, bi]` if cities `ai` and `bi` are connected directly or indirectly.\u00a0(i.e. there is some path between them).\n\n\nReturn *an array* `answer`*, where* `answer.length == queries.length` *and* `answer[i]` *is* `true` *if for the* `ith` *query, there is a path between* `ai` *and* `bi`*, or* `answer[i]` *is* `false` *if there is no path.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Union Find",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]",
                "Output": "** [false,false,true]",
                "Explanation": "** The divisors for each number:\n1:   1\n2:   1, 2\n3:   1, 3\n4:   1, 2, 4\n5:   1, 5\n6:   1, 2, 3, 6\nUsing the underlined divisors above the threshold, only cities 3 and 6 share a common divisor, so they are the\nonly ones directly connected. The result of each query:\n[1,4]   1 is not connected to 4\n[2,5]   2 is not connected to 5\n[3,6]   3 is connected to 6 through path 3--6"
            },
            {
                "Input": "** n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]",
                "Output": "** [true,true,true,true,true]",
                "Explanation": "** The divisors for each number are the same as the previous example. However, since the threshold is 0,\nall divisors can be used. Since all numbers share 1 as a divisor, all cities are connected."
            },
            {
                "Input": "** n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]",
                "Output": "** [false,false,false,false,false]",
                "Explanation": "** Only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected.\nPlease notice that there can be multiple queries for the same pair of nodes [x, y], and that the query [x, y] is equivalent to the query [y, x]."
            }
        ]
    },
    {
        "Title": "Slowest Key",
        "slug": "slowest-key",
        "description": "A newly designed keypad was tested, where a tester pressed a sequence of `n` keys, one at a time.\n\n\nYou are given a string `keysPressed` of length `n`, where `keysPressed[i]` was the `ith` key pressed in the testing sequence, and a sorted list `releaseTimes`, where `releaseTimes[i]` was the time the `ith` key was released. Both arrays are **0-indexed**. The `0th` key was pressed at the time `0`,\u00a0and every subsequent key was pressed at the **exact** time the previous key was released.\n\n\nThe tester wants to know the key of the keypress that had the **longest duration**. The `ith`keypress had a **duration** of `releaseTimes[i] - releaseTimes[i - 1]`, and the `0th` keypress had a duration of `releaseTimes[0]`.\n\n\nNote that the same key could have been pressed multiple times during the test, and these multiple presses of the same key **may not** have had the same **duration**.\n\n\nReturn the key of the keypress that had the **longest duration**. If there are multiple such keypresses, return the lexicographically largest key of the keypresses.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "examples": [
            {
                "Input": "** releaseTimes = [9,29,49,50], keysPressed = \"cbcd\"",
                "Output": "** \"c\"",
                "Explanation": "** The keypresses were as follows:\nKeypress for 'c' had a duration of 9 (pressed at time 0 and released at time 9).\nKeypress for 'b' had a duration of 29 - 9 = 20 (pressed at time 9 right after the release of the previous character and released at time 29).\nKeypress for 'c' had a duration of 49 - 29 = 20 (pressed at time 29 right after the release of the previous character and released at time 49).\nKeypress for 'd' had a duration of 50 - 49 = 1 (pressed at time 49 right after the release of the previous character and released at time 50).\nThe longest of these was the keypress for 'b' and the second keypress for 'c', both with duration 20.\n'c' is lexicographically larger than 'b', so the answer is 'c'."
            },
            {
                "Input": "** releaseTimes = [12,23,36,46,62], keysPressed = \"spuda\"",
                "Output": "** \"a\"",
                "Explanation": "** The keypresses were as follows:\nKeypress for 's' had a duration of 12.\nKeypress for 'p' had a duration of 23 - 12 = 11.\nKeypress for 'u' had a duration of 36 - 23 = 13.\nKeypress for 'd' had a duration of 46 - 36 = 10.\nKeypress for 'a' had a duration of 62 - 46 = 16.\nThe longest of these was the keypress for 'a' with duration 16."
            }
        ]
    },
    {
        "Title": "Arithmetic Subarrays",
        "slug": "arithmetic-subarrays",
        "description": "A sequence of numbers is called **arithmetic** if it consists of at least two elements, and the difference between every two consecutive elements is the same. More formally, a sequence `s` is arithmetic if and only if `s[i+1] - s[i] == s[1] - s[0]` for all valid `i`.\n\n\nFor example, these are **arithmetic** sequences:\n\n\n\n```\n\n1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9\n```\n\nThe following sequence is not **arithmetic**:\n\n\n\n```\n\n1, 1, 2, 5, 7\n```\n\nYou are given an array of `n` integers, `nums`, and two arrays of `m` integers each, `l` and `r`, representing the `m` range queries, where the `ith` query is the range `[l[i], r[i]]`. All the arrays are **0-indexed**.\n\n\nReturn *a list of* `boolean` *elements* `answer`*, where* `answer[i]` *is* `true` *if the subarray* `nums[l[i]], nums[l[i]+1], ... , nums[r[i]]` *can be **rearranged** to form an **arithmetic** sequence, and* `false` *otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [4,6,5,9,3,7], l = [0,0,2], r = [2,3,5]",
                "Output": "** [true,false,true]",
                "Explanation": "**\nIn the 0th query, the subarray is [4,6,5]. This can be rearranged as [6,5,4], which is an arithmetic sequence.\nIn the 1st query, the subarray is [4,6,5,9]. This cannot be rearranged as an arithmetic sequence.\nIn the 2nd query, the subarray is [5,9,3,7]. This can be rearranged as [3,5,7,9], which is an arithmetic sequence."
            },
            {
                "Input": "** nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8,7], r = [4,4,9,7,9,10]",
                "Output": "** [false,true,false,false,true,true]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Path With Minimum Effort",
        "slug": "path-with-minimum-effort",
        "description": "You are a hiker preparing for an upcoming hike. You are given `heights`, a 2D array of size `rows x columns`, where `heights[row][col]` represents the height of cell `(row, col)`. You are situated in the top-left cell, `(0, 0)`, and you hope to travel to the bottom-right cell, `(rows-1, columns-1)` (i.e.,\u00a0**0-indexed**). You can move **up**, **down**, **left**, or **right**, and you wish to find a route that requires the minimum **effort**.\n\n\nA route's **effort** is the **maximum absolute difference**in heights between two consecutive cells of the route.\n\n\nReturn *the minimum **effort** required to travel from the top-left cell to the bottom-right cell.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Heap (Priority Queue)",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** heights = [[1,2,2],[3,8,2],[5,3,5]]",
                "Output": "** 2",
                "Explanation": "** The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.\nThis is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3."
            },
            {
                "Input": "** heights = [[1,2,3],[3,8,4],[5,3,5]]",
                "Output": "** 1",
                "Explanation": "** The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5]."
            },
            {
                "Input": "** heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]",
                "Output": "** 0",
                "Explanation": "** This route does not require any effort."
            }
        ]
    },
    {
        "Title": "Rank Transform of a Matrix",
        "slug": "rank-transform-of-a-matrix",
        "description": "Given an `m x n` `matrix`, return *a new matrix* `answer` *where* `answer[row][col]` *is the* ***rank** of* `matrix[row][col]`.\n\n\nThe **rank** is an **integer** that represents how large an element is compared to other elements. It is calculated using the following rules:\n\n\n The rank is an integer starting from `1`.\n If two elements `p` and `q` are in the **same row or column**, then:\n\t+ If `p < q` then `rank(p) < rank(q)`\n\t+ If `p == q` then `rank(p) == rank(q)`\n\t+ If `p > q` then `rank(p) > rank(q)`\n The **rank** should be as **small** as possible.\n\n\nThe test cases are generated so that `answer` is unique under the given rules.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Union Find",
            "Graph",
            "Topological Sort",
            "Sorting",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** matrix = [[1,2],[3,4]]",
                "Output": "** [[1,2],[2,3]]",
                "Explanation": "**\nThe rank of matrix[0][0] is 1 because it is the smallest integer in its row and column.\nThe rank of matrix[0][1] is 2 because matrix[0][1] > matrix[0][0] and matrix[0][0] is rank 1.\nThe rank of matrix[1][0] is 2 because matrix[1][0] > matrix[0][0] and matrix[0][0] is rank 1.\nThe rank of matrix[1][1] is 3 because matrix[1][1] > matrix[0][1], matrix[1][1] > matrix[1][0], and both matrix[0][1] and matrix[1][0] are rank 2."
            },
            {
                "Input": "** matrix = [[7,7],[7,7]]",
                "Output": "** [[1,1],[1,1]]",
                "Explanation": null
            },
            {
                "Input": "** matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]",
                "Output": "** [[4,2,3],[1,3,4],[5,1,6],[1,3,4]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Percentage of Users Attended a Contest",
        "slug": "percentage-of-users-attended-a-contest",
        "description": "Table: `Users`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| user_id     | int     |\n| user_name   | varchar |\n+-------------+---------+\nuser_id is the primary key (column with unique values) for this table.\nEach row of this table contains the name and the id of a user.\n\n```\n\n\u00a0\n\n\nTable: `Register`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| contest_id  | int     |\n| user_id     | int     |\n+-------------+---------+\n(contest_id, user_id) is the primary key (combination of columns with unique values) for this table.\nEach row of this table contains the id of a user and the contest they registered into.\n\n```\n\n\u00a0\n\n\nWrite a solution to find the percentage of the users registered in each contest rounded to **two decimals**.\n\n\nReturn the result table ordered by `percentage` in **descending order**. In case of a tie, order it by `contest_id` in **ascending order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nUsers table:\n+---------+-----------+\n| user_id | user_name |\n+---------+-----------+\n| 6       | Alice     |\n| 2       | Bob       |\n| 7       | Alex      |\n+---------+-----------+\nRegister table:\n+------------+---------+\n| contest_id | user_id |\n+------------+---------+\n| 215        | 6       |\n| 209        | 2       |\n| 208        | 2       |\n| 210        | 6       |\n| 208        | 6       |\n| 209        | 7       |\n| 209        | 6       |\n| 215        | 7       |\n| 208        | 7       |\n| 210        | 2       |\n| 207        | 2       |\n| 210        | 7       |\n+------------+---------+",
                "Output": "** \n+------------+------------+\n| contest_id | percentage |\n+------------+------------+\n| 208        | 100.0      |\n| 209        | 100.0      |\n| 210        | 100.0      |\n| 215        | 66.67      |\n| 207        | 33.33      |\n+------------+------------+",
                "Explanation": "** \nAll the users registered in contests 208, 209, and 210. The percentage is 100% and we sort them in the answer table by contest_id in ascending order.\nAlice and Alex registered in contest 215 and the percentage is ((2/3) * 100) = 66.67%\nBob registered in contest 207 and the percentage is ((1/3) * 100) = 33.33%"
            }
        ]
    },
    {
        "Title": "Sort Array by Increasing Frequency",
        "slug": "sort-array-by-increasing-frequency",
        "description": "Given an array of integers `nums`, sort the array in **increasing** order based on the frequency of the values. If multiple values have the same frequency, sort them in **decreasing** order.\n\n\nReturn the *sorted array*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,1,2,2,2,3]",
                "Output": "** [3,1,1,2,2,2]",
                "Explanation": "** '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3."
            },
            {
                "Input": "** nums = [2,3,1,3,2]",
                "Output": "** [1,3,3,2,2]",
                "Explanation": "** '2' and '3' both have a frequency of 2, so they are sorted in decreasing order."
            },
            {
                "Input": "** nums = [-1,1,-6,4,5,-6,1,4,1]",
                "Output": "** [5,-1,4,4,-6,-6,1,1,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Widest Vertical Area Between Two Points Containing No Points",
        "slug": "widest-vertical-area-between-two-points-containing-no-points",
        "description": "Given `n` `points` on a 2D plane where `points[i] = [xi, yi]`, Return*the **widest vertical area** between two points such that no points are inside the area.\n\n\nA **vertical area** is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The **widest vertical area** is the one with the maximum width.\n\n\nNote that points **on the edge** of a vertical area **are not** considered included in the area.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** points = [[8,7],[9,9],[7,4],[9,7]]",
                "Output": "** 1",
                "Explanation": "** Both the red and the blue area are optimal."
            }
        ]
    },
    {
        "Title": "Count Substrings That Differ by One Character",
        "slug": "count-substrings-that-differ-by-one-character",
        "description": "Given two strings `s` and `t`, find the number of ways you can choose a non-empty substring of `s` and replace a **single character** by a different character such that the resulting substring is a substring of `t`. In other words, find the number of substrings in `s` that differ from some substring in `t` by **exactly** one character.\n\n\nFor example, the underlined substrings in `\"computer\"` and `\"computation\"` only differ by the `'e'`/`'a'`, so this is a valid way.\n\n\nReturn *the number of substrings that satisfy the condition above.\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"aba\", t = \"baba\"",
                "Output": "** 6",
                "Explanation": "** The following are the pairs of substrings from s and t that differ by exactly 1 character:\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\nThe underlined portions are the substrings that are chosen from s and t."
            },
            {
                "Input": "** s = \"ab\", t = \"bb\"",
                "Output": "** 3",
                "Explanation": "** The following are the pairs of substrings from s and t that differ by 1 character:\n(\"ab\", \"bb\")\n(\"ab\", \"bb\")\n(\"ab\", \"bb\")\n\u200b\u200b\u200b\u200bThe underlined portions are the substrings that are chosen from s and t."
            }
        ]
    },
    {
        "Title": "Number of Ways to Form a Target String Given a Dictionary",
        "slug": "number-of-ways-to-form-a-target-string-given-a-dictionary",
        "description": "You are given a list of strings of the **same length** `words` and a string `target`.\n\n\nYour task is to form `target` using the given `words` under the following rules:\n\n\n `target` should be formed from left to right.\n To form the `ith` character (**0-indexed**) of `target`, you can choose the `kth` character of the `jth` string in `words` if `target[i] = words[j][k]`.\n Once you use the `kth` character of the `jth` string of `words`, you **can no longer** use the `xth` character of any string in `words` where `x <= k`. In other words, all characters to the left of or at index `k` become unusuable for every string.\n Repeat the process until you form the string `target`.\n\n\nNotice** that you can use **multiple characters** from the **same string** in `words` provided the conditions above are met.\n\n\nReturn *the number of ways to form `target` from `words`*. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** words = [\"acca\",\"bbbb\",\"caca\"], target = \"aba\"",
                "Output": "** 6",
                "Explanation": "** There are 6 ways to form target.\n\"aba\" -> index 0 (\"acca\"), index 1 (\"bbbb\"), index 3 (\"caca\")\n\"aba\" -> index 0 (\"acca\"), index 2 (\"bbbb\"), index 3 (\"caca\")\n\"aba\" -> index 0 (\"acca\"), index 1 (\"bbbb\"), index 3 (\"acca\")\n\"aba\" -> index 0 (\"acca\"), index 2 (\"bbbb\"), index 3 (\"acca\")\n\"aba\" -> index 1 (\"caca\"), index 2 (\"bbbb\"), index 3 (\"acca\")\n\"aba\" -> index 1 (\"caca\"), index 2 (\"bbbb\"), index 3 (\"caca\")"
            },
            {
                "Input": "** words = [\"abba\",\"baab\"], target = \"bab\"",
                "Output": "** 4",
                "Explanation": "** There are 4 ways to form target.\n\"bab\" -> index 0 (\"baab\"), index 1 (\"baab\"), index 2 (\"abba\")\n\"bab\" -> index 0 (\"baab\"), index 1 (\"baab\"), index 3 (\"baab\")\n\"bab\" -> index 0 (\"baab\"), index 2 (\"baab\"), index 3 (\"baab\")\n\"bab\" -> index 1 (\"abba\"), index 2 (\"baab\"), index 3 (\"baab\")"
            }
        ]
    },
    {
        "Title": "Check Array Formation Through Concatenation",
        "slug": "check-array-formation-through-concatenation",
        "description": "You are given an array of **distinct** integers `arr` and an array of integer arrays `pieces`, where the integers in `pieces` are **distinct**. Your goal is to form `arr` by concatenating the arrays in `pieces` **in any order**. However, you are **not** allowed to reorder the integers in each array `pieces[i]`.\n\n\nReturn `true` *if it is possible* *to form the array* `arr` *from* `pieces`. Otherwise, return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** arr = [15,88], pieces = [[88],[15]]",
                "Output": "** true",
                "Explanation": "** Concatenate [15] then [88]"
            },
            {
                "Input": "** arr = [49,18,16], pieces = [[16,18,49]]",
                "Output": "** false",
                "Explanation": "** Even though the numbers match, we cannot reorder pieces[0]."
            },
            {
                "Input": "** arr = [91,4,64,78], pieces = [[78],[4,64],[91]]",
                "Output": "** true",
                "Explanation": "** Concatenate [91] then [4,64] then [78]"
            }
        ]
    },
    {
        "Title": "Count Sorted Vowel Strings",
        "slug": "count-sorted-vowel-strings",
        "description": "Given an integer `n`, return *the number of strings of length* `n` *that consist only of vowels (*`a`*,* `e`*,* `i`*,* `o`*,* `u`*) and are **lexicographically sorted**.\n\n\nA string `s` is **lexicographically sorted** if for all valid `i`, `s[i]` is the same as or comes before `s[i+1]` in the alphabet.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Combinatorics"
        ],
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** 5",
                "Explanation": "** The 5 sorted strings that consist of vowels only are [\"a\",\"e\",\"i\",\"o\",\"u\"]."
            },
            {
                "Input": "** n = 2",
                "Output": "** 15",
                "Explanation": "** The 15 sorted strings that consist of vowels only are\n[\"aa\",\"ae\",\"ai\",\"ao\",\"au\",\"ee\",\"ei\",\"eo\",\"eu\",\"ii\",\"io\",\"iu\",\"oo\",\"ou\",\"uu\"].\nNote that \"ea\" is not a valid string since 'e' comes after 'a' in the alphabet."
            },
            {
                "Input": "** n = 33",
                "Output": "** 66045",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Furthest Building You Can Reach",
        "slug": "furthest-building-you-can-reach",
        "description": "You are given an integer array `heights` representing the heights of buildings, some `bricks`, and some `ladders`.\n\n\nYou start your journey from building `0` and move to the next building by possibly using bricks or ladders.\n\n\nWhile moving from building `i` to building `i+1` (**0-indexed**),\n\n\n If the current building's height is **greater than or equal** to the next building's height, you do **not** need a ladder or bricks.\n If the current building's height is **less than** the next building's height, you can either use **one ladder** or `(h[i+1] - h[i])` **bricks**.\n\n\nReturn the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1",
                "Output": "** 4",
                "Explanation": "** Starting at building 0, you can follow these steps:\n- Go to building 1 without using ladders nor bricks since 4 >= 2.\n- Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 < 7.\n- Go to building 3 without using ladders nor bricks since 7 >= 6.\n- Go to building 4 using your only ladder. You must use either bricks or ladders because 6 < 9.\nIt is impossible to go beyond building 4 because you do not have any more bricks or ladders."
            }
        ]
    },
    {
        "Title": "Kth Smallest Instructions",
        "slug": "kth-smallest-instructions",
        "description": "Bob is standing at cell `(0, 0)`, and he wants to reach `destination`: `(row, column)`. He can only travel **right** and **down**. You are going to help Bob by providing **instructions** for him to reach `destination`.\n\n\nThe **instructions** are represented as a string, where each character is either:\n\n\n `'H'`, meaning move horizontally (go **right**), or\n `'V'`, meaning move vertically (go **down**).\n\n\nMultiple **instructions** will lead Bob to `destination`. For example, if `destination` is `(2, 3)`, both `\"HHHVV\"` and `\"HVHVH\"` are valid **instructions**.\n\n\nHowever, Bob is very picky. Bob has a lucky number `k`, and he wants the `kth` **lexicographically smallest instructions** that will lead him to `destination`. `k` is **1-indexed**.\n\n\nGiven an integer array `destination` and an integer `k`, return *the* `kth` ***lexicographically smallest instructions** that will take Bob to* `destination`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Combinatorics"
        ],
        "examples": [
            {
                "Input": "** destination = [2,3], k = 1",
                "Output": "** \"HHHVV\"",
                "Explanation": "** All the instructions that reach (2, 3) in lexicographic order are as follows:\n[\"HHHVV\", \"HHVHV\", \"HHVVH\", \"HVHHV\", \"HVHVH\", \"HVVHH\", \"VHHHV\", \"VHHVH\", \"VHVHH\", \"VVHHH\"]."
            }
        ]
    },
    {
        "Title": "Get Maximum in Generated Array",
        "slug": "get-maximum-in-generated-array",
        "description": "You are given an integer `n`. A **0-indexed** integer array `nums` of length `n + 1` is generated in the following way:\n\n\n `nums[0] = 0`\n `nums[1] = 1`\n `nums[2 * i] = nums[i]` when `2 <= 2 * i <= n`\n `nums[2 * i + 1] = nums[i] + nums[i + 1]` when `2 <= 2 * i + 1 <= n`\n\n\nReturn*the **maximum** integer in the array* `nums`\u200b\u200b\u200b.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** n = 7",
                "Output": "** 3",
                "Explanation": "** According to the given rules:\n  nums[0] = 0\n  nums[1] = 1\n  nums[(1 * 2) = 2] = nums[1] = 1\n  nums[(1 * 2) + 1 = 3] = nums[1] + nums[2] = 1 + 1 = 2\n  nums[(2 * 2) = 4] = nums[2] = 1\n  nums[(2 * 2) + 1 = 5] = nums[2] + nums[3] = 1 + 2 = 3\n  nums[(3 * 2) = 6] = nums[3] = 2\n  nums[(3 * 2) + 1 = 7] = nums[3] + nums[4] = 2 + 1 = 3\nHence, nums = [0,1,1,2,1,3,2,3], and the maximum is max(0,1,1,2,1,3,2,3) = 3."
            },
            {
                "Input": "** n = 2",
                "Output": "** 1",
                "Explanation": "** According to the given rules, nums = [0,1,1]. The maximum is max(0,1,1) = 1."
            },
            {
                "Input": "** n = 3",
                "Output": "** 2",
                "Explanation": "** According to the given rules, nums = [0,1,1,2]. The maximum is max(0,1,1,2) = 2."
            }
        ]
    },
    {
        "Title": "Minimum Deletions to Make Character Frequencies Unique",
        "slug": "minimum-deletions-to-make-character-frequencies-unique",
        "description": "A string `s` is called **good** if there are no two different characters in `s` that have the same **frequency**.\n\n\nGiven a string `s`, return *the **minimum** number of characters you need to delete to make* `s` ***good**.\n\n\nThe **frequency** of a character in a string is the number of times it appears in the string. For example, in the string `\"aab\"`, the **frequency** of `'a'` is `2`, while the **frequency** of `'b'` is `1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** s = \"aab\"",
                "Output": "** 0",
                "Explanation": "** s is already good."
            },
            {
                "Input": "** s = \"aaabbbcc\"",
                "Output": "** 2",
                "Explanation": "** You can delete two 'b's resulting in the good string \"aaabcc\".\nAnother way it to delete one 'b' and one 'c' resulting in the good string \"aaabbc\"."
            },
            {
                "Input": "** s = \"ceabaacb\"",
                "Output": "** 2",
                "Explanation": "** You can delete both 'c's resulting in the good string \"eabaab\".\nNote that we only care about characters that are still in the string at the end (i.e. frequency of 0 is ignored)."
            }
        ]
    },
    {
        "Title": "Sell Diminishing-Valued Colored Balls",
        "slug": "sell-diminishing-valued-colored-balls",
        "description": "You have an `inventory` of different colored balls, and there is a customer that wants `orders` balls of **any** color.\n\n\nThe customer weirdly values the colored balls. Each colored ball's value is the number of balls **of that color**you currently have in your `inventory`. For example, if you own `6` yellow balls, the customer would pay `6` for the first yellow ball. After the transaction, there are only `5` yellow balls left, so the next yellow ball is then valued at `5` (i.e., the value of the balls decreases as you sell more to the customer).\n\n\nYou are given an integer array, `inventory`, where `inventory[i]` represents the number of balls of the `ith` color that you initially own. You are also given an integer `orders`, which represents the total number of balls that the customer wants. You can sell the balls **in any order**.\n\n\nReturn *the **maximum** total value that you can attain after selling* `orders` *colored balls*. As the answer may be too large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Binary Search",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** inventory = [2,5], orders = 4",
                "Output": "** 14",
                "Explanation": "** Sell the 1st color 1 time (2) and the 2nd color 3 times (5 + 4 + 3).\nThe maximum total value is 2 + 5 + 4 + 3 = 14."
            }
        ]
    },
    {
        "Title": "Create Sorted Array through Instructions",
        "slug": "create-sorted-array-through-instructions",
        "description": "Given an integer array `instructions`, you are asked to create a sorted array from the elements in `instructions`. You start with an empty container `nums`. For each element from **left to right** in `instructions`, insert it into `nums`. The **cost** of each insertion is the **minimum** of the following:\n\n\n The number of elements currently in `nums` that are **strictly less than** `instructions[i]`.\n The number of elements currently in `nums` that are **strictly greater than** `instructions[i]`.\n\n\nFor example, if inserting element `3` into `nums = [1,2,3,5]`, the **cost** of insertion is `min(2, 1)` (elements `1` and `2` are less than `3`, element `5` is greater than `3`) and `nums` will become `[1,2,3,3,5]`.\n\n\nReturn *the **total cost** to insert all elements from* `instructions` *into* `nums`. Since the answer may be large, return it **modulo** `109 + 7`\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Divide and Conquer",
            "Binary Indexed Tree",
            "Segment Tree",
            "Merge Sort",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** instructions = [1,5,6,2]",
                "Output": "** 1",
                "Explanation": "** Begin with nums = [].\r\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\r\nInsert 5 with cost min(1, 0) = 0, now nums = [1,5].\r\nInsert 6 with cost min(2, 0) = 0, now nums = [1,5,6].\r\nInsert 2 with cost min(1, 2) = 1, now nums = [1,2,5,6].\r\nThe total cost is 0 + 0 + 0 + 1 = 1."
            },
            {
                "Input": "** instructions = [1,2,3,6,5,4]",
                "Output": "** 3",
                "Explanation": "** Begin with nums = [].\r\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\r\nInsert 2 with cost min(1, 0) = 0, now nums = [1,2].\r\nInsert 3 with cost min(2, 0) = 0, now nums = [1,2,3].\r\nInsert 6 with cost min(3, 0) = 0, now nums = [1,2,3,6].\r\nInsert 5 with cost min(3, 1) = 1, now nums = [1,2,3,5,6].\r\nInsert 4 with cost min(3, 2) = 2, now nums = [1,2,3,4,5,6].\r\nThe total cost is 0 + 0 + 0 + 0 + 1 + 2 = 3."
            },
            {
                "Input": "** instructions = [1,3,3,3,2,4,2,1,2]",
                "Output": "** 4",
                "Explanation": "** Begin with nums = [].\r\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\r\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3].\r\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3,3].\r\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3,3,3].\r\nInsert 2 with cost min(1, 3) = 1, now nums = [1,2,3,3,3].\r\nInsert 4 with cost min(5, 0) = 0, now nums = [1,2,3,3,3,4].\r\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 2 with cost min(1, 4) = 1, now nums = [1,2,2,3,3,3,4].\r\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 1 with cost min(0, 6) = 0, now nums = [1,1,2,2,3,3,3,4].\r\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 2 with cost min(2, 4) = 2, now nums = [1,1,2,2,2,3,3,3,4].\r\nThe total cost is 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4."
            }
        ]
    },
    {
        "Title": "Defuse the Bomb",
        "slug": "defuse-the-bomb",
        "description": "You have a bomb to defuse, and your time is running out! Your informer will provide you with a **circular** array `code`\u00a0of length of `n`\u00a0and a key `k`.\n\n\nTo decrypt the code, you must replace every number. All the numbers are replaced **simultaneously**.\n\n\n If `k > 0`, replace the `ith` number with the sum of the **next** `k` numbers.\n If `k < 0`, replace the `ith` number with the sum of the **previous** `k` numbers.\n If `k == 0`, replace the `ith` number with `0`.\n\n\nAs `code` is circular, the next element of `code[n-1]` is `code[0]`, and the previous element of `code[0]` is `code[n-1]`.\n\n\nGiven the **circular** array `code` and an integer key `k`, return *the decrypted code to defuse the bomb*!\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** code = [5,7,1,4], k = 3",
                "Output": "** [12,10,16,13]",
                "Explanation": "** Each number is replaced by the sum of the next 3 numbers. The decrypted code is [7+1+4, 1+4+5, 4+5+7, 5+7+1]. Notice that the numbers wrap around."
            },
            {
                "Input": "** code = [1,2,3,4], k = 0",
                "Output": "** [0,0,0,0]",
                "Explanation": "** When k is zero, the numbers are replaced by 0."
            },
            {
                "Input": "** code = [2,4,9,3], k = -2",
                "Output": "** [12,5,6,13]",
                "Explanation": "** The decrypted code is [3+9, 2+3, 4+2, 9+4]. Notice that the numbers wrap around again. If k is negative, the sum is of the **previous** numbers."
            }
        ]
    },
    {
        "Title": "Minimum Deletions to Make String Balanced",
        "slug": "minimum-deletions-to-make-string-balanced",
        "description": "You are given a string `s` consisting only of characters `'a'` and `'b'`\u200b\u200b\u200b\u200b.\n\n\nYou can delete any number of characters in `s` to make `s` **balanced**. `s` is **balanced** if there is no pair of indices `(i,j)` such that `i < j` and `s[i] = 'b'` and `s[j]= 'a'`.\n\n\nReturn *the **minimum** number of deletions needed to make* `s` ***balanced***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** s = \"aababbab\"",
                "Output": "** 2",
                "Explanation": "** You can either:\nDelete the characters at 0-indexed positions 2 and 6 (\"aababbab\" -> \"aaabbb\"), or\nDelete the characters at 0-indexed positions 3 and 6 (\"aababbab\" -> \"aabbbb\")."
            },
            {
                "Input": "** s = \"bbaaaaabb\"",
                "Output": "** 2",
                "Explanation": "** The only solution is to delete the first two characters."
            }
        ]
    },
    {
        "Title": "Minimum Jumps to Reach Home",
        "slug": "minimum-jumps-to-reach-home",
        "description": "A certain bug's home is on the x-axis at position `x`. Help them get there from position `0`.\n\n\nThe bug jumps according to the following rules:\n\n\n It can jump exactly `a` positions **forward** (to the right).\n It can jump exactly `b` positions **backward** (to the left).\n It cannot jump backward twice in a row.\n It cannot jump to any `forbidden` positions.\n\n\nThe bug may jump forward **beyond** its home, but it **cannot jump** to positions numbered with **negative** integers.\n\n\nGiven an array of integers `forbidden`, where `forbidden[i]` means that the bug cannot jump to the position `forbidden[i]`, and integers `a`, `b`, and `x`, return *the minimum number of jumps needed for the bug to reach its home*. If there is no possible sequence of jumps that lands the bug on position `x`, return `-1.`\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9",
                "Output": "** 3",
                "Explanation": "** 3 jumps forward (0 -> 3 -> 6 -> 9) will get the bug home."
            },
            {
                "Input": "** forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11",
                "Output": "** -1",
                "Explanation": null
            },
            {
                "Input": "** forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7",
                "Output": "** 2",
                "Explanation": "** One jump forward (0 -> 16) then one jump backward (16 -> 7) will get the bug home."
            }
        ]
    },
    {
        "Title": "Distribute Repeating Integers",
        "slug": "distribute-repeating-integers",
        "description": "You are given an array of `n` integers, `nums`, where there are at most `50` unique values in the array. You are also given an array of `m` customer order quantities, `quantity`, where `quantity[i]` is the amount of integers the `ith` customer ordered. Determine if it is possible to distribute `nums` such that:\n\n\n The `ith` customer gets **exactly** `quantity[i]` integers,\n The integers the `ith` customer gets are **all equal**, and\n Every customer is satisfied.\n\n\nReturn `true` *if it is possible to distribute* `nums` *according to the above conditions*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Backtracking",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4], quantity = [2]",
                "Output": "** false",
                "Explanation": "** The 0th customer cannot be given two different integers."
            },
            {
                "Input": "** nums = [1,2,3,3], quantity = [2]",
                "Output": "** true",
                "Explanation": "** The 0th customer is given [3,3]. The integers [1,2] are not used."
            },
            {
                "Input": "** nums = [1,1,2,2], quantity = [2,2]",
                "Output": "** true",
                "Explanation": "** The 0th customer is given [1,1], and the 1st customer is given [2,2]."
            }
        ]
    },
    {
        "Title": "Determine if Two Strings Are Close",
        "slug": "determine-if-two-strings-are-close",
        "description": "Two strings are considered **close** if you can attain one from the other using the following operations:\n\n\n Operation 1: Swap any two **existing** characters.\n\t+ For example, `abcde -> aecdb`\n Operation 2: Transform **every** occurrence of one **existing** character into another **existing** character, and do the same with the other character.\n\t+ For example, `aacabb -> bbcbaa` (all `a`'s turn into `b`'s, and all `b`'s turn into `a`'s)\n\n\nYou can use the operations on either string as many times as necessary.\n\n\nGiven two strings, `word1` and `word2`, return `true` *if* `word1` *and* `word2` *are **close**, and* `false` *otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Sorting",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** word1 = \"abc\", word2 = \"bca\"",
                "Output": "** true",
                "Explanation": "** You can attain word2 from word1 in 2 operations.\nApply Operation 1: \"abc\" -> \"acb\"\nApply Operation 1: \"acb\" -> \"bca\""
            },
            {
                "Input": "** word1 = \"a\", word2 = \"aa\"",
                "Output": "** false",
                "Explanation": "** It is impossible to attain word2 from word1, or vice versa, in any number of operations."
            },
            {
                "Input": "** word1 = \"cabbba\", word2 = \"abbccc\"",
                "Output": "** true",
                "Explanation": "** You can attain word2 from word1 in 3 operations.\nApply Operation 1: \"cabbba\" -> \"caabbb\"\nApply Operation 2: \"caabbb\" -> \"baaccc\"\nApply Operation 2: \"baaccc\" -> \"abbccc\""
            }
        ]
    },
    {
        "Title": "Minimum Operations to Reduce X to Zero",
        "slug": "minimum-operations-to-reduce-x-to-zero",
        "description": "You are given an integer array `nums` and an integer `x`. In one operation, you can either remove the leftmost or the rightmost element from the array `nums` and subtract its value from `x`. Note that this **modifies** the array for future operations.\n\n\nReturn *the **minimum number** of operations to reduce* `x` *to **exactly*** `0` *if it is possible**, otherwise, return* `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Sliding Window",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [1,1,4,2,3], x = 5",
                "Output": "** 2",
                "Explanation": "** The optimal solution is to remove the last two elements to reduce x to zero."
            },
            {
                "Input": "** nums = [5,6,7,8,9], x = 4",
                "Output": "** -1",
                "Explanation": null
            },
            {
                "Input": "** nums = [3,2,20,1,1,3], x = 10",
                "Output": "** 5",
                "Explanation": "** The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero."
            }
        ]
    },
    {
        "Title": "Maximize Grid Happiness",
        "slug": "maximize-grid-happiness",
        "description": "You are given four integers, `m`, `n`, `introvertsCount`, and `extrovertsCount`. You have an `m x n` grid, and there are two types of people: introverts and extroverts. There are `introvertsCount` introverts and `extrovertsCount` extroverts.\n\n\nYou should decide how many people you want to live in the grid and assign each of them one grid cell. Note that you **do not** have to have all the people living in the grid.\n\n\nThe **happiness** of each person is calculated as follows:\n\n\n Introverts **start** with `120` happiness and **lose** `30` happiness for each neighbor (introvert or extrovert).\n Extroverts **start** with `40` happiness and **gain** `20` happiness for each neighbor (introvert or extrovert).\n\n\nNeighbors live in the directly adjacent cells north, east, south, and west of a person's cell.\n\n\nThe **grid happiness** is the **sum** of each person's happiness. Return *the **maximum possible grid happiness**.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Bit Manipulation",
            "Memoization",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** m = 2, n = 3, introvertsCount = 1, extrovertsCount = 2",
                "Output": "** 240",
                "Explanation": "** Assume the grid is 1-indexed with coordinates (row, column).\nWe can put the introvert in cell (1,1) and put the extroverts in cells (1,3) and (2,3).\n- Introvert at (1,1) happiness: 120 (starting happiness) - (0 * 30) (0 neighbors) = 120\n- Extrovert at (1,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60\n- Extrovert at (2,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60\nThe grid happiness is 120 + 60 + 60 = 240.\nThe above figure shows the grid in this example with each person's happiness. The introvert stays in the light green cell while the extroverts live on the light purple cells."
            }
        ]
    },
    {
        "Title": "Average Time of Process per Machine",
        "slug": "average-time-of-process-per-machine",
        "description": "Table: `Activity`\n\n\n\n```\n\n+----------------+---------+\n| Column Name    | Type    |\n+----------------+---------+\n| machine_id     | int     |\n| process_id     | int     |\n| activity_type  | enum    |\n| timestamp      | float   |\n+----------------+---------+\nThe table shows the user activities for a factory website.\n(machine_id, process_id, activity_type) is the primary key (combination of columns with unique values) of this table.\nmachine_id is the ID of a machine.\nprocess_id is the ID of a process running on the machine with ID machine_id.\nactivity_type is an ENUM (category) of type ('start', 'end').\ntimestamp is a float representing the current time in seconds.\n'start' means the machine starts the process at the given timestamp and 'end' means the machine ends the process at the given timestamp.\nThe 'start' timestamp will always be before the 'end' timestamp for every (machine_id, process_id) pair.\n```\n\n\u00a0\n\n\nThere is a factory website that has several machines each running the **same number of processes**. Write a solution\u00a0to find the **average time** each machine takes to complete a process.\n\n\nThe time to complete a process is the `'end' timestamp` minus the `'start' timestamp`. The average time is calculated by the total time to complete every process on the machine divided by the number of processes that were run.\n\n\nThe resulting table should have the `machine_id` along with the **average time** as `processing_time`, which should be **rounded to 3 decimal places**.\n\n\nReturn the result table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nActivity table:\n+------------+------------+---------------+-----------+\n| machine_id | process_id | activity_type | timestamp |\n+------------+------------+---------------+-----------+\n| 0          | 0          | start         | 0.712     |\n| 0          | 0          | end           | 1.520     |\n| 0          | 1          | start         | 3.140     |\n| 0          | 1          | end           | 4.120     |\n| 1          | 0          | start         | 0.550     |\n| 1          | 0          | end           | 1.550     |\n| 1          | 1          | start         | 0.430     |\n| 1          | 1          | end           | 1.420     |\n| 2          | 0          | start         | 4.100     |\n| 2          | 0          | end           | 4.512     |\n| 2          | 1          | start         | 2.500     |\n| 2          | 1          | end           | 5.000     |\n+------------+------------+---------------+-----------+",
                "Output": "** \n+------------+-----------------+\n| machine_id | processing_time |\n+------------+-----------------+\n| 0          | 0.894           |\n| 1          | 0.995           |\n| 2          | 1.456           |\n+------------+-----------------+",
                "Explanation": "** \nThere are 3 machines running 2 processes each.\nMachine 0's average time is ((1.520 - 0.712) + (4.120 - 3.140)) / 2 = 0.894\nMachine 1's average time is ((1.550 - 0.550) + (1.420 - 0.430)) / 2 = 0.995\nMachine 2's average time is ((4.512 - 4.100) + (5.000 - 2.500)) / 2 = 1.456"
            }
        ]
    },
    {
        "Title": "Check If Two String Arrays are Equivalent",
        "slug": "check-if-two-string-arrays-are-equivalent",
        "description": "Given two string arrays `word1` and `word2`, return`true` *if the two arrays **represent** the same string, and* `false` *otherwise.\n\n\nA string is **represented** by an array if the array elements concatenated **in order** forms the string.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "examples": [
            {
                "Input": "** word1 = [\"ab\", \"c\"], word2 = [\"a\", \"bc\"]",
                "Output": "** true",
                "Explanation": "**\nword1 represents string \"ab\" + \"c\" -> \"abc\"\nword2 represents string \"a\" + \"bc\" -> \"abc\"\nThe strings are the same, so return true."
            },
            {
                "Input": "** word1 = [\"a\", \"cb\"], word2 = [\"ab\", \"c\"]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** word1  = [\"abc\", \"d\", \"defg\"], word2 = [\"abcddefg\"]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Smallest String With A Given Numeric Value",
        "slug": "smallest-string-with-a-given-numeric-value",
        "description": "The **numeric value** of a **lowercase character** is defined as its position `(1-indexed)` in the alphabet, so the numeric value of `a` is `1`, the numeric value of `b` is `2`, the numeric value of `c` is `3`, and so on.\n\n\nThe **numeric value** of a **string** consisting of lowercase characters is defined as the sum of its characters' numeric values. For example, the numeric value of the string `\"abe\"` is equal to `1 + 2 + 5 = 8`.\n\n\nYou are given two integers `n` and `k`. Return *the **lexicographically smallest string** with **length** equal to `n` and **numeric value** equal to `k`.\n\n\nNote that a string `x` is lexicographically smaller than string `y` if `x` comes before `y` in dictionary order, that is, either `x` is a prefix of `y`, or if `i` is the first position such that `x[i] != y[i]`, then `x[i]` comes before `y[i]` in alphabetic order.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** n = 3, k = 27",
                "Output": "** \"aay\"",
                "Explanation": "** The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3."
            },
            {
                "Input": "** n = 5, k = 73",
                "Output": "** \"aaszz\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Ways to Make a Fair Array",
        "slug": "ways-to-make-a-fair-array",
        "description": "You are given an integer array\u00a0`nums`. You can choose **exactly one** index (**0-indexed**) and remove the element. Notice that the index of the elements may change after the removal.\n\n\nFor example, if `nums = [6,1,7,4,1]`:\n\n\n Choosing to remove index `1` results in `nums = [6,7,4,1]`.\n Choosing to remove index `2` results in `nums = [6,1,4,1]`.\n Choosing to remove index `4` results in `nums = [6,1,7,4]`.\n\n\nAn array is **fair** if the sum of the odd-indexed values equals the sum of the even-indexed values.\n\n\nReturn the ***number** of indices that you could choose such that after the removal,* `nums`*is **fair**.* \n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [2,1,6,4]",
                "Output": "** 1",
                "Explanation": "**\nRemove index 0: [1,6,4] -> Even sum: 1 + 4 = 5. Odd sum: 6. Not fair.\nRemove index 1: [2,6,4] -> Even sum: 2 + 4 = 6. Odd sum: 6. Fair.\nRemove index 2: [2,1,4] -> Even sum: 2 + 4 = 6. Odd sum: 1. Not fair.\nRemove index 3: [2,1,6] -> Even sum: 2 + 6 = 8. Odd sum: 1. Not fair.\nThere is 1 index that you can remove to make nums fair."
            },
            {
                "Input": "** nums = [1,1,1]",
                "Output": "** 3",
                "Explanation": "**\u00a0You can remove any index and the remaining array is fair."
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 0",
                "Explanation": "**\u00a0You cannot make a fair array after removing any index."
            }
        ]
    },
    {
        "Title": "Minimum Initial Energy to Finish Tasks",
        "slug": "minimum-initial-energy-to-finish-tasks",
        "description": "You are given an array `tasks` where `tasks[i] = [actuali, minimumi]`:\n\n\n `actuali` is the actual amount of energy you **spend to finish** the `ith` task.\n `minimumi` is the minimum amount of energy you **require to begin** the `ith` task.\n\n\nFor example, if the task is `[10, 12]` and your current energy is `11`, you cannot start this task. However, if your current energy is `13`, you can complete this task, and your energy will be `3` after finishing it.\n\n\nYou can finish the tasks in **any order** you like.\n\n\nReturn *the **minimum** initial amount of energy you will need* *to finish all the tasks*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** tasks = [[1,2],[2,4],[4,8]]",
                "Output": "** 8",
                "Explanation": "**\nStarting with 8 energy, we finish the tasks in the following order:\n    - 3rd task. Now energy = 8 - 4 = 4.\n    - 2nd task. Now energy = 4 - 2 = 2.\n    - 1st task. Now energy = 2 - 1 = 1.\nNotice that even though we have leftover energy, starting with 7 energy does not work because we cannot do the 3rd task."
            },
            {
                "Input": "** tasks = [[1,3],[2,4],[10,11],[10,12],[8,9]]",
                "Output": "** 32",
                "Explanation": "**\nStarting with 32 energy, we finish the tasks in the following order:\n    - 1st task. Now energy = 32 - 1 = 31.\n    - 2nd task. Now energy = 31 - 2 = 29.\n    - 3rd task. Now energy = 29 - 10 = 19.\n    - 4th task. Now energy = 19 - 10 = 9.\n    - 5th task. Now energy = 9 - 8 = 1."
            },
            {
                "Input": "** tasks = [[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]",
                "Output": "** 27",
                "Explanation": "**\nStarting with 27 energy, we finish the tasks in the following order:\n    - 5th task. Now energy = 27 - 5 = 22.\n    - 2nd task. Now energy = 22 - 2 = 20.\n    - 3rd task. Now energy = 20 - 3 = 17.\n    - 1st task. Now energy = 17 - 1 = 16.\n    - 4th task. Now energy = 16 - 4 = 12.\n    - 6th task. Now energy = 12 - 6 = 6."
            }
        ]
    },
    {
        "Title": "Fix Names in a Table",
        "slug": "fix-names-in-a-table",
        "description": "Table: `Users`\n\n\n\n```\n\n+----------------+---------+\n| Column Name    | Type    |\n+----------------+---------+\n| user_id        | int     |\n| name           | varchar |\n+----------------+---------+\nuser_id is the primary key (column with unique values) for this table.\nThis table contains the ID and the name of the user. The name consists of only lowercase and uppercase characters.\n\n```\n\n\u00a0\n\n\nWrite a solution to fix the names so that only the first character is uppercase and the rest are lowercase.\n\n\nReturn the result table ordered by `user_id`.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nUsers table:\n+---------+-------+\n| user_id | name  |\n+---------+-------+\n| 1       | aLice |\n| 2       | bOB   |\n+---------+-------+",
                "Output": "** \n+---------+-------+\n| user_id | name  |\n+---------+-------+\n| 1       | Alice |\n| 2       | Bob   |\n+---------+-------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Repeating Substring",
        "slug": "maximum-repeating-substring",
        "description": "For a string `sequence`, a string `word` is **`k`-repeating** if `word` concatenated `k` times is a substring of `sequence`. The `word`'s **maximum `k`-repeating value** is the highest value `k` where `word` is `k`-repeating in `sequence`. If `word` is not a substring of `sequence`, `word`'s maximum `k`-repeating value is `0`.\n\n\nGiven strings `sequence` and `word`, return *the **maximum `k`-repeating value** of `word` in `sequence`*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Dynamic Programming",
            "String Matching"
        ],
        "examples": [
            {
                "Input": "** sequence = \"ababc\", word = \"ab\"",
                "Output": "** 2",
                "Explanation": "** \"abab\" is a substring in \"ababc\"."
            },
            {
                "Input": "** sequence = \"ababc\", word = \"ba\"",
                "Output": "** 1",
                "Explanation": "** \"ba\" is a substring in \"ababc\". \"baba\" is not a substring in \"ababc\"."
            },
            {
                "Input": "** sequence = \"ababc\", word = \"ac\"",
                "Output": "** 0",
                "Explanation": "** \"ac\" is not a substring in \"ababc\"."
            }
        ]
    },
    {
        "Title": "Merge In Between Linked Lists",
        "slug": "merge-in-between-linked-lists",
        "description": "You are given two linked lists: `list1` and `list2` of sizes `n` and `m` respectively.\n\n\nRemove `list1`'s nodes from the `ath` node to the `bth` node, and put `list2` in their place.\n\n\nThe blue edges and nodes in the following figure indicate the result:\n\n\n![](https://assets.leetcode.com/uploads/2020/11/05/fig1.png)\nBuild the result list and return its head.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List"
        ],
        "examples": [
            {
                "Input": "** list1 = [10,1,13,6,9,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]",
                "Output": "** [10,1,13,1000000,1000001,1000002,5]",
                "Explanation": "** We remove the nodes 3 and 4 and put the entire list2 in their place. The blue edges and nodes in the above figure indicate the result."
            },
            {
                "Input": "** list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004]",
                "Output": "** [0,1,1000000,1000001,1000002,1000003,1000004,6]",
                "Explanation": "** The blue edges and nodes in the above figure indicate the result."
            }
        ]
    },
    {
        "Title": "Design Front Middle Back Queue",
        "slug": "design-front-middle-back-queue",
        "description": "Design a queue that supports `push` and `pop` operations in the front, middle, and back.\n\n\nImplement the `FrontMiddleBack` class:\n\n\n `FrontMiddleBack()` Initializes the queue.\n `void pushFront(int val)` Adds `val` to the **front** of the queue.\n `void pushMiddle(int val)` Adds `val` to the **middle** of the queue.\n `void pushBack(int val)` Adds `val` to the **back** of the queue.\n `int popFront()` Removes the **front** element of the queue and returns it. If the queue is empty, return `-1`.\n `int popMiddle()` Removes the **middle** element of the queue and returns it. If the queue is empty, return `-1`.\n `int popBack()` Removes the **back** element of the queue and returns it. If the queue is empty, return `-1`.\n\n\nNotice** that when there are **two** middle position choices, the operation is performed on the **frontmost** middle position choice. For example:\n\n\n Pushing `6` into the middle of `[1, 2, 3, 4, 5]` results in `[1, 2, 6, 3, 4, 5]`.\n Popping the middle from `[1, 2, 3, 4, 5, 6]` returns `3` and results in `[1, 2, 4, 5, 6]`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Linked List",
            "Design",
            "Queue",
            "Data Stream"
        ],
        "examples": [
            {
                "Input": "**\n[\"FrontMiddleBackQueue\", \"pushFront\", \"pushBack\", \"pushMiddle\", \"pushMiddle\", \"popFront\", \"popMiddle\", \"popMiddle\", \"popBack\", \"popFront\"]\n[[], [1], [2], [3], [4], [], [], [], [], []]",
                "Output": "**\n[null, null, null, null, null, 1, 3, 4, 2, -1]",
                "Explanation": "**\nFrontMiddleBackQueue q = new FrontMiddleBackQueue();\nq.pushFront(1);   // [1]\nq.pushBack(2);    // [1, 2]\nq.pushMiddle(3);  // [1, 3, 2]\nq.pushMiddle(4);  // [1, 4, 3, 2]\nq.popFront();     // return 1 -> [4, 3, 2]\nq.popMiddle();    // return 3 -> [4, 2]\nq.popMiddle();    // return 4 -> [2]\nq.popBack();      // return 2 -> []\nq.popFront();     // return -1 -> [] (The queue is empty)"
            }
        ]
    },
    {
        "Title": "Minimum Number of Removals to Make Mountain Array",
        "slug": "minimum-number-of-removals-to-make-mountain-array",
        "description": "You may recall that an array `arr` is a **mountain array** if and only if:\n\n\n `arr.length >= 3`\n There exists some index `i` (**0-indexed**) with `0 < i < arr.length - 1` such that:\n\t+ `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n\t+ `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\n\nGiven an integer array `nums`\u200b\u200b\u200b, return *the **minimum** number of elements to remove to make* `nums*\u200b\u200b\u200b*`*a **mountain array**.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Dynamic Programming",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,1]",
                "Output": "** 0",
                "Explanation": "** The array itself is a mountain array so we do not need to remove any elements."
            },
            {
                "Input": "** nums = [2,1,1,5,6,2,3,1]",
                "Output": "** 3",
                "Explanation": "** One solution is to remove the elements at indices 0, 1, and 5, making the array nums = [1,5,6,3,1]."
            }
        ]
    },
    {
        "Title": "Richest Customer Wealth",
        "slug": "richest-customer-wealth",
        "description": "You are given an `m x n` integer grid `accounts` where `accounts[i][j]` is the amount of money the `i\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b` customer has in the `j\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200bth`\u200b\u200b\u200b\u200b bank. Return *the **wealth** that the richest customer has.\n\n\nA customer's **wealth** is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum **wealth**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** accounts = [[1,2,3],[3,2,1]]",
                "Output": "** 6",
                "Explanation": "**\n1st customer has wealth = 1 + 2 + 3 = 6\n2nd customer has wealth = 3 + 2 + 1 = 6\nBoth customers are considered the richest with a wealth of 6 each, so return 6."
            },
            {
                "Input": "** accounts = [[1,5],[7,3],[3,5]]",
                "Output": "** 10",
                "Explanation": "1st customer has wealth = 6\n2nd customer has wealth = 10 \n3rd customer has wealth = 8\nThe 2nd customer is the richest with a wealth of 10."
            },
            {
                "Input": "** accounts = [[2,8,7],[7,1,3],[1,9,5]]",
                "Output": "** 17",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find the Most Competitive Subsequence",
        "slug": "find-the-most-competitive-subsequence",
        "description": "Given an integer array `nums` and a positive integer `k`, return *the most **competitive** subsequence of* `nums` *of size* `k`.\n\n\nAn array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array.\n\n\nWe define that a subsequence `a` is more **competitive** than a subsequence `b` (of the same length) if in the first position where `a` and `b` differ, subsequence `a` has a number **less** than the corresponding number in `b`. For example, `[1,3,4]` is more competitive than `[1,3,5]` because the first position they differ is at the final number, and `4` is less than `5`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Stack",
            "Greedy",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** nums = [3,5,2,6], k = 2",
                "Output": "** [2,6]",
                "Explanation": "** Among the set of every possible subsequence: {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}, [2,6] is the most competitive."
            },
            {
                "Input": "** nums = [2,4,3,3,5,4,9,6], k = 4",
                "Output": "** [2,3,3,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Moves to Make Array Complementary",
        "slug": "minimum-moves-to-make-array-complementary",
        "description": "You are given an integer array `nums` of **even** length `n` and an integer `limit`. In one move, you can replace any integer from `nums` with another integer between `1` and `limit`, inclusive.\n\n\nThe array `nums` is **complementary** if for all indices `i` (**0-indexed**), `nums[i] + nums[n - 1 - i]` equals the same number. For example, the array `[1,2,3,4]` is complementary because for all indices `i`, `nums[i] + nums[n - 1 - i] = 5`.\n\n\nReturn the ***minimum** number of moves required to make* `nums` ***complementary***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,4,3], limit = 4",
                "Output": "** 1",
                "Explanation": "** In 1 move, you can change nums to [1,2,2,3] (underlined elements are changed).\nnums[0] + nums[3] = 1 + 3 = 4.\nnums[1] + nums[2] = 2 + 2 = 4.\nnums[2] + nums[1] = 2 + 2 = 4.\nnums[3] + nums[0] = 3 + 1 = 4.\nTherefore, nums[i] + nums[n-1-i] = 4 for every i, so nums is complementary."
            },
            {
                "Input": "** nums = [1,2,2,1], limit = 2",
                "Output": "** 2",
                "Explanation": "** In 2 moves, you can change nums to [2,2,2,2]. You cannot change any number to 3 since 3 > limit."
            },
            {
                "Input": "** nums = [1,2,1,2], limit = 2",
                "Output": "** 0",
                "Explanation": "** nums is already complementary."
            }
        ]
    },
    {
        "Title": "Minimize Deviation in Array",
        "slug": "minimize-deviation-in-array",
        "description": "You are given an array `nums` of `n` positive integers.\n\n\nYou can perform two types of operations on any element of the array any number of times:\n\n\n If the element is **even**, **divide** it by `2`.\n\t+ For example, if the array is `[1,2,3,4]`, then you can do this operation on the last element, and the array will be `[1,2,3,2].`\n If the element is **odd**, **multiply** it by `2`.\n\t+ For example, if the array is `[1,2,3,4]`, then you can do this operation on the first element, and the array will be `[2,2,3,4].`\n\n\nThe **deviation** of the array is the **maximum difference** between any two elements in the array.\n\n\nReturn *the **minimum deviation** the array can have after performing some number of operations.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Heap (Priority Queue)",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 1",
                "Explanation": "** You can transform the array to [1,2,3,2], then to [2,2,3,2], then the deviation will be 3 - 2 = 1."
            },
            {
                "Input": "** nums = [4,1,5,20,3]",
                "Output": "** 3",
                "Explanation": "** You can transform the array after two operations to [4,2,5,5,3], then the deviation will be 5 - 2 = 3."
            },
            {
                "Input": "** nums = [2,10,8]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Goal Parser Interpretation",
        "slug": "goal-parser-interpretation",
        "description": "You own a **Goal Parser** that can interpret a string `command`. The `command` consists of an alphabet of `\"G\"`, `\"()\"` and/or `\"(al)\"` in some order. The Goal Parser will interpret `\"G\"` as the string `\"G\"`, `\"()\"` as the string `\"o\"`, and `\"(al)\"` as the string `\"al\"`. The interpreted strings are then concatenated in the original order.\n\n\nGiven the string `command`, return *the **Goal Parser**'s interpretation of* `command`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** command = \"G()(al)\"",
                "Output": "** \"Goal\"",
                "Explanation": "**\u00a0The Goal Parser interprets the command as follows:\nG -> G\n() -> o\n(al) -> al\nThe final concatenated result is \"Goal\"."
            },
            {
                "Input": "** command = \"G()()()()(al)\"",
                "Output": "** \"Gooooal\"",
                "Explanation": null
            },
            {
                "Input": "** command = \"(al)G(al)()()G\"",
                "Output": "** \"alGalooG\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Max Number of K-Sum Pairs",
        "slug": "max-number-of-k-sum-pairs",
        "description": "You are given an integer array `nums` and an integer `k`.\n\n\nIn one operation, you can pick two numbers from the array whose sum equals `k` and remove them from the array.\n\n\nReturn *the maximum number of operations you can perform on the array*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4], k = 5",
                "Output": "** 2",
                "Explanation": "** Starting with nums = [1,2,3,4]:\n- Remove numbers 1 and 4, then nums = [2,3]\n- Remove numbers 2 and 3, then nums = []\nThere are no more pairs that sum up to 5, hence a total of 2 operations."
            },
            {
                "Input": "** nums = [3,1,3,4,3], k = 6",
                "Output": "** 1",
                "Explanation": "** Starting with nums = [3,1,3,4,3]:\n- Remove the first two 3's, then nums = [1,4,3]\nThere are no more pairs that sum up to 6, hence a total of 1 operation."
            }
        ]
    },
    {
        "Title": "Concatenation of Consecutive Binary Numbers",
        "slug": "concatenation-of-consecutive-binary-numbers",
        "description": "Given an integer `n`, return *the **decimal value** of the binary string formed by concatenating the binary representations of* `1` *to* `n` *in order, **modulo*** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Bit Manipulation",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** 1",
                "Explanation": "** \"1\" in binary corresponds to the decimal value 1."
            },
            {
                "Input": "** n = 3",
                "Output": "** 27",
                "Explanation": "** In binary, 1, 2, and 3 corresponds to \"1\", \"10\", and \"11\".\nAfter concatenating them, we have \"11011\", which corresponds to the decimal value 27."
            },
            {
                "Input": "** n = 12",
                "Output": "** 505379714",
                "Explanation": "The concatenation results in \"1101110010111011110001001101010111100\".\nThe decimal value of that is 118505380540.\nAfter modulo 109 + 7, the result is 505379714."
            }
        ]
    },
    {
        "Title": "Minimum Incompatibility",
        "slug": "minimum-incompatibility",
        "description": "You are given an integer array `nums`\u200b\u200b\u200b and an integer `k`. You are asked to distribute this array into `k` subsets of **equal size** such that there are no two equal elements in the same subset.\n\n\nA subset's **incompatibility** is the difference between the maximum and minimum elements in that array.\n\n\nReturn *the **minimum possible sum of incompatibilities** of the* `k` *subsets after distributing the array optimally, or return* `-1` *if it is not possible.\n\n\nA subset is a group integers that appear in the array with no particular order.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,1,4], k = 2",
                "Output": "** 4",
                "Explanation": "** The optimal distribution of subsets is [1,2] and [1,4].\nThe incompatibility is (2-1) + (4-1) = 4.\nNote that [1,1] and [2,4] would result in a smaller sum, but the first subset contains 2 equal elements."
            },
            {
                "Input": "** nums = [6,3,8,1,3,1,2,2], k = 4",
                "Output": "** 6",
                "Explanation": "** The optimal distribution of subsets is [1,2], [2,3], [6,8], and [1,3].\nThe incompatibility is (2-1) + (3-2) + (8-6) + (3-1) = 6."
            },
            {
                "Input": "** nums = [5,3,3,6,3,3], k = 3",
                "Output": "** -1",
                "Explanation": "** It is impossible to distribute nums into 3 subsets where no two elements are equal in the same subset."
            }
        ]
    },
    {
        "Title": "Invalid Tweets",
        "slug": "invalid-tweets",
        "description": "Table: `Tweets`\n\n\n\n```\n\n+----------------+---------+\n| Column Name    | Type    |\n+----------------+---------+\n| tweet_id       | int     |\n| content        | varchar |\n+----------------+---------+\ntweet_id is the primary key (column with unique values) for this table.\nThis table contains all the tweets in a social media app.\n\n```\n\n\u00a0\n\n\nWrite a solution to find the IDs of the invalid tweets. The tweet is invalid if the number of characters used in the content of the tweet is **strictly greater** than `15`.\n\n\nReturn the result table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nTweets table:\n+----------+----------------------------------+\n| tweet_id | content                          |\n+----------+----------------------------------+\n| 1        | Vote for Biden                   |\n| 2        | Let us make America great again! |\n+----------+----------------------------------+",
                "Output": "** \n+----------+\n| tweet_id |\n+----------+\n| 2        |\n+----------+",
                "Explanation": "** \nTweet 1 has length = 14. It is a valid tweet.\nTweet 2 has length = 32. It is an invalid tweet."
            }
        ]
    },
    {
        "Title": "Count the Number of Consistent Strings",
        "slug": "count-the-number-of-consistent-strings",
        "description": "You are given a string `allowed` consisting of **distinct** characters and an array of strings `words`. A string is **consistent** if all characters in the string appear in the string `allowed`.\n\n\nReturn *the number of **consistent** strings in the array* `words`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** allowed = \"ab\", words = [\"ad\",\"bd\",\"aaab\",\"baa\",\"badab\"]",
                "Output": "** 2",
                "Explanation": "** Strings \"aaab\" and \"baa\" are consistent since they only contain characters 'a' and 'b'."
            },
            {
                "Input": "** allowed = \"abc\", words = [\"a\",\"b\",\"c\",\"ab\",\"ac\",\"bc\",\"abc\"]",
                "Output": "** 7",
                "Explanation": "** All strings are consistent."
            },
            {
                "Input": "** allowed = \"cad\", words = [\"cc\",\"acd\",\"b\",\"ba\",\"bac\",\"bad\",\"ac\",\"d\"]",
                "Output": "** 4",
                "Explanation": "** Strings \"cc\", \"acd\", \"ac\", and \"d\" are consistent."
            }
        ]
    },
    {
        "Title": "Sum of Absolute Differences in a Sorted Array",
        "slug": "sum-of-absolute-differences-in-a-sorted-array",
        "description": "You are given an integer array `nums` sorted in **non-decreasing** order.\n\n\nBuild and return *an integer array* `result` *with the same length as* `nums` *such that* `result[i]` *is equal to the **summation of absolute differences** between* `nums[i]` *and all the other elements in the array.\n\n\nIn other words, `result[i]` is equal to `sum(|nums[i]-nums[j]|)` where `0 <= j < nums.length` and `j != i` (**0-indexed**).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [2,3,5]",
                "Output": "** [4,3,5]",
                "Explanation": "** Assuming the arrays are 0-indexed, then\nresult[0] = |2-2| + |2-3| + |2-5| = 0 + 1 + 3 = 4,\nresult[1] = |3-2| + |3-3| + |3-5| = 1 + 0 + 2 = 3,\nresult[2] = |5-2| + |5-3| + |5-5| = 3 + 2 + 0 = 5."
            },
            {
                "Input": "** nums = [1,4,6,8,10]",
                "Output": "** [24,15,13,15,21]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Stone Game VI",
        "slug": "stone-game-vi",
        "description": "Alice and Bob take turns playing a game, with Alice starting first.\n\n\nThere are `n` stones in a pile. On each player's turn, they can **remove** a stone from the pile and receive points based on the stone's value. Alice and Bob may **value the stones differently**.\n\n\nYou are given two integer arrays of length `n`, `aliceValues` and `bobValues`. Each `aliceValues[i]` and `bobValues[i]` represents how Alice and Bob, respectively, value the `ith` stone.\n\n\nThe winner is the person with the most points after all the stones are chosen. If both players have the same amount of points, the game results in a draw. Both players will play **optimally**.\u00a0Both players know the other's values.\n\n\nDetermine the result of the game, and:\n\n\n If Alice wins, return `1`.\n If Bob wins, return `-1`.\n If the game results in a draw, return `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)",
            "Game Theory"
        ],
        "examples": [
            {
                "Input": "** aliceValues = [1,3], bobValues = [2,1]",
                "Output": "** 1",
                "Explanation": "**\nIf Alice takes stone 1 (0-indexed) first, Alice will receive 3 points.\nBob can only choose stone 0, and will only receive 2 points.\nAlice wins."
            },
            {
                "Input": "** aliceValues = [1,2], bobValues = [3,1]",
                "Output": "** 0",
                "Explanation": "**\nIf Alice takes stone 0, and Bob takes stone 1, they will both have 1 point.\nDraw."
            },
            {
                "Input": "** aliceValues = [2,4,3], bobValues = [1,6,7]",
                "Output": "** -1",
                "Explanation": "**\nRegardless of how Alice plays, Bob will be able to have more points than Alice.\nFor example, if Alice takes stone 1, Bob can take stone 2, and Alice takes stone 0, Alice will have 6 points to Bob's 7.\nBob wins."
            }
        ]
    },
    {
        "Title": "Delivering Boxes from Storage to Ports",
        "slug": "delivering-boxes-from-storage-to-ports",
        "description": "You have the task of delivering some boxes from storage to their ports using only one ship. However, this ship has a **limit** on the **number of boxes** and the **total weight** that it can carry.\n\n\nYou are given an array `boxes`, where `boxes[i] = [ports\u200b\u200bi\u200b, weighti]`, and three integers `portsCount`, `maxBoxes`, and `maxWeight`.\n\n\n `ports\u200b\u200bi` is the port where you need to deliver the `ith` box and `weightsi` is the weight of the `ith` box.\n `portsCount` is the number of ports.\n `maxBoxes` and `maxWeight` are the respective box and weight limits of the ship.\n\n\nThe boxes need to be delivered **in the order they are given**. The ship will follow these steps:\n\n\n The ship will take some number of boxes from the `boxes` queue, not violating the `maxBoxes` and `maxWeight` constraints.\n For each loaded box **in order**, the ship will make a **trip** to the port the box needs to be delivered to and deliver it. If the ship is already at the correct port, no **trip** is needed, and the box can immediately be delivered.\n The ship then makes a return **trip** to storage to take more boxes from the queue.\n\n\nThe ship must end at storage after all the boxes have been delivered.\n\n\nReturn *the **minimum** number of **trips** the ship needs to make to deliver all boxes to their respective ports.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Segment Tree",
            "Queue",
            "Heap (Priority Queue)",
            "Prefix Sum",
            "Monotonic Queue"
        ],
        "examples": [
            {
                "Input": "** boxes = [[1,1],[2,1],[1,1]], portsCount = 2, maxBoxes = 3, maxWeight = 3",
                "Output": "** 4",
                "Explanation": "** The optimal strategy is as follows: \n- The ship takes all the boxes in the queue, goes to port 1, then port 2, then port 1 again, then returns to storage. 4 trips.\nSo the total number of trips is 4.\nNote that the first and third boxes cannot be delivered together because the boxes need to be delivered in order (i.e. the second box needs to be delivered at port 2 before the third box)."
            },
            {
                "Input": "** boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portsCount = 3, maxBoxes = 3, maxWeight = 6",
                "Output": "** 6",
                "Explanation": "** The optimal strategy is as follows: \n- The ship takes the first box, goes to port 1, then returns to storage. 2 trips.\n- The ship takes the second, third and fourth boxes, goes to port 3, then returns to storage. 2 trips.\n- The ship takes the fifth box, goes to port 2, then returns to storage. 2 trips.\nSo the total number of trips is 2 + 2 + 2 = 6."
            },
            {
                "Input": "** boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portsCount = 3, maxBoxes = 6, maxWeight = 7",
                "Output": "** 6",
                "Explanation": "** The optimal strategy is as follows:\n- The ship takes the first and second boxes, goes to port 1, then returns to storage. 2 trips.\n- The ship takes the third and fourth boxes, goes to port 2, then returns to storage. 2 trips.\n- The ship takes the fifth and sixth boxes, goes to port 3, then returns to storage. 2 trips.\nSo the total number of trips is 2 + 2 + 2 = 6."
            }
        ]
    },
    {
        "Title": "Count of Matches in Tournament",
        "slug": "count-of-matches-in-tournament",
        "description": "You are given an integer `n`, the number of teams in a tournament that has strange rules:\n\n\n If the current number of teams is **even**, each team gets paired with another team. A total of `n / 2` matches are played, and `n / 2` teams advance to the next round.\n If the current number of teams is **odd**, one team randomly advances in the tournament, and the rest gets paired. A total of `(n - 1) / 2` matches are played, and `(n - 1) / 2 + 1` teams advance to the next round.\n\n\nReturn *the number of matches played in the tournament until a winner is decided.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** n = 7",
                "Output": "** 6",
                "Explanation": "** Details of the tournament: \n- 1st Round: Teams = 7, Matches = 3, and 4 teams advance.\n- 2nd Round: Teams = 4, Matches = 2, and 2 teams advance.\n- 3rd Round: Teams = 2, Matches = 1, and 1 team is declared the winner.\nTotal number of matches = 3 + 2 + 1 = 6."
            },
            {
                "Input": "** n = 14",
                "Output": "** 13",
                "Explanation": "** Details of the tournament:\n- 1st Round: Teams = 14, Matches = 7, and 7 teams advance.\n- 2nd Round: Teams = 7, Matches = 3, and 4 teams advance.\n- 3rd Round: Teams = 4, Matches = 2, and 2 teams advance.\n- 4th Round: Teams = 2, Matches = 1, and 1 team is declared the winner.\nTotal number of matches = 7 + 3 + 2 + 1 = 13."
            }
        ]
    },
    {
        "Title": "Partitioning Into Minimum Number Of Deci-Binary Numbers",
        "slug": "partitioning-into-minimum-number-of-deci-binary-numbers",
        "description": "A decimal number is called **deci-binary** if each of its digits is either `0` or `1` without any leading zeros. For example, `101` and `1100` are **deci-binary**, while `112` and `3001` are not.\n\n\nGiven a string `n` that represents a positive decimal integer, return *the **minimum** number of positive **deci-binary** numbers needed so that they sum up to* `n`*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** n = \"32\"",
                "Output": "** 3",
                "Explanation": "** 10 + 11 + 11 = 32"
            },
            {
                "Input": "** n = \"82734\"",
                "Output": "** 8",
                "Explanation": null
            },
            {
                "Input": "** n = \"27346209830709182346\"",
                "Output": "** 9",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Stone Game VII",
        "slug": "stone-game-vii",
        "description": "Alice and Bob take turns playing a game, with **Alice starting first**.\n\n\nThere are `n` stones arranged in a row. On each player's turn, they can **remove** either the leftmost stone or the rightmost stone from the row and receive points equal to the **sum** of the remaining stones' values in the row. The winner is the one with the higher score when there are no stones left to remove.\n\n\nBob found that he will always lose this game (poor Bob, he always loses), so he decided to **minimize the score's difference**. Alice's goal is to **maximize the difference** in the score.\n\n\nGiven an array of integers `stones` where `stones[i]` represents the value of the `ith` stone **from the left**, return *the **difference** in Alice and Bob's score if they both play **optimally**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Game Theory"
        ],
        "examples": [
            {
                "Input": "** stones = [5,3,1,4,2]",
                "Output": "** 6",
                "Explanation": "** \n- Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob = 0, stones = [5,3,1,4].\n- Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8, stones = [3,1,4].\n- Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, stones = [1,4].\n- Bob removes 1 and gets 4 points. Alice = 18, Bob = 12, stones = [4].\n- Alice removes 4 and gets 0 points. Alice = 18, Bob = 12, stones = [].\nThe score difference is 18 - 12 = 6."
            },
            {
                "Input": "** stones = [7,90,5,1,100,10,10,2]",
                "Output": "** 122",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Height by Stacking Cuboids ",
        "slug": "maximum-height-by-stacking-cuboids",
        "description": "Given `n` `cuboids` where the dimensions of the `ith` cuboid is `cuboids[i] = [widthi, lengthi, heighti]` (**0-indexed**). Choose a **subset** of `cuboids` and place them on each other.\n\n\nYou can place cuboid `i` on cuboid `j` if `widthi <= widthj` and `lengthi <= lengthj` and `heighti <= heightj`. You can rearrange any cuboid's dimensions by rotating it to put it on another cuboid.\n\n\nReturn *the **maximum height** of the stacked* `cuboids`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** cuboids = [[38,25,45],[76,35,3]]",
                "Output": "** 76",
                "Explanation": "**\nYou can't place any of the cuboids on the other.\nWe choose cuboid 1 and rotate it so that the 35x3 side is facing down and its height is 76."
            },
            {
                "Input": "** cuboids = [[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]]",
                "Output": "** 102",
                "Explanation": "**\nAfter rearranging the cuboids, you can see that all cuboids have the same dimension.\nYou can place the 11x7 side down on all cuboids so their heights are 17.\nThe maximum height of stacked cuboids is 6 * 17 = 102."
            }
        ]
    },
    {
        "Title": "Daily Leads and Partners",
        "slug": "daily-leads-and-partners",
        "description": "Table: `DailySales`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| date_id     | date    |\n| make_name   | varchar |\n| lead_id     | int     |\n| partner_id  | int     |\n+-------------+---------+\nThere is no primary key (column with unique values) for this table. It may contain duplicates.\nThis table contains the date and the name of the product sold and the IDs of the lead and partner it was sold to.\nThe name consists of only lowercase English letters.\n\n```\n\n\u00a0\n\n\nFor each `date_id` and `make_name`, find the number of **distinct** `lead_id`'s and **distinct** `partner_id`'s.\n\n\nReturn the result table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nDailySales table:\n+-----------+-----------+---------+------------+\n| date_id   | make_name | lead_id | partner_id |\n+-----------+-----------+---------+------------+\n| 2020-12-8 | toyota    | 0       | 1          |\n| 2020-12-8 | toyota    | 1       | 0          |\n| 2020-12-8 | toyota    | 1       | 2          |\n| 2020-12-7 | toyota    | 0       | 2          |\n| 2020-12-7 | toyota    | 0       | 1          |\n| 2020-12-8 | honda     | 1       | 2          |\n| 2020-12-8 | honda     | 2       | 1          |\n| 2020-12-7 | honda     | 0       | 1          |\n| 2020-12-7 | honda     | 1       | 2          |\n| 2020-12-7 | honda     | 2       | 1          |\n+-----------+-----------+---------+------------+",
                "Output": "** \n+-----------+-----------+--------------+-----------------+\n| date_id   | make_name | unique_leads | unique_partners |\n+-----------+-----------+--------------+-----------------+\n| 2020-12-8 | toyota    | 2            | 3               |\n| 2020-12-7 | toyota    | 1            | 2               |\n| 2020-12-8 | honda     | 2            | 2               |\n| 2020-12-7 | honda     | 3            | 2               |\n+-----------+-----------+--------------+-----------------+",
                "Explanation": "** \nFor 2020-12-8, toyota gets leads = [0, 1] and partners = [0, 1, 2] while honda gets leads = [1, 2] and partners = [1, 2].\nFor 2020-12-7, toyota gets leads = [0] and partners = [1, 2] while honda gets leads = [0, 1, 2] and partners = [1, 2]."
            }
        ]
    },
    {
        "Title": "Reformat Phone Number",
        "slug": "reformat-phone-number",
        "description": "You are given a phone number as a string `number`. `number` consists of digits, spaces `' '`, and/or dashes `'-'`.\n\n\nYou would like to reformat the phone number in a certain manner. Firstly, **remove** all spaces and dashes. Then, **group** the digits from left to right into blocks of length 3 **until** there are 4 or fewer digits. The final digits are then grouped as follows:\n\n\n 2 digits: A single block of length 2.\n 3 digits: A single block of length 3.\n 4 digits: Two blocks of length 2 each.\n\n\nThe blocks are then joined by dashes. Notice that the reformatting process should **never** produce any blocks of length 1 and produce **at most** two blocks of length 2.\n\n\nReturn *the phone number after formatting.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** number = \"1-23-45 6\"",
                "Output": "** \"123-456\"",
                "Explanation": "** The digits are \"123456\".\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is \"123\".\nStep 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is \"456\".\nJoining the blocks gives \"123-456\"."
            },
            {
                "Input": "** number = \"123 4-567\"",
                "Output": "** \"123-45-67\"",
                "Explanation": "** The digits are \"1234567\".\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is \"123\".\nStep 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are \"45\" and \"67\".\nJoining the blocks gives \"123-45-67\"."
            },
            {
                "Input": "** number = \"123 4-5678\"",
                "Output": "** \"123-456-78\"",
                "Explanation": "** The digits are \"12345678\".\nStep 1: The 1st block is \"123\".\nStep 2: The 2nd block is \"456\".\nStep 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is \"78\".\nJoining the blocks gives \"123-456-78\"."
            }
        ]
    },
    {
        "Title": "Maximum Erasure Value",
        "slug": "maximum-erasure-value",
        "description": "You are given an array of positive integers `nums` and want to erase a subarray containing\u00a0**unique elements**. The **score** you get by erasing the subarray is equal to the **sum** of its elements.\n\n\nReturn *the **maximum score** you can get by erasing **exactly one** subarray.\n\n\nAn array `b` is called to be a subarray of `a` if it forms a contiguous subsequence of `a`, that is, if it is equal to `a[l],a[l+1],...,a[r]` for some `(l,r)`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [4,2,4,5,6]",
                "Output": "** 17",
                "Explanation": "** The optimal subarray here is [2,4,5,6]."
            },
            {
                "Input": "** nums = [5,2,1,2,5,2,1,2,5]",
                "Output": "** 8",
                "Explanation": "** The optimal subarray here is [5,2,1] or [1,2,5]."
            }
        ]
    },
    {
        "Title": "Jump Game VI",
        "slug": "jump-game-vi",
        "description": "You are given a **0-indexed** integer array `nums` and an integer `k`.\n\n\nYou are initially standing at index `0`. In one move, you can jump at most `k` steps forward without going outside the boundaries of the array. That is, you can jump from index `i` to any index in the range `[i + 1, min(n - 1, i + k)]` **inclusive**.\n\n\nYou want to reach the last index of the array (index `n - 1`). Your **score** is the **sum** of all `nums[j]` for each index `j` you visited in the array.\n\n\nReturn *the **maximum score** you can get*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Queue",
            "Heap (Priority Queue)",
            "Monotonic Queue"
        ],
        "examples": [
            {
                "Input": "** nums = [1,-1,-2,4,-7,3], k = 2",
                "Output": "** 7",
                "Explanation": "** You can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). The sum is 7."
            },
            {
                "Input": "** nums = [10,-5,-2,4,0,3], k = 3",
                "Output": "** 17",
                "Explanation": "** You can choose your jumps forming the subsequence [10,4,3] (underlined above). The sum is 17."
            },
            {
                "Input": "** nums = [1,-5,-20,4,-1,3,-6,-3], k = 2",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Checking Existence of Edge Length Limited Paths",
        "slug": "checking-existence-of-edge-length-limited-paths",
        "description": "An undirected graph of `n` nodes is defined by `edgeList`, where `edgeList[i] = [ui, vi, disi]` denotes an edge between nodes `ui` and `vi` with distance `disi`. Note that there may be **multiple** edges between two nodes.\n\n\nGiven an array `queries`, where `queries[j] = [pj, qj, limitj]`, your task is to determine for each `queries[j]` whether there is a path between `pj` and `qj`such that each edge on the path has a distance **strictly less than** `limitj` .\n\n\nReturn *a **boolean array*** `answer`*, where* `answer.length == queries.length` *and the* `jth` *value of* `answer` *is* `true` *if there is a path for* `queries[j]` *is* `true`*, and* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Two Pointers",
            "Union Find",
            "Graph",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]]",
                "Output": "** [false,true]",
                "Explanation": "** The above figure shows the given graph. Note that there are two overlapping edges between 0 and 1 with distances 2 and 16.\nFor the first query, between 0 and 1 there is no path where each distance is less than 2, thus we return false for this query.\nFor the second query, there is a path (0 -> 1 -> 2) of two edges with distances less than 5, thus we return true for this query."
            },
            {
                "Input": "** n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]]",
                "Output": "** [true,false]",
                "Explanation": "** The above figure shows the given graph."
            }
        ]
    },
    {
        "Title": "Number of Students Unable to Eat Lunch",
        "slug": "number-of-students-unable-to-eat-lunch",
        "description": "The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers `0` and `1` respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.\n\n\nThe number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a **stack**. At each step:\n\n\n If the student at the front of the queue **prefers** the sandwich on the top of the stack, they will **take it** and leave the queue.\n Otherwise, they will **leave it** and go to the queue's end.\n\n\nThis continues until none of the queue students want to take the top sandwich and are thus unable to eat.\n\n\nYou are given two integer arrays `students` and `sandwiches` where `sandwiches[i]` is the type of the `i\u200b\u200b\u200b\u200b\u200b\u200bth` sandwich in the stack (`i = 0` is the top of the stack) and `students[j]` is the preference of the `j\u200b\u200b\u200b\u200b\u200b\u200bth` student in the initial queue (`j = 0` is the front of the queue). Return *the number of students that are unable to eat.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Stack",
            "Queue",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** students = [1,1,0,0], sandwiches = [0,1,0,1]",
                "Output": "** 0",
                "Explanation": "**\n- Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].\n- Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].\n- Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [0,1].\n- Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].\n- Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].\nHence all students are able to eat."
            },
            {
                "Input": "** students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Average Waiting Time",
        "slug": "average-waiting-time",
        "description": "There is a restaurant with a single chef. You are given an array `customers`, where `customers[i] = [arrivali, timei]:`\n\n\n `arrivali` is the arrival time of the `ith` customer. The arrival times are sorted in **non-decreasing** order.\n `timei` is the time needed to prepare the order of the `ith` customer.\n\n\nWhen a customer arrives, he gives the chef his order, and the chef starts preparing it once he is idle. The customer waits till the chef finishes preparing his order. The chef does not prepare food for more than one customer at a time. The chef prepares food for customers **in the order they were given in the input**.\n\n\nReturn *the **average** waiting time of all customers*. Solutions within `10-5` from the actual answer are considered accepted.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** customers = [[1,2],[2,5],[4,3]]",
                "Output": "** 5.00000",
                "Explanation": "**1) The first customer arrives at time 1, the chef takes his order and starts preparing it immediately at time 1, and finishes at time 3, so the waiting time of the first customer is 3 - 1 = 2.\n2) The second customer arrives at time 2, the chef takes his order and starts preparing it at time 3, and finishes at time 8, so the waiting time of the second customer is 8 - 2 = 6.\n3) The third customer arrives at time 4, the chef takes his order and starts preparing it at time 8, and finishes at time 11, so the waiting time of the third customer is 11 - 4 = 7.\nSo the average waiting time = (2 + 6 + 7) / 3 = 5."
            },
            {
                "Input": "** customers = [[5,2],[5,4],[10,3],[20,1]]",
                "Output": "** 3.25000",
                "Explanation": "**1) The first customer arrives at time 5, the chef takes his order and starts preparing it immediately at time 5, and finishes at time 7, so the waiting time of the first customer is 7 - 5 = 2.\n2) The second customer arrives at time 5, the chef takes his order and starts preparing it at time 7, and finishes at time 11, so the waiting time of the second customer is 11 - 5 = 6.\n3) The third customer arrives at time 10, the chef takes his order and starts preparing it at time 11, and finishes at time 14, so the waiting time of the third customer is 14 - 10 = 4.\n4) The fourth customer arrives at time 20, the chef takes his order and starts preparing it immediately at time 20, and finishes at time 21, so the waiting time of the fourth customer is 21 - 20 = 1.\nSo the average waiting time = (2 + 6 + 4 + 1) / 4 = 3.25."
            }
        ]
    },
    {
        "Title": "Maximum Binary String After Change",
        "slug": "maximum-binary-string-after-change",
        "description": "You are given a binary string `binary` consisting of only `0`'s or `1`'s. You can apply each of the following operations any number of times:\n\n\n Operation 1: If the number contains the substring `\"00\"`, you can replace it with `\"10\"`.\n\t+ For example, `\"00010\" -> \"10010`\"\n Operation 2: If the number contains the substring `\"10\"`, you can replace it with `\"01\"`.\n\t+ For example, `\"00010\" -> \"00001\"`\n\n\nReturn the **maximum binary string** you can obtain after any number of operations. Binary string `x` is greater than binary string `y` if `x`'s decimal representation is greater than `y`'s decimal representation.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** binary = \"000110\"",
                "Output": "** \"111011\"",
                "Explanation": "** A valid transformation sequence can be:\n\"000110\" -> \"000101\" \n\"000101\" -> \"100101\" \n\"100101\" -> \"110101\" \n\"110101\" -> \"110011\" \n\"110011\" -> \"111011\""
            },
            {
                "Input": "** binary = \"01\"",
                "Output": "** \"01\"",
                "Explanation": "**\u00a0\"01\" cannot be transformed any further."
            }
        ]
    },
    {
        "Title": "Minimum Adjacent Swaps for K Consecutive Ones",
        "slug": "minimum-adjacent-swaps-for-k-consecutive-ones",
        "description": "You are given an integer array, `nums`, and an integer `k`. `nums` comprises of only `0`'s and `1`'s. In one move, you can choose two **adjacent** indices and swap their values.\n\n\nReturn *the **minimum** number of moves required so that* `nums` *has* `k` ***consecutive*** `1`*'s*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Sliding Window",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [1,0,0,1,0,1], k = 2",
                "Output": "** 1",
                "Explanation": "** In 1 move, nums could be [1,0,0,0,1,1] and have 2 consecutive 1's."
            },
            {
                "Input": "** nums = [1,0,0,0,0,0,1,1], k = 3",
                "Output": "** 5",
                "Explanation": "** In 5 moves, the leftmost 1 can be shifted right until nums = [0,0,0,0,0,1,1,1]."
            },
            {
                "Input": "** nums = [1,1,0,1], k = 2",
                "Output": "** 0",
                "Explanation": "** nums already has 2 consecutive 1's."
            }
        ]
    },
    {
        "Title": "Determine if String Halves Are Alike",
        "slug": "determine-if-string-halves-are-alike",
        "description": "You are given a string `s` of even length. Split this string into two halves of equal lengths, and let `a` be the first half and `b` be the second half.\n\n\nTwo strings are **alike** if they have the same number of vowels (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`, `'A'`, `'E'`, `'I'`, `'O'`, `'U'`). Notice that `s` contains uppercase and lowercase letters.\n\n\nReturn `true` *if* `a` *and* `b` *are **alike***. Otherwise, return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** s = \"book\"",
                "Output": "** true",
                "Explanation": "** a = \"bo\" and b = \"ok\". a has 1 vowel and b has 1 vowel. Therefore, they are alike."
            },
            {
                "Input": "** s = \"textbook\"",
                "Output": "** false",
                "Explanation": "** a = \"text\" and b = \"book\". a has 1 vowel whereas b has 2. Therefore, they are not alike.\nNotice that the vowel o is counted twice."
            }
        ]
    },
    {
        "Title": "Maximum Number of Eaten Apples",
        "slug": "maximum-number-of-eaten-apples",
        "description": "There is a special kind of apple tree that grows apples every day for `n` days. On the `ith` day, the tree grows `apples[i]` apples that will rot after `days[i]` days, that is on day `i + days[i]` the apples will be rotten and cannot be eaten. On some days, the apple tree does not grow any apples, which are denoted by `apples[i] == 0` and `days[i] == 0`.\n\n\nYou decided to eat **at most** one apple a day (to keep the doctors away). Note that you can keep eating after the first `n` days.\n\n\nGiven two integer arrays `days` and `apples` of length `n`, return *the maximum number of apples you can eat.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** apples = [1,2,3,5,2], days = [3,2,1,4,2]",
                "Output": "** 7",
                "Explanation": "** You can eat 7 apples:\n- On the first day, you eat an apple that grew on the first day.\n- On the second day, you eat an apple that grew on the second day.\n- On the third day, you eat an apple that grew on the second day. After this day, the apples that grew on the third day rot.\n- On the fourth to the seventh days, you eat apples that grew on the fourth day."
            },
            {
                "Input": "** apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]",
                "Output": "** 5",
                "Explanation": "** You can eat 5 apples:\n- On the first to the third day you eat apples that grew on the first day.\n- Do nothing on the fouth and fifth days.\n- On the sixth and seventh days you eat apples that grew on the sixth day."
            }
        ]
    },
    {
        "Title": "Where Will the Ball Fall",
        "slug": "where-will-the-ball-fall",
        "description": "You have a 2-D `grid` of size `m x n` representing a box, and you have `n` balls. The box is open on the top and bottom sides.\n\n\nEach cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.\n\n\n A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as `1`.\n A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as `-1`.\n\n\nWe drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a \"V\" shaped pattern between two boards or if a board redirects the ball into either wall of the box.\n\n\nReturn *an array* `answer` *of size* `n` *where* `answer[i]` *is the column that the ball falls out of at the bottom after dropping the ball from the* `ith` *column at the top, or `-1` *if the ball gets stuck in the box*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** grid = [[-1]]",
                "Output": "** [-1]",
                "Explanation": "** The ball gets stuck against the left wall."
            },
            {
                "Input": "** grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]",
                "Output": "** [0,1,2,3,4,-1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum XOR With an Element From Array",
        "slug": "maximum-xor-with-an-element-from-array",
        "description": "You are given an array `nums` consisting of non-negative integers. You are also given a `queries` array, where `queries[i] = [xi, mi]`.\n\n\nThe answer to the `ith` query is the maximum bitwise `XOR` value of `xi` and any element of `nums` that does not exceed `mi`. In other words, the answer is `max(nums[j] XOR xi)` for all `j` such that `nums[j] <= mi`. If all elements in `nums` are larger than `mi`, then the answer is `-1`.\n\n\nReturn *an integer array* `answer` *where* `answer.length == queries.length` *and* `answer[i]` *is the answer to the* `ith` *query.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Bit Manipulation",
            "Trie"
        ],
        "examples": [
            {
                "Input": "** nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]",
                "Output": "** [3,3,7]",
                "Explanation": "**\n1) 0 and 1 are the only two integers not greater than 1. 0 XOR 3 = 3 and 1 XOR 3 = 2. The larger of the two is 3.\n2) 1 XOR 2 = 3.\n3) 5 XOR 2 = 7."
            },
            {
                "Input": "** nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]]",
                "Output": "** [15,-1,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Units on a Truck",
        "slug": "maximum-units-on-a-truck",
        "description": "You are assigned to put some amount of boxes onto **one truck**. You are given a 2D array `boxTypes`, where `boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]`:\n\n\n `numberOfBoxesi` is the number of boxes of type `i`.\n `numberOfUnitsPerBoxi`is the number of units in each box of the type `i`.\n\n\nYou are also given an integer `truckSize`, which is the **maximum** number of **boxes** that can be put on the truck. You can choose any boxes to put on the truck as long as the number\u00a0of boxes does not exceed `truckSize`.\n\n\nReturn *the **maximum** total number of **units** that can be put on the truck.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4",
                "Output": "** 8",
                "Explanation": "** There are:\n- 1 box of the first type that contains 3 units.\n- 2 boxes of the second type that contain 2 units each.\n- 3 boxes of the third type that contain 1 unit each.\nYou can take all the boxes of the first and second types, and one box of the third type.\nThe total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8."
            },
            {
                "Input": "** boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10",
                "Output": "** 91",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count Good Meals",
        "slug": "count-good-meals",
        "description": "A **good meal** is a meal that contains **exactly two different food items** with a sum of deliciousness equal to a power of two.\n\n\nYou can pick **any** two different foods to make a good meal.\n\n\nGiven an array of integers `deliciousness` where `deliciousness[i]` is the deliciousness of the `i\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b`\u200b\u200b\u200b\u200b item of food, return *the number of different **good meals** you can make from this list modulo* `109 + 7`.\n\n\nNote that items with different indices are considered different even if they have the same deliciousness value.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** deliciousness = [1,3,5,7,9]",
                "Output": "** 4",
                "Explanation": "** The good meals are (1,3), (1,7), (3,5) and, (7,9).\nTheir respective sums are 4, 8, 8, and 16, all of which are powers of 2."
            },
            {
                "Input": "** deliciousness = [1,1,1,3,3,3,7]",
                "Output": "** 15",
                "Explanation": "** The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways."
            }
        ]
    },
    {
        "Title": "Ways to Split Array Into Three Subarrays",
        "slug": "ways-to-split-array-into-three-subarrays",
        "description": "A split of an integer array is **good** if:\n\n\n The array is split into three **non-empty** contiguous subarrays - named `left`, `mid`, `right` respectively from left to right.\n The sum of the elements in `left` is less than or equal to the sum of the elements in `mid`, and the sum of the elements in `mid` is less than or equal to the sum of the elements in `right`.\n\n\nGiven `nums`, an array of **non-negative** integers, return *the number of **good** ways to split* `nums`. As the number may be too large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [1,1,1]",
                "Output": "** 1",
                "Explanation": "** The only good way to split nums is [1] [1] [1]."
            },
            {
                "Input": "** nums = [1,2,2,2,5,0]",
                "Output": "** 3",
                "Explanation": "** There are three good ways of splitting nums:\n[1] [2] [2,2,5,0]\n[1] [2,2] [2,5,0]\n[1,2] [2,2] [5,0]"
            },
            {
                "Input": "** nums = [3,2,1]",
                "Output": "** 0",
                "Explanation": "** There is no good way to split nums."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Make a Subsequence",
        "slug": "minimum-operations-to-make-a-subsequence",
        "description": "You are given an array `target` that consists of **distinct** integers and another integer array `arr` that **can** have duplicates.\n\n\nIn one operation, you can insert any integer at any position in `arr`. For example, if `arr = [1,4,1,2]`, you can add `3` in the middle and make it `[1,4,3,1,2]`. Note that you can insert the integer at the very beginning or end of the array.\n\n\nReturn *the **minimum** number of operations needed to make* `target` *a **subsequence** of* `arr`*.\n\n\nA **subsequence** of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, `[2,7,4]` is a subsequence of `[4,2,3,7,2,1,4]` (the underlined elements), while `[2,4,2]` is not.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** target = [5,1,3], arr = [9,4,2,3,4]",
                "Output": "** 2",
                "Explanation": "** You can add 5 and 1 in such a way that makes arr = [5,9,4,1,2,3,4], then target will be a subsequence of arr."
            },
            {
                "Input": "** target = [6,4,8,1,3,2], arr = [4,7,6,2,3,8,6,1]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Calculate Money in Leetcode Bank",
        "slug": "calculate-money-in-leetcode-bank",
        "description": "Hercy wants to save money for his first car. He puts money in the Leetcode\u00a0bank **every day**.\n\n\nHe starts by putting in `$1` on Monday, the first day. Every day from Tuesday to Sunday, he will put in `$1` more than the day before. On every subsequent Monday, he will put in `$1` more than the **previous Monday**. \n\n\nGiven `n`, return *the total amount of money he will have in the Leetcode bank at the end of the* `nth` *day.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** 10",
                "Explanation": "**\u00a0After the 4th day, the total is 1 + 2 + 3 + 4 = 10."
            },
            {
                "Input": "** n = 10",
                "Output": "** 37",
                "Explanation": "**\u00a0After the 10th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on the 2nd Monday, Hercy only puts in $2."
            },
            {
                "Input": "** n = 20",
                "Output": "** 96",
                "Explanation": "**\u00a0After the 20th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96."
            }
        ]
    },
    {
        "Title": "Maximum Score From Removing Substrings",
        "slug": "maximum-score-from-removing-substrings",
        "description": "You are given a string `s` and two integers `x` and `y`. You can perform two types of operations any number of times.\n\n\n Remove substring `\"ab\"` and gain `x` points.\n\t+ For example, when removing `\"ab\"` from `\"cabxbae\"` it becomes `\"cxbae\"`.\n Remove substring `\"ba\"` and gain `y` points.\n\t+ For example, when removing `\"ba\"` from `\"cabxbae\"` it becomes `\"cabxe\"`.\n\n\nReturn *the maximum points you can gain after applying the above operations on* `s`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Stack",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"cdbcbbaaabab\", x = 4, y = 5",
                "Output": "** 19",
                "Explanation": "**\n- Remove the \"ba\" underlined in \"cdbcbbaaabab\". Now, s = \"cdbcbbaaab\" and 5 points are added to the score.\n- Remove the \"ab\" underlined in \"cdbcbbaaab\". Now, s = \"cdbcbbaa\" and 4 points are added to the score.\n- Remove the \"ba\" underlined in \"cdbcbbaa\". Now, s = \"cdbcba\" and 5 points are added to the score.\n- Remove the \"ba\" underlined in \"cdbcba\". Now, s = \"cdbc\" and 5 points are added to the score.\nTotal score = 5 + 4 + 5 + 5 = 19."
            },
            {
                "Input": "** s = \"aabbaaxybbaabb\", x = 5, y = 4",
                "Output": "** 20",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Construct the Lexicographically Largest Valid Sequence",
        "slug": "construct-the-lexicographically-largest-valid-sequence",
        "description": "Given an integer `n`, find a sequence that satisfies all of the following:\n\n\n The integer `1` occurs once in the sequence.\n Each integer between `2` and `n` occurs twice in the sequence.\n For every integer `i` between `2` and `n`, the **distance** between the two occurrences of `i` is exactly `i`.\n\n\nThe **distance** between two numbers on the sequence, `a[i]` and `a[j]`, is the absolute difference of their indices, `|j - i|`.\n\n\nReturn *the **lexicographically largest** sequence**. It is guaranteed that under the given constraints, there is always a solution.* \n\n\nA sequence `a` is lexicographically larger than a sequence `b` (of the same length) if in the first position where `a` and `b` differ, sequence `a` has a number greater than the corresponding number in `b`. For example, `[0,1,9,0]` is lexicographically larger than `[0,1,5,6]` because the first position they differ is at the third number, and `9` is greater than `5`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** [3,1,2,3,2]",
                "Explanation": "** [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence."
            },
            {
                "Input": "** n = 5",
                "Output": "** [5,3,1,4,3,5,2,4,2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number Of Ways To Reconstruct A Tree",
        "slug": "number-of-ways-to-reconstruct-a-tree",
        "description": "You are given an array `pairs`, where `pairs[i] = [xi, yi]`, and:\n\n\n There are no duplicates.\n `xi < yi`\n\n\nLet `ways` be the number of rooted trees that satisfy the following conditions:\n\n\n The tree consists of nodes whose values appeared in `pairs`.\n A pair `[xi, yi]` exists in `pairs` **if and only if** `xi` is an ancestor of `yi` or `yi` is an ancestor of `xi`.\n **Note:** the tree does not have to be a binary tree.\n\n\nTwo ways are considered to be different if there is at least one node that has different parents in both ways.\n\n\nReturn:\n\n\n `0` if `ways == 0`\n `1` if `ways == 1`\n `2` if `ways > 1`\n\n\nA **rooted tree** is a tree that has a single root node, and all edges are oriented to be outgoing from the root.\n\n\nAn **ancestor** of a node is any node on the path from the root to that node (excluding the node itself). The root has no ancestors.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Tree",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** pairs = [[1,2],[2,3]]",
                "Output": "** 1",
                "Explanation": "** There is exactly one valid rooted tree, which is shown in the above figure."
            },
            {
                "Input": "** pairs = [[1,2],[2,3],[1,3]]",
                "Output": "** 2",
                "Explanation": "** There are multiple valid rooted trees. Three of them are shown in the above figures."
            }
        ]
    },
    {
        "Title": "Decode XORed Array",
        "slug": "decode-xored-array",
        "description": "There is a **hidden** integer array `arr` that consists of `n` non-negative integers.\n\n\nIt was encoded into another integer array `encoded` of length `n - 1`, such that `encoded[i] = arr[i] XOR arr[i + 1]`. For example, if `arr = [1,0,2,1]`, then `encoded = [1,2,3]`.\n\n\nYou are given the `encoded` array. You are also given an integer `first`, that is the first element of `arr`, i.e. `arr[0]`.\n\n\nReturn *the original array* `arr`. It can be proved that the answer exists and is unique.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** encoded = [1,2,3], first = 1",
                "Output": "** [1,0,2,1]",
                "Explanation": "** If arr = [1,0,2,1], then first = 1 and encoded = [1 XOR 0, 0 XOR 2, 2 XOR 1] = [1,2,3]"
            },
            {
                "Input": "** encoded = [6,2,7,3], first = 4",
                "Output": "** [4,2,0,7,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Swapping Nodes in a Linked List",
        "slug": "swapping-nodes-in-a-linked-list",
        "description": "You are given the `head` of a linked list, and an integer `k`.\n\n\nReturn *the head of the linked list after **swapping** the values of the* `kth` *node from the beginning and the* `kth` *node from the end (the list is **1-indexed**).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** head = [1,2,3,4,5], k = 2",
                "Output": "** [1,4,3,2,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimize Hamming Distance After Swap Operations",
        "slug": "minimize-hamming-distance-after-swap-operations",
        "description": "You are given two integer arrays, `source` and `target`, both of length `n`. You are also given an array `allowedSwaps` where each `allowedSwaps[i] = [ai, bi]` indicates that you are allowed to swap the elements at index `ai` and index `bi` **(0-indexed)** of array `source`. Note that you can swap elements at a specific pair of indices **multiple** times and in **any** order.\n\n\nThe **Hamming distance** of two arrays of the same length, `source` and `target`, is the number of positions where the elements are different. Formally, it is the number of indices `i` for `0 <= i <= n-1` where `source[i] != target[i]` **(0-indexed)**.\n\n\nReturn *the **minimum Hamming distance** of* `source` *and* `target` *after performing **any** amount of swap operations on array* `source`*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Union Find"
        ],
        "examples": [
            {
                "Input": "** source = [1,2,3,4], target = [2,1,4,5], allowedSwaps = [[0,1],[2,3]]",
                "Output": "** 1",
                "Explanation": "** source can be transformed the following way:\n- Swap indices 0 and 1: source = [2,1,3,4]\n- Swap indices 2 and 3: source = [2,1,4,3]\nThe Hamming distance of source and target is 1 as they differ in 1 position: index 3."
            },
            {
                "Input": "** source = [1,2,3,4], target = [1,3,2,4], allowedSwaps = []",
                "Output": "** 2",
                "Explanation": "** There are no allowed swaps.\nThe Hamming distance of source and target is 2 as they differ in 2 positions: index 1 and index 2."
            },
            {
                "Input": "** source = [5,1,2,4,3], target = [1,5,4,2,3], allowedSwaps = [[0,4],[4,2],[1,3],[1,4]]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Minimum Time to Finish All Jobs",
        "slug": "find-minimum-time-to-finish-all-jobs",
        "description": "You are given an integer array `jobs`, where `jobs[i]` is the amount of time it takes to complete the `ith` job.\n\n\nThere are `k` workers that you can assign jobs to. Each job should be assigned to **exactly** one worker. The **working time** of a worker is the sum of the time it takes to complete all jobs assigned to them. Your goal is to devise an optimal assignment such that the **maximum working time** of any worker is **minimized**.\n\n\nReturn the **minimum** possible **maximum working time** of any assignment.* \n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Backtracking",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** jobs = [3,2,3], k = 3",
                "Output": "** 3",
                "Explanation": "** By assigning each person one job, the maximum time is 3."
            },
            {
                "Input": "** jobs = [1,2,4,7,8], k = 2",
                "Output": "** 11",
                "Explanation": "** Assign the jobs the following way:\nWorker 1: 1, 2, 8 (working time = 1 + 2 + 8 = 11)\nWorker 2: 4, 7 (working time = 4 + 7 = 11)\nThe maximum working time is 11."
            }
        ]
    },
    {
        "Title": "Number Of Rectangles That Can Form The Largest Square",
        "slug": "number-of-rectangles-that-can-form-the-largest-square",
        "description": "You are given an array `rectangles` where `rectangles[i] = [li, wi]` represents the `ith` rectangle of length `li` and width `wi`.\n\n\nYou can cut the `ith` rectangle to form a square with a side length of `k` if both `k <= li` and `k <= wi`. For example, if you have a rectangle `[4,6]`, you can cut it to get a square with a side length of at most `4`.\n\n\nLet `maxLen` be the side length of the **largest** square you can obtain from any of the given rectangles.\n\n\nReturn *the **number** of rectangles that can make a square with a side length of* `maxLen`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** rectangles = [[5,8],[3,9],[5,12],[16,5]]",
                "Output": "** 3",
                "Explanation": "** The largest squares you can get from each rectangle are of lengths [5,3,5,5].\r\nThe largest possible square is of length 5, and you can get it out of 3 rectangles."
            },
            {
                "Input": "** rectangles = [[2,3],[3,7],[4,3],[3,7]]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Tuple with Same Product",
        "slug": "tuple-with-same-product",
        "description": "Given an array `nums` of **distinct** positive integers, return *the number of tuples* `(a, b, c, d)` *such that* `a * b = c * d` *where* `a`*,* `b`*,* `c`*, and* `d` *are elements of* `nums`*, and* `a != b != c != d`*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [2,3,4,6]",
                "Output": "** 8",
                "Explanation": "** There are 8 valid tuples:\n(2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)\n(3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)"
            },
            {
                "Input": "** nums = [1,2,4,5,10]",
                "Output": "** 16",
                "Explanation": "** There are 16 valid tuples:\n(1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)\n(2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)\n(2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,5,4)\n(4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)"
            }
        ]
    },
    {
        "Title": "Largest Submatrix With Rearrangements",
        "slug": "largest-submatrix-with-rearrangements",
        "description": "You are given a binary matrix `matrix` of size `m x n`, and you are allowed to rearrange the **columns** of the `matrix` in any order.\n\n\nReturn *the area of the largest submatrix within* `matrix` *where **every** element of the submatrix is* `1` *after reordering the columns optimally.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** matrix = [[0,0,1],[1,1,1],[1,0,1]]",
                "Output": "** 4",
                "Explanation": "** You can rearrange the columns as shown above.\nThe largest submatrix of 1s, in bold, has an area of 4."
            },
            {
                "Input": "** matrix = [[1,0,1,0,1]]",
                "Output": "** 3",
                "Explanation": "** You can rearrange the columns as shown above.\nThe largest submatrix of 1s, in bold, has an area of 3."
            }
        ]
    },
    {
        "Title": "Cat and Mouse II",
        "slug": "cat-and-mouse-ii",
        "description": "A game is played by a cat and a mouse named Cat and Mouse.\n\n\nThe environment is represented by a `grid` of size `rows x cols`, where each element is a wall, floor, player (Cat, Mouse), or food.\n\n\n Players are represented by the characters `'C'`(Cat)`,'M'`(Mouse).\n Floors are represented by the character `'.'` and can be walked on.\n Walls are represented by the character `'#'` and cannot be walked on.\n Food is represented by the character `'F'` and can be walked on.\n There is only one of each character `'C'`, `'M'`, and `'F'` in `grid`.\n\n\nMouse and Cat play according to the following rules:\n\n\n Mouse **moves first**, then they take turns to move.\n During each turn, Cat and Mouse can jump in one of the four directions (left, right, up, down). They cannot jump over the wall nor outside of the `grid`.\n `catJump, mouseJump` are the maximum lengths Cat and Mouse can jump at a time, respectively. Cat and Mouse can jump less than the maximum length.\n Staying in the same position is allowed.\n Mouse can jump over Cat.\n\n\nThe game can end in 4 ways:\n\n\n If Cat occupies the same position as Mouse, Cat wins.\n If Cat reaches the food first, Cat wins.\n If Mouse reaches the food first, Mouse wins.\n If Mouse cannot get to the food within 1000 turns, Cat wins.\n\n\nGiven a `rows x cols` matrix `grid` and two integers `catJump` and `mouseJump`, return `true` *if Mouse can win the game if both Cat and Mouse play optimally, otherwise return* `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Graph",
            "Topological Sort",
            "Memoization",
            "Matrix",
            "Game Theory"
        ],
        "examples": [
            {
                "Input": "** grid = [\"####F\",\"#C...\",\"M....\"], catJump = 1, mouseJump = 2",
                "Output": "** true",
                "Explanation": "** Cat cannot catch Mouse on its turn nor can it get the food before Mouse."
            },
            {
                "Input": "** grid = [\"M.C...F\"], catJump = 1, mouseJump = 4",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Followers Count",
        "slug": "find-followers-count",
        "description": "Table: `Followers`\n\n\n\n```\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| user_id     | int  |\n| follower_id | int  |\n+-------------+------+\n(user_id, follower_id) is the primary key (combination of columns with unique values) for this table.\nThis table contains the IDs of a user and a follower in a social media app where the follower follows the user.\n```\n\n\u00a0\n\n\nWrite a solution that will, for each user, return the number of followers.\n\n\nReturn the result table ordered by `user_id` in ascending order.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nFollowers table:\n+---------+-------------+\n| user_id | follower_id |\n+---------+-------------+\n| 0       | 1           |\n| 1       | 0           |\n| 2       | 0           |\n| 2       | 1           |\n+---------+-------------+",
                "Output": "** \n+---------+----------------+\n| user_id | followers_count|\n+---------+----------------+\n| 0       | 1              |\n| 1       | 1              |\n| 2       | 2              |\n+---------+----------------+",
                "Explanation": "** \nThe followers of 0 are {1}\nThe followers of 1 are {0}\nThe followers of 2 are {0,1}"
            }
        ]
    },
    {
        "Title": "The Number of Employees Which Report to Each Employee",
        "slug": "the-number-of-employees-which-report-to-each-employee",
        "description": "Table: `Employees`\n\n\n\n```\n\n+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| employee_id | int      |\n| name        | varchar  |\n| reports_to  | int      |\n| age         | int      |\n+-------------+----------+\nemployee_id is the column with unique values for this table.\nThis table contains information about the employees and the id of the manager they report to. Some employees do not report to anyone (reports_to is null). \n\n```\n\n\u00a0\n\n\nFor this problem, we will consider a **manager** an employee who has at least 1 other employee reporting to them.\n\n\nWrite a solution to report the ids and the names of all **managers**, the number of employees who report **directly** to them, and the average age of the reports rounded to the nearest integer.\n\n\nReturn the result table ordered by `employee_id`.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nEmployees table:\n+-------------+---------+------------+-----+\n| employee_id | name    | reports_to | age |\n+-------------+---------+------------+-----+\n| 9           | Hercy   | null       | 43  |\n| 6           | Alice   | 9          | 41  |\n| 4           | Bob     | 9          | 36  |\n| 2           | Winston | null       | 37  |\n+-------------+---------+------------+-----+",
                "Output": "** \n+-------------+-------+---------------+-------------+\n| employee_id | name  | reports_count | average_age |\n+-------------+-------+---------------+-------------+\n| 9           | Hercy | 2             | 39          |\n+-------------+-------+---------------+-------------+",
                "Explanation": "** Hercy has 2 people report directly to him, Alice and Bob. Their average age is (41+36)/2 = 38.5, which is 39 after rounding it to the nearest integer."
            },
            {
                "Input": "** \nEmployees table:\n+-------------+---------+------------+-----+ \n| employee_id | name \u00a0 \u00a0| reports_to | age |\n|-------------|---------|------------|-----|\n| 1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | Michael | null \u00a0 \u00a0 \u00a0 | 45 \u00a0|\n| 2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | Alice \u00a0 | 1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0| 38 \u00a0|\n| 3 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | Bob \u00a0 \u00a0 | 1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0| 42 \u00a0|\n| 4 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | Charlie | 2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0| 34 \u00a0|\n| 5 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | David \u00a0 | 2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0| 40 \u00a0|\n| 6 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | Eve \u00a0 \u00a0 | 3 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0| 37 \u00a0|\n| 7 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | Frank \u00a0 | null \u00a0 \u00a0 \u00a0 | 50 \u00a0|\n| 8 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | Grace \u00a0 | null \u00a0 \u00a0 \u00a0 | 48 \u00a0|\n+-------------+---------+------------+-----+",
                "Output": "** \n+-------------+---------+---------------+-------------+\n| employee_id | name \u00a0 \u00a0| reports_count | average_age |\n| ----------- | ------- | ------------- | ----------- |\n| 1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | Michael | 2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | 40 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0|\n| 2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | Alice \u00a0 | 2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | 37 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0|\n| 3 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | Bob \u00a0 \u00a0 | 1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | 37 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0|\n+-------------+---------+---------------+-------------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find the Highest Altitude",
        "slug": "find-the-highest-altitude",
        "description": "There is a biker going on a road trip. The road trip consists of `n + 1` points at different altitudes. The biker starts his trip on point `0` with altitude equal `0`.\n\n\nYou are given an integer array `gain` of length `n` where `gain[i]` is the **net gain in altitude** between points `i`\u200b\u200b\u200b\u200b\u200b\u200b and `i + 1` for all (`0 <= i < n)`. Return *the **highest altitude** of a point.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** gain = [-5,1,5,0,-7]",
                "Output": "** 1",
                "Explanation": "** The altitudes are [0,-5,-4,1,1,-6]. The highest is 1."
            },
            {
                "Input": "** gain = [-4,-3,-2,-1,4,3,2]",
                "Output": "** 0",
                "Explanation": "** The altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. The highest is 0."
            }
        ]
    },
    {
        "Title": "Minimum Number of People to Teach",
        "slug": "minimum-number-of-people-to-teach",
        "description": "On a social network consisting of `m` users and some friendships between users, two users can communicate with each other if they know a common language.\n\n\nYou are given an integer `n`, an array `languages`, and an array `friendships` where:\n\n\n There are `n` languages numbered `1` through `n`,\n `languages[i]` is the set of languages the `i\u200b\u200b\u200b\u200b\u200b\u200bth`\u200b\u200b\u200b\u200b user knows, and\n `friendships[i] = [u\u200b\u200b\u200b\u200b\u200b\u200bi\u200b\u200b\u200b, v\u200b\u200b\u200b\u200b\u200b\u200bi]` denotes a friendship between the users `u\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200bi`\u200b\u200b\u200b\u200b\u200b and `vi`.\n\n\nYou can choose **one** language and teach it to some users so that all friends can communicate with each other. Return *the* ***minimum*** *number of users you need to teach.\n\n\nNote that friendships are not transitive, meaning if `x` is a friend of `y` and `y` is a friend of `z`, this doesn't guarantee that `x` is a friend of `z`.\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]]",
                "Output": "** 1",
                "Explanation": "** You can either teach user 1 the second language or user 2 the first language."
            },
            {
                "Input": "** n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]]",
                "Output": "** 2",
                "Explanation": "** Teach the third language to users 1 and 3, yielding two users to teach."
            }
        ]
    },
    {
        "Title": "Decode XORed Permutation",
        "slug": "decode-xored-permutation",
        "description": "There is an integer array `perm` that is a permutation of the first `n` positive integers, where `n` is always **odd**.\n\n\nIt was encoded into another integer array `encoded` of length `n - 1`, such that `encoded[i] = perm[i] XOR perm[i + 1]`. For example, if `perm = [1,3,2]`, then `encoded = [2,1]`.\n\n\nGiven the `encoded` array, return *the original array* `perm`. It is guaranteed that the answer exists and is unique.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** encoded = [3,1]",
                "Output": "** [1,2,3]",
                "Explanation": "** If perm = [1,2,3], then encoded = [1 XOR 2,2 XOR 3] = [3,1]"
            },
            {
                "Input": "** encoded = [6,5,4,6]",
                "Output": "** [2,4,1,5,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count Ways to Make Array With Product",
        "slug": "count-ways-to-make-array-with-product",
        "description": "You are given a 2D integer array, `queries`. For each `queries[i]`, where `queries[i] = [ni, ki]`, find the number of different ways you can place positive integers into an array of size `ni` such that the product of the integers is `ki`. As the number of ways may be too large, the answer to the `ith` query is the number of ways **modulo** `109 + 7`.\n\n\nReturn *an integer array* `answer` *where* `answer.length == queries.length`*, and* `answer[i]` *is the answer to the* `ith` *query.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Combinatorics",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** queries = [[2,6],[5,1],[73,660]]",
                "Output": "** [4,1,50734910]",
                "Explanation": "**\u00a0Each query is independent.\n[2,6]: There are 4 ways to fill an array of size 2 that multiply to 6: [1,6], [2,3], [3,2], [6,1].\n[5,1]: There is 1 way to fill an array of size 5 that multiply to 1: [1,1,1,1,1].\n[73,660]: There are 1050734917 ways to fill an array of size 73 that multiply to 660. 1050734917 modulo 109 + 7 = 50734910."
            },
            {
                "Input": "** queries = [[1,1],[2,2],[3,3],[4,4],[5,5]]",
                "Output": "** [1,2,3,10,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Latest Time by Replacing Hidden Digits",
        "slug": "latest-time-by-replacing-hidden-digits",
        "description": "You are given a string `time` in the form of  `hh:mm`, where some of the digits in the string are hidden (represented by `?`).\n\n\nThe valid times are those inclusively between `00:00` and `23:59`.\n\n\nReturn *the latest valid time you can get from* `time` *by replacing the hidden* *digits*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** time = \"2?:?0\"",
                "Output": "** \"23:50\"",
                "Explanation": "** The latest hour beginning with the digit '2' is 23 and the latest minute ending with the digit '0' is 50."
            },
            {
                "Input": "** time = \"0?:3?\"",
                "Output": "** \"09:39\"",
                "Explanation": null
            },
            {
                "Input": "** time = \"1?:22\"",
                "Output": "** \"19:22\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Change Minimum Characters to Satisfy One of Three Conditions",
        "slug": "change-minimum-characters-to-satisfy-one-of-three-conditions",
        "description": "You are given two strings `a` and `b` that consist of lowercase letters. In one operation, you can change any character in `a` or `b` to **any lowercase letter**.\n\n\nYour goal is to satisfy **one** of the following three conditions:\n\n\n **Every** letter in `a` is **strictly less** than **every** letter in `b` in the alphabet.\n **Every** letter in `b` is **strictly less** than **every** letter in `a` in the alphabet.\n **Both** `a` and `b` consist of **only one** distinct letter.\n\n\nReturn *the **minimum** number of operations needed to achieve your goal.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Counting",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** a = \"aba\", b = \"caa\"",
                "Output": "** 2",
                "Explanation": "** Consider the best way to make each condition true:\n1) Change b to \"ccc\" in 2 operations, then every letter in a is less than every letter in b.\n2) Change a to \"bbb\" and b to \"aaa\" in 3 operations, then every letter in b is less than every letter in a.\n3) Change a to \"aaa\" and b to \"aaa\" in 2 operations, then a and b consist of one distinct letter.\nThe best way was done in 2 operations (either condition 1 or condition 3)."
            },
            {
                "Input": "** a = \"dabadd\", b = \"cda\"",
                "Output": "** 3",
                "Explanation": "** The best way is to make condition 1 true by changing b to \"eee\"."
            }
        ]
    },
    {
        "Title": "Find Kth Largest XOR Coordinate Value",
        "slug": "find-kth-largest-xor-coordinate-value",
        "description": "You are given a 2D `matrix` of size `m x n`, consisting of non-negative integers. You are also given an integer `k`.\n\n\nThe **value** of coordinate `(a, b)` of the matrix is the XOR of all `matrix[i][j]` where `0 <= i <= a < m` and `0 <= j <= b < n` **(0-indexed)**.\n\n\nFind the `kth` largest value **(1-indexed)** of all the coordinates of `matrix`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Divide and Conquer",
            "Bit Manipulation",
            "Sorting",
            "Heap (Priority Queue)",
            "Matrix",
            "Prefix Sum",
            "Quickselect"
        ],
        "examples": [
            {
                "Input": "** matrix = [[5,2],[1,6]], k = 1",
                "Output": "** 7",
                "Explanation": "** The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value."
            },
            {
                "Input": "** matrix = [[5,2],[1,6]], k = 2",
                "Output": "** 5",
                "Explanation": "** The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value."
            },
            {
                "Input": "** matrix = [[5,2],[1,6]], k = 3",
                "Output": "** 4",
                "Explanation": "** The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value."
            }
        ]
    },
    {
        "Title": "Building Boxes",
        "slug": "building-boxes",
        "description": "You have a cubic storeroom where the width, length, and height of the room are all equal to `n` units. You are asked to place `n` boxes in this room where each box is a cube of unit side length. There are however some rules to placing the boxes:\n\n\n You can place the boxes anywhere on the floor.\n If box `x` is placed on top of the box `y`, then each side of the four vertical sides of the box `y` **must** either be adjacent to another box or to a wall.\n\n\nGiven an integer `n`, return *the **minimum** possible number of boxes touching the floor.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Binary Search",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** 3",
                "Explanation": "** The figure above is for the placement of the three boxes.\nThese boxes are placed in the corner of the room, where the corner is on the left side."
            },
            {
                "Input": "** n = 4",
                "Output": "** 3",
                "Explanation": "** The figure above is for the placement of the four boxes.\nThese boxes are placed in the corner of the room, where the corner is on the left side."
            },
            {
                "Input": "** n = 10",
                "Output": "** 6",
                "Explanation": "** The figure above is for the placement of the ten boxes.\nThese boxes are placed in the corner of the room, where the corner is on the back side."
            }
        ]
    },
    {
        "Title": "Find Total Time Spent by Each Employee",
        "slug": "find-total-time-spent-by-each-employee",
        "description": "Table: `Employees`\n\n\n\n```\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| emp_id      | int  |\n| event_day   | date |\n| in_time     | int  |\n| out_time    | int  |\n+-------------+------+\n(emp_id, event_day, in_time) is the primary key (combinations of columns with unique values) of this table.\nThe table shows the employees' entries and exits in an office.\nevent_day is the day at which this event happened, in_time is the minute at which the employee entered the office, and out_time is the minute at which they left the office.\nin_time and out_time are between 1 and 1440.\nIt is guaranteed that no two events on the same day intersect in time, and in_time < out_time.\n\n```\n\n\u00a0\n\n\nWrite a solution to calculate the total time **in minutes** spent by each employee on each day at the office. Note that within one day, an employee can enter and leave more than once. The time spent in the office for a single entry is `out_time - in_time`.\n\n\nReturn the result table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nEmployees table:\n+--------+------------+---------+----------+\n| emp_id | event_day  | in_time | out_time |\n+--------+------------+---------+----------+\n| 1      | 2020-11-28 | 4       | 32       |\n| 1      | 2020-11-28 | 55      | 200      |\n| 1      | 2020-12-03 | 1       | 42       |\n| 2      | 2020-11-28 | 3       | 33       |\n| 2      | 2020-12-09 | 47      | 74       |\n+--------+------------+---------+----------+",
                "Output": "** \n+------------+--------+------------+\n| day        | emp_id | total_time |\n+------------+--------+------------+\n| 2020-11-28 | 1      | 173        |\n| 2020-11-28 | 2      | 30         |\n| 2020-12-03 | 1      | 41         |\n| 2020-12-09 | 2      | 27         |\n+------------+--------+------------+",
                "Explanation": "** \nEmployee 1 has three events: two on day 2020-11-28 with a total of (32 - 4) + (200 - 55) = 173, and one on day 2020-12-03 with a total of (42 - 1) = 41.\nEmployee 2 has two events: one on day 2020-11-28 with a total of (33 - 3) = 30, and one on day 2020-12-09 with a total of (74 - 47) = 27."
            }
        ]
    },
    {
        "Title": "Maximum Number of Balls in a Box",
        "slug": "maximum-number-of-balls-in-a-box",
        "description": "You are working in a ball factory where you have `n` balls numbered from `lowLimit` up to `highLimit` **inclusive** (i.e., `n == highLimit - lowLimit + 1`), and an infinite number of boxes numbered from `1` to `infinity`.\n\n\nYour job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. For example, the ball number `321` will be put in the box number `3 + 2 + 1 = 6` and the ball number `10` will be put in the box number `1 + 0 = 1`.\n\n\nGiven two integers `lowLimit` and `highLimit`, return *the number of balls in the box with the most balls.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "Math",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** lowLimit = 1, highLimit = 10",
                "Output": "** 2",
                "Explanation": "**\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count:  2 1 1 1 1 1 1 1 1 0  0  ...\nBox 1 has the most number of balls with 2 balls."
            },
            {
                "Input": "** lowLimit = 5, highLimit = 15",
                "Output": "** 2",
                "Explanation": "**\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count:  1 1 1 1 2 2 1 1 1 0  0  ...\nBoxes 5 and 6 have the most number of balls with 2 balls in each."
            },
            {
                "Input": "** lowLimit = 19, highLimit = 28",
                "Output": "** 2",
                "Explanation": "**\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 12 ...\nBall Count:  0 1 1 1 1 1 1 1 1 2  0  0  ...\nBox 10 has the most number of balls with 2 balls."
            }
        ]
    },
    {
        "Title": "Restore the Array From Adjacent Pairs",
        "slug": "restore-the-array-from-adjacent-pairs",
        "description": "There is an integer array `nums` that consists of `n` **unique** elements, but you have forgotten it. However, you do remember every pair of adjacent elements in `nums`.\n\n\nYou are given a 2D integer array `adjacentPairs` of size `n - 1` where each `adjacentPairs[i] = [ui, vi]` indicates that the elements `ui` and `vi` are adjacent in `nums`.\n\n\nIt is guaranteed that every adjacent pair of elements `nums[i]` and `nums[i+1]` will exist in `adjacentPairs`, either as `[nums[i], nums[i+1]]` or `[nums[i+1], nums[i]]`. The pairs can appear **in any order**.\n\n\nReturn *the original array* `nums`*. If there are multiple solutions, return **any of them***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** adjacentPairs = [[2,1],[3,4],[3,2]]",
                "Output": "** [1,2,3,4]",
                "Explanation": "** This array has all its adjacent pairs in adjacentPairs.\nNotice that adjacentPairs[i] may not be in left-to-right order."
            },
            {
                "Input": "** adjacentPairs = [[4,-2],[1,4],[-3,1]]",
                "Output": "** [-2,4,1,-3]",
                "Explanation": "** There can be negative numbers.\nAnother solution is [-3,1,4,-2], which would also be accepted."
            },
            {
                "Input": "** adjacentPairs = [[100000,-100000]]",
                "Output": "** [100000,-100000]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Can You Eat Your Favorite Candy on Your Favorite Day?",
        "slug": "can-you-eat-your-favorite-candy-on-your-favorite-day",
        "description": "You are given a **(0-indexed)** array of positive integers `candiesCount` where `candiesCount[i]` represents the number of candies of the\u00a0`ith`\u00a0type you have. You are also given a 2D array `queries` where `queries[i] = [favoriteTypei, favoriteDayi, dailyCapi]`.\n\n\nYou play a game with the following rules:\n\n\n You start eating candies on day `**0**`.\n You **cannot** eat **any** candy of type `i` unless you have eaten **all** candies of type `i - 1`.\n You must eat **at least** **one** candy per day until you have eaten all the candies.\n\n\nConstruct a boolean array `answer` such that `answer.length == queries.length` and `answer[i]` is `true` if you can eat a candy of type `favoriteTypei` on day `favoriteDayi` without eating **more than** `dailyCapi` candies on **any** day, and `false` otherwise. Note that you can eat different types of candy on the same day, provided that you follow rule 2.\n\n\nReturn *the constructed array* `answer`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]]",
                "Output": "** [true,false,true]",
                "Explanation": "**\n1- If you eat 2 candies (type 0) on day 0 and 2 candies (type 0) on day 1, you will eat a candy of type 0 on day 2.\n2- You can eat at most 4 candies each day.\n   If you eat 4 candies every day, you will eat 4 candies (type 0) on day 0 and 4 candies (type 0 and type 1) on day 1.\n   On day 2, you can only eat 4 candies (type 1 and type 2), so you cannot eat a candy of type 4 on day 2.\n3- If you eat 1 candy each day, you will eat a candy of type 2 on day 13."
            },
            {
                "Input": "** candiesCount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]",
                "Output": "** [false,true,true,false,false]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Palindrome Partitioning IV",
        "slug": "palindrome-partitioning-iv",
        "description": "Given a string `s`, return `true` *if it is possible to split the string* `s` *into three **non-empty** palindromic substrings. Otherwise, return* `false`.\u200b\u200b\u200b\u200b\u200b\n\n\nA string is said to be palindrome if it the same string when reversed.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"abcbdd\"",
                "Output": "** true",
                "Explanation": "** \"abcbdd\" = \"a\" + \"bcb\" + \"dd\", and all three substrings are palindromes."
            },
            {
                "Input": "** s = \"bcbddxy\"",
                "Output": "** false",
                "Explanation": "** s cannot be split into 3 palindromes."
            }
        ]
    },
    {
        "Title": "Sum of Unique Elements",
        "slug": "sum-of-unique-elements",
        "description": "You are given an integer array `nums`. The unique elements of an array are the elements that appear **exactly once** in the array.\n\n\nReturn *the **sum** of all the unique elements of* `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,2]",
                "Output": "** 4",
                "Explanation": "** The unique elements are [1,3], and the sum is 4."
            },
            {
                "Input": "** nums = [1,1,1,1,1]",
                "Output": "** 0",
                "Explanation": "** There are no unique elements, and the sum is 0."
            },
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** 15",
                "Explanation": "** The unique elements are [1,2,3,4,5], and the sum is 15."
            }
        ]
    },
    {
        "Title": "Maximum Absolute Sum of Any Subarray",
        "slug": "maximum-absolute-sum-of-any-subarray",
        "description": "You are given an integer array `nums`. The **absolute sum** of a subarray `[numsl, numsl+1, ..., numsr-1, numsr]` is `abs(numsl + numsl+1 + ... + numsr-1 + numsr)`.\n\n\nReturn *the **maximum** absolute sum of any **(possibly empty)** subarray of* `nums`.\n\n\nNote that `abs(x)` is defined as follows:\n\n\n If `x` is a negative integer, then `abs(x) = -x`.\n If `x` is a non-negative integer, then `abs(x) = x`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [1,-3,2,3,-4]",
                "Output": "** 5",
                "Explanation": "** The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5."
            },
            {
                "Input": "** nums = [2,-5,1,-4,3,-2]",
                "Output": "** 8",
                "Explanation": "** The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8."
            }
        ]
    },
    {
        "Title": "Minimum Length of String After Deleting Similar Ends",
        "slug": "minimum-length-of-string-after-deleting-similar-ends",
        "description": "Given a string `s` consisting only of characters `'a'`, `'b'`, and `'c'`. You are asked to apply the following algorithm on the string any number of times:\n\n\n1. Pick a **non-empty** prefix from the string `s` where all the characters in the prefix are equal.\n2. Pick a **non-empty** suffix from the string `s` where all the characters in this suffix are equal.\n3. The prefix and the suffix should not intersect at any index.\n4. The characters from the prefix and suffix must be the same.\n5. Delete both the prefix and the suffix.\n\n\nReturn *the **minimum length** of* `s` *after performing the above operation any number of times (possibly zero times)*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"ca\"",
                "Output": "** 2",
                "Explanation": "** You can't remove any characters, so the string stays as is."
            },
            {
                "Input": "** s = \"cabaabac\"",
                "Output": "** 0",
                "Explanation": "** An optimal sequence of operations is:\n- Take prefix = \"c\" and suffix = \"c\" and remove them, s = \"abaaba\".\n- Take prefix = \"a\" and suffix = \"a\" and remove them, s = \"baab\".\n- Take prefix = \"b\" and suffix = \"b\" and remove them, s = \"aa\".\n- Take prefix = \"a\" and suffix = \"a\" and remove them, s = \"\"."
            },
            {
                "Input": "** s = \"aabccabba\"",
                "Output": "** 3",
                "Explanation": "** An optimal sequence of operations is:\n- Take prefix = \"aa\" and suffix = \"a\" and remove them, s = \"bccabb\".\n- Take prefix = \"b\" and suffix = \"bb\" and remove them, s = \"cca\"."
            }
        ]
    },
    {
        "Title": "Maximum Number of Events That Can Be Attended II",
        "slug": "maximum-number-of-events-that-can-be-attended-ii",
        "description": "You are given an array of `events` where `events[i] = [startDayi, endDayi, valuei]`. The `ith` event starts at `startDayi`and ends at `endDayi`, and if you attend this event, you will receive a value of `valuei`. You are also given an integer `k` which represents the maximum number of events you can attend.\n\n\nYou can only attend one event at a time. If you choose to attend an event, you must attend the **entire** event. Note that the end day is **inclusive**: that is, you cannot attend two events where one of them starts and the other ends on the same day.\n\n\nReturn *the **maximum sum** of values that you can receive by attending events.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Dynamic Programming",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** events = [[1,2,4],[3,4,3],[2,3,1]], k = 2",
                "Output": "** 7",
                "Explanation": "** Choose the green events, 0 and 1 (0-indexed) for a total value of 4 + 3 = 7."
            },
            {
                "Input": "** events = [[1,2,4],[3,4,3],[2,3,10]], k = 2",
                "Output": "** 10",
                "Explanation": "** Choose event 2 for a total value of 10.\nNotice that you cannot attend any other event as they overlap, and that you do **not** have to attend k events."
            }
        ]
    },
    {
        "Title": "Check if Array Is Sorted and Rotated",
        "slug": "check-if-array-is-sorted-and-rotated",
        "description": "Given an array `nums`, return `true` *if the array was originally sorted in non-decreasing order, then rotated **some** number of positions (including zero)*. Otherwise, return `false`.\n\n\nThere may be **duplicates** in the original array.\n\n\nNote:** An array `A` rotated by `x` positions results in an array `B` of the same length such that `A[i] == B[(i+x) % A.length]`, where `%` is the modulo operation.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [3,4,5,1,2]",
                "Output": "** true",
                "Explanation": "** [1,2,3,4,5] is the original sorted array.\nYou can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2]."
            },
            {
                "Input": "** nums = [2,1,3,4]",
                "Output": "** false",
                "Explanation": "** There is no sorted array once rotated that can make nums."
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** true",
                "Explanation": "** [1,2,3] is the original sorted array.\nYou can rotate the array by x = 0 positions (i.e. no rotation) to make nums."
            }
        ]
    },
    {
        "Title": "Maximum Score From Removing Stones",
        "slug": "maximum-score-from-removing-stones",
        "description": "You are playing a solitaire game with **three piles** of stones of sizes `a`\u200b\u200b\u200b\u200b\u200b\u200b, `b`,\u200b\u200b\u200b\u200b\u200b\u200b and `c`\u200b\u200b\u200b\u200b\u200b\u200b respectively. Each turn you choose two **different non-empty** piles, take one stone from each, and add `1` point to your score. The game stops when there are **fewer than two non-empty** piles (meaning there are no more available moves).\n\n\nGiven three integers `a`\u200b\u200b\u200b\u200b\u200b, `b`,\u200b\u200b\u200b\u200b\u200b and `c`\u200b\u200b\u200b\u200b\u200b, return *the* ***maximum*** ***score** you can get.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Greedy",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** a = 2, b = 4, c = 6",
                "Output": "** 6",
                "Explanation": "** The starting state is (2, 4, 6). One optimal set of moves is:\n- Take from 1st and 3rd piles, state is now (1, 4, 5)\n- Take from 1st and 3rd piles, state is now (0, 4, 4)\n- Take from 2nd and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 6 points."
            },
            {
                "Input": "** a = 4, b = 4, c = 6",
                "Output": "** 7",
                "Explanation": "** The starting state is (4, 4, 6). One optimal set of moves is:\n- Take from 1st and 2nd piles, state is now (3, 3, 6)\n- Take from 1st and 3rd piles, state is now (2, 3, 5)\n- Take from 1st and 3rd piles, state is now (1, 3, 4)\n- Take from 1st and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 7 points."
            },
            {
                "Input": "** a = 1, b = 8, c = 8",
                "Output": "** 8",
                "Explanation": "** One optimal set of moves is to take from the 2nd and 3rd piles for 8 turns until they are empty.\nAfter that, there are fewer than two non-empty piles, so the game ends."
            }
        ]
    },
    {
        "Title": "Largest Merge Of Two Strings",
        "slug": "largest-merge-of-two-strings",
        "description": "You are given two strings `word1` and `word2`. You want to construct a string `merge` in the following way: while either `word1` or `word2` are non-empty, choose **one** of the following options:\n\n\n If `word1` is non-empty, append the **first** character in `word1` to `merge` and delete it from `word1`.\n\t+ For example, if `word1 = \"abc\"` and `merge = \"dv\"`, then after choosing this operation, `word1 = \"bc\"` and `merge = \"dva\"`.\n If `word2` is non-empty, append the **first** character in `word2` to `merge` and delete it from `word2`.\n\t+ For example, if `word2 = \"abc\"` and `merge = \"\"`, then after choosing this operation, `word2 = \"bc\"` and `merge = \"a\"`.\n\n\nReturn *the lexicographically **largest*** `merge` *you can construct*.\n\n\nA string `a` is lexicographically larger than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly larger than the corresponding character in `b`. For example, `\"abcd\"` is lexicographically larger than `\"abcc\"` because the first position they differ is at the fourth character, and `d` is greater than `c`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Two Pointers",
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** word1 = \"cabaa\", word2 = \"bcaaa\"",
                "Output": "** \"cbcabaaaaa\"",
                "Explanation": "** One way to get the lexicographically largest merge is:\n- Take from word1: merge = \"c\", word1 = \"abaa\", word2 = \"bcaaa\"\n- Take from word2: merge = \"cb\", word1 = \"abaa\", word2 = \"caaa\"\n- Take from word2: merge = \"cbc\", word1 = \"abaa\", word2 = \"aaa\"\n- Take from word1: merge = \"cbca\", word1 = \"baa\", word2 = \"aaa\"\n- Take from word1: merge = \"cbcab\", word1 = \"aa\", word2 = \"aaa\"\n- Append the remaining 5 a's from word1 and word2 at the end of merge."
            },
            {
                "Input": "** word1 = \"abcabc\", word2 = \"abdcaba\"",
                "Output": "** \"abdcabcabcaba\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Closest Subsequence Sum",
        "slug": "closest-subsequence-sum",
        "description": "You are given an integer array `nums` and an integer `goal`.\n\n\nYou want to choose a subsequence of `nums` such that the sum of its elements is the closest possible to `goal`. That is, if the sum of the subsequence's elements is `sum`, then you want to **minimize the absolute difference** `abs(sum - goal)`.\n\n\nReturn *the **minimum** possible value of* `abs(sum - goal)`.\n\n\nNote that a subsequence of an array is an array formed by removing some elements **(possibly all or none)** of the original array.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Two Pointers",
            "Dynamic Programming",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** nums = [5,-7,3,5], goal = 6",
                "Output": "** 0",
                "Explanation": "** Choose the whole array as a subsequence, with a sum of 6.\nThis is equal to the goal, so the absolute difference is 0."
            },
            {
                "Input": "** nums = [7,-9,15,-2], goal = -5",
                "Output": "** 1",
                "Explanation": "** Choose the subsequence [7,-9,-2], with a sum of -4.\nThe absolute difference is abs(-4 - (-5)) = abs(1) = 1, which is the minimum."
            },
            {
                "Input": "** nums = [1,2,3], goal = -7",
                "Output": "** 7",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Recyclable and Low Fat Products",
        "slug": "recyclable-and-low-fat-products",
        "description": "Table: `Products`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| product_id  | int     |\n| low_fats    | enum    |\n| recyclable  | enum    |\n+-------------+---------+\nproduct_id is the primary key (column with unique values) for this table.\nlow_fats is an ENUM (category) of type ('Y', 'N') where 'Y' means this product is low fat and 'N' means it is not.\nrecyclable is an ENUM (category) of types ('Y', 'N') where 'Y' means this product is recyclable and 'N' means it is not.\n```\n\n\u00a0\n\n\nWrite a solution to find the ids of products that are both low fat and recyclable.\n\n\nReturn the result table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nProducts table:\n+-------------+----------+------------+\n| product_id  | low_fats | recyclable |\n+-------------+----------+------------+\n| 0           | Y        | N          |\n| 1           | Y        | Y          |\n| 2           | N        | Y          |\n| 3           | Y        | Y          |\n| 4           | N        | N          |\n+-------------+----------+------------+",
                "Output": "** \n+-------------+\n| product_id  |\n+-------------+\n| 1           |\n| 3           |\n+-------------+",
                "Explanation": "** Only products 1 and 3 are both low fat and recyclable."
            }
        ]
    },
    {
        "Title": "Minimum Changes To Make Alternating Binary String",
        "slug": "minimum-changes-to-make-alternating-binary-string",
        "description": "You are given a string `s` consisting only of the characters `'0'` and `'1'`. In one operation, you can change any `'0'` to `'1'` or vice versa.\n\n\nThe string is called alternating if no two adjacent characters are equal. For example, the string `\"010\"` is alternating, while the string `\"0100\"` is not.\n\n\nReturn *the **minimum** number of operations needed to make* `s` *alternating*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"0100\"",
                "Output": "** 1",
                "Explanation": "** If you change the last character to '1', s will be \"0101\", which is alternating."
            },
            {
                "Input": "** s = \"10\"",
                "Output": "** 0",
                "Explanation": "** s is already alternating."
            },
            {
                "Input": "** s = \"1111\"",
                "Output": "** 2",
                "Explanation": "** You need two operations to reach \"0101\" or \"1010\"."
            }
        ]
    },
    {
        "Title": "Count Number of Homogenous Substrings",
        "slug": "count-number-of-homogenous-substrings",
        "description": "Given a string `s`, return *the number of **homogenous** substrings of* `s`*.* Since the answer may be too large, return it **modulo** `109 + 7`.\n\n\nA string is **homogenous** if all the characters of the string are the same.\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"abbcccaa\"",
                "Output": "** 13",
                "Explanation": "** The homogenous substrings are listed as below:\n\"a\"   appears 3 times.\n\"aa\"  appears 1 time.\n\"b\"   appears 2 times.\n\"bb\"  appears 1 time.\n\"c\"   appears 3 times.\n\"cc\"  appears 2 times.\n\"ccc\" appears 1 time.\n3 + 1 + 2 + 1 + 3 + 2 + 1 = 13."
            },
            {
                "Input": "** s = \"xy\"",
                "Output": "** 2",
                "Explanation": "** The homogenous substrings are \"x\" and \"y\"."
            },
            {
                "Input": "** s = \"zzzzz\"",
                "Output": "** 15",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Limit of Balls in a Bag",
        "slug": "minimum-limit-of-balls-in-a-bag",
        "description": "You are given an integer array `nums` where the `ith` bag contains `nums[i]` balls. You are also given an integer `maxOperations`.\n\n\nYou can perform the following operation at most `maxOperations` times:\n\n\n Take any bag of balls and divide it into two new bags with a **positive** number of balls.\n\t+ For example, a bag of `5` balls can become two new bags of `1` and `4` balls, or two new bags of `2` and `3` balls.\n\n\nYour penalty is the **maximum** number of balls in a bag. You want to **minimize** your penalty after the operations.\n\n\nReturn *the minimum possible penalty after performing the operations*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** nums = [9], maxOperations = 2",
                "Output": "** 3",
                "Explanation": "** \n- Divide the bag with 9 balls into two bags of sizes 6 and 3. [**9**] -> [6,3].\n- Divide the bag with 6 balls into two bags of sizes 3 and 3. [**6**,3] -> [3,3,3].\nThe bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3."
            },
            {
                "Input": "** nums = [2,4,8,2], maxOperations = 4",
                "Output": "** 2",
                "Explanation": "**\n- Divide the bag with 8 balls into two bags of sizes 4 and 4. [2,4,**8**,2] -> [2,4,4,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,**4**,4,4,2] -> [2,2,2,4,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,**4**,4,2] -> [2,2,2,2,2,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,2,2,**4**,2] -> [2,2,2,2,2,2,2,2].\nThe bag with the most number of balls has 2 balls, so your penalty is 2, and you should return 2."
            }
        ]
    },
    {
        "Title": "Minimum Degree of a Connected Trio in a Graph",
        "slug": "minimum-degree-of-a-connected-trio-in-a-graph",
        "description": "You are given an undirected graph. You are given an integer `n` which is the number of nodes in the graph and an array `edges`, where each `edges[i] = [ui, vi]` indicates that there is an undirected edge between `ui` and `vi`.\n\n\nA **connected trio** is a set of **three** nodes where there is an edge between **every** pair of them.\n\n\nThe **degree of a connected trio** is the number of edges where one endpoint is in the trio, and the other is not.\n\n\nReturn *the **minimum** degree of a connected trio in the graph, or* `-1` *if the graph has no connected trios.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Graph"
        ],
        "examples": [
            {
                "Input": "** n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]",
                "Output": "** 3",
                "Explanation": "** There is exactly one trio, which is [1,2,3]. The edges that form its degree are bolded in the figure above."
            },
            {
                "Input": "** n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]",
                "Output": "** 0",
                "Explanation": "** There are exactly three trios:\n1) [1,4,3] with degree 0.\n2) [2,5,6] with degree 2.\n3) [5,6,7] with degree 2."
            }
        ]
    },
    {
        "Title": "Longest Nice Substring",
        "slug": "longest-nice-substring",
        "description": "A string `s` is **nice** if, for every letter of the alphabet that `s` contains, it appears **both** in uppercase and lowercase. For example, `\"abABB\"` is nice because `'A'` and `'a'` appear, and `'B'` and `'b'` appear. However, `\"abA\"` is not because `'b'` appears, but `'B'` does not.\n\n\nGiven a string `s`, return *the longest **substring** of `s` that is **nice**. If there are multiple, return the substring of the **earliest** occurrence. If there are none, return an empty string*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Divide and Conquer",
            "Bit Manipulation",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** s = \"YazaAay\"",
                "Output": "** \"aAa\"",
                "Explanation": "** \"aAa\" is a nice string because 'A/a' is the only letter of the alphabet in s, and both 'A' and 'a' appear.\n\"aAa\" is the longest nice substring."
            },
            {
                "Input": "** s = \"Bb\"",
                "Output": "** \"Bb\"",
                "Explanation": "** \"Bb\" is a nice string because both 'B' and 'b' appear. The whole string is a substring."
            },
            {
                "Input": "** s = \"c\"",
                "Output": "** \"\"",
                "Explanation": "** There are no nice substrings."
            }
        ]
    },
    {
        "Title": "Form Array by Concatenating Subarrays of Another Array",
        "slug": "form-array-by-concatenating-subarrays-of-another-array",
        "description": "You are given a 2D integer array `groups` of length `n`. You are also given an integer array `nums`.\n\n\nYou are asked if you can choose `n` **disjoint** subarrays from the array `nums` such that the `ith` subarray is equal to `groups[i]` (**0-indexed**), and if `i > 0`, the `(i-1)th` subarray appears **before** the `ith` subarray in `nums` (i.e. the subarrays must be in the same order as `groups`).\n\n\nReturn `true` *if you can do this task, and* `false` *otherwise*.\n\n\nNote that the subarrays are **disjoint** if and only if there is no index `k` such that `nums[k]` belongs to more than one subarray. A subarray is a contiguous sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Greedy",
            "String Matching"
        ],
        "examples": [
            {
                "Input": "** groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0]",
                "Output": "** true",
                "Explanation": "** You can choose the 0th subarray as [1,-1,0,**1,-1,-1**,3,-2,0] and the 1st one as [1,-1,0,1,-1,-1,**3,-2,0**].\nThese subarrays are disjoint as they share no common nums[k] element."
            },
            {
                "Input": "** groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2]",
                "Output": "** false",
                "Explanation": "** Note that choosing the subarrays [**1,2,3,4**,10,-2] and [1,2,3,4,**10,-2**] is incorrect because they are not in the same order as in groups.\n[10,-2] must come before [1,2,3,4]."
            },
            {
                "Input": "** groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7]",
                "Output": "** false",
                "Explanation": "** Note that choosing the subarrays [7,7,**1,2,3**,4,7,7] and [7,7,1,2,**3,4**,7,7] is invalid because they are not disjoint.\nThey share a common elements nums[4] (0-indexed)."
            }
        ]
    },
    {
        "Title": "Tree of Coprimes",
        "slug": "tree-of-coprimes",
        "description": "There is a tree (i.e.,\u00a0a connected, undirected graph that has no cycles) consisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1` edges. Each node has a value associated with it, and the **root** of the tree is node `0`.\n\n\nTo represent this tree, you are given an integer array `nums` and a 2D array `edges`. Each `nums[i]` represents the `ith` node's value, and each `edges[j] = [uj, vj]` represents an edge between nodes `uj` and `vj` in the tree.\n\n\nTwo values `x` and `y` are **coprime** if `gcd(x, y) == 1` where `gcd(x, y)` is the **greatest common divisor** of `x` and `y`.\n\n\nAn ancestor of a node `i` is any other node on the shortest path from node `i` to the **root**. A node is **not** considered an ancestor of itself.\n\n\nReturn *an array* `ans` *of size* `n`, *where* `ans[i]` *is the closest ancestor to node* `i` *such that* `nums[i]` *and* `nums[ans[i]]` are **coprime**, or `-1` *if there is no such ancestor*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Tree",
            "Depth-First Search",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]",
                "Output": "** [-1,0,-1,0,0,0,-1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Merge Strings Alternately",
        "slug": "merge-strings-alternately",
        "description": "You are given two strings `word1` and `word2`. Merge the strings by adding letters in alternating order, starting with `word1`. If a string is longer than the other, append the additional letters onto the end of the merged string.\n\n\nReturn *the merged string.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** word1 = \"abc\", word2 = \"pqr\"",
                "Output": "** \"apbqcr\"",
                "Explanation": "**\u00a0The merged string will be merged as so:\r\nword1:  a   b   c\r\nword2:    p   q   r\r\nmerged: a p b q c r"
            },
            {
                "Input": "** word1 = \"ab\", word2 = \"pqrs\"",
                "Output": "** \"apbqrs\"",
                "Explanation": "**\u00a0Notice that as word2 is longer, \"rs\" is appended to the end.\r\nword1:  a   b \r\nword2:    p   q   r   s\r\nmerged: a p b q   r   s"
            },
            {
                "Input": "** word1 = \"abcd\", word2 = \"pq\"",
                "Output": "** \"apbqcd\"",
                "Explanation": "**\u00a0Notice that as word1 is longer, \"cd\" is appended to the end.\r\nword1:  a   b   c   d\r\nword2:    p   q \r\nmerged: a p b q c   d"
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Move All Balls to Each Box",
        "slug": "minimum-number-of-operations-to-move-all-balls-to-each-box",
        "description": "You have `n` boxes. You are given a binary string `boxes` of length `n`, where `boxes[i]` is `'0'` if the `ith` box is **empty**, and `'1'` if it contains **one** ball.\n\n\nIn one operation, you can move **one** ball from a box to an adjacent box. Box `i` is adjacent to box `j` if `abs(i - j) == 1`. Note that after doing so, there may be more than one ball in some boxes.\n\n\nReturn an array `answer` of size `n`, where `answer[i]` is the **minimum** number of operations needed to move all the balls to the `ith` box.\n\n\nEach `answer[i]` is calculated considering the **initial** state of the boxes.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String"
        ],
        "examples": [
            {
                "Input": "** boxes = \"110\"",
                "Output": "** [1,1,3]",
                "Explanation": "** The answer for each box is as follows:\n1) First box: you will have to move one ball from the second box to the first box in one operation.\n2) Second box: you will have to move one ball from the first box to the second box in one operation.\n3) Third box: you will have to move one ball from the first box to the third box in two operations, and move one ball from the second box to the third box in one operation."
            },
            {
                "Input": "** boxes = \"001011\"",
                "Output": "** [11,8,5,4,3,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Score from Performing Multiplication Operations",
        "slug": "maximum-score-from-performing-multiplication-operations",
        "description": "You are given two **0-indexed** integer arrays `nums` and `multipliers`of size `n` and `m` respectively, where `n >= m`.\n\n\nYou begin with a score of `0`. You want to perform **exactly** `m` operations. On the `ith` operation (**0-indexed**) you will:\n\n\n Choose one integer `x` from **either the start or the end** of the array `nums`.\n Add `multipliers[i] * x` to your score.\n\t+ Note that `multipliers[0]` corresponds to the first operation, `multipliers[1]` to the second operation, and so on.\n Remove `x` from `nums`.\n\n\nReturn *the **maximum** score after performing* `m` *operations.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3], multipliers = [3,2,1]",
                "Output": "** 14",
                "Explanation": "**\u00a0An optimal solution is as follows:\n- Choose from the end, [1,2,**3**], adding 3 * 3 = 9 to the score.\n- Choose from the end, [1,**2**], adding 2 * 2 = 4 to the score.\n- Choose from the end, [**1**], adding 1 * 1 = 1 to the score.\nThe total score is 9 + 4 + 1 = 14."
            },
            {
                "Input": "** nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]",
                "Output": "** 102",
                "Explanation": "** An optimal solution is as follows:\n- Choose from the start, [**-5**,-3,-3,-2,7,1], adding -5 * -10 = 50 to the score.\n- Choose from the start, [**-3**,-3,-2,7,1], adding -3 * -5 = 15 to the score.\n- Choose from the start, [**-3**,-2,7,1], adding -3 * 3 = -9 to the score.\n- Choose from the end, [-2,7,**1**], adding 1 * 4 = 4 to the score.\n- Choose from the end, [-2,**7**], adding 7 * 6 = 42 to the score. \nThe total score is 50 + 15 - 9 + 4 + 42 = 102."
            }
        ]
    },
    {
        "Title": "Maximize Palindrome Length From Subsequences",
        "slug": "maximize-palindrome-length-from-subsequences",
        "description": "You are given two strings, `word1` and `word2`. You want to construct a string in the following manner:\n\n\n Choose some **non-empty** subsequence `subsequence1` from `word1`.\n Choose some **non-empty** subsequence `subsequence2` from `word2`.\n Concatenate the subsequences: `subsequence1 + subsequence2`, to make the string.\n\n\nReturn *the **length** of the longest **palindrome** that can be constructed in the described manner.* If no palindromes can be constructed, return `0`.\n\n\nA **subsequence** of a string `s` is a string that can be made by deleting some (possibly none) characters from `s` without changing the order of the remaining characters.\n\n\nA **palindrome** is a string that reads the same forward\u00a0as well as backward.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** word1 = \"cacb\", word2 = \"cbba\"",
                "Output": "** 5",
                "Explanation": "** Choose \"ab\" from word1 and \"cba\" from word2 to make \"abcba\", which is a palindrome."
            },
            {
                "Input": "** word1 = \"ab\", word2 = \"ab\"",
                "Output": "** 3",
                "Explanation": "** Choose \"ab\" from word1 and \"a\" from word2 to make \"aba\", which is a palindrome."
            },
            {
                "Input": "** word1 = \"aa\", word2 = \"bb\"",
                "Output": "** 0",
                "Explanation": "** You cannot construct a palindrome from the described method, so return 0."
            }
        ]
    },
    {
        "Title": "Count Items Matching a Rule",
        "slug": "count-items-matching-a-rule",
        "description": "You are given an array `items`, where each `items[i] = [typei, colori, namei]` describes the type, color, and name of the `ith` item. You are also given a rule represented by two strings, `ruleKey` and `ruleValue`.\n\n\nThe `ith` item is said to match the rule if **one** of the following is true:\n\n\n `ruleKey == \"type\"` and `ruleValue == typei`.\n `ruleKey == \"color\"` and `ruleValue == colori`.\n `ruleKey == \"name\"` and `ruleValue == namei`.\n\n\nReturn *the number of items that match the given rule*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "examples": [
            {
                "Input": "** items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"lenovo\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"color\", ruleValue = \"silver\"",
                "Output": "** 1",
                "Explanation": "** There is only one item matching the given rule, which is [\"computer\",\"silver\",\"lenovo\"]."
            },
            {
                "Input": "** items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"phone\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"type\", ruleValue = \"phone\"",
                "Output": "** 2",
                "Explanation": "** There are only two items matching the given rule, which are [\"phone\",\"blue\",\"pixel\"] and [\"phone\",\"gold\",\"iphone\"]. Note that the item [\"computer\",\"silver\",\"phone\"] does not match."
            }
        ]
    },
    {
        "Title": "Closest Dessert Cost",
        "slug": "closest-dessert-cost",
        "description": "You would like to make dessert and are preparing to buy the ingredients. You have `n` ice cream base flavors and `m` types of toppings to choose from. You must follow these rules when making your dessert:\n\n\n There must be **exactly one** ice cream base.\n You can add **one or more** types of topping or have no toppings at all.\n There are **at most two** of **each type** of topping.\n\n\nYou are given three inputs:\n\n\n `baseCosts`, an integer array of length `n`, where each `baseCosts[i]` represents the price of the `ith` ice cream base flavor.\n `toppingCosts`, an integer array of length `m`, where each `toppingCosts[i]` is the price of **one** of the `ith` topping.\n `target`, an integer representing your target price for dessert.\n\n\nYou want to make a dessert with a total cost as close to `target` as possible.\n\n\nReturn *the closest possible cost of the dessert to* `target`. If there are multiple, return *the **lower** one.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** baseCosts = [1,7], toppingCosts = [3,4], target = 10",
                "Output": "** 10",
                "Explanation": "** Consider the following combination (all 0-indexed):\n- Choose base 1: cost 7\n- Take 1 of topping 0: cost 1 x 3 = 3\n- Take 0 of topping 1: cost 0 x 4 = 0\nTotal: 7 + 3 + 0 = 10."
            },
            {
                "Input": "** baseCosts = [2,3], toppingCosts = [4,5,100], target = 18",
                "Output": "** 17",
                "Explanation": "** Consider the following combination (all 0-indexed):\n- Choose base 1: cost 3\n- Take 1 of topping 0: cost 1 x 4 = 4\n- Take 2 of topping 1: cost 2 x 5 = 10\n- Take 0 of topping 2: cost 0 x 100 = 0\nTotal: 3 + 4 + 10 + 0 = 17. You cannot make a dessert with a total cost of 18."
            },
            {
                "Input": "** baseCosts = [3,10], toppingCosts = [2,5], target = 9",
                "Output": "** 8",
                "Explanation": "** It is possible to make desserts with cost 8 and 10. Return 8 as it is the lower cost."
            }
        ]
    },
    {
        "Title": "Equal Sum Arrays With Minimum Number of Operations",
        "slug": "equal-sum-arrays-with-minimum-number-of-operations",
        "description": "You are given two arrays of integers `nums1` and `nums2`, possibly of different lengths. The values in the arrays are between `1` and `6`, inclusive.\n\n\nIn one operation, you can change any integer's value in **any** of the arrays to **any** value between `1` and `6`, inclusive.\n\n\nReturn *the minimum number of operations required to make the sum of values in* `nums1` *equal to the sum of values in* `nums2`*.* Return `-1`\u200b\u200b\u200b\u200b\u200b if it is not possible to make the sum of the two arrays equal.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]",
                "Output": "** 3",
                "Explanation": "** You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed.\n- Change nums2[0] to 6. nums1 = [1,2,3,4,5,6], nums2 = [**6**,1,2,2,2,2].\n- Change nums1[5] to 1. nums1 = [1,2,3,4,5,**1**], nums2 = [6,1,2,2,2,2].\n- Change nums1[2] to 2. nums1 = [1,2,**2**,4,5,1], nums2 = [6,1,2,2,2,2]."
            },
            {
                "Input": "** nums1 = [1,1,1,1,1,1,1], nums2 = [6]",
                "Output": "** -1",
                "Explanation": "** There is no way to decrease the sum of nums1 or to increase the sum of nums2 to make them equal."
            },
            {
                "Input": "** nums1 = [6,6], nums2 = [1]",
                "Output": "** 3",
                "Explanation": "** You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed. \n- Change nums1[0] to 2. nums1 = [**2**,6], nums2 = [1].\n- Change nums1[1] to 2. nums1 = [2,**2**], nums2 = [1].\n- Change nums2[0] to 4. nums1 = [2,2], nums2 = [**4**]."
            }
        ]
    },
    {
        "Title": "Car Fleet II",
        "slug": "car-fleet-ii",
        "description": "There are `n` cars traveling at different speeds in the same direction along a one-lane road. You are given an array `cars` of length `n`, where `cars[i] = [positioni, speedi]` represents:\n\n\n `positioni` is the distance between the `ith` car and the beginning of the road in meters. It is guaranteed that `positioni < positioni+1`.\n `speedi` is the initial speed of the `ith` car in meters per second.\n\n\nFor simplicity, cars can be considered as points moving along the number line. Two cars collide when they occupy the same position. Once a car collides with another car, they unite and form a single car fleet. The cars in the formed fleet will have the same position and the same speed, which is the initial speed of the **slowest** car in the fleet.\n\n\nReturn an array `answer`, where `answer[i]` is the time, in seconds, at which the `ith` car collides with the next car, or `-1` if the car does not collide with the next car. Answers within `10-5` of the actual answers are accepted.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Stack",
            "Heap (Priority Queue)",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** cars = [[1,2],[2,1],[4,3],[7,2]]",
                "Output": "** [1.00000,-1.00000,3.00000,-1.00000]",
                "Explanation": "** After exactly one second, the first car will collide with the second car, and form a car fleet with speed 1 m/s. After exactly 3 seconds, the third car will collide with the fourth car, and form a car fleet with speed 2 m/s."
            },
            {
                "Input": "** cars = [[3,4],[5,4],[6,3],[9,1]]",
                "Output": "** [2.00000,1.00000,1.50000,-1.00000]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Nearest Point That Has the Same X or Y Coordinate",
        "slug": "find-nearest-point-that-has-the-same-x-or-y-coordinate",
        "description": "You are given two integers, `x` and `y`, which represent your current location on a Cartesian grid: `(x, y)`. You are also given an array `points` where each `points[i] = [ai, bi]` represents that a point exists at `(ai, bi)`. A point is **valid** if it shares the same x-coordinate or the same y-coordinate as your location.\n\n\nReturn *the index **(0-indexed)** of the **valid** point with the smallest **Manhattan distance** from your current location*. If there are multiple, return *the valid point with the **smallest** index*. If there are no valid points, return `-1`.\n\n\nThe **Manhattan distance** between two points `(x1, y1)` and `(x2, y2)` is `abs(x1 - x2) + abs(y1 - y2)`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]",
                "Output": "** 2",
                "Explanation": "** Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2."
            },
            {
                "Input": "** x = 3, y = 4, points = [[3,4]]",
                "Output": "** 0",
                "Explanation": "** The answer is allowed to be on the same location as your current location."
            },
            {
                "Input": "** x = 3, y = 4, points = [[2,3]]",
                "Output": "** -1",
                "Explanation": "** There are no valid points."
            }
        ]
    },
    {
        "Title": "Check if Number is a Sum of Powers of Three",
        "slug": "check-if-number-is-a-sum-of-powers-of-three",
        "description": "Given an integer `n`, return `true` *if it is possible to represent* `n` *as the sum of distinct powers of three.* Otherwise, return `false`.\n\n\nAn integer `y` is a power of three if there exists an integer `x` such that `y == 3x`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** n = 12",
                "Output": "** true",
                "Explanation": "** 12 = 31 + 32"
            },
            {
                "Input": "** n = 91",
                "Output": "** true",
                "Explanation": "** 91 = 30 + 32 + 34"
            },
            {
                "Input": "** n = 21",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sum of Beauty of All Substrings",
        "slug": "sum-of-beauty-of-all-substrings",
        "description": "The **beauty** of a string is the difference in frequencies between the most frequent and least frequent characters.\n\n\n For example, the beauty of `\"abaacc\"` is `3 - 1 = 2`.\n\n\nGiven a string `s`, return *the sum of **beauty** of all of its substrings.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** s = \"aabcb\"",
                "Output": "** 5",
                "Explanation": "** The substrings with non-zero beauty are [\"aab\",\"aabc\",\"aabcb\",\"abcb\",\"bcb\"], each with beauty equal to 1."
            },
            {
                "Input": "** s = \"aabcbaa\"",
                "Output": "** 17",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count Pairs Of Nodes",
        "slug": "count-pairs-of-nodes",
        "description": "You are given an undirected graph defined by an integer `n`, the number of nodes, and a 2D integer array `edges`, the edges in the graph, where `edges[i] = [ui, vi]` indicates that there is an **undirected** edge between `ui` and `vi`. You are also given an integer array `queries`.\n\n\nLet `incident(a, b)` be defined as the **number of edges** that are connected to **either** node `a` or `b`.\n\n\nThe answer to the `jth` query is the **number of pairs** of nodes `(a, b)` that satisfy **both** of the following conditions:\n\n\n `a < b`\n `incident(a, b) > queries[j]`\n\n\nReturn *an array* `answers` *such that* `answers.length == queries.length` *and* `answers[j]` *is the answer of the* `jth` *query*.\n\n\nNote that there can be **multiple edges** between the same two nodes.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Graph",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3]",
                "Output": "** [6,5]",
                "Explanation": "** The calculations for incident(a, b) are shown in the table above.\nThe answers for each of the queries are as follows:\n- answers[0] = 6. All the pairs have an incident(a, b) value greater than 2.\n- answers[1] = 5. All the pairs except (3, 4) have an incident(a, b) value greater than 3."
            }
        ]
    },
    {
        "Title": "Check if Binary String Has at Most One Segment of Ones",
        "slug": "check-if-binary-string-has-at-most-one-segment-of-ones",
        "description": "Given a binary string `s` **\u200b\u200b\u200b\u200b\u200bwithout leading zeros**, return `true`\u200b\u200b\u200b *if* `s` *contains **at most one contiguous segment of ones***. Otherwise, return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"1001\"",
                "Output": "** false",
                "Explanation": "** The ones do not form a contiguous segment."
            },
            {
                "Input": "** s = \"110\"",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Elements to Add to Form a Given Sum",
        "slug": "minimum-elements-to-add-to-form-a-given-sum",
        "description": "You are given an integer array `nums` and two integers `limit` and `goal`. The array `nums` has an interesting property that `abs(nums[i]) <= limit`.\n\n\nReturn *the minimum number of elements you need to add to make the sum of the array equal to* `goal`. The array must maintain its property that `abs(nums[i]) <= limit`.\n\n\nNote that `abs(x)` equals `x` if `x >= 0`, and `-x` otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums = [1,-1,1], limit = 3, goal = -4",
                "Output": "** 2",
                "Explanation": "** You can add -2 and -3, then the sum of the array will be 1 - 1 + 1 - 2 - 3 = -4."
            },
            {
                "Input": "** nums = [1,-10,9,1], limit = 100, goal = 0",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Restricted Paths From First to Last Node",
        "slug": "number-of-restricted-paths-from-first-to-last-node",
        "description": "There is an undirected weighted connected graph. You are given a positive integer `n` which denotes that the graph has `n` nodes labeled from `1` to `n`, and an array `edges` where each `edges[i] = [ui, vi, weighti]` denotes that there is an edge between nodes `ui` and `vi` with weight equal to `weighti`.\n\n\nA path from node `start` to node `end` is a sequence of nodes `[z0, z1,z2, ..., zk]` such that `z0 = start` and `zk = end` and there is an edge between `zi` and `zi+1` where `0 <= i <= k-1`.\n\n\nThe distance of a path is the sum of the weights on the edges of the path. Let `distanceToLastNode(x)` denote the shortest distance of a path between node `n` and node `x`. A **restricted path** is a path that also satisfies that `distanceToLastNode(zi) > distanceToLastNode(zi+1)` where `0 <= i <= k-1`.\n\n\nReturn *the number of restricted paths from node* `1` *to node* `n`. Since that number may be too large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming",
            "Graph",
            "Topological Sort",
            "Heap (Priority Queue)",
            "Shortest Path"
        ],
        "examples": [
            {
                "Input": "** n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]",
                "Output": "** 3",
                "Explanation": "** Each circle contains the node number in black and its distanceToLastNode value in blue. The three restricted paths are:\n1) 1 --> 2 --> 5\n2) 1 --> 2 --> 3 --> 5\n3) 1 --> 3 --> 5"
            },
            {
                "Input": "** n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]]",
                "Output": "** 1",
                "Explanation": "** Each circle contains the node number in black and its distanceToLastNode value in blue. The only restricted path is 1 --> 3 --> 7."
            }
        ]
    },
    {
        "Title": "Make the XOR of All Segments Equal to Zero",
        "slug": "make-the-xor-of-all-segments-equal-to-zero",
        "description": "You are given an array `nums`\u200b\u200b\u200b and an integer `k`\u200b\u200b\u200b\u200b\u200b. The XOR of a segment `[left, right]` where `left <= right` is the `XOR` of all the elements with indices between `left` and `right`, inclusive: `nums[left] XOR nums[left+1] XOR ... XOR nums[right]`.\n\n\nReturn *the minimum number of elements to change in the array* such that the `XOR` of all segments of size `k`\u200b\u200b\u200b\u200b\u200b\u200b is equal to zero.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,0,3,0], k = 1",
                "Output": "** 3",
                "Explanation": "** Modify the array from [**1**,**2**,0,**3**,0] to from [**0**,**0**,0,**0**,0]."
            },
            {
                "Input": "** nums = [3,4,5,2,1,7,3,4,7], k = 3",
                "Output": "** 3",
                "Explanation": "** Modify the array from [3,4,**5**,**2**,**1**,7,3,4,7] to [3,4,**7**,**3**,**4**,7,3,4,7]."
            },
            {
                "Input": "** nums = [1,2,4,1,2,5,1,2,6], k = 3",
                "Output": "** 3",
                "Explanation": "** Modify the array from [1,2,**4,**1,2,**5**,1,2,**6**] to [1,2,**3**,1,2,**3**,1,2,**3**]."
            }
        ]
    },
    {
        "Title": "Primary Department for Each Employee",
        "slug": "primary-department-for-each-employee",
        "description": "Table: `Employee`\n\n\n\n```\n\n+---------------+---------+\n| Column Name   |  Type   |\n+---------------+---------+\n| employee_id   | int     |\n| department_id | int     |\n| primary_flag  | varchar |\n+---------------+---------+\n(employee_id, department_id) is the primary key (combination of columns with unique values) for this table.\nemployee_id is the id of the employee.\ndepartment_id is the id of the department to which the employee belongs.\nprimary_flag is an ENUM (category) of type ('Y', 'N'). If the flag is 'Y', the department is the primary department for the employee. If the flag is 'N', the department is not the primary.\n\n```\n\n\u00a0\n\n\nEmployees can belong to multiple departments. When the employee joins other departments, they need to decide which department is their primary department. Note that when an employee belongs to only one department, their primary column is `'N'`.\n\n\nWrite a solution to report all the employees with their primary department. For employees who belong to one department, report their only department.\n\n\nReturn the result table in **any order**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nEmployee table:\n+-------------+---------------+--------------+\n| employee_id | department_id | primary_flag |\n+-------------+---------------+--------------+\n| 1           | 1             | N            |\n| 2           | 1             | Y            |\n| 2           | 2             | N            |\n| 3           | 3             | N            |\n| 4           | 2             | N            |\n| 4           | 3             | Y            |\n| 4           | 4             | N            |\n+-------------+---------------+--------------+",
                "Output": "** \n+-------------+---------------+\n| employee_id | department_id |\n+-------------+---------------+\n| 1           | 1             |\n| 2           | 1             |\n| 3           | 3             |\n| 4           | 3             |\n+-------------+---------------+",
                "Explanation": "** \n- The Primary department for employee 1 is 1.\n- The Primary department for employee 2 is 1.\n- The Primary department for employee 3 is 3.\n- The Primary department for employee 4 is 3."
            }
        ]
    },
    {
        "Title": "Check if One String Swap Can Make Strings Equal",
        "slug": "check-if-one-string-swap-can-make-strings-equal",
        "description": "You are given two strings `s1` and `s2` of equal length. A **string swap** is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.\n\n\nReturn `true` *if it is possible to make both strings equal by performing **at most one string swap** on **exactly one** of the strings.* Otherwise, return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** s1 = \"bank\", s2 = \"kanb\"",
                "Output": "** true",
                "Explanation": "** For example, swap the first character with the last character of s2 to make \"bank\"."
            },
            {
                "Input": "** s1 = \"attack\", s2 = \"defend\"",
                "Output": "** false",
                "Explanation": "** It is impossible to make them equal with one string swap."
            },
            {
                "Input": "** s1 = \"kelb\", s2 = \"kelb\"",
                "Output": "** true",
                "Explanation": "** The two strings are already equal, so no string swap operation is required."
            }
        ]
    },
    {
        "Title": "Find Center of Star Graph",
        "slug": "find-center-of-star-graph",
        "description": "There is an undirected **star** graph consisting of `n` nodes labeled from `1` to `n`. A star graph is a graph where there is one **center** node and **exactly** `n - 1` edges that connect the center node with every other node.\n\n\nYou are given a 2D integer array `edges` where each `edges[i] = [ui, vi]` indicates that there is an edge between the nodes `ui` and `vi`. Return the center of the given star graph.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Graph"
        ],
        "examples": [
            {
                "Input": "** edges = [[1,2],[2,3],[4,2]]",
                "Output": "** 2",
                "Explanation": "** As shown in the figure above, node 2 is connected to every other node, so 2 is the center."
            }
        ]
    },
    {
        "Title": "Maximum Average Pass Ratio",
        "slug": "maximum-average-pass-ratio",
        "description": "There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array `classes`, where `classes[i] = [passi, totali]`. You know beforehand that in the `ith` class, there are `totali` total students, but only `passi` number of students will pass the exam.\n\n\nYou are also given an integer `extraStudents`. There are another `extraStudents` brilliant students that are **guaranteed** to pass the exam of any class they are assigned to. You want to assign each of the `extraStudents` students to a class in a way that **maximizes** the **average** pass ratio across **all** the classes.\n\n\nThe **pass ratio** of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The **average pass ratio** is the sum of pass ratios of all the classes divided by the number of the classes.\n\n\nReturn *the **maximum** possible average pass ratio after assigning the* `extraStudents` *students.* Answers within `10-5` of the actual answer will be accepted.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** classes = [[1,2],[3,5],[2,2]], extraStudents = 2",
                "Output": "** 0.78333",
                "Explanation": "** You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333."
            },
            {
                "Input": "** classes = [[2,4],[3,9],[4,5],[2,10]], extraStudents = 4",
                "Output": "** 0.53485",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Score of a Good Subarray",
        "slug": "maximum-score-of-a-good-subarray",
        "description": "You are given an array of integers `nums` **(0-indexed)** and an integer `k`.\n\n\nThe **score** of a subarray `(i, j)` is defined as `min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1)`. A **good** subarray is a subarray where `i <= k <= j`.\n\n\nReturn *the maximum possible **score** of a **good** subarray.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Stack",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** nums = [1,4,3,7,4,5], k = 3",
                "Output": "** 15",
                "Explanation": "** The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15."
            },
            {
                "Input": "** nums = [5,5,4,5,4,1,1,1], k = 0",
                "Output": "** 20",
                "Explanation": "** The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20."
            }
        ]
    },
    {
        "Title": "Rearrange Products Table",
        "slug": "rearrange-products-table",
        "description": "Table: `Products`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| product_id  | int     |\n| store1      | int     |\n| store2      | int     |\n| store3      | int     |\n+-------------+---------+\nproduct_id is the primary key (column with unique values) for this table.\nEach row in this table indicates the product's price in 3 different stores: store1, store2, and store3.\nIf the product is not available in a store, the price will be null in that store's column.\n\n```\n\n\u00a0\n\n\nWrite a solution to rearrange the `Products` table so that each row has `(product_id, store, price)`. If a product is not available in a store, do **not** include a row with that `product_id` and `store` combination in the result table.\n\n\nReturn the result table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nProducts table:\n+------------+--------+--------+--------+\n| product_id | store1 | store2 | store3 |\n+------------+--------+--------+--------+\n| 0          | 95     | 100    | 105    |\n| 1          | 70     | null   | 80     |\n+------------+--------+--------+--------+",
                "Output": "** \n+------------+--------+-------+\n| product_id | store  | price |\n+------------+--------+-------+\n| 0          | store1 | 95    |\n| 0          | store2 | 100   |\n| 0          | store3 | 105   |\n| 1          | store1 | 70    |\n| 1          | store3 | 80    |\n+------------+--------+-------+",
                "Explanation": "** \nProduct 0 is available in all three stores with prices 95, 100, and 105 respectively.\nProduct 1 is available in store1 with price 70 and store3 with price 80. The product is not available in store2."
            }
        ]
    },
    {
        "Title": "Second Largest Digit in a String",
        "slug": "second-largest-digit-in-a-string",
        "description": "Given an alphanumeric string `s`, return *the **second largest** numerical digit that appears in* `s`*, or* `-1` *if it does not exist*.\n\n\nAn **alphanumeric**string is a string consisting of lowercase English letters and digits.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"dfa12321afd\"",
                "Output": "** 2",
                "Explanation": "** The digits that appear in s are [1, 2, 3]. The second largest digit is 2."
            },
            {
                "Input": "** s = \"abc1111\"",
                "Output": "** -1",
                "Explanation": "** The digits that appear in s are [1]. There is no second largest digit."
            }
        ]
    },
    {
        "Title": "Design Authentication Manager",
        "slug": "design-authentication-manager",
        "description": "There is an authentication system that works with authentication tokens. For each session, the user will receive a new authentication token that will expire `timeToLive` seconds after the `currentTime`. If the token is renewed, the expiry time will be **extended** to expire `timeToLive` seconds after the (potentially different) `currentTime`.\n\n\nImplement the `AuthenticationManager` class:\n\n\n `AuthenticationManager(int timeToLive)` constructs the `AuthenticationManager` and sets the `timeToLive`.\n `generate(string tokenId, int currentTime)` generates a new token with the given `tokenId` at the given `currentTime` in seconds.\n `renew(string tokenId, int currentTime)` renews the **unexpired** token with the given `tokenId` at the given `currentTime` in seconds. If there are no unexpired tokens with the given `tokenId`, the request is ignored, and nothing happens.\n `countUnexpiredTokens(int currentTime)` returns the number of **unexpired** tokens at the given currentTime.\n\n\nNote that if a token expires at time `t`, and another action happens on time `t` (`renew` or `countUnexpiredTokens`), the expiration takes place **before** the other actions.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Design"
        ],
        "examples": [
            {
                "Input": "[\"AuthenticationManager\", \"renew\", \"generate\", \"countUnexpiredTokens\", \"generate\", \"renew\", \"renew\", \"countUnexpiredTokens\"]\n[[5], [\"aaa\", 1], [\"aaa\", 2], [6], [\"bbb\", 7], [\"aaa\", 8], [\"bbb\", 10], [15]]",
                "Output": "[null, null, null, 1, null, null, null, 0]",
                "Explanation": "AuthenticationManager authenticationManager = new AuthenticationManager(5); // Constructs the AuthenticationManager with timeToLive = 5 seconds.\nauthenticationManager.renew(\"aaa\", 1); // No token exists with tokenId \"aaa\" at time 1, so nothing happens.\nauthenticationManager.generate(\"aaa\", 2); // Generates a new token with tokenId \"aaa\" at time 2.\nauthenticationManager.countUnexpiredTokens(6); // The token with tokenId \"aaa\" is the only unexpired one at time 6, so return 1.\nauthenticationManager.generate(\"bbb\", 7); // Generates a new token with tokenId \"bbb\" at time 7.\nauthenticationManager.renew(\"aaa\", 8); // The token with tokenId \"aaa\" expired at time 7, and 8 >= 7, so at time 8 the renew request is ignored, and nothing happens.\nauthenticationManager.renew(\"bbb\", 10); // The token with tokenId \"bbb\" is unexpired at time 10, so the renew request is fulfilled and now the token will expire at time 15.\nauthenticationManager.countUnexpiredTokens(15); // The token with tokenId \"bbb\" expires at time 15, and the token with tokenId \"aaa\" expired at time 7, so currently no token is unexpired, so return 0."
            }
        ]
    },
    {
        "Title": "Maximum Number of Consecutive Values You Can Make",
        "slug": "maximum-number-of-consecutive-values-you-can-make",
        "description": "You are given an integer array `coins` of length `n` which represents the `n` coins that you own. The value of the `ith` coin is `coins[i]`. You can **make** some value `x` if you can choose some of your `n` coins such that their values sum up to `x`.\n\n\nReturn the *maximum number of consecutive integer values that you **can** **make** with your coins **starting** from and **including*** `0`.\n\n\nNote that you may have multiple coins of the same value.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** coins = [1,3]",
                "Output": "** 2",
                "Explanation": "** You can make the following values:\n- 0: take []\n- 1: take [1]\nYou can make 2 consecutive integer values starting from 0."
            },
            {
                "Input": "** coins = [1,1,1,4]",
                "Output": "** 8",
                "Explanation": "** You can make the following values:\n- 0: take []\n- 1: take [1]\n- 2: take [1,1]\n- 3: take [1,1,1]\n- 4: take [4]\n- 5: take [4,1]\n- 6: take [4,1,1]\n- 7: take [4,1,1,1]\nYou can make 8 consecutive integer values starting from 0."
            },
            {
                "Input": "** nums = [1,4,10,3,1]",
                "Output": "** 20",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximize Score After N Operations",
        "slug": "maximize-score-after-n-operations",
        "description": "You are given `nums`, an array of positive integers of size `2 * n`. You must perform `n` operations on this array.\n\n\nIn the `ith` operation **(1-indexed)**, you will:\n\n\n Choose two elements, `x` and `y`.\n Receive a score of `i * gcd(x, y)`.\n Remove `x` and `y` from `nums`.\n\n\nReturn *the maximum score you can receive after performing* `n` *operations.\n\n\nThe function `gcd(x, y)` is the greatest common divisor of `x` and `y`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Backtracking",
            "Bit Manipulation",
            "Number Theory",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2]",
                "Output": "** 1",
                "Explanation": "**\u00a0The optimal choice of operations is:\n(1 * gcd(1, 2)) = 1"
            },
            {
                "Input": "** nums = [3,4,6,8]",
                "Output": "** 11",
                "Explanation": "**\u00a0The optimal choice of operations is:\n(1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11"
            },
            {
                "Input": "** nums = [1,2,3,4,5,6]",
                "Output": "** 14",
                "Explanation": "**\u00a0The optimal choice of operations is:\n(1 * gcd(1, 5)) + (2 * gcd(2, 4)) + (3 * gcd(3, 6)) = 1 + 4 + 9 = 14"
            }
        ]
    },
    {
        "Title": "Maximum Ascending Subarray Sum",
        "slug": "maximum-ascending-subarray-sum",
        "description": "Given an array of positive integers `nums`, return the *maximum possible sum of an **ascending** subarray in* `nums`.\n\n\nA subarray is defined as a contiguous sequence of numbers in an array.\n\n\nA subarray `[numsl, numsl+1, ..., numsr-1, numsr]` is **ascending** if for all `i` where `l <= i < r`, `numsi  < numsi+1`. Note that a subarray of size `1` is **ascending**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [10,20,30,5,10,50]",
                "Output": "** 65",
                "Explanation": "** [5,10,50] is the ascending subarray with the maximum sum of 65."
            },
            {
                "Input": "** nums = [10,20,30,40,50]",
                "Output": "** 150",
                "Explanation": "** [10,20,30,40,50] is the ascending subarray with the maximum sum of 150."
            },
            {
                "Input": "** nums = [12,17,15,13,10,11,12]",
                "Output": "** 33",
                "Explanation": "** [10,11,12] is the ascending subarray with the maximum sum of 33."
            }
        ]
    },
    {
        "Title": "Number of Orders in the Backlog",
        "slug": "number-of-orders-in-the-backlog",
        "description": "You are given a 2D integer array `orders`, where each `orders[i] = [pricei, amounti, orderTypei]` denotes that `amounti`orders have been placed of type `orderTypei` at the price `pricei`. The `orderTypei` is:\n\n\n `0` if it is a batch of `buy` orders, or\n `1` if it is a batch of `sell` orders.\n\n\nNote that `orders[i]` represents a batch of `amounti` independent orders with the same price and order type. All orders represented by `orders[i]` will be placed before all orders represented by `orders[i+1]` for all valid `i`.\n\n\nThere is a **backlog** that consists of orders that have not been executed. The backlog is initially empty. When an order is placed, the following happens:\n\n\n If the order is a `buy` order, you look at the `sell` order with the **smallest** price in the backlog. If that `sell` order's price is **smaller than or equal to** the current `buy` order's price, they will match and be executed, and that `sell` order will be removed from the backlog. Else, the `buy` order is added to the backlog.\n Vice versa, if the order is a `sell` order, you look at the `buy` order with the **largest** price in the backlog. If that `buy` order's price is **larger than or equal to** the current `sell` order's price, they will match and be executed, and that `buy` order will be removed from the backlog. Else, the `sell` order is added to the backlog.\n\n\nReturn *the total **amount** of orders in the backlog after placing all the orders from the input*. Since this number can be large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Heap (Priority Queue)",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]",
                "Output": "** 6",
                "Explanation": "** Here is what happens with the orders:\r\n- 5 orders of type buy with price 10 are placed. There are no sell orders, so the 5 orders are added to the backlog.\r\n- 2 orders of type sell with price 15 are placed. There are no buy orders with prices larger than or equal to 15, so the 2 orders are added to the backlog.\r\n- 1 order of type sell with price 25 is placed. There are no buy orders with prices larger than or equal to 25 in the backlog, so this order is added to the backlog.\r\n- 4 orders of type buy with price 30 are placed. The first 2 orders are matched with the 2 sell orders of the least price, which is 15 and these 2 sell orders are removed from the backlog. The 3rd order is matched with the sell order of the least price, which is 25 and this sell order is removed from the backlog. Then, there are no more sell orders in the backlog, so the 4th order is added to the backlog.\r\nFinally, the backlog has 5 buy orders with price 10, and 1 buy order with price 30. So the total number of orders in the backlog is 6."
            },
            {
                "Input": "** orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]",
                "Output": "** 999999984",
                "Explanation": "** Here is what happens with the orders:\r\n- 109 orders of type sell with price 7 are placed. There are no buy orders, so the 109 orders are added to the backlog.\r\n- 3 orders of type buy with price 15 are placed. They are matched with the 3 sell orders with the least price which is 7, and those 3 sell orders are removed from the backlog.\r\n- 999999995 orders of type buy with price 5 are placed. The least price of a sell order is 7, so the 999999995 orders are added to the backlog.\r\n- 1 order of type sell with price 5 is placed. It is matched with the buy order of the highest price, which is 5, and that buy order is removed from the backlog.\r\nFinally, the backlog has (1000000000-3) sell orders with price 7, and (999999995-1) buy orders with price 5. So the total number of orders = 1999999991, which is equal to 999999984 % (109 + 7)."
            }
        ]
    },
    {
        "Title": "Maximum Value at a Given Index in a Bounded Array",
        "slug": "maximum-value-at-a-given-index-in-a-bounded-array",
        "description": "You are given three positive integers:\u00a0`n`, `index`, and `maxSum`. You want to construct an array `nums` (**0-indexed**)that satisfies the following conditions:\n\n\n `nums.length == n`\n `nums[i]` is a **positive** integer where `0 <= i < n`.\n `abs(nums[i] - nums[i+1]) <= 1` where `0 <= i < n-1`.\n The sum of all the elements of `nums` does not exceed `maxSum`.\n `nums[index]` is **maximized**.\n\n\nReturn `nums[index]` *of the constructed array*.\n\n\nNote that `abs(x)` equals `x` if `x >= 0`, and `-x` otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Binary Search",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** n = 4, index = 2,  maxSum = 6",
                "Output": "** 2",
                "Explanation": "** nums = [1,2,**2**,1] is one array that satisfies all the conditions.\nThere are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2]."
            },
            {
                "Input": "** n = 6, index = 1,  maxSum = 10",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count Pairs With XOR in a Range",
        "slug": "count-pairs-with-xor-in-a-range",
        "description": "Given a **(0-indexed)** integer array `nums` and two integers `low` and `high`, return *the number of **nice pairs***.\n\n\nA **nice pair** is a pair `(i, j)` where `0 <= i < j < nums.length` and `low <= (nums[i] XOR nums[j]) <= high`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Bit Manipulation",
            "Trie"
        ],
        "examples": [
            {
                "Input": "** nums = [1,4,2,7], low = 2, high = 6",
                "Output": "** 6",
                "Explanation": "** All nice pairs (i, j) are as follows:\r\n    - (0, 1): nums[0] XOR nums[1] = 5 \r\n    - (0, 2): nums[0] XOR nums[2] = 3\r\n    - (0, 3): nums[0] XOR nums[3] = 6\r\n    - (1, 2): nums[1] XOR nums[2] = 6\r\n    - (1, 3): nums[1] XOR nums[3] = 3\r\n    - (2, 3): nums[2] XOR nums[3] = 5"
            },
            {
                "Input": "** nums = [9,8,4,2,1], low = 5, high = 14",
                "Output": "** 8",
                "Explanation": "** All nice pairs (i, j) are as follows:\r\n\u200b\u200b\u200b\u200b\u200b    - (0, 2): nums[0] XOR nums[2] = 13\r\n\u00a0   - (0, 3): nums[0] XOR nums[3] = 11\r\n\u00a0   - (0, 4): nums[0] XOR nums[4] = 8\r\n\u00a0   - (1, 2): nums[1] XOR nums[2] = 12\r\n\u00a0   - (1, 3): nums[1] XOR nums[3] = 10\r\n\u00a0   - (1, 4): nums[1] XOR nums[4] = 9\r\n\u00a0   - (2, 3): nums[2] XOR nums[3] = 6\r\n\u00a0   - (2, 4): nums[2] XOR nums[4] = 5"
            }
        ]
    },
    {
        "Title": "Number of Different Integers in a String",
        "slug": "number-of-different-integers-in-a-string",
        "description": "You are given a string `word` that consists of digits and lowercase English letters.\n\n\nYou will replace every non-digit character with a space. For example, `\"a123bc34d8ef34\"` will become `\" 123\u00a0 34 8\u00a0 34\"`. Notice that you are left with some integers that are separated by at least one space: `\"123\"`, `\"34\"`, `\"8\"`, and `\"34\"`.\n\n\nReturn *the number of **different** integers after performing the replacement operations on* `word`.\n\n\nTwo integers are considered different if their decimal representations **without any leading zeros** are different.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** word = \"a123bc34d8ef34\"",
                "Output": "** 3",
                "Explanation": "** The three different integers are \"123\", \"34\", and \"8\". Notice that \"34\" is only counted once."
            },
            {
                "Input": "** word = \"leet1234code234\"",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** word = \"a1b01c001\"",
                "Output": "** 1",
                "Explanation": "** The three integers \"1\", \"01\", and \"001\" all represent the same integer because\nthe leading zeros are ignored when comparing their decimal values."
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Reinitialize a Permutation",
        "slug": "minimum-number-of-operations-to-reinitialize-a-permutation",
        "description": "You are given an **even** integer `n`\u200b\u200b\u200b\u200b\u200b\u200b. You initially have a permutation `perm` of size `n`\u200b\u200b where `perm[i] == i`\u200b **(0-indexed)**\u200b\u200b\u200b\u200b.\n\n\nIn one operation, you will create a new array `arr`, and for each `i`:\n\n\n If `i % 2 == 0`, then `arr[i] = perm[i / 2]`.\n If `i % 2 == 1`, then `arr[i] = perm[n / 2 + (i - 1) / 2]`.\n\n\nYou will then assign `arr`\u200b\u200b\u200b\u200b to `perm`.\n\n\nReturn *the minimum **non-zero** number of operations you need to perform on* `perm` *to return the permutation to its initial value.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** 1",
                "Explanation": "** perm = [0,1] initially.\nAfter the 1st operation, perm = [0,1]\nSo it takes only 1 operation."
            },
            {
                "Input": "** n = 4",
                "Output": "** 2",
                "Explanation": "** perm = [0,1,2,3] initially.\nAfter the 1st operation, perm = [0,2,1,3]\nAfter the 2nd operation, perm = [0,1,2,3]\nSo it takes only 2 operations."
            },
            {
                "Input": "** n = 6",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Evaluate the Bracket Pairs of a String",
        "slug": "evaluate-the-bracket-pairs-of-a-string",
        "description": "You are given a string `s` that contains some bracket pairs, with each pair containing a **non-empty** key.\n\n\n For example, in the string `\"(name)is(age)yearsold\"`, there are **two** bracket pairs that contain the keys `\"name\"` and `\"age\"`.\n\n\nYou know the values of a wide range of keys. This is represented by a 2D string array `knowledge` where each `knowledge[i] = [keyi, valuei]` indicates that key `keyi` has a value of `valuei`.\n\n\nYou are tasked to evaluate **all** of the bracket pairs. When you evaluate a bracket pair that contains some key `keyi`, you will:\n\n\n Replace `keyi` and the bracket pair with the key's corresponding `valuei`.\n If you do not know the value of the key, you will replace `keyi` and the bracket pair with a question mark `\"?\"` (without the quotation marks).\n\n\nEach key will appear at most once in your `knowledge`. There will not be any nested brackets in `s`.\n\n\nReturn *the resulting string after evaluating **all** of the bracket pairs.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"(name)is(age)yearsold\", knowledge = [[\"name\",\"bob\"],[\"age\",\"two\"]]",
                "Output": "** \"bobistwoyearsold\"",
                "Explanation": "**\nThe key \"name\" has a value of \"bob\", so replace \"(name)\" with \"bob\".\nThe key \"age\" has a value of \"two\", so replace \"(age)\" with \"two\"."
            },
            {
                "Input": "** s = \"hi(name)\", knowledge = [[\"a\",\"b\"]]",
                "Output": "** \"hi?\"",
                "Explanation": "** As you do not know the value of the key \"name\", replace \"(name)\" with \"?\"."
            },
            {
                "Input": "** s = \"(a)(a)(a)aaa\", knowledge = [[\"a\",\"yes\"]]",
                "Output": "** \"yesyesyesaaa\"",
                "Explanation": "** The same key can appear multiple times.\nThe key \"a\" has a value of \"yes\", so replace all occurrences of \"(a)\" with \"yes\".\nNotice that the \"a\"s not in a bracket pair are not evaluated."
            }
        ]
    },
    {
        "Title": "Maximize Number of Nice Divisors",
        "slug": "maximize-number-of-nice-divisors",
        "description": "You are given a positive integer `primeFactors`. You are asked to construct a positive integer `n` that satisfies the following conditions:\n\n\n The number of prime factors of `n` (not necessarily distinct) is **at most** `primeFactors`.\n The number of nice divisors of `n` is maximized. Note that a divisor of `n` is **nice** if it is divisible by every prime factor of `n`. For example, if `n = 12`, then its prime factors are `[2,2,3]`, then `6` and `12` are nice divisors, while `3` and `4` are not.\n\n\nReturn *the number of nice divisors of* `n`. Since that number can be too large, return it **modulo** `109 + 7`.\n\n\nNote that a prime number is a natural number greater than `1` that is not a product of two smaller natural numbers. The prime factors of a number `n` is a list of prime numbers such that their product equals `n`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** primeFactors = 5",
                "Output": "** 6",
                "Explanation": "** 200 is a valid value of n.\r\nIt has 5 prime factors: [2,2,2,5,5], and it has 6 nice divisors: [10,20,40,50,100,200].\r\nThere is not other value of n that has at most 5 prime factors and more nice divisors."
            },
            {
                "Input": "** primeFactors = 8",
                "Output": "** 18",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Determine Color of a Chessboard Square",
        "slug": "determine-color-of-a-chessboard-square",
        "description": "You are given `coordinates`, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.\n\n\n![](https://assets.leetcode.com/uploads/2021/02/19/screenshot-2021-02-20-at-22159-pm.png)\n\n\nReturn `true` *if the square is white, and* `false` *if the square is black*.\n\n\nThe coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "String"
        ],
        "examples": [
            {
                "Input": "** coordinates = \"a1\"",
                "Output": "** false",
                "Explanation": "** From the chessboard above, the square with coordinates \"a1\" is black, so return false."
            },
            {
                "Input": "** coordinates = \"h3\"",
                "Output": "** true",
                "Explanation": "** From the chessboard above, the square with coordinates \"h3\" is white, so return true."
            },
            {
                "Input": "** coordinates = \"c7\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sentence Similarity III",
        "slug": "sentence-similarity-iii",
        "description": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces. For example, `\"Hello World\"`, `\"HELLO\"`, `\"hello world hello world\"` are all sentences. Words consist of **only** uppercase and lowercase English letters.\n\n\nTwo sentences `sentence1` and `sentence2` are **similar** if it is possible to insert an arbitrary sentence **(possibly empty)** inside one of these sentences such that the two sentences become equal. For example, `sentence1 = \"Hello my name is Jane\"` and `sentence2 = \"Hello Jane\"` can be made equal by inserting `\"my name is\"` between `\"Hello\"` and `\"Jane\"` in `sentence2`.\n\n\nGiven two sentences `sentence1` and `sentence2`, return `true` *if* `sentence1` *and* `sentence2` *are similar.* Otherwise, return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** sentence1 = \"My name is Haley\", sentence2 = \"My Haley\"",
                "Output": "** true",
                "Explanation": "** sentence2 can be turned to sentence1 by inserting \"name is\" between \"My\" and \"Haley\"."
            },
            {
                "Input": "** sentence1 = \"of\", sentence2 = \"A lot of words\"",
                "Output": "** false",
                "Explanation": "** No single sentence can be inserted inside one of the sentences to make it equal to the other."
            },
            {
                "Input": "** sentence1 = \"Eating right now\", sentence2 = \"Eating\"",
                "Output": "** true",
                "Explanation": "** sentence2 can be turned to sentence1 by inserting \"right now\" at the end of the sentence."
            }
        ]
    },
    {
        "Title": "Count Nice Pairs in an Array",
        "slug": "count-nice-pairs-in-an-array",
        "description": "You are given an array `nums` that consists of non-negative integers. Let us define `rev(x)` as the reverse of the non-negative integer `x`. For example, `rev(123) = 321`, and `rev(120) = 21`. A pair of indices `(i, j)` is **nice** if it satisfies all of the following conditions:\n\n\n `0 <= i < j < nums.length`\n `nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])`\n\n\nReturn *the number of nice pairs of indices*. Since that number can be too large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [42,11,1,97]",
                "Output": "** 2",
                "Explanation": "** The two pairs are:\n - (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121.\n - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12."
            },
            {
                "Input": "** nums = [13,10,35,24,76]",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Number of Groups Getting Fresh Donuts",
        "slug": "maximum-number-of-groups-getting-fresh-donuts",
        "description": "There is a donuts shop that bakes donuts in batches of `batchSize`. They have a rule where they must serve **all** of the donuts of a batch before serving any donuts of the next batch. You are given an integer `batchSize` and an integer array `groups`, where `groups[i]` denotes that there is a group of `groups[i]` customers that will visit the shop. Each customer will get exactly one donut.\n\n\nWhen a group visits the shop, all customers of the group must be served before serving any of the following groups. A group will be happy if they all get fresh donuts. That is, the first customer of the group does not receive a donut that was left over from the previous group.\n\n\nYou can freely rearrange the ordering of the groups. Return *the **maximum** possible number of happy groups after rearranging the groups.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Bit Manipulation",
            "Memoization",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** batchSize = 3, groups = [1,2,3,4,5,6]",
                "Output": "** 4",
                "Explanation": "** You can arrange the groups as [6,2,4,5,1,3]. Then the 1st, 2nd, 4th, and 6th groups will be happy."
            },
            {
                "Input": "** batchSize = 4, groups = [1,3,2,5,2,2,1,6]",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Truncate Sentence",
        "slug": "truncate-sentence",
        "description": "A **sentence** is a list of words that are separated by a single space with no leading or trailing spaces. Each of the words consists of **only** uppercase and lowercase English letters (no punctuation).\n\n\n For example, `\"Hello World\"`, `\"HELLO\"`, and `\"hello world hello world\"` are all sentences.\n\n\nYou are given a sentence `s`\u200b\u200b\u200b\u200b\u200b\u200b and an integer `k`\u200b\u200b\u200b\u200b\u200b\u200b. You want to **truncate** `s`\u200b\u200b\u200b\u200b\u200b\u200b such that it contains only the **first** `k`\u200b\u200b\u200b\u200b\u200b\u200b words. Return `s`\u200b\u200b\u200b\u200b*\u200b\u200b after **truncating** it.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"Hello how are you Contestant\", k = 4",
                "Output": "** \"Hello how are you\"",
                "Explanation": "**\nThe words in s are [\"Hello\", \"how\" \"are\", \"you\", \"Contestant\"].\nThe first 4 words are [\"Hello\", \"how\", \"are\", \"you\"].\nHence, you should return \"Hello how are you\"."
            },
            {
                "Input": "** s = \"What is the solution to this problem\", k = 4",
                "Output": "** \"What is the solution\"",
                "Explanation": "**\nThe words in s are [\"What\", \"is\" \"the\", \"solution\", \"to\", \"this\", \"problem\"].\nThe first 4 words are [\"What\", \"is\", \"the\", \"solution\"].\nHence, you should return \"What is the solution\"."
            },
            {
                "Input": "** s = \"chopper is not a tanuki\", k = 5",
                "Output": "** \"chopper is not a tanuki\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Finding the Users Active Minutes",
        "slug": "finding-the-users-active-minutes",
        "description": "You are given the logs for users' actions on LeetCode, and an integer `k`. The logs are represented by a 2D integer array `logs` where each `logs[i] = [IDi, timei]` indicates that the user with `IDi` performed an action at the minute `timei`.\n\n\nMultiple users** can perform actions simultaneously, and a single user can perform **multiple actions** in the same minute.\n\n\nThe **user active minutes (UAM)** for a given user is defined as the **number of unique minutes** in which the user performed an action on LeetCode. A minute can only be counted once, even if multiple actions occur during it.\n\n\nYou are to calculate a **1-indexed** array `answer` of size `k` such that, for each `j` (`1 <= j <= k`), `answer[j]` is the **number of users** whose **UAM** equals `j`.\n\n\nReturn *the array* `answer` *as described above*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** logs = [[0,5],[1,2],[0,2],[0,5],[1,3]], k = 5",
                "Output": "** [0,2,0,0,0]",
                "Explanation": "**\nThe user with ID=0 performed actions at minutes 5, 2, and 5 again. Hence, they have a UAM of 2 (minute 5 is only counted once).\nThe user with ID=1 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.\nSince both users have a UAM of 2, answer[2] is 2, and the remaining answer[j] values are 0."
            },
            {
                "Input": "** logs = [[1,1],[2,2],[2,3]], k = 4",
                "Output": "** [1,1,0,0]",
                "Explanation": "**\nThe user with ID=1 performed a single action at minute 1. Hence, they have a UAM of 1.\nThe user with ID=2 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.\nThere is one user with a UAM of 1 and one with a UAM of 2.\nHence, answer[1] = 1, answer[2] = 1, and the remaining values are 0."
            }
        ]
    },
    {
        "Title": "Minimum Absolute Sum Difference",
        "slug": "minimum-absolute-sum-difference",
        "description": "You are given two positive integer arrays `nums1` and `nums2`, both of length `n`.\n\n\nThe **absolute sum difference** of arrays `nums1` and `nums2` is defined as the **sum** of `|nums1[i] - nums2[i]|` for each `0 <= i < n` (**0-indexed**).\n\n\nYou can replace **at most one** element of `nums1` with **any** other element in `nums1` to **minimize** the absolute sum difference.\n\n\nReturn the *minimum absolute sum difference **after** replacing at most oneelement in the array `nums1`.* Since the answer may be large, return it **modulo** `109 + 7`.\n\n\n`|x|` is defined as:\n\n\n `x` if `x >= 0`, or\n `-x` if `x < 0`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Sorting",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** nums1 = [1,7,5], nums2 = [2,3,5]",
                "Output": "** 3",
                "Explanation": "** There are two possible optimal solutions:\n- Replace the second element with the first: [1,**7**,5] => [1,**1**,5], or\n- Replace the second element with the third: [1,**7**,5] => [1,**5**,5].\nBoth will yield an absolute sum difference of |1-2| + (|1-3| or |5-3|) + |5-5| = 3."
            },
            {
                "Input": "** nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10]",
                "Output": "** 0",
                "Explanation": "** nums1 is equal to nums2 so no replacement is needed. This will result in an \nabsolute sum difference of 0."
            },
            {
                "Input": "** nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4]",
                "Output": "** 20",
                "Explanation": "** Replace the first element with the second: [**1**,10,4,4,2,7] => [**10**,10,4,4,2,7].\nThis yields an absolute sum difference of |10-9| + |10-3| + |4-5| + |4-1| + |2-7| + |7-4| = 20"
            }
        ]
    },
    {
        "Title": "Number of Different Subsequences GCDs",
        "slug": "number-of-different-subsequences-gcds",
        "description": "You are given an array `nums` that consists of positive integers.\n\n\nThe **GCD** of a sequence of numbers is defined as the greatest integer that divides **all** the numbers in the sequence evenly.\n\n\n For example, the GCD of the sequence `[4,6,16]` is `2`.\n\n\nA **subsequence** of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\n\n\n For example, `[2,5,10]` is a subsequence of `[1,2,1,**2**,4,1,**5**,**10**]`.\n\n\nReturn *the **number** of **different** GCDs among all **non-empty** subsequences of* `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Counting",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [6,10,3]",
                "Output": "** 5",
                "Explanation": "** The figure shows all the non-empty subsequences and their GCDs.\nThe different GCDs are 6, 10, 3, 2, and 1."
            }
        ]
    },
    {
        "Title": "Sign of the Product of an Array",
        "slug": "sign-of-the-product-of-an-array",
        "description": "There is a function `signFunc(x)` that returns:\n\n\n `1` if `x` is positive.\n `-1` if `x` is negative.\n `0` if `x` is equal to `0`.\n\n\nYou are given an integer array `nums`. Let `product` be the product of all values in the array `nums`.\n\n\nReturn `signFunc(product)`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math"
        ],
        "examples": [
            {
                "Input": "** nums = [-1,-2,-3,-4,3,2,1]",
                "Output": "** 1",
                "Explanation": "** The product of all values in the array is 144, and signFunc(144) = 1"
            },
            {
                "Input": "** nums = [1,5,0,2,-3]",
                "Output": "** 0",
                "Explanation": "** The product of all values in the array is 0, and signFunc(0) = 0"
            },
            {
                "Input": "** nums = [-1,1,-1,1,-1]",
                "Output": "** -1",
                "Explanation": "** The product of all values in the array is -1, and signFunc(-1) = -1"
            }
        ]
    },
    {
        "Title": "Find the Winner of the Circular Game",
        "slug": "find-the-winner-of-the-circular-game",
        "description": "There are `n` friends that are playing a game. The friends are sitting in a circle and are numbered from `1` to `n` in **clockwise order**. More formally, moving clockwise from the `ith` friend brings you to the `(i+1)th` friend for `1 <= i < n`, and moving clockwise from the `nth` friend brings you to the `1st` friend.\n\n\nThe rules of the game are as follows:\n\n\n1. **Start** at the `1st` friend.\n2. Count the next `k` friends in the clockwise direction **including** the friend you started at. The counting wraps around the circle and may count some friends more than once.\n3. The last friend you counted leaves the circle and loses the game.\n4. If there is still more than one friend in the circle, go back to step `2` **starting** from the friend **immediately clockwise** of the friend who just lost and repeat.\n5. Else, the last friend in the circle wins the game.\n\n\nGiven the number of friends, `n`, and an integer `k`, return *the winner of the game*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Recursion",
            "Queue",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** n = 5, k = 2",
                "Output": "** 3",
                "Explanation": "** Here are the steps of the game:\n1) Start at friend 1.\n2) Count 2 friends clockwise, which are friends 1 and 2.\n3) Friend 2 leaves the circle. Next start is friend 3.\n4) Count 2 friends clockwise, which are friends 3 and 4.\n5) Friend 4 leaves the circle. Next start is friend 5.\n6) Count 2 friends clockwise, which are friends 5 and 1.\n7) Friend 1 leaves the circle. Next start is friend 3.\n8) Count 2 friends clockwise, which are friends 3 and 5.\n9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner."
            }
        ]
    },
    {
        "Title": "Minimum Sideway Jumps",
        "slug": "minimum-sideway-jumps",
        "description": "There is a **3 lane road** of length `n` that consists of `n + 1` **points** labeled from `0` to `n`. A frog **starts** at point `0` in the **second** laneand wants to jump to point `n`. However, there could be obstacles along the way.\n\n\nYou are given an array `obstacles` of length `n + 1` where each `obstacles[i]` (**ranging from 0 to 3**) describes an obstacle on the lane `obstacles[i]` at point `i`. If `obstacles[i] == 0`, there are no obstacles at point `i`. There will be **at most one** obstacle in the 3 lanes at each point.\n\n\n For example, if `obstacles[2] == 1`, then there is an obstacle on lane 1 at point 2.\n\n\nThe frog can only travel from point `i` to point `i + 1` on the same lane if there is not an obstacle on the lane at point `i + 1`. To avoid obstacles, the frog can also perform a **side jump** to jump to **another** lane (even if they are not adjacent) at the **same** point if there is no obstacle on the new lane.\n\n\n For example, the frog can jump from lane 3 at point 3 to lane 1 at point 3.\n\n\nReturn *the **minimum number of side jumps** the frog needs to reach **any lane** at point n starting from lane `2` at point 0.\n\n\nNote:** There will be no obstacles on points `0` and `n`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** obstacles = [0,1,2,3,0]",
                "Output": "** 2",
                "Explanation": "** The optimal solution is shown by the arrows above. There are 2 side jumps (red arrows).\nNote that the frog can jump over obstacles only when making side jumps (as shown at point 2)."
            },
            {
                "Input": "** obstacles = [0,1,1,3,3,0]",
                "Output": "** 0",
                "Explanation": "** There are no obstacles on lane 2. No side jumps are required."
            },
            {
                "Input": "** obstacles = [0,2,1,0,3,0]",
                "Output": "** 2",
                "Explanation": "** The optimal solution is shown by the arrows above. There are 2 side jumps."
            }
        ]
    },
    {
        "Title": "Finding MK Average",
        "slug": "finding-mk-average",
        "description": "You are given two integers, `m` and `k`, and a stream of integers. You are tasked to implement a data structure that calculates the **MKAverage** for the stream.\n\n\nThe **MKAverage** can be calculated using these steps:\n\n\n1. If the number of the elements in the stream is less than `m` you should consider the **MKAverage** to be `-1`. Otherwise, copy the last `m` elements of the stream to a separate container.\n2. Remove the smallest `k` elements and the largest `k` elements from the container.\n3. Calculate the average value for the rest of the elements **rounded down to the nearest integer**.\n\n\nImplement the `MKAverage` class:\n\n\n `MKAverage(int m, int k)` Initializes the **MKAverage** object with an empty stream and the two integers `m` and `k`.\n `void addElement(int num)` Inserts a new element `num` into the stream.\n `int calculateMKAverage()` Calculates and returns the **MKAverage** for the current stream **rounded down to the nearest integer**.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Design",
            "Queue",
            "Heap (Priority Queue)",
            "Data Stream",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "[\"MKAverage\", \"addElement\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"addElement\", \"addElement\", \"calculateMKAverage\"]\n[[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]",
                "Output": "[null, null, null, -1, null, 3, null, null, null, 5]",
                "Explanation": "MKAverage obj = new MKAverage(3, 1); \nobj.addElement(3);        // current elements are [3]\nobj.addElement(1);        // current elements are [3,1]\nobj.calculateMKAverage(); // return -1, because m = 3 and only 2 elements exist.\nobj.addElement(10);       // current elements are [3,1,10]\nobj.calculateMKAverage(); // The last 3 elements are [3,1,10].\n                          // After removing smallest and largest 1 element the container will be [3].\n                          // The average of [3] equals 3/1 = 3, return 3\nobj.addElement(5);        // current elements are [3,1,10,5]\nobj.addElement(5);        // current elements are [3,1,10,5,5]\nobj.addElement(5);        // current elements are [3,1,10,5,5,5]\nobj.calculateMKAverage(); // The last 3 elements are [5,5,5].\n                          // After removing smallest and largest 1 element the container will be [5].\n                          // The average of [5] equals 5/1 = 5, return 5"
            }
        ]
    },
    {
        "Title": "Minimum Operations to Make the Array Increasing",
        "slug": "minimum-operations-to-make-the-array-increasing",
        "description": "You are given an integer array `nums` (**0-indexed**). In one operation, you can choose an element of the array and increment it by `1`.\n\n\n For example, if `nums = [1,2,3]`, you can choose to increment `nums[1]` to make `nums = [1,**3**,3]`.\n\n\nReturn *the **minimum** number of operations needed to make* `nums` ***strictly** **increasing**.\n\n\nAn array `nums` is **strictly increasing** if `nums[i] < nums[i+1]` for all `0 <= i < nums.length - 1`. An array of length `1` is trivially strictly increasing.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums = [1,1,1]",
                "Output": "** 3",
                "Explanation": "** You can do the following operations:\r\n1) Increment nums[2], so nums becomes [1,1,**2**].\r\n2) Increment nums[1], so nums becomes [1,**2**,2].\r\n3) Increment nums[2], so nums becomes [1,2,**3**]."
            },
            {
                "Input": "** nums = [1,5,2,4,1]",
                "Output": "** 14",
                "Explanation": null
            },
            {
                "Input": "** nums = [8]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Queries on Number of Points Inside a Circle",
        "slug": "queries-on-number-of-points-inside-a-circle",
        "description": "You are given an array `points` where `points[i] = [xi, yi]` is the coordinates of the `ith` point on a 2D plane. Multiple points can have the **same** coordinates.\n\n\nYou are also given an array `queries` where `queries[j] = [xj, yj, rj]` describes a circle centered at `(xj, yj)` with a radius of `rj`.\n\n\nFor each query `queries[j]`, compute the number of points **inside** the `jth` circle. Points **on the border** of the circle are considered **inside**.\n\n\nReturn *an array* `answer`*, where* `answer[j]` *is the answer to the* `jth` *query*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Geometry"
        ],
        "examples": [
            {
                "Input": "** points = [[1,3],[3,3],[5,3],[2,2]], queries = [[2,3,1],[4,3,1],[1,1,2]]",
                "Output": "** [3,2,2]",
                "Explanation": "** The points and circles are shown above.\nqueries[0] is the green circle, queries[1] is the red circle, and queries[2] is the blue circle."
            },
            {
                "Input": "** points = [[1,1],[2,2],[3,3],[4,4],[5,5]], queries = [[1,2,2],[2,2,2],[4,3,2],[4,3,3]]",
                "Output": "** [2,3,2,4]",
                "Explanation": "** The points and circles are shown above.\nqueries[0] is green, queries[1] is red, queries[2] is blue, and queries[3] is purple."
            }
        ]
    },
    {
        "Title": "Maximum XOR for Each Query",
        "slug": "maximum-xor-for-each-query",
        "description": "You are given a **sorted** array `nums` of `n` non-negative integers and an integer `maximumBit`. You want to perform the following query `n` **times**:\n\n\n1. Find a non-negative integer `k < 2maximumBit` such that `nums[0] XOR nums[1] XOR ... XOR nums[nums.length-1] XOR k` is **maximized**. `k` is the answer to the `ith` query.\n2. Remove the **last** element from the current array `nums`.\n\n\nReturn *an array* `answer`*, where* `answer[i]` *is the answer to the* `ith` *query*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Bit Manipulation",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [0,1,1,3], maximumBit = 2",
                "Output": "** [0,3,2,3]",
                "Explanation": "The queries are answered as follows:\n1st query: nums = [0,1,1,3], k = 0 since 0 XOR 1 XOR 1 XOR 3 XOR 0 = 3.\n2nd query: nums = [0,1,1], k = 3 since 0 XOR 1 XOR 1 XOR 3 = 3.\n3rd query: nums = [0,1], k = 2 since 0 XOR 1 XOR 2 = 3.\n4th query: nums = [0], k = 3 since 0 XOR 3 = 3."
            },
            {
                "Input": "** nums = [2,3,4,7], maximumBit = 3",
                "Output": "** [5,2,6,5]",
                "Explanation": "The queries are answered as follows:\n1st query: nums = [2,3,4,7], k = 5 since 2 XOR 3 XOR 4 XOR 7 XOR 5 = 7.\n2nd query: nums = [2,3,4], k = 2 since 2 XOR 3 XOR 4 XOR 2 = 7.\n3rd query: nums = [2,3], k = 6 since 2 XOR 3 XOR 6 = 7.\n4th query: nums = [2], k = 5 since 2 XOR 5 = 7."
            },
            {
                "Input": "** nums = [0,1,2,2,5,7], maximumBit = 3",
                "Output": "** [4,3,6,4,6,7]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Make String Sorted",
        "slug": "minimum-number-of-operations-to-make-string-sorted",
        "description": "You are given a string `s` (**0-indexed**)\u200b\u200b\u200b\u200b\u200b\u200b. You are asked to perform the following operation on `s`\u200b\u200b\u200b\u200b\u200b\u200b until you get a sorted string:\n\n\n1. Find **the largest index** `i` such that `1 <= i < s.length` and `s[i] < s[i - 1]`.\n2. Find **the largest index** `j` such that `i <= j < s.length` and `s[k] < s[i - 1]` for all the possible values of `k` in the range `[i, j]` inclusive.\n3. Swap the two characters at indices `i - 1`\u200b\u200b\u200b\u200b and `j`\u200b\u200b\u200b\u200b\u200b.\n4. Reverse the suffix starting at index `i`\u200b\u200b\u200b\u200b\u200b\u200b.\n\n\nReturn *the number of operations needed to make the string sorted.* Since the answer can be too large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "String",
            "Combinatorics"
        ],
        "examples": [
            {
                "Input": "** s = \"cba\"",
                "Output": "** 5",
                "Explanation": "** The simulation goes as follows:\nOperation 1: i=2, j=2. Swap s[1] and s[2] to get s=\"cab\", then reverse the suffix starting at 2. Now, s=\"cab\".\nOperation 2: i=1, j=2. Swap s[0] and s[2] to get s=\"bac\", then reverse the suffix starting at 1. Now, s=\"bca\".\nOperation 3: i=2, j=2. Swap s[1] and s[2] to get s=\"bac\", then reverse the suffix starting at 2. Now, s=\"bac\".\nOperation 4: i=1, j=1. Swap s[0] and s[1] to get s=\"abc\", then reverse the suffix starting at 1. Now, s=\"acb\".\nOperation 5: i=2, j=2. Swap s[1] and s[2] to get s=\"abc\", then reverse the suffix starting at 2. Now, s=\"abc\"."
            },
            {
                "Input": "** s = \"aabaa\"",
                "Output": "** 2",
                "Explanation": "** The simulation goes as follows:\nOperation 1: i=3, j=4. Swap s[2] and s[4] to get s=\"aaaab\", then reverse the substring starting at 3. Now, s=\"aaaba\".\nOperation 2: i=4, j=4. Swap s[3] and s[4] to get s=\"aaaab\", then reverse the substring starting at 4. Now, s=\"aaaab\"."
            }
        ]
    },
    {
        "Title": "Check if the Sentence Is Pangram",
        "slug": "check-if-the-sentence-is-pangram",
        "description": "A **pangram** is a sentence where every letter of the English alphabet appears at least once.\n\n\nGiven a string `sentence` containing only lowercase English letters, return`true` *if* `sentence` *is a **pangram**, or* `false` *otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** sentence = \"thequickbrownfoxjumpsoverthelazydog\"",
                "Output": "** true",
                "Explanation": "** sentence contains at least one of every letter of the English alphabet."
            },
            {
                "Input": "** sentence = \"leetcode\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Ice Cream Bars",
        "slug": "maximum-ice-cream-bars",
        "description": "It is a sweltering summer day, and a boy wants to buy some ice cream bars.\n\n\nAt the store, there are `n` ice cream bars. You are given an array `costs` of length `n`, where `costs[i]` is the price of the `ith` ice cream bar in coins. The boy initially has `coins` coins to spend, and he wants to buy as many ice cream bars as possible.\u00a0\n\n\nNote:** The boy can buy the ice cream bars in any order.\n\n\nReturn *the **maximum** number of ice cream bars the boy can buy with* `coins` *coins.\n\n\nYou must solve the problem by counting sort.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** costs = [1,3,2,4,1], coins = 7",
                "Output": "** 4",
                "Explanation": "** The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7."
            },
            {
                "Input": "** costs = [10,6,8,7,7,8], coins = 5",
                "Output": "** 0",
                "Explanation": "** The boy cannot afford any of the ice cream bars."
            },
            {
                "Input": "** costs = [1,6,3,1,2,5], coins = 20",
                "Output": "** 6",
                "Explanation": "** The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18."
            }
        ]
    },
    {
        "Title": "Single-Threaded CPU",
        "slug": "single-threaded-cpu",
        "description": "You are given `n`\u200b\u200b\u200b\u200b\u200b\u200b tasks labeled from `0` to `n - 1` represented by a 2D integer array `tasks`, where `tasks[i] = [enqueueTimei, processingTimei]` means that the `i\u200b\u200b\u200b\u200b\u200b\u200bth`\u200b\u200b\u200b\u200b task will be available to process at `enqueueTimei` and will take `processingTimei`to finish processing.\n\n\nYou have a single-threaded CPU that can process **at most one** task at a time and will act in the following way:\n\n\n If the CPU is idle and there are no available tasks to process, the CPU remains idle.\n If the CPU is idle and there are available tasks, the CPU will choose the one with the **shortest processing time**. If multiple tasks have the same shortest processing time, it will choose the task with the smallest index.\n Once a task is started, the CPU will **process the entire task** without stopping.\n The CPU can finish a task then start a new one instantly.\n\n\nReturn *the order in which the CPU will process the tasks.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** tasks = [[1,2],[2,4],[3,2],[4,1]]",
                "Output": "** [0,2,3,1]",
                "Explanation": "** The events go as follows: \n- At time = 1, task 0 is available to process. Available tasks = {0}.\n- Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}.\n- At time = 2, task 1 is available to process. Available tasks = {1}.\n- At time = 3, task 2 is available to process. Available tasks = {1, 2}.\n- Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}.\n- At time = 4, task 3 is available to process. Available tasks = {1, 3}.\n- At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}.\n- At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}.\n- At time = 10, the CPU finishes task 1 and becomes idle."
            },
            {
                "Input": "** tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]",
                "Output": "** [4,3,2,0,1]",
                "Explanation": "** The events go as follows:\n- At time = 7, all the tasks become available. Available tasks = {0,1,2,3,4}.\n- Also at time = 7, the idle CPU starts processing task 4. Available tasks = {0,1,2,3}.\n- At time = 9, the CPU finishes task 4 and starts processing task 3. Available tasks = {0,1,2}.\n- At time = 13, the CPU finishes task 3 and starts processing task 2. Available tasks = {0,1}.\n- At time = 18, the CPU finishes task 2 and starts processing task 0. Available tasks = {1}.\n- At time = 28, the CPU finishes task 0 and starts processing task 1. Available tasks = {}.\n- At time = 40, the CPU finishes task 1 and becomes idle."
            }
        ]
    },
    {
        "Title": "Find XOR Sum of All Pairs Bitwise AND",
        "slug": "find-xor-sum-of-all-pairs-bitwise-and",
        "description": "The **XOR sum** of a list is the bitwise `XOR` of all its elements. If the list only contains one element, then its **XOR sum** will be equal to this element.\n\n\n For example, the **XOR sum** of `[1,2,3,4]` is equal to `1 XOR 2 XOR 3 XOR 4 = 4`, and the **XOR sum** of `[3]` is equal to `3`.\n\n\nYou are given two **0-indexed** arrays `arr1` and `arr2` that consist only of non-negative integers.\n\n\nConsider the list containing the result of `arr1[i] AND arr2[j]` (bitwise `AND`) for every `(i, j)` pair where `0 <= i < arr1.length` and `0 <= j < arr2.length`.\n\n\nReturn *the **XOR sum** of the aforementioned list*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** arr1 = [1,2,3], arr2 = [6,5]",
                "Output": "** 0",
                "Explanation": "** The list = [1 AND 6, 1 AND 5, 2 AND 6, 2 AND 5, 3 AND 6, 3 AND 5] = [0,1,2,0,2,1].\nThe XOR sum = 0 XOR 1 XOR 2 XOR 0 XOR 2 XOR 1 = 0."
            },
            {
                "Input": "** arr1 = [12], arr2 = [4]",
                "Output": "** 4",
                "Explanation": "** The list = [12 AND 4] = [4]. The XOR sum = 4."
            }
        ]
    },
    {
        "Title": "Sum of Digits in Base K",
        "slug": "sum-of-digits-in-base-k",
        "description": "Given an integer `n` (in base `10`) and a base `k`, return *the **sum** of the digits of* `n` ***after** converting* `n` *from base* `10` *to base* `k`.\n\n\nAfter converting, each digit should be interpreted as a base `10` number, and the sum should be returned in base `10`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** n = 34, k = 6",
                "Output": "** 9",
                "Explanation": "** 34 (base 10) expressed in base 6 is 54. 5 + 4 = 9."
            },
            {
                "Input": "** n = 10, k = 10",
                "Output": "** 1",
                "Explanation": "** n is already in base 10. 1 + 0 = 1."
            }
        ]
    },
    {
        "Title": "Frequency of the Most Frequent Element",
        "slug": "frequency-of-the-most-frequent-element",
        "description": "The **frequency** of an element is the number of times it occurs in an array.\n\n\nYou are given an integer array `nums` and an integer `k`. In one operation, you can choose an index of `nums` and increment the element at that index by `1`.\n\n\nReturn *the **maximum possible frequency** of an element after performing **at most*** `k` *operations*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Greedy",
            "Sliding Window",
            "Sorting",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,4], k = 5",
                "Output": "** 3",
                "Explanation": "** Increment the first element three times and the second element two times to make nums = [4,4,4].\n4 has a frequency of 3."
            },
            {
                "Input": "** nums = [1,4,8,13], k = 5",
                "Output": "** 2",
                "Explanation": "** There are multiple optimal solutions:\n- Increment the first element three times to make nums = [4,4,8,13]. 4 has a frequency of 2.\n- Increment the second element four times to make nums = [1,8,8,13]. 8 has a frequency of 2.\n- Increment the third element five times to make nums = [1,4,13,13]. 13 has a frequency of 2."
            },
            {
                "Input": "** nums = [3,9,6], k = 2",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Substring Of All Vowels in Order",
        "slug": "longest-substring-of-all-vowels-in-order",
        "description": "A string is considered **beautiful** if it satisfies the following conditions:\n\n\n Each of the 5 English vowels (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`) must appear **at least once** in it.\n The letters must be sorted in **alphabetical order** (i.e. all `'a'`s before `'e'`s, all `'e'`s before `'i'`s, etc.).\n\n\nFor example, strings `\"aeiou\"` and `\"aaaaaaeiiiioou\"` are considered **beautiful**, but `\"uaeio\"`, `\"aeoiu\"`, and `\"aaaeeeooo\"` are **not beautiful**.\n\n\nGiven a string `word` consisting of English vowels, return *the **length of the longest beautiful substring** of* `word`*. If no such substring exists, return* `0`.\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** word = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\"",
                "Output": "** 13",
                "Explanation": "** The longest beautiful substring in word is \"aaaaeiiiiouuu\" of length 13."
            },
            {
                "Input": "** word = \"aeeeiiiioooauuuaeiou\"",
                "Output": "** 5",
                "Explanation": "** The longest beautiful substring in word is \"aeiou\" of length 5."
            },
            {
                "Input": "** word = \"a\"",
                "Output": "** 0",
                "Explanation": "** There is no beautiful substring, so return 0."
            }
        ]
    },
    {
        "Title": "Maximum Building Height",
        "slug": "maximum-building-height",
        "description": "You want to build `n` new buildings in a city. The new buildings will be built in a line and are labeled from `1` to `n`.\n\n\nHowever, there are city restrictions on the heights of the new buildings:\n\n\n The height of each building must be a non-negative integer.\n The height of the first building **must** be `0`.\n The height difference between any two adjacent buildings **cannot exceed** `1`.\n\n\nAdditionally, there are city restrictions on the maximum height of specific buildings. These restrictions are given as a 2D integer array `restrictions` where `restrictions[i] = [idi, maxHeighti]` indicates that building `idi` must have a height **less than or equal to** `maxHeighti`.\n\n\nIt is guaranteed that each building will appear **at most once** in `restrictions`, and building `1` will **not** be in `restrictions`.\n\n\nReturn *the **maximum possible height** of the **tallest** building*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** n = 5, restrictions = [[2,1],[4,1]]",
                "Output": "** 2",
                "Explanation": "** The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,1,2], and the tallest building has a height of 2."
            },
            {
                "Input": "** n = 6, restrictions = []",
                "Output": "** 5",
                "Explanation": "** The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,3,4,5], and the tallest building has a height of 5."
            },
            {
                "Input": "** n = 10, restrictions = [[5,3],[2,5],[7,4],[10,3]]",
                "Output": "** 5",
                "Explanation": "** The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,3,3,4,4,5,4,3], and the tallest building has a height of 5."
            }
        ]
    },
    {
        "Title": "Replace All Digits with Characters",
        "slug": "replace-all-digits-with-characters",
        "description": "You are given a **0-indexed** string `s` that has lowercase English letters in its **even** indices and digits in its **odd** indices.\n\n\nThere is a function `shift(c, x)`, where `c` is a character and `x` is a digit, that returns the `xth` character after `c`.\n\n\n For example, `shift('a', 5) = 'f'` and `shift('x', 0) = 'x'`.\n\n\nFor every **odd**\u00a0index `i`, you want to replace the digit `s[i]` with `shift(s[i-1], s[i])`.\n\n\nReturn `s` *after replacing all digits. It is **guaranteed** that* `shift(s[i-1], s[i])` *will never exceed* `'z'`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"a1c1e1\"",
                "Output": "** \"abcdef\"",
                "Explanation": "** The digits are replaced as follows:\n- s[1] -> shift('a',1) = 'b'\n- s[3] -> shift('c',1) = 'd'\n- s[5] -> shift('e',1) = 'f'"
            },
            {
                "Input": "** s = \"a1b2c3d4e\"",
                "Output": "** \"abbdcfdhe\"",
                "Explanation": "** The digits are replaced as follows:\n- s[1] -> shift('a',1) = 'b'\n- s[3] -> shift('b',2) = 'd'\n- s[5] -> shift('c',3) = 'f'\n- s[7] -> shift('d',4) = 'h'"
            }
        ]
    },
    {
        "Title": "Seat Reservation Manager",
        "slug": "seat-reservation-manager",
        "description": "Design a system that manages the reservation state of `n` seats that are numbered from `1` to `n`.\n\n\nImplement the `SeatManager` class:\n\n\n `SeatManager(int n)` Initializes a `SeatManager` object that will manage `n` seats numbered from `1` to `n`. All seats are initially available.\n `int reserve()` Fetches the **smallest-numbered** unreserved seat, reserves it, and returns its number.\n `void unreserve(int seatNumber)` Unreserves the seat with the given `seatNumber`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Design",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "[\"SeatManager\", \"reserve\", \"reserve\", \"unreserve\", \"reserve\", \"reserve\", \"reserve\", \"reserve\", \"unreserve\"]\n[[5], [], [], [2], [], [], [], [], [5]]",
                "Output": "[null, 1, 2, null, 2, 3, 4, 5, null]",
                "Explanation": "SeatManager seatManager = new SeatManager(5); // Initializes a SeatManager with 5 seats.\nseatManager.reserve();    // All seats are available, so return the lowest numbered seat, which is 1.\nseatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.\nseatManager.unreserve(2); // Unreserve seat 2, so now the available seats are [2,3,4,5].\nseatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.\nseatManager.reserve();    // The available seats are [3,4,5], so return the lowest of them, which is 3.\nseatManager.reserve();    // The available seats are [4,5], so return the lowest of them, which is 4.\nseatManager.reserve();    // The only available seat is seat 5, so return 5.\nseatManager.unreserve(5); // Unreserve seat 5, so now the available seats are [5]."
            }
        ]
    },
    {
        "Title": "Maximum Element After Decreasing and Rearranging",
        "slug": "maximum-element-after-decreasing-and-rearranging",
        "description": "You are given an array of positive integers `arr`. Perform some operations (possibly none) on `arr` so that it satisfies these conditions:\n\n\n The value of the **first** element in `arr` must be `1`.\n The absolute difference between any 2 adjacent elements must be **less than or equal to** `1`. In other words, `abs(arr[i] - arr[i - 1]) <= 1` for each `i` where `1 <= i < arr.length` (**0-indexed**). `abs(x)` is the absolute value of `x`.\n\n\nThere are 2 types of operations that you can perform any number of times:\n\n\n **Decrease** the value of any element of `arr` to a **smaller positive integer**.\n **Rearrange** the elements of `arr` to be in any order.\n\n\nReturn *the **maximum** possible value of an element in* `arr` *after performing the operations to satisfy the conditions*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** arr = [2,2,1,2,1]",
                "Output": "** 2",
                "Explanation": "** \nWe can satisfy the conditions by rearranging arr so it becomes [1,2,2,2,1].\nThe largest element in arr is 2."
            },
            {
                "Input": "** arr = [100,1,1000]",
                "Output": "** 3",
                "Explanation": "** \nOne possible way to satisfy the conditions is by doing the following:\n1. Rearrange arr so it becomes [1,100,1000].\n2. Decrease the value of the second element to 2.\n3. Decrease the value of the third element to 3.\nNow arr = [1,2,3], which satisfies the conditions.\nThe largest element in arr is 3."
            },
            {
                "Input": "** arr = [1,2,3,4,5]",
                "Output": "** 5",
                "Explanation": "** The array already satisfies the conditions, and the largest element is 5."
            }
        ]
    },
    {
        "Title": "Closest Room",
        "slug": "closest-room",
        "description": "There is a hotel with `n` rooms. The rooms are represented by a 2D integer array `rooms` where `rooms[i] = [roomIdi, sizei]` denotes that there is a room with room number `roomIdi` and size equal to `sizei`. Each `roomIdi` is guaranteed to be **unique**.\n\n\nYou are also given `k` queries in a 2D array `queries` where `queries[j] = [preferredj, minSizej]`. The answer to the `jth` query is the room number `id` of a room such that:\n\n\n The room has a size of **at least** `minSizej`, and\n `abs(id - preferredj)` is **minimized**, where `abs(x)` is the absolute value of `x`.\n\n\nIf there is a **tie** in the absolute difference, then use the room with the **smallest** such `id`. If there is **no such room**, the answer is `-1`.\n\n\nReturn *an array* `answer` *of length* `k` *where* `answer[j]` *contains the answer to the* `jth` *query*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** rooms = [[2,2],[1,2],[3,2]], queries = [[3,1],[3,3],[5,2]]",
                "Output": "** [3,-1,3]",
                "Explanation": "** The answers to the queries are as follows:\nQuery = [3,1]: Room number 3 is the closest as abs(3 - 3) = 0, and its size of 2 is at least 1. The answer is 3.\nQuery = [3,3]: There are no rooms with a size of at least 3, so the answer is -1.\nQuery = [5,2]: Room number 3 is the closest as abs(3 - 5) = 2, and its size of 2 is at least 2. The answer is 3."
            },
            {
                "Input": "** rooms = [[1,4],[2,3],[3,5],[4,1],[5,2]], queries = [[2,3],[2,4],[2,5]]",
                "Output": "** [2,1,3]",
                "Explanation": "** The answers to the queries are as follows:\nQuery = [2,3]: Room number 2 is the closest as abs(2 - 2) = 0, and its size of 3 is at least 3. The answer is 2.\nQuery = [2,4]: Room numbers 1 and 3 both have sizes of at least 4. The answer is 1 since it is smaller.\nQuery = [2,5]: Room number 3 is the only room with a size of at least 5. The answer is 3."
            }
        ]
    },
    {
        "Title": "Minimum Distance to the Target Element",
        "slug": "minimum-distance-to-the-target-element",
        "description": "Given an integer array `nums` **(0-indexed)** and two integers `target` and `start`, find an index `i` such that `nums[i] == target` and `abs(i - start)` is **minimized**. Note that\u00a0`abs(x)`\u00a0is the absolute value of `x`.\n\n\nReturn `abs(i - start)`.\n\n\nIt is **guaranteed** that `target` exists in `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5], target = 5, start = 3",
                "Output": "** 1",
                "Explanation": "** nums[4] = 5 is the only value equal to target, so the answer is abs(4 - 3) = 1."
            },
            {
                "Input": "** nums = [1], target = 1, start = 0",
                "Output": "** 0",
                "Explanation": "** nums[0] = 1 is the only value equal to target, so the answer is abs(0 - 0) = 0."
            },
            {
                "Input": "** nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start = 0",
                "Output": "** 0",
                "Explanation": "** Every value of nums is 1, but nums[0] minimizes abs(i - start), which is abs(0 - 0) = 0."
            }
        ]
    },
    {
        "Title": "Splitting a String Into Descending Consecutive Values",
        "slug": "splitting-a-string-into-descending-consecutive-values",
        "description": "You are given a string `s` that consists of only digits.\n\n\nCheck if we can split `s` into **two or more non-empty substrings** such that the **numerical values** of the substrings are in **descending order** and the **difference** between numerical values of every two **adjacent** **substrings** is equal to `1`.\n\n\n For example, the string `s = \"0090089\"` can be split into `[\"0090\", \"089\"]` with numerical values `[90,89]`. The values are in descending order and adjacent values differ by `1`, so this way is valid.\n Another example, the string `s = \"001\"` can be split into `[\"0\", \"01\"]`, `[\"00\", \"1\"]`, or `[\"0\", \"0\", \"1\"]`. However all the ways are invalid because they have numerical values `[0,1]`, `[0,1]`, and `[0,0,1]` respectively, all of which are not in descending order.\n\n\nReturn `true` *if it is possible to split* `s`\u200b\u200b\u200b\u200b\u200b\u200b *as described above**, or* `false` *otherwise.\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** s = \"1234\"",
                "Output": "** false",
                "Explanation": "** There is no valid way to split s."
            },
            {
                "Input": "** s = \"050043\"",
                "Output": "** true",
                "Explanation": "** s can be split into [\"05\", \"004\", \"3\"] with numerical values [5,4,3].\nThe values are in descending order with adjacent values differing by 1."
            },
            {
                "Input": "** s = \"9080701\"",
                "Output": "** false",
                "Explanation": "** There is no valid way to split s."
            }
        ]
    },
    {
        "Title": "Minimum Adjacent Swaps to Reach the Kth Smallest Number",
        "slug": "minimum-adjacent-swaps-to-reach-the-kth-smallest-number",
        "description": "You are given a string `num`, representing a large integer, and an integer `k`.\n\n\nWe call some integer **wonderful** if it is a **permutation** of the digits in `num` and is **greater in value** than `num`. There can be many wonderful integers. However, we only care about the **smallest-valued** ones.\n\n\n For example, when `num = \"5489355142\"`:\n\t+ The 1st smallest wonderful integer is `\"5489355214\"`.\n\t+ The 2nd smallest wonderful integer is `\"5489355241\"`.\n\t+ The 3rd smallest wonderful integer is `\"5489355412\"`.\n\t+ The 4th smallest wonderful integer is `\"5489355421\"`.\n\n\nReturn *the **minimum number of adjacent digit swaps** that needs to be applied to* `num` *to reach the* `kth` ***smallest wonderful** integer*.\n\n\nThe tests are generated in such a way that `kth`\u00a0smallest wonderful integer exists.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Two Pointers",
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** num = \"5489355142\", k = 4",
                "Output": "** 2",
                "Explanation": "** The 4th smallest wonderful number is \"5489355421\". To get this number:\n- Swap index 7 with index 8: \"5489355142\" -> \"5489355412\"\n- Swap index 8 with index 9: \"5489355412\" -> \"5489355421\""
            },
            {
                "Input": "** num = \"11112\", k = 4",
                "Output": "** 4",
                "Explanation": "** The 4th smallest wonderful number is \"21111\". To get this number:\n- Swap index 3 with index 4: \"11112\" -> \"11121\"\n- Swap index 2 with index 3: \"11121\" -> \"11211\"\n- Swap index 1 with index 2: \"11211\" -> \"12111\"\n- Swap index 0 with index 1: \"12111\" -> \"21111\""
            },
            {
                "Input": "** num = \"00123\", k = 1",
                "Output": "** 1",
                "Explanation": "** The 1st smallest wonderful number is \"00132\". To get this number:\n- Swap index 3 with index 4: \"00123\" -> \"00132\""
            }
        ]
    },
    {
        "Title": "Minimum Interval to Include Each Query",
        "slug": "minimum-interval-to-include-each-query",
        "description": "You are given a 2D integer array `intervals`, where `intervals[i] = [lefti, righti]` describes the `ith` interval starting at `lefti` and ending at `righti` **(inclusive)**. The **size** of an interval is defined as the number of integers it contains, or more formally `righti - lefti + 1`.\n\n\nYou are also given an integer array `queries`. The answer to the `jth` query is the **size of the smallest interval** `i` such that `lefti <= queries[j] <= righti`. If no such interval exists, the answer is `-1`.\n\n\nReturn *an array containing the answers to the queries*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Line Sweep",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** intervals = [[1,4],[2,4],[3,6],[4,4]], queries = [2,3,4,5]",
                "Output": "** [3,3,1,4]",
                "Explanation": "** The queries are processed as follows:\n- Query = 2: The interval [2,4] is the smallest interval containing 2. The answer is 4 - 2 + 1 = 3.\n- Query = 3: The interval [2,4] is the smallest interval containing 3. The answer is 4 - 2 + 1 = 3.\n- Query = 4: The interval [4,4] is the smallest interval containing 4. The answer is 4 - 4 + 1 = 1.\n- Query = 5: The interval [3,6] is the smallest interval containing 5. The answer is 6 - 3 + 1 = 4."
            },
            {
                "Input": "** intervals = [[2,3],[2,5],[1,8],[20,25]], queries = [2,19,5,22]",
                "Output": "** [2,-1,4,6]",
                "Explanation": "** The queries are processed as follows:\n- Query = 2: The interval [2,3] is the smallest interval containing 2. The answer is 3 - 2 + 1 = 2.\n- Query = 19: None of the intervals contain 19. The answer is -1.\n- Query = 5: The interval [2,5] is the smallest interval containing 5. The answer is 5 - 2 + 1 = 4.\n- Query = 22: The interval [20,25] is the smallest interval containing 22. The answer is 25 - 20 + 1 = 6."
            }
        ]
    },
    {
        "Title": "Maximum Population Year",
        "slug": "maximum-population-year",
        "description": "You are given a 2D integer array `logs` where each `logs[i] = [birthi, deathi]` indicates the birth and death years of the `ith` person.\n\n\nThe **population** of some year `x` is the number of people alive during that year. The `ith` person is counted in year `x`'s population if `x` is in the **inclusive** range `[birthi, deathi - 1]`. Note that the person is **not** counted in the year that they die.\n\n\nReturn *the **earliest** year with the **maximum population***.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Counting",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** logs = [[1993,1999],[2000,2010]]",
                "Output": "** 1993",
                "Explanation": "** The maximum population is 1, and 1993 is the earliest year with this population."
            },
            {
                "Input": "** logs = [[1950,1961],[1960,1971],[1970,1981]]",
                "Output": "** 1960",
                "Explanation": "** \nThe maximum population is 2, and it had happened in years 1960 and 1970.\nThe earlier year between them is 1960."
            }
        ]
    },
    {
        "Title": "Maximum Distance Between a Pair of Values",
        "slug": "maximum-distance-between-a-pair-of-values",
        "description": "You are given two **non-increasing 0-indexed** integer arrays `nums1`\u200b\u200b\u200b\u200b\u200b\u200b and `nums2`\u200b\u200b\u200b\u200b\u200b\u200b.\n\n\nA pair of indices `(i, j)`, where `0 <= i < nums1.length` and `0 <= j < nums2.length`, is **valid** if both `i <= j` and `nums1[i] <= nums2[j]`. The **distance** of the pair is `j - i`\u200b\u200b\u200b\u200b.\n\n\nReturn *the **maximum distance** of any **valid** pair* `(i, j)`*. If there are no valid pairs, return* `0`.\n\n\nAn array `arr` is **non-increasing** if `arr[i-1] >= arr[i]` for every `1 <= i < arr.length`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** nums1 = [55,30,5,4,2], nums2 = [100,20,10,10,5]",
                "Output": "** 2",
                "Explanation": "** The valid pairs are (0,0), (2,2), (2,3), (2,4), (3,3), (3,4), and (4,4).\nThe maximum distance is 2 with pair (2,4)."
            },
            {
                "Input": "** nums1 = [2,2,2], nums2 = [10,10,1]",
                "Output": "** 1",
                "Explanation": "** The valid pairs are (0,0), (0,1), and (1,1).\nThe maximum distance is 1 with pair (0,1)."
            },
            {
                "Input": "** nums1 = [30,29,19,5], nums2 = [25,25,25,25,25]",
                "Output": "** 2",
                "Explanation": "** The valid pairs are (2,2), (2,3), (2,4), (3,3), and (3,4).\nThe maximum distance is 2 with pair (2,4)."
            }
        ]
    },
    {
        "Title": "Maximum Subarray Min-Product",
        "slug": "maximum-subarray-min-product",
        "description": "The **min-product** of an array is equal to the **minimum value** in the array **multiplied by** the array's **sum**.\n\n\n For example, the array `[3,2,5]` (minimum value is `2`) has a min-product of `2 * (3+2+5) = 2 * 10 = 20`.\n\n\nGiven an array of integers `nums`, return *the **maximum min-product** of any **non-empty subarray** of* `nums`. Since the answer may be large, return it **modulo** `109 + 7`.\n\n\nNote that the min-product should be maximized **before** performing the modulo operation. Testcases are generated such that the maximum min-product **without** modulo will fit in a **64-bit signed integer**.\n\n\nA **subarray** is a **contiguous** part of an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Stack",
            "Monotonic Stack",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,2]",
                "Output": "** 14",
                "Explanation": "** The maximum min-product is achieved with the subarray [2,3,2] (minimum value is 2).\n2 * (2+3+2) = 2 * 7 = 14."
            },
            {
                "Input": "** nums = [2,3,3,1,2]",
                "Output": "** 18",
                "Explanation": "** The maximum min-product is achieved with the subarray [3,3] (minimum value is 3).\n3 * (3+3) = 3 * 6 = 18."
            },
            {
                "Input": "** nums = [3,1,5,6,4,2]",
                "Output": "** 60",
                "Explanation": "** The maximum min-product is achieved with the subarray [5,6,4] (minimum value is 4).\n4 * (5+6+4) = 4 * 15 = 60."
            }
        ]
    },
    {
        "Title": "Largest Color Value in a Directed Graph",
        "slug": "largest-color-value-in-a-directed-graph",
        "description": "There is a **directed graph** of `n` colored nodes and `m` edges. The nodes are numbered from `0` to `n - 1`.\n\n\nYou are given a string `colors` where `colors[i]` is a lowercase English letter representing the **color** of the `ith` node in this graph (**0-indexed**). You are also given a 2D array `edges` where `edges[j] = [aj, bj]` indicates that there is a **directed edge** from node `aj` to node `bj`.\n\n\nA valid **path** in the graph is a sequence of nodes `x1 -> x2 -> x3 -> ... -> xk` such that there is a directed edge from `xi` to `xi+1` for every `1 <= i < k`. The **color value** of the path is the number of nodes that are colored the **most frequently** occurring color along that path.\n\n\nReturn *the **largest color value** of any valid path in the given graph, or* `-1` *if the graph contains a cycle*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "Dynamic Programming",
            "Graph",
            "Topological Sort",
            "Memoization",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** colors = \"abaca\", edges = [[0,1],[0,2],[2,3],[3,4]]",
                "Output": "** 3",
                "Explanation": "** The path 0 -> 2 -> 3 -> 4 contains 3 nodes that are colored \"a\" (red in the above image)."
            },
            {
                "Input": "** colors = \"a\", edges = [[0,0]]",
                "Output": "** -1",
                "Explanation": "** There is a cycle from 0 to 0."
            }
        ]
    },
    {
        "Title": "Sorting the Sentence",
        "slug": "sorting-the-sentence",
        "description": "A **sentence** is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters.\n\n\nA sentence can be **shuffled** by appending the **1-indexed word position** to each word then rearranging the words in the sentence.\n\n\n For example, the sentence `\"This is a sentence\"` can be shuffled as `\"sentence4 a3 is2 This1\"` or `\"is2 sentence4 This1 a3\"`.\n\n\nGiven a **shuffled sentence** `s` containing no more than `9` words, reconstruct and return *the original sentence*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** s = \"is2 sentence4 This1 a3\"",
                "Output": "** \"This is a sentence\"",
                "Explanation": "** Sort the words in s to their original positions \"This1 is2 a3 sentence4\", then remove the numbers."
            },
            {
                "Input": "** s = \"Myself2 Me1 I4 and3\"",
                "Output": "** \"Me Myself and I\"",
                "Explanation": "** Sort the words in s to their original positions \"Me1 Myself2 and3 I4\", then remove the numbers."
            }
        ]
    },
    {
        "Title": "Incremental Memory Leak",
        "slug": "incremental-memory-leak",
        "description": "You are given two integers `memory1` and `memory2` representing the available memory in bits on two memory sticks. There is currently a faulty program running that consumes an increasing amount of memory every second.\n\n\nAt the `ith` second (starting from 1), `i` bits of memory are allocated to the stick with **more available memory** (or from the first memory stick if both have the same available memory). If neither stick has at least `i` bits of available memory, the program **crashes**.\n\n\nReturn *an array containing* `[crashTime, memory1crash, memory2crash]`*, where* `crashTime` *is the time (in seconds) when the program crashed and* `memory1crash` *and* `memory2crash` *are the available bits of memory in the first and second sticks respectively*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** memory1 = 2, memory2 = 2",
                "Output": "** [3,1,0]",
                "Explanation": "** The memory is allocated as follows:\n- At the 1st second, 1 bit of memory is allocated to stick 1. The first stick now has 1 bit of available memory.\n- At the 2nd second, 2 bits of memory are allocated to stick 2. The second stick now has 0 bits of available memory.\n- At the 3rd second, the program crashes. The sticks have 1 and 0 bits available respectively."
            },
            {
                "Input": "** memory1 = 8, memory2 = 11",
                "Output": "** [6,0,4]",
                "Explanation": "** The memory is allocated as follows:\n- At the 1st second, 1 bit of memory is allocated to stick 2. The second stick now has 10 bit of available memory.\n- At the 2nd second, 2 bits of memory are allocated to stick 2. The second stick now has 8 bits of available memory.\n- At the 3rd second, 3 bits of memory are allocated to stick 1. The first stick now has 5 bits of available memory.\n- At the 4th second, 4 bits of memory are allocated to stick 2. The second stick now has 4 bits of available memory.\n- At the 5th second, 5 bits of memory are allocated to stick 1. The first stick now has 0 bits of available memory.\n- At the 6th second, the program crashes. The sticks have 0 and 4 bits available respectively."
            }
        ]
    },
    {
        "Title": "Rotating the Box",
        "slug": "rotating-the-box",
        "description": "You are given an `m x n` matrix of characters `box` representing a side-view of a box. Each cell of the box is one of the following:\n\n\n A stone `'#'`\n A stationary obstacle `'*'`\n Empty `'.'`\n\n\nThe box is rotated **90 degrees clockwise**, causing some of the stones to fall due to gravity. Each stone falls down until it lands on an obstacle, another stone, or the bottom of the box. Gravity **does not** affect the obstacles' positions, and the inertia from the box's rotation **does not** affect the stones' horizontal positions.\n\n\nIt is **guaranteed** that each stone in `box` rests on an obstacle, another stone, or the bottom of the box.\n\n\nReturn *an* `n x m` *matrix representing the box after the rotation described above*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** box = [[\"#\",\".\",\"#\"]]",
                "Output": "** [[\".\"],\r\n\u00a0        [\"#\"],\r\n\u00a0        [\"#\"]]",
                "Explanation": null
            },
            {
                "Input": "** box = [[\"#\",\".\",\"*\",\".\"],\r\n\u00a0             [\"#\",\"#\",\"*\",\".\"]]",
                "Output": "** [[\"#\",\".\"],\r\n\u00a0        [\"#\",\"#\"],\r\n\u00a0        [\"*\",\"*\"],\r\n\u00a0        [\".\",\".\"]]",
                "Explanation": null
            },
            {
                "Input": "** box = [[\"#\",\"#\",\"*\",\".\",\"*\",\".\"],\r\n\u00a0             [\"#\",\"#\",\"#\",\"*\",\".\",\".\"],\r\n\u00a0             [\"#\",\"#\",\"#\",\".\",\"#\",\".\"]]",
                "Output": "** [[\".\",\"#\",\"#\"],\r\n\u00a0        [\".\",\"#\",\"#\"],\r\n\u00a0        [\"#\",\"#\",\"*\"],\r\n\u00a0        [\"#\",\"*\",\".\"],\r\n\u00a0        [\"#\",\".\",\"*\"],\r\n\u00a0        [\"#\",\".\",\".\"]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sum of Floored Pairs",
        "slug": "sum-of-floored-pairs",
        "description": "Given an integer array `nums`, return the sum of `floor(nums[i] / nums[j])` for all pairs of indices `0 <= i, j < nums.length` in the array. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n\nThe `floor()` function returns the integer part of the division.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Binary Search",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [2,5,9]",
                "Output": "** 10",
                "Explanation": "**\nfloor(2 / 5) = floor(2 / 9) = floor(5 / 9) = 0\nfloor(2 / 2) = floor(5 / 5) = floor(9 / 9) = 1\nfloor(5 / 2) = 2\nfloor(9 / 2) = 4\nfloor(9 / 5) = 1\nWe calculate the floor of the division for every pair of indices in the array then sum them up."
            },
            {
                "Input": "** nums = [7,7,7,7,7,7,7]",
                "Output": "** 49",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sum of All Subset XOR Totals",
        "slug": "sum-of-all-subset-xor-totals",
        "description": "The **XOR total** of an array is defined as the bitwise `XOR` of **all its elements**, or `0` if the array is **empty**.\n\n\n For example, the **XOR total** of the array `[2,5,6]` is `2 XOR 5 XOR 6 = 1`.\n\n\nGiven an array `nums`, return *the **sum** of all **XOR totals** for every **subset** of* `nums`.\u00a0\n\n\nNote:** Subsets with the **same** elements should be counted **multiple** times.\n\n\nAn array `a` is a **subset** of an array `b` if `a` can be obtained from `b` by deleting some (possibly zero) elements of `b`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Backtracking",
            "Bit Manipulation",
            "Combinatorics",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3]",
                "Output": "** 6",
                "Explanation": "** The 4 subsets of [1,3] are:\n- The empty subset has an XOR total of 0.\n- [1] has an XOR total of 1.\n- [3] has an XOR total of 3.\n- [1,3] has an XOR total of 1 XOR 3 = 2.\n0 + 1 + 3 + 2 = 6"
            },
            {
                "Input": "** nums = [5,1,6]",
                "Output": "** 28",
                "Explanation": "** The 8 subsets of [5,1,6] are:\n- The empty subset has an XOR total of 0.\n- [5] has an XOR total of 5.\n- [1] has an XOR total of 1.\n- [6] has an XOR total of 6.\n- [5,1] has an XOR total of 5 XOR 1 = 4.\n- [5,6] has an XOR total of 5 XOR 6 = 3.\n- [1,6] has an XOR total of 1 XOR 6 = 7.\n- [5,1,6] has an XOR total of 5 XOR 1 XOR 6 = 2.\n0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28"
            },
            {
                "Input": "** nums = [3,4,5,6,7,8]",
                "Output": "** 480",
                "Explanation": "** The sum of all XOR totals for every subset is 480."
            }
        ]
    },
    {
        "Title": "Minimum Number of Swaps to Make the Binary String Alternating",
        "slug": "minimum-number-of-swaps-to-make-the-binary-string-alternating",
        "description": "Given a binary string `s`, return *the **minimum** number of character swaps to make it **alternating**, or* `-1` *if it is impossible.\n\n\nThe string is called **alternating** if no two adjacent characters are equal. For example, the strings `\"010\"` and `\"1010\"` are alternating, while the string `\"0100\"` is not.\n\n\nAny two characters may be swapped, even if they are\u00a0**not adjacent**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"111000\"",
                "Output": "** 1",
                "Explanation": "** Swap positions 1 and 4: \"111000\" -> \"101010\"\nThe string is now alternating."
            },
            {
                "Input": "** s = \"010\"",
                "Output": "** 0",
                "Explanation": "** The string is already alternating, no swaps are needed."
            },
            {
                "Input": "** s = \"1110\"",
                "Output": "** -1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Finding Pairs With a Certain Sum",
        "slug": "finding-pairs-with-a-certain-sum",
        "description": "You are given two integer arrays `nums1` and `nums2`. You are tasked to implement a data structure that supports queries of two types:\n\n\n1. **Add** a positive integer to an element of a given index in the array `nums2`.\n2. **Count** the number of pairs `(i, j)` such that `nums1[i] + nums2[j]` equals a given value (`0 <= i < nums1.length` and `0 <= j < nums2.length`).\n\n\nImplement the `FindSumPairs` class:\n\n\n `FindSumPairs(int[] nums1, int[] nums2)` Initializes the `FindSumPairs` object with two integer arrays `nums1` and `nums2`.\n `void add(int index, int val)` Adds `val` to `nums2[index]`, i.e., apply `nums2[index] += val`.\n `int count(int tot)` Returns the number of pairs `(i, j)` such that `nums1[i] + nums2[j] == tot`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Design"
        ],
        "examples": [
            {
                "Input": "[\"FindSumPairs\", \"count\", \"add\", \"count\", \"count\", \"add\", \"add\", \"count\"]\n[[[1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]], [7], [3, 2], [8], [4], [0, 1], [1, 1], [7]]",
                "Output": "[null, 8, null, 2, 1, null, null, 11]",
                "Explanation": "FindSumPairs findSumPairs = new FindSumPairs([1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]);\nfindSumPairs.count(7);  // return 8; pairs (2,2), (3,2), (4,2), (2,4), (3,4), (4,4) make 2 + 5 and pairs (5,1), (5,5) make 3 + 4\nfindSumPairs.add(3, 2); // now nums2 = [1,4,5,**4**,5,4]\nfindSumPairs.count(8);  // return 2; pairs (5,2), (5,4) make 3 + 5\nfindSumPairs.count(4);  // return 1; pair (5,0) makes 3 + 1\nfindSumPairs.add(0, 1); // now nums2 = [**`2`**,4,5,4,5,4]\nfindSumPairs.add(1, 1); // now nums2 = [2,**5**,5,4,5,4]\nfindSumPairs.count(7);  // return 11; pairs (2,1), (2,2), (2,4), (3,1), (3,2), (3,4), (4,1), (4,2), (4,4) make 2 + 5 and pairs (5,3), (5,5) make 3 + 4"
            }
        ]
    },
    {
        "Title": "Number of Ways to Rearrange Sticks With K Sticks Visible",
        "slug": "number-of-ways-to-rearrange-sticks-with-k-sticks-visible",
        "description": "There are `n` uniquely-sized sticks whose lengths are integers from `1` to `n`. You want to arrange the sticks such that **exactly** `k`\u00a0sticks are **visible** from the left. A stick\u00a0is **visible** from the left if there are no **longer**\u00a0sticks to the **left** of it.\n\n\n For example, if the sticks are arranged `[1,3,2,5,4]`, then the sticks with lengths `1`, `3`, and `5` are visible from the left.\n\n\nGiven `n` and `k`, return *the **number** of such arrangements*. Since the answer may be large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Combinatorics"
        ],
        "examples": [
            {
                "Input": "** n = 3, k = 2",
                "Output": "** 3",
                "Explanation": "** [1,3,2], [2,3,1], and [2,1,3] are the only arrangements such that exactly 2 sticks are visible.\nThe visible sticks are underlined."
            },
            {
                "Input": "** n = 5, k = 5",
                "Output": "** 1",
                "Explanation": "** [1,2,3,4,5] is the only arrangement such that all 5 sticks are visible.\nThe visible sticks are underlined."
            },
            {
                "Input": "** n = 20, k = 11",
                "Output": "** 647427950",
                "Explanation": "** There are 647427950 (mod 109 + 7) ways to rearrange the sticks such that exactly 11 sticks are visible."
            }
        ]
    },
    {
        "Title": "Longer Contiguous Segments of Ones than Zeros",
        "slug": "longer-contiguous-segments-of-ones-than-zeros",
        "description": "Given a binary string `s`, return `true` *if the **longest** contiguous segment of* `1`'*s is **strictly longer** than the **longest** contiguous segment of* `0`'*s in* `s`, or return `false` *otherwise*.\n\n\n For example, in `s = \"110100010\"` the longest continuous segment of `1`s has length `2`, and the longest continuous segment of `0`s has length `3`.\n\n\nNote that if there are no `0`'s, then the longest continuous segment of `0`'s is considered to have a length `0`. The same applies if there is no `1`'s.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"1101\"",
                "Output": "** true",
                "Explanation": "**\nThe longest contiguous segment of 1s has length 2: \"1101\"\nThe longest contiguous segment of 0s has length 1: \"1101\"\nThe segment of 1s is longer, so return true."
            },
            {
                "Input": "** s = \"111000\"",
                "Output": "** false",
                "Explanation": "**\nThe longest contiguous segment of 1s has length 3: \"111000\"\nThe longest contiguous segment of 0s has length 3: \"111000\"\nThe segment of 1s is not longer, so return false."
            },
            {
                "Input": "** s = \"110100010\"",
                "Output": "** false",
                "Explanation": "**\nThe longest contiguous segment of 1s has length 2: \"110100010\"\nThe longest contiguous segment of 0s has length 3: \"110100010\"\nThe segment of 1s is not longer, so return false."
            }
        ]
    },
    {
        "Title": "Minimum Speed to Arrive on Time",
        "slug": "minimum-speed-to-arrive-on-time",
        "description": "You are given a floating-point number `hour`, representing the amount of time you have to reach the office. To commute to the office, you must take `n` trains in sequential order. You are also given an integer array `dist` of length `n`, where `dist[i]` describes the distance (in kilometers) of the `ith` train ride.\n\n\nEach train can only depart at an integer hour, so you may need to wait in between each train ride.\n\n\n For example, if the `1st` train ride takes `1.5` hours, you must wait for an additional `0.5` hours before you can depart on the `2nd` train ride at the 2 hour mark.\n\n\nReturn *the **minimum positive integer** speed **(in kilometers per hour)** that all the trains must travel at for you to reach the office on time, or* `-1` *if it is impossible to be on time*.\n\n\nTests are generated such that the answer will not exceed `107` and `hour` will have **at most two digits after the decimal point**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** dist = [1,3,2], hour = 6",
                "Output": "** 1",
                "Explanation": "** At speed 1:\n- The first train ride takes 1/1 = 1 hour.\n- Since we are already at an integer hour, we depart immediately at the 1 hour mark. The second train takes 3/1 = 3 hours.\n- Since we are already at an integer hour, we depart immediately at the 4 hour mark. The third train takes 2/1 = 2 hours.\n- You will arrive at exactly the 6 hour mark."
            },
            {
                "Input": "** dist = [1,3,2], hour = 2.7",
                "Output": "** 3",
                "Explanation": "** At speed 3:\n- The first train ride takes 1/3 = 0.33333 hours.\n- Since we are not at an integer hour, we wait until the 1 hour mark to depart. The second train ride takes 3/3 = 1 hour.\n- Since we are already at an integer hour, we depart immediately at the 2 hour mark. The third train takes 2/3 = 0.66667 hours.\n- You will arrive at the 2.66667 hour mark."
            },
            {
                "Input": "** dist = [1,3,2], hour = 1.9",
                "Output": "** -1",
                "Explanation": "** It is impossible because the earliest the third train can depart is at the 2 hour mark."
            }
        ]
    },
    {
        "Title": "Jump Game VII",
        "slug": "jump-game-vii",
        "description": "You are given a **0-indexed** binary string `s` and two integers `minJump` and `maxJump`. In the beginning, you are standing at index `0`, which is equal to `'0'`. You can move from index `i` to index `j` if the following conditions are fulfilled:\n\n\n `i + minJump <= j <= min(i + maxJump, s.length - 1)`, and\n `s[j] == '0'`.\n\n\nReturn `true` *if you can reach index* `s.length - 1` *in* `s`*, or* `false` *otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Sliding Window",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** s = \"011010\", minJump = 2, maxJump = 3",
                "Output": "** true",
                "Explanation": "**\nIn the first step, move from index 0 to index 3. \nIn the second step, move from index 3 to index 5."
            },
            {
                "Input": "** s = \"01101110\", minJump = 2, maxJump = 3",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Stone Game VIII",
        "slug": "stone-game-viii",
        "description": "Alice and Bob take turns playing a game, with **Alice starting first**.\n\n\nThere are `n` stones arranged in a row. On each player's turn, while the number of stones is **more than one**, they will do the following:\n\n\n1. Choose an integer `x > 1`, and **remove** the leftmost `x` stones from the row.\n2. Add the **sum** of the **removed** stones' values to the player's score.\n3. Place a **new stone**, whose value is equal to that sum, on the left side of the row.\n\n\nThe game stops when **only** **one** stone is left in the row.\n\n\nThe **score difference** between Alice and Bob is `(Alice's score - Bob's score)`. Alice's goal is to **maximize** the score difference, and Bob's goal is the **minimize** the score difference.\n\n\nGiven an integer array `stones` of length `n` where `stones[i]` represents the value of the `ith` stone **from the left**, return *the **score difference** between Alice and Bob if they both play **optimally**.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Prefix Sum",
            "Game Theory"
        ],
        "examples": [
            {
                "Input": "** stones = [-1,2,-3,4,-5]",
                "Output": "** 5",
                "Explanation": "**\r\n- Alice removes the first 4 stones, adds (-1) + 2 + (-3) + 4 = 2 to her score, and places a stone of\r\n  value 2 on the left. stones = [2,-5].\r\n- Bob removes the first 2 stones, adds 2 + (-5) = -3 to his score, and places a stone of value -3 on\r\n  the left. stones = [-3].\r\nThe difference between their scores is 2 - (-3) = 5."
            },
            {
                "Input": "** stones = [7,-6,5,10,5,-2,-6]",
                "Output": "** 13",
                "Explanation": "**\r\n- Alice removes all stones, adds 7 + (-6) + 5 + 10 + 5 + (-2) + (-6) = 13 to her score, and places a\r\n  stone of value 13 on the left. stones = [13].\r\nThe difference between their scores is 13 - 0 = 13."
            },
            {
                "Input": "** stones = [-10,-12]",
                "Output": "** -22",
                "Explanation": "**\r\n- Alice can only make one move, which is to remove both stones. She adds (-10) + (-12) = -22 to her\r\n  score and places a stone of value -22 on the left. stones = [-22].\r\nThe difference between their scores is (-22) - 0 = -22."
            }
        ]
    },
    {
        "Title": "Calculate Special Bonus",
        "slug": "calculate-special-bonus",
        "description": "Table: `Employees`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| employee_id | int     |\n| name        | varchar |\n| salary      | int     |\n+-------------+---------+\nemployee_id is the primary key (column with unique values) for this table.\nEach row of this table indicates the employee ID, employee name, and salary.\n\n```\n\n\u00a0\n\n\nWrite a solution to calculate the bonus of each employee. The bonus of an employee is `100%` of their salary if the ID of the employee is **an odd number** and **the employee's name does not start with the character** `'M'`. The bonus of an employee is `0` otherwise.\n\n\nReturn the result table ordered by `employee_id`.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nEmployees table:\n+-------------+---------+--------+\n| employee_id | name    | salary |\n+-------------+---------+--------+\n| 2           | Meir    | 3000   |\n| 3           | Michael | 3800   |\n| 7           | Addilyn | 7400   |\n| 8           | Juan    | 6100   |\n| 9           | Kannon  | 7700   |\n+-------------+---------+--------+",
                "Output": "** \n+-------------+-------+\n| employee_id | bonus |\n+-------------+-------+\n| 2           | 0     |\n| 3           | 0     |\n| 7           | 7400  |\n| 8           | 0     |\n| 9           | 7700  |\n+-------------+-------+",
                "Explanation": "** \nThe employees with IDs 2 and 8 get 0 bonus because they have an even employee_id.\nThe employee with ID 3 gets 0 bonus because their name starts with 'M'.\nThe rest of the employees get a 100% bonus."
            }
        ]
    },
    {
        "Title": "Substrings of Size Three with Distinct Characters",
        "slug": "substrings-of-size-three-with-distinct-characters",
        "description": "A string is **good** if there are no repeated characters.\n\n\nGiven a string `s`\u200b\u200b\u200b\u200b\u200b, return *the number of **good substrings** of length **three** in* `s`\u200b\u200b\u200b\u200b\u200b\u200b.\n\n\nNote that if there are multiple occurrences of the same substring, every occurrence should be counted.\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Sliding Window",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** s = \"xyzzaz\"",
                "Output": "** 1",
                "Explanation": "** There are 4 substrings of size 3: \"xyz\", \"yzz\", \"zza\", and \"zaz\". \nThe only good substring of length 3 is \"xyz\"."
            },
            {
                "Input": "** s = \"aababcabc\"",
                "Output": "** 4",
                "Explanation": "** There are 7 substrings of size 3: \"aab\", \"aba\", \"bab\", \"abc\", \"bca\", \"cab\", and \"abc\".\nThe good substrings are \"abc\", \"bca\", \"cab\", and \"abc\"."
            }
        ]
    },
    {
        "Title": "Minimize Maximum Pair Sum in Array",
        "slug": "minimize-maximum-pair-sum-in-array",
        "description": "The **pair sum** of a pair `(a,b)` is equal to `a + b`. The **maximum pair sum** is the largest **pair sum** in a list of pairs.\n\n\n For example, if we have pairs `(1,5)`, `(2,3)`, and `(4,4)`, the **maximum pair sum** would be `max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8`.\n\n\nGiven an array `nums` of **even** length `n`, pair up the elements of `nums` into `n / 2` pairs such that:\n\n\n Each element of `nums` is in **exactly one** pair, and\n The **maximum pair sum** is **minimized**.\n\n\nReturn *the minimized **maximum pair sum** after optimally pairing up the elements*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [3,5,2,3]",
                "Output": "** 7",
                "Explanation": "** The elements can be paired up into pairs (3,3) and (5,2).\r\nThe maximum pair sum is max(3+3, 5+2) = max(6, 7) = 7."
            },
            {
                "Input": "** nums = [3,5,4,2,4,6]",
                "Output": "** 8",
                "Explanation": "** The elements can be paired up into pairs (3,5), (4,4), and (6,2).\r\nThe maximum pair sum is max(3+5, 4+4, 6+2) = max(8, 8, 8) = 8."
            }
        ]
    },
    {
        "Title": "Get Biggest Three Rhombus Sums in a Grid",
        "slug": "get-biggest-three-rhombus-sums-in-a-grid",
        "description": "You are given an `m x n` integer matrix `grid`\u200b\u200b\u200b.\n\n\nA **rhombus sum** is the sum of the elements that form **the** **border** of a regular rhombus shape in `grid`\u200b\u200b\u200b. The rhombus must have the shape of a square rotated 45 degrees with each of the corners centered in a grid cell. Below is an image of four valid rhombus shapes with the corresponding colored cells that should be included in each **rhombus sum**:\n\n\n![](https://assets.leetcode.com/uploads/2021/04/23/pc73-q4-desc-2.png)\nNote that the rhombus can have an area of 0, which is depicted by the purple rhombus in the bottom right corner.\n\n\nReturn *the biggest three **distinct rhombus sums** in the* `grid` *in **descending order****. If there are less than three distinct values, return all of them*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Sorting",
            "Heap (Priority Queue)",
            "Matrix",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** grid = [[3,4,5,1,3],[3,3,4,2,3],[20,30,200,40,10],[1,5,5,4,1],[4,3,2,2,5]]",
                "Output": "** [228,216,211]",
                "Explanation": "** The rhombus shapes for the three biggest distinct rhombus sums are depicted above.\n- Blue: 20 + 3 + 200 + 5 = 228\n- Red: 200 + 2 + 10 + 4 = 216\n- Green: 5 + 200 + 4 + 2 = 211"
            },
            {
                "Input": "** grid = [[1,2,3],[4,5,6],[7,8,9]]",
                "Output": "** [20,9,8]",
                "Explanation": "** The rhombus shapes for the three biggest distinct rhombus sums are depicted above.\n- Blue: 4 + 2 + 6 + 8 = 20\n- Red: 9 (area 0 rhombus in the bottom right corner)\n- Green: 8 (area 0 rhombus in the bottom middle)"
            }
        ]
    },
    {
        "Title": "Minimum XOR Sum of Two Arrays",
        "slug": "minimum-xor-sum-of-two-arrays",
        "description": "You are given two integer arrays `nums1` and `nums2` of length `n`.\n\n\nThe **XOR sum** of the two integer arrays is `(nums1[0] XOR nums2[0]) + (nums1[1] XOR nums2[1]) + ... + (nums1[n - 1] XOR nums2[n - 1])` (**0-indexed**).\n\n\n For example, the **XOR sum** of `[1,2,3]` and `[3,2,1]` is equal to `(1 XOR 3) + (2 XOR 2) + (3 XOR 1) = 2 + 0 + 2 = 4`.\n\n\nRearrange the elements of `nums2` such that the resulting **XOR sum** is **minimized**.\n\n\nReturn *the **XOR sum** after the rearrangement*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** nums1 = [1,2], nums2 = [2,3]",
                "Output": "** 2",
                "Explanation": "** Rearrange nums2 so that it becomes [3,2].\nThe XOR sum is (1 XOR 3) + (2 XOR 2) = 2 + 0 = 2."
            },
            {
                "Input": "** nums1 = [1,0,3], nums2 = [5,3,4]",
                "Output": "** 8",
                "Explanation": "** Rearrange nums2 so that it becomes [5,4,3]. \nThe XOR sum is (1 XOR 5) + (0 XOR 4) + (3 XOR 3) = 4 + 4 + 0 = 8."
            }
        ]
    },
    {
        "Title": "Check if Word Equals Summation of Two Words",
        "slug": "check-if-word-equals-summation-of-two-words",
        "description": "The **letter value** of a letter is its position in the alphabet **starting from 0** (i.e. `'a' -> 0`, `'b' -> 1`, `'c' -> 2`, etc.).\n\n\nThe **numerical value** of some string of lowercase English letters `s` is the **concatenation** of the **letter values** of each letter in `s`, which is then **converted** into an integer.\n\n\n For example, if `s = \"acb\"`, we concatenate each letter's letter value, resulting in `\"021\"`. After converting it, we get `21`.\n\n\nYou are given three strings `firstWord`, `secondWord`, and `targetWord`, each consisting of lowercase English letters `'a'` through `'j'` **inclusive**.\n\n\nReturn `true` *if the **summation** of the **numerical values** of* `firstWord` *and* `secondWord` *equals the **numerical value** of* `targetWord`*, or* `false` *otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** firstWord = \"acb\", secondWord = \"cba\", targetWord = \"cdb\"",
                "Output": "** true",
                "Explanation": "**\nThe numerical value of firstWord is \"acb\" -> \"021\" -> 21.\nThe numerical value of secondWord is \"cba\" -> \"210\" -> 210.\nThe numerical value of targetWord is \"cdb\" -> \"231\" -> 231.\nWe return true because 21 + 210 == 231."
            },
            {
                "Input": "** firstWord = \"aaa\", secondWord = \"a\", targetWord = \"aab\"",
                "Output": "** false",
                "Explanation": "** \nThe numerical value of firstWord is \"aaa\" -> \"000\" -> 0.\nThe numerical value of secondWord is \"a\" -> \"0\" -> 0.\nThe numerical value of targetWord is \"aab\" -> \"001\" -> 1.\nWe return false because 0 + 0 != 1."
            },
            {
                "Input": "** firstWord = \"aaa\", secondWord = \"a\", targetWord = \"aaaa\"",
                "Output": "** true",
                "Explanation": "** \nThe numerical value of firstWord is \"aaa\" -> \"000\" -> 0.\nThe numerical value of secondWord is \"a\" -> \"0\" -> 0.\nThe numerical value of targetWord is \"aaaa\" -> \"0000\" -> 0.\nWe return true because 0 + 0 == 0."
            }
        ]
    },
    {
        "Title": "Maximum Value after Insertion",
        "slug": "maximum-value-after-insertion",
        "description": "You are given a very large integer `n`, represented as a string,\u200b\u200b\u200b\u200b\u200b\u200b and an integer digit `x`. The digits in `n` and the digit `x` are in the **inclusive** range `[1, 9]`, and `n` may represent a **negative** number.\n\n\nYou want to **maximize** `n`**'s numerical value** by inserting `x` anywhere in the decimal representation of `n`\u200b\u200b\u200b\u200b\u200b\u200b. You **cannot** insert `x` to the left of the negative sign.\n\n\n For example, if `n = 73` and `x = 6`, it would be best to insert it between `7` and `3`, making `n = 763`.\n If `n = -55` and `x = 2`, it would be best to insert it before the first `5`, making `n = -255`.\n\n\nReturn *a string representing the **maximum** value of* `n`*\u200b\u200b\u200b\u200b\u200b\u200b after the insertion*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** n = \"99\", x = 9",
                "Output": "** \"999\"",
                "Explanation": "** The result is the same regardless of where you insert 9."
            },
            {
                "Input": "** n = \"-13\", x = 2",
                "Output": "** \"-123\"",
                "Explanation": "** You can make n one of {-213, -123, -132}, and the largest of those three is -123."
            }
        ]
    },
    {
        "Title": "Process Tasks Using Servers",
        "slug": "process-tasks-using-servers",
        "description": "You are given two **0-indexed** integer arrays `servers` and `tasks` of lengths `n`\u200b\u200b\u200b\u200b\u200b\u200b and `m`\u200b\u200b\u200b\u200b\u200b\u200b respectively. `servers[i]` is the **weight** of the `i\u200b\u200b\u200b\u200b\u200b\u200bth`\u200b\u200b\u200b\u200b server, and `tasks[j]` is the **time needed** to process the `j\u200b\u200b\u200b\u200b\u200b\u200bth`\u200b\u200b\u200b\u200b task **in seconds**.\n\n\nTasks are assigned to the servers using a **task queue**. Initially, all servers are free, and the queue is **empty**.\n\n\nAt second `j`, the `jth` task is **inserted** into the queue (starting with the `0th` task being inserted at second `0`). As long as there are free servers and the queue is not empty, the task in the front of the queue will be assigned to a free server with the **smallest weight**, and in case of a tie, it is assigned to a free server with the **smallest index**.\n\n\nIf there are no free servers and the queue is not empty, we wait until a server becomes free and immediately assign the next task. If multiple servers become free at the same time, then multiple tasks from the queue will be assigned **in order of insertion** following the weight and index priorities above.\n\n\nA server that is assigned task `j` at second `t` will be free again at second `t + tasks[j]`.\n\n\nBuild an array `ans`\u200b\u200b\u200b\u200b of length `m`, where `ans[j]` is the **index** of the server the `j\u200b\u200b\u200b\u200b\u200b\u200bth` task will be assigned to.\n\n\nReturn *the array* `ans`\u200b\u200b\u200b\u200b.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** servers = [3,3,2], tasks = [1,2,3,2,1,2]",
                "Output": "** [2,2,0,2,1,2]",
                "Explanation": "** Events in chronological order go as follows:\n- At second 0, task 0 is added and processed using server 2 until second 1.\n- At second 1, server 2 becomes free. Task 1 is added and processed using server 2 until second 3.\n- At second 2, task 2 is added and processed using server 0 until second 5.\n- At second 3, server 2 becomes free. Task 3 is added and processed using server 2 until second 5.\n- At second 4, task 4 is added and processed using server 1 until second 5.\n- At second 5, all servers become free. Task 5 is added and processed using server 2 until second 7."
            },
            {
                "Input": "** servers = [5,1,4,3,2], tasks = [2,1,2,4,5,2,1]",
                "Output": "** [1,4,1,4,1,3,2]",
                "Explanation": "** Events in chronological order go as follows: \n- At second 0, task 0 is added and processed using server 1 until second 2.\n- At second 1, task 1 is added and processed using server 4 until second 2.\n- At second 2, servers 1 and 4 become free. Task 2 is added and processed using server 1 until second 4. \n- At second 3, task 3 is added and processed using server 4 until second 7.\n- At second 4, server 1 becomes free. Task 4 is added and processed using server 1 until second 9. \n- At second 5, task 5 is added and processed using server 3 until second 7.\n- At second 6, task 6 is added and processed using server 2 until second 7."
            }
        ]
    },
    {
        "Title": "Minimum Skips to Arrive at Meeting On Time",
        "slug": "minimum-skips-to-arrive-at-meeting-on-time",
        "description": "You are given an integer `hoursBefore`, the number of hours you have to travel to your meeting. To arrive at your meeting, you have to travel through `n` roads. The road lengths are given as an integer array `dist` of length `n`, where `dist[i]` describes the length of the `ith` road in **kilometers**. In addition, you are given an integer `speed`, which is the speed (in **km/h**) you will travel at.\n\n\nAfter you travel road `i`, you must rest and wait for the **next integer hour** before you can begin traveling on the next road. Note that you do not have to rest after traveling the last road because you are already at the meeting.\n\n\n For example, if traveling a road takes `1.4` hours, you must wait until the `2` hour mark before traveling the next road. If traveling a road takes exactly\u00a0`2`\u00a0hours, you do not need to wait.\n\n\nHowever, you are allowed to **skip** some rests to be able to arrive on time, meaning you do not need to wait for the next integer hour. Note that this means you may finish traveling future roads at different hour marks.\n\n\n For example, suppose traveling the first road takes `1.4` hours and traveling the second road takes `0.6` hours. Skipping the rest after the first road will mean you finish traveling the second road right at the `2` hour mark, letting you start traveling the third road immediately.\n\n\nReturn *the **minimum number of skips required** to arrive at the meeting on time, or* `-1` *if it is **impossible***.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** dist = [1,3,2], speed = 4, hoursBefore = 2",
                "Output": "** 1",
                "Explanation": "**\nWithout skipping any rests, you will arrive in (1/4 + 3/4) + (3/4 + 1/4) + (2/4) = 2.5 hours.\nYou can skip the first rest to arrive in ((1/4 + 0) + (3/4 + 0)) + (2/4) = 1.5 hours.\nNote that the second rest is shortened because you finish traveling the second road at an integer hour due to skipping the first rest."
            },
            {
                "Input": "** dist = [7,3,5,5], speed = 2, hoursBefore = 10",
                "Output": "** 2",
                "Explanation": "**\nWithout skipping any rests, you will arrive in (7/2 + 1/2) + (3/2 + 1/2) + (5/2 + 1/2) + (5/2) = 11.5 hours.\nYou can skip the first and third rest to arrive in ((7/2 + 0) + (3/2 + 0)) + ((5/2 + 0) + (5/2)) = 10 hours."
            },
            {
                "Input": "** dist = [7,3,5,5], speed = 1, hoursBefore = 10",
                "Output": "** -1",
                "Explanation": "** It is impossible to arrive at the meeting on time even if you skip all the rests."
            }
        ]
    },
    {
        "Title": "Egg Drop With 2 Eggs and N Floors",
        "slug": "egg-drop-with-2-eggs-and-n-floors",
        "description": "You are given **two identical** eggs and you have access to a building with `n` floors labeled from `1` to `n`.\n\n\nYou know that there exists a floor `f` where `0 <= f <= n` such that any egg dropped at a floor **higher** than `f` will **break**, and any egg dropped **at or below** floor `f` will **not break**.\n\n\nIn each move, you may take an **unbroken** egg and drop it from any floor `x` (where `1 <= x <= n`). If the egg breaks, you can no longer use it. However, if the egg does not break, you may **reuse** it in future moves.\n\n\nReturn *the **minimum number of moves** that you need to determine **with certainty** what the value of* `f` is.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** 2",
                "Explanation": "** We can drop the first egg from floor 1 and the second egg from floor 2.\nIf the first egg breaks, we know that f = 0.\nIf the second egg breaks but the first egg didn't, we know that f = 1.\nOtherwise, if both eggs survive, we know that f = 2."
            },
            {
                "Input": "** n = 100",
                "Output": "** 14",
                "Explanation": "** One optimal strategy is:\n- Drop the 1st egg at floor 9. If it breaks, we know f is between 0 and 8. Drop the 2nd egg starting from floor 1 and going up one at a time to find f within 8 more drops. Total drops is 1 + 8 = 9.\n- If the 1st egg does not break, drop the 1st egg again at floor 22. If it breaks, we know f is between 9 and 21. Drop the 2nd egg starting from floor 10 and going up one at a time to find f within 12 more drops. Total drops is 2 + 12 = 14.\n- If the 1st egg does not break again, follow a similar process dropping the 1st egg from floors 34, 45, 55, 64, 72, 79, 85, 90, 94, 97, 99, and 100.\nRegardless of the outcome, it takes at most 14 drops to determine f."
            }
        ]
    },
    {
        "Title": "Determine Whether Matrix Can Be Obtained By Rotation",
        "slug": "determine-whether-matrix-can-be-obtained-by-rotation",
        "description": "Given two `n x n` binary matrices `mat` and `target`, return `true` *if it is possible to make* `mat` *equal to* `target` *by **rotating*** `mat` *in **90-degree increments**, or* `false` *otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** mat = [[0,1],[1,0]], target = [[1,0],[0,1]]",
                "Output": "** true",
                "Explanation": "** We can rotate mat 90 degrees clockwise to make mat equal target."
            },
            {
                "Input": "** mat = [[0,1],[1,1]], target = [[1,0],[0,1]]",
                "Output": "** false",
                "Explanation": "** It is impossible to make mat equal to target by rotating mat."
            },
            {
                "Input": "** mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]",
                "Output": "** true",
                "Explanation": "** We can rotate mat 90 degrees clockwise two times to make mat equal target."
            }
        ]
    },
    {
        "Title": "Reduction Operations to Make the Array Elements Equal",
        "slug": "reduction-operations-to-make-the-array-elements-equal",
        "description": "Given an integer array `nums`, your goal is to make all elements in `nums` equal. To complete one operation, follow these steps:\n\n\n1. Find the **largest** value in `nums`. Let its index be `i` (**0-indexed**) and its value be `largest`. If there are multiple elements with the largest value, pick the smallest `i`.\n2. Find the **next largest** value in `nums` **strictly smaller** than `largest`. Let its value be `nextLargest`.\n3. Reduce `nums[i]` to `nextLargest`.\n\n\nReturn *the number of operations to make all elements in* `nums` *equal*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [5,1,3]",
                "Output": "** 3",
                "Explanation": "**\u00a0It takes 3 operations to make all elements in nums equal:\n1. largest = 5 at index 0. nextLargest = 3. Reduce nums[0] to 3. nums = [3,1,3].\n2. largest = 3 at index 0. nextLargest = 1. Reduce nums[0] to 1. nums = [1,1,3].\n3. largest = 3 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1]."
            },
            {
                "Input": "** nums = [1,1,1]",
                "Output": "** 0",
                "Explanation": "**\u00a0All elements in nums are already equal."
            },
            {
                "Input": "** nums = [1,1,2,2,3]",
                "Output": "** 4",
                "Explanation": "**\u00a0It takes 4 operations to make all elements in nums equal:\n1. largest = 3 at index 4. nextLargest = 2. Reduce nums[4] to 2. nums = [1,1,2,2,2].\n2. largest = 2 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1,2,2].\n3. largest = 2 at index 3. nextLargest = 1. Reduce nums[3] to 1. nums = [1,1,1,1,2].\n4. largest = 2 at index 4. nextLargest = 1. Reduce nums[4] to 1. nums = [1,1,1,1,1]."
            }
        ]
    },
    {
        "Title": "Minimum Number of Flips to Make the Binary String Alternating",
        "slug": "minimum-number-of-flips-to-make-the-binary-string-alternating",
        "description": "You are given a binary string `s`. You are allowed to perform two types of operations on the string in any sequence:\n\n\n **Type-1: Remove** the character at the start of the string `s` and **append** it to the end of the string.\n **Type-2: Pick** any character in `s` and **flip** its value, i.e., if its value is `'0'` it becomes `'1'` and vice-versa.\n\n\nReturn *the **minimum** number of **type-2** operations you need to perform* *such that* `s` *becomes **alternating**.\n\n\nThe string is called **alternating** if no two adjacent characters are equal.\n\n\n For example, the strings `\"010\"` and `\"1010\"` are alternating, while the string `\"0100\"` is not.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Greedy",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** s = \"111000\"",
                "Output": "** 2",
                "Explanation": "Use the first operation two times to make s = \"100011\".\nThen, use the second operation on the third and sixth elements to make s = \"101010\"."
            },
            {
                "Input": "** s = \"010\"",
                "Output": "** 0",
                "Explanation": "The string is already alternating."
            },
            {
                "Input": "** s = \"1110\"",
                "Output": "** 1",
                "Explanation": "Use the second operation on the second element to make s = \"1010\"."
            }
        ]
    },
    {
        "Title": "Minimum Space Wasted From Packaging",
        "slug": "minimum-space-wasted-from-packaging",
        "description": "You have `n` packages that you are trying to place in boxes, **one package in each box**. There are `m` suppliers that each produce boxes of **different sizes** (with infinite supply). A package can be placed in a box if the size of the package is **less than or equal to** the size of the box.\n\n\nThe package sizes are given as an integer array `packages`, where `packages[i]` is the **size** of the `ith` package. The suppliers are given as a 2D integer array `boxes`, where `boxes[j]` is an array of **box sizes** that the `jth` supplier produces.\n\n\nYou want to choose a **single supplier** and use boxes from them such that the **total wasted space** is **minimized**. For each package in a box, we define the space **wasted** to be `size of the box - size of the package`. The **total wasted space** is the sum of the space wasted in **all** the boxes.\n\n\n For example, if you have to fit packages with sizes `[2,3,5]` and the supplier offers boxes of sizes `[4,8]`, you can fit the packages of size-`2` and size-`3` into two boxes of size-`4` and the package with size-`5` into a box of size-`8`. This would result in a waste of `(4-2) + (4-3) + (8-5) = 6`.\n\n\nReturn *the **minimum total wasted space** by choosing the box supplier **optimally**, or* `-1` *if it is **impossible** to fit all the packages inside boxes.* Since the answer may be **large**, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Sorting",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** packages = [2,3,5], boxes = [[4,8],[2,8]]",
                "Output": "** 6",
                "Explanation": "It is optimal to choose the first supplier, using two size-4 boxes and one size-8 box.\nThe total waste is (4-2) + (4-3) + (8-5) = 6."
            },
            {
                "Input": "** packages = [2,3,5], boxes = [[1,4],[2,3],[3,4]]",
                "Output": "** -1",
                "Explanation": "** There is no box that the package of size 5 can fit in."
            },
            {
                "Input": "** packages = [3,5,8,10,11,12], boxes = [[12],[11,9],[10,5,14]]",
                "Output": "** 9",
                "Explanation": "** It is optimal to choose the third supplier, using two size-5 boxes, two size-10 boxes, and two size-14 boxes.\nThe total waste is (5-3) + (5-5) + (10-8) + (10-10) + (14-11) + (14-12) = 9."
            }
        ]
    },
    {
        "Title": "The Latest Login in 2020",
        "slug": "the-latest-login-in-2020",
        "description": "Table: `Logins`\n\n\n\n```\n\n+----------------+----------+\n| Column Name    | Type     |\n+----------------+----------+\n| user_id        | int      |\n| time_stamp     | datetime |\n+----------------+----------+\n(user_id, time_stamp) is the primary key (combination of columns with unique values) for this table.\nEach row contains information about the login time for the user with ID user_id.\n\n```\n\n\u00a0\n\n\nWrite a solution to report the **latest** login for all users in the year `2020`. Do **not** include the users who did not login in `2020`.\n\n\nReturn the result table **in any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nLogins table:\n+---------+---------------------+\n| user_id | time_stamp          |\n+---------+---------------------+\n| 6       | 2020-06-30 15:06:07 |\n| 6       | 2021-04-21 14:06:06 |\n| 6       | 2019-03-07 00:18:15 |\n| 8       | 2020-02-01 05:10:53 |\n| 8       | 2020-12-30 00:46:50 |\n| 2       | 2020-01-16 02:49:50 |\n| 2       | 2019-08-25 07:59:08 |\n| 14      | 2019-07-14 09:00:00 |\n| 14      | 2021-01-06 11:59:59 |\n+---------+---------------------+",
                "Output": "** \n+---------+---------------------+\n| user_id | last_stamp          |\n+---------+---------------------+\n| 6       | 2020-06-30 15:06:07 |\n| 8       | 2020-12-30 00:46:50 |\n| 2       | 2020-01-16 02:49:50 |\n+---------+---------------------+",
                "Explanation": "** \nUser 6 logged into their account 3 times but only once in 2020, so we include this login in the result table.\nUser 8 logged into their account 2 times in 2020, once in February and once in December. We include only the latest one (December) in the result table.\nUser 2 logged into their account 2 times but only once in 2020, so we include this login in the result table.\nUser 14 did not login in 2020, so we do not include them in the result table."
            }
        ]
    },
    {
        "Title": "Check if All the Integers in a Range Are Covered",
        "slug": "check-if-all-the-integers-in-a-range-are-covered",
        "description": "You are given a 2D integer array `ranges` and two integers `left` and `right`. Each `ranges[i] = [starti, endi]` represents an **inclusive** interval between `starti` and `endi`.\n\n\nReturn `true` *if each integer in the inclusive range* `[left, right]` *is covered by **at least one** interval in* `ranges`. Return `false` *otherwise*.\n\n\nAn integer `x` is covered by an interval `ranges[i] = [starti, endi]` if `starti <= x <= endi`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** ranges = [[1,2],[3,4],[5,6]], left = 2, right = 5",
                "Output": "** true",
                "Explanation": "** Every integer between 2 and 5 is covered:\n- 2 is covered by the first range.\n- 3 and 4 are covered by the second range.\n- 5 is covered by the third range."
            },
            {
                "Input": "** ranges = [[1,10],[10,20]], left = 21, right = 21",
                "Output": "** false",
                "Explanation": "** 21 is not covered by any range."
            }
        ]
    },
    {
        "Title": "Find the Student that Will Replace the Chalk",
        "slug": "find-the-student-that-will-replace-the-chalk",
        "description": "There are `n` students in a class numbered from `0` to `n - 1`. The teacher will give each student a problem starting with the student number `0`, then the student number `1`, and so on until the teacher reaches the student number `n - 1`. After that, the teacher will restart the process, starting with the student number `0` again.\n\n\nYou are given a **0-indexed** integer array `chalk` and an integer `k`. There are initially `k` pieces of chalk. When the student number `i` is given a problem to solve, they will use `chalk[i]` pieces of chalk to solve that problem. However, if the current number of chalk pieces is **strictly less** than `chalk[i]`, then the student number `i` will be asked to **replace** the chalk.\n\n\nReturn *the **index** of the student that will **replace** the chalk pieces*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Simulation",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** chalk = [5,1,5], k = 22",
                "Output": "** 0",
                "Explanation": "** The students go in turns as follows:\n- Student number 0 uses 5 chalk, so k = 17.\n- Student number 1 uses 1 chalk, so k = 16.\n- Student number 2 uses 5 chalk, so k = 11.\n- Student number 0 uses 5 chalk, so k = 6.\n- Student number 1 uses 1 chalk, so k = 5.\n- Student number 2 uses 5 chalk, so k = 0.\nStudent number 0 does not have enough chalk, so they will have to replace it."
            },
            {
                "Input": "** chalk = [3,4,1,2], k = 25",
                "Output": "** 1",
                "Explanation": "** The students go in turns as follows:\n- Student number 0 uses 3 chalk so k = 22.\n- Student number 1 uses 4 chalk so k = 18.\n- Student number 2 uses 1 chalk so k = 17.\n- Student number 3 uses 2 chalk so k = 15.\n- Student number 0 uses 3 chalk so k = 12.\n- Student number 1 uses 4 chalk so k = 8.\n- Student number 2 uses 1 chalk so k = 7.\n- Student number 3 uses 2 chalk so k = 5.\n- Student number 0 uses 3 chalk so k = 2.\nStudent number 1 does not have enough chalk, so they will have to replace it."
            }
        ]
    },
    {
        "Title": "Largest Magic Square",
        "slug": "largest-magic-square",
        "description": "A `k x k` **magic square** is a `k x k` grid filled with integers such that every row sum, every column sum, and both diagonal sums are **all equal**. The integers in the magic square **do not have to be distinct**. Every `1 x 1` grid is trivially a **magic square**.\n\n\nGiven an `m x n` integer `grid`, return *the **size** (i.e., the side length* `k`*) of the **largest magic square** that can be found within this grid*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** grid = [[7,1,4,5,6],[2,5,1,6,4],[1,5,4,3,2],[1,2,7,3,4]]",
                "Output": "** 3",
                "Explanation": "** The largest magic square has a size of 3.\nEvery row sum, column sum, and diagonal sum of this magic square is equal to 12.\n- Row sums: 5+1+6 = 5+4+3 = 2+7+3 = 12\n- Column sums: 5+5+2 = 1+4+7 = 6+3+3 = 12\n- Diagonal sums: 5+4+3 = 6+4+2 = 12"
            },
            {
                "Input": "** grid = [[5,1,3,1],[9,3,3,1],[1,3,3,8]]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Cost to Change the Final Value of Expression",
        "slug": "minimum-cost-to-change-the-final-value-of-expression",
        "description": "You are given a **valid** boolean expression as a string `expression` consisting of the characters `'1'`,`'0'`,`'&'` (bitwise **AND** operator),`'|'` (bitwise **OR** operator),`'('`, and `')'`.\n\n\n For example, `\"()1|1\"` and `\"(1)&()\"` are **not valid** while `\"1\"`, `\"(((1))|(0))\"`, and `\"1|(0&(1))\"` are **valid** expressions.\n\n\nReturn *the **minimum cost** to change the final value of the expression*.\n\n\n For example, if `expression = \"1|1|(0&0)&1\"`, its **value** is `1|1|(0&0)&1 = 1|1|0&1 = 1|0&1 = 1&1 = 1`. We want to apply operations so that the **new** expression evaluates to `0`.\n\n\nThe **cost** of changing the final value of an expression is the **number of operations** performed on the expression. The types of **operations** are described as follows:\n\n\n Turn a `'1'` into a `'0'`.\n Turn a `'0'` into a `'1'`.\n Turn a `'&'` into a `'|'`.\n Turn a `'|'` into a `'&'`.\n\n\nNote:** `'&'` does **not** take precedence over `'|'` in the **order of calculation**. Evaluate parentheses **first**, then in **left-to-right** order.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "String",
            "Dynamic Programming",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** expression = \"1&(0|1)\"",
                "Output": "** 1",
                "Explanation": "** We can turn \"1&(0**|**1)\" into \"1&(0**&**1)\" by changing the '|' to a '&' using 1 operation.\nThe new expression evaluates to 0."
            },
            {
                "Input": "** expression = \"(0&0)&(0&0&0)\"",
                "Output": "** 3",
                "Explanation": "** We can turn \"(0**&0**)**&**(0&0&0)\" into \"(0**|1**)**|**(0&0&0)\" using 3 operations.\nThe new expression evaluates to 1."
            },
            {
                "Input": "** expression = \"(0|(1|0&1))\"",
                "Output": "** 1",
                "Explanation": "** We can turn \"(0|(**1**|0&1))\" into \"(0|(**0**|0&1))\" using 1 operation.\nThe new expression evaluates to 0."
            }
        ]
    },
    {
        "Title": "Redistribute Characters to Make All Strings Equal",
        "slug": "redistribute-characters-to-make-all-strings-equal",
        "description": "You are given an array of strings `words` (**0-indexed**).\n\n\nIn one operation, pick two **distinct** indices `i` and `j`, where `words[i]` is a non-empty string, and move **any** character from `words[i]` to **any** position in `words[j]`.\n\n\nReturn `true` *if you can make **every** string in* `words` ***equal** using **any** number of operations*, *and* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** words = [\"abc\",\"aabc\",\"bc\"]",
                "Output": "** true",
                "Explanation": "** Move the first 'a' in words[1] to the front of words[2],\nto make words[1] = \"abc\" and words[2] = \"abc\".\nAll the strings are now equal to \"abc\", so return true."
            },
            {
                "Input": "** words = [\"ab\",\"a\"]",
                "Output": "** false",
                "Explanation": "** It is impossible to make all the strings equal using the operation."
            }
        ]
    },
    {
        "Title": "Maximum Number of Removable Characters",
        "slug": "maximum-number-of-removable-characters",
        "description": "You are given two strings `s` and `p` where `p` is a **subsequence** of `s`. You are also given a **distinct 0-indexed** integer array `removable` containing a subset of indices of `s` (`s` is also **0-indexed**).\n\n\nYou want to choose an integer `k` (`0 <= k <= removable.length`) such that, after removing `k` characters from `s` using the **first** `k` indices in `removable`, `p` is still a **subsequence** of `s`. More formally, you will mark the character at `s[removable[i]]` for each `0 <= i < k`, then remove all marked characters and check if `p` is still a subsequence.\n\n\nReturn *the **maximum*** `k` *you can choose such that* `p` *is still a **subsequence** of* `s` *after the removals*.\n\n\nA **subsequence** of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "String",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** s = \"abcacb\", p = \"ab\", removable = [3,1,0]",
                "Output": "** 2",
                "Explanation": "After removing the characters at indices 3 and 1, \"a~~**b**~~c~~**a**~~cb\" becomes \"accb\".\n\"ab\" is a subsequence of \"**a**cc**b**\".\nIf we remove the characters at indices 3, 1, and 0, \"~~**ab**~~c~~**a**~~cb\" becomes \"ccb\", and \"ab\" is no longer a subsequence.\nHence, the maximum k is 2."
            },
            {
                "Input": "** s = \"abcbddddd\", p = \"abcd\", removable = [3,2,1,4,5,6]",
                "Output": "** 1",
                "Explanation": "After removing the character at index 3, \"abc~~**b**~~ddddd\" becomes \"abcddddd\".\n\"abcd\" is a subsequence of \"**abcd**dddd\"."
            },
            {
                "Input": "** s = \"abcab\", p = \"abc\", removable = [0,1,2,3,4]",
                "Output": "** 0",
                "Explanation": "If you remove the first index in the array removable, \"abc\" is no longer a subsequence."
            }
        ]
    },
    {
        "Title": "Merge Triplets to Form Target Triplet",
        "slug": "merge-triplets-to-form-target-triplet",
        "description": "A **triplet** is an array of three integers. You are given a 2D integer array `triplets`, where `triplets[i] = [ai, bi, ci]` describes the `ith` **triplet**. You are also given an integer array `target = [x, y, z]` that describes the **triplet** you want to obtain.\n\n\nTo obtain `target`, you may apply the following operation on `triplets` **any number** of times (possibly **zero**):\n\n\n Choose two indices (**0-indexed**) `i` and `j` (`i != j`) and **update** `triplets[j]` to become `[max(ai, aj), max(bi, bj), max(ci, cj)]`.\n\t+ For example, if `triplets[i] = [2, 5, 3]` and `triplets[j] = [1, 7, 5]`, `triplets[j]` will be updated to `[max(2, 1), max(5, 7), max(3, 5)] = [2, 7, 5]`.\n\n\nReturn `true` *if it is possible to obtain the* `target` ***triplet*** `[x, y, z]` *as an **element** of* `triplets`*, or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** triplets = [[2,5,3],[1,8,4],[1,7,5]], target = [2,7,5]",
                "Output": "** true",
                "Explanation": "** Perform the following operations:\n- Choose the first and last triplets [[2,5,3],[1,8,4],[1,7,5]]. Update the last triplet to be [max(2,1), max(5,7), max(3,5)] = [2,7,5]. triplets = [[2,5,3],[1,8,4],[2,7,5]]\nThe target triplet [2,7,5] is now an element of triplets."
            },
            {
                "Input": "** triplets = [[3,4,5],[4,5,6]], target = [3,2,5]",
                "Output": "** false",
                "Explanation": "** It is impossible to have [3,2,5] as an element because there is no 2 in any of the triplets."
            },
            {
                "Input": "** triplets = [[2,5,3],[2,3,4],[1,2,5],[5,2,3]], target = [5,5,5]",
                "Output": "** true",
                "Explanation": "** Perform the following operations:\n- Choose the first and third triplets [[2,5,3],[2,3,4],[1,2,5],[5,2,3]]. Update the third triplet to be [max(2,1), max(5,2), max(3,5)] = [2,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,2,3]].\n- Choose the third and fourth triplets [[2,5,3],[2,3,4],[2,5,5],[5,2,3]]. Update the fourth triplet to be [max(2,5), max(5,2), max(5,3)] = [5,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,5,5]].\nThe target triplet [5,5,5] is now an element of triplets."
            }
        ]
    },
    {
        "Title": "The Earliest and Latest Rounds Where Players Compete",
        "slug": "the-earliest-and-latest-rounds-where-players-compete",
        "description": "There is a tournament where `n` players are participating. The players are standing in a single row and are numbered from `1` to `n` based on their **initial** standing position (player `1` is the first player in the row, player `2` is the second player in the row, etc.).\n\n\nThe tournament consists of multiple rounds (starting from round number `1`). In each round, the `ith` player from the front of the row competes against the `ith` player from the end of the row, and the winner advances to the next round. When the number of players is odd for the current round, the player in the middle automatically advances to the next round.\n\n\n For example, if the row consists of players `1, 2, 4, 6, 7`\n\t+ Player `1` competes against player `7`.\n\t+ Player `2` competes against player `6`.\n\t+ Player `4` automatically advances to the next round.\n\n\nAfter each round is over, the winners are lined back up in the row based on the **original ordering** assigned to them initially (ascending order).\n\n\nThe players numbered `firstPlayer` and `secondPlayer` are the best in the tournament. They can win against any other player before they compete against each other. If any two other players compete against each other, either of them might win, and thus you may **choose** the outcome of this round.\n\n\nGiven the integers `n`, `firstPlayer`, and `secondPlayer`, return *an integer array containing two values, the **earliest** possible round number and the\u00a0**latest** possible round number in which these two players will compete against each other, respectively*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Memoization"
        ],
        "examples": [
            {
                "Input": "** n = 11, firstPlayer = 2, secondPlayer = 4",
                "Output": "** [3,4]",
                "Explanation": "**\nOne possible scenario which leads to the earliest round number:\nFirst round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\nSecond round: 2, 3, 4, 5, 6, 11\nThird round: 2, 3, 4\nOne possible scenario which leads to the latest round number:\nFirst round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\nSecond round: 1, 2, 3, 4, 5, 6\nThird round: 1, 2, 4\nFourth round: 2, 4"
            },
            {
                "Input": "** n = 5, firstPlayer = 1, secondPlayer = 5",
                "Output": "** [1,1]",
                "Explanation": "** The players numbered 1 and 5 compete in the first round.\nThere is no way to make them compete in any other round."
            }
        ]
    },
    {
        "Title": "Find a Peak Element II",
        "slug": "find-a-peak-element-ii",
        "description": "A **peak** element in a 2D grid is an element that is **strictly greater** than all of its **adjacent** neighbors to the left, right, top, and bottom.\n\n\nGiven a **0-indexed** `m x n` matrix `mat` where **no two adjacent cells are equal**, find **any** peak element `mat[i][j]` and return *the length 2 array* `[i,j]`.\n\n\nYou may assume that the entire matrix is surrounded by an **outer perimeter** with the value `-1` in each cell.\n\n\nYou must write an algorithm that runs in `O(m log(n))` or `O(n log(m))` time.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** mat = [[1,4],[3,2]]",
                "Output": "** [0,1]",
                "Explanation": "**\u00a0Both 3 and 4 are peak elements so [1,0] and [0,1] are both acceptable answers."
            }
        ]
    },
    {
        "Title": "Largest Odd Number in String",
        "slug": "largest-odd-number-in-string",
        "description": "You are given a string `num`, representing a large integer. Return *the **largest-valued odd** integer (as a string) that is a **non-empty substring** of* `num`*, or an empty string* `\"\"` *if no odd integer exists*.\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** num = \"52\"",
                "Output": "** \"5\"",
                "Explanation": "** The only non-empty substrings are \"5\", \"2\", and \"52\". \"5\" is the only odd number."
            },
            {
                "Input": "** num = \"4206\"",
                "Output": "** \"\"",
                "Explanation": "** There are no odd numbers in \"4206\"."
            },
            {
                "Input": "** num = \"35427\"",
                "Output": "** \"35427\"",
                "Explanation": "** \"35427\" is already an odd number."
            }
        ]
    },
    {
        "Title": "The Number of Full Rounds You Have Played",
        "slug": "the-number-of-full-rounds-you-have-played",
        "description": "You are participating in an online chess tournament. There is a chess round that starts every `15` minutes. The first round of the day starts at `00:00`, and after every `15` minutes, a new round starts.\n\n\n For example, the second round starts at `00:15`, the fourth round starts at `00:45`, and the seventh round starts at `01:30`.\n\n\nYou are given two strings `loginTime` and `logoutTime` where:\n\n\n `loginTime` is the time you will login to the game, and\n `logoutTime` is the time you will logout from the game.\n\n\nIf `logoutTime` is **earlier** than `loginTime`, this means you have played from `loginTime` to midnight and from midnight to `logoutTime`.\n\n\nReturn *the number of full chess rounds you have played in the tournament*.\n\n\nNote:**\u00a0All the given times follow the 24-hour clock. That means the first round of the day starts at `00:00` and the last round of the day starts at `23:45`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "String"
        ],
        "examples": [
            {
                "Input": "** loginTime = \"09:31\", logoutTime = \"10:14\"",
                "Output": "** 1",
                "Explanation": "** You played one full round from 09:45 to 10:00.\nYou did not play the full round from 09:30 to 09:45 because you logged in at 09:31 after it began.\nYou did not play the full round from 10:00 to 10:15 because you logged out at 10:14 before it ended."
            },
            {
                "Input": "** loginTime = \"21:30\", logoutTime = \"03:00\"",
                "Output": "** 22",
                "Explanation": "** You played 10 full rounds from 21:30 to 00:00 and 12 full rounds from 00:00 to 03:00.\n10 + 12 = 22."
            }
        ]
    },
    {
        "Title": "Count Sub Islands",
        "slug": "count-sub-islands",
        "description": "You are given two `m x n` binary matrices `grid1` and `grid2` containing only `0`'s (representing water) and `1`'s (representing land). An **island** is a group of `1`'s connected **4-directionally** (horizontal or vertical). Any cells outside of the grid are considered water cells.\n\n\nAn island in `grid2` is considered a **sub-island** if there is an island in `grid1` that contains **all** the cells that make up **this** island in `grid2`.\n\n\nReturn the ***number** of islands in* `grid2` *that are considered **sub-islands***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid1 = [[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]], grid2 = [[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]",
                "Output": "** 3",
                "Explanation": "** In the picture above, the grid on the left is grid1 and the grid on the right is grid2.\nThe 1s colored red in grid2 are those considered to be part of a sub-island. There are three sub-islands."
            },
            {
                "Input": "** grid1 = [[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]], grid2 = [[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]]",
                "Output": "** 2",
                "Explanation": "** In the picture above, the grid on the left is grid1 and the grid on the right is grid2.\nThe 1s colored red in grid2 are those considered to be part of a sub-island. There are two sub-islands."
            }
        ]
    },
    {
        "Title": "Minimum Absolute Difference Queries",
        "slug": "minimum-absolute-difference-queries",
        "description": "The **minimum absolute difference** of an array `a` is defined as the **minimum value** of `|a[i] - a[j]|`, where `0 <= i < j < a.length` and `a[i] != a[j]`. If all elements of `a` are the **same**, the minimum absolute difference is `-1`.\n\n\n For example, the minimum absolute difference of the array `[5,2,3,7,2]` is `|2 - 3| = 1`. Note that it is not `0` because `a[i]` and `a[j]` must be different.\n\n\nYou are given an integer array `nums` and the array `queries` where `queries[i] = [li, ri]`. For each query `i`, compute the **minimum absolute difference** of the **subarray** `nums[li...ri]` containing the elements of `nums` between the **0-based** indices `li` and `ri` (**inclusive**).\n\n\nReturn *an **array*** `ans` *where* `ans[i]` *is the answer to the* `ith` *query*.\n\n\nA **subarray** is a contiguous sequence of elements in an array.\n\n\nThe value of `|x|` is defined as:\n\n\n `x` if `x >= 0`.\n `-x` if `x < 0`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,4,8], queries = [[0,1],[1,2],[2,3],[0,3]]",
                "Output": "** [2,1,4,1]",
                "Explanation": "** The queries are processed as follows:\n- queries[0] = [0,1]: The subarray is [1,3] and the minimum absolute difference is |1-3| = 2.\n- queries[1] = [1,2]: The subarray is [3,4] and the minimum absolute difference is |3-4| = 1.\n- queries[2] = [2,3]: The subarray is [4,8] and the minimum absolute difference is |4-8| = 4.\n- queries[3] = [0,3]: The subarray is [1,3,4,8] and the minimum absolute difference is |3-4| = 1."
            },
            {
                "Input": "** nums = [4,5,2,2,7,10], queries = [[2,3],[0,2],[0,5],[3,5]]",
                "Output": "** [-1,1,1,3]",
                "Explanation": "** The queries are processed as follows:\n- queries[0] = [2,3]: The subarray is [2,2] and the minimum absolute difference is -1 because all the\n  elements are the same.\n- queries[1] = [0,2]: The subarray is [4,5,2] and the minimum absolute difference is |4-5| = 1.\n- queries[2] = [0,5]: The subarray is [4,5,2,2,7,10] and the minimum absolute difference is |4-5| = 1.\n- queries[3] = [3,5]: The subarray is [2,7,10] and the minimum absolute difference is |7-10| = 3."
            }
        ]
    },
    {
        "Title": "Count Salary Categories",
        "slug": "count-salary-categories",
        "description": "Table: `Accounts`\n\n\n\n```\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| account_id  | int  |\n| income      | int  |\n+-------------+------+\naccount_id is the primary key (column with unique values) for this table.\nEach row contains information about the monthly income for one bank account.\n\n```\n\n\u00a0\n\n\nWrite a solution\u00a0to calculate the number of bank accounts for each salary category. The salary categories are:\n\n\n `\"Low Salary\"`: All the salaries **strictly less** than `$20000`.\n `\"Average Salary\"`: All the salaries in the **inclusive** range `[$20000, $50000]`.\n `\"High Salary\"`: All the salaries **strictly greater** than `$50000`.\n\n\nThe result table **must** contain all three categories. If there are no accounts in a category,\u00a0return\u00a0`0`.\n\n\nReturn the result table in **any order**.\n\n\nThe\u00a0result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nAccounts table:\n+------------+--------+\n| account_id | income |\n+------------+--------+\n| 3          | 108939 |\n| 2          | 12747  |\n| 8          | 87709  |\n| 6          | 91796  |\n+------------+--------+",
                "Output": "** \n+----------------+----------------+\n| category       | accounts_count |\n+----------------+----------------+\n| Low Salary     | 1              |\n| Average Salary | 0              |\n| High Salary    | 3              |\n+----------------+----------------+",
                "Explanation": "** \nLow Salary: Account 2.\nAverage Salary: No accounts.\nHigh Salary: Accounts 3, 6, and 8."
            }
        ]
    },
    {
        "Title": "Remove One Element to Make the Array Strictly Increasing",
        "slug": "remove-one-element-to-make-the-array-strictly-increasing",
        "description": "Given a **0-indexed** integer array `nums`, return `true` *if it can be made **strictly increasing** after removing **exactly one** element, or* `false` *otherwise. If the array is already strictly increasing, return* `true`.\n\n\nThe array `nums` is **strictly increasing** if `nums[i - 1] < nums[i]` for each index `(1 <= i < nums.length).`\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,10,5,7]",
                "Output": "** true",
                "Explanation": "** By removing 10 at index 2 from nums, it becomes [1,2,5,7].\n[1,2,5,7] is strictly increasing, so return true."
            },
            {
                "Input": "** nums = [2,3,1,2]",
                "Output": "** false",
                "Explanation": "**\n[3,1,2] is the result of removing the element at index 0.\n[2,1,2] is the result of removing the element at index 1.\n[2,3,2] is the result of removing the element at index 2.\n[2,3,1] is the result of removing the element at index 3.\nNo resulting array is strictly increasing, so return false."
            },
            {
                "Input": "** nums = [1,1,1]",
                "Output": "** false",
                "Explanation": "** The result of removing any element is [1,1].\n[1,1] is not strictly increasing, so return false."
            }
        ]
    },
    {
        "Title": "Remove All Occurrences of a Substring",
        "slug": "remove-all-occurrences-of-a-substring",
        "description": "Given two strings `s` and `part`, perform the following operation on `s` until **all** occurrences of the substring `part` are removed:\n\n\n Find the **leftmost** occurrence of the substring `part` and **remove** it from `s`.\n\n\nReturn `s` *after removing all occurrences of* `part`.\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"daabcbaabcbc\", part = \"abc\"",
                "Output": "** \"dab\"",
                "Explanation": "The following operations are done:\n- s = \"da**abc**baabcbc\", remove \"abc\" starting at index 2, so s = \"dabaabcbc\".\n- s = \"daba**abc**bc\", remove \"abc\" starting at index 4, so s = \"dababc\".\n- s = \"dab**abc**\", remove \"abc\" starting at index 3, so s = \"dab\".\nNow s has no occurrences of \"abc\"."
            },
            {
                "Input": "** s = \"axxxxyyyyb\", part = \"xy\"",
                "Output": "** \"ab\"",
                "Explanation": "The following operations are done:\n- s = \"axxx**xy**yyyb\", remove \"xy\" starting at index 4 so s = \"axxxyyyb\".\n- s = \"axx**xy**yyb\", remove \"xy\" starting at index 3 so s = \"axxyyb\".\n- s = \"ax**xy**yb\", remove \"xy\" starting at index 2 so s = \"axyb\".\n- s = \"a**xy**b\", remove \"xy\" starting at index 1 so s = \"ab\".\nNow s has no occurrences of \"xy\"."
            }
        ]
    },
    {
        "Title": "Maximum Alternating Subsequence Sum",
        "slug": "maximum-alternating-subsequence-sum",
        "description": "The **alternating sum** of a **0-indexed** array is defined as the **sum** of the elements at **even** indices **minus** the **sum** of the elements at **odd** indices.\n\n\n For example, the alternating sum of `[4,2,5,3]` is `(4 + 5) - (2 + 3) = 4`.\n\n\nGiven an array `nums`, return *the **maximum alternating sum** of any subsequence of* `nums` *(after **reindexing** the elements of the subsequence)*.\n\n\n\n\nA **subsequence** of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, `[2,7,4]` is a subsequence of `[4,2,3,7,2,1,4]` (the underlined elements), while `[2,4,2]` is not.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [4,2,5,3]",
                "Output": "** 7",
                "Explanation": "** It is optimal to choose the subsequence [4,2,5] with alternating sum (4 + 5) - 2 = 7."
            },
            {
                "Input": "** nums = [5,6,7,8]",
                "Output": "** 8",
                "Explanation": "** It is optimal to choose the subsequence [8] with alternating sum 8."
            },
            {
                "Input": "** nums = [6,2,1,2,4,5]",
                "Output": "** 10",
                "Explanation": "** It is optimal to choose the subsequence [6,1,5] with alternating sum (6 + 5) - 1 = 10."
            }
        ]
    },
    {
        "Title": "Design Movie Rental System",
        "slug": "design-movie-rental-system",
        "description": "You have a movie renting company consisting of `n` shops. You want to implement a renting system that supports searching for, booking, and returning movies. The system should also support generating a report of the currently rented movies.\n\n\nEach movie is given as a 2D integer array `entries` where `entries[i] = [shopi, moviei, pricei]` indicates that there is a copy of movie `moviei` at shop `shopi` with a rental price of `pricei`. Each shop carries **at most one** copy of a movie `moviei`.\n\n\nThe system should support the following functions:\n\n\n **Search**: Finds the **cheapest 5 shops** that have an **unrented copy** of a given movie. The shops should be sorted by **price** in ascending order, and in case of a tie, the one with the **smaller** `shopi` should appear first. If there are less than 5 matching shops, then all of them should be returned. If no shop has an unrented copy, then an empty list should be returned.\n **Rent**: Rents an **unrented copy** of a given movie from a given shop.\n **Drop**: Drops off a **previously rented copy** of a given movie at a given shop.\n **Report**: Returns the **cheapest 5 rented movies** (possibly of the same movie ID) as a 2D list `res` where `res[j] = [shopj, moviej]` describes that the `jth` cheapest rented movie `moviej` was rented from the shop `shopj`. The movies in `res` should be sorted by **price** in ascending order, and in case of a tie, the one with the **smaller** `shopj` should appear first, and if there is still tie, the one with the **smaller** `moviej` should appear first. If there are fewer than 5 rented movies, then all of them should be returned. If no movies are currently being rented, then an empty list should be returned.\n\n\nImplement the `MovieRentingSystem` class:\n\n\n `MovieRentingSystem(int n, int[][] entries)` Initializes the `MovieRentingSystem` object with `n` shops and the movies in `entries`.\n `List<Integer> search(int movie)` Returns a list of shops that have an **unrented copy** of the given `movie` as described above.\n `void rent(int shop, int movie)` Rents the given `movie` from the given `shop`.\n `void drop(int shop, int movie)` Drops off a previously rented `movie` at the given `shop`.\n `List<List<Integer>> report()` Returns a list of cheapest **rented** movies as described above.\n\n\nNote:** The test cases will be generated such that `rent` will only be called if the shop has an **unrented** copy of the movie, and `drop` will only be called if the shop had **previously rented** out the movie.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Design",
            "Heap (Priority Queue)",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "[\"MovieRentingSystem\", \"search\", \"rent\", \"rent\", \"report\", \"drop\", \"search\"]\n[[3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]], [1], [0, 1], [1, 2], [], [1, 2], [2]]",
                "Output": "[null, [1, 0, 2], null, null, [[0, 1], [1, 2]], null, [0, 1]]",
                "Explanation": "MovieRentingSystem movieRentingSystem = new MovieRentingSystem(3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]);\nmovieRentingSystem.search(1);  // return [1, 0, 2], Movies of ID 1 are unrented at shops 1, 0, and 2. Shop 1 is cheapest; shop 0 and 2 are the same price, so order by shop number.\nmovieRentingSystem.rent(0, 1); // Rent movie 1 from shop 0. Unrented movies at shop 0 are now [2,3].\nmovieRentingSystem.rent(1, 2); // Rent movie 2 from shop 1. Unrented movies at shop 1 are now [1].\nmovieRentingSystem.report();   // return [[0, 1], [1, 2]]. Movie 1 from shop 0 is cheapest, followed by movie 2 from shop 1.\nmovieRentingSystem.drop(1, 2); // Drop off movie 2 at shop 1. Unrented movies at shop 1 are now [1,2].\nmovieRentingSystem.search(2);  // return [0, 1]. Movies of ID 2 are unrented at shops 0 and 1. Shop 0 is cheapest, followed by shop 1."
            }
        ]
    },
    {
        "Title": "Maximum Product Difference Between Two Pairs",
        "slug": "maximum-product-difference-between-two-pairs",
        "description": "The **product difference** between two pairs `(a, b)` and `(c, d)` is defined as `(a * b) - (c * d)`.\n\n\n For example, the product difference between `(5, 6)` and `(2, 7)` is `(5 * 6) - (2 * 7) = 16`.\n\n\nGiven an integer array `nums`, choose four **distinct** indices `w`, `x`, `y`, and `z` such that the **product difference** between pairs `(nums[w], nums[x])` and `(nums[y], nums[z])` is **maximized**.\n\n\nReturn *the **maximum** such product difference*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [5,6,2,7,4]",
                "Output": "** 34",
                "Explanation": "** We can choose indices 1 and 3 for the first pair (6, 7) and indices 2 and 4 for the second pair (2, 4).\r\nThe product difference is (6 * 7) - (2 * 4) = 34."
            },
            {
                "Input": "** nums = [4,2,5,9,7,4,8]",
                "Output": "** 64",
                "Explanation": "** We can choose indices 3 and 6 for the first pair (9, 8) and indices 1 and 5 for the second pair (2, 4).\r\nThe product difference is (9 * 8) - (2 * 4) = 64."
            }
        ]
    },
    {
        "Title": "Cyclically Rotating a Grid",
        "slug": "cyclically-rotating-a-grid",
        "description": "You are given an `m x n` integer matrix `grid`\u200b\u200b\u200b, where `m` and `n` are both **even** integers, and an integer `k`.\n\n\nThe matrix is composed of several layers, which is shown in the below image, where each color is its own layer:\n\n\n![](https://assets.leetcode.com/uploads/2021/06/10/ringofgrid.png)\n\n\nA cyclic rotation of the matrix is done by cyclically rotating **each layer** in the matrix. To cyclically rotate a layer once, each element in the layer will take the place of the adjacent element in the **counter-clockwise** direction. An example rotation is shown below:\n\n\n![](https://assets.leetcode.com/uploads/2021/06/22/explanation_grid.jpg)\nReturn *the matrix after applying* `k` *cyclic rotations to it*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** grid = [[40,10],[30,20]], k = 1",
                "Output": "** [[10,20],[40,30]]",
                "Explanation": "** The figures above represent the grid at every state."
            }
        ]
    },
    {
        "Title": "Number of Wonderful Substrings",
        "slug": "number-of-wonderful-substrings",
        "description": "A **wonderful** string is a string where **at most one** letter appears an **odd** number of times.\n\n\n For example, `\"ccjjc\"` and `\"abab\"` are wonderful, but `\"ab\"` is not.\n\n\nGiven a string `word` that consists of the first ten lowercase English letters (`'a'` through `'j'`), return *the **number of wonderful non-empty substrings** in* `word`*. If the same substring appears multiple times in* `word`*, then count **each occurrence** separately.\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Bit Manipulation",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** word = \"aba\"",
                "Output": "** 4",
                "Explanation": "** The four wonderful substrings are underlined below:\r\n- \"**a**ba\" -> \"a\"\r\n- \"a**b**a\" -> \"b\"\r\n- \"ab**a**\" -> \"a\"\r\n- \"**aba**\" -> \"aba\""
            },
            {
                "Input": "** word = \"aabb\"",
                "Output": "** 9",
                "Explanation": "** The nine wonderful substrings are underlined below:\r\n- \"**a**abb\" -> \"a\"\r\n- \"**aa**bb\" -> \"aa\"\r\n- \"**aab**b\" -> \"aab\"\r\n- \"**aabb**\" -> \"aabb\"\r\n- \"a**a**bb\" -> \"a\"\r\n- \"a**abb**\" -> \"abb\"\r\n- \"aa**b**b\" -> \"b\"\r\n- \"aa**bb**\" -> \"bb\"\r\n- \"aab**b**\" -> \"b\""
            },
            {
                "Input": "** word = \"he\"",
                "Output": "** 2",
                "Explanation": "** The two wonderful substrings are underlined below:\r\n- \"**h**e\" -> \"h\"\r\n- \"h**e**\" -> \"e\""
            }
        ]
    },
    {
        "Title": "Count Ways to Build Rooms in an Ant Colony",
        "slug": "count-ways-to-build-rooms-in-an-ant-colony",
        "description": "You are an ant tasked with adding `n` new rooms numbered `0` to `n-1` to your colony. You are given the expansion plan as a **0-indexed** integer array of length `n`, `prevRoom`, where `prevRoom[i]` indicates that you must build room `prevRoom[i]` before building room `i`, and these two rooms must be connected **directly**. Room `0` is already built, so `prevRoom[0] = -1`. The expansion\u00a0plan is given such that once all the rooms are built, every room will be reachable from room `0`.\n\n\nYou can only build **one room** at a time, and you can travel freely between rooms you have **already built** only if they are **connected**.\u00a0You can choose to build **any room** as long as its **previous room**\u00a0is already built.\n\n\nReturn *the **number of different orders** you can build all the rooms in*. Since the answer may be large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Tree",
            "Graph",
            "Topological Sort",
            "Combinatorics"
        ],
        "examples": [
            {
                "Input": "** prevRoom = [-1,0,1]",
                "Output": "** 1",
                "Explanation": "**\u00a0There is only one way to build the additional rooms: 0 \u2192 1 \u2192 2"
            }
        ]
    },
    {
        "Title": "Build Array from Permutation",
        "slug": "build-array-from-permutation",
        "description": "Given a **zero-based permutation** `nums` (**0-indexed**), build an array `ans` of the **same length** where `ans[i] = nums[nums[i]]` for each `0 <= i < nums.length` and return it.\n\n\nA **zero-based permutation** `nums` is an array of **distinct** integers from `0` to `nums.length - 1` (**inclusive**).\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [0,2,1,5,3,4]",
                "Output": "** [0,1,2,4,5,3]",
                "Explanation": "** The array ans is built as follows: \nans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]\n    = [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]\n    = [0,1,2,4,5,3]"
            },
            {
                "Input": "** nums = [5,0,1,2,3,4]",
                "Output": "** [4,5,0,1,2,3]",
                "Explanation": "** The array ans is built as follows:\nans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]\n    = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]\n    = [4,5,0,1,2,3]"
            }
        ]
    },
    {
        "Title": "Eliminate Maximum Number of Monsters",
        "slug": "eliminate-maximum-number-of-monsters",
        "description": "You are playing a video game where you are defending your city from a group of `n` monsters. You are given a **0-indexed** integer array `dist` of size `n`, where `dist[i]` is the **initial distance** in kilometers of the `ith` monster from the city.\n\n\nThe monsters walk toward the city at a **constant** speed. The speed of each monster is given to you in an integer array `speed` of size `n`, where `speed[i]` is the speed of the `ith` monster in kilometers per minute.\n\n\nYou have a weapon that, once fully charged, can eliminate a **single** monster. However, the weapon takes **one minute** to charge. The weapon is fully charged at the very start.\n\n\nYou lose when any monster reaches your city. If a monster reaches the city at the exact moment the weapon is fully charged, it counts as a **loss**, and the game ends before you can use your weapon.\n\n\nReturn *the **maximum** number of monsters that you can eliminate before you lose, or* `n` *if you can eliminate all the monsters before they reach the city.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** dist = [1,3,4], speed = [1,1,1]",
                "Output": "** 3",
                "Explanation": "**\nIn the beginning, the distances of the monsters are [1,3,4]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,2,3]. You eliminate the second monster.\nAfter a minute, the distances of the monsters are [X,X,2]. You eliminate the third monster.\nAll 3 monsters can be eliminated."
            },
            {
                "Input": "** dist = [1,1,2,3], speed = [1,1,1,1]",
                "Output": "** 1",
                "Explanation": "**\nIn the beginning, the distances of the monsters are [1,1,2,3]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,0,1,2], so you lose.\nYou can only eliminate 1 monster."
            },
            {
                "Input": "** dist = [3,2,4], speed = [5,3,2]",
                "Output": "** 1",
                "Explanation": "**\nIn the beginning, the distances of the monsters are [3,2,4]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,0,2], so you lose.\nYou can only eliminate 1 monster."
            }
        ]
    },
    {
        "Title": "Count Good Numbers",
        "slug": "count-good-numbers",
        "description": "A digit string is **good** if the digits **(0-indexed)** at **even** indices are **even** and the digits at **odd** indices are **prime** (`2`, `3`, `5`, or `7`).\n\n\n For example, `\"2582\"` is good because the digits (`2` and `8`) at even positions are even and the digits (`5` and `2`) at odd positions are prime. However, `\"3245\"` is **not** good because `3` is at an even index but is not even.\n\n\nGiven an integer `n`, return *the **total** number of good digit strings of length* `n`. Since the answer may be large, **return it modulo** `109 + 7`.\n\n\nA **digit string** is a string consisting of digits `0` through `9` that may contain leading zeros.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** 5",
                "Explanation": "** The good numbers of length 1 are \"0\", \"2\", \"4\", \"6\", \"8\"."
            },
            {
                "Input": "** n = 4",
                "Output": "** 400",
                "Explanation": null
            },
            {
                "Input": "** n = 50",
                "Output": "** 564908303",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Common Subpath",
        "slug": "longest-common-subpath",
        "description": "There is a country of `n` cities numbered from `0` to `n - 1`. In this country, there is a road connecting **every pair** of cities.\n\n\nThere are `m` friends numbered from `0` to `m - 1` who are traveling through the country. Each one of them will take a path consisting of some cities. Each path is represented by an integer array that contains the visited cities in order. The path may contain a city **more than once**, but the same city will not be listed consecutively.\n\n\nGiven an integer `n` and a 2D integer array `paths` where `paths[i]` is an integer array representing the path of the `ith` friend, return *the length of the **longest common subpath** that is shared by **every** friend's path, or* `0` *if there is no common subpath at all*.\n\n\nA **subpath** of a path is a contiguous sequence of cities within that path.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Rolling Hash",
            "Suffix Array",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "** n = 5, paths = [[0,1,2,3,4],\n                       [2,3,4],\n                       [4,0,1,2,3]]",
                "Output": "** 2",
                "Explanation": "** The longest common subpath is [2,3]."
            },
            {
                "Input": "** n = 3, paths = [[0],[1],[2]]",
                "Output": "** 0",
                "Explanation": "** There is no common subpath shared by the three paths."
            },
            {
                "Input": "** n = 5, paths = [[0,1,2,3,4],\n                       [4,3,2,1,0]]",
                "Output": "** 1",
                "Explanation": "** The possible longest common subpaths are [0], [1], [2], [3], and [4]. All have a length of 1."
            }
        ]
    },
    {
        "Title": "Count Square Sum Triples",
        "slug": "count-square-sum-triples",
        "description": "A **square triple** `(a,b,c)` is a triple where `a`, `b`, and `c` are **integers** and `a2 + b2 = c2`.\n\n\nGiven an integer `n`, return *the number of **square triples** such that* `1 <= a, b, c <= n`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** n = 5",
                "Output": "** 2",
                "Explanation": "The square triples are (3,4,5) and (4,3,5)."
            },
            {
                "Input": "** n = 10",
                "Output": "** 4",
                "Explanation": "The square triples are (3,4,5), (4,3,5), (6,8,10), and (8,6,10)."
            }
        ]
    },
    {
        "Title": "Nearest Exit from Entrance in Maze",
        "slug": "nearest-exit-from-entrance-in-maze",
        "description": "You are given an `m x n` matrix `maze` (**0-indexed**) with empty cells (represented as `'.'`) and walls (represented as `'+'`). You are also given the `entrance` of the maze, where `entrance = [entrancerow, entrancecol]` denotes the row and column of the cell you are initially standing at.\n\n\nIn one step, you can move one cell **up**, **down**, **left**, or **right**. You cannot step into a cell with a wall, and you cannot step outside the maze. Your goal is to find the **nearest exit** from the `entrance`. An **exit** is defined as an **empty cell** that is at the **border** of the `maze`. The `entrance` **does not count** as an exit.\n\n\nReturn *the **number of steps** in the shortest path from the* `entrance` *to the nearest exit, or* `-1` *if no such path exists*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Breadth-First Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** maze = [[\"+\",\"+\",\".\",\"+\"],[\".\",\".\",\".\",\"+\"],[\"+\",\"+\",\"+\",\".\"]], entrance = [1,2]",
                "Output": "** 1",
                "Explanation": "** There are 3 exits in this maze at [1,0], [0,2], and [2,3].\nInitially, you are at the entrance cell [1,2].\n- You can reach [1,0] by moving 2 steps left.\n- You can reach [0,2] by moving 1 step up.\nIt is impossible to reach [2,3] from the entrance.\nThus, the nearest exit is [0,2], which is 1 step away."
            },
            {
                "Input": "** maze = [[\"+\",\"+\",\"+\"],[\".\",\".\",\".\"],[\"+\",\"+\",\"+\"]], entrance = [1,0]",
                "Output": "** 2",
                "Explanation": "** There is 1 exit in this maze at [1,2].\n[1,0] does not count as an exit since it is the entrance cell.\nInitially, you are at the entrance cell [1,0].\n- You can reach [1,2] by moving 2 steps right.\nThus, the nearest exit is [1,2], which is 2 steps away."
            },
            {
                "Input": "** maze = [[\".\",\"+\"]], entrance = [0,0]",
                "Output": "** -1",
                "Explanation": "** There are no exits in this maze."
            }
        ]
    },
    {
        "Title": "Sum Game",
        "slug": "sum-game",
        "description": "Alice and Bob take turns playing a game, with **Alice****starting first**.\n\n\nYou are given a string `num` of **even length** consisting of digits and `'?'` characters. On each turn, a player will do the following if there is still at least one `'?'` in `num`:\n\n\n1. Choose an index `i` where `num[i] == '?'`.\n2. Replace `num[i]` with any digit between `'0'` and `'9'`.\n\n\nThe game ends when there are no more `'?'` characters in `num`.\n\n\nFor Bob\u00a0to win, the sum of the digits in the first half of `num` must be **equal** to the sum of the digits in the second half. For Alice\u00a0to win, the sums must **not be equal**.\n\n\n For example, if the game ended with `num = \"243801\"`, then Bob\u00a0wins because `2+4+3 = 8+0+1`. If the game ended with `num = \"243803\"`, then Alice\u00a0wins because `2+4+3 != 8+0+3`.\n\n\nAssuming Alice and Bob play **optimally**, return `true` *if Alice will win and* `false` *if Bob will win*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "String",
            "Greedy",
            "Game Theory"
        ],
        "examples": [
            {
                "Input": "** num = \"5023\"",
                "Output": "** false",
                "Explanation": "** There are no moves to be made.\nThe sum of the first half is equal to the sum of the second half: 5 + 0 = 2 + 3."
            },
            {
                "Input": "** num = \"25??\"",
                "Output": "** true",
                "Explanation": "** Alice can replace one of the '?'s with '9' and it will be impossible for Bob to make the sums equal."
            },
            {
                "Input": "** num = \"?3295???\"",
                "Output": "** false",
                "Explanation": "** It can be proven that Bob will always win. One possible outcome is:\n- Alice replaces the first '?' with '9'. num = \"93295???\".\n- Bob replaces one of the '?' in the right half with '9'. num = \"932959??\".\n- Alice replaces one of the '?' in the right half with '2'. num = \"9329592?\".\n- Bob replaces the last '?' in the right half with '7'. num = \"93295927\".\nBob wins because 9 + 3 + 2 + 9 = 5 + 9 + 2 + 7."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Reach Destination in Time",
        "slug": "minimum-cost-to-reach-destination-in-time",
        "description": "There is a country of `n` cities numbered from `0` to `n - 1` where **all the cities are connected** by bi-directional roads. The roads are represented as a 2D integer array `edges` where `edges[i] = [xi, yi, timei]` denotes a road between cities `xi` and `yi` that takes `timei` minutes to travel. There may be multiple roads of differing travel times connecting the same two cities, but no road connects a city to itself.\n\n\nEach time you pass through a city, you must pay a passing fee. This is represented as a **0-indexed** integer array `passingFees` of length `n` where `passingFees[j]` is the amount of dollars you must pay when you pass through city `j`.\n\n\nIn the beginning, you are at city `0` and want to reach city `n - 1` in `maxTime` **minutes or less**. The **cost** of your journey is the **summation of passing fees** for each city that you passed through at some moment of your journey (**including** the source and destination cities).\n\n\nGiven `maxTime`, `edges`, and `passingFees`, return *the **minimum cost** to complete your journey, or* `-1` *if you cannot complete it within* `maxTime` *minutes*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** maxTime = 30, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]",
                "Output": "** 11",
                "Explanation": "** The path to take is 0 -> 1 -> 2 -> 5, which takes 30 minutes and has $11 worth of passing fees."
            }
        ]
    },
    {
        "Title": "Concatenation of Array",
        "slug": "concatenation-of-array",
        "description": "Given an integer array `nums` of length `n`, you want to create an array `ans` of length `2n` where `ans[i] == nums[i]` and `ans[i + n] == nums[i]` for `0 <= i < n` (**0-indexed**).\n\n\nSpecifically, `ans` is the **concatenation** of two `nums` arrays.\n\n\nReturn *the array* `ans`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,1]",
                "Output": "** [1,2,1,1,2,1]",
                "Explanation": "** The array ans is formed as follows:\n- ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]\n- ans = [1,2,1,1,2,1]"
            },
            {
                "Input": "** nums = [1,3,2,1]",
                "Output": "** [1,3,2,1,1,3,2,1]",
                "Explanation": "** The array ans is formed as follows:\n- ans = [nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]]\n- ans = [1,3,2,1,1,3,2,1]"
            }
        ]
    },
    {
        "Title": "Unique Length-3 Palindromic Subsequences",
        "slug": "unique-length-3-palindromic-subsequences",
        "description": "Given a string `s`, return *the number of **unique palindromes of length three** that are a **subsequence** of* `s`.\n\n\nNote that even if there are multiple ways to obtain the same subsequence, it is still only counted **once**.\n\n\nA **palindrome** is a string that reads the same forwards and backwards.\n\n\nA **subsequence** of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\n\n For example, `\"ace\"` is a subsequence of `\"abcde\"`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Bit Manipulation",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** s = \"aabca\"",
                "Output": "** 3",
                "Explanation": "** The 3 palindromic subsequences of length 3 are:\n- \"aba\" (subsequence of \"aabca\")\n- \"aaa\" (subsequence of \"aabca\")\n- \"aca\" (subsequence of \"aabca\")"
            },
            {
                "Input": "** s = \"adc\"",
                "Output": "** 0",
                "Explanation": "** There are no palindromic subsequences of length 3 in \"adc\"."
            },
            {
                "Input": "** s = \"bbcbaba\"",
                "Output": "** 4",
                "Explanation": "** The 4 palindromic subsequences of length 3 are:\n- \"bbb\" (subsequence of \"bbcbaba\")\n- \"bcb\" (subsequence of \"bbcbaba\")\n- \"bab\" (subsequence of \"bbcbaba\")\n- \"aba\" (subsequence of \"bbcbaba\")"
            }
        ]
    },
    {
        "Title": "Painting a Grid With Three Different Colors",
        "slug": "painting-a-grid-with-three-different-colors",
        "description": "You are given two integers `m` and `n`. Consider an `m x n` grid where each cell is initially white. You can paint each cell **red**, **green**, or **blue**. All cells **must** be painted.\n\n\nReturn *the number of ways to color the grid with **no two adjacent cells having the same color***. Since the answer can be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** m = 1, n = 1",
                "Output": "** 3",
                "Explanation": "** The three possible colorings are shown in the image above."
            },
            {
                "Input": "** m = 1, n = 2",
                "Output": "** 6",
                "Explanation": "** The six possible colorings are shown in the image above."
            }
        ]
    },
    {
        "Title": "Merge BSTs to Create Single BST",
        "slug": "merge-bsts-to-create-single-bst",
        "description": "You are given `n` **BST (binary search tree) root nodes** for `n` separate BSTs stored in an array `trees` (**0-indexed**). Each BST in `trees` has **at most 3 nodes**, and no two roots have the same value. In one operation, you can:\n\n\n Select two **distinct** indices `i` and `j` such that the value stored at one of the **leaves** of `trees[i]` is equal to the **root value** of `trees[j]`.\n Replace the leaf node in `trees[i]` with `trees[j]`.\n Remove `trees[j]` from `trees`.\n\n\nReturn *the **root** of the resulting BST if it is possible to form a valid BST after performing* `n - 1` *operations, or*`null` *if it is impossible to create a valid BST*.\n\n\nA BST (binary search tree) is a binary tree where each node satisfies the following property:\n\n\n Every node in the node's left subtree has a value\u00a0**strictly less**\u00a0than the node's value.\n Every node in the node's right subtree has a value\u00a0**strictly greater**\u00a0than the node's value.\n\n\nA leaf is a node that has no children.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "Binary Search",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** trees = [[2,1],[3,2,5],[5,4]]",
                "Output": "** [3,2,5,1,null,4]",
                "Explanation": "**\nIn the first operation, pick i=1 and j=0, and merge trees[0] into trees[1].\nDelete trees[0], so trees = [[3,2,5,1],[5,4]].\n![](https://assets.leetcode.com/uploads/2021/06/24/diagram.png)\nIn the second operation, pick i=0 and j=1, and merge trees[1] into trees[0].\nDelete trees[1], so trees = [[3,2,5,1,null,4]].\n![](https://assets.leetcode.com/uploads/2021/06/24/diagram-2.png)\nThe resulting tree, shown above, is a valid BST, so return its root."
            },
            {
                "Input": "** trees = [[5,3,8],[3,2,6]]",
                "Output": "** []",
                "Explanation": "**\nPick i=0 and j=1 and merge trees[1] into trees[0].\nDelete trees[1], so trees = [[5,3,8,2,6]].\n![](https://assets.leetcode.com/uploads/2021/06/24/diagram-3.png)\nThe resulting tree is shown above. This is the only valid operation that can be performed, but the resulting tree is not a valid BST, so return null."
            },
            {
                "Input": "** trees = [[5,4],[3]]",
                "Output": "** []",
                "Explanation": "** It is impossible to perform any operations."
            }
        ]
    },
    {
        "Title": "Confirmation Rate",
        "slug": "confirmation-rate",
        "description": "Table: `Signups`\n\n\n\n```\n\n+----------------+----------+\n| Column Name    | Type     |\n+----------------+----------+\n| user_id        | int      |\n| time_stamp     | datetime |\n+----------------+----------+\nuser_id is the column of unique values for this table.\nEach row contains information about the signup time for the user with ID user_id.\n\n```\n\n\u00a0\n\n\nTable: `Confirmations`\n\n\n\n```\n\n+----------------+----------+\n| Column Name    | Type     |\n+----------------+----------+\n| user_id        | int      |\n| time_stamp     | datetime |\n| action         | ENUM     |\n+----------------+----------+\n(user_id, time_stamp) is the primary key (combination of columns with unique values) for this table.\nuser_id is a foreign key (reference column) to the Signups table.\naction is an ENUM (category) of the type ('confirmed', 'timeout')\nEach row of this table indicates that the user with ID user_id requested a confirmation message at time_stamp and that confirmation message was either confirmed ('confirmed') or expired without confirming ('timeout').\n\n```\n\n\u00a0\n\n\nThe **confirmation rate** of a user is the number of `'confirmed'` messages divided by the total number of requested confirmation messages. The confirmation rate of a user that did not request any confirmation messages is `0`. Round the confirmation rate to **two decimal** places.\n\n\nWrite a solution to find the **confirmation rate** of each user.\n\n\nReturn the result table in **any order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nSignups table:\n+---------+---------------------+\n| user_id | time_stamp          |\n+---------+---------------------+\n| 3       | 2020-03-21 10:16:13 |\n| 7       | 2020-01-04 13:57:59 |\n| 2       | 2020-07-29 23:09:44 |\n| 6       | 2020-12-09 10:39:37 |\n+---------+---------------------+\nConfirmations table:\n+---------+---------------------+-----------+\n| user_id | time_stamp          | action    |\n+---------+---------------------+-----------+\n| 3       | 2021-01-06 03:30:46 | timeout   |\n| 3       | 2021-07-14 14:00:00 | timeout   |\n| 7       | 2021-06-12 11:57:29 | confirmed |\n| 7       | 2021-06-13 12:58:28 | confirmed |\n| 7       | 2021-06-14 13:59:27 | confirmed |\n| 2       | 2021-01-22 00:00:00 | confirmed |\n| 2       | 2021-02-28 23:59:59 | timeout   |\n+---------+---------------------+-----------+",
                "Output": "** \n+---------+-------------------+\n| user_id | confirmation_rate |\n+---------+-------------------+\n| 6       | 0.00              |\n| 3       | 0.00              |\n| 7       | 1.00              |\n| 2       | 0.50              |\n+---------+-------------------+",
                "Explanation": "** \nUser 6 did not request any confirmation messages. The confirmation rate is 0.\nUser 3 made 2 requests and both timed out. The confirmation rate is 0.\nUser 7 made 3 requests and all were confirmed. The confirmation rate is 1.\nUser 2 made 2 requests where one was confirmed and the other timed out. The confirmation rate is 1 / 2 = 0.5."
            }
        ]
    },
    {
        "Title": "Maximum Number of Words You Can Type",
        "slug": "maximum-number-of-words-you-can-type",
        "description": "There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly.\n\n\nGiven a string `text` of words separated by a single space (no leading or trailing spaces) and a string `brokenLetters` of all **distinct** letter keys that are broken, return *the **number of words** in* `text` *you can fully type using this keyboard*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** text = \"hello world\", brokenLetters = \"ad\"",
                "Output": "** 1",
                "Explanation": "** We cannot type \"world\" because the 'd' key is broken."
            },
            {
                "Input": "** text = \"leet code\", brokenLetters = \"lt\"",
                "Output": "** 1",
                "Explanation": "** We cannot type \"leet\" because the 'l' and 't' keys are broken."
            },
            {
                "Input": "** text = \"leet code\", brokenLetters = \"e\"",
                "Output": "** 0",
                "Explanation": "** We cannot type either word because the 'e' key is broken."
            }
        ]
    },
    {
        "Title": "Add Minimum Number of Rungs",
        "slug": "add-minimum-number-of-rungs",
        "description": "You are given a **strictly increasing** integer array `rungs` that represents the **height** of rungs on a ladder. You are currently on the **floor** at height `0`, and you want to reach the last rung.\n\n\nYou are also given an integer `dist`. You can only climb to the next highest rung if the distance between where you are currently at (the floor or on a rung) and the next rung is **at most** `dist`. You are able to insert rungs at any positive **integer** height if a rung is not already there.\n\n\nReturn *the **minimum** number of rungs that must be added to the ladder in order for you to climb to the last rung.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** rungs = [1,3,5,10], dist = 2",
                "Output": "** 2",
                "Explanation": "**You currently cannot reach the last rung.\nAdd rungs at heights 7 and 8 to climb this ladder. \nThe ladder will now have rungs at [1,3,5,7,8,10]."
            },
            {
                "Input": "** rungs = [3,6,8,10], dist = 3",
                "Output": "** 0",
                "Explanation": "**\nThis ladder can be climbed without adding additional rungs."
            },
            {
                "Input": "** rungs = [3,4,6,7], dist = 2",
                "Output": "** 1",
                "Explanation": "**\nYou currently cannot reach the first rung from the ground.\nAdd a rung at height 1 to climb this ladder.\nThe ladder will now have rungs at [1,3,4,6,7]."
            }
        ]
    },
    {
        "Title": "Maximum Number of Points with Cost",
        "slug": "maximum-number-of-points-with-cost",
        "description": "You are given an `m x n` integer matrix `points` (**0-indexed**). Starting with `0` points, you want to **maximize** the number of points you can get from the matrix.\n\n\nTo gain points, you must pick one cell in **each row**. Picking the cell at coordinates `(r, c)` will **add** `points[r][c]` to your score.\n\n\nHowever, you will lose points if you pick a cell too far from the cell that you picked in the previous row. For every two adjacent rows `r` and `r + 1` (where `0 <= r < m - 1`), picking cells at coordinates `(r, c1)` and `(r + 1, c2)` will **subtract** `abs(c1 - c2)` from your score.\n\n\nReturn *the **maximum** number of points you can achieve*.\n\n\n`abs(x)` is defined as:\n\n\n `x` for `x >= 0`.\n `-x` for `x < 0`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** points = [[1,2,3],[1,5,1],[3,1,1]]",
                "Output": "** 9",
                "Explanation": "**\nThe blue cells denote the optimal cells to pick, which have coordinates (0, 2), (1, 1), and (2, 0).\nYou add 3 + 5 + 3 = 11 to your score.\nHowever, you must subtract abs(2 - 1) + abs(1 - 0) = 2 from your score.\nYour final score is 11 - 2 = 9."
            },
            {
                "Input": "** points = [[1,5],[2,3],[4,2]]",
                "Output": "** 11",
                "Explanation": "**\nThe blue cells denote the optimal cells to pick, which have coordinates (0, 1), (1, 1), and (2, 0).\nYou add 5 + 3 + 4 = 12 to your score.\nHowever, you must subtract abs(1 - 1) + abs(1 - 0) = 1 from your score.\nYour final score is 12 - 1 = 11."
            }
        ]
    },
    {
        "Title": "Maximum Genetic Difference Query",
        "slug": "maximum-genetic-difference-query",
        "description": "There is a rooted tree consisting of `n` nodes numbered `0` to `n - 1`. Each node's number denotes its **unique genetic value** (i.e. the genetic value of node `x` is `x`). The **genetic difference** between two genetic values is defined as the **bitwise-****XOR** of their values. You are given the integer array `parents`, where `parents[i]` is the parent for node `i`. If node `x` is the **root** of the tree, then `parents[x] == -1`.\n\n\nYou are also given the array `queries` where `queries[i] = [nodei, vali]`. For each query `i`, find the **maximum genetic difference** between `vali` and `pi`, where `pi` is the genetic value of any node that is on the path between `nodei` and the root (including `nodei` and the root). More formally, you want to maximize `vali XOR pi`.\n\n\nReturn *an array* `ans` *where* `ans[i]` *is the answer to the* `ith` *query*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Bit Manipulation",
            "Trie"
        ],
        "examples": [
            {
                "Input": "** parents = [-1,0,1,1], queries = [[0,2],[3,2],[2,5]]",
                "Output": "** [2,3,7]",
                "Explanation": "** The queries are processed as follows:\n- [0,2]: The node with the maximum genetic difference is 0, with a difference of 2 XOR 0 = 2.\n- [3,2]: The node with the maximum genetic difference is 1, with a difference of 2 XOR 1 = 3.\n- [2,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7."
            },
            {
                "Input": "** parents = [3,7,-1,2,0,7,0,2], queries = [[4,6],[1,15],[0,5]]",
                "Output": "** [6,14,7]",
                "Explanation": "** The queries are processed as follows:\n- [4,6]: The node with the maximum genetic difference is 0, with a difference of 6 XOR 0 = 6.\n- [1,15]: The node with the maximum genetic difference is 1, with a difference of 15 XOR 1 = 14.\n- [0,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7."
            }
        ]
    },
    {
        "Title": "Check if All Characters Have Equal Number of Occurrences",
        "slug": "check-if-all-characters-have-equal-number-of-occurrences",
        "description": "Given a string `s`, return `true` *if* `s` *is a **good** string, or* `false` *otherwise*.\n\n\nA string `s` is **good** if **all** the characters that appear in `s` have the **same** number of occurrences (i.e., the same frequency).\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** s = \"abacbc\"",
                "Output": "** true",
                "Explanation": "** The characters that appear in s are 'a', 'b', and 'c'. All characters occur 2 times in s."
            },
            {
                "Input": "** s = \"aaabb\"",
                "Output": "** false",
                "Explanation": "** The characters that appear in s are 'a' and 'b'.\n'a' occurs 3 times while 'b' occurs 2 times, which is not the same number of times."
            }
        ]
    },
    {
        "Title": "The Number of the Smallest Unoccupied Chair",
        "slug": "the-number-of-the-smallest-unoccupied-chair",
        "description": "There is a party where `n` friends numbered from `0` to `n - 1` are attending. There is an **infinite** number of chairs in this party that are numbered from `0` to `infinity`. When a friend arrives at the party, they sit on the unoccupied chair with the **smallest number**.\n\n\n For example, if chairs `0`, `1`, and `5` are occupied when a friend comes, they will sit on chair number `2`.\n\n\nWhen a friend leaves the party, their chair becomes unoccupied at the moment they leave. If another friend arrives at that same moment, they can sit in that chair.\n\n\nYou are given a **0-indexed** 2D integer array `times` where `times[i] = [arrivali, leavingi]`, indicating the arrival and leaving times of the `ith` friend respectively, and an integer `targetFriend`. All arrival times are **distinct**.\n\n\nReturn *the **chair number** that the friend numbered* `targetFriend` *will sit on*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** times = [[1,4],[2,3],[4,6]], targetFriend = 1",
                "Output": "** 1",
                "Explanation": "** \n- Friend 0 arrives at time 1 and sits on chair 0.\n- Friend 1 arrives at time 2 and sits on chair 1.\n- Friend 1 leaves at time 3 and chair 1 becomes empty.\n- Friend 0 leaves at time 4 and chair 0 becomes empty.\n- Friend 2 arrives at time 4 and sits on chair 0.\nSince friend 1 sat on chair 1, we return 1."
            },
            {
                "Input": "** times = [[3,10],[1,5],[2,6]], targetFriend = 0",
                "Output": "** 2",
                "Explanation": "** \n- Friend 1 arrives at time 1 and sits on chair 0.\n- Friend 2 arrives at time 2 and sits on chair 1.\n- Friend 0 arrives at time 3 and sits on chair 2.\n- Friend 1 leaves at time 5 and chair 0 becomes empty.\n- Friend 2 leaves at time 6 and chair 1 becomes empty.\n- Friend 0 leaves at time 10 and chair 2 becomes empty.\nSince friend 0 sat on chair 2, we return 2."
            }
        ]
    },
    {
        "Title": "Describe the Painting",
        "slug": "describe-the-painting",
        "description": "There is a long and thin painting that can be represented by a number line. The painting was painted with multiple overlapping segments where each segment was painted with a **unique** color. You are given a 2D integer array `segments`, where `segments[i] = [starti, endi, colori]` represents the **half-closed segment** `[starti, endi)` with `colori` as the color.\n\n\nThe colors in the overlapping segments of the painting were **mixed** when it was painted. When two or more colors mix, they form a new color that can be represented as a **set** of mixed colors.\n\n\n For example, if colors `2`, `4`, and `6` are mixed, then the resulting mixed color is `{2,4,6}`.\n\n\nFor the sake of simplicity, you should only output the **sum** of the elements in the set rather than the full set.\n\n\nYou want to **describe** the painting with the **minimum** number of non-overlapping **half-closed segments** of these mixed colors. These segments can be represented by the 2D array `painting` where `painting[j] = [leftj, rightj, mixj]` describes a **half-closed segment** `[leftj, rightj)` with the mixed color **sum** of `mixj`.\n\n\n For example, the painting created with `segments = [[1,4,5],[1,7,7]]` can be described by `painting = [[1,4,12],[4,7,7]]` because:\n\t+ `[1,4)` is colored `{5,7}` (with a sum of `12`) from both the first and second segments.\n\t+ `[4,7)` is colored `{7}` from only the second segment.\n\n\nReturn *the 2D array* `painting` *describing the finished painting (excluding any parts that are **not** painted). You may return the segments in **any order***.\n\n\nA **half-closed segment** `[a, b)` is the section of the number line between points `a` and `b` **including** point `a` and **not including** point `b`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** segments = [[1,4,5],[4,7,7],[1,7,9]]",
                "Output": "** [[1,4,14],[4,7,16]]",
                "Explanation": "** The painting can be described as follows:\n- [1,4) is colored {5,9} (with a sum of 14) from the first and third segments.\n- [4,7) is colored {7,9} (with a sum of 16) from the second and third segments."
            },
            {
                "Input": "** segments = [[1,7,9],[6,8,15],[8,10,7]]",
                "Output": "** [[1,6,9],[6,7,24],[7,8,15],[8,10,7]]",
                "Explanation": "** The painting can be described as follows:\n- [1,6) is colored 9 from the first segment.\n- [6,7) is colored {9,15} (with a sum of 24) from the first and second segments.\n- [7,8) is colored 15 from the second segment.\n- [8,10) is colored 7 from the third segment."
            },
            {
                "Input": "** segments = [[1,4,5],[1,4,7],[4,7,1],[4,7,11]]",
                "Output": "** [[1,4,12],[4,7,12]]",
                "Explanation": "** The painting can be described as follows:\n- [1,4) is colored {5,7} (with a sum of 12) from the first and second segments.\n- [4,7) is colored {1,11} (with a sum of 12) from the third and fourth segments.\nNote that returning a single segment [1,7) is incorrect because the mixed color sets are different."
            }
        ]
    },
    {
        "Title": "Number of Visible People in a Queue",
        "slug": "number-of-visible-people-in-a-queue",
        "description": "There are `n` people standing in a queue, and they numbered from `0` to `n - 1` in **left to right** order. You are given an array `heights` of **distinct** integers where `heights[i]` represents the height of the `ith` person.\n\n\nA person can **see** another person to their right in the queue if everybody in between is **shorter** than both of them. More formally, the `ith` person can see the `jth` person if `i < j` and `min(heights[i], heights[j]) > max(heights[i+1], heights[i+2], ..., heights[j-1])`.\n\n\nReturn *an array* `answer` *of length* `n` *where* `answer[i]` *is the **number of people** the* `ith` *person can **see** to their right in the queue*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Stack",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** heights = [10,6,8,5,11,9]",
                "Output": "** [3,1,2,1,1,0]",
                "Explanation": "**\nPerson 0 can see person 1, 2, and 4.\nPerson 1 can see person 2.\nPerson 2 can see person 3 and 4.\nPerson 3 can see person 4.\nPerson 4 can see person 5.\nPerson 5 can see no one since nobody is to the right of them."
            }
        ]
    },
    {
        "Title": "Sum of Digits of String After Convert",
        "slug": "sum-of-digits-of-string-after-convert",
        "description": "You are given a string `s` consisting of lowercase English letters, and an integer `k`.\n\n\nFirst, **convert** `s` into an integer by replacing each letter with its position in the alphabet (i.e., replace `'a'` with `1`, `'b'` with `2`, ..., `'z'` with `26`). Then, **transform** the integer by replacing it with the **sum of its digits**. Repeat the **transform** operation `k` **times** in total.\n\n\nFor example, if `s = \"zbax\"` and `k = 2`, then the resulting integer would be `8` by the following operations:\n\n\n **Convert**: `\"zbax\" \u279d \"(26)(2)(1)(24)\" \u279d \"262124\" \u279d 262124`\n **Transform #1**: `262124 \u279d 2 + 6 + 2 + 1 + 2 + 4\u00a0\u279d 17`\n **Transform #2**: `17 \u279d 1 + 7 \u279d 8`\n\n\nReturn *the resulting integer after performing the operations described above*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** s = \"iiii\", k = 1",
                "Output": "** 36",
                "Explanation": "** The operations are as follows:\n- Convert: \"iiii\" \u279d \"(9)(9)(9)(9)\" \u279d \"9999\" \u279d 9999\n- Transform #1: 9999 \u279d 9 + 9 + 9 + 9 \u279d 36\nThus the resulting integer is 36."
            },
            {
                "Input": "** s = \"leetcode\", k = 2",
                "Output": "** 6",
                "Explanation": "** The operations are as follows:\n- Convert: \"leetcode\" \u279d \"(12)(5)(5)(20)(3)(15)(4)(5)\" \u279d \"12552031545\" \u279d 12552031545\n- Transform #1: 12552031545 \u279d 1 + 2 + 5 + 5 + 2 + 0 + 3 + 1 + 5 + 4 + 5 \u279d 33\n- Transform #2: 33 \u279d 3 + 3 \u279d 6\nThus the resulting integer is 6."
            },
            {
                "Input": "** s = \"zbax\", k = 2",
                "Output": "** 8",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Largest Number After Mutating Substring",
        "slug": "largest-number-after-mutating-substring",
        "description": "You are given a string `num`, which represents a large integer. You are also given a **0-indexed** integer array `change` of length `10` that maps each digit `0-9` to another digit. More formally, digit `d` maps to digit `change[d]`.\n\n\nYou may **choose** to **mutate a single substring** of `num`. To mutate a substring, replace each digit `num[i]` with the digit it maps to in `change` (i.e. replace `num[i]` with `change[num[i]]`).\n\n\nReturn *a string representing the **largest** possible integer after **mutating** (or choosing not to) a **single substring** of* `num`.\n\n\nA **substring** is a contiguous sequence of characters within the string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** num = \"132\", change = [9,8,5,0,3,6,4,2,6,8]",
                "Output": "** \"832\"",
                "Explanation": "** Replace the substring \"1\":\n- 1 maps to change[1] = 8.\nThus, \"132\" becomes \"832\".\n\"832\" is the largest number that can be created, so return it."
            },
            {
                "Input": "** num = \"021\", change = [9,4,3,5,7,2,1,9,0,6]",
                "Output": "** \"934\"",
                "Explanation": "** Replace the substring \"021\":\n- 0 maps to change[0] = 9.\n- 2 maps to change[2] = 3.\n- 1 maps to change[1] = 4.\nThus, \"021\" becomes \"934\".\n\"934\" is the largest number that can be created, so return it."
            },
            {
                "Input": "** num = \"5\", change = [1,4,7,5,3,2,5,6,9,4]",
                "Output": "** \"5\"",
                "Explanation": "** \"5\" is already the largest number that can be created, so return it."
            }
        ]
    },
    {
        "Title": "Maximum Compatibility Score Sum",
        "slug": "maximum-compatibility-score-sum",
        "description": "There is a survey that consists of `n` questions where each question's answer is either `0` (no) or `1` (yes).\n\n\nThe survey was given to `m` students numbered from `0` to `m - 1` and `m` mentors numbered from `0` to `m - 1`. The answers of the students are represented by a 2D integer array `students` where `students[i]` is an integer array that contains the answers of the `ith` student (**0-indexed**). The answers of the mentors are represented by a 2D integer array `mentors` where `mentors[j]` is an integer array that contains the answers of the `jth` mentor (**0-indexed**).\n\n\nEach student will be assigned to **one** mentor, and each mentor will have **one** student assigned to them. The **compatibility score** of a student-mentor pair is the number of answers that are the same for both the student and the mentor.\n\n\n For example, if the student's answers were `[1, 0, 1]` and the mentor's answers were `[0, 0, 1]`, then their compatibility score is 2 because only the second and the third answers are the same.\n\n\nYou are tasked with finding the optimal student-mentor pairings to **maximize** the **sum of the compatibility scores**.\n\n\nGiven `students` and `mentors`, return *the **maximum compatibility score sum** that can be achieved.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Backtracking",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** students = [[1,1,0],[1,0,1],[0,0,1]], mentors = [[1,0,0],[0,0,1],[1,1,0]]",
                "Output": "** 8",
                "Explanation": "**\u00a0We assign students to mentors in the following way:\n- student 0 to mentor 2 with a compatibility score of 3.\n- student 1 to mentor 0 with a compatibility score of 2.\n- student 2 to mentor 1 with a compatibility score of 3.\nThe compatibility score sum is 3 + 2 + 3 = 8."
            },
            {
                "Input": "** students = [[0,0],[0,0],[0,0]], mentors = [[1,1],[1,1],[1,1]]",
                "Output": "** 0",
                "Explanation": "** The compatibility score of any student-mentor pair is 0."
            }
        ]
    },
    {
        "Title": "Delete Duplicate Folders in System",
        "slug": "delete-duplicate-folders-in-system",
        "description": "Due to a bug, there are many duplicate folders in a file system. You are given a 2D array `paths`, where `paths[i]` is an array representing an absolute path to the `ith` folder in the file system.\n\n\n For example, `[\"one\", \"two\", \"three\"]` represents the path `\"/one/two/three\"`.\n\n\nTwo folders (not necessarily on the same level) are **identical** if they contain the **same non-empty** set of identical subfolders and underlying subfolder structure. The folders **do not** need to be at the root level to be identical. If two or more folders are **identical**, then **mark** the folders as well as all their subfolders.\n\n\n For example, folders `\"/a\"` and `\"/b\"` in the file structure below are identical. They (as well as their subfolders) should **all** be marked:\n\t+ `/a`\n\t+ `/a/x`\n\t+ `/a/x/y`\n\t+ `/a/z`\n\t+ `/b`\n\t+ `/b/x`\n\t+ `/b/x/y`\n\t+ `/b/z`\n However, if the file structure also included the path `\"/b/w\"`, then the folders `\"/a\"` and `\"/b\"` would not be identical. Note that `\"/a/x\"` and `\"/b/x\"` would still be considered identical even with the added folder.\n\n\nOnce all the identical folders and their subfolders have been marked, the file system will **delete** all of them. The file system only runs the deletion once, so any folders that become identical after the initial deletion are not deleted.\n\n\nReturn *the 2D array* `ans` *containing the paths of the **remaining** folders after deleting all the marked folders. The paths may be returned in **any** order*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Trie",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "** paths = [[\"a\"],[\"c\"],[\"d\"],[\"a\",\"b\"],[\"c\",\"b\"],[\"d\",\"a\"]]",
                "Output": "** [[\"d\"],[\"d\",\"a\"]]",
                "Explanation": "** The file structure is as shown.\nFolders \"/a\" and \"/c\" (and their subfolders) are marked for deletion because they both contain an empty\nfolder named \"b\"."
            },
            {
                "Input": "** paths = [[\"a\"],[\"c\"],[\"a\",\"b\"],[\"c\",\"b\"],[\"a\",\"b\",\"x\"],[\"a\",\"b\",\"x\",\"y\"],[\"w\"],[\"w\",\"y\"]]",
                "Output": "** [[\"c\"],[\"c\",\"b\"],[\"a\"],[\"a\",\"b\"]]",
                "Explanation": "** The file structure is as shown. \nFolders \"/a/b/x\" and \"/w\" (and their subfolders) are marked for deletion because they both contain an empty folder named \"y\".\nNote that folders \"/a\" and \"/c\" are identical after the deletion, but they are not deleted because they were not marked beforehand."
            },
            {
                "Input": "** paths = [[\"a\",\"b\"],[\"c\",\"d\"],[\"c\"],[\"a\"]]",
                "Output": "** [[\"c\"],[\"c\",\"d\"],[\"a\"],[\"a\",\"b\"]]",
                "Explanation": "** All folders are unique in the file system.\nNote that the returned array can be in a different order as the order does not matter."
            }
        ]
    },
    {
        "Title": "Three Divisors",
        "slug": "three-divisors",
        "description": "Given an integer `n`, return `true` *if* `n` *has **exactly three positive divisors**. Otherwise, return* `false`.\n\n\nAn integer `m` is a **divisor** of `n` if there exists an integer `k` such that `n = k * m`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Enumeration",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** false\n**Explantion:** 2 has only two divisors: 1 and 2.",
                "Explanation": null
            },
            {
                "Input": "** n = 4",
                "Output": "** true\n**Explantion:** 4 has three divisors: 1, 2, and 4.",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Number of Weeks for Which You Can Work",
        "slug": "maximum-number-of-weeks-for-which-you-can-work",
        "description": "There are `n` projects numbered from `0` to `n - 1`. You are given an integer array `milestones` where each `milestones[i]` denotes the number of milestones the `ith` project has.\n\n\nYou can work on the projects following these two rules:\n\n\n Every week, you will finish **exactly one** milestone of **one** project. You\u00a0**must**\u00a0work every week.\n You **cannot** work on two milestones from the same project for two **consecutive** weeks.\n\n\nOnce all the milestones of all the projects are finished, or if the only milestones that you can work on will cause you to violate the above rules, you will **stop working**. Note that you may not be able to finish every project's milestones due to these constraints.\n\n\nReturn *the **maximum** number of weeks you would be able to work on the projects without violating the rules mentioned above*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** milestones = [1,2,3]",
                "Output": "** 6",
                "Explanation": "** One possible scenario is:\n\u200b\u200b\u200b\u200b- During the 1st week, you will work on a milestone of project 0.\n- During the 2nd week, you will work on a milestone of project 2.\n- During the 3rd week, you will work on a milestone of project 1.\n- During the 4th week, you will work on a milestone of project 2.\n- During the 5th week, you will work on a milestone of project 1.\n- During the 6th week, you will work on a milestone of project 2.\nThe total number of weeks is 6."
            },
            {
                "Input": "** milestones = [5,2,1]",
                "Output": "** 7",
                "Explanation": "** One possible scenario is:\n- During the 1st week, you will work on a milestone of project 0.\n- During the 2nd week, you will work on a milestone of project 1.\n- During the 3rd week, you will work on a milestone of project 0.\n- During the 4th week, you will work on a milestone of project 1.\n- During the 5th week, you will work on a milestone of project 0.\n- During the 6th week, you will work on a milestone of project 2.\n- During the 7th week, you will work on a milestone of project 0.\nThe total number of weeks is 7.\nNote that you cannot work on the last milestone of project 0 on 8th week because it would violate the rules.\nThus, one milestone in project 0 will remain unfinished."
            }
        ]
    },
    {
        "Title": "Minimum Garden Perimeter to Collect Enough Apples",
        "slug": "minimum-garden-perimeter-to-collect-enough-apples",
        "description": "In a garden represented as an infinite 2D grid, there is an apple tree planted at **every** integer coordinate. The apple tree planted at an integer coordinate `(i, j)` has `|i| + |j|` apples growing on it.\n\n\nYou will buy an axis-aligned **square plot** of land that is centered at `(0, 0)`.\n\n\nGiven an integer `neededApples`, return *the **minimum perimeter** of a plot such that **at least***`neededApples` *apples are **inside or on** the perimeter of that plot*.\n\n\nThe value of `|x|` is defined as:\n\n\n `x` if `x >= 0`\n `-x` if `x < 0`\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** neededApples = 1",
                "Output": "** 8",
                "Explanation": "** A square plot of side length 1 does not contain any apples.\nHowever, a square plot of side length 2 has 12 apples inside (as depicted in the image above).\nThe perimeter is 2 * 4 = 8."
            }
        ]
    },
    {
        "Title": "Count Number of Special Subsequences",
        "slug": "count-number-of-special-subsequences",
        "description": "A sequence is **special** if it consists of a **positive** number of `0`s, followed by a **positive** number of `1`s, then a **positive** number of `2`s.\n\n\n For example, `[0,1,2]` and `[0,0,1,1,1,2]` are special.\n In contrast, `[2,1,0]`, `[1]`, and `[0,1,2,0]` are not special.\n\n\nGiven an array `nums` (consisting of **only** integers `0`, `1`, and `2`), return *the **number of different subsequences** that are special*. Since the answer may be very large, **return it modulo** `109 + 7`.\n\n\nA **subsequence** of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. Two subsequences are **different** if the **set of indices** chosen are different.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [0,1,2,2]",
                "Output": "** 3",
                "Explanation": "** The special subsequences are bolded [**0**,**1**,**2**,2], [**0**,**1**,2,**2**], and [**0**,**1**,**2**,**2**]."
            },
            {
                "Input": "** nums = [2,2,0,0]",
                "Output": "** 0",
                "Explanation": "** There are no special subsequences in [2,2,0,0]."
            },
            {
                "Input": "** nums = [0,1,2,0,1,2]",
                "Output": "** 7",
                "Explanation": "** The special subsequences are bolded:\n- [**0**,**1**,**2**,0,1,2]\n- [**0**,**1**,2,0,1,**2**]\n- [**0**,**1**,**2**,0,1,**2**]\n- [**0**,**1**,2,0,**1**,**2**]\n- [**0**,1,2,**0**,**1**,**2**]\n- [**0**,1,2,0,**1**,**2**]\n- [0,1,2,**0**,**1**,**2**]"
            }
        ]
    },
    {
        "Title": "Delete Characters to Make Fancy String",
        "slug": "delete-characters-to-make-fancy-string",
        "description": "A **fancy string** is a string where no **three** **consecutive** characters are equal.\n\n\nGiven a string `s`, delete the **minimum** possible number of characters from `s` to make it **fancy**.\n\n\nReturn *the final string after the deletion*. It can be shown that the answer will always be **unique**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"leeetcode\"",
                "Output": "** \"leetcode\"",
                "Explanation": "**\nRemove an 'e' from the first group of 'e's to create \"leetcode\".\nNo three consecutive characters are equal, so return \"leetcode\"."
            },
            {
                "Input": "** s = \"aaabaaaa\"",
                "Output": "** \"aabaa\"",
                "Explanation": "**\nRemove an 'a' from the first group of 'a's to create \"aabaaaa\".\nRemove two 'a's from the second group of 'a's to create \"aabaa\".\nNo three consecutive characters are equal, so return \"aabaa\"."
            },
            {
                "Input": "** s = \"aab\"",
                "Output": "** \"aab\"",
                "Explanation": "** No three consecutive characters are equal, so return \"aab\"."
            }
        ]
    },
    {
        "Title": "Check if Move is Legal",
        "slug": "check-if-move-is-legal",
        "description": "You are given a **0-indexed** `8 x 8` grid `board`, where `board[r][c]` represents the cell `(r, c)` on a game board. On the board, free cells are represented by `'.'`, white cells are represented by `'W'`, and black cells are represented by `'B'`.\n\n\nEach move in this game consists of choosing a free cell and changing it to the color you are playing as (either white or black). However, a move is only **legal** if, after changing it, the cell becomes the **endpoint of a good line** (horizontal, vertical, or diagonal).\n\n\nA **good line** is a line of **three or more cells (including the endpoints)** where the endpoints of the line are **one color**, and the remaining cells in the middle are the **opposite color** (no cells in the line are free). You can find examples for good lines in the figure below:\n\n\n![](https://assets.leetcode.com/uploads/2021/07/22/goodlines5.png)\nGiven two integers `rMove` and `cMove` and a character `color` representing the color you are playing as (white or black), return `true` *if changing cell* `(rMove, cMove)` *to color* `color` *is a **legal** move, or* `false` *if it is not legal*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** board = [[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\"W\",\"B\",\"B\",\".\",\"W\",\"W\",\"W\",\"B\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"]], rMove = 4, cMove = 3, color = \"B\"",
                "Output": "** true",
                "Explanation": "** '.', 'W', and 'B' are represented by the colors blue, white, and black respectively, and cell (rMove, cMove) is marked with an 'X'.\nThe two good lines with the chosen cell as an endpoint are annotated above with the red rectangles."
            },
            {
                "Input": "** board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"B\",\".\",\".\",\"W\",\".\",\".\",\".\"],[\".\",\".\",\"W\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\"B\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\"B\",\"W\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\"W\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"B\"]], rMove = 4, cMove = 4, color = \"W\"",
                "Output": "** false",
                "Explanation": "** While there are good lines with the chosen cell as a middle cell, there are no good lines with the chosen cell as an endpoint."
            }
        ]
    },
    {
        "Title": "Minimum Total Space Wasted With K Resizing Operations",
        "slug": "minimum-total-space-wasted-with-k-resizing-operations",
        "description": "You are currently designing a dynamic array. You are given a **0-indexed** integer array `nums`, where `nums[i]` is the number of elements that will be in the array at time `i`. In addition, you are given an integer `k`, the **maximum** number of times you can **resize** the array (to **any** size).\n\n\nThe size of the array at time `t`, `sizet`, must be at least `nums[t]` because there needs to be enough space in the array to hold all the elements. The **space wasted** at\u00a0time `t` is defined as `sizet - nums[t]`, and the **total** space wasted is the **sum** of the space wasted across every time `t` where `0 <= t < nums.length`.\n\n\nReturn *the **minimum** **total space wasted** if you can resize the array at most* `k` *times*.\n\n\nNote:** The array can have **any size** at the start and does **not** count towards the number of resizing operations.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [10,20], k = 0",
                "Output": "** 10",
                "Explanation": "** size = [20,20].\nWe can set the initial size to be 20.\nThe total wasted space is (20 - 10) + (20 - 20) = 10."
            },
            {
                "Input": "** nums = [10,20,30], k = 1",
                "Output": "** 10",
                "Explanation": "** size = [20,20,30].\nWe can set the initial size to be 20 and resize to 30 at time 2. \nThe total wasted space is (20 - 10) + (20 - 20) + (30 - 30) = 10."
            },
            {
                "Input": "** nums = [10,20,15,30,20], k = 2",
                "Output": "** 15",
                "Explanation": "** size = [10,20,20,30,30].\nWe can set the initial size to 10, resize to 20 at time 1, and resize to 30 at time 3.\nThe total wasted space is (10 - 10) + (20 - 20) + (20 - 15) + (30 - 30) + (30 - 20) = 15."
            }
        ]
    },
    {
        "Title": "Maximum Product of the Length of Two Palindromic Substrings",
        "slug": "maximum-product-of-the-length-of-two-palindromic-substrings",
        "description": "You are given a **0-indexed** string `s` and are tasked with finding two **non-intersecting palindromic** substrings of **odd** length such that the product of their lengths is maximized.\n\n\nMore formally, you want to choose four integers `i`, `j`, `k`, `l` such that `0 <= i <= j < k <= l < s.length` and both the substrings `s[i...j]` and `s[k...l]` are palindromes and have odd lengths. `s[i...j]` denotes a substring from index `i` to index `j` **inclusive**.\n\n\nReturn *the **maximum** possible product of the lengths of the two non-intersecting palindromic substrings.\n\n\nA **palindrome** is a string that is the same forward and backward. A **substring** is a contiguous sequence of characters in a string.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Rolling Hash",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "** s = \"ababbb\"",
                "Output": "** 9",
                "Explanation": "** Substrings \"aba\" and \"bbb\" are palindromes with odd length. product = 3 * 3 = 9."
            },
            {
                "Input": "** s = \"zaaaxbbby\"",
                "Output": "** 9",
                "Explanation": "** Substrings \"aaa\" and \"bbb\" are palindromes with odd length. product = 3 * 3 = 9."
            }
        ]
    },
    {
        "Title": "Check If String Is a Prefix of Array",
        "slug": "check-if-string-is-a-prefix-of-array",
        "description": "Given a string `s` and an array of strings `words`, determine whether `s` is a **prefix string** of `words`.\n\n\nA string `s` is a **prefix string** of `words` if `s` can be made by concatenating the first `k` strings in `words` for some **positive** `k` no larger than `words.length`.\n\n\nReturn `true` *if* `s` *is a **prefix string** of* `words`*, or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"iloveleetcode\", words = [\"i\",\"love\",\"leetcode\",\"apples\"]",
                "Output": "** true",
                "Explanation": "**\ns can be made by concatenating \"i\", \"love\", and \"leetcode\" together."
            },
            {
                "Input": "** s = \"iloveleetcode\", words = [\"apples\",\"i\",\"love\",\"leetcode\"]",
                "Output": "** false",
                "Explanation": "**\nIt is impossible to make s using a prefix of arr."
            }
        ]
    },
    {
        "Title": "Remove Stones to Minimize the Total",
        "slug": "remove-stones-to-minimize-the-total",
        "description": "You are given a **0-indexed** integer array `piles`, where `piles[i]` represents the number of stones in the `ith` pile, and an integer `k`. You should apply the following operation **exactly** `k` times:\n\n\n Choose any `piles[i]` and **remove** `floor(piles[i] / 2)` stones from it.\n\n\nNotice** that you can apply the operation on the **same** pile more than once.\n\n\nReturn *the **minimum** possible total number of stones remaining after applying the* `k` *operations*.\n\n\n`floor(x)` is the **greatest** integer that is **smaller** than or **equal** to `x` (i.e., rounds `x` down).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** piles = [5,4,9], k = 2",
                "Output": "** 12",
                "Explanation": "**\u00a0Steps of a possible scenario are:\n- Apply the operation on pile 2. The resulting piles are [5,4,5].\n- Apply the operation on pile 0. The resulting piles are [3,4,5].\nThe total number of stones in [3,4,5] is 12."
            },
            {
                "Input": "** piles = [4,3,6,7], k = 3",
                "Output": "** 12",
                "Explanation": "**\u00a0Steps of a possible scenario are:\n- Apply the operation on pile 2. The resulting piles are [4,3,3,7].\n- Apply the operation on pile 3. The resulting piles are [4,3,3,4].\n- Apply the operation on pile 0. The resulting piles are [2,3,3,4].\nThe total number of stones in [2,3,3,4] is 12."
            }
        ]
    },
    {
        "Title": "Minimum Number of Swaps to Make the String Balanced",
        "slug": "minimum-number-of-swaps-to-make-the-string-balanced",
        "description": "You are given a **0-indexed** string `s` of **even** length `n`. The string consists of **exactly** `n / 2` opening brackets `'['` and `n / 2` closing brackets `']'`.\n\n\nA string is called **balanced** if and only if:\n\n\n It is the empty string, or\n It can be written as `AB`, where both `A` and `B` are **balanced** strings, or\n It can be written as `[C]`, where `C` is a **balanced** string.\n\n\nYou may swap the brackets at **any** two indices **any** number of times.\n\n\nReturn *the **minimum** number of swaps to make* `s` ***balanced***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Two Pointers",
            "String",
            "Stack",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"][][\"",
                "Output": "** 1",
                "Explanation": "** You can make the string balanced by swapping index 0 with index 3.\nThe resulting string is \"[[]]\"."
            },
            {
                "Input": "** s = \"]]][[[\"",
                "Output": "** 2",
                "Explanation": "** You can do the following to make the string balanced:\n- Swap index 0 with index 4. s = \"[]][][\".\n- Swap index 1 with index 5. s = \"[[][]]\".\nThe resulting string is \"[[][]]\"."
            },
            {
                "Input": "** s = \"[]\"",
                "Output": "** 0",
                "Explanation": "** The string is already balanced."
            }
        ]
    },
    {
        "Title": "Find the Longest Valid Obstacle Course at Each Position",
        "slug": "find-the-longest-valid-obstacle-course-at-each-position",
        "description": "You want to build some obstacle courses. You are given a **0-indexed** integer array `obstacles` of length `n`, where `obstacles[i]` describes the height of the `ith` obstacle.\n\n\nFor every index `i` between `0` and `n - 1` (**inclusive**), find the length of the **longest obstacle course** in `obstacles` such that:\n\n\n You choose any number of obstacles between `0` and `i` **inclusive**.\n You must include the `ith` obstacle in the course.\n You must put the chosen obstacles in the **same order** as they appear in `obstacles`.\n Every obstacle (except the first) is **taller** than or the **same height** as the obstacle immediately before it.\n\n\nReturn *an array* `ans` *of length* `n`, *where* `ans[i]` *is the length of the **longest obstacle course** for index* `i` *as described above*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Binary Indexed Tree"
        ],
        "examples": [
            {
                "Input": "** obstacles = [1,2,3,2]",
                "Output": "** [1,2,3,3]",
                "Explanation": "** The longest valid obstacle course at each position is:\n- i = 0: [1], [1] has length 1.\n- i = 1: [1,2], [1,2] has length 2.\n- i = 2: [1,2,3], [1,2,3] has length 3.\n- i = 3: [1,2,3,2], [1,2,2] has length 3."
            },
            {
                "Input": "** obstacles = [2,2,1]",
                "Output": "** [1,2,1]",
                "Explanation": "** The longest valid obstacle course at each position is:\n- i = 0: [2], [2] has length 1.\n- i = 1: [2,2], [2,2] has length 2.\n- i = 2: [2,2,1], [1] has length 1."
            },
            {
                "Input": "** obstacles = [3,1,5,6,4,2]",
                "Output": "** [1,1,2,3,2,2]",
                "Explanation": "** The longest valid obstacle course at each position is:\n- i = 0: [3], [3] has length 1.\n- i = 1: [3,1], [1] has length 1.\n- i = 2: [3,1,5], [3,5] has length 2. [1,5] is also valid.\n- i = 3: [3,1,5,6], [3,5,6] has length 3. [1,5,6] is also valid.\n- i = 4: [3,1,5,6,4], [3,4] has length 2. [1,4] is also valid.\n- i = 5: [3,1,5,6,4,2], [1,2] has length 2."
            }
        ]
    },
    {
        "Title": "Employees With Missing Information",
        "slug": "employees-with-missing-information",
        "description": "Table: `Employees`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| employee_id | int     |\n| name        | varchar |\n+-------------+---------+\nemployee_id is the column with unique values for this table.\nEach row of this table indicates the name of the employee whose ID is employee_id.\n\n```\n\n\u00a0\n\n\nTable: `Salaries`\n\n\n\n```\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| employee_id | int     |\n| salary      | int     |\n+-------------+---------+\nemployee_id is the column with unique values for this table.\nEach row of this table indicates the salary of the employee whose ID is employee_id.\n\n```\n\n\u00a0\n\n\nWrite a solution to report the IDs of all the employees with **missing information**. The information of an employee is missing if:\n\n\n The employee's **name** is missing, or\n The employee's **salary** is missing.\n\n\nReturn the result table ordered by `employee_id` **in ascending order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nEmployees table:\n+-------------+----------+\n| employee_id | name     |\n+-------------+----------+\n| 2           | Crew     |\n| 4           | Haven    |\n| 5           | Kristian |\n+-------------+----------+\nSalaries table:\n+-------------+--------+\n| employee_id | salary |\n+-------------+--------+\n| 5           | 76071  |\n| 1           | 22517  |\n| 4           | 63539  |\n+-------------+--------+",
                "Output": "** \n+-------------+\n| employee_id |\n+-------------+\n| 1           |\n| 2           |\n+-------------+",
                "Explanation": "** \nEmployees 1, 2, 4, and 5 are working at this company.\nThe name of employee 1 is missing.\nThe salary of employee 2 is missing."
            }
        ]
    },
    {
        "Title": "Number of Strings That Appear as Substrings in Word",
        "slug": "number-of-strings-that-appear-as-substrings-in-word",
        "description": "Given an array of strings `patterns` and a string `word`, return *the **number** of strings in* `patterns` *that exist as a **substring** in* `word`.\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** patterns = [\"a\",\"abc\",\"bc\",\"d\"], word = \"abc\"",
                "Output": "** 3",
                "Explanation": "**\n- \"a\" appears as a substring in \"abc\".\n- \"abc\" appears as a substring in \"abc\".\n- \"bc\" appears as a substring in \"abc\".\n- \"d\" does not appear as a substring in \"abc\".\n3 of the strings in patterns appear as a substring in word."
            },
            {
                "Input": "** patterns = [\"a\",\"b\",\"c\"], word = \"aaaaabbbbb\"",
                "Output": "** 2",
                "Explanation": "**\n- \"a\" appears as a substring in \"aaaaabbbbb\".\n- \"b\" appears as a substring in \"aaaaabbbbb\".\n- \"c\" does not appear as a substring in \"aaaaabbbbb\".\n2 of the strings in patterns appear as a substring in word."
            },
            {
                "Input": "** patterns = [\"a\",\"a\",\"a\"], word = \"ab\"",
                "Output": "** 3",
                "Explanation": "** Each of the patterns appears as a substring in word \"ab\"."
            }
        ]
    },
    {
        "Title": "Array With Elements Not Equal to Average of Neighbors",
        "slug": "array-with-elements-not-equal-to-average-of-neighbors",
        "description": "You are given a **0-indexed** array `nums` of **distinct** integers. You want to rearrange the elements in the array such that every element in the rearranged array is **not** equal to the **average** of its neighbors.\n\n\nMore formally, the rearranged array should have the property such that for every `i` in the range `1 <= i < nums.length - 1`, `(nums[i-1] + nums[i+1]) / 2` is **not** equal to `nums[i]`.\n\n\nReturn ***any** rearrangement of* `nums` *that meets the requirements*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** [1,2,4,5,3]",
                "Explanation": "**\nWhen i=1, nums[i] = 2, and the average of its neighbors is (1+4) / 2 = 2.5.\nWhen i=2, nums[i] = 4, and the average of its neighbors is (2+5) / 2 = 3.5.\nWhen i=3, nums[i] = 5, and the average of its neighbors is (4+3) / 2 = 3.5."
            },
            {
                "Input": "** nums = [6,2,0,9,7]",
                "Output": "** [9,7,6,2,0]",
                "Explanation": "**\nWhen i=1, nums[i] = 7, and the average of its neighbors is (9+6) / 2 = 7.5.\nWhen i=2, nums[i] = 6, and the average of its neighbors is (7+2) / 2 = 4.5.\nWhen i=3, nums[i] = 2, and the average of its neighbors is (6+0) / 2 = 3."
            }
        ]
    },
    {
        "Title": "Minimum Non-Zero Product of the Array Elements",
        "slug": "minimum-non-zero-product-of-the-array-elements",
        "description": "You are given a positive integer `p`. Consider an array `nums` (**1-indexed**) that consists of the integers in the **inclusive** range `[1, 2p - 1]` in their binary representations. You are allowed to do the following operation **any** number of times:\n\n\n Choose two elements `x` and `y` from `nums`.\n Choose a bit in `x` and swap it with its corresponding bit in `y`. Corresponding bit refers to the bit that is in the **same position** in the other integer.\n\n\nFor example, if `x = 1101` and `y = 0011`, after swapping the `2nd` bit from the right, we have `x = 1111` and `y = 0001`.\n\n\nFind the **minimum non-zero** product of `nums` after performing the above operation **any** number of times. Return *this product* ***modulo*** `109 + 7`.\n\n\nNote:** The answer should be the minimum product **before** the modulo operation is done.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Greedy",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** p = 1",
                "Output": "** 1",
                "Explanation": "** nums = [1].\nThere is only one element, so the product equals that element."
            },
            {
                "Input": "** p = 2",
                "Output": "** 6",
                "Explanation": "** nums = [01, 10, 11].\nAny swap would either make the product 0 or stay the same.\nThus, the array product of 1 * 2 * 3 = 6 is already minimized."
            },
            {
                "Input": "** p = 3",
                "Output": "** 1512",
                "Explanation": "** nums = [001, 010, 011, 100, 101, 110, 111]\n- In the first operation we can swap the leftmost bit of the second and fifth elements.\n    - The resulting array is [001, 110, 011, 100, 001, 110, 111].\n- In the second operation we can swap the middle bit of the third and fourth elements.\n    - The resulting array is [001, 110, 001, 110, 001, 110, 111].\nThe array product is 1 * 6 * 1 * 6 * 1 * 6 * 7 = 1512, which is the minimum possible product."
            }
        ]
    },
    {
        "Title": "Last Day Where You Can Still Cross",
        "slug": "last-day-where-you-can-still-cross",
        "description": "There is a **1-based** binary matrix where `0` represents land and `1` represents water. You are given integers `row` and `col` representing the number of rows and columns in the matrix, respectively.\n\n\nInitially on day `0`, the **entire** matrix is **land**. However, each day a new cell becomes flooded with **water**. You are given a **1-based** 2D array `cells`, where `cells[i] = [ri, ci]` represents that on the `ith` day, the cell on the `rith` row and `cith` column (**1-based** coordinates) will be covered with **water** (i.e., changed to `1`).\n\n\nYou want to find the **last** day that it is possible to walk from the **top** to the **bottom** by only walking on land cells. You can start from **any** cell in the top row and end at **any** cell in the bottom row. You can only travel in the **four** cardinal directions (left, right, up, and down).\n\n\nReturn *the **last** day where it is possible to walk from the **top** to the **bottom** by only walking on land cells*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]]",
                "Output": "** 2",
                "Explanation": "** The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 2."
            },
            {
                "Input": "** row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]]",
                "Output": "** 1",
                "Explanation": "** The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 1."
            },
            {
                "Input": "** row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]",
                "Output": "** 3",
                "Explanation": "** The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 3."
            }
        ]
    },
    {
        "Title": "Find if Path Exists in Graph",
        "slug": "find-if-path-exists-in-graph",
        "description": "There is a **bi-directional** graph with `n` vertices, where each vertex is labeled from `0` to `n - 1` (**inclusive**). The edges in the graph are represented as a 2D integer array `edges`, where each `edges[i] = [ui, vi]` denotes a bi-directional edge between vertex `ui` and vertex `vi`. Every vertex pair is connected by **at most one** edge, and no vertex has an edge to itself.\n\n\nYou want to determine if there is a **valid path** that exists from vertex `source` to vertex `destination`.\n\n\nGiven `edges` and the integers `n`, `source`, and `destination`, return `true` *if there is a **valid path** from* `source` *to* `destination`*, or* `false` *otherwise**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2",
                "Output": "** true",
                "Explanation": "** There are two paths from vertex 0 to vertex 2:\n- 0 \u2192 1 \u2192 2\n- 0 \u2192 2"
            },
            {
                "Input": "** n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5",
                "Output": "** false",
                "Explanation": "** There is no path from vertex 0 to vertex 5."
            }
        ]
    },
    {
        "Title": "Minimum Time to Type Word Using Special Typewriter",
        "slug": "minimum-time-to-type-word-using-special-typewriter",
        "description": "There is a special typewriter with lowercase English letters `'a'` to `'z'` arranged in a **circle** with a **pointer**. A character can **only** be typed if the pointer is pointing to that character. The pointer is **initially** pointing to the character `'a'`.\n\n\n![](https://assets.leetcode.com/uploads/2021/07/31/chart.jpg)\nEach second, you may perform one of the following operations:\n\n\n Move the pointer one character **counterclockwise** or **clockwise**.\n Type the character the pointer is **currently** on.\n\n\nGiven a string `word`, return the **minimum** number of seconds to type out the characters in `word`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** word = \"abc\"",
                "Output": "** 5",
                "Explanation": "**The characters are printed as follows:\n- Type the character 'a' in 1 second since the pointer is initially on 'a'.\n- Move the pointer clockwise to 'b' in 1 second.\n- Type the character 'b' in 1 second.\n- Move the pointer clockwise to 'c' in 1 second.\n- Type the character 'c' in 1 second."
            },
            {
                "Input": "** word = \"bza\"",
                "Output": "** 7",
                "Explanation": "**The characters are printed as follows:\n- Move the pointer clockwise to 'b' in 1 second.\n- Type the character 'b' in 1 second.\n- Move the pointer counterclockwise to 'z' in 2 seconds.\n- Type the character 'z' in 1 second.\n- Move the pointer clockwise to 'a' in 1 second.\n- Type the character 'a' in 1 second."
            },
            {
                "Input": "** word = \"zjpc\"",
                "Output": "** 34",
                "Explanation": "**\nThe characters are printed as follows:\n- Move the pointer counterclockwise to 'z' in 1 second.\n- Type the character 'z' in 1 second.\n- Move the pointer clockwise to 'j' in 10 seconds.\n- Type the character 'j' in 1 second.\n- Move the pointer clockwise to 'p' in 6 seconds.\n- Type the character 'p' in 1 second.\n- Move the pointer counterclockwise to 'c' in 13 seconds.\n- Type the character 'c' in 1 second."
            }
        ]
    },
    {
        "Title": "Maximum Matrix Sum",
        "slug": "maximum-matrix-sum",
        "description": "You are given an `n x n` integer `matrix`. You can do the following operation **any** number of times:\n\n\n Choose any two **adjacent** elements of `matrix` and **multiply** each of them by `-1`.\n\n\nTwo elements are considered **adjacent** if and only if they share a **border**.\n\n\nYour goal is to **maximize** the summation of the matrix's elements. Return *the **maximum** sum of the matrix's elements using the operation mentioned above.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** matrix = [[1,-1],[-1,1]]",
                "Output": "** 4",
                "Explanation": "** We can follow the following steps to reach sum equals 4:\n- Multiply the 2 elements in the first row by -1.\n- Multiply the 2 elements in the first column by -1."
            },
            {
                "Input": "** matrix = [[1,2,3],[-1,-2,-3],[1,2,3]]",
                "Output": "** 16",
                "Explanation": "** We can follow the following step to reach sum equals 16:\n- Multiply the 2 last elements in the second row by -1."
            }
        ]
    },
    {
        "Title": "Number of Ways to Arrive at Destination",
        "slug": "number-of-ways-to-arrive-at-destination",
        "description": "You are in a city that consists of `n` intersections numbered from `0` to `n - 1` with **bi-directional** roads between some intersections. The inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections.\n\n\nYou are given an integer `n` and a 2D integer array `roads` where `roads[i] = [ui, vi, timei]` means that there is a road between intersections `ui` and `vi` that takes `timei` minutes to travel. You want to know in how many ways you can travel from intersection `0` to intersection `n - 1` in the **shortest amount of time**.\n\n\nReturn *the **number of ways** you can arrive at your destination in the **shortest amount of time***. Since the answer may be large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming",
            "Graph",
            "Topological Sort",
            "Shortest Path"
        ],
        "examples": [
            {
                "Input": "** n = 7, roads = [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]",
                "Output": "** 4",
                "Explanation": "** The shortest amount of time it takes to go from intersection 0 to intersection 6 is 7 minutes.\nThe four ways to get there in 7 minutes are:\n- 0 \u279d 6\n- 0 \u279d 4 \u279d 6\n- 0 \u279d 1 \u279d 2 \u279d 5 \u279d 6\n- 0 \u279d 1 \u279d 3 \u279d 5 \u279d 6"
            }
        ]
    },
    {
        "Title": "Number of Ways to Separate Numbers",
        "slug": "number-of-ways-to-separate-numbers",
        "description": "You wrote down many **positive** integers in a string called `num`. However, you realized that you forgot to add commas to seperate the different numbers. You remember that the list of integers was **non-decreasing** and that **no** integer had leading zeros.\n\n\nReturn *the **number of possible lists of integers** that you could have written down to get the string* `num`. Since the answer may be large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Suffix Array"
        ],
        "examples": [
            {
                "Input": "** num = \"327\"",
                "Output": "** 2",
                "Explanation": "** You could have written down the numbers:\n3, 27\n327"
            },
            {
                "Input": "** num = \"094\"",
                "Output": "** 0",
                "Explanation": "** No numbers can have leading zeros and all numbers must be positive."
            },
            {
                "Input": "** num = \"0\"",
                "Output": "** 0",
                "Explanation": "** No numbers can have leading zeros and all numbers must be positive."
            }
        ]
    },
    {
        "Title": "Employees Whose Manager Left the Company",
        "slug": "employees-whose-manager-left-the-company",
        "description": "Table: `Employees`\n\n\n\n```\n\n+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| employee_id | int      |\n| name        | varchar  |\n| manager_id  | int      |\n| salary      | int      |\n+-------------+----------+\nIn SQL, employee_id is the primary key for this table.\nThis table contains information about the employees, their salary, and the ID of their manager. Some employees do not have a manager (manager_id is null). \n\n```\n\n\u00a0\n\n\nFind the IDs of the employees whose salary is strictly less than `$30000` and whose manager left the company. When a manager leaves the company, their information is deleted from the `Employees` table, but the reports still have their `manager_id` set to the manager that left.\n\n\nReturn the result table ordered by `employee_id`.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "**  \nEmployees table:\n+-------------+-----------+------------+--------+\n| employee_id | name      | manager_id | salary |\n+-------------+-----------+------------+--------+\n| 3           | Mila      | 9          | 60301  |\n| 12          | Antonella | null       | 31000  |\n| 13          | Emery     | null       | 67084  |\n| 1           | Kalel     | 11         | 21241  |\n| 9           | Mikaela   | null       | 50937  |\n| 11          | Joziah    | 6          | 28485  |\n+-------------+-----------+------------+--------+",
                "Output": "** \n+-------------+\n| employee_id |\n+-------------+\n| 11          |\n+-------------+",
                "Explanation": "** \nThe employees with a salary less than $30000 are 1 (Kalel) and 11 (Joziah).\nKalel's manager is employee 11, who is still in the company (Joziah).\nJoziah's manager is employee 6, who left the company because there is no row for employee 6 as it was deleted."
            }
        ]
    },
    {
        "Title": "Find Greatest Common Divisor of Array",
        "slug": "find-greatest-common-divisor-of-array",
        "description": "Given an integer array `nums`, return*the **greatest common divisor** of the smallest number and largest number in* `nums`.\n\n\nThe **greatest common divisor** of two numbers is the largest positive integer that evenly divides both numbers.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [2,5,6,9,10]",
                "Output": "** 2",
                "Explanation": "**\nThe smallest number in nums is 2.\nThe largest number in nums is 10.\nThe greatest common divisor of 2 and 10 is 2."
            },
            {
                "Input": "** nums = [7,5,6,8,3]",
                "Output": "** 1",
                "Explanation": "**\nThe smallest number in nums is 3.\nThe largest number in nums is 8.\nThe greatest common divisor of 3 and 8 is 1."
            },
            {
                "Input": "** nums = [3,3]",
                "Output": "** 3",
                "Explanation": "**\nThe smallest number in nums is 3.\nThe largest number in nums is 3.\nThe greatest common divisor of 3 and 3 is 3."
            }
        ]
    },
    {
        "Title": "Find Unique Binary String",
        "slug": "find-unique-binary-string",
        "description": "Given an array of strings `nums` containing `n` **unique** binary strings each of length `n`, return *a binary string of length* `n` *that **does not appear** in* `nums`*. If there are multiple answers, you may return **any** of them*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** nums = [\"01\",\"10\"]",
                "Output": "** \"11\"",
                "Explanation": "** \"11\" does not appear in nums. \"00\" would also be correct."
            },
            {
                "Input": "** nums = [\"00\",\"01\"]",
                "Output": "** \"11\"",
                "Explanation": "** \"11\" does not appear in nums. \"10\" would also be correct."
            },
            {
                "Input": "** nums = [\"111\",\"011\",\"001\"]",
                "Output": "** \"101\"",
                "Explanation": "** \"101\" does not appear in nums. \"000\", \"010\", \"100\", and \"110\" would also be correct."
            }
        ]
    },
    {
        "Title": "Minimize the Difference Between Target and Chosen Elements",
        "slug": "minimize-the-difference-between-target-and-chosen-elements",
        "description": "You are given an `m x n` integer matrix `mat` and an integer `target`.\n\n\nChoose one integer from **each row** in the matrix such that the **absolute difference** between `target` and the **sum** of the chosen elements is **minimized**.\n\n\nReturn *the **minimum absolute difference***.\n\n\nThe **absolute difference** between two numbers `a` and `b` is the absolute value of `a - b`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** mat = [[1,2,3],[4,5,6],[7,8,9]], target = 13",
                "Output": "** 0",
                "Explanation": "** One possible choice is to:\n- Choose 1 from the first row.\n- Choose 5 from the second row.\n- Choose 7 from the third row.\nThe sum of the chosen elements is 13, which equals the target, so the absolute difference is 0."
            },
            {
                "Input": "** mat = [[1],[2],[3]], target = 100",
                "Output": "** 94",
                "Explanation": "** The best possible choice is to:\n- Choose 1 from the first row.\n- Choose 2 from the second row.\n- Choose 3 from the third row.\nThe sum of the chosen elements is 6, and the absolute difference is 94."
            },
            {
                "Input": "** mat = [[1,2,9,8,7]], target = 6",
                "Output": "** 1",
                "Explanation": "** The best choice is to choose 7 from the first row.\nThe absolute difference is 1."
            }
        ]
    },
    {
        "Title": "Find Array Given Subset Sums",
        "slug": "find-array-given-subset-sums",
        "description": "You are given an integer `n` representing the length of an unknown array that you are trying to recover. You are also given an array `sums` containing the values of all `2n` **subset sums** of the unknown array (in no particular order).\n\n\nReturn *the array* `ans` *of length* `n` *representing the unknown array. If **multiple** answers exist, return **any** of them*.\n\n\nAn array `sub` is a **subset** of an array `arr` if `sub` can be obtained from `arr` by deleting some (possibly zero or all) elements of `arr`. The sum of the elements in `sub` is one possible **subset sum** of `arr`. The sum of an empty array is considered to be `0`.\n\n\nNote:** Test cases are generated such that there will **always** be at least one correct answer.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Divide and Conquer"
        ],
        "examples": [
            {
                "Input": "** n = 3, sums = [-3,-2,-1,0,0,1,2,3]",
                "Output": "** [1,2,-3]",
                "Explanation": "** [1,2,-3] is able to achieve the given subset sums:\n- []: sum is 0\n- [1]: sum is 1\n- [2]: sum is 2\n- [1,2]: sum is 3\n- [-3]: sum is -3\n- [1,-3]: sum is -2\n- [2,-3]: sum is -1\n- [1,2,-3]: sum is 0\nNote that any permutation of [1,2,-3] and also any permutation of [-1,-2,3] will also be accepted."
            },
            {
                "Input": "** n = 2, sums = [0,0,0,0]",
                "Output": "** [0,0]",
                "Explanation": "** The only correct answer is [0,0]."
            },
            {
                "Input": "** n = 4, sums = [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]",
                "Output": "** [0,-1,4,5]",
                "Explanation": "** [0,-1,4,5] is able to achieve the given subset sums."
            }
        ]
    },
    {
        "Title": "Minimum Difference Between Highest and Lowest of K Scores",
        "slug": "minimum-difference-between-highest-and-lowest-of-k-scores",
        "description": "You are given a **0-indexed** integer array `nums`, where `nums[i]` represents the score of the `ith` student. You are also given an integer `k`.\n\n\nPick the scores of any `k` students from the array so that the **difference** between the **highest** and the **lowest** of the `k` scores is **minimized**.\n\n\nReturn *the **minimum** possible difference*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Sliding Window",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [90], k = 1",
                "Output": "** 0",
                "Explanation": "** There is one way to pick score(s) of one student:\n- [**90**]. The difference between the highest and lowest score is 90 - 90 = 0.\nThe minimum possible difference is 0."
            },
            {
                "Input": "** nums = [9,4,1,7], k = 2",
                "Output": "** 2",
                "Explanation": "** There are six ways to pick score(s) of two students:\n- [**9**,**4**,1,7]. The difference between the highest and lowest score is 9 - 4 = 5.\n- [**9**,4,**1**,7]. The difference between the highest and lowest score is 9 - 1 = 8.\n- [**9**,4,1,**7**]. The difference between the highest and lowest score is 9 - 7 = 2.\n- [9,**4**,**1**,7]. The difference between the highest and lowest score is 4 - 1 = 3.\n- [9,**4**,1,**7**]. The difference between the highest and lowest score is 7 - 4 = 3.\n- [9,4,**1**,**7**]. The difference between the highest and lowest score is 7 - 1 = 6.\nThe minimum possible difference is 2."
            }
        ]
    },
    {
        "Title": "Find the Kth Largest Integer in the Array",
        "slug": "find-the-kth-largest-integer-in-the-array",
        "description": "You are given an array of strings `nums` and an integer `k`. Each string in `nums` represents an integer without leading zeros.\n\n\nReturn *the string that represents the* `kth` ***largest integer** in* `nums`.\n\n\nNote**: Duplicate numbers should be counted distinctly. For example, if `nums` is `[\"1\",\"2\",\"2\"]`, `\"2\"` is the first largest integer, `\"2\"` is the second-largest integer, and `\"1\"` is the third-largest integer.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Divide and Conquer",
            "Sorting",
            "Heap (Priority Queue)",
            "Quickselect"
        ],
        "examples": [
            {
                "Input": "** nums = [\"3\",\"6\",\"7\",\"10\"], k = 4",
                "Output": "** \"3\"",
                "Explanation": "**\nThe numbers in nums sorted in non-decreasing order are [\"3\",\"6\",\"7\",\"10\"].\nThe 4th largest integer in nums is \"3\"."
            },
            {
                "Input": "** nums = [\"2\",\"21\",\"12\",\"1\"], k = 3",
                "Output": "** \"2\"",
                "Explanation": "**\nThe numbers in nums sorted in non-decreasing order are [\"1\",\"2\",\"12\",\"21\"].\nThe 3rd largest integer in nums is \"2\"."
            },
            {
                "Input": "** nums = [\"0\",\"0\"], k = 2",
                "Output": "** \"0\"",
                "Explanation": "**\nThe numbers in nums sorted in non-decreasing order are [\"0\",\"0\"].\nThe 2nd largest integer in nums is \"0\"."
            }
        ]
    },
    {
        "Title": "Minimum Number of Work Sessions to Finish the Tasks",
        "slug": "minimum-number-of-work-sessions-to-finish-the-tasks",
        "description": "There are `n` tasks assigned to you. The task times are represented as an integer array `tasks` of length `n`, where the `ith` task takes `tasks[i]` hours to finish. A **work session** is when you work for **at most** `sessionTime` consecutive hours and then take a break.\n\n\nYou should finish the given tasks in a way that satisfies the following conditions:\n\n\n If you start a task in a work session, you must complete it in the **same** work session.\n You can start a new task **immediately** after finishing the previous one.\n You may complete the tasks in **any order**.\n\n\nGiven `tasks` and `sessionTime`, return *the **minimum** number of **work sessions** needed to finish all the tasks following the conditions above.\n\n\nThe tests are generated such that `sessionTime` is **greater** than or **equal** to the **maximum** element in `tasks[i]`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Backtracking",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** tasks = [1,2,3], sessionTime = 3",
                "Output": "** 2",
                "Explanation": "** You can finish the tasks in two work sessions.\n- First work session: finish the first and the second tasks in 1 + 2 = 3 hours.\n- Second work session: finish the third task in 3 hours."
            },
            {
                "Input": "** tasks = [3,1,3,1,1], sessionTime = 8",
                "Output": "** 2",
                "Explanation": "** You can finish the tasks in two work sessions.\n- First work session: finish all the tasks except the last one in 3 + 1 + 3 + 1 = 8 hours.\n- Second work session: finish the last task in 1 hour."
            },
            {
                "Input": "** tasks = [1,2,3,4,5], sessionTime = 15",
                "Output": "** 1",
                "Explanation": "** You can finish all the tasks in one work session."
            }
        ]
    },
    {
        "Title": "Number of Unique Good Subsequences",
        "slug": "number-of-unique-good-subsequences",
        "description": "You are given a binary string `binary`. A **subsequence** of `binary` is considered **good** if it is **not empty** and has **no leading zeros** (with the exception of `\"0\"`).\n\n\nFind the number of **unique good subsequences** of `binary`.\n\n\n For example, if `binary = \"001\"`, then all the **good** subsequences are `[\"0\", \"0\", \"1\"]`, so the **unique** good subsequences are `\"0\"` and `\"1\"`. Note that subsequences `\"00\"`, `\"01\"`, and `\"001\"` are not good because they have leading zeros.\n\n\nReturn *the number of **unique good subsequences** of* `binary`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\nA **subsequence** is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** binary = \"001\"",
                "Output": "** 2",
                "Explanation": "** The good subsequences of binary are [\"0\", \"0\", \"1\"].\nThe unique good subsequences are \"0\" and \"1\"."
            },
            {
                "Input": "** binary = \"11\"",
                "Output": "** 2",
                "Explanation": "** The good subsequences of binary are [\"1\", \"1\", \"11\"].\nThe unique good subsequences are \"1\" and \"11\"."
            },
            {
                "Input": "** binary = \"101\"",
                "Output": "** 5",
                "Explanation": "** The good subsequences of binary are [\"1\", \"0\", \"1\", \"10\", \"11\", \"101\"]. \nThe unique good subsequences are \"0\", \"1\", \"10\", \"11\", and \"101\"."
            }
        ]
    },
    {
        "Title": "Find the Middle Index in Array",
        "slug": "find-the-middle-index-in-array",
        "description": "Given a **0-indexed** integer array `nums`, find the **leftmost** `middleIndex` (i.e., the smallest amongst all the possible ones).\n\n\nA `middleIndex` is an index where `nums[0] + nums[1] + ... + nums[middleIndex-1] == nums[middleIndex+1] + nums[middleIndex+2] + ... + nums[nums.length-1]`.\n\n\nIf `middleIndex == 0`, the left side sum is considered to be `0`. Similarly, if `middleIndex == nums.length - 1`, the right side sum is considered to be `0`.\n\n\nReturn *the **leftmost*** `middleIndex` *that satisfies the condition, or* `-1` *if there is no such index*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [2,3,-1,8,4]",
                "Output": "** 3",
                "Explanation": "** The sum of the numbers before index 3 is: 2 + 3 + -1 = 4\nThe sum of the numbers after index 3 is: 4 = 4"
            },
            {
                "Input": "** nums = [1,-1,4]",
                "Output": "** 2",
                "Explanation": "** The sum of the numbers before index 2 is: 1 + -1 = 0\nThe sum of the numbers after index 2 is: 0"
            },
            {
                "Input": "** nums = [2,5]",
                "Output": "** -1",
                "Explanation": "** There is no valid middleIndex."
            }
        ]
    },
    {
        "Title": "Find All Groups of Farmland",
        "slug": "find-all-groups-of-farmland",
        "description": "You are given a **0-indexed** `m x n` binary matrix `land` where a `0` represents a hectare of forested land and a `1` represents a hectare of farmland.\n\n\nTo keep the land organized, there are designated rectangular areas of hectares that consist **entirely** of farmland. These rectangular areas are called **groups**. No two groups are adjacent, meaning farmland in one group is **not** four-directionally adjacent to another farmland in a different group.\n\n\n`land` can be represented by a coordinate system where the top left corner of `land` is `(0, 0)` and the bottom right corner of `land` is `(m-1, n-1)`. Find the coordinates of the top left and bottom right corner of each **group** of farmland. A **group** of farmland with a top left corner at `(r1, c1)` and a bottom right corner at `(r2, c2)` is represented by the 4-length array `[r1, c1, r2, c2].`\n\n\nReturn *a 2D array containing the 4-length arrays described above for each **group** of farmland in* `land`*. If there are no groups of farmland, return an empty array. You may return the answer in **any order***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** land = [[1,0,0],[0,1,1],[0,1,1]]",
                "Output": "** [[0,0,0,0],[1,1,2,2]]",
                "Explanation": "**\nThe first group has a top left corner at land[0][0] and a bottom right corner at land[0][0].\nThe second group has a top left corner at land[1][1] and a bottom right corner at land[2][2]."
            },
            {
                "Input": "** land = [[1,1],[1,1]]",
                "Output": "** [[0,0,1,1]]",
                "Explanation": "**\nThe first group has a top left corner at land[0][0] and a bottom right corner at land[1][1]."
            },
            {
                "Input": "** land = [[0]]",
                "Output": "** []",
                "Explanation": "**\nThere are no groups of farmland."
            }
        ]
    },
    {
        "Title": "Operations on Tree",
        "slug": "operations-on-tree",
        "description": "You are given a tree with `n` nodes numbered from `0` to `n - 1` in the form of a parent array `parent` where `parent[i]` is the parent of the `ith` node. The root of the tree is node `0`, so `parent[0] = -1` since it has no parent. You want to design a data structure that allows users to lock, unlock, and upgrade nodes in the tree.\n\n\nThe data structure should support the following functions:\n\n\n **Lock:** **Locks** the given node for the given user and prevents other users from locking the same node. You may only lock a node using this function if the node is unlocked.\n **Unlock: Unlocks** the given node for the given user. You may only unlock a node using this function if it is currently locked by the same user.\n **Upgrade****: Locks** the given node for the given user and **unlocks** all of its descendants **regardless** of who locked it. You may only upgrade a node if **all** 3 conditions are true:\n\t+ The node is unlocked,\n\t+ It has at least one locked descendant (by **any** user), and\n\t+ It does not have any locked ancestors.\n\n\nImplement the `LockingTree` class:\n\n\n `LockingTree(int[] parent)` initializes the data structure with the parent array.\n `lock(int num, int user)` returns `true` if it is possible for the user with id `user` to lock the node `num`, or `false` otherwise. If it is possible, the node `num` will become **locked** by the user with id `user`.\n `unlock(int num, int user)` returns `true` if it is possible for the user with id `user` to unlock the node `num`, or `false` otherwise. If it is possible, the node `num` will become **unlocked**.\n `upgrade(int num, int user)` returns `true` if it is possible for the user with id `user` to upgrade the node `num`, or `false` otherwise. If it is possible, the node `num` will be **upgraded**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Design"
        ],
        "examples": [
            {
                "Input": "[\"LockingTree\", \"lock\", \"unlock\", \"unlock\", \"lock\", \"upgrade\", \"lock\"]\n[[[-1, 0, 0, 1, 1, 2, 2]], [2, 2], [2, 3], [2, 2], [4, 5], [0, 1], [0, 1]]",
                "Output": "[null, true, false, true, true, true, false]",
                "Explanation": "LockingTree lockingTree = new LockingTree([-1, 0, 0, 1, 1, 2, 2]);\nlockingTree.lock(2, 2);    // return true because node 2 is unlocked.\n                           // Node 2 will now be locked by user 2.\nlockingTree.unlock(2, 3);  // return false because user 3 cannot unlock a node locked by user 2.\nlockingTree.unlock(2, 2);  // return true because node 2 was previously locked by user 2.\n                           // Node 2 will now be unlocked.\nlockingTree.lock(4, 5);    // return true because node 4 is unlocked.\n                           // Node 4 will now be locked by user 5.\nlockingTree.upgrade(0, 1); // return true because node 0 is unlocked and has at least one locked descendant (node 4).\n                           // Node 0 will now be locked by user 1 and node 4 will now be unlocked.\nlockingTree.lock(0, 1);    // return false because node 0 is already locked."
            }
        ]
    },
    {
        "Title": "The Number of Good Subsets",
        "slug": "the-number-of-good-subsets",
        "description": "You are given an integer array `nums`. We call a subset of `nums` **good** if its product can be represented as a product of one or more **distinct prime** numbers.\n\n\n For example, if `nums = [1, 2, 3, 4]`:\n\t+ `[2, 3]`, `[1, 2, 3]`, and `[1, 3]` are **good** subsets with products `6 = 2*3`, `6 = 2*3`, and `3 = 3` respectively.\n\t+ `[1, 4]` and `[4]` are not **good** subsets with products `4 = 2*2` and `4 = 2*2` respectively.\n\n\nReturn *the number of different **good** subsets in* `nums` ***modulo*** `109 + 7`.\n\n\nA **subset** of `nums` is any array that can be obtained by deleting some (possibly none or all) elements from `nums`. Two subsets are different if and only if the chosen indices to delete are different.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 6",
                "Explanation": "** The good subsets are:\n- [1,2]: product is 2, which is the product of distinct prime 2.\n- [1,2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [1,3]: product is 3, which is the product of distinct prime 3.\n- [2]: product is 2, which is the product of distinct prime 2.\n- [2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [3]: product is 3, which is the product of distinct prime 3."
            },
            {
                "Input": "** nums = [4,2,3,15]",
                "Output": "** 5",
                "Explanation": "** The good subsets are:\n- [2]: product is 2, which is the product of distinct prime 2.\n- [2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [2,15]: product is 30, which is the product of distinct primes 2, 3, and 5.\n- [3]: product is 3, which is the product of distinct prime 3.\n- [15]: product is 15, which is the product of distinct primes 3 and 5."
            }
        ]
    },
    {
        "Title": "Count Special Quadruplets",
        "slug": "count-special-quadruplets",
        "description": "Given a **0-indexed** integer array `nums`, return *the number of **distinct** quadruplets* `(a, b, c, d)` *such that:\n\n\n `nums[a] + nums[b] + nums[c] == nums[d]`, and\n `a < b < c < d`\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,6]",
                "Output": "** 1",
                "Explanation": "** The only quadruplet that satisfies the requirement is (0, 1, 2, 3) because 1 + 2 + 3 == 6."
            },
            {
                "Input": "** nums = [3,3,6,4,5]",
                "Output": "** 0",
                "Explanation": "** There are no such quadruplets in [3,3,6,4,5]."
            },
            {
                "Input": "** nums = [1,1,1,3,5]",
                "Output": "** 4",
                "Explanation": "** The 4 quadruplets that satisfy the requirement are:\n- (0, 1, 2, 3): 1 + 1 + 1 == 3\n- (0, 1, 3, 4): 1 + 1 + 3 == 5\n- (0, 2, 3, 4): 1 + 1 + 3 == 5\n- (1, 2, 3, 4): 1 + 1 + 3 == 5"
            }
        ]
    },
    {
        "Title": "The Number of Weak Characters in the Game",
        "slug": "the-number-of-weak-characters-in-the-game",
        "description": "You are playing a game that contains multiple characters, and each of the characters has **two** main properties: **attack** and **defense**. You are given a 2D integer array `properties` where `properties[i] = [attacki, defensei]` represents the properties of the `ith` character in the game.\n\n\nA character is said to be **weak** if any other character has **both** attack and defense levels **strictly greater** than this character's attack and defense levels. More formally, a character `i` is said to be **weak** if there exists another character `j` where `attackj > attacki` and `defensej > defensei`.\n\n\nReturn *the number of **weak** characters*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Stack",
            "Greedy",
            "Sorting",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** properties = [[5,5],[6,3],[3,6]]",
                "Output": "** 0",
                "Explanation": "** No character has strictly greater attack and defense than the other."
            },
            {
                "Input": "** properties = [[2,2],[3,3]]",
                "Output": "** 1",
                "Explanation": "** The first character is weak because the second character has a strictly greater attack and defense."
            },
            {
                "Input": "** properties = [[1,5],[10,4],[4,3]]",
                "Output": "** 1",
                "Explanation": "** The third character is weak because the second character has a strictly greater attack and defense."
            }
        ]
    },
    {
        "Title": "First Day Where You Have Been in All the Rooms",
        "slug": "first-day-where-you-have-been-in-all-the-rooms",
        "description": "There are `n` rooms you need to visit, labeled from `0` to `n - 1`. Each day is labeled, starting from `0`. You will go in and visit one room a day.\n\n\nInitially on day `0`, you visit room `0`. The **order** you visit the rooms for the coming days is determined by the following **rules** and a given **0-indexed** array `nextVisit` of length `n`:\n\n\n Assuming that on a day, you visit room `i`,\n if you have been in room `i` an **odd** number of times (**including** the current visit), on the **next** day you will visit a room with a **lower or equal room number** specified by `nextVisit[i]` where `0 <= nextVisit[i] <= i`;\n if you have been in room `i` an **even** number of times (**including** the current visit), on the **next** day you will visit room `(i + 1) mod n`.\n\n\nReturn *the label of the **first** day where you have been in **all** the rooms*. It can be shown that such a day exists. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nextVisit = [0,0]",
                "Output": "** 2",
                "Explanation": "**\n- On day 0, you visit room 0. The total times you have been in room 0 is 1, which is odd.\n\u00a0 On the next day you will visit room nextVisit[0] = 0\n- On day 1, you visit room 0, The total times you have been in room 0 is 2, which is even.\n\u00a0 On the next day you will visit room (0 + 1) mod 2 = 1\n- On day 2, you visit room 1. This is the first day where you have been in all the rooms."
            },
            {
                "Input": "** nextVisit = [0,0,2]",
                "Output": "** 6",
                "Explanation": "**\nYour room visiting order for each day is: [0,0,1,0,0,1,2,...].\nDay 6 is the first day where you have been in all the rooms."
            },
            {
                "Input": "** nextVisit = [0,1,2,0]",
                "Output": "** 6",
                "Explanation": "**\nYour room visiting order for each day is: [0,0,1,1,2,2,3,...].\nDay 6 is the first day where you have been in all the rooms."
            }
        ]
    },
    {
        "Title": "GCD Sort of an Array",
        "slug": "gcd-sort-of-an-array",
        "description": "You are given an integer array `nums`, and you can perform the following operation **any** number of times on `nums`:\n\n\n Swap the positions of two elements `nums[i]` and `nums[j]` if `gcd(nums[i], nums[j]) > 1` where `gcd(nums[i], nums[j])` is the **greatest common divisor** of `nums[i]` and `nums[j]`.\n\n\nReturn `true` *if it is possible to sort* `nums` *in **non-decreasing** order using the above swap method, or* `false` *otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Union Find",
            "Sorting",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [7,21,3]",
                "Output": "** true",
                "Explanation": "** We can sort [7,21,3] by performing the following operations:\n- Swap 7 and 21 because gcd(7,21) = 7. nums = [**21**,**7**,3]\n- Swap 21 and 3 because gcd(21,3) = 3. nums = [**3**,7,**21**]"
            },
            {
                "Input": "** nums = [5,2,6,2]",
                "Output": "** false",
                "Explanation": "** It is impossible to sort the array because 5 cannot be swapped with any other element."
            },
            {
                "Input": "** nums = [10,5,9,3,15]",
                "Output": "** true\nWe can sort [10,5,9,3,15] by performing the following operations:\n- Swap 10 and 15 because gcd(10,15) = 5. nums = [**15**,5,9,3,**10**]\n- Swap 15 and 3 because gcd(15,3) = 3. nums = [**3**,5,9,**15**,10]\n- Swap 10 and 15 because gcd(10,15) = 5. nums = [3,5,9,**10**,**15**]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reverse Prefix of Word",
        "slug": "reverse-prefix-of-word",
        "description": "Given a **0-indexed** string `word` and a character `ch`, **reverse** the segment of `word` that starts at index `0` and ends at the index of the **first occurrence** of `ch` (**inclusive**). If the character `ch` does not exist in `word`, do nothing.\n\n\n For example, if `word = \"abcdefd\"` and `ch = \"d\"`, then you should **reverse** the segment that starts at `0` and ends at `3` (**inclusive**). The resulting string will be `\"dcbaefd\"`.\n\n\nReturn *the resulting string*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** word = \"abcdefd\", ch = \"d\"",
                "Output": "** \"dcbaefd\"",
                "Explanation": "**\u00a0The first occurrence of \"d\" is at index 3. \nReverse the part of word from 0 to 3 (inclusive), the resulting string is \"dcbaefd\"."
            },
            {
                "Input": "** word = \"xyxzxe\", ch = \"z\"",
                "Output": "** \"zxyxxe\"",
                "Explanation": "**\u00a0The first and only occurrence of \"z\" is at index 3.\nReverse the part of word from 0 to 3 (inclusive), the resulting string is \"zxyxxe\"."
            },
            {
                "Input": "** word = \"abcd\", ch = \"z\"",
                "Output": "** \"abcd\"",
                "Explanation": "**\u00a0\"z\" does not exist in word.\nYou should not do any reverse operation, the resulting string is \"abcd\"."
            }
        ]
    },
    {
        "Title": "Number of Pairs of Interchangeable Rectangles",
        "slug": "number-of-pairs-of-interchangeable-rectangles",
        "description": "You are given `n` rectangles represented by a **0-indexed** 2D integer array `rectangles`, where `rectangles[i] = [widthi, heighti]` denotes the width and height of the `ith` rectangle.\n\n\nTwo rectangles `i` and `j` (`i < j`) are considered **interchangeable** if they have the **same** width-to-height ratio. More formally, two rectangles are **interchangeable** if `widthi/heighti == widthj/heightj` (using decimal division, not integer division).\n\n\nReturn *the **number** of pairs of **interchangeable** rectangles in* `rectangles`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Counting",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** rectangles = [[4,8],[3,6],[10,20],[15,30]]",
                "Output": "** 6",
                "Explanation": "** The following are the interchangeable pairs of rectangles by index (0-indexed):\n- Rectangle 0 with rectangle 1: 4/8 == 3/6.\n- Rectangle 0 with rectangle 2: 4/8 == 10/20.\n- Rectangle 0 with rectangle 3: 4/8 == 15/30.\n- Rectangle 1 with rectangle 2: 3/6 == 10/20.\n- Rectangle 1 with rectangle 3: 3/6 == 15/30.\n- Rectangle 2 with rectangle 3: 10/20 == 15/30."
            },
            {
                "Input": "** rectangles = [[4,5],[7,8]]",
                "Output": "** 0",
                "Explanation": "** There are no interchangeable pairs of rectangles."
            }
        ]
    },
    {
        "Title": "Maximum Product of the Length of Two Palindromic Subsequences",
        "slug": "maximum-product-of-the-length-of-two-palindromic-subsequences",
        "description": "Given a string `s`, find two **disjoint palindromic subsequences** of `s` such that the **product** of their lengths is **maximized**. The two subsequences are **disjoint** if they do not both pick a character at the same index.\n\n\nReturn *the **maximum** possible **product** of the lengths of the two palindromic subsequences*.\n\n\nA **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. A string is **palindromic** if it reads the same forward and backward.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Backtracking",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** s = \"leetcodecom\"",
                "Output": "** 9",
                "Explanation": "An optimal solution is to choose \"ete\" for the 1st subsequence and \"cdc\" for the 2nd subsequence.\nThe product of their lengths is: 3 * 3 = 9."
            }
        ]
    },
    {
        "Title": "Smallest Missing Genetic Value in Each Subtree",
        "slug": "smallest-missing-genetic-value-in-each-subtree",
        "description": "There is a **family tree** rooted at `0` consisting of `n` nodes numbered `0` to `n - 1`. You are given a **0-indexed** integer array `parents`, where `parents[i]` is the parent for node `i`. Since node `0` is the **root**, `parents[0] == -1`.\n\n\nThere are `105` genetic values, each represented by an integer in the **inclusive** range `[1, 105]`. You are given a **0-indexed** integer array `nums`, where `nums[i]` is a **distinct** genetic value for node `i`.\n\n\nReturn *an array* `ans` *of length* `n` *where* `ans[i]` *is* *the **smallest** genetic value that is **missing** from the subtree rooted at node* `i`.\n\n\nThe **subtree** rooted at a node `x` contains node `x` and all of its **descendant** nodes.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Tree",
            "Depth-First Search",
            "Union Find"
        ],
        "examples": [
            {
                "Input": "** parents = [-1,0,0,2], nums = [1,2,3,4]",
                "Output": "** [5,1,1,1]",
                "Explanation": "** The answer for each subtree is calculated as follows:\n- 0: The subtree contains nodes [0,1,2,3] with values [1,2,3,4]. 5 is the smallest missing value.\n- 1: The subtree contains only node 1 with value 2. 1 is the smallest missing value.\n- 2: The subtree contains nodes [2,3] with values [3,4]. 1 is the smallest missing value.\n- 3: The subtree contains only node 3 with value 4. 1 is the smallest missing value."
            },
            {
                "Input": "** parents = [-1,0,1,0,3,3], nums = [5,4,6,2,1,3]",
                "Output": "** [7,1,1,4,2,1]",
                "Explanation": "** The answer for each subtree is calculated as follows:\n- 0: The subtree contains nodes [0,1,2,3,4,5] with values [5,4,6,2,1,3]. 7 is the smallest missing value.\n- 1: The subtree contains nodes [1,2] with values [4,6]. 1 is the smallest missing value.\n- 2: The subtree contains only node 2 with value 6. 1 is the smallest missing value.\n- 3: The subtree contains nodes [3,4,5] with values [2,1,3]. 4 is the smallest missing value.\n- 4: The subtree contains only node 4 with value 1. 2 is the smallest missing value.\n- 5: The subtree contains only node 5 with value 3. 1 is the smallest missing value."
            }
        ]
    },
    {
        "Title": "Count Number of Pairs With Absolute Difference K",
        "slug": "count-number-of-pairs-with-absolute-difference-k",
        "description": "Given an integer array `nums` and an integer `k`, return *the number of pairs* `(i, j)` *where* `i < j` *such that* `|nums[i] - nums[j]| == k`.\n\n\nThe value of `|x|` is defined as:\n\n\n `x` if `x >= 0`.\n `-x` if `x < 0`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,2,1], k = 1",
                "Output": "** 4",
                "Explanation": "** The pairs with an absolute difference of 1 are:\n- [**1**,**2**,2,1]\n- [**1**,2,**2**,1]\n- [1,**2**,2,**1**]\n- [1,2,**2**,**1**]"
            },
            {
                "Input": "** nums = [1,3], k = 3",
                "Output": "** 0",
                "Explanation": "** There are no pairs with an absolute difference of 3."
            },
            {
                "Input": "** nums = [3,2,1,5,4], k = 2",
                "Output": "** 3",
                "Explanation": "** The pairs with an absolute difference of 2 are:\n- [**3**,2,**1**,5,4]\n- [**3**,2,1,**5**,4]\n- [3,**2**,1,5,**4**]"
            }
        ]
    },
    {
        "Title": "Find Original Array From Doubled Array",
        "slug": "find-original-array-from-doubled-array",
        "description": "An integer array `original` is transformed into a **doubled** array `changed` by appending **twice the value** of every element in `original`, and then randomly **shuffling** the resulting array.\n\n\nGiven an array `changed`, return `original` *if* `changed` *is a **doubled** array. If* `changed` *is not a **doubled** array, return an empty array. The elements in* `original` *may be returned in **any** order*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** changed = [1,3,4,2,6,8]",
                "Output": "** [1,3,4]",
                "Explanation": "** One possible original array could be [1,3,4]:\n- Twice the value of 1 is 1 * 2 = 2.\n- Twice the value of 3 is 3 * 2 = 6.\n- Twice the value of 4 is 4 * 2 = 8.\nOther original arrays could be [4,3,1] or [3,1,4]."
            },
            {
                "Input": "** changed = [6,3,0,1]",
                "Output": "** []",
                "Explanation": "** changed is not a doubled array."
            },
            {
                "Input": "** changed = [1]",
                "Output": "** []",
                "Explanation": "** changed is not a doubled array."
            }
        ]
    },
    {
        "Title": "Maximum Earnings From Taxi",
        "slug": "maximum-earnings-from-taxi",
        "description": "There are `n` points on a road you are driving your taxi on. The `n` points on the road are labeled from `1` to `n` in the direction you are going, and you want to drive from point `1` to point `n` to make money by picking up passengers. You cannot change the direction of the taxi.\n\n\nThe passengers are represented by a **0-indexed** 2D integer array `rides`, where `rides[i] = [starti, endi, tipi]` denotes the `ith` passenger requesting a ride from point `starti` to point `endi` who is willing to give a `tipi` dollar tip.\n\n\nFor **each** passenger `i` you pick up, you **earn** `endi - starti + tipi` dollars. You may only drive **at most one** passenger at a time.\n\n\nGiven `n` and `rides`, return *the **maximum** number of dollars you can earn by picking up the passengers optimally.\n\n\nNote:** You may drop off a passenger and pick up a different passenger at the same point.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Dynamic Programming",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** n = 5, rides = [[2,5,4],[1,5,1]]",
                "Output": "** 7",
                "Explanation": "** We can pick up passenger 0 to earn 5 - 2 + 4 = 7 dollars."
            },
            {
                "Input": "** n = 20, rides = [[1,6,1],[3,10,2],[10,12,3],[11,12,2],[12,15,2],[13,18,1]]",
                "Output": "** 20",
                "Explanation": "** We will pick up the following passengers:\n- Drive passenger 1 from point 3 to point 10 for a profit of 10 - 3 + 2 = 9 dollars.\n- Drive passenger 2 from point 10 to point 12 for a profit of 12 - 10 + 3 = 5 dollars.\n- Drive passenger 5 from point 13 to point 18 for a profit of 18 - 13 + 1 = 6 dollars.\nWe earn 9 + 5 + 6 = 20 dollars in total."
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Make Array Continuous",
        "slug": "minimum-number-of-operations-to-make-array-continuous",
        "description": "You are given an integer array `nums`. In one operation, you can replace **any** element in `nums` with **any** integer.\n\n\n`nums` is considered **continuous** if both of the following conditions are fulfilled:\n\n\n All elements in `nums` are **unique**.\n The difference between the **maximum** element and the **minimum** element in `nums` equals `nums.length - 1`.\n\n\nFor example, `nums = [4, 2, 5, 3]` is **continuous**, but `nums = [1, 2, 3, 5, 6]` is **not continuous**.\n\n\nReturn *the **minimum** number of operations to make* `nums`***continuous***.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [4,2,5,3]",
                "Output": "** 0",
                "Explanation": "**\u00a0nums is already continuous."
            },
            {
                "Input": "** nums = [1,2,3,5,6]",
                "Output": "** 1",
                "Explanation": "**\u00a0One possible solution is to change the last element to 4.\nThe resulting array is [1,2,3,5,4], which is continuous."
            },
            {
                "Input": "** nums = [1,10,100,1000]",
                "Output": "** 3",
                "Explanation": "**\u00a0One possible solution is to:\n- Change the second element to 2.\n- Change the third element to 3.\n- Change the fourth element to 4.\nThe resulting array is [1,2,3,4], which is continuous."
            }
        ]
    },
    {
        "Title": "Final Value of Variable After Performing Operations",
        "slug": "final-value-of-variable-after-performing-operations",
        "description": "There is a programming language with only **four** operations and **one** variable `X`:\n\n\n `++X` and `X++` **increments** the value of the variable `X` by `1`.\n `--X` and `X--` **decrements** the value of the variable `X` by `1`.\n\n\nInitially, the value of `X` is `0`.\n\n\nGiven an array of strings `operations` containing a list of operations, return *the **final** value of* `X` *after performing all the operations*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "String",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** operations = [\"--X\",\"X++\",\"X++\"]",
                "Output": "** 1",
                "Explanation": "**\u00a0The operations are performed as follows:\nInitially, X = 0.\n--X: X is decremented by 1, X =  0 - 1 = -1.\nX++: X is incremented by 1, X = -1 + 1 =  0.\nX++: X is incremented by 1, X =  0 + 1 =  1."
            },
            {
                "Input": "** operations = [\"++X\",\"++X\",\"X++\"]",
                "Output": "** 3",
                "Explanation": "** The operations are performed as follows:\nInitially, X = 0.\n++X: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\nX++: X is incremented by 1, X = 2 + 1 = 3."
            },
            {
                "Input": "** operations = [\"X++\",\"++X\",\"--X\",\"X--\"]",
                "Output": "** 0",
                "Explanation": "**\u00a0The operations are performed as follows:\nInitially, X = 0.\nX++: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\n--X: X is decremented by 1, X = 2 - 1 = 1.\nX--: X is decremented by 1, X = 1 - 1 = 0."
            }
        ]
    },
    {
        "Title": "Sum of Beauty in the Array",
        "slug": "sum-of-beauty-in-the-array",
        "description": "You are given a **0-indexed** integer array `nums`. For each index `i` (`1 <= i <= nums.length - 2`) the **beauty** of `nums[i]` equals:\n\n\n `2`, if `nums[j] < nums[i] < nums[k]`, for **all** `0 <= j < i` and for **all** `i < k <= nums.length - 1`.\n `1`, if `nums[i - 1] < nums[i] < nums[i + 1]`, and the previous condition is not satisfied.\n `0`, if none of the previous conditions holds.\n\n\nReturn *the **sum of beauty** of all* `nums[i]` *where* `1 <= i <= nums.length - 2`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 2",
                "Explanation": "** For each index i in the range 1 <= i <= 1:\n- The beauty of nums[1] equals 2."
            },
            {
                "Input": "** nums = [2,4,6,4]",
                "Output": "** 1",
                "Explanation": "** For each index i in the range 1 <= i <= 2:\n- The beauty of nums[1] equals 1.\n- The beauty of nums[2] equals 0."
            },
            {
                "Input": "** nums = [3,2,1]",
                "Output": "** 0",
                "Explanation": "** For each index i in the range 1 <= i <= 1:\n- The beauty of nums[1] equals 0."
            }
        ]
    },
    {
        "Title": "Detect Squares",
        "slug": "detect-squares",
        "description": "You are given a stream of points on the X-Y plane. Design an algorithm that:\n\n\n **Adds** new points from the stream into a data structure. **Duplicate** points are allowed and should be treated as different points.\n Given a query point, **counts** the number of ways to choose three points from the data structure such that the three points and the query point form an **axis-aligned square** with **positive area**.\n\n\nAn **axis-aligned square** is a square whose edges are all the same length and are either parallel or perpendicular to the x-axis and y-axis.\n\n\nImplement the `DetectSquares` class:\n\n\n `DetectSquares()` Initializes the object with an empty data structure.\n `void add(int[] point)` Adds a new point `point = [x, y]` to the data structure.\n `int count(int[] point)` Counts the number of ways to form **axis-aligned squares** with point `point = [x, y]` as described above.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Design",
            "Counting"
        ],
        "examples": [
            {
                "Input": "[\"DetectSquares\", \"add\", \"add\", \"add\", \"count\", \"count\", \"add\", \"count\"]\n[[], [[3, 10]], [[11, 2]], [[3, 2]], [[11, 10]], [[14, 8]], [[11, 2]], [[11, 10]]]",
                "Output": "[null, null, null, null, 1, 0, null, 2]",
                "Explanation": "DetectSquares detectSquares = new DetectSquares();\ndetectSquares.add([3, 10]);\ndetectSquares.add([11, 2]);\ndetectSquares.add([3, 2]);\ndetectSquares.count([11, 10]); // return 1. You can choose:\n                               //   - The first, second, and third points\ndetectSquares.count([14, 8]);  // return 0. The query point cannot form a square with any points in the data structure.\ndetectSquares.add([11, 2]);    // Adding duplicate points is allowed.\ndetectSquares.count([11, 10]); // return 2. You can choose:\n                               //   - The first, second, and third points\n                               //   - The first, third, and fourth points"
            }
        ]
    },
    {
        "Title": "Longest Subsequence Repeated k Times",
        "slug": "longest-subsequence-repeated-k-times",
        "description": "You are given a string `s` of length `n`, and an integer `k`. You are tasked to find the **longest subsequence repeated** `k` times in string `s`.\n\n\nA **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\n\nA subsequence `seq` is **repeated** `k` times in the string `s` if `seq * k` is a subsequence of `s`, where `seq * k` represents a string constructed by concatenating `seq` `k` times.\n\n\n For example, `\"bba\"` is repeated `2` times in the string `\"bababcba\"`, because the string `\"bbabba\"`, constructed by concatenating `\"bba\"` `2` times, is a subsequence of the string `\"**b**a**bab**c**ba**\"`.\n\n\nReturn *the **longest subsequence repeated*** `k` *times in string* `s`*. If multiple such subsequences are found, return the **lexicographically largest** one. If there is no such subsequence, return an **empty** string*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Backtracking",
            "Greedy",
            "Counting",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** s = \"letsleetcode\", k = 2",
                "Output": "** \"let\"",
                "Explanation": "** There are two longest subsequences repeated 2 times: \"let\" and \"ete\".\n\"let\" is the lexicographically largest one."
            }
        ]
    },
    {
        "Title": "Maximum Difference Between Increasing Elements",
        "slug": "maximum-difference-between-increasing-elements",
        "description": "Given a **0-indexed** integer array `nums` of size `n`, find the **maximum difference** between `nums[i]` and `nums[j]` (i.e., `nums[j] - nums[i]`), such that `0 <= i < j < n` and `nums[i] < nums[j]`.\n\n\nReturn *the **maximum difference**.* If no such `i` and `j` exists, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [7,**1**,**5**,4]",
                "Output": "** 4",
                "Explanation": "**\nThe maximum difference occurs with i = 1 and j = 2, nums[j] - nums[i] = 5 - 1 = 4.\nNote that with i = 1 and j = 0, the difference nums[j] - nums[i] = 7 - 1 = 6, but i > j, so it is not valid."
            },
            {
                "Input": "** nums = [9,4,3,2]",
                "Output": "** -1",
                "Explanation": "**\nThere is no i and j such that i < j and nums[i] < nums[j]."
            },
            {
                "Input": "** nums = [**1**,5,2,**10**]",
                "Output": "** 9",
                "Explanation": "**\nThe maximum difference occurs with i = 0 and j = 3, nums[j] - nums[i] = 10 - 1 = 9."
            }
        ]
    },
    {
        "Title": "Grid Game",
        "slug": "grid-game",
        "description": "You are given a **0-indexed** 2D array `grid` of size `2 x n`, where `grid[r][c]` represents the number of points at position `(r, c)` on the matrix. Two robots are playing a game on this matrix.\n\n\nBoth robots initially start at `(0, 0)` and want to reach `(1, n-1)`. Each robot may only move to the **right** (`(r, c)` to `(r, c + 1)`) or **down** (`(r, c)` to `(r + 1, c)`).\n\n\nAt the start of the game, the **first** robot moves from `(0, 0)` to `(1, n-1)`, collecting all the points from the cells on its path. For all cells `(r, c)` traversed on the path, `grid[r][c]` is set to `0`. Then, the **second** robot moves from `(0, 0)` to `(1, n-1)`, collecting the points on its path. Note that their paths may intersect with one another.\n\n\nThe **first** robot wants to **minimize** the number of points collected by the **second** robot. In contrast, the **second** robot wants to **maximize** the number of points it collects. If both robots play **optimally**, return *the **number of points** collected by the **second** robot.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** grid = [[2,5,4],[1,5,1]]",
                "Output": "** 4",
                "Explanation": "** The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.\nThe cells visited by the first robot are set to 0.\nThe second robot will collect 0 + 0 + 4 + 0 = 4 points."
            },
            {
                "Input": "** grid = [[3,3,1],[8,5,2]]",
                "Output": "** 4",
                "Explanation": "** The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.\nThe cells visited by the first robot are set to 0.\nThe second robot will collect 0 + 3 + 1 + 0 = 4 points."
            },
            {
                "Input": "** grid = [[1,3,1,15],[1,3,3,1]]",
                "Output": "** 7",
                "Explanation": "** The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.\nThe cells visited by the first robot are set to 0.\nThe second robot will collect 0 + 1 + 3 + 3 + 0 = 7 points."
            }
        ]
    },
    {
        "Title": "Check if Word Can Be Placed In Crossword",
        "slug": "check-if-word-can-be-placed-in-crossword",
        "description": "You are given an `m x n` matrix `board`, representing the **current** state of a crossword puzzle. The crossword contains lowercase English letters (from solved words), `' '` to represent any **empty** cells, and `'#'` to represent any **blocked** cells.\n\n\nA word can be placed **horizontally** (left to right **or** right to left) or **vertically** (top to bottom **or** bottom to top) in the board if:\n\n\n It does not occupy a cell containing the character `'#'`.\n The cell each letter is placed in must either be `' '` (empty) or **match** the letter already on the `board`.\n There must not be any empty cells `' '` or other lowercase letters **directly left or right**of the word if the word was placed **horizontally**.\n There must not be any empty cells `' '` or other lowercase letters **directly above or below** the word if the word was placed **vertically**.\n\n\nGiven a string `word`, return `true` *if* `word` *can be placed in* `board`*, or* `false` ***otherwise***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** board = [[\"#\", \" \", \"#\"], [\" \", \" \", \"#\"], [\"#\", \"c\", \" \"]], word = \"abc\"",
                "Output": "** true",
                "Explanation": "** The word \"abc\" can be placed as shown above (top to bottom)."
            },
            {
                "Input": "** board = [[\" \", \"#\", \"a\"], [\" \", \"#\", \"c\"], [\" \", \"#\", \"a\"]], word = \"ac\"",
                "Output": "** false",
                "Explanation": "** It is impossible to place the word because there will always be a space/letter above or below it."
            },
            {
                "Input": "** board = [[\"#\", \" \", \"#\"], [\" \", \" \", \"#\"], [\"#\", \" \", \"c\"]], word = \"ca\"",
                "Output": "** true",
                "Explanation": "** The word \"ca\" can be placed as shown above (right to left)."
            }
        ]
    },
    {
        "Title": "The Score of Students Solving Math Expression",
        "slug": "the-score-of-students-solving-math-expression",
        "description": "You are given a string `s` that contains digits `0-9`, addition symbols `'+'`, and multiplication symbols `'*'` **only**, representing a **valid** math expression of **single digit numbers** (e.g., `3+5*2`). This expression was given to `n` elementary school students. The students were instructed to get the answer of the expression by following this **order of operations**:\n\n\n1. Compute **multiplication**, reading from **left to right**; Then,\n2. Compute **addition**, reading from **left to right**.\n\n\nYou are given an integer array `answers` of length `n`, which are the submitted answers of the students in no particular order. You are asked to grade the `answers`, by following these **rules**:\n\n\n If an answer **equals** the correct answer of the expression, this student will be rewarded `5` points;\n Otherwise, if the answer **could be interpreted** as if the student applied the operators **in the wrong order** but had **correct arithmetic**, this student will be rewarded `2` points;\n Otherwise, this student will be rewarded `0` points.\n\n\nReturn *the sum of the points of the students*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "String",
            "Dynamic Programming",
            "Stack",
            "Memoization"
        ],
        "examples": [
            {
                "Input": "** s = \"7+3*1*2\", answers = [20,13,42]",
                "Output": "** 7",
                "Explanation": "** As illustrated above, the correct answer of the expression is 13, therefore one student is rewarded 5 points: [20,**13**,42]\nA student might have applied the operators in this wrong order: ((7+3)*1)*2 = 20. Therefore one student is rewarded 2 points: [**20**,13,42]\nThe points for the students are: [2,5,0]. The sum of the points is 2+5+0=7."
            }
        ]
    },
    {
        "Title": "Convert 1D Array Into 2D Array",
        "slug": "convert-1d-array-into-2d-array",
        "description": "You are given a **0-indexed** 1-dimensional (1D) integer array `original`, and two integers, `m` and `n`. You are tasked with creating a 2-dimensional (2D) array with  `m` rows and `n` columns using **all** the elements from `original`.\n\n\nThe elements from indices `0` to `n - 1` (**inclusive**) of `original` should form the first row of the constructed 2D array, the elements from indices `n` to `2 * n - 1` (**inclusive**) should form the second row of the constructed 2D array, and so on.\n\n\nReturn *an* `m x n` *2D array constructed according to the above procedure, or an empty 2D array if it is impossible*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** original = [1,2,3,4], m = 2, n = 2",
                "Output": "** [[1,2],[3,4]]",
                "Explanation": "** The constructed 2D array should contain 2 rows and 2 columns.\nThe first group of n=2 elements in original, [1,2], becomes the first row in the constructed 2D array.\nThe second group of n=2 elements in original, [3,4], becomes the second row in the constructed 2D array."
            }
        ]
    },
    {
        "Title": "Number of Pairs of Strings With Concatenation Equal to Target",
        "slug": "number-of-pairs-of-strings-with-concatenation-equal-to-target",
        "description": "Given an array of **digit** strings `nums` and a **digit** string `target`, return *the number of pairs of indices* `(i, j)` *(where* `i != j`*) such that the **concatenation** of* `nums[i] + nums[j]` *equals* `target`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [\"777\",\"7\",\"77\",\"77\"], target = \"7777\"",
                "Output": "** 4",
                "Explanation": "** Valid pairs are:\n- (0, 1): \"777\" + \"7\"\n- (1, 0): \"7\" + \"777\"\n- (2, 3): \"77\" + \"77\"\n- (3, 2): \"77\" + \"77\""
            },
            {
                "Input": "** nums = [\"123\",\"4\",\"12\",\"34\"], target = \"1234\"",
                "Output": "** 2",
                "Explanation": "** Valid pairs are:\n- (0, 1): \"123\" + \"4\"\n- (2, 3): \"12\" + \"34\""
            },
            {
                "Input": "** nums = [\"1\",\"1\",\"1\"], target = \"11\"",
                "Output": "** 6",
                "Explanation": "** Valid pairs are:\n- (0, 1): \"1\" + \"1\"\n- (1, 0): \"1\" + \"1\"\n- (0, 2): \"1\" + \"1\"\n- (2, 0): \"1\" + \"1\"\n- (1, 2): \"1\" + \"1\"\n- (2, 1): \"1\" + \"1\""
            }
        ]
    },
    {
        "Title": "Maximize the Confusion of an Exam",
        "slug": "maximize-the-confusion-of-an-exam",
        "description": "A teacher is writing a test with `n` true/false questions, with `'T'` denoting true and `'F'` denoting false. He wants to confuse the students by **maximizing** the number of **consecutive** questions with the **same** answer (multiple trues or multiple falses in a row).\n\n\nYou are given a string `answerKey`, where `answerKey[i]` is the original answer to the `ith` question. In addition, you are given an integer `k`, the maximum number of times you may perform the following operation:\n\n\n Change the answer key for any question to `'T'` or `'F'` (i.e., set `answerKey[i]` to `'T'` or `'F'`).\n\n\nReturn *the **maximum** number of consecutive* `'T'`s or `'F'`s *in the answer key after performing the operation at most* `k` *times*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Binary Search",
            "Sliding Window",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** answerKey = \"TTFF\", k = 2",
                "Output": "** 4",
                "Explanation": "** We can replace both the 'F's with 'T's to make answerKey = \"TTTT\".\nThere are four consecutive 'T's."
            },
            {
                "Input": "** answerKey = \"TFFT\", k = 1",
                "Output": "** 3",
                "Explanation": "** We can replace the first 'T' with an 'F' to make answerKey = \"FFFT\".\nAlternatively, we can replace the second 'T' with an 'F' to make answerKey = \"TFFF\".\nIn both cases, there are three consecutive 'F's."
            },
            {
                "Input": "** answerKey = \"TTFTTFTT\", k = 1",
                "Output": "** 5",
                "Explanation": "** We can replace the first 'F' to make answerKey = \"TTTTTFTT\"\nAlternatively, we can replace the second 'F' to make answerKey = \"TTFTTTTT\". \nIn both cases, there are five consecutive 'T's."
            }
        ]
    },
    {
        "Title": "Maximum Number of Ways to Partition an Array",
        "slug": "maximum-number-of-ways-to-partition-an-array",
        "description": "You are given a **0-indexed** integer array `nums` of length `n`. The number of ways to **partition** `nums` is the number of `pivot` indices that satisfy both conditions:\n\n\n `1 <= pivot < n`\n `nums[0] + nums[1] + ... + nums[pivot - 1] == nums[pivot] + nums[pivot + 1] + ... + nums[n - 1]`\n\n\nYou are also given an integer `k`. You can choose to change the value of **one** element of `nums` to `k`, or to leave the array **unchanged**.\n\n\nReturn *the **maximum** possible number of ways to **partition*** `nums` *to satisfy both conditions after changing **at most** one element*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting",
            "Enumeration",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [2,-1,2], k = 3",
                "Output": "** 1",
                "Explanation": "** One optimal approach is to change nums[0] to k. The array becomes [**3**,-1,2].\nThere is one way to partition the array:\n- For pivot = 2, we have the partition [3,-1 | 2]: 3 + -1 == 2."
            },
            {
                "Input": "** nums = [0,0,0], k = 1",
                "Output": "** 2",
                "Explanation": "** The optimal approach is to leave the array unchanged.\nThere are two ways to partition the array:\n- For pivot = 1, we have the partition [0 | 0,0]: 0 == 0 + 0.\n- For pivot = 2, we have the partition [0,0 | 0]: 0 + 0 == 0."
            },
            {
                "Input": "** nums = [22,4,-25,-20,-15,15,-16,7,19,-10,0,-13,-14], k = -33",
                "Output": "** 4",
                "Explanation": "** One optimal approach is to change nums[2] to k. The array becomes [22,4,**-33**,-20,-15,15,-16,7,19,-10,0,-13,-14].\nThere are four ways to partition the array."
            }
        ]
    },
    {
        "Title": "Minimum Moves to Convert String",
        "slug": "minimum-moves-to-convert-string",
        "description": "You are given a string `s` consisting of `n` characters which are either `'X'` or `'O'`.\n\n\nA **move** is defined as selecting **three** **consecutive characters** of `s` and converting them to `'O'`. Note that if a move is applied to the character `'O'`, it will stay the **same**.\n\n\nReturn *the **minimum** number of moves required so that all the characters of* `s` *are converted to* `'O'`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"XXX\"",
                "Output": "** 1",
                "Explanation": "** XXX -> OOO\nWe select all the 3 characters and convert them in one move."
            },
            {
                "Input": "** s = \"XXOX\"",
                "Output": "** 2",
                "Explanation": "** XXOX -> OOOX -> OOOO\nWe select the first 3 characters in the first move, and convert them to 'O'.\nThen we select the last 3 characters and convert them so that the final string contains all 'O's."
            },
            {
                "Input": "** s = \"OOOO\"",
                "Output": "** 0",
                "Explanation": "** There are no 'X's in s to convert."
            }
        ]
    },
    {
        "Title": "Find Missing Observations",
        "slug": "find-missing-observations",
        "description": "You have observations of `n + m` **6-sided** dice rolls with each face numbered from `1` to `6`. `n` of the observations went missing, and you only have the observations of `m` rolls. Fortunately, you have also calculated the **average value** of the `n + m` rolls.\n\n\nYou are given an integer array `rolls` of length `m` where `rolls[i]` is the value of the `ith` observation. You are also given the two integers `mean` and `n`.\n\n\nReturn *an array of length* `n` *containing the missing observations such that the **average value** of the* `n + m` *rolls is **exactly*** `mean`. If there are multiple valid answers, return *any of them*. If no such array exists, return *an empty array*.\n\n\nThe **average value** of a set of `k` numbers is the sum of the numbers divided by `k`.\n\n\nNote that `mean` is an integer, so the sum of the `n + m` rolls should be divisible by `n + m`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** rolls = [3,2,4,3], mean = 4, n = 2",
                "Output": "** [6,6]",
                "Explanation": "** The mean of all n + m rolls is (3 + 2 + 4 + 3 + 6 + 6) / 6 = 4."
            },
            {
                "Input": "** rolls = [1,5,6], mean = 3, n = 4",
                "Output": "** [2,3,2,2]",
                "Explanation": "** The mean of all n + m rolls is (1 + 5 + 6 + 2 + 3 + 2 + 2) / 7 = 3."
            },
            {
                "Input": "** rolls = [1,2,3,4], mean = 6, n = 4",
                "Output": "** []",
                "Explanation": "** It is impossible for the mean to be 6 no matter what the 4 missing rolls are."
            }
        ]
    },
    {
        "Title": "Stone Game IX",
        "slug": "stone-game-ix",
        "description": "Alice and Bob continue their games with stones. There is a row of n stones, and each stone has an associated value. You are given an integer array `stones`, where `stones[i]` is the **value** of the `ith` stone.\n\n\nAlice and Bob take turns, with **Alice** starting first. On each turn, the player may remove any stone from `stones`. The player who removes a stone **loses** if the **sum** of the values of **all removed stones** is divisible by `3`. Bob will win automatically if there are no remaining stones (even if it is Alice's turn).\n\n\nAssuming both players play **optimally**, return `true` *if Alice wins and* `false` *if Bob wins*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Greedy",
            "Counting",
            "Game Theory"
        ],
        "examples": [
            {
                "Input": "** stones = [2,1]",
                "Output": "** true",
                "Explanation": "**\u00a0The game will be played as follows:\n- Turn 1: Alice can remove either stone.\n- Turn 2: Bob removes the remaining stone. \nThe sum of the removed stones is 1 + 2 = 3 and is divisible by 3. Therefore, Bob loses and Alice wins the game."
            },
            {
                "Input": "** stones = [2]",
                "Output": "** false",
                "Explanation": "**\u00a0Alice will remove the only stone, and the sum of the values on the removed stones is 2. \nSince all the stones are removed and the sum of values is not divisible by 3, Bob wins the game."
            },
            {
                "Input": "** stones = [5,1,2,4,3]",
                "Output": "** false",
                "Explanation": "** Bob will always win. One possible way for Bob to win is shown below:\n- Turn 1: Alice can remove the second stone with value 1. Sum of removed stones = 1.\n- Turn 2: Bob removes the fifth stone with value 3. Sum of removed stones = 1 + 3 = 4.\n- Turn 3: Alices removes the fourth stone with value 4. Sum of removed stones = 1 + 3 + 4 = 8.\n- Turn 4: Bob removes the third stone with value 2. Sum of removed stones = 1 + 3 + 4 + 2 = 10.\n- Turn 5: Alice removes the first stone with value 5. Sum of removed stones = 1 + 3 + 4 + 2 + 5 = 15.\nAlice loses the game because the sum of the removed stones (15) is divisible by 3. Bob wins the game."
            }
        ]
    },
    {
        "Title": "Smallest K-Length Subsequence With Occurrences of a Letter",
        "slug": "smallest-k-length-subsequence-with-occurrences-of-a-letter",
        "description": "You are given a string `s`, an integer `k`, a letter `letter`, and an integer `repetition`.\n\n\nReturn *the **lexicographically smallest** subsequence of* `s` *of length* `k` *that has the letter* `letter` *appear **at least*** `repetition` *times*. The test cases are generated so that the `letter` appears in `s` **at least** `repetition` times.\n\n\nA **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\n\nA string `a` is **lexicographically smaller** than a string `b` if in the first position where `a` and `b` differ, string `a` has a letter that appears earlier in the alphabet than the corresponding letter in `b`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Stack",
            "Greedy",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** s = \"leetcode\", k = 4, letter = \"e\", repetition = 2",
                "Output": "** \"ecde\"",
                "Explanation": "** \"ecde\" is the lexicographically smallest subsequence of length 4 that has the letter \"e\" appear at least 2 times."
            }
        ]
    },
    {
        "Title": "Two Out of Three",
        "slug": "two-out-of-three",
        "description": "Given three integer arrays `nums1`, `nums2`, and `nums3`, return *a **distinct** array containing all the values that are present in **at least two** out of the three arrays. You may return the values in **any** order*.\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]",
                "Output": "** [3,2]",
                "Explanation": "** The values that are present in at least two arrays are:\n- 3, in all three arrays.\n- 2, in nums1 and nums2."
            },
            {
                "Input": "** nums1 = [3,1], nums2 = [2,3], nums3 = [1,2]",
                "Output": "** [2,3,1]",
                "Explanation": "** The values that are present in at least two arrays are:\n- 2, in nums2 and nums3.\n- 3, in nums1 and nums2.\n- 1, in nums1 and nums3."
            },
            {
                "Input": "** nums1 = [1,2,2], nums2 = [4,3,3], nums3 = [5]",
                "Output": "** []",
                "Explanation": "** No value is present in at least two arrays."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Make a Uni-Value Grid",
        "slug": "minimum-operations-to-make-a-uni-value-grid",
        "description": "You are given a 2D integer `grid` of size `m x n` and an integer `x`. In one operation, you can **add** `x` to or **subtract** `x` from any element in the `grid`.\n\n\nA **uni-value grid** is a grid where all the elements of it are equal.\n\n\nReturn *the **minimum** number of operations to make the grid **uni-value***. If it is not possible, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Sorting",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[2,4],[6,8]], x = 2",
                "Output": "** 4",
                "Explanation": "** We can make every element equal to 4 by doing the following: \n- Add x to 2 once.\n- Subtract x from 6 once.\n- Subtract x from 8 twice.\nA total of 4 operations were used."
            },
            {
                "Input": "** grid = [[1,5],[2,3]], x = 1",
                "Output": "** 5",
                "Explanation": "** We can make every element equal to 3."
            },
            {
                "Input": "** grid = [[1,2],[3,4]], x = 2",
                "Output": "** -1",
                "Explanation": "** It is impossible to make every element equal."
            }
        ]
    },
    {
        "Title": "Stock Price Fluctuation ",
        "slug": "stock-price-fluctuation",
        "description": "You are given a stream of **records** about a particular stock. Each record contains a **timestamp** and the corresponding **price** of the stock at that timestamp.\n\n\nUnfortunately due to the volatile nature of the stock market, the records do not come in order. Even worse, some records may be incorrect. Another record with the same timestamp may appear later in the stream **correcting** the price of the previous wrong record.\n\n\nDesign an algorithm that:\n\n\n **Updates** the price of the stock at a particular timestamp, **correcting** the price from any previous records at the timestamp.\n Finds the **latest price** of the stock based on the current records. The **latest price** is the price at the latest timestamp recorded.\n Finds the **maximum price** the stock has been based on the current records.\n Finds the **minimum price** the stock has been based on the current records.\n\n\nImplement the `StockPrice` class:\n\n\n `StockPrice()` Initializes the object with no price records.\n `void update(int timestamp, int price)` Updates the `price` of the stock at the given `timestamp`.\n `int current()` Returns the **latest price** of the stock.\n `int maximum()` Returns the **maximum price** of the stock.\n `int minimum()` Returns the **minimum price** of the stock.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Design",
            "Heap (Priority Queue)",
            "Data Stream",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "[\"StockPrice\", \"update\", \"update\", \"current\", \"maximum\", \"update\", \"maximum\", \"update\", \"minimum\"]\n[[], [1, 10], [2, 5], [], [], [1, 3], [], [4, 2], []]",
                "Output": "[null, null, null, 5, 10, null, 5, null, 2]",
                "Explanation": "StockPrice stockPrice = new StockPrice();\nstockPrice.update(1, 10); // Timestamps are [1] with corresponding prices [10].\nstockPrice.update(2, 5);  // Timestamps are [1,2] with corresponding prices [10,5].\nstockPrice.current();     // return 5, the latest timestamp is 2 with the price being 5.\nstockPrice.maximum();     // return 10, the maximum price is 10 at timestamp 1.\nstockPrice.update(1, 3);  // The previous timestamp 1 had the wrong price, so it is updated to 3.\n                          // Timestamps are [1,2] with corresponding prices [3,5].\nstockPrice.maximum();     // return 5, the maximum price is 5 after the correction.\nstockPrice.update(4, 2);  // Timestamps are [1,2,4] with corresponding prices [3,5,2].\nstockPrice.minimum();     // return 2, the minimum price is 2 at timestamp 4."
            }
        ]
    },
    {
        "Title": "Partition Array Into Two Arrays to Minimize Sum Difference",
        "slug": "partition-array-into-two-arrays-to-minimize-sum-difference",
        "description": "You are given an integer array `nums` of `2 * n` integers. You need to partition `nums` into **two** arrays of length `n` to **minimize the absolute difference** of the **sums** of the arrays. To partition `nums`, put each element of `nums` into **one** of the two arrays.\n\n\nReturn *the **minimum** possible absolute difference*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Dynamic Programming",
            "Bit Manipulation",
            "Ordered Set",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** nums = [3,9,7,3]",
                "Output": "** 2",
                "Explanation": "** One optimal partition is: [3,9] and [7,3].\nThe absolute difference between the sums of the arrays is abs((3 + 9) - (7 + 3)) = 2."
            },
            {
                "Input": "** nums = [2,-1,0,4,-2,-9]",
                "Output": "** 0",
                "Explanation": "** One optimal partition is: [2,4,-9] and [-1,0,-2].\nThe absolute difference between the sums of the arrays is abs((2 + 4 + -9) - (-1 + 0 + -2)) = 0."
            }
        ]
    },
    {
        "Title": "Minimum Number of Moves to Seat Everyone",
        "slug": "minimum-number-of-moves-to-seat-everyone",
        "description": "There are `n` seats and `n` students in a room. You are given an array `seats` of length `n`, where `seats[i]` is the position of the `ith` seat. You are also given the array `students` of length `n`, where `students[j]` is the position of the `jth` student.\n\n\nYou may perform the following move any number of times:\n\n\n Increase or decrease the position of the `ith` student by `1` (i.e., moving the `ith` student from position\u00a0`x`\u00a0to `x + 1` or `x - 1`)\n\n\nReturn *the **minimum number of moves** required to move each student to a seat* *such that no two students are in the same seat.\n\n\nNote that there may be **multiple** seats or students in the **same** position at the beginning.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** seats = [3,1,5], students = [2,7,4]",
                "Output": "** 4",
                "Explanation": "** The students are moved as follows:\n- The first student is moved from from position 2 to position 1 using 1 move.\n- The second student is moved from from position 7 to position 5 using 2 moves.\n- The third student is moved from from position 4 to position 3 using 1 move.\nIn total, 1 + 2 + 1 = 4 moves were used."
            },
            {
                "Input": "** seats = [4,1,5,9], students = [1,3,2,6]",
                "Output": "** 7",
                "Explanation": "** The students are moved as follows:\n- The first student is not moved.\n- The second student is moved from from position 3 to position 4 using 1 move.\n- The third student is moved from from position 2 to position 5 using 3 moves.\n- The fourth student is moved from from position 6 to position 9 using 3 moves.\nIn total, 0 + 1 + 3 + 3 = 7 moves were used."
            },
            {
                "Input": "** seats = [2,2,6,6], students = [1,3,2,6]",
                "Output": "** 4",
                "Explanation": "** Note that there are two seats at position 2 and two seats at position 6.\nThe students are moved as follows:\n- The first student is moved from from position 1 to position 2 using 1 move.\n- The second student is moved from from position 3 to position 6 using 3 moves.\n- The third student is not moved.\n- The fourth student is not moved.\nIn total, 1 + 3 + 0 + 0 = 4 moves were used."
            }
        ]
    },
    {
        "Title": "Remove Colored Pieces if Both Neighbors are the Same Color",
        "slug": "remove-colored-pieces-if-both-neighbors-are-the-same-color",
        "description": "There are `n` pieces arranged in a line, and each piece is colored either by `'A'` or by `'B'`. You are given a string `colors` of length `n` where `colors[i]` is the color of the `ith` piece.\n\n\nAlice and Bob are playing a game where they take **alternating turns** removing pieces from the line. In this game, Alice moves **first**.\n\n\n Alice is only allowed to remove a piece colored `'A'` if **both its neighbors** are also colored `'A'`. She is **not allowed** to remove pieces that are colored `'B'`.\n Bob is only allowed to remove a piece colored `'B'` if **both its neighbors** are also colored `'B'`. He is **not allowed** to remove pieces that are colored `'A'`.\n Alice and Bob **cannot** remove pieces from the edge of the line.\n If a player cannot make a move on their turn, that player **loses** and the other player **wins**.\n\n\nAssuming Alice and Bob play optimally, return `true` *if Alice wins, or return* `false` *if Bob wins*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "String",
            "Greedy",
            "Game Theory"
        ],
        "examples": [
            {
                "Input": "** colors = \"AAABABB\"",
                "Output": "** true",
                "Explanation": "**\nAAABABB -> AABABB\nAlice moves first.\nShe removes the second 'A' from the left since that is the only 'A' whose neighbors are both 'A'.\n\nNow it's Bob's turn.\nBob cannot make a move on his turn since there are no 'B's whose neighbors are both 'B'.\nThus, Alice wins, so return true."
            },
            {
                "Input": "** colors = \"AA\"",
                "Output": "** false",
                "Explanation": "**\nAlice has her turn first.\nThere are only two 'A's and both are on the edge of the line, so she cannot move on her turn.\nThus, Bob wins, so return false."
            },
            {
                "Input": "** colors = \"ABBBBBBBAAA\"",
                "Output": "** false",
                "Explanation": "**\nABBBBBBBAAA -> ABBBBBBBAA\nAlice moves first.\nHer only option is to remove the second to last 'A' from the right.\n\nABBBBBBBAA -> ABBBBBBAA\nNext is Bob's turn.\nHe has many options for which 'B' piece to remove. He can pick any.\n\nOn Alice's second turn, she has no more pieces that she can remove.\nThus, Bob wins, so return false."
            }
        ]
    },
    {
        "Title": "The Time When the Network Becomes Idle",
        "slug": "the-time-when-the-network-becomes-idle",
        "description": "There is a network of `n` servers, labeled from `0` to `n - 1`. You are given a 2D integer array `edges`, where `edges[i] = [ui, vi]` indicates there is a message channel between servers `ui` and `vi`, and they can pass **any** number of messages to **each other** directly in **one** second. You are also given a **0-indexed** integer array `patience` of length `n`.\n\n\nAll servers are **connected**, i.e., a message can be passed from one server to any other server(s) directly or indirectly through the message channels.\n\n\nThe server labeled `0` is the **master** server. The rest are **data** servers. Each data server needs to send its message to the master server for processing and wait for a reply. Messages move between servers **optimally**, so every message takes the **least amount of time** to arrive at the master server. The master server will process all newly arrived messages **instantly** and send a reply to the originating server via the **reversed path** the message had gone through.\n\n\nAt the beginning of second `0`, each data server sends its message to be processed. Starting from second `1`, at the **beginning** of **every** second, each data server will check if it has received a reply to the message it sent (including any newly arrived replies) from the master server:\n\n\n If it has not, it will **resend** the message periodically. The data server `i` will resend the message every `patience[i]` second(s), i.e., the data server `i` will resend the message if `patience[i]` second(s) have **elapsed** since the **last** time the message was sent from this server.\n Otherwise, **no more resending** will occur from this server.\n\n\nThe network becomes **idle** when there are **no** messages passing between servers or arriving at servers.\n\n\nReturn *the **earliest second** starting from which the network becomes **idle***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Breadth-First Search",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** edges = [[0,1],[1,2]], patience = [0,2,1]",
                "Output": "** 8",
                "Explanation": "**\nAt (the beginning of) second 0,\n- Data server 1 sends its message (denoted 1A) to the master server.\n- Data server 2 sends its message (denoted 2A) to the master server.\n\nAt second 1,\n- Message 1A arrives at the master server. Master server processes message 1A instantly and sends a reply 1A back.\n- Server 1 has not received any reply. 1 second (1 < patience[1] = 2) elapsed since this server has sent the message, therefore it does not resend the message.\n- Server 2 has not received any reply. 1 second (1 == patience[2] = 1) elapsed since this server has sent the message, therefore it resends the message (denoted 2B).\n\nAt second 2,\n- The reply 1A arrives at server 1. No more resending will occur from server 1.\n- Message 2A arrives at the master server. Master server processes message 2A instantly and sends a reply 2A back.\n- Server 2 resends the message (denoted 2C).\n...\nAt second 4,\n- The reply 2A arrives at server 2. No more resending will occur from server 2.\n...\nAt second 7, reply 2D arrives at server 2.\n\nStarting from the beginning of the second 8, there are no messages passing between servers or arriving at servers.\nThis is the time when the network becomes idle."
            },
            {
                "Input": "** edges = [[0,1],[0,2],[1,2]], patience = [0,10,10]",
                "Output": "** 3",
                "Explanation": "** Data servers 1 and 2 receive a reply back at the beginning of second 2.\nFrom the beginning of the second 3, the network becomes idle."
            }
        ]
    },
    {
        "Title": "Kth Smallest Product of Two Sorted Arrays",
        "slug": "kth-smallest-product-of-two-sorted-arrays",
        "description": "Given two **sorted 0-indexed** integer arrays `nums1` and `nums2` as well as an integer `k`, return *the* `kth` *(**1-based**) smallest product of* `nums1[i] * nums2[j]` *where* `0 <= i < nums1.length` *and* `0 <= j < nums2.length`.\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** nums1 = [2,5], nums2 = [3,4], k = 2",
                "Output": "** 8",
                "Explanation": "** The 2 smallest products are:\n- nums1[0] * nums2[0] = 2 * 3 = 6\n- nums1[0] * nums2[1] = 2 * 4 = 8\nThe 2nd smallest product is 8."
            },
            {
                "Input": "** nums1 = [-4,-2,0,3], nums2 = [2,4], k = 6",
                "Output": "** 0",
                "Explanation": "** The 6 smallest products are:\n- nums1[0] * nums2[1] = (-4) * 4 = -16\n- nums1[0] * nums2[0] = (-4) * 2 = -8\n- nums1[1] * nums2[1] = (-2) * 4 = -8\n- nums1[1] * nums2[0] = (-2) * 2 = -4\n- nums1[2] * nums2[0] = 0 * 2 = 0\n- nums1[2] * nums2[1] = 0 * 4 = 0\nThe 6th smallest product is 0."
            },
            {
                "Input": "** nums1 = [-2,-1,0,1,2], nums2 = [-3,-1,2,4,5], k = 3",
                "Output": "** -6",
                "Explanation": "** The 3 smallest products are:\n- nums1[0] * nums2[4] = (-2) * 5 = -10\n- nums1[0] * nums2[3] = (-2) * 4 = -8\n- nums1[4] * nums2[0] = 2 * (-3) = -6\nThe 3rd smallest product is -6."
            }
        ]
    },
    {
        "Title": "Check if Numbers Are Ascending in a Sentence",
        "slug": "check-if-numbers-are-ascending-in-a-sentence",
        "description": "A sentence is a list of **tokens** separated by a **single** space with no leading or trailing spaces. Every token is either a **positive number** consisting of digits `0-9` with no leading zeros, or a **word** consisting of lowercase English letters.\n\n\n For example, `\"a puppy has 2 eyes 4 legs\"` is a sentence with seven tokens: `\"2\"` and `\"4\"` are numbers and the other tokens such as `\"puppy\"` are words.\n\n\nGiven a string `s` representing a sentence, you need to check if **all** the numbers in `s` are **strictly increasing** from left to right (i.e., other than the last number, **each** number is **strictly smaller** than the number on its **right** in `s`).\n\n\nReturn `true` *if so, or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"1 box has 3 blue 4 red 6 green and 12 yellow marbles\"",
                "Output": "** true",
                "Explanation": "** The numbers in s are: 1, 3, 4, 6, 12.\nThey are strictly increasing from left to right: 1 < 3 < 4 < 6 < 12."
            },
            {
                "Input": "** s = \"sunset is at 7 51 pm overnight lows will be in the low 50 and 60 s\"",
                "Output": "** false",
                "Explanation": "** The numbers in s are: 7, **51**, **50**, 60. They are not strictly increasing."
            }
        ]
    },
    {
        "Title": "Simple Bank System",
        "slug": "simple-bank-system",
        "description": "You have been tasked with writing a program for a popular bank that will automate all its incoming transactions (transfer, deposit, and withdraw). The bank has `n` accounts numbered from `1` to `n`. The initial balance of each account is stored in a **0-indexed** integer array `balance`, with the `(i + 1)th` account having an initial balance of `balance[i]`.\n\n\nExecute all the **valid** transactions. A transaction is **valid** if:\n\n\n The given account number(s) are between `1` and `n`, and\n The amount of money withdrawn or transferred from is **less than or equal** to the balance of the account.\n\n\nImplement the `Bank` class:\n\n\n `Bank(long[] balance)` Initializes the object with the **0-indexed** integer array `balance`.\n `boolean transfer(int account1, int account2, long money)` Transfers `money` dollars from the account numbered `account1` to the account numbered `account2`. Return `true` if the transaction was successful, `false` otherwise.\n `boolean deposit(int account, long money)` Deposit `money` dollars into the account numbered `account`. Return `true` if the transaction was successful, `false` otherwise.\n `boolean withdraw(int account, long money)` Withdraw `money` dollars from the account numbered `account`. Return `true` if the transaction was successful, `false` otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Design",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "[\"Bank\", \"withdraw\", \"transfer\", \"deposit\", \"transfer\", \"withdraw\"]\n[[[10, 100, 20, 50, 30]], [3, 10], [5, 1, 20], [5, 20], [3, 4, 15], [10, 50]]",
                "Output": "[null, true, true, true, false, false]",
                "Explanation": "Bank bank = new Bank([10, 100, 20, 50, 30]);\nbank.withdraw(3, 10);    // return true, account 3 has a balance of $20, so it is valid to withdraw $10.\n                         // Account 3 has $20 - $10 = $10.\nbank.transfer(5, 1, 20); // return true, account 5 has a balance of $30, so it is valid to transfer $20.\n                         // Account 5 has $30 - $20 = $10, and account 1 has $10 + $20 = $30.\nbank.deposit(5, 20);     // return true, it is valid to deposit $20 to account 5.\n                         // Account 5 has $10 + $20 = $30.\nbank.transfer(3, 4, 15); // return false, the current balance of account 3 is $10,\n                         // so it is invalid to transfer $15 from it.\nbank.withdraw(10, 50);   // return false, it is invalid because account 10 does not exist."
            }
        ]
    },
    {
        "Title": "Count Number of Maximum Bitwise-OR Subsets",
        "slug": "count-number-of-maximum-bitwise-or-subsets",
        "description": "Given an integer array `nums`, find the **maximum** possible **bitwise OR** of a subset of `nums` and return *the **number of different non-empty subsets** with the maximum bitwise OR*.\n\n\nAn array `a` is a **subset** of an array `b` if `a` can be obtained from `b` by deleting some (possibly zero) elements of `b`. Two subsets are considered **different** if the indices of the elements chosen are different.\n\n\nThe bitwise OR of an array `a` is equal to `a[0] **OR** a[1] **OR** ... **OR** a[a.length - 1]` (**0-indexed**).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Backtracking",
            "Bit Manipulation",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** nums = [3,1]",
                "Output": "** 2",
                "Explanation": "** The maximum possible bitwise OR of a subset is 3. There are 2 subsets with a bitwise OR of 3:\n- [3]\n- [3,1]"
            },
            {
                "Input": "** nums = [2,2,2]",
                "Output": "** 7",
                "Explanation": "** All non-empty subsets of [2,2,2] have a bitwise OR of 2. There are 23 - 1 = 7 total subsets."
            },
            {
                "Input": "** nums = [3,2,1,5]",
                "Output": "** 6",
                "Explanation": "** The maximum possible bitwise OR of a subset is 7. There are 6 subsets with a bitwise OR of 7:\n- [3,5]\n- [3,1,5]\n- [3,2,5]\n- [3,2,1,5]\n- [2,5]\n- [2,1,5]"
            }
        ]
    },
    {
        "Title": "Second Minimum Time to Reach Destination",
        "slug": "second-minimum-time-to-reach-destination",
        "description": "A city is represented as a **bi-directional connected** graph with `n` vertices where each vertex is labeled from `1` to `n` (**inclusive**). The edges in the graph are represented as a 2D integer array `edges`, where each `edges[i] = [ui, vi]` denotes a bi-directional edge between vertex `ui` and vertex `vi`. Every vertex pair is connected by **at most one** edge, and no vertex has an edge to itself. The time taken to traverse any edge is `time` minutes.\n\n\nEach vertex has a traffic signal which changes its color from **green** to **red** and vice versa every\u00a0`change` minutes. All signals change **at the same time**. You can enter a vertex at **any time**, but can leave a vertex **only when the signal is green**. You **cannot wait** at a vertex if the signal is **green**.\n\n\nThe **second minimum value** is defined as the smallest value **strictly larger** than the minimum value.\n\n\n For example the second minimum value of `[2, 3, 4]` is `3`, and the second minimum value of `[2, 2, 4]` is `4`.\n\n\nGiven `n`, `edges`, `time`, and `change`, return *the **second minimum time** it will take to go from vertex* `1` *to vertex* `n`.\n\n\nNotes:\n\n\n You can go through any vertex **any** number of times, **including** `1` and `n`.\n You can assume that when the journey **starts**, all signals have just turned **green**.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Breadth-First Search",
            "Graph",
            "Shortest Path"
        ],
        "examples": [
            {
                "Input": "** n = 5, edges = [[1,2],[1,3],[1,4],[3,4],[4,5]], time = 3, change = 5",
                "Output": "** 13",
                "Explanation": "**\nThe figure on the left shows the given graph.\nThe blue path in the figure on the right is the minimum time path.\nThe time taken is:\n- Start at 1, time elapsed=0\n- 1 -> 4: 3 minutes, time elapsed=3\n- 4 -> 5: 3 minutes, time elapsed=6\nHence the minimum time needed is 6 minutes.\n\nThe red path shows the path to get the second minimum time.\n- Start at 1, time elapsed=0\n- 1 -> 3: 3 minutes, time elapsed=3\n- 3 -> 4: 3 minutes, time elapsed=6\n- Wait at 4 for 4 minutes, time elapsed=10\n- 4 -> 5: 3 minutes, time elapsed=13\nHence the second minimum time is 13 minutes."
            },
            {
                "Input": "** n = 2, edges = [[1,2]], time = 3, change = 2",
                "Output": "** 11",
                "Explanation": "**\nThe minimum time path is 1 -> 2 with time = 3 minutes.\nThe second minimum time path is 1 -> 2 -> 1 -> 2 with time = 11 minutes."
            }
        ]
    },
    {
        "Title": "Number of Valid Words in a Sentence",
        "slug": "number-of-valid-words-in-a-sentence",
        "description": "A sentence consists of lowercase letters (`'a'` to `'z'`), digits (`'0'` to `'9'`), hyphens (`'-'`), punctuation marks (`'!'`, `'.'`, and `','`), and spaces (`' '`) only. Each sentence can be broken down into **one or more tokens** separated by one or more spaces `' '`.\n\n\nA token is a valid word if **all three** of the following are true:\n\n\n It only contains lowercase letters, hyphens, and/or punctuation (**no** digits).\n There is **at most one** hyphen `'-'`. If present, it **must** be surrounded by lowercase characters (`\"a-b\"` is valid, but `\"-ab\"` and `\"ab-\"` are not valid).\n There is **at most one** punctuation mark. If present, it **must** be at the **end** of the token (`\"ab,\"`, `\"cd!\"`, and `\".\"` are valid, but `\"a!b\"` and `\"c.,\"` are not valid).\n\n\nExamples of valid words include `\"a-b.\"`, `\"afad\"`, `\"ba-c\"`, `\"a!\"`, and `\"!\"`.\n\n\nGiven a string `sentence`, return *the **number** of valid words in* `sentence`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** sentence = \"cat and  dog\"",
                "Output": "** 3",
                "Explanation": "** The valid words in the sentence are \"cat\", \"and\", and \"dog\"."
            },
            {
                "Input": "** sentence = \"!this  1-s b8d!\"",
                "Output": "** 0",
                "Explanation": "** There are no valid words in the sentence.\n\"!this\" is invalid because it starts with a punctuation mark.\n\"1-s\" and \"b8d\" are invalid because they contain digits."
            },
            {
                "Input": "** sentence = \"alice and  bob are playing stone-game10\"",
                "Output": "** 5",
                "Explanation": "** The valid words in the sentence are \"alice\", \"and\", \"bob\", \"are\", and \"playing\".\n\"stone-game10\" is invalid because it contains digits."
            }
        ]
    },
    {
        "Title": "Next Greater Numerically Balanced Number",
        "slug": "next-greater-numerically-balanced-number",
        "description": "An integer `x` is **numerically balanced** if for every digit `d` in the number `x`, there are **exactly** `d` occurrences of that digit in `x`.\n\n\nGiven an integer `n`, return *the **smallest numerically balanced** number **strictly greater** than* `n`*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Backtracking",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** 22",
                "Explanation": "** \n22 is numerically balanced since:\n- The digit 2 occurs 2 times. \nIt is also the smallest numerically balanced number strictly greater than 1."
            },
            {
                "Input": "** n = 1000",
                "Output": "** 1333",
                "Explanation": "** \n1333 is numerically balanced since:\n- The digit 1 occurs 1 time.\n- The digit 3 occurs 3 times. \nIt is also the smallest numerically balanced number strictly greater than 1000.\nNote that 1022 cannot be the answer because 0 appeared more than 0 times."
            },
            {
                "Input": "** n = 3000",
                "Output": "** 3133",
                "Explanation": "** \n3133 is numerically balanced since:\n- The digit 1 occurs 1 time.\n- The digit 3 occurs 3 times.\nIt is also the smallest numerically balanced number strictly greater than 3000."
            }
        ]
    },
    {
        "Title": "Count Nodes With the Highest Score",
        "slug": "count-nodes-with-the-highest-score",
        "description": "There is a **binary** tree rooted at `0` consisting of `n` nodes. The nodes are labeled from `0` to `n - 1`. You are given a **0-indexed** integer array `parents` representing the tree, where `parents[i]` is the parent of node `i`. Since node `0` is the root, `parents[0] == -1`.\n\n\nEach node has a **score**. To find the score of a node, consider if the node and the edges connected to it were **removed**. The tree would become one or more **non-empty** subtrees. The **size** of a subtree is the number of the nodes in it. The **score** of the node is the **product of the sizes** of all those subtrees.\n\n\nReturn *the **number** of nodes that have the **highest score***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** parents = [-1,2,0,2,0]",
                "Output": "** 3",
                "Explanation": "**\n- The score of node 0 is: 3 * 1 = 3\n- The score of node 1 is: 4 = 4\n- The score of node 2 is: 1 * 1 * 2 = 2\n- The score of node 3 is: 4 = 4\n- The score of node 4 is: 4 = 4\nThe highest score is 4, and three nodes (node 1, node 3, and node 4) have the highest score."
            },
            {
                "Input": "** parents = [-1,2,0]",
                "Output": "** 2",
                "Explanation": "**\n- The score of node 0 is: 2 = 2\n- The score of node 1 is: 2 = 2\n- The score of node 2 is: 1 * 1 = 1\nThe highest score is 2, and two nodes (node 0 and node 1) have the highest score."
            }
        ]
    },
    {
        "Title": "Kth Distinct String in an Array",
        "slug": "kth-distinct-string-in-an-array",
        "description": "A **distinct string** is a string that is present only **once** in an array.\n\n\nGiven an array of strings `arr`, and an integer `k`, return *the* `kth` ***distinct string** present in* `arr`. If there are **fewer** than `k` distinct strings, return *an **empty string*** `\"\"`.\n\n\nNote that the strings are considered in the **order in which they appear** in the array.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** arr = [\"d\",\"b\",\"c\",\"b\",\"c\",\"a\"], k = 2",
                "Output": "** \"a\"",
                "Explanation": "**\nThe only distinct strings in arr are \"d\" and \"a\".\n\"d\" appears 1st, so it is the 1st distinct string.\n\"a\" appears 2nd, so it is the 2nd distinct string.\nSince k == 2, \"a\" is returned."
            },
            {
                "Input": "** arr = [\"aaa\",\"aa\",\"a\"], k = 1",
                "Output": "** \"aaa\"",
                "Explanation": "**\nAll strings in arr are distinct, so the 1st string \"aaa\" is returned."
            },
            {
                "Input": "** arr = [\"a\",\"b\",\"a\"], k = 3",
                "Output": "** \"\"",
                "Explanation": "**\nThe only distinct string is \"b\". Since there are fewer than 3 distinct strings, we return an empty string \"\"."
            }
        ]
    },
    {
        "Title": "Two Best Non-Overlapping Events",
        "slug": "two-best-non-overlapping-events",
        "description": "You are given a **0-indexed** 2D integer array of `events` where `events[i] = [startTimei, endTimei, valuei]`. The `ith` event starts at `startTimei`and ends at `endTimei`, and if you attend this event, you will receive a value of `valuei`. You can choose **at most** **two** **non-overlapping** events to attend such that the sum of their values is **maximized**.\n\n\nReturn *this **maximum** sum.\n\n\nNote that the start time and end time is **inclusive**: that is, you cannot attend two events where one of them starts and the other ends at the same time. More specifically, if you attend an event with end time `t`, the next event must start at or after `t + 1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Dynamic Programming",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** events = [[1,3,2],[4,5,2],[2,4,3]]",
                "Output": "** 4",
                "Explanation": "** Choose the green events, 0 and 1 for a sum of 2 + 2 = 4."
            },
            {
                "Input": "** events = [[1,3,2],[4,5,2],[1,5,5]]",
                "Output": "** 5",
                "Explanation": "** Choose event 2 for a sum of 5."
            },
            {
                "Input": "** events = [[1,5,3],[1,5,1],[6,6,5]]",
                "Output": "** 8",
                "Explanation": "** Choose events 0 and 2 for a sum of 3 + 5 = 8."
            }
        ]
    },
    {
        "Title": "Plates Between Candles",
        "slug": "plates-between-candles",
        "description": "There is a long table with a line of plates and candles arranged on top of it. You are given a **0-indexed** string `s` consisting of characters `'*'` and `'|'` only, where a `'*'` represents a **plate** and a `'|'` represents a **candle**.\n\n\nYou are also given a **0-indexed** 2D integer array `queries` where `queries[i] = [lefti, righti]` denotes the **substring** `s[lefti...righti]` (**inclusive**). For each query, you need to find the **number** of plates **between candles** that are **in the substring**. A plate is considered **between candles** if there is at least one candle to its left **and** at least one candle to its right **in the substring**.\n\n\n For example, `s = \"||**||**|*\"`, and a query `[3, 8]` denotes the substring `\"*||**\\*\\***|\"`. The number of plates between candles in this substring is `2`, as each of the two plates has at least one candle **in the substring** to its left **and** right.\n\n\nReturn *an integer array* `answer` *where* `answer[i]` *is the answer to the* `ith` *query*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Binary Search",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** s = \"**|**|***|\", queries = [[2,5],[5,9]]",
                "Output": "** [2,3]",
                "Explanation": "**\n- queries[0] has two plates between candles.\n- queries[1] has three plates between candles."
            },
            {
                "Input": "** s = \"***|**|*****|**||**|*\", queries = [[1,17],[4,5],[14,17],[5,11],[15,16]]",
                "Output": "** [9,0,0,0,0]",
                "Explanation": "**\n- queries[0] has nine plates between candles.\n- The other queries have zero plates between candles."
            }
        ]
    },
    {
        "Title": "Number of Valid Move Combinations On Chessboard",
        "slug": "number-of-valid-move-combinations-on-chessboard",
        "description": "There is an `8 x 8` chessboard containing `n` pieces (rooks, queens, or bishops). You are given a string array `pieces` of length `n`, where `pieces[i]` describes the type (rook, queen, or bishop) of the `ith` piece. In addition, you are given a 2D integer array `positions` also of length `n`, where `positions[i] = [ri, ci]` indicates that the `ith` piece is currently at the **1-based** coordinate `(ri, ci)` on the chessboard.\n\n\nWhen making a **move** for a piece, you choose a **destination** square that the piece will travel toward and stop on.\n\n\n A rook can only travel **horizontally or vertically** from `(r, c)` to the direction of `(r+1, c)`, `(r-1, c)`, `(r, c+1)`, or `(r, c-1)`.\n A queen can only travel **horizontally, vertically, or diagonally** from `(r, c)` to the direction of `(r+1, c)`, `(r-1, c)`, `(r, c+1)`, `(r, c-1)`, `(r+1, c+1)`, `(r+1, c-1)`, `(r-1, c+1)`, `(r-1, c-1)`.\n A bishop can only travel **diagonally** from `(r, c)` to the direction of `(r+1, c+1)`, `(r+1, c-1)`, `(r-1, c+1)`, `(r-1, c-1)`.\n\n\nYou must make a **move** for every piece on the board simultaneously. A **move combination** consists of all the **moves** performed on all the given pieces. Every second, each piece will instantaneously travel **one square** towards their destination if they are not already at it. All pieces start traveling at the `0th` second. A move combination is **invalid** if, at a given time, **two or more** pieces occupy the same square.\n\n\nReturn *the number of **valid** move combinations*\u200b\u200b\u200b\u200b\u200b.\n\n\nNotes:\n\n\n **No two pieces** will start in the **same** square.\n You may choose the square a piece is already on as its **destination**.\n If two pieces are **directly adjacent** to each other, it is valid for them to **move past each other** and swap positions in one second.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "String",
            "Backtracking",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** pieces = [\"rook\"], positions = [[1,1]]",
                "Output": "** 15",
                "Explanation": "** The image above shows the possible squares the piece can move to."
            },
            {
                "Input": "** pieces = [\"queen\"], positions = [[1,1]]",
                "Output": "** 22",
                "Explanation": "** The image above shows the possible squares the piece can move to."
            },
            {
                "Input": "** pieces = [\"bishop\"], positions = [[4,3]]",
                "Output": "** 12",
                "Explanation": "** The image above shows the possible squares the piece can move to."
            }
        ]
    },
    {
        "Title": "Smallest Index With Equal Value",
        "slug": "smallest-index-with-equal-value",
        "description": "Given a **0-indexed** integer array `nums`, return *the **smallest** index* `i` *of* `nums` *such that* `i mod 10 == nums[i]`*, or* `-1` *if such index does not exist*.\n\n\n`x mod y` denotes the **remainder** when `x` is divided by `y`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [0,1,2]",
                "Output": "** 0",
                "Explanation": "** \ni=0: 0 mod 10 = 0 == nums[0].\ni=1: 1 mod 10 = 1 == nums[1].\ni=2: 2 mod 10 = 2 == nums[2].\nAll indices have i mod 10 == nums[i], so we return the smallest index 0."
            },
            {
                "Input": "** nums = [4,3,2,1]",
                "Output": "** 2",
                "Explanation": "** \ni=0: 0 mod 10 = 0 != nums[0].\ni=1: 1 mod 10 = 1 != nums[1].\ni=2: 2 mod 10 = 2 == nums[2].\ni=3: 3 mod 10 = 3 != nums[3].\n2 is the only index which has i mod 10 == nums[i]."
            },
            {
                "Input": "** nums = [1,2,3,4,5,6,7,8,9,0]",
                "Output": "** -1",
                "Explanation": "** No index satisfies i mod 10 == nums[i]."
            }
        ]
    },
    {
        "Title": "Find the Minimum and Maximum Number of Nodes Between Critical Points",
        "slug": "find-the-minimum-and-maximum-number-of-nodes-between-critical-points",
        "description": "A **critical point** in a linked list is defined as **either** a **local maxima** or a **local minima**.\n\n\nA node is a **local maxima** if the current node has a value **strictly greater** than the previous node and the next node.\n\n\nA node is a **local minima** if the current node has a value **strictly smaller** than the previous node and the next node.\n\n\nNote that a node can only be a local maxima/minima if there exists **both** a previous node and a next node.\n\n\nGiven a linked list `head`, return *an array of length 2 containing* `[minDistance, maxDistance]` *where* `minDistance` *is the **minimum distance** between **any\u00a0two distinct** critical points and* `maxDistance` *is the **maximum distance** between **any\u00a0two distinct** critical points. If there are **fewer** than two critical points, return* `[-1, -1]`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List"
        ],
        "examples": [
            {
                "Input": "** head = [3,1]",
                "Output": "** [-1,-1]",
                "Explanation": "** There are no critical points in [3,1]."
            },
            {
                "Input": "** head = [5,3,1,2,5,1,2]",
                "Output": "** [1,3]",
                "Explanation": "** There are three critical points:\n- [5,3,**1**,2,5,1,2]: The third node is a local minima because 1 is less than 3 and 2.\n- [5,3,1,2,**5**,1,2]: The fifth node is a local maxima because 5 is greater than 2 and 1.\n- [5,3,1,2,5,**1**,2]: The sixth node is a local minima because 1 is less than 5 and 2.\nThe minimum distance is between the fifth and the sixth node. minDistance = 6 - 5 = 1.\nThe maximum distance is between the third and the sixth node. maxDistance = 6 - 3 = 3."
            },
            {
                "Input": "** head = [1,3,2,2,3,2,2,2,7]",
                "Output": "** [3,3]",
                "Explanation": "** There are two critical points:\n- [1,**3**,2,2,3,2,2,2,7]: The second node is a local maxima because 3 is greater than 1 and 2.\n- [1,3,2,2,**3**,2,2,2,7]: The fifth node is a local maxima because 3 is greater than 2 and 2.\nBoth the minimum and maximum distances are between the second and the fifth node.\nThus, minDistance and maxDistance is 5 - 2 = 3.\nNote that the last node is not considered a local maxima because it does not have a next node."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Convert Number",
        "slug": "minimum-operations-to-convert-number",
        "description": "You are given a **0-indexed** integer array `nums` containing **distinct** numbers, an integer `start`, and an integer `goal`. There is an integer `x` that is initially set to `start`, and you want to perform operations on `x` such that it is converted to `goal`. You can perform the following operation repeatedly on the number `x`:\n\n\nIf `0 <= x <= 1000`, then for any index `i` in the array (`0 <= i < nums.length`), you can set `x` to any of the following:\n\n\n `x + nums[i]`\n `x - nums[i]`\n `x ^ nums[i]` (bitwise-XOR)\n\n\nNote that you can use each `nums[i]` any number of times in any order. Operations that set `x` to be out of the range `0 <= x <= 1000` are valid, but no more operations can be done afterward.\n\n\nReturn *the **minimum** number of operations needed to convert* `x = start` *into* `goal`*, and* `-1` *if it is not possible*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Breadth-First Search"
        ],
        "examples": [
            {
                "Input": "** nums = [2,4,12], start = 2, goal = 12",
                "Output": "** 2",
                "Explanation": "** We can go from 2 \u2192 14 \u2192 12 with the following 2 operations.\n- 2 + 12 = 14\n- 14 - 2 = 12"
            },
            {
                "Input": "** nums = [3,5,7], start = 0, goal = -4",
                "Output": "** 2",
                "Explanation": "** We can go from 0 \u2192 3 \u2192 -4 with the following 2 operations. \n- 0 + 3 = 3\n- 3 - 7 = -4\nNote that the last operation sets x out of the range 0 <= x <= 1000, which is valid."
            },
            {
                "Input": "** nums = [2,8,16], start = 0, goal = 1",
                "Output": "** -1",
                "Explanation": "** There is no way to convert 0 into 1."
            }
        ]
    },
    {
        "Title": "Check if an Original String Exists Given Two Encoded Strings",
        "slug": "check-if-an-original-string-exists-given-two-encoded-strings",
        "description": "An original string, consisting of lowercase English letters, can be encoded by the following steps:\n\n\n Arbitrarily **split** it into a **sequence** of some number of **non-empty** substrings.\n Arbitrarily choose some elements (possibly none) of the sequence, and **replace** each with **its length** (as a numeric string).\n **Concatenate** the sequence as the encoded string.\n\n\nFor example, **one way** to encode an original string `\"abcdefghijklmnop\"` might be:\n\n\n Split it as a sequence: `[\"ab\", \"cdefghijklmn\", \"o\", \"p\"]`.\n Choose the second and third elements to be replaced by their lengths, respectively. The sequence becomes `[\"ab\", \"12\", \"1\", \"p\"]`.\n Concatenate the elements of the sequence to get the encoded string: `\"ab121p\"`.\n\n\nGiven two encoded strings `s1` and `s2`, consisting of lowercase English letters and digits `1-9` (inclusive), return `true` *if there exists an original string that could be encoded as **both*** `s1` *and* `s2`*. Otherwise, return* `false`.\n\n\nNote**: The test cases are generated such that the number of consecutive digits in `s1` and `s2` does not exceed `3`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s1 = \"internationalization\", s2 = \"i18n\"",
                "Output": "** true",
                "Explanation": "** It is possible that \"internationalization\" was the original string.\n- \"internationalization\" \n  -> Split:       [\"internationalization\"]\n  -> Do not replace any element\n  -> Concatenate:  \"internationalization\", which is s1.\n- \"internationalization\"\n  -> Split:       [\"i\", \"nternationalizatio\", \"n\"]\n  -> Replace:     [\"i\", \"18\",                 \"n\"]\n  -> Concatenate:  \"i18n\", which is s2"
            },
            {
                "Input": "** s1 = \"l123e\", s2 = \"44\"",
                "Output": "** true",
                "Explanation": "** It is possible that \"leetcode\" was the original string.\n- \"leetcode\" \n  -> Split:      [\"l\", \"e\", \"et\", \"cod\", \"e\"]\n  -> Replace:    [\"l\", \"1\", \"2\",  \"3\",   \"e\"]\n  -> Concatenate: \"l123e\", which is s1.\n- \"leetcode\" \n  -> Split:      [\"leet\", \"code\"]\n  -> Replace:    [\"4\",    \"4\"]\n  -> Concatenate: \"44\", which is s2."
            },
            {
                "Input": "** s1 = \"a5b\", s2 = \"c5b\"",
                "Output": "** false",
                "Explanation": "** It is impossible.\n- The original string encoded as s1 must start with the letter 'a'.\n- The original string encoded as s2 must start with the letter 'c'."
            }
        ]
    },
    {
        "Title": "Count Vowel Substrings of a String",
        "slug": "count-vowel-substrings-of-a-string",
        "description": "A **substring** is a contiguous (non-empty) sequence of characters within a string.\n\n\nA **vowel substring** is a substring that **only** consists of vowels (`'a'`, `'e'`, `'i'`, `'o'`, and `'u'`) and has **all five** vowels present in it.\n\n\nGiven a string `word`, return *the number of **vowel substrings** in* `word`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** word = \"aeiouu\"",
                "Output": "** 2",
                "Explanation": "** The vowel substrings of word are as follows (underlined):\n- \"**aeiou**u\"\n- \"**aeiouu**\""
            },
            {
                "Input": "** word = \"unicornarihan\"",
                "Output": "** 0",
                "Explanation": "** Not all 5 vowels are present, so there are no vowel substrings."
            },
            {
                "Input": "** word = \"cuaieuouac\"",
                "Output": "** 7",
                "Explanation": "** The vowel substrings of word are as follows (underlined):\n- \"c**uaieuo**uac\"\n- \"c**uaieuou**ac\"\n- \"c**uaieuoua**c\"\n- \"cu**aieuo**uac\"\n- \"cu**aieuou**ac\"\n- \"cu**aieuoua**c\"\n- \"cua**ieuoua**c\""
            }
        ]
    },
    {
        "Title": "Vowels of All Substrings",
        "slug": "vowels-of-all-substrings",
        "description": "Given a string `word`, return *the **sum of the number of vowels** (*`'a'`, `'e'`*,* `'i'`*,* `'o'`*, and* `'u'`*)* *in every substring of* `word`.\n\n\nA **substring** is a contiguous (non-empty) sequence of characters within a string.\n\n\nNote:** Due to the large constraints, the answer may not fit in a signed 32-bit integer. Please be careful during the calculations.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "String",
            "Dynamic Programming",
            "Combinatorics"
        ],
        "examples": [
            {
                "Input": "** word = \"aba\"",
                "Output": "** 6",
                "Explanation": "** \nAll possible substrings are: \"a\", \"ab\", \"aba\", \"b\", \"ba\", and \"a\".\n- \"b\" has 0 vowels in it\n- \"a\", \"ab\", \"ba\", and \"a\" have 1 vowel each\n- \"aba\" has 2 vowels in it\nHence, the total sum of vowels = 0 + 1 + 1 + 1 + 1 + 2 = 6."
            },
            {
                "Input": "** word = \"abc\"",
                "Output": "** 3",
                "Explanation": "** \nAll possible substrings are: \"a\", \"ab\", \"abc\", \"b\", \"bc\", and \"c\".\n- \"a\", \"ab\", and \"abc\" have 1 vowel each\n- \"b\", \"bc\", and \"c\" have 0 vowels each\nHence, the total sum of vowels = 1 + 1 + 1 + 0 + 0 + 0 = 3."
            },
            {
                "Input": "** word = \"ltcd\"",
                "Output": "** 0",
                "Explanation": "** There are no vowels in any substring of \"ltcd\"."
            }
        ]
    },
    {
        "Title": "Minimized Maximum of Products Distributed to Any Store",
        "slug": "minimized-maximum-of-products-distributed-to-any-store",
        "description": "You are given an integer `n` indicating there are `n` specialty retail stores. There are `m` product types of varying amounts, which are given as a **0-indexed** integer array `quantities`, where `quantities[i]` represents the number of products of the `ith` product type.\n\n\nYou need to distribute **all products** to the retail stores following these rules:\n\n\n A store can only be given **at most one product type** but can be given **any** amount of it.\n After distribution, each store will have been given some number of products (possibly `0`). Let `x` represent the maximum number of products given to any store. You want `x` to be as small as possible, i.e., you want to **minimize** the **maximum** number of products that are given to any store.\n\n\nReturn *the minimum possible* `x`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** n = 6, quantities = [11,6]",
                "Output": "** 3",
                "Explanation": "** One optimal way is:\n- The 11 products of type 0 are distributed to the first four stores in these amounts: 2, 3, 3, 3\n- The 6 products of type 1 are distributed to the other two stores in these amounts: 3, 3\nThe maximum number of products given to any store is max(2, 3, 3, 3, 3, 3) = 3."
            },
            {
                "Input": "** n = 7, quantities = [15,10,10]",
                "Output": "** 5",
                "Explanation": "** One optimal way is:\n- The 15 products of type 0 are distributed to the first three stores in these amounts: 5, 5, 5\n- The 10 products of type 1 are distributed to the next two stores in these amounts: 5, 5\n- The 10 products of type 2 are distributed to the last two stores in these amounts: 5, 5\nThe maximum number of products given to any store is max(5, 5, 5, 5, 5, 5, 5) = 5."
            },
            {
                "Input": "** n = 1, quantities = [100000]",
                "Output": "** 100000",
                "Explanation": "** The only optimal way is:\n- The 100000 products of type 0 are distributed to the only store.\nThe maximum number of products given to any store is max(100000) = 100000."
            }
        ]
    },
    {
        "Title": "Maximum Path Quality of a Graph",
        "slug": "maximum-path-quality-of-a-graph",
        "description": "There is an **undirected** graph with `n` nodes numbered from `0` to `n - 1` (**inclusive**). You are given a **0-indexed** integer array `values` where `values[i]` is the **value** of the `ith` node. You are also given a **0-indexed** 2D integer array `edges`, where each `edges[j] = [uj, vj, timej]` indicates that there is an undirected edge between the nodes `uj` and `vj`,and it takes `timej` seconds to travel between the two nodes. Finally, you are given an integer `maxTime`.\n\n\nA **valid** **path** in the graph is any path that starts at node `0`, ends at node `0`, and takes **at most** `maxTime` seconds to complete. You may visit the same node multiple times. The **quality** of a valid path is the **sum** of the values of the **unique nodes** visited in the path (each node's value is added **at most once** to the sum).\n\n\nReturn *the **maximum** quality of a valid path*.\n\n\nNote:** There are **at most four** edges connected to each node.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Backtracking",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** values = [0,32,10,43], edges = [[0,1,10],[1,2,15],[0,3,10]], maxTime = 49",
                "Output": "** 75",
                "Explanation": "**\nOne possible path is 0 -> 1 -> 0 -> 3 -> 0. The total time taken is 10 + 10 + 10 + 10 = 40 <= 49.\nThe nodes visited are 0, 1, and 3, giving a maximal path quality of 0 + 32 + 43 = 75."
            },
            {
                "Input": "** values = [5,10,15,20], edges = [[0,1,10],[1,2,10],[0,3,10]], maxTime = 30",
                "Output": "** 25",
                "Explanation": "**\nOne possible path is 0 -> 3 -> 0. The total time taken is 10 + 10 = 20 <= 30.\nThe nodes visited are 0 and 3, giving a maximal path quality of 5 + 20 = 25."
            },
            {
                "Input": "** values = [1,2,3,4], edges = [[0,1,10],[1,2,11],[2,3,12],[1,3,13]], maxTime = 50",
                "Output": "** 7",
                "Explanation": "**\nOne possible path is 0 -> 1 -> 3 -> 1 -> 0. The total time taken is 10 + 13 + 13 + 10 = 46 <= 50.\nThe nodes visited are 0, 1, and 3, giving a maximal path quality of 1 + 2 + 4 = 7."
            }
        ]
    },
    {
        "Title": "Check Whether Two Strings are Almost Equivalent",
        "slug": "check-whether-two-strings-are-almost-equivalent",
        "description": "Two strings `word1` and `word2` are considered **almost equivalent** if the differences between the frequencies of each letter from `'a'` to `'z'` between `word1` and `word2` is **at most** `3`.\n\n\nGiven two strings `word1` and `word2`, each of length `n`, return `true` *if* `word1` *and* `word2` *are **almost equivalent**, or* `false` *otherwise*.\n\n\nThe **frequency** of a letter `x` is the number of times it occurs in the string.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** word1 = \"aaaa\", word2 = \"bccb\"",
                "Output": "** false",
                "Explanation": "** There are 4 'a's in \"aaaa\" but 0 'a's in \"bccb\".\nThe difference is 4, which is more than the allowed 3."
            },
            {
                "Input": "** word1 = \"abcdeef\", word2 = \"abaaacc\"",
                "Output": "** true",
                "Explanation": "** The differences between the frequencies of each letter in word1 and word2 are at most 3:\n- 'a' appears 1 time in word1 and 4 times in word2. The difference is 3.\n- 'b' appears 1 time in word1 and 1 time in word2. The difference is 0.\n- 'c' appears 1 time in word1 and 2 times in word2. The difference is 1.\n- 'd' appears 1 time in word1 and 0 times in word2. The difference is 1.\n- 'e' appears 2 times in word1 and 0 times in word2. The difference is 2.\n- 'f' appears 1 time in word1 and 0 times in word2. The difference is 1."
            },
            {
                "Input": "** word1 = \"cccddabba\", word2 = \"babababab\"",
                "Output": "** true",
                "Explanation": "** The differences between the frequencies of each letter in word1 and word2 are at most 3:\n- 'a' appears 2 times in word1 and 4 times in word2. The difference is 2.\n- 'b' appears 2 times in word1 and 5 times in word2. The difference is 3.\n- 'c' appears 3 times in word1 and 0 times in word2. The difference is 3.\n- 'd' appears 2 times in word1 and 0 times in word2. The difference is 2."
            }
        ]
    },
    {
        "Title": "Walking Robot Simulation II",
        "slug": "walking-robot-simulation-ii",
        "description": "A `width x height` grid is on an XY-plane with the **bottom-left** cell at `(0, 0)` and the **top-right** cell at `(width - 1, height - 1)`. The grid is aligned with the four cardinal directions (`\"North\"`, `\"East\"`, `\"South\"`, and `\"West\"`). A robot is **initially** at cell `(0, 0)` facing direction `\"East\"`.\n\n\nThe robot can be instructed to move for a specific number of **steps**. For each step, it does the following.\n\n\n1. Attempts to move **forward one** cell in the direction it is facing.\n2. If the cell the robot is **moving to** is **out of bounds**, the robot instead **turns** 90 degrees **counterclockwise** and retries the step.\n\n\nAfter the robot finishes moving the number of steps required, it stops and awaits the next instruction.\n\n\nImplement the `Robot` class:\n\n\n `Robot(int width, int height)` Initializes the `width x height` grid with the robot at `(0, 0)` facing `\"East\"`.\n `void step(int num)` Instructs the robot to move forward `num` steps.\n `int[] getPos()` Returns the current cell the robot is at, as an array of length 2, `[x, y]`.\n `String getDir()` Returns the current direction of the robot, `\"North\"`, `\"East\"`, `\"South\"`, or `\"West\"`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Design",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "[\"Robot\", \"step\", \"step\", \"getPos\", \"getDir\", \"step\", \"step\", \"step\", \"getPos\", \"getDir\"]\n[[6, 3], [2], [2], [], [], [2], [1], [4], [], []]",
                "Output": "[null, null, null, [4, 0], \"East\", null, null, null, [1, 2], \"West\"]",
                "Explanation": "Robot robot = new Robot(6, 3); // Initialize the grid and the robot at (0, 0) facing East.\nrobot.step(2);  // It moves two steps East to (2, 0), and faces East.\nrobot.step(2);  // It moves two steps East to (4, 0), and faces East.\nrobot.getPos(); // return [4, 0]\nrobot.getDir(); // return \"East\"\nrobot.step(2);  // It moves one step East to (5, 0), and faces East.\n                // Moving the next step East would be out of bounds, so it turns and faces North.\n                // Then, it moves one step North to (5, 1), and faces North.\nrobot.step(1);  // It moves one step North to (5, 2), and faces **North** (not West).\nrobot.step(4);  // Moving the next step North would be out of bounds, so it turns and faces West.\n                // Then, it moves four steps West to (1, 2), and faces West.\nrobot.getPos(); // return [1, 2]\nrobot.getDir(); // return \"West\""
            }
        ]
    },
    {
        "Title": "Most Beautiful Item for Each Query",
        "slug": "most-beautiful-item-for-each-query",
        "description": "You are given a 2D integer array `items` where `items[i] = [pricei, beautyi]` denotes the **price** and **beauty** of an item respectively.\n\n\nYou are also given a **0-indexed** integer array `queries`. For each `queries[j]`, you want to determine the **maximum beauty** of an item whose **price** is **less than or equal** to `queries[j]`. If no such item exists, then the answer to this query is `0`.\n\n\nReturn *an array* `answer` *of the same length as* `queries` *where* `answer[j]` *is the answer to the* `jth` *query*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** items = [[1,2],[3,2],[2,4],[5,6],[3,5]], queries = [1,2,3,4,5,6]",
                "Output": "** [2,4,5,5,6,6]",
                "Explanation": "**\n- For queries[0]=1, [1,2] is the only item which has price <= 1. Hence, the answer for this query is 2.\n- For queries[1]=2, the items which can be considered are [1,2] and [2,4]. \n  The maximum beauty among them is 4.\n- For queries[2]=3 and queries[3]=4, the items which can be considered are [1,2], [3,2], [2,4], and [3,5].\n  The maximum beauty among them is 5.\n- For queries[4]=5 and queries[5]=6, all items can be considered.\n  Hence, the answer for them is the maximum beauty of all items, i.e., 6."
            },
            {
                "Input": "** items = [[1,2],[1,2],[1,3],[1,4]], queries = [1]",
                "Output": "** [4]",
                "Explanation": "** \nThe price of every item is equal to 1, so we choose the item with the maximum beauty 4. \nNote that multiple items can have the same price and/or beauty."
            },
            {
                "Input": "** items = [[10,1000]], queries = [5]",
                "Output": "** [0]",
                "Explanation": "**\nNo item has a price less than or equal to 5, so no item can be chosen.\nHence, the answer to the query is 0."
            }
        ]
    },
    {
        "Title": "Maximum Number of Tasks You Can Assign",
        "slug": "maximum-number-of-tasks-you-can-assign",
        "description": "You have `n` tasks and `m` workers. Each task has a strength requirement stored in a **0-indexed** integer array `tasks`, with the `ith` task requiring `tasks[i]` strength to complete. The strength of each worker is stored in a **0-indexed** integer array `workers`, with the `jth` worker having `workers[j]` strength. Each worker can only be assigned to a **single** task and must have a strength **greater than or equal** to the task's strength requirement (i.e., `workers[j] >= tasks[i]`).\n\n\nAdditionally, you have `pills` magical pills that will **increase a worker's strength** by `strength`. You can decide which workers receive the magical pills, however, you may only give each worker **at most one** magical pill.\n\n\nGiven the **0-indexed** integer arrays `tasks` and `workers` and the integers `pills` and `strength`, return *the **maximum** number of tasks that can be completed.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Greedy",
            "Queue",
            "Sorting",
            "Monotonic Queue"
        ],
        "examples": [
            {
                "Input": "** tasks = [**3**,**2**,**1**], workers = [**0**,**3**,**3**], pills = 1, strength = 1",
                "Output": "** 3",
                "Explanation": "**\nWe can assign the magical pill and tasks as follows:\n- Give the magical pill to worker 0.\n- Assign worker 0 to task 2 (0 + 1 >= 1)\n- Assign worker 1 to task 1 (3 >= 2)\n- Assign worker 2 to task 0 (3 >= 3)"
            },
            {
                "Input": "** tasks = [**5**,4], workers = [**0**,0,0], pills = 1, strength = 5",
                "Output": "** 1",
                "Explanation": "**\nWe can assign the magical pill and tasks as follows:\n- Give the magical pill to worker 0.\n- Assign worker 0 to task 0 (0 + 5 >= 5)"
            },
            {
                "Input": "** tasks = [**10**,**15**,30], workers = [**0**,**10**,10,10,10], pills = 3, strength = 10",
                "Output": "** 2",
                "Explanation": "**\nWe can assign the magical pills and tasks as follows:\n- Give the magical pill to worker 0 and worker 1.\n- Assign worker 0 to task 0 (0 + 10 >= 10)\n- Assign worker 1 to task 1 (10 + 10 >= 15)\nThe last pill is not given because it will not make any worker strong enough for the last task."
            }
        ]
    },
    {
        "Title": "Time Needed to Buy Tickets",
        "slug": "time-needed-to-buy-tickets",
        "description": "There are `n` people in a line queuing to buy tickets, where the `0th` person is at the **front** of the line and the `(n - 1)th` person is at the **back** of the line.\n\n\nYou are given a **0-indexed** integer array `tickets` of length `n` where the number of tickets that the `ith` person would like to buy is `tickets[i]`.\n\n\nEach person takes **exactly 1 second** to buy a ticket. A person can only buy **1 ticket at a time** and has to go back to **the end** of the line (which happens **instantaneously**) in order to buy more tickets. If a person does not have any tickets left to buy, the person will **leave** the line.\n\n\nReturn *the **time taken** for the person at position* `k`***(0-indexed)****to finish buying tickets*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Queue",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** tickets = [2,3,2], k = 2",
                "Output": "** 6",
                "Explanation": "** \n- In the first pass, everyone in the line buys a ticket and the line becomes [1, 2, 1].\n- In the second pass, everyone in the line buys a ticket and the line becomes [0, 1, 0].\nThe person at\u00a0position 2 has successfully bought 2 tickets and it took 3 + 3 = 6 seconds."
            },
            {
                "Input": "** tickets = [5,1,1,1], k = 0",
                "Output": "** 8",
                "Explanation": "**\n- In the first pass, everyone in the line buys a ticket and the line becomes [4, 0, 0, 0].\n- In the next 4 passes, only the person in position 0 is buying tickets.\nThe person at\u00a0position 0 has successfully bought 5 tickets and it took 4 + 1 + 1 + 1 + 1 = 8 seconds."
            }
        ]
    },
    {
        "Title": "Reverse Nodes in Even Length Groups",
        "slug": "reverse-nodes-in-even-length-groups",
        "description": "You are given the `head` of a linked list.\n\n\nThe nodes in the linked list are **sequentially** assigned to **non-empty** groups whose lengths form the sequence of the natural numbers (`1, 2, 3, 4, ...`). The **length** of a group is the number of nodes assigned to it. In other words,\n\n\n The `1st` node is assigned to the first group.\n The `2nd` and the `3rd` nodes are assigned to the second group.\n The `4th`, `5th`, and `6th` nodes are assigned to the third group, and so on.\n\n\nNote that the length of the last group may be less than or equal to `1 + the length of the second to last group`.\n\n\nReverse** the nodes in each group with an **even** length, and return *the* `head` *of the modified linked list*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List"
        ],
        "examples": [
            {
                "Input": "** head = [5,2,6,3,9,1,7,3,8,4]",
                "Output": "** [5,6,2,3,9,1,4,8,3,7]",
                "Explanation": "**\n- The length of the first group is 1, which is odd, hence no reversal occurs.\n- The length of the second group is 2, which is even, hence the nodes are reversed.\n- The length of the third group is 3, which is odd, hence no reversal occurs.\n- The length of the last group is 4, which is even, hence the nodes are reversed."
            },
            {
                "Input": "** head = [1,1,0,6]",
                "Output": "** [1,0,1,6]",
                "Explanation": "**\n- The length of the first group is 1. No reversal occurs.\n- The length of the second group is 2. The nodes are reversed.\n- The length of the last group is 1. No reversal occurs."
            },
            {
                "Input": "** head = [1,1,0,6,5]",
                "Output": "** [1,0,1,5,6]",
                "Explanation": "**\n- The length of the first group is 1. No reversal occurs.\n- The length of the second group is 2. The nodes are reversed.\n- The length of the last group is 2. The nodes are reversed."
            }
        ]
    },
    {
        "Title": "Decode the Slanted Ciphertext",
        "slug": "decode-the-slanted-ciphertext",
        "description": "A string `originalText` is encoded using a **slanted transposition cipher** to a string `encodedText` with the help of a matrix having a **fixed number of rows** `rows`.\n\n\n`originalText` is placed first in a top-left to bottom-right manner.\n\n\n![](https://assets.leetcode.com/uploads/2021/11/07/exa11.png)\nThe blue cells are filled first, followed by the red cells, then the yellow cells, and so on, until we reach the end of `originalText`. The arrow indicates the order in which the cells are filled. All empty cells are filled with `' '`. The number of columns is chosen such that the rightmost column will **not be empty** after filling in `originalText`.\n\n\n`encodedText` is then formed by appending all characters of the matrix in a row-wise fashion.\n\n\n![](https://assets.leetcode.com/uploads/2021/11/07/exa12.png)\nThe characters in the blue cells are appended first to `encodedText`, then the red cells, and so on, and finally the yellow cells. The arrow indicates the order in which the cells are accessed.\n\n\nFor example, if `originalText = \"cipher\"` and `rows = 3`, then we encode it in the following manner:\n\n\n![](https://assets.leetcode.com/uploads/2021/10/25/desc2.png)\nThe blue arrows depict how `originalText` is placed in the matrix, and the red arrows denote the order in which `encodedText` is formed. In the above example, `encodedText = \"ch ie pr\"`.\n\n\nGiven the encoded string `encodedText` and number of rows `rows`, return *the original string* `originalText`.\n\n\nNote:** `originalText` **does not** have any trailing spaces `' '`. The test cases are generated such that there is only one possible `originalText`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** encodedText = \"iveo    eed   l te   olc\", rows = 4",
                "Output": "** \"i love leetcode\"",
                "Explanation": "** The figure above denotes the matrix that was used to encode originalText. \nThe blue arrows show how we can find originalText from encodedText."
            },
            {
                "Input": "** encodedText = \"coding\", rows = 1",
                "Output": "** \"coding\"",
                "Explanation": "** Since there is only 1 row, both originalText and encodedText are the same."
            }
        ]
    },
    {
        "Title": "Process Restricted Friend Requests",
        "slug": "process-restricted-friend-requests",
        "description": "You are given an integer `n` indicating the number of people in a network. Each person is labeled from `0` to `n - 1`.\n\n\nYou are also given a **0-indexed** 2D integer array `restrictions`, where `restrictions[i] = [xi, yi]` means that person `xi` and person `yi` **cannot** become **friends**,either **directly** or **indirectly** through other people.\n\n\nInitially, no one is friends with each other. You are given a list of friend requests as a **0-indexed** 2D integer array `requests`, where `requests[j] = [uj, vj]` is a friend request between person `uj` and person `vj`.\n\n\nA friend request is **successful** if `uj` and `vj` can be **friends**. Each friend request is processed in the given order (i.e., `requests[j]` occurs before `requests[j + 1]`), and upon a successful request, `uj` and `vj` **become direct friends** for all future friend requests.\n\n\nReturn *a **boolean array*** `result`, *where each* `result[j]` *is* `true` *if the* `jth` *friend request is **successful** or* `false` *if it is not*.\n\n\nNote:** If `uj` and `vj` are already direct friends, the request is still **successful**.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Union Find",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** n = 3, restrictions = [[0,1]], requests = [[0,2],[2,1]]",
                "Output": "** [true,false]",
                "Explanation": "**Request 0: Person 0 and person 2 can be friends, so they become direct friends. \nRequest 1: Person 2 and person 1 cannot be friends since person 0 and person 1 would be indirect friends (1--2--0)."
            },
            {
                "Input": "** n = 3, restrictions = [[0,1]], requests = [[1,2],[0,2]]",
                "Output": "** [true,false]",
                "Explanation": "**Request 0: Person 1 and person 2 can be friends, so they become direct friends.\nRequest 1: Person 0 and person 2 cannot be friends since person 0 and person 1 would be indirect friends (0--2--1)."
            },
            {
                "Input": "** n = 5, restrictions = [[0,1],[1,2],[2,3]], requests = [[0,4],[1,2],[3,1],[3,4]]",
                "Output": "** [true,false,true,false]",
                "Explanation": "**Request 0: Person 0 and person 4 can be friends, so they become direct friends.\nRequest 1: Person 1 and person 2 cannot be friends since they are directly restricted.\nRequest 2: Person 3 and person 1 can be friends, so they become direct friends.\nRequest 3: Person 3 and person 4 cannot be friends since person 0 and person 1 would be indirect friends (0--4--3--1)."
            }
        ]
    },
    {
        "Title": "Two Furthest Houses With Different Colors",
        "slug": "two-furthest-houses-with-different-colors",
        "description": "There are `n` houses evenly lined up on the street, and each house is beautifully painted. You are given a **0-indexed** integer array `colors` of length `n`, where `colors[i]` represents the color of the `ith` house.\n\n\nReturn *the **maximum** distance between **two** houses with **different** colors*.\n\n\nThe distance between the `ith` and `jth` houses is `abs(i - j)`, where `abs(x)` is the **absolute value** of `x`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** colors = [**1**,1,1,**6**,1,1,1]",
                "Output": "** 3",
                "Explanation": "** In the above image, color 1 is blue, and color 6 is red.\nThe furthest two houses with different colors are house 0 and house 3.\nHouse 0 has color 1, and house 3 has color 6. The distance between them is abs(0 - 3) = 3.\nNote that houses 3 and 6 can also produce the optimal answer."
            },
            {
                "Input": "** colors = [**1**,8,3,8,**3**]",
                "Output": "** 4",
                "Explanation": "** In the above image, color 1 is blue, color 8 is yellow, and color 3 is green.\nThe furthest two houses with different colors are house 0 and house 4.\nHouse 0 has color 1, and house 4 has color 3. The distance between them is abs(0 - 4) = 4."
            }
        ]
    },
    {
        "Title": "Watering Plants",
        "slug": "watering-plants",
        "description": "You want to water `n` plants in your garden with a watering can. The plants are arranged in a row and are labeled from `0` to `n - 1` from left to right where the `ith` plant is located at `x = i`. There is a river at `x = -1` that you can refill your watering can at.\n\n\nEach plant needs a specific amount of water. You will water the plants in the following way:\n\n\n Water the plants in order from left to right.\n After watering the current plant, if you do not have enough water to **completely** water the next plant, return to the river to fully refill the watering can.\n You **cannot** refill the watering can early.\n\n\nYou are initially at the river (i.e., `x = -1`). It takes **one step** to move **one unit** on the x-axis.\n\n\nGiven a **0-indexed** integer array `plants` of `n` integers, where `plants[i]` is the amount of water the `ith` plant needs, and an integer `capacity` representing the watering can capacity, return *the **number of steps** needed to water all the plants*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** plants = [2,2,3,3], capacity = 5",
                "Output": "** 14",
                "Explanation": "** Start at the river with a full watering can:\n- Walk to plant 0 (1 step) and water it. Watering can has 3 units of water.\n- Walk to plant 1 (1 step) and water it. Watering can has 1 unit of water.\n- Since you cannot completely water plant 2, walk back to the river to refill (2 steps).\n- Walk to plant 2 (3 steps) and water it. Watering can has 2 units of water.\n- Since you cannot completely water plant 3, walk back to the river to refill (3 steps).\n- Walk to plant 3 (4 steps) and water it.\nSteps needed = 1 + 1 + 2 + 3 + 3 + 4 = 14."
            },
            {
                "Input": "** plants = [1,1,1,4,2,3], capacity = 4",
                "Output": "** 30",
                "Explanation": "** Start at the river with a full watering can:\n- Water plants 0, 1, and 2 (3 steps). Return to river (3 steps).\n- Water plant 3 (4 steps). Return to river (4 steps).\n- Water plant 4 (5 steps). Return to river (5 steps).\n- Water plant 5 (6 steps).\nSteps needed = 3 + 3 + 4 + 4 + 5 + 5 + 6 = 30."
            },
            {
                "Input": "** plants = [7,7,7,7,7,7,7], capacity = 8",
                "Output": "** 49",
                "Explanation": "** You have to refill before watering each plant.\nSteps needed = 1 + 1 + 2 + 2 + 3 + 3 + 4 + 4 + 5 + 5 + 6 + 6 + 7 = 49."
            }
        ]
    },
    {
        "Title": "Range Frequency Queries",
        "slug": "range-frequency-queries",
        "description": "Design a data structure to find the **frequency** of a given value in a given subarray.\n\n\nThe **frequency** of a value in a subarray is the number of occurrences of that value in the subarray.\n\n\nImplement the `RangeFreqQuery` class:\n\n\n `RangeFreqQuery(int[] arr)` Constructs an instance of the class with the given **0-indexed** integer array `arr`.\n `int query(int left, int right, int value)` Returns the **frequency** of `value` in the subarray `arr[left...right]`.\n\n\nA **subarray** is a contiguous sequence of elements within an array. `arr[left...right]` denotes the subarray that contains the elements of `nums` between indices `left` and `right` (**inclusive**).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Design",
            "Segment Tree"
        ],
        "examples": [
            {
                "Input": "[\"RangeFreqQuery\", \"query\", \"query\"]\n[[[12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]], [1, 2, 4], [0, 11, 33]]",
                "Output": "[null, 1, 2]",
                "Explanation": "RangeFreqQuery rangeFreqQuery = new RangeFreqQuery([12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]);\nrangeFreqQuery.query(1, 2, 4); // return 1. The value 4 occurs 1 time in the subarray [33, 4]\nrangeFreqQuery.query(0, 11, 33); // return 2. The value 33 occurs 2 times in the whole array."
            }
        ]
    },
    {
        "Title": "Sum of k-Mirror Numbers",
        "slug": "sum-of-k-mirror-numbers",
        "description": "A **k-mirror number** is a **positive** integer **without leading zeros** that reads the same both forward and backward in base-10 **as well as** in base-k.\n\n\n For example, `9` is a 2-mirror number. The representation of `9` in base-10 and base-2 are `9` and `1001` respectively, which read the same both forward and backward.\n On the contrary, `4` is not a 2-mirror number. The representation of `4` in base-2 is `100`, which does not read the same both forward and backward.\n\n\nGiven the base `k` and the number `n`, return *the **sum** of the* `n` ***smallest** k-mirror numbers*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** k = 2, n = 5",
                "Output": "** 25",
                "Explanation": "**The 5 smallest 2-mirror numbers and their representations in base-2 are listed as follows:\n  base-10    base-2\n    1          1\n    3          11\n    5          101\n    7          111\n    9          1001\nTheir sum = 1 + 3 + 5 + 7 + 9 = 25."
            },
            {
                "Input": "** k = 3, n = 7",
                "Output": "** 499",
                "Explanation": "**The 7 smallest 3-mirror numbers are and their representations in base-3 are listed as follows:\n  base-10    base-3\n    1          1\n    2          2\n    4          11\n    8          22\n    121        11111\n    151        12121\n    212        21212\nTheir sum = 1 + 2 + 4 + 8 + 121 + 151 + 212 = 499."
            },
            {
                "Input": "** k = 7, n = 17",
                "Output": "** 20379000",
                "Explanation": "** The 17 smallest 7-mirror numbers are:\n1, 2, 3, 4, 5, 6, 8, 121, 171, 242, 292, 16561, 65656, 2137312, 4602064, 6597956, 6958596"
            }
        ]
    },
    {
        "Title": "Count Common Words With One Occurrence",
        "slug": "count-common-words-with-one-occurrence",
        "description": "Given two string arrays `words1` and `words2`, return *the number of strings that appear **exactly once** in **each**\u00a0of the two arrays.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** words1 = [\"leetcode\",\"is\",\"amazing\",\"as\",\"is\"], words2 = [\"amazing\",\"leetcode\",\"is\"]",
                "Output": "** 2",
                "Explanation": "**\n- \"leetcode\" appears exactly once in each of the two arrays. We count this string.\n- \"amazing\" appears exactly once in each of the two arrays. We count this string.\n- \"is\" appears in each of the two arrays, but there are 2 occurrences of it in words1. We do not count this string.\n- \"as\" appears once in words1, but does not appear in words2. We do not count this string.\nThus, there are 2 strings that appear exactly once in each of the two arrays."
            },
            {
                "Input": "** words1 = [\"b\",\"bb\",\"bbb\"], words2 = [\"a\",\"aa\",\"aaa\"]",
                "Output": "** 0",
                "Explanation": "** There are no strings that appear in each of the two arrays."
            },
            {
                "Input": "** words1 = [\"a\",\"ab\"], words2 = [\"a\",\"a\",\"a\",\"ab\"]",
                "Output": "** 1",
                "Explanation": "** The only string that appears exactly once in each of the two arrays is \"ab\"."
            }
        ]
    },
    {
        "Title": "Minimum Number of Food Buckets to Feed the Hamsters",
        "slug": "minimum-number-of-food-buckets-to-feed-the-hamsters",
        "description": "You are given a **0-indexed** string `hamsters` where `hamsters[i]` is either:\n\n\n `'H'` indicating that there is a hamster at index `i`, or\n `'.'` indicating that index `i` is empty.\n\n\nYou will add some number of food buckets at the empty indices in order to feed the hamsters. A hamster can be fed if there is at least one food bucket to its left or to its right. More formally, a hamster at index `i` can be fed if you place a food bucket at index `i - 1` **and/or** at index `i + 1`.\n\n\nReturn *the minimum number of food buckets you should **place at empty indices** to feed all the hamsters or* `-1` *if it is impossible to feed all of them*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** hamsters = \"H..H\"",
                "Output": "** 2",
                "Explanation": "** We place two food buckets at indices 1 and 2.\nIt can be shown that if we place only one food bucket, one of the hamsters will not be fed."
            },
            {
                "Input": "** hamsters = \".H.H.\"",
                "Output": "** 1",
                "Explanation": "** We place one food bucket at index 2."
            },
            {
                "Input": "** hamsters = \".HHH.\"",
                "Output": "** -1",
                "Explanation": "** If we place a food bucket at every empty index as shown, the hamster at index 2 will not be able to eat."
            }
        ]
    },
    {
        "Title": "Minimum Cost Homecoming of a Robot in a Grid",
        "slug": "minimum-cost-homecoming-of-a-robot-in-a-grid",
        "description": "There is an `m x n` grid, where `(0, 0)` is the top-left cell and `(m - 1, n - 1)` is the bottom-right cell. You are given an integer array `startPos` where `startPos = [startrow, startcol]` indicates that **initially**, a **robot** is at the cell `(startrow, startcol)`. You are also given an integer array `homePos` where `homePos = [homerow, homecol]` indicates that its **home** is at the cell `(homerow, homecol)`.\n\n\nThe robot needs to go to its home. It can move one cell in four directions: **left**, **right**, **up**, or **down**, and it can not move outside the boundary. Every move incurs some cost. You are further given two **0-indexed** integer arrays: `rowCosts` of length `m` and `colCosts` of length `n`.\n\n\n If the robot moves **up** or **down** into a cell whose **row** is `r`, then this move costs `rowCosts[r]`.\n If the robot moves **left** or **right** into a cell whose **column** is `c`, then this move costs `colCosts[c]`.\n\n\nReturn *the **minimum total cost** for this robot to return home*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** startPos = [1, 0], homePos = [2, 3], rowCosts = [5, 4, 3], colCosts = [8, 2, 6, 7]",
                "Output": "** 18",
                "Explanation": "** One optimal path is that:\nStarting from (1, 0)\n-> It goes down to (**2**, 0). This move costs rowCosts[2] = 3.\n-> It goes right to (2, **1**). This move costs colCosts[1] = 2.\n-> It goes right to (2, **2**). This move costs colCosts[2] = 6.\n-> It goes right to (2, **3**). This move costs colCosts[3] = 7.\nThe total cost is 3 + 2 + 6 + 7 = 18"
            }
        ]
    },
    {
        "Title": "Count Fertile Pyramids in a Land",
        "slug": "count-fertile-pyramids-in-a-land",
        "description": "A farmer has a **rectangular grid** of land with `m` rows and `n` columns that can be divided into unit cells. Each cell is either **fertile** (represented by a `1`) or **barren** (represented by a `0`). All cells outside the grid are considered barren.\n\n\nA **pyramidal plot** of land can be defined as a set of cells with the following criteria:\n\n\n1. The number of cells in the set has to be **greater than** `1` and all cells must be **fertile**.\n2. The **apex** of a pyramid is the **topmost** cell of the pyramid. The **height** of a pyramid is the number of rows it covers. Let `(r, c)` be the apex of the pyramid, and its height be `h`. Then, the plot comprises of cells `(i, j)` where `r <= i <= r + h - 1` **and** `c - (i - r) <= j <= c + (i - r)`.\n\n\nAn **inverse pyramidal plot** of land can be defined as a set of cells with similar criteria:\n\n\n1. The number of cells in the set has to be **greater than** `1` and all cells must be **fertile**.\n2. The **apex** of an inverse pyramid is the **bottommost** cell of the inverse pyramid. The **height** of an inverse pyramid is the number of rows it covers. Let `(r, c)` be the apex of the pyramid, and its height be `h`. Then, the plot comprises of cells `(i, j)` where `r - h + 1 <= i <= r` **and** `c - (r - i) <= j <= c + (r - i)`.\n\n\nSome examples of valid and invalid pyramidal (and inverse pyramidal) plots are shown below. Black cells indicate fertile cells.\n\n\n![](https://assets.leetcode.com/uploads/2021/11/08/image.png)\nGiven a **0-indexed** `m x n` binary matrix `grid` representing the farmland, return *the **total number** of pyramidal and inverse pyramidal plots that can be found in* `grid`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[0,1,1,0],[1,1,1,1]]",
                "Output": "** 2",
                "Explanation": "** The 2 possible pyramidal plots are shown in blue and red respectively.\nThere are no inverse pyramidal plots in this grid. \nHence total number of pyramidal and inverse pyramidal plots is 2 + 0 = 2."
            },
            {
                "Input": "** grid = [[1,1,1],[1,1,1]]",
                "Output": "** 2",
                "Explanation": "** The pyramidal plot is shown in blue, and the inverse pyramidal plot is shown in red. \nHence the total number of plots is 1 + 1 = 2."
            },
            {
                "Input": "** grid = [[1,1,1,1,0],[1,1,1,1,1],[1,1,1,1,1],[0,1,0,0,1]]",
                "Output": "** 13",
                "Explanation": "** There are 7 pyramidal plots, 3 of which are shown in the 2nd and 3rd figures.\nThere are 6 inverse pyramidal plots, 2 of which are shown in the last figure.\nThe total number of plots is 7 + 6 = 13."
            }
        ]
    },
    {
        "Title": "Find Target Indices After Sorting Array",
        "slug": "find-target-indices-after-sorting-array",
        "description": "You are given a **0-indexed** integer array `nums` and a target element `target`.\n\n\nA **target index** is an index `i` such that `nums[i] == target`.\n\n\nReturn *a list of the target indices of* `nums` after *sorting* `nums` *in **non-decreasing** order*. If there are no target indices, return *an **empty** list*. The returned list must be sorted in **increasing** order.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,5,2,3], target = 2",
                "Output": "** [1,2]",
                "Explanation": "** After sorting, nums is [1,**2**,**2**,3,5].\nThe indices where nums[i] == 2 are 1 and 2."
            },
            {
                "Input": "** nums = [1,2,5,2,3], target = 3",
                "Output": "** [3]",
                "Explanation": "** After sorting, nums is [1,2,2,**3**,5].\nThe index where nums[i] == 3 is 3."
            },
            {
                "Input": "** nums = [1,2,5,2,3], target = 5",
                "Output": "** [4]",
                "Explanation": "** After sorting, nums is [1,2,2,3,**5**].\nThe index where nums[i] == 5 is 4."
            }
        ]
    },
    {
        "Title": "K Radius Subarray Averages",
        "slug": "k-radius-subarray-averages",
        "description": "You are given a **0-indexed** array `nums` of `n` integers, and an integer `k`.\n\n\nThe **k-radius average** for a subarray of `nums` **centered** at some index `i` with the **radius** `k` is the average of **all** elements in `nums` between the indices `i - k` and `i + k` (**inclusive**). If there are less than `k` elements before **or** after the index `i`, then the **k-radius average** is `-1`.\n\n\nBuild and return *an array* `avgs` *of length* `n` *where* `avgs[i]` *is the **k-radius average** for the subarray centered at index* `i`.\n\n\nThe **average** of `x` elements is the sum of the `x` elements divided by `x`, using **integer division**. The integer division truncates toward zero, which means losing its fractional part.\n\n\n For example, the average of four elements `2`, `3`, `1`, and `5` is `(2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75`, which truncates to `2`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [7,4,3,9,1,8,5,2,6], k = 3",
                "Output": "** [-1,-1,-1,5,4,4,-1,-1,-1]",
                "Explanation": "**\n- avg[0], avg[1], and avg[2] are -1 because there are less than k elements **before** each index.\n- The sum of the subarray centered at index 3 with radius 3 is: 7 + 4 + 3 + 9 + 1 + 8 + 5 = 37.\n  Using **integer division**, avg[3] = 37 / 7 = 5.\n- For the subarray centered at index 4, avg[4] = (4 + 3 + 9 + 1 + 8 + 5 + 2) / 7 = 4.\n- For the subarray centered at index 5, avg[5] = (3 + 9 + 1 + 8 + 5 + 2 + 6) / 7 = 4.\n- avg[6], avg[7], and avg[8] are -1 because there are less than k elements **after** each index."
            }
        ]
    },
    {
        "Title": "Removing Minimum and Maximum From Array",
        "slug": "removing-minimum-and-maximum-from-array",
        "description": "You are given a **0-indexed** array of **distinct** integers `nums`.\n\n\nThere is an element in `nums` that has the **lowest** value and an element that has the **highest** value. We call them the **minimum** and **maximum** respectively. Your goal is to remove **both** these elements from the array.\n\n\nA **deletion** is defined as either removing an element from the **front** of the array or removing an element from the **back** of the array.\n\n\nReturn *the **minimum** number of deletions it would take to remove **both** the minimum and maximum element from the array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums = [2,**10**,7,5,4,**1**,8,6]",
                "Output": "** 5",
                "Explanation": "** \nThe minimum element in the array is nums[5], which is 1.\nThe maximum element in the array is nums[1], which is 10.\nWe can remove both the minimum and maximum by removing 2 elements from the front and 3 elements from the back.\nThis results in 2 + 3 = 5 deletions, which is the minimum number possible."
            },
            {
                "Input": "** nums = [0,**-4**,**19**,1,8,-2,-3,5]",
                "Output": "** 3",
                "Explanation": "** \nThe minimum element in the array is nums[1], which is -4.\nThe maximum element in the array is nums[2], which is 19.\nWe can remove both the minimum and maximum by removing 3 elements from the front.\nThis results in only 3 deletions, which is the minimum number possible."
            },
            {
                "Input": "** nums = [**101**]",
                "Output": "** 1",
                "Explanation": "**  \nThere is only one element in the array, which makes it both the minimum and maximum element.\nWe can remove it with 1 deletion."
            }
        ]
    },
    {
        "Title": "Find All People With Secret",
        "slug": "find-all-people-with-secret",
        "description": "You are given an integer `n` indicating there are `n` people numbered from `0` to `n - 1`. You are also given a **0-indexed** 2D integer array `meetings` where `meetings[i] = [xi, yi, timei]` indicates that person `xi` and person `yi` have a meeting at `timei`. A person may attend **multiple meetings** at the same time. Finally, you are given an integer `firstPerson`.\n\n\nPerson `0` has a **secret** and initially shares the secret with a person `firstPerson` at time `0`. This secret is then shared every time a meeting takes place with a person that has the secret. More formally, for every meeting, if a person `xi` has the secret at `timei`, then they will share the secret with person `yi`, and vice versa.\n\n\nThe secrets are shared **instantaneously**. That is, a person may receive the secret and share it with people in other meetings within the same time frame.\n\n\nReturn *a list of all the people that have the secret after all the meetings have taken place.* You may return the answer in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** n = 6, meetings = [[1,2,5],[2,3,8],[1,5,10]], firstPerson = 1",
                "Output": "** [0,1,2,3,5]",
                "Explanation": "**At time 0, person 0 shares the secret with person 1.\nAt time 5, person 1 shares the secret with person 2.\nAt time 8, person 2 shares the secret with person 3.\nAt time 10, person 1 shares the secret with person 5.\u200b\u200b\u200b\u200b\nThus, people 0, 1, 2, 3, and 5 know the secret after all the meetings."
            },
            {
                "Input": "** n = 4, meetings = [[3,1,3],[1,2,2],[0,3,3]], firstPerson = 3",
                "Output": "** [0,1,3]",
                "Explanation": "**\nAt time 0, person 0 shares the secret with person 3.\nAt time 2, neither person 1 nor person 2 know the secret.\nAt time 3, person 3 shares the secret with person 0 and person 1.\nThus, people 0, 1, and 3 know the secret after all the meetings."
            },
            {
                "Input": "** n = 5, meetings = [[3,4,2],[1,2,1],[2,3,1]], firstPerson = 1",
                "Output": "** [0,1,2,3,4]",
                "Explanation": "**\nAt time 0, person 0 shares the secret with person 1.\nAt time 1, person 1 shares the secret with person 2, and person 2 shares the secret with person 3.\nNote that person 2 can share the secret at the same time as receiving it.\nAt time 2, person 3 shares the secret with person 4.\nThus, people 0, 1, 2, 3, and 4 know the secret after all the meetings."
            }
        ]
    },
    {
        "Title": "Finding 3-Digit Even Numbers",
        "slug": "finding-3-digit-even-numbers",
        "description": "You are given an integer array `digits`, where each element is a digit. The array may contain duplicates.\n\n\nYou need to find **all** the **unique** integers that follow the given requirements:\n\n\n The integer consists of the **concatenation** of **three** elements from `digits` in **any** arbitrary order.\n The integer does not have **leading zeros**.\n The integer is **even**.\n\n\nFor example, if the given `digits` were `[1, 2, 3]`, integers `132` and `312` follow the requirements.\n\n\nReturn *a **sorted** array of the unique integers.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** digits = [2,1,3,0]",
                "Output": "** [102,120,130,132,210,230,302,310,312,320]",
                "Explanation": "** All the possible integers that follow the requirements are in the output array. \nNotice that there are no **odd** integers or integers with **leading zeros**."
            },
            {
                "Input": "** digits = [2,2,8,8,2]",
                "Output": "** [222,228,282,288,822,828,882]",
                "Explanation": "** The same digit can be used as many times as it appears in digits. \nIn this example, the digit 8 is used twice each time in 288, 828, and 882."
            },
            {
                "Input": "** digits = [3,7,5]",
                "Output": "** []",
                "Explanation": "** No **even** integers can be formed using the given digits."
            }
        ]
    },
    {
        "Title": "Delete the Middle Node of a Linked List",
        "slug": "delete-the-middle-node-of-a-linked-list",
        "description": "You are given the `head` of a linked list. **Delete** the **middle node**, and return *the* `head` *of the modified linked list*.\n\n\nThe **middle node** of a linked list of size `n` is the `\u230an / 2\u230bth` node from the **start** using **0-based indexing**, where `\u230ax\u230b` denotes the largest integer less than or equal to `x`.\n\n\n For `n` = `1`, `2`, `3`, `4`, and `5`, the middle nodes are `0`, `1`, `1`, `2`, and `2`, respectively.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** head = [1,3,4,7,1,2,6]",
                "Output": "** [1,3,4,1,2,6]",
                "Explanation": "**\nThe above figure represents the given linked list. The indices of the nodes are written below.\nSince n = 7, node 3 with value 7 is the middle node, which is marked in red.\nWe return the new list after removing this node."
            },
            {
                "Input": "** head = [1,2,3,4]",
                "Output": "** [1,2,4]",
                "Explanation": "**\nThe above figure represents the given linked list.\nFor n = 4, node 2 with value 3 is the middle node, which is marked in red."
            },
            {
                "Input": "** head = [2,1]",
                "Output": "** [2]",
                "Explanation": "**\nThe above figure represents the given linked list.\nFor n = 2, node 1 with value 1 is the middle node, which is marked in red.\nNode 0 with value 2 is the only node remaining after removing node 1."
            }
        ]
    },
    {
        "Title": "Step-By-Step Directions From a Binary Tree Node to Another",
        "slug": "step-by-step-directions-from-a-binary-tree-node-to-another",
        "description": "You are given the `root` of a **binary tree** with `n` nodes. Each node is uniquely assigned a value from `1` to `n`. You are also given an integer `startValue` representing the value of the start node `s`, and a different integer `destValue` representing the value of the destination node `t`.\n\n\nFind the **shortest path** starting from node `s` and ending at node `t`. Generate step-by-step directions of such path as a string consisting of only the **uppercase** letters `'L'`, `'R'`, and `'U'`. Each letter indicates a specific direction:\n\n\n `'L'` means to go from a node to its **left child** node.\n `'R'` means to go from a node to its **right child** node.\n `'U'` means to go from a node to its **parent** node.\n\n\nReturn *the step-by-step directions of the **shortest path** from node* `s` *to node* `t`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [5,1,2,3,null,6,4], startValue = 3, destValue = 6",
                "Output": "** \"UURL\"",
                "Explanation": "** The shortest path is: 3 \u2192 1 \u2192 5 \u2192 2 \u2192 6."
            },
            {
                "Input": "** root = [2,1], startValue = 2, destValue = 1",
                "Output": "** \"L\"",
                "Explanation": "** The shortest path is: 2 \u2192 1."
            }
        ]
    },
    {
        "Title": "Valid Arrangement of Pairs",
        "slug": "valid-arrangement-of-pairs",
        "description": "You are given a **0-indexed** 2D integer array `pairs` where `pairs[i] = [starti, endi]`. An arrangement of `pairs` is **valid** if for every index `i` where `1 <= i < pairs.length`, we have `endi-1 == starti`.\n\n\nReturn ***any** valid arrangement of* `pairs`.\n\n\nNote:** The inputs will be generated such that there exists a valid arrangement of `pairs`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Depth-First Search",
            "Graph",
            "Eulerian Circuit"
        ],
        "examples": [
            {
                "Input": "** pairs = [[5,1],[4,5],[11,9],[9,4]]",
                "Output": "** [[11,9],[9,4],[4,5],[5,1]]",
                "Explanation": "**This is a valid arrangement since endi-1 always equals starti.\nend0 = 9 == 9 = start1 \nend1 = 4 == 4 = start2\nend2 = 5 == 5 = start3"
            },
            {
                "Input": "** pairs = [[1,3],[3,2],[2,1]]",
                "Output": "** [[1,3],[3,2],[2,1]]",
                "Explanation": "**\nThis is a valid arrangement since endi-1 always equals starti.\nend0 = 3 == 3 = start1\nend1 = 2 == 2 = start2\nThe arrangements [[2,1],[1,3],[3,2]] and [[3,2],[2,1],[1,3]] are also valid."
            },
            {
                "Input": "** pairs = [[1,2],[1,3],[2,1]]",
                "Output": "** [[1,2],[2,1],[1,3]]",
                "Explanation": "**\nThis is a valid arrangement since endi-1 always equals starti.\nend0 = 2 == 2 = start1\nend1 = 1 == 1 = start2"
            }
        ]
    },
    {
        "Title": "Find Subsequence of Length K With the Largest Sum",
        "slug": "find-subsequence-of-length-k-with-the-largest-sum",
        "description": "You are given an integer array `nums` and an integer `k`. You want to find a **subsequence** of `nums` of length `k` that has the **largest** sum.\n\n\nReturn***any** such subsequence as an integer array of length* `k`.\n\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** nums = [2,1,3,3], k = 2",
                "Output": "** [3,3]",
                "Explanation": "**\nThe subsequence has the largest sum of 3 + 3 = 6."
            },
            {
                "Input": "** nums = [-1,-2,3,4], k = 3",
                "Output": "** [-1,3,4]",
                "Explanation": "** \nThe subsequence has the largest sum of -1 + 3 + 4 = 6."
            },
            {
                "Input": "** nums = [3,4,3,3], k = 2",
                "Output": "** [3,4]",
                "Explanation": "**\nThe subsequence has the largest sum of 3 + 4 = 7. \nAnother possible subsequence is [4, 3]."
            }
        ]
    },
    {
        "Title": "Find Good Days to Rob the Bank",
        "slug": "find-good-days-to-rob-the-bank",
        "description": "You and a gang of thieves are planning on robbing a bank. You are given a **0-indexed** integer array `security`, where `security[i]` is the number of guards on duty on the `ith` day. The days are numbered starting from `0`. You are also given an integer `time`.\n\n\nThe `ith` day is a good day to rob the bank if:\n\n\n There are at least `time` days before and after the `ith` day,\n The number of guards at the bank for the `time` days **before** `i` are **non-increasing**, and\n The number of guards at the bank for the `time` days **after** `i` are **non-decreasing**.\n\n\nMore formally, this means day `i` is a good day to rob the bank if and only if `security[i - time] >= security[i - time + 1] >= ... >= security[i] <= ... <= security[i + time - 1] <= security[i + time]`.\n\n\nReturn *a list of **all** days **(0-indexed)** that are good days to rob the bank*. *The order that the days are returned in does**not** matter.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** security = [5,3,3,3,5,6,2], time = 2",
                "Output": "** [2,3]",
                "Explanation": "**\nOn day 2, we have security[0] >= security[1] >= security[2] <= security[3] <= security[4].\nOn day 3, we have security[1] >= security[2] >= security[3] <= security[4] <= security[5].\nNo other days satisfy this condition, so days 2 and 3 are the only good days to rob the bank."
            },
            {
                "Input": "** security = [1,1,1,1,1], time = 0",
                "Output": "** [0,1,2,3,4]",
                "Explanation": "**\nSince time equals 0, every day is a good day to rob the bank, so return every day."
            },
            {
                "Input": "** security = [1,2,3,4,5,6], time = 2",
                "Output": "** []",
                "Explanation": "**\nNo day has 2 days before it that have a non-increasing number of guards.\nThus, no day is a good day to rob the bank, so return an empty list."
            }
        ]
    },
    {
        "Title": "Detonate the Maximum Bombs",
        "slug": "detonate-the-maximum-bombs",
        "description": "You are given a list of bombs. The **range** of a bomb is defined as the area where its effect can be felt. This area is in the shape of a **circle** with the center as the location of the bomb.\n\n\nThe bombs are represented by a **0-indexed** 2D integer array `bombs` where `bombs[i] = [xi, yi, ri]`. `xi` and `yi` denote the X-coordinate and Y-coordinate of the location of the `ith` bomb, whereas `ri` denotes the **radius** of its range.\n\n\nYou may choose to detonate a **single** bomb. When a bomb is detonated, it will detonate **all bombs** that lie in its range. These bombs will further detonate the bombs that lie in their ranges.\n\n\nGiven the list of `bombs`, return *the **maximum** number of bombs that can be detonated if you are allowed to detonate **only one** bomb*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Depth-First Search",
            "Breadth-First Search",
            "Graph",
            "Geometry"
        ],
        "examples": [
            {
                "Input": "** bombs = [[2,1,3],[6,1,4]]",
                "Output": "** 2",
                "Explanation": "**\nThe above figure shows the positions and ranges of the 2 bombs.\nIf we detonate the left bomb, the right bomb will not be affected.\nBut if we detonate the right bomb, both bombs will be detonated.\nSo the maximum bombs that can be detonated is max(1, 2) = 2."
            },
            {
                "Input": "** bombs = [[1,1,5],[10,10,5]]",
                "Output": "** 1",
                "Explanation": "**Detonating either bomb will not detonate the other bomb, so the maximum number of bombs that can be detonated is 1."
            },
            {
                "Input": "** bombs = [[1,2,3],[2,3,1],[3,4,2],[4,5,3],[5,6,4]]",
                "Output": "** 5",
                "Explanation": "**\nThe best bomb to detonate is bomb 0 because:\n- Bomb 0 detonates bombs 1 and 2. The red circle denotes the range of bomb 0.\n- Bomb 2 detonates bomb 3. The blue circle denotes the range of bomb 2.\n- Bomb 3 detonates bomb 4. The green circle denotes the range of bomb 3.\nThus all 5 bombs are detonated."
            }
        ]
    },
    {
        "Title": "Sequentially Ordinal Rank Tracker",
        "slug": "sequentially-ordinal-rank-tracker",
        "description": "A scenic location is represented by its `name` and attractiveness `score`, where `name` is a **unique** string among all locations and `score` is an integer. Locations can be ranked from the best to the worst. The **higher** the score, the better the location. If the scores of two locations are equal, then the location with the **lexicographically smaller** name is better.\n\n\nYou are building a system that tracks the ranking of locations with the system initially starting with no locations. It supports:\n\n\n **Adding** scenic locations, **one at a time**.\n **Querying** the `ith` **best** location of **all locations already added**, where `i` is the number of times the system has been queried (including the current query).\n\t+ For example, when the system is queried for the `4th` time, it returns the `4th` best location of all locations already added.\n\n\nNote that the test data are generated so that **at any time**, the number of queries **does not exceed** the number of locations added to the system.\n\n\nImplement the `SORTracker` class:\n\n\n `SORTracker()` Initializes the tracker system.\n `void add(string name, int score)` Adds a scenic location with `name` and `score` to the system.\n `string get()` Queries and returns the `ith` best location, where `i` is the number of times this method has been invoked (including this invocation).\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Design",
            "Heap (Priority Queue)",
            "Data Stream",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "[\"SORTracker\", \"add\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"get\"]\n[[], [\"bradford\", 2], [\"branford\", 3], [], [\"alps\", 2], [], [\"orland\", 2], [], [\"orlando\", 3], [], [\"alpine\", 2], [], []]",
                "Output": "[null, null, null, \"branford\", null, \"alps\", null, \"bradford\", null, \"bradford\", null, \"bradford\", \"orland\"]",
                "Explanation": "SORTracker tracker = new SORTracker(); // Initialize the tracker system.\ntracker.add(\"bradford\", 2); // Add location with name=\"bradford\" and score=2 to the system.\ntracker.add(\"branford\", 3); // Add location with name=\"branford\" and score=3 to the system.\ntracker.get();              // The sorted locations, from best to worst, are: branford, bradford.\n                            // Note that branford precedes bradford due to its **higher score** (3 > 2).\n                            // This is the 1st time get() is called, so return the best location: \"branford\".\ntracker.add(\"alps\", 2);     // Add location with name=\"alps\" and score=2 to the system.\ntracker.get();              // Sorted locations: branford, alps, bradford.\n                            // Note that alps precedes bradford even though they have the same score (2).\n                            // This is because \"alps\" is **lexicographically smaller** than \"bradford\".\n                            // Return the 2nd best location \"alps\", as it is the 2nd time get() is called.\ntracker.add(\"orland\", 2);   // Add location with name=\"orland\" and score=2 to the system.\ntracker.get();              // Sorted locations: branford, alps, bradford, orland.\n                            // Return \"bradford\", as it is the 3rd time get() is called.\ntracker.add(\"orlando\", 3);  // Add location with name=\"orlando\" and score=3 to the system.\ntracker.get();              // Sorted locations: branford, orlando, alps, bradford, orland.\n                            // Return \"bradford\".\ntracker.add(\"alpine\", 2);   // Add location with name=\"alpine\" and score=2 to the system.\ntracker.get();              // Sorted locations: branford, orlando, alpine, alps, bradford, orland.\n                            // Return \"bradford\".\ntracker.get();              // Sorted locations: branford, orlando, alpine, alps, bradford, orland.\n                            // Return \"orland\"."
            }
        ]
    },
    {
        "Title": "Rings and Rods",
        "slug": "rings-and-rods",
        "description": "There are `n` rings and each ring is either red, green, or blue. The rings are distributed **across ten rods** labeled from `0` to `9`.\n\n\nYou are given a string `rings` of length `2n` that describes the `n` rings that are placed onto the rods. Every two characters in `rings` forms a **color-position pair** that is used to describe each ring where:\n\n\n The **first** character of the `ith` pair denotes the `ith` ring's **color** (`'R'`, `'G'`, `'B'`).\n The **second** character of the `ith` pair denotes the **rod** that the `ith` ring is placed on (`'0'` to `'9'`).\n\n\nFor example, `\"R3G2B1\"` describes `n == 3` rings: a red ring placed onto the rod labeled 3, a green ring placed onto the rod labeled 2, and a blue ring placed onto the rod labeled 1.\n\n\nReturn *the number of rods that have **all three colors** of rings on them.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** rings = \"B0B6G0R6R0R6G9\"",
                "Output": "** 1",
                "Explanation": "** \n- The rod labeled 0 holds 3 rings with all colors: red, green, and blue.\n- The rod labeled 6 holds 3 rings, but it only has red and blue.\n- The rod labeled 9 holds only a green ring.\nThus, the number of rods with all three colors is 1."
            },
            {
                "Input": "** rings = \"B0R0G0R9R0B0G0\"",
                "Output": "** 1",
                "Explanation": "** \n- The rod labeled 0 holds 6 rings with all colors: red, green, and blue.\n- The rod labeled 9 holds only a red ring.\nThus, the number of rods with all three colors is 1."
            }
        ]
    },
    {
        "Title": "Sum of Subarray Ranges",
        "slug": "sum-of-subarray-ranges",
        "description": "You are given an integer array `nums`. The **range** of a subarray of `nums` is the difference between the largest and smallest element in the subarray.\n\n\nReturn *the **sum of all** subarray ranges of* `nums`*.\n\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Stack",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 4",
                "Explanation": "** The 6 subarrays of nums are the following:\n[1], range = largest - smallest = 1 - 1 = 0 \n[2], range = 2 - 2 = 0\n[3], range = 3 - 3 = 0\n[1,2], range = 2 - 1 = 1\n[2,3], range = 3 - 2 = 1\n[1,2,3], range = 3 - 1 = 2\nSo the sum of all ranges is 0 + 0 + 0 + 1 + 1 + 2 = 4."
            },
            {
                "Input": "** nums = [1,3,3]",
                "Output": "** 4",
                "Explanation": "** The 6 subarrays of nums are the following:\n[1], range = largest - smallest = 1 - 1 = 0\n[3], range = 3 - 3 = 0\n[3], range = 3 - 3 = 0\n[1,3], range = 3 - 1 = 2\n[3,3], range = 3 - 3 = 0\n[1,3,3], range = 3 - 1 = 2\nSo the sum of all ranges is 0 + 0 + 0 + 2 + 0 + 2 = 4."
            },
            {
                "Input": "** nums = [4,-2,-3,4,1]",
                "Output": "** 59",
                "Explanation": "** The sum of all subarray ranges of nums is 59."
            }
        ]
    },
    {
        "Title": "Watering Plants II",
        "slug": "watering-plants-ii",
        "description": "Alice and Bob want to water `n` plants in their garden. The plants are arranged in a row and are labeled from `0` to `n - 1` from left to right where the `ith` plant is located at `x = i`.\n\n\nEach plant needs a specific amount of water. Alice and Bob have a watering can each, **initially full**. They water the plants in the following way:\n\n\n Alice waters the plants in order from **left to right**, starting from the `0th` plant. Bob waters the plants in order from **right to left**, starting from the `(n - 1)th` plant. They begin watering the plants **simultaneously**.\n It takes the same amount of time to water each plant regardless of how much water it needs.\n Alice/Bob **must** water the plant if they have enough in their can to **fully** water it. Otherwise, they **first** refill their can (instantaneously) then water the plant.\n In case both Alice and Bob reach the same plant, the one with **more** water currently in his/her watering can should water this plant. If they have the same amount of water, then Alice should water this plant.\n\n\nGiven a **0-indexed** integer array `plants` of `n` integers, where `plants[i]` is the amount of water the `ith` plant needs, and two integers `capacityA` and `capacityB` representing the capacities of Alice's and Bob's watering cans respectively, return *the **number of times** they have to refill to water all the plants*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** plants = [2,2,3,3], capacityA = 5, capacityB = 5",
                "Output": "** 1",
                "Explanation": "**\n- Initially, Alice and Bob have 5 units of water each in their watering cans.\n- Alice waters plant 0, Bob waters plant 3.\n- Alice and Bob now have 3 units and 2 units of water respectively.\n- Alice has enough water for plant 1, so she waters it. Bob does not have enough water for plant 2, so he refills his can then waters it.\nSo, the total number of times they have to refill to water all the plants is 0 + 0 + 1 + 0 = 1."
            },
            {
                "Input": "** plants = [2,2,3,3], capacityA = 3, capacityB = 4",
                "Output": "** 2",
                "Explanation": "**\n- Initially, Alice and Bob have 3 units and 4 units of water in their watering cans respectively.\n- Alice waters plant 0, Bob waters plant 3.\n- Alice and Bob now have 1 unit of water each, and need to water plants 1 and 2 respectively.\n- Since neither of them have enough water for their current plants, they refill their cans and then water the plants.\nSo, the total number of times they have to refill to water all the plants is 0 + 1 + 1 + 0 = 2."
            },
            {
                "Input": "** plants = [5], capacityA = 10, capacityB = 8",
                "Output": "** 0",
                "Explanation": "**\n- There is only one plant.\n- Alice's watering can has 10 units of water, whereas Bob's can has 8 units. Since Alice has more water in her can, she waters this plant.\nSo, the total number of times they have to refill is 0."
            }
        ]
    },
    {
        "Title": "Maximum Fruits Harvested After at Most K Steps",
        "slug": "maximum-fruits-harvested-after-at-most-k-steps",
        "description": "Fruits are available at some positions on an infinite x-axis. You are given a 2D integer array `fruits` where `fruits[i] = [positioni, amounti]` depicts `amounti` fruits at the position `positioni`. `fruits` is already **sorted** by `positioni` in **ascending order**, and each `positioni` is **unique**.\n\n\nYou are also given an integer `startPos` and an integer `k`. Initially, you are at the position `startPos`. From any position, you can either walk to the **left or right**. It takes **one step** to move **one unit** on the x-axis, and you can walk **at most** `k` steps in total. For every position you reach, you harvest all the fruits at that position, and the fruits will disappear from that position.\n\n\nReturn *the **maximum total number** of fruits you can harvest*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Sliding Window",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** fruits = [[2,8],[6,3],[8,6]], startPos = 5, k = 4",
                "Output": "** 9",
                "Explanation": "** \nThe optimal way is to:\n- Move right to position 6 and harvest 3 fruits\n- Move right to position 8 and harvest 6 fruits\nYou moved 3 steps and harvested 3 + 6 = 9 fruits in total."
            },
            {
                "Input": "** fruits = [[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]], startPos = 5, k = 4",
                "Output": "** 14",
                "Explanation": "** \nYou can move at most k = 4 steps, so you cannot reach position 0 nor 10.\nThe optimal way is to:\n- Harvest the 7 fruits at the starting position 5\n- Move left to position 4 and harvest 1 fruit\n- Move right to position 6 and harvest 2 fruits\n- Move right to position 7 and harvest 4 fruits\nYou moved 1 + 3 = 4 steps and harvested 7 + 1 + 2 + 4 = 14 fruits in total."
            },
            {
                "Input": "** fruits = [[0,3],[6,4],[8,5]], startPos = 3, k = 2",
                "Output": "** 0",
                "Explanation": "**\nYou can move at most k = 2 steps and cannot reach any position with fruits."
            }
        ]
    },
    {
        "Title": "Find First Palindromic String in the Array",
        "slug": "find-first-palindromic-string-in-the-array",
        "description": "Given an array of strings `words`, return *the first **palindromic** string in the array*. If there is no such string, return *an **empty string*** `\"\"`.\n\n\nA string is **palindromic** if it reads the same forward and backward.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** words = [\"abc\",\"car\",\"ada\",\"racecar\",\"cool\"]",
                "Output": "** \"ada\"",
                "Explanation": "** The first string that is palindromic is \"ada\".\nNote that \"racecar\" is also palindromic, but it is not the first."
            },
            {
                "Input": "** words = [\"notapalindrome\",\"racecar\"]",
                "Output": "** \"racecar\"",
                "Explanation": "** The first and only string that is palindromic is \"racecar\"."
            },
            {
                "Input": "** words = [\"def\",\"ghi\"]",
                "Output": "** \"\"",
                "Explanation": "** There are no palindromic strings, so the empty string is returned."
            }
        ]
    },
    {
        "Title": "Adding Spaces to a String",
        "slug": "adding-spaces-to-a-string",
        "description": "You are given a **0-indexed** string `s` and a **0-indexed** integer array `spaces` that describes the indices in the original string where spaces will be added. Each space should be inserted **before** the character at the given index.\n\n\n For example, given `s = \"EnjoyYourCoffee\"` and `spaces = [5, 9]`, we place spaces before `'Y'` and `'C'`, which are at indices `5` and `9` respectively. Thus, we obtain `\"Enjoy **Y**our **C**offee\"`.\n\n\nReturn*the modified string **after** the spaces have been added.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "String",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** s = \"LeetcodeHelpsMeLearn\", spaces = [8,13,15]",
                "Output": "** \"Leetcode Helps Me Learn\"",
                "Explanation": "** \nThe indices 8, 13, and 15 correspond to the underlined characters in \"Leetcode**H**elps**M**e**L**earn\".\nWe then place spaces before those characters."
            },
            {
                "Input": "** s = \"icodeinpython\", spaces = [1,5,7,9]",
                "Output": "** \"i code in py thon\"",
                "Explanation": "**\nThe indices 1, 5, 7, and 9 correspond to the underlined characters in \"i**c**ode**i**n**p**y**t**hon\".\nWe then place spaces before those characters."
            },
            {
                "Input": "** s = \"spacing\", spaces = [0,1,2,3,4,5,6]",
                "Output": "** \" s p a c i n g\"",
                "Explanation": "**\nWe are also able to place spaces before the first character of the string."
            }
        ]
    },
    {
        "Title": "Number of Smooth Descent Periods of a Stock",
        "slug": "number-of-smooth-descent-periods-of-a-stock",
        "description": "You are given an integer array `prices` representing the daily price history of a stock, where `prices[i]` is the stock price on the `ith` day.\n\n\nA **smooth descent period** of a stock consists of **one or more contiguous** days such that the price on each day is **lower** than the price on the **preceding day** by **exactly** `1`. The first day of the period is exempted from this rule.\n\n\nReturn *the number of **smooth descent periods***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** prices = [3,2,1,4]",
                "Output": "** 7",
                "Explanation": "** There are 7 smooth descent periods:\n[3], [2], [1], [4], [3,2], [2,1], and [3,2,1]\nNote that a period with one day is a smooth descent period by the definition."
            },
            {
                "Input": "** prices = [8,6,7,7]",
                "Output": "** 4",
                "Explanation": "** There are 4 smooth descent periods: [8], [6], [7], and [7]\nNote that [8,6] is not a smooth descent period as 8 - 6 \u2260 1."
            },
            {
                "Input": "** prices = [1]",
                "Output": "** 1",
                "Explanation": "** There is 1 smooth descent period: [1]"
            }
        ]
    },
    {
        "Title": "Minimum Operations to Make the Array K-Increasing",
        "slug": "minimum-operations-to-make-the-array-k-increasing",
        "description": "You are given a **0-indexed** array `arr` consisting of `n` positive integers, and a positive integer `k`.\n\n\nThe array `arr` is called **K-increasing** if `arr[i-k] <= arr[i]` holds for every index `i`, where `k <= i <= n-1`.\n\n\n For example, `arr = [4, 1, 5, 2, 6, 2]` is K-increasing for `k = 2` because:\n\t+ `arr[0] <= arr[2] (4 <= 5)`\n\t+ `arr[1] <= arr[3] (1 <= 2)`\n\t+ `arr[2] <= arr[4] (5 <= 6)`\n\t+ `arr[3] <= arr[5] (2 <= 2)`\n However, the same `arr` is not K-increasing for `k = 1` (because `arr[0] > arr[1]`) or `k = 3` (because `arr[0] > arr[3]`).\n\n\nIn one **operation**, you can choose an index `i` and **change** `arr[i]` into **any** positive integer.\n\n\nReturn *the **minimum number of operations** required to make the array K-increasing for the given* `k`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** arr = [5,4,3,2,1], k = 1",
                "Output": "** 4",
                "Explanation": "**For k = 1, the resultant array has to be non-decreasing.\nSome of the K-increasing arrays that can be formed are [5,**6**,**7**,**8**,**9**], [**1**,**1**,**1**,**1**,1], [**2**,**2**,3,**4**,**4**]. All of them require 4 operations.\nIt is suboptimal to change the array to, for example, [**6**,**7**,**8**,**9**,**10**] because it would take 5 operations.\nIt can be shown that we cannot make the array K-increasing in less than 4 operations."
            },
            {
                "Input": "** arr = [4,1,5,2,6,2], k = 2",
                "Output": "** 0",
                "Explanation": "**\nThis is the same example as the one in the problem description.\nHere, for every index i where 2 <= i <= 5, arr[i-2] <=arr[i].\nSince the given array is already K-increasing, we do not need to perform any operations."
            },
            {
                "Input": "** arr = [4,1,5,2,6,2], k = 3",
                "Output": "** 2",
                "Explanation": "**\nIndices 3 and 5 are the only ones not satisfying arr[i-3] <= arr[i] for 3 <= i <= 5.\nOne of the ways we can make the array K-increasing is by changing arr[3] to 4 and arr[5] to 5.\nThe array will now be [4,1,5,**4**,6,**5**].\nNote that there can be other ways to make the array K-increasing, but none of them require less than 2 operations."
            }
        ]
    },
    {
        "Title": "Maximum Number of Words Found in Sentences",
        "slug": "maximum-number-of-words-found-in-sentences",
        "description": "A **sentence** is a list of **words** that are separated by a single space\u00a0with no leading or trailing spaces.\n\n\nYou are given an array of strings `sentences`, where each `sentences[i]` represents a single **sentence**.\n\n\nReturn *the **maximum number of words** that appear in a single sentence*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "examples": [
            {
                "Input": "** sentences = [\"alice and bob love leetcode\", \"i think so too\", \"this is great thanks very much\"]",
                "Output": "** 6",
                "Explanation": "** \n- The first sentence, \"alice and bob love leetcode\", has 5 words in total.\n- The second sentence, \"i think so too\", has 4 words in total.\n- The third sentence, \"this is great thanks very much\", has 6 words in total.\nThus, the maximum number of words in a single sentence comes from the third sentence, which has 6 words."
            },
            {
                "Input": "** sentences = [\"please wait\", \"continue to fight\", \"continue to win\"]",
                "Output": "** 3",
                "Explanation": "** It is possible that multiple sentences contain the same number of words. \nIn this example, the second and third sentences (underlined) have the same number of words."
            }
        ]
    },
    {
        "Title": "Find All Possible Recipes from Given Supplies",
        "slug": "find-all-possible-recipes-from-given-supplies",
        "description": "You have information about `n` different recipes. You are given a string array `recipes` and a 2D string array `ingredients`. The `ith` recipe has the name `recipes[i]`, and you can **create** it if you have **all** the needed ingredients from `ingredients[i]`. Ingredients to a recipe may need to be created from **other** recipes, i.e., `ingredients[i]` may contain a string that is in `recipes`.\n\n\nYou are also given a string array `supplies` containing all the ingredients that you initially have, and you have an infinite supply of all of them.\n\n\nReturn *a list of all the recipes that you can create.* You may return the answer in **any order**.\n\n\nNote that two recipes may contain each other in their ingredients.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Graph",
            "Topological Sort"
        ],
        "examples": [
            {
                "Input": "** recipes = [\"bread\"], ingredients = [[\"yeast\",\"flour\"]], supplies = [\"yeast\",\"flour\",\"corn\"]",
                "Output": "** [\"bread\"]",
                "Explanation": "**\nWe can create \"bread\" since we have the ingredients \"yeast\" and \"flour\"."
            },
            {
                "Input": "** recipes = [\"bread\",\"sandwich\"], ingredients = [[\"yeast\",\"flour\"],[\"bread\",\"meat\"]], supplies = [\"yeast\",\"flour\",\"meat\"]",
                "Output": "** [\"bread\",\"sandwich\"]",
                "Explanation": "**\nWe can create \"bread\" since we have the ingredients \"yeast\" and \"flour\".\nWe can create \"sandwich\" since we have the ingredient \"meat\" and can create the ingredient \"bread\"."
            },
            {
                "Input": "** recipes = [\"bread\",\"sandwich\",\"burger\"], ingredients = [[\"yeast\",\"flour\"],[\"bread\",\"meat\"],[\"sandwich\",\"meat\",\"bread\"]], supplies = [\"yeast\",\"flour\",\"meat\"]",
                "Output": "** [\"bread\",\"sandwich\",\"burger\"]",
                "Explanation": "**\nWe can create \"bread\" since we have the ingredients \"yeast\" and \"flour\".\nWe can create \"sandwich\" since we have the ingredient \"meat\" and can create the ingredient \"bread\".\nWe can create \"burger\" since we have the ingredient \"meat\" and can create the ingredients \"bread\" and \"sandwich\"."
            }
        ]
    },
    {
        "Title": "Check if a Parentheses String Can Be Valid",
        "slug": "check-if-a-parentheses-string-can-be-valid",
        "description": "A parentheses string is a **non-empty** string consisting only of `'('` and `')'`. It is valid if **any** of the following conditions is **true**:\n\n\n It is `()`.\n It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid parentheses strings.\n It can be written as `(A)`, where `A` is a valid parentheses string.\n\n\nYou are given a parentheses string `s` and a string `locked`, both of length `n`. `locked` is a binary string consisting only of `'0'`s and `'1'`s. For **each** index `i` of `locked`,\n\n\n If `locked[i]` is `'1'`, you **cannot** change `s[i]`.\n But if `locked[i]` is `'0'`, you **can** change `s[i]` to either `'('` or `')'`.\n\n\nReturn `true` *if you can make `s` a valid parentheses string*. Otherwise, return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Stack",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"))()))\", locked = \"010100\"",
                "Output": "** true",
                "Explanation": "** locked[1] == '1' and locked[3] == '1', so we cannot change s[1] or s[3].\nWe change s[0] and s[4] to '(' while leaving s[2] and s[5] unchanged to make s valid."
            }
        ]
    },
    {
        "Title": "Abbreviating the Product of a Range",
        "slug": "abbreviating-the-product-of-a-range",
        "description": "You are given two positive integers `left` and `right` with `left <= right`. Calculate the **product** of all integers in the **inclusive** range `[left, right]`.\n\n\nSince the product may be very large, you will **abbreviate** it following these steps:\n\n\n1. Count all **trailing** zeros in the product and **remove** them. Let us denote this count as `C`.\n\t* For example, there are `3` trailing zeros in `1000`, and there are `0` trailing zeros in `546`.\n2. Denote the remaining number of digits in the product as `d`. If `d > 10`, then express the product as `<pre>...<suf>` where `<pre>` denotes the **first** `5` digits of the product, and `<suf>` denotes the **last** `5` digits of the product **after** removing all trailing zeros. If `d <= 10`, we keep it unchanged.\n\t* For example, we express `1234567654321` as `12345...54321`, but `1234567` is represented as `1234567`.\n3. Finally, represent the product as a **string** `\"<pre>...<suf>eC\"`.\n\t* For example, `12345678987600000` will be represented as `\"12345...89876e5\"`.\n\n\nReturn *a string denoting the **abbreviated product** of all integers in the **inclusive** range* `[left, right]`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** left = 1, right = 4",
                "Output": "** \"24e0\"",
                "Explanation": "** The product is 1 \u00d7 2 \u00d7 3 \u00d7 4 = 24.\nThere are no trailing zeros, so 24 remains the same. The abbreviation will end with \"e0\".\nSince the number of digits is 2, which is less than 10, we do not have to abbreviate it further.\nThus, the final representation is \"24e0\"."
            },
            {
                "Input": "** left = 2, right = 11",
                "Output": "** \"399168e2\"",
                "Explanation": "** The product is 39916800.\nThere are 2 trailing zeros, which we remove to get 399168. The abbreviation will end with \"e2\".\nThe number of digits after removing the trailing zeros is 6, so we do not abbreviate it further.\nHence, the abbreviated product is \"399168e2\"."
            },
            {
                "Input": "** left = 371, right = 375",
                "Output": "** \"7219856259e3\"",
                "Explanation": "** The product is 7219856259000."
            }
        ]
    },
    {
        "Title": "A Number After a Double Reversal",
        "slug": "a-number-after-a-double-reversal",
        "description": "Reversing** an integer means to reverse all its digits.\n\n\n For example, reversing `2021` gives `1202`. Reversing `12300` gives `321` as the **leading zeros are not retained**.\n\n\nGiven an integer `num`, **reverse** `num` to get `reversed1`, **then reverse** `reversed1` to get `reversed2`. Return `true` *if* `reversed2` *equals* `num`. Otherwise return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** num = 526",
                "Output": "** true",
                "Explanation": "** Reverse num to get 625, then reverse 625 to get 526, which equals num."
            },
            {
                "Input": "** num = 1800",
                "Output": "** false",
                "Explanation": "** Reverse num to get 81, then reverse 81 to get 18, which does not equal num."
            },
            {
                "Input": "** num = 0",
                "Output": "** true",
                "Explanation": "** Reverse num to get 0, then reverse 0 to get 0, which equals num."
            }
        ]
    },
    {
        "Title": "Execution of All Suffix Instructions Staying in a Grid",
        "slug": "execution-of-all-suffix-instructions-staying-in-a-grid",
        "description": "There is an `n x n` grid, with the top-left cell at `(0, 0)` and the bottom-right cell at `(n - 1, n - 1)`. You are given the integer `n` and an integer array `startPos` where `startPos = [startrow, startcol]` indicates that a robot is initially at cell `(startrow, startcol)`.\n\n\nYou are also given a **0-indexed** string `s` of length `m` where `s[i]` is the `ith` instruction for the robot: `'L'` (move left), `'R'` (move right), `'U'` (move up), and `'D'` (move down).\n\n\nThe robot can begin executing from any `ith` instruction in `s`. It executes the instructions one by one towards the end of `s` but it stops if either of these conditions is met:\n\n\n The next instruction will move the robot off the grid.\n There are no more instructions left to execute.\n\n\nReturn *an array* `answer` *of length* `m` *where* `answer[i]` *is **the number of instructions** the robot can execute if the robot **begins executing from** the* `ith` *instruction in* `s`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** n = 3, startPos = [0,1], s = \"RRDDLU\"",
                "Output": "** [1,5,4,3,1,0]",
                "Explanation": "** Starting from startPos and beginning execution from the ith instruction:\n- 0th: \"**R**RDDLU\". Only one instruction \"R\" can be executed before it moves off the grid.\n- 1st:  \"**RDDLU**\". All five instructions can be executed while it stays in the grid and ends at (1, 1).\n- 2nd:   \"**DDLU**\". All four instructions can be executed while it stays in the grid and ends at (1, 0).\n- 3rd:    \"**DLU**\". All three instructions can be executed while it stays in the grid and ends at (0, 0).\n- 4th:     \"**L**U\". Only one instruction \"L\" can be executed before it moves off the grid.\n- 5th:      \"U\". If moving up, it would move off the grid."
            },
            {
                "Input": "** n = 2, startPos = [1,1], s = \"LURD\"",
                "Output": "** [4,1,0,0]",
                "Explanation": "**\n- 0th: \"**LURD**\".\n- 1st:  \"**U**RD\".\n- 2nd:   \"RD\".\n- 3rd:    \"D\"."
            },
            {
                "Input": "** n = 1, startPos = [0,0], s = \"LRUD\"",
                "Output": "** [0,0,0,0]",
                "Explanation": "** No matter which instruction the robot begins execution from, it would move off the grid."
            }
        ]
    },
    {
        "Title": "Intervals Between Identical Elements",
        "slug": "intervals-between-identical-elements",
        "description": "You are given a **0-indexed** array of `n` integers `arr`.\n\n\nThe **interval** between two elements in `arr` is defined as the **absolute difference** between their indices. More formally, the **interval** between `arr[i]` and `arr[j]` is `|i - j|`.\n\n\nReturn *an array* `intervals` *of length* `n` *where* `intervals[i]` *is **the sum of intervals** between* `arr[i]` *and each element in* `arr` *with the same value as* `arr[i]`*.\n\n\nNote:** `|x|` is the absolute value of `x`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** arr = [2,1,3,1,2,3,3]",
                "Output": "** [4,2,7,2,4,4,5]",
                "Explanation": "**\n- Index 0: Another 2 is found at index 4. |0 - 4| = 4\n- Index 1: Another 1 is found at index 3. |1 - 3| = 2\n- Index 2: Two more 3s are found at indices 5 and 6. |2 - 5| + |2 - 6| = 7\n- Index 3: Another 1 is found at index 1. |3 - 1| = 2\n- Index 4: Another 2 is found at index 0. |4 - 0| = 4\n- Index 5: Two more 3s are found at indices 2 and 6. |5 - 2| + |5 - 6| = 4\n- Index 6: Two more 3s are found at indices 2 and 5. |6 - 2| + |6 - 5| = 5"
            },
            {
                "Input": "** arr = [10,5,10,10]",
                "Output": "** [5,0,3,4]",
                "Explanation": "**\n- Index 0: Two more 10s are found at indices 2 and 3. |0 - 2| + |0 - 3| = 5\n- Index 1: There is only one 5 in the array, so its sum of intervals to identical elements is 0.\n- Index 2: Two more 10s are found at indices 0 and 3. |2 - 0| + |2 - 3| = 3\n- Index 3: Two more 10s are found at indices 0 and 2. |3 - 0| + |3 - 2| = 4"
            }
        ]
    },
    {
        "Title": "Recover the Original Array",
        "slug": "recover-the-original-array",
        "description": "Alice had a **0-indexed** array `arr` consisting of `n` **positive** integers. She chose an arbitrary **positive integer** `k` and created two new **0-indexed** integer arrays `lower` and `higher` in the following manner:\n\n\n1. `lower[i] = arr[i] - k`, for every index `i` where `0 <= i < n`\n2. `higher[i] = arr[i] + k`, for every index `i` where `0 <= i < n`\n\n\nUnfortunately, Alice lost all three arrays. However, she remembers the integers that were present in the arrays `lower` and `higher`, but not the array each integer belonged to. Help Alice and recover the original array.\n\n\nGiven an array `nums` consisting of `2n` integers, where **exactly** `n` of the integers were present in `lower` and the remaining in `higher`, return *the **original** array* `arr`. In case the answer is not unique, return ***any** valid array*.\n\n\nNote:** The test cases are generated such that there exists **at least one** valid array `arr`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** nums = [2,10,6,4,8,12]",
                "Output": "** [3,7,11]",
                "Explanation": "**\nIf arr = [3,7,11] and k = 1, we get lower = [2,6,10] and higher = [4,8,12].\nCombining lower and higher gives us [2,6,10,4,8,12], which is a permutation of nums.\nAnother valid possibility is that arr = [5,7,9] and k = 3. In that case, lower = [2,4,6] and higher = [8,10,12]."
            },
            {
                "Input": "** nums = [1,1,3,3]",
                "Output": "** [2,2]",
                "Explanation": "**\nIf arr = [2,2] and k = 1, we get lower = [1,1] and higher = [3,3].\nCombining lower and higher gives us [1,1,3,3], which is equal to nums.\nNote that arr cannot be [1,3] because in that case, the only possible way to obtain [1,1,3,3] is with k = 0.\nThis is invalid since k must be positive."
            },
            {
                "Input": "** nums = [5,435]",
                "Output": "** [220]",
                "Explanation": "**\nThe only possible combination is arr = [220] and k = 215. Using them, we get lower = [5] and higher = [435]."
            }
        ]
    },
    {
        "Title": "Check if All A's Appears Before All B's",
        "slug": "check-if-all-as-appears-before-all-bs",
        "description": "Given a string `s` consisting of **only** the characters `'a'` and `'b'`, return `true` *if **every*** `'a'` *appears before **every*** `'b'` *in the string*. Otherwise, return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"aaabbb\"",
                "Output": "** true",
                "Explanation": "**\nThe 'a's are at indices 0, 1, and 2, while the 'b's are at indices 3, 4, and 5.\nHence, every 'a' appears before every 'b' and we return true."
            },
            {
                "Input": "** s = \"abab\"",
                "Output": "** false",
                "Explanation": "**\nThere is an 'a' at index 2 and a 'b' at index 1.\nHence, not every 'a' appears before every 'b' and we return false."
            },
            {
                "Input": "** s = \"bbb\"",
                "Output": "** true",
                "Explanation": "**\nThere are no 'a's, hence, every 'a' appears before every 'b' and we return true."
            }
        ]
    },
    {
        "Title": "Number of Laser Beams in a Bank",
        "slug": "number-of-laser-beams-in-a-bank",
        "description": "Anti-theft security devices are activated inside a bank. You are given a **0-indexed** binary string array `bank` representing the floor plan of the bank, which is an `m x n` 2D matrix. `bank[i]` represents the `ith` row, consisting of `'0'`s and `'1'`s. `'0'` means the cell is empty, while`'1'` means the cell has a security device.\n\n\nThere is **one** laser beam between any **two** security devices **if both** conditions are met:\n\n\n The two devices are located on two **different rows**: `r1` and `r2`, where `r1 < r2`.\n For **each** row `i` where `r1 < i < r2`, there are **no security devices** in the `ith` row.\n\n\nLaser beams are independent, i.e., one beam does not interfere nor join with another.\n\n\nReturn *the total number of laser beams in the bank*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "String",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** bank = [\"011001\",\"000000\",\"010100\",\"001000\"]",
                "Output": "** 8",
                "Explanation": "** Between each of the following device pairs, there is one beam. In total, there are 8 beams:\n * bank[0][1] -- bank[2][1]\n * bank[0][1] -- bank[2][3]\n * bank[0][2] -- bank[2][1]\n * bank[0][2] -- bank[2][3]\n * bank[0][5] -- bank[2][1]\n * bank[0][5] -- bank[2][3]\n * bank[2][1] -- bank[3][2]\n * bank[2][3] -- bank[3][2]\nNote that there is no beam between any device on the 0th row with any on the 3rd row.\nThis is because the 2nd row contains security devices, which breaks the second condition."
            },
            {
                "Input": "** bank = [\"000\",\"111\",\"000\"]",
                "Output": "** 0",
                "Explanation": "** There does not exist two devices located on two different rows."
            }
        ]
    },
    {
        "Title": "Destroying Asteroids",
        "slug": "destroying-asteroids",
        "description": "You are given an integer `mass`, which represents the original mass of a planet. You are further given an integer array `asteroids`, where `asteroids[i]` is the mass of the `ith` asteroid.\n\n\nYou can arrange for the planet to collide with the asteroids in **any arbitrary order**. If the mass of the planet is **greater than or equal to** the mass of the asteroid, the asteroid is **destroyed** and the planet **gains** the mass of the asteroid. Otherwise, the planet is destroyed.\n\n\nReturn `true` *if **all** asteroids can be destroyed. Otherwise, return* `false`*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** mass = 10, asteroids = [3,9,19,5,21]",
                "Output": "** true",
                "Explanation": "** One way to order the asteroids is [9,19,5,3,21]:\n- The planet collides with the asteroid with a mass of 9. New planet mass: 10 + 9 = 19\n- The planet collides with the asteroid with a mass of 19. New planet mass: 19 + 19 = 38\n- The planet collides with the asteroid with a mass of 5. New planet mass: 38 + 5 = 43\n- The planet collides with the asteroid with a mass of 3. New planet mass: 43 + 3 = 46\n- The planet collides with the asteroid with a mass of 21. New planet mass: 46 + 21 = 67\nAll asteroids are destroyed."
            },
            {
                "Input": "** mass = 5, asteroids = [4,9,23,4]",
                "Output": "** false",
                "Explanation": "** \nThe planet cannot ever gain enough mass to destroy the asteroid with a mass of 23.\nAfter the planet destroys the other asteroids, it will have a mass of 5 + 4 + 9 + 4 = 22.\nThis is less than 23, so a collision would not destroy the last asteroid."
            }
        ]
    },
    {
        "Title": "Maximum Employees to Be Invited to a Meeting",
        "slug": "maximum-employees-to-be-invited-to-a-meeting",
        "description": "A company is organizing a meeting and has a list of `n` employees, waiting to be invited. They have arranged for a large **circular** table, capable of seating **any number** of employees.\n\n\nThe employees are numbered from `0` to `n - 1`. Each employee has a **favorite** person and they will attend the meeting **only if** they can sit next to their favorite person at the table. The favorite person of an employee is **not** themself.\n\n\nGiven a **0-indexed** integer array `favorite`, where `favorite[i]` denotes the favorite person of the `ith` employee, return *the **maximum number of employees** that can be invited to the meeting*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Depth-First Search",
            "Graph",
            "Topological Sort"
        ],
        "examples": [
            {
                "Input": "** favorite = [2,2,1,2]",
                "Output": "** 3",
                "Explanation": "**\nThe above figure shows how the company can invite employees 0, 1, and 2, and seat them at the round table.\nAll employees cannot be invited because employee 2 cannot sit beside employees 0, 1, and 3, simultaneously.\nNote that the company can also invite employees 1, 2, and 3, and give them their desired seats.\nThe maximum number of employees that can be invited to the meeting is 3."
            },
            {
                "Input": "** favorite = [3,0,1,4,1]",
                "Output": "** 4",
                "Explanation": "**\nThe above figure shows how the company will invite employees 0, 1, 3, and 4, and seat them at the round table.\nEmployee 2 cannot be invited because the two spots next to their favorite employee 1 are taken.\nSo the company leaves them out of the meeting.\nThe maximum number of employees that can be invited to the meeting is 4."
            }
        ]
    },
    {
        "Title": "Capitalize the Title",
        "slug": "capitalize-the-title",
        "description": "You are given a string `title` consisting of one or more words separated by a single space, where each word consists of English letters. **Capitalize** the string by changing the capitalization of each word such that:\n\n\n If the length of the word is `1` or `2` letters, change all letters to lowercase.\n Otherwise, change the first letter to uppercase and the remaining letters to lowercase.\n\n\nReturn *the **capitalized*** `title`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** title = \"capiTalIze tHe titLe\"",
                "Output": "** \"Capitalize The Title\"",
                "Explanation": "**\nSince all the words have a length of at least 3, the first letter of each word is uppercase, and the remaining letters are lowercase."
            },
            {
                "Input": "** title = \"First leTTeR of EACH Word\"",
                "Output": "** \"First Letter of Each Word\"",
                "Explanation": "**\nThe word \"of\" has length 2, so it is all lowercase.\nThe remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase."
            },
            {
                "Input": "** title = \"i lOve leetcode\"",
                "Output": "** \"i Love Leetcode\"",
                "Explanation": "**\nThe word \"i\" has length 1, so it is lowercase.\nThe remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase."
            }
        ]
    },
    {
        "Title": "Maximum Twin Sum of a Linked List",
        "slug": "maximum-twin-sum-of-a-linked-list",
        "description": "In a linked list of size `n`, where `n` is **even**, the `ith` node (**0-indexed**) of the linked list is known as the **twin** of the `(n-1-i)th` node, if `0 <= i <= (n / 2) - 1`.\n\n\n For example, if `n = 4`, then node `0` is the twin of node `3`, and node `1` is the twin of node `2`. These are the only nodes with twins for `n = 4`.\n\n\nThe **twin sum** is defined as the sum of a node and its twin.\n\n\nGiven the `head` of a linked list with even length, return *the **maximum twin sum** of the linked list*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Two Pointers",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** head = [5,4,2,1]",
                "Output": "** 6",
                "Explanation": "**\nNodes 0 and 1 are the twins of nodes 3 and 2, respectively. All have twin sum = 6.\nThere are no other nodes with twins in the linked list.\nThus, the maximum twin sum of the linked list is 6."
            },
            {
                "Input": "** head = [4,2,2,3]",
                "Output": "** 7",
                "Explanation": "**\nThe nodes with twins present in this linked list are:\n- Node 0 is the twin of node 3 having a twin sum of 4 + 3 = 7.\n- Node 1 is the twin of node 2 having a twin sum of 2 + 2 = 4.\nThus, the maximum twin sum of the linked list is max(7, 4) = 7."
            },
            {
                "Input": "** head = [1,100000]",
                "Output": "** 100001",
                "Explanation": "**\nThere is only one node with a twin in the linked list having twin sum of 1 + 100000 = 100001."
            }
        ]
    },
    {
        "Title": "Longest Palindrome by Concatenating Two Letter Words",
        "slug": "longest-palindrome-by-concatenating-two-letter-words",
        "description": "You are given an array of strings `words`. Each element of `words` consists of **two** lowercase English letters.\n\n\nCreate the **longest possible palindrome** by selecting some elements from `words` and concatenating them in **any order**. Each element can be selected **at most once**.\n\n\nReturn *the **length** of the longest palindrome that you can create*. If it is impossible to create any palindrome, return `0`.\n\n\nA **palindrome** is a string that reads the same forward and backward.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Greedy",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** words = [\"lc\",\"cl\",\"gg\"]",
                "Output": "** 6",
                "Explanation": "** One longest palindrome is \"lc\" + \"gg\" + \"cl\" = \"lcggcl\", of length 6.\nNote that \"clgglc\" is another longest palindrome that can be created."
            },
            {
                "Input": "** words = [\"ab\",\"ty\",\"yt\",\"lc\",\"cl\",\"ab\"]",
                "Output": "** 8",
                "Explanation": "** One longest palindrome is \"ty\" + \"lc\" + \"cl\" + \"yt\" = \"tylcclyt\", of length 8.\nNote that \"lcyttycl\" is another longest palindrome that can be created."
            },
            {
                "Input": "** words = [\"cc\",\"ll\",\"xx\"]",
                "Output": "** 2",
                "Explanation": "** One longest palindrome is \"cc\", of length 2.\nNote that \"ll\" is another longest palindrome that can be created, and so is \"xx\"."
            }
        ]
    },
    {
        "Title": "Stamping the Grid",
        "slug": "stamping-the-grid",
        "description": "You are given an `m x n` binary matrix `grid` where each cell is either `0` (empty) or `1` (occupied).\n\n\nYou are then given stamps of size `stampHeight x stampWidth`. We want to fit the stamps such that they follow the given **restrictions** and **requirements**:\n\n\n1. Cover all the **empty** cells.\n2. Do not cover any of the **occupied** cells.\n3. We can put as **many** stamps as we want.\n4. Stamps can **overlap** with each other.\n5. Stamps are not allowed to be **rotated**.\n6. Stamps must stay completely **inside** the grid.\n\n\nReturn `true` *if it is possible to fit the stamps while following the given restrictions and requirements. Otherwise, return* `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Matrix",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]], stampHeight = 4, stampWidth = 3",
                "Output": "** true",
                "Explanation": "** We have two overlapping stamps (labeled 1 and 2 in the image) that are able to cover all the empty cells."
            },
            {
                "Input": "** grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], stampHeight = 2, stampWidth = 2",
                "Output": "** false",
                "Explanation": "** There is no way to fit the stamps onto all the empty cells without the stamps going outside the grid."
            }
        ]
    },
    {
        "Title": "Check if Every Row and Column Contains All Numbers",
        "slug": "check-if-every-row-and-column-contains-all-numbers",
        "description": "An `n x n` matrix is **valid** if every row and every column contains **all** the integers from `1` to `n` (**inclusive**).\n\n\nGiven an `n x n` integer matrix `matrix`, return `true` *if the matrix is **valid**.* Otherwise, return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** matrix = [[1,2,3],[3,1,2],[2,3,1]]",
                "Output": "** true",
                "Explanation": "** In this case, n = 3, and every row and column contains the numbers 1, 2, and 3.\nHence, we return true."
            },
            {
                "Input": "** matrix = [[1,1,1],[1,2,3],[1,2,3]]",
                "Output": "** false",
                "Explanation": "** In this case, n = 3, but the first row and the first column do not contain the numbers 2 or 3.\nHence, we return false."
            }
        ]
    },
    {
        "Title": "Minimum Swaps to Group All 1's Together II",
        "slug": "minimum-swaps-to-group-all-1s-together-ii",
        "description": "A **swap** is defined as taking two **distinct** positions in an array and swapping the values in them.\n\n\nA **circular** array is defined as an array where we consider the **first** element and the **last** element to be **adjacent**.\n\n\nGiven a **binary** **circular** array `nums`, return *the minimum number of swaps required to group all* `1`*'s present in the array together at **any location***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [0,1,0,1,1,0,0]",
                "Output": "** 1",
                "Explanation": "** Here are a few of the ways to group all the 1's together:\n[0,0,1,1,1,0,0] using 1 swap.\n[0,1,1,1,0,0,0] using 1 swap.\n[1,1,0,0,0,0,1] using 2 swaps (using the circular property of the array).\nThere is no way to group all 1's together with 0 swaps.\nThus, the minimum number of swaps required is 1."
            },
            {
                "Input": "** nums = [0,1,1,1,0,0,1,1,0]",
                "Output": "** 2",
                "Explanation": "** Here are a few of the ways to group all the 1's together:\n[1,1,1,0,0,0,0,1,1] using 2 swaps (using the circular property of the array).\n[1,1,1,1,1,0,0,0,0] using 2 swaps.\nThere is no way to group all 1's together with 0 or 1 swaps.\nThus, the minimum number of swaps required is 2."
            },
            {
                "Input": "** nums = [1,1,0,0,1]",
                "Output": "** 0",
                "Explanation": "** All the 1's are already grouped together due to the circular property of the array.\nThus, the minimum number of swaps required is 0."
            }
        ]
    },
    {
        "Title": "Count Words Obtained After Adding a Letter",
        "slug": "count-words-obtained-after-adding-a-letter",
        "description": "You are given two **0-indexed** arrays of strings `startWords` and `targetWords`. Each string consists of **lowercase English letters** only.\n\n\nFor each string in `targetWords`, check if it is possible to choose a string from `startWords` and perform a **conversion operation** on it to be equal to that from `targetWords`.\n\n\nThe **conversion operation** is described in the following two steps:\n\n\n1. **Append** any lowercase letter that is **not present** in the string to its end.\n\t* For example, if the string is `\"abc\"`, the letters `'d'`, `'e'`, or `'y'` can be added to it, but not `'a'`. If `'d'` is added, the resulting string will be `\"abcd\"`.\n2. **Rearrange** the letters of the new string in **any** arbitrary order.\n\t* For example, `\"abcd\"` can be rearranged to `\"acbd\"`, `\"bacd\"`, `\"cbda\"`, and so on. Note that it can also be rearranged to `\"abcd\"` itself.\n\n\nReturn *the **number of strings** in* `targetWords` *that can be obtained by performing the operations on **any** string of* `startWords`.\n\n\nNote** that you will only be verifying if the string in `targetWords` can be obtained from a string in `startWords` by performing the operations. The strings in `startWords` **do not** actually change during this process.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Bit Manipulation",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** startWords = [\"ant\",\"act\",\"tack\"], targetWords = [\"tack\",\"act\",\"acti\"]",
                "Output": "** 2",
                "Explanation": "**\n- In order to form targetWords[0] = \"tack\", we use startWords[1] = \"act\", append 'k' to it, and rearrange \"actk\" to \"tack\".\n- There is no string in startWords that can be used to obtain targetWords[1] = \"act\".\n  Note that \"act\" does exist in startWords, but we **must** append one letter to the string before rearranging it.\n- In order to form targetWords[2] = \"acti\", we use startWords[1] = \"act\", append 'i' to it, and rearrange \"acti\" to \"acti\" itself."
            },
            {
                "Input": "** startWords = [\"ab\",\"a\"], targetWords = [\"abc\",\"abcd\"]",
                "Output": "** 1",
                "Explanation": "**\n- In order to form targetWords[0] = \"abc\", we use startWords[0] = \"ab\", add 'c' to it, and rearrange it to \"abc\".\n- There is no string in startWords that can be used to obtain targetWords[1] = \"abcd\"."
            }
        ]
    },
    {
        "Title": "Earliest Possible Day of Full Bloom",
        "slug": "earliest-possible-day-of-full-bloom",
        "description": "You have `n` flower seeds. Every seed must be planted first before it can begin to grow, then bloom. Planting a seed takes time and so does the growth of a seed. You are given two **0-indexed** integer arrays `plantTime` and `growTime`, of length `n` each:\n\n\n `plantTime[i]` is the number of **full days** it takes you to **plant** the `ith` seed. Every day, you can work on planting exactly one seed. You **do not** have to work on planting the same seed on consecutive days, but the planting of a seed is not complete **until** you have worked `plantTime[i]` days on planting it in total.\n `growTime[i]` is the number of **full days** it takes the `ith` seed to grow after being completely planted. **After** the last day of its growth, the flower **blooms** and stays bloomed forever.\n\n\nFrom the beginning of day `0`, you can plant the seeds in **any** order.\n\n\nReturn *the **earliest** possible day where **all** seeds are blooming*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** plantTime = [1,4,3], growTime = [2,3,1]",
                "Output": "** 9",
                "Explanation": "** The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.\nOne optimal way is:\nOn day 0, plant the 0th seed. The seed grows for 2 full days and blooms on day 3.\nOn days 1, 2, 3, and 4, plant the 1st seed. The seed grows for 3 full days and blooms on day 8.\nOn days 5, 6, and 7, plant the 2nd seed. The seed grows for 1 full day and blooms on day 9.\nThus, on day 9, all the seeds are blooming."
            },
            {
                "Input": "** plantTime = [1,2,3,2], growTime = [2,1,2,1]",
                "Output": "** 9",
                "Explanation": "** The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.\nOne optimal way is:\nOn day 1, plant the 0th seed. The seed grows for 2 full days and blooms on day 4.\nOn days 0 and 3, plant the 1st seed. The seed grows for 1 full day and blooms on day 5.\nOn days 2, 4, and 5, plant the 2nd seed. The seed grows for 2 full days and blooms on day 8.\nOn days 6 and 7, plant the 3rd seed. The seed grows for 1 full day and blooms on day 9.\nThus, on day 9, all the seeds are blooming."
            }
        ]
    },
    {
        "Title": "Divide a String Into Groups of Size k",
        "slug": "divide-a-string-into-groups-of-size-k",
        "description": "A string `s` can be partitioned into groups of size `k` using the following procedure:\n\n\n The first group consists of the first `k` characters of the string, the second group consists of the next `k` characters of the string, and so on. Each character can be a part of **exactly one** group.\n For the last group, if the string **does not** have `k` characters remaining, a character `fill` is used to complete the group.\n\n\nNote that the partition is done so that after removing the `fill` character from the last group (if it exists) and concatenating all the groups in order, the resultant string should be `s`.\n\n\nGiven the string `s`, the size of each group `k` and the character `fill`, return *a string array denoting the **composition of every group*** `s` *has been divided into, using the above procedure*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** s = \"abcdefghi\", k = 3, fill = \"x\"",
                "Output": "** [\"abc\",\"def\",\"ghi\"]",
                "Explanation": "**\nThe first 3 characters \"abc\" form the first group.\nThe next 3 characters \"def\" form the second group.\nThe last 3 characters \"ghi\" form the third group.\nSince all groups can be completely filled by characters from the string, we do not need to use fill.\nThus, the groups formed are \"abc\", \"def\", and \"ghi\"."
            },
            {
                "Input": "** s = \"abcdefghij\", k = 3, fill = \"x\"",
                "Output": "** [\"abc\",\"def\",\"ghi\",\"jxx\"]",
                "Explanation": "**\nSimilar to the previous example, we are forming the first three groups \"abc\", \"def\", and \"ghi\".\nFor the last group, we can only use the character 'j' from the string. To complete this group, we add 'x' twice.\nThus, the 4 groups formed are \"abc\", \"def\", \"ghi\", and \"jxx\"."
            }
        ]
    },
    {
        "Title": "Minimum Moves to Reach Target Score",
        "slug": "minimum-moves-to-reach-target-score",
        "description": "You are playing a game with integers. You start with the integer `1` and you want to reach the integer `target`.\n\n\nIn one move, you can either:\n\n\n **Increment** the current integer by one (i.e., `x = x + 1`).\n **Double** the current integer (i.e., `x = 2 * x`).\n\n\nYou can use the **increment** operation **any** number of times, however, you can only use the **double** operation **at most** `maxDoubles` times.\n\n\nGiven the two integers `target` and `maxDoubles`, return *the minimum number of moves needed to reach* `target` *starting with* `1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** target = 5, maxDoubles = 0",
                "Output": "** 4",
                "Explanation": "** Keep incrementing by 1 until you reach target."
            },
            {
                "Input": "** target = 19, maxDoubles = 2",
                "Output": "** 7",
                "Explanation": "** Initially, x = 1\nIncrement 3 times so x = 4\nDouble once so x = 8\nIncrement once so x = 9\nDouble again so x = 18\nIncrement once so x = 19"
            },
            {
                "Input": "** target = 10, maxDoubles = 4",
                "Output": "** 4",
                "Explanation": "**Initially, x = 1\nIncrement once so x = 2\nDouble once so x = 4\nIncrement once so x = 5\nDouble again so x = 10"
            }
        ]
    },
    {
        "Title": "Solving Questions With Brainpower",
        "slug": "solving-questions-with-brainpower",
        "description": "You are given a **0-indexed** 2D integer array `questions` where `questions[i] = [pointsi, brainpoweri]`.\n\n\nThe array describes the questions of an exam, where you have to process the questions **in order** (i.e., starting from question `0`) and make a decision whether to **solve** or **skip** each question. Solving question `i` will **earn** you `pointsi` points but you will be **unable** to solve each of the next `brainpoweri` questions. If you skip question `i`, you get to make the decision on the next question.\n\n\n For example, given `questions = [[3, 2], [4, 3], [4, 4], [2, 5]]`:\n\t+ If question `0` is solved, you will earn `3` points but you will be unable to solve questions `1` and `2`.\n\t+ If instead, question `0` is skipped and question `1` is solved, you will earn `4` points but you will be unable to solve questions `2` and `3`.\n\n\nReturn *the **maximum** points you can earn for the exam*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** questions = [[3,2],[4,3],[4,4],[2,5]]",
                "Output": "** 5",
                "Explanation": "** The maximum points can be earned by solving questions 0 and 3.\n- Solve question 0: Earn 3 points, will be unable to solve the next 2 questions\n- Unable to solve questions 1 and 2\n- Solve question 3: Earn 2 points\nTotal points earned: 3 + 2 = 5. There is no other way to earn 5 or more points."
            },
            {
                "Input": "** questions = [[1,1],[2,2],[3,3],[4,4],[5,5]]",
                "Output": "** 7",
                "Explanation": "** The maximum points can be earned by solving questions 1 and 4.\n- Skip question 0\n- Solve question 1: Earn 2 points, will be unable to solve the next 2 questions\n- Unable to solve questions 2 and 3\n- Solve question 4: Earn 5 points\nTotal points earned: 2 + 5 = 7. There is no other way to earn 7 or more points."
            }
        ]
    },
    {
        "Title": "Maximum Running Time of N Computers",
        "slug": "maximum-running-time-of-n-computers",
        "description": "You have `n` computers. You are given the integer `n` and a **0-indexed** integer array `batteries` where the `ith` battery can **run** a computer for `batteries[i]` minutes. You are interested in running **all** `n` computers **simultaneously** using the given batteries.\n\n\nInitially, you can insert **at most one battery** into each computer. After that and at any integer time moment, you can remove a battery from a computer and insert another battery **any number of times**. The inserted battery can be a totally new battery or a battery from another computer. You may assume that the removing and inserting processes take no time.\n\n\nNote that the batteries cannot be recharged.\n\n\nReturn *the **maximum** number of minutes you can run all the* `n` *computers simultaneously.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** n = 2, batteries = [3,3,3]",
                "Output": "** 4",
                "Explanation": "** \nInitially, insert battery 0 into the first computer and battery 1 into the second computer.\nAfter two minutes, remove battery 1 from the second computer and insert battery 2 instead. Note that battery 1 can still run for one minute.\nAt the end of the third minute, battery 0 is drained, and you need to remove it from the first computer and insert battery 1 instead.\nBy the end of the fourth minute, battery 1 is also drained, and the first computer is no longer running.\nWe can run the two computers simultaneously for at most 4 minutes, so we return 4."
            },
            {
                "Input": "** n = 2, batteries = [1,1,1,1]",
                "Output": "** 2",
                "Explanation": "** \nInitially, insert battery 0 into the first computer and battery 2 into the second computer. \nAfter one minute, battery 0 and battery 2 are drained so you need to remove them and insert battery 1 into the first computer and battery 3 into the second computer. \nAfter another minute, battery 1 and battery 3 are also drained so the first and second computers are no longer running.\nWe can run the two computers simultaneously for at most 2 minutes, so we return 2."
            }
        ]
    },
    {
        "Title": "Minimum Cost of Buying Candies With Discount",
        "slug": "minimum-cost-of-buying-candies-with-discount",
        "description": "A shop is selling candies at a discount. For **every two** candies sold, the shop gives a **third** candy for **free**.\n\n\nThe customer can choose **any** candy to take away for free as long as the cost of the chosen candy is less than or equal to the **minimum** cost of the two candies bought.\n\n\n For example, if there are `4` candies with costs `1`, `2`, `3`, and `4`, and the customer buys candies with costs `2` and `3`, they\u00a0can take the candy with cost `1` for free, but not the candy with cost `4`.\n\n\nGiven a **0-indexed** integer array `cost`, where `cost[i]` denotes the cost of the `ith` candy, return *the **minimum cost** of buying **all** the candies*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** cost = [1,2,3]",
                "Output": "** 5",
                "Explanation": "** We buy the candies with costs 2 and 3, and take the candy with cost 1 for free.\nThe total cost of buying all candies is 2 + 3 = 5. This is the **only** way we can buy the candies.\nNote that we cannot buy candies with costs 1 and 3, and then take the candy with cost 2 for free.\nThe cost of the free candy has to be less than or equal to the minimum cost of the purchased candies."
            },
            {
                "Input": "** cost = [6,5,7,9,2,2]",
                "Output": "** 23",
                "Explanation": "** The way in which we can get the minimum cost is described below:\n- Buy candies with costs 9 and 7\n- Take the candy with cost 6 for free\n- We buy candies with costs 5 and 2\n- Take the last remaining candy with cost 2 for free\nHence, the minimum cost to buy all candies is 9 + 7 + 5 + 2 = 23."
            },
            {
                "Input": "** cost = [5,5]",
                "Output": "** 10",
                "Explanation": "** Since there are only 2 candies, we buy both of them. There is not a third candy we can take for free.\nHence, the minimum cost to buy all candies is 5 + 5 = 10."
            }
        ]
    },
    {
        "Title": "Count the Hidden Sequences",
        "slug": "count-the-hidden-sequences",
        "description": "You are given a **0-indexed** array of `n` integers `differences`, which describes the **differences** between each pair of **consecutive** integers of a **hidden** sequence of length `(n + 1)`. More formally, call the hidden sequence `hidden`, then we have that `differences[i] = hidden[i + 1] - hidden[i]`.\n\n\nYou are further given two integers `lower` and `upper` that describe the **inclusive** range of values `[lower, upper]` that the hidden sequence can contain.\n\n\n For example, given `differences = [1, -3, 4]`, `lower = 1`, `upper = 6`, the hidden sequence is a sequence of length `4` whose elements are in between `1` and `6` (**inclusive**).\n\t+ `[3, 4, 1, 5]` and `[4, 5, 2, 6]` are possible hidden sequences.\n\t+ `[5, 6, 3, 7]` is not possible since it contains an element greater than `6`.\n\t+ `[1, 2, 3, 4]` is not possible since the differences are not correct.\n\n\nReturn *the number of **possible** hidden sequences there are.* If there are no possible sequences, return `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** differences = [1,-3,4], lower = 1, upper = 6",
                "Output": "** 2",
                "Explanation": "** The possible hidden sequences are:\n- [3, 4, 1, 5]\n- [4, 5, 2, 6]\nThus, we return 2."
            },
            {
                "Input": "** differences = [3,-4,5,1,-2], lower = -4, upper = 5",
                "Output": "** 4",
                "Explanation": "** The possible hidden sequences are:\n- [-3, 0, -4, 1, 2, 0]\n- [-2, 1, -3, 2, 3, 1]\n- [-1, 2, -2, 3, 4, 2]\n- [0, 3, -1, 4, 5, 3]\nThus, we return 4."
            },
            {
                "Input": "** differences = [4,-7,2], lower = 3, upper = 6",
                "Output": "** 0",
                "Explanation": "** There are no possible hidden sequences. Thus, we return 0."
            }
        ]
    },
    {
        "Title": "K Highest Ranked Items Within a Price Range",
        "slug": "k-highest-ranked-items-within-a-price-range",
        "description": "You are given a **0-indexed** 2D integer array `grid` of size `m x n` that represents a map of the items in a shop. The integers in the grid represent the following:\n\n\n `0` represents a wall that you cannot pass through.\n `1` represents an empty cell that you can freely move to and from.\n All other positive integers represent the price of an item in that cell. You may also freely move to and from these item cells.\n\n\nIt takes `1` step to travel between adjacent grid cells.\n\n\nYou are also given integer arrays `pricing` and `start` where `pricing = [low, high]` and `start = [row, col]` indicates that you start at the position `(row, col)` and are interested only in items with a price in the range of `[low, high]` (**inclusive**). You are further given an integer `k`.\n\n\nYou are interested in the **positions** of the `k` **highest-ranked** items whose prices are **within** the given price range. The rank is determined by the **first** of these criteria that is different:\n\n\n1. Distance, defined as the length of the shortest path from the `start` (**shorter** distance has a higher rank).\n2. Price (**lower** price has a higher rank, but it must be **in the price range**).\n3. The row number (**smaller** row number has a higher rank).\n4. The column number (**smaller** column number has a higher rank).\n\n\nReturn *the* `k` *highest-ranked items within the price range **sorted** by their rank (highest to lowest)*. If there are fewer than `k` reachable items within the price range, return ***all** of them*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Breadth-First Search",
            "Sorting",
            "Heap (Priority Queue)",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,2,0,1],[1,3,0,1],[0,2,5,1]], pricing = [2,5], start = [0,0], k = 3",
                "Output": "** [[0,1],[1,1],[2,1]]",
                "Explanation": "** You start at (0,0).\nWith a price range of [2,5], we can take items from (0,1), (1,1), (2,1) and (2,2).\nThe ranks of these items are:\n- (0,1) with distance 1\n- (1,1) with distance 2\n- (2,1) with distance 3\n- (2,2) with distance 4\nThus, the 3 highest ranked items in the price range are (0,1), (1,1), and (2,1)."
            },
            {
                "Input": "** grid = [[1,2,0,1],[1,3,3,1],[0,2,5,1]], pricing = [2,3], start = [2,3], k = 2",
                "Output": "** [[2,1],[1,2]]",
                "Explanation": "** You start at (2,3).\nWith a price range of [2,3], we can take items from (0,1), (1,1), (1,2) and (2,1).\nThe ranks of these items are:\n- (2,1) with distance 2, price 2\n- (1,2) with distance 2, price 3\n- (1,1) with distance 3\n- (0,1) with distance 4\nThus, the 2 highest ranked items in the price range are (2,1) and (1,2)."
            },
            {
                "Input": "** grid = [[1,1,1],[0,0,1],[2,3,4]], pricing = [2,3], start = [0,0], k = 3",
                "Output": "** [[2,1],[2,0]]",
                "Explanation": "** You start at (0,0).\nWith a price range of [2,3], we can take items from (2,0) and (2,1). \nThe ranks of these items are: \n- (2,1) with distance 5\n- (2,0) with distance 6\nThus, the 2 highest ranked items in the price range are (2,1) and (2,0). \nNote that k = 3 but there are only 2 reachable items within the price range."
            }
        ]
    },
    {
        "Title": "Number of Ways to Divide a Long Corridor",
        "slug": "number-of-ways-to-divide-a-long-corridor",
        "description": "Along a long library corridor, there is a line of seats and decorative plants. You are given a **0-indexed** string `corridor` of length `n` consisting of letters `'S'` and `'P'` where each `'S'` represents a seat and each `'P'` represents a plant.\n\n\nOne room divider has **already** been installed to the left of index `0`, and **another** to the right of index `n - 1`. Additional room dividers can be installed. For each position between indices `i - 1` and `i` (`1 <= i <= n - 1`), at most one divider can be installed.\n\n\nDivide the corridor into non-overlapping sections, where each section has **exactly two seats** with any number of plants. There may be multiple ways to perform the division. Two ways are **different** if there is a position with a room divider installed in the first way but not in the second way.\n\n\nReturn *the number of ways to divide the corridor*. Since the answer may be very large, return it **modulo** `109 + 7`. If there is no way, return `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** corridor = \"SSPPSPS\"",
                "Output": "** 3",
                "Explanation": "** There are 3 different ways to divide the corridor.\nThe black bars in the above image indicate the two room dividers already installed.\nNote that in each of the ways, **each** section has exactly **two** seats."
            },
            {
                "Input": "** corridor = \"PPSPSP\"",
                "Output": "** 1",
                "Explanation": "** There is only 1 way to divide the corridor, by not installing any additional dividers.\nInstalling any would create some section that does not have exactly two seats."
            },
            {
                "Input": "** corridor = \"S\"",
                "Output": "** 0",
                "Explanation": "** There is no way to divide the corridor because there will always be a section that does not have exactly two seats."
            }
        ]
    },
    {
        "Title": "Count Elements With Strictly Smaller and Greater Elements ",
        "slug": "count-elements-with-strictly-smaller-and-greater-elements",
        "description": "Given an integer array `nums`, return *the number of elements that have **both** a strictly smaller and a strictly greater element appear in* `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [11,7,2,15]",
                "Output": "** 2",
                "Explanation": "** The element 7 has the element 2 strictly smaller than it and the element 11 strictly greater than it.\nElement 11 has element 7 strictly smaller than it and element 15 strictly greater than it.\nIn total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums."
            },
            {
                "Input": "** nums = [-3,3,3,90]",
                "Output": "** 2",
                "Explanation": "** The element 3 has the element -3 strictly smaller than it and the element 90 strictly greater than it.\nSince there are two elements with the value 3, in total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums."
            }
        ]
    },
    {
        "Title": "Rearrange Array Elements by Sign",
        "slug": "rearrange-array-elements-by-sign",
        "description": "You are given a **0-indexed** integer array `nums` of **even** length consisting of an **equal** number of positive and negative integers.\n\n\nYou should return the array of nums such that the the array follows the given conditions:\n\n\n1. Every **consecutive pair** of integers have **opposite signs**.\n2. For all integers with the same sign, the **order** in which they were present in `nums` is **preserved**.\n3. The rearranged array begins with a positive integer.\n\n\nReturn *the modified array after rearranging the elements to satisfy the aforementioned conditions*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [3,1,-2,-5,2,-4]",
                "Output": "** [3,-2,1,-5,2,-4]",
                "Explanation": "**\nThe positive integers in nums are [3,1,2]. The negative integers are [-2,-5,-4].\nThe only possible way to rearrange them such that they satisfy all conditions is [3,-2,1,-5,2,-4].\nOther ways such as [1,-2,2,-5,3,-4], [3,1,2,-2,-5,-4], [-2,3,-5,1,-4,2] are incorrect because they do not satisfy one or more conditions."
            },
            {
                "Input": "** nums = [-1,1]",
                "Output": "** [1,-1]",
                "Explanation": "**\n1 is the only positive integer and -1 the only negative integer in nums.\nSo nums is rearranged to [1,-1]."
            }
        ]
    },
    {
        "Title": "Find All Lonely Numbers in the Array",
        "slug": "find-all-lonely-numbers-in-the-array",
        "description": "You are given an integer array `nums`. A number `x` is **lonely** when it appears only **once**, and no **adjacent** numbers (i.e. `x + 1` and `x - 1)` appear in the array.\n\n\nReturn ***all** lonely numbers in* `nums`. You may return the answer in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [10,6,5,8]",
                "Output": "** [10,8]",
                "Explanation": "** \n- 10 is a lonely number since it appears exactly once and 9 and 11 does not appear in nums.\n- 8 is a lonely number since it appears exactly once and 7 and 9 does not appear in nums.\n- 5 is not a lonely number since 6 appears in nums and vice versa.\nHence, the lonely numbers in nums are [10, 8].\nNote that [8, 10] may also be returned."
            },
            {
                "Input": "** nums = [1,3,5,3]",
                "Output": "** [1,5]",
                "Explanation": "** \n- 1 is a lonely number since it appears exactly once and 0 and 2 does not appear in nums.\n- 5 is a lonely number since it appears exactly once and 4 and 6 does not appear in nums.\n- 3 is not a lonely number since it appears twice.\nHence, the lonely numbers in nums are [1, 5].\nNote that [5, 1] may also be returned."
            }
        ]
    },
    {
        "Title": "Maximum Good People Based on Statements",
        "slug": "maximum-good-people-based-on-statements",
        "description": "There are two types of persons:\n\n\n The **good person**: The person who always tells the truth.\n The **bad person**: The person who might tell the truth and might lie.\n\n\nYou are given a **0-indexed** 2D integer array `statements` of size `n x n` that represents the statements made by `n` people about each other. More specifically, `statements[i][j]` could be one of the following:\n\n\n `0` which represents a statement made by person `i` that person `j` is a **bad** person.\n `1` which represents a statement made by person `i` that person `j` is a **good** person.\n `2` represents that **no statement** is made by person `i` about person `j`.\n\n\nAdditionally, no person ever makes a statement about themselves. Formally, we have that `statements[i][i] = 2` for all `0 <= i < n`.\n\n\nReturn *the **maximum** number of people who can be **good** based on the statements made by the* `n` *people*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Backtracking",
            "Bit Manipulation",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** statements = [[2,1,2],[1,2,2],[2,0,2]]",
                "Output": "** 2",
                "Explanation": "** Each person makes a single statement.\n- Person 0 states that person 1 is good.\n- Person 1 states that person 0 is good.\n- Person 2 states that person 1 is bad.\nLet's take person 2 as the key.\n- Assuming that person 2 is a good person:\n    - Based on the statement made by person 2, person 1 is a bad person.\n    - Now we know for sure that person 1 is bad and person 2 is good.\n    - Based on the statement made by person 1, and since person 1 is bad, they could be:\n        - telling the truth. There will be a contradiction in this case and this assumption is invalid.\n        - lying. In this case, person 0 is also a bad person and lied in their statement.\n    - **Following that person 2 is a good person, there will be only one good person in the group**.\n- Assuming that person 2 is a bad person:\n    - Based on the statement made by person 2, and since person 2 is bad, they could be:\n        - telling the truth. Following this scenario, person 0 and 1 are both bad as explained before.\n            - **Following that person 2 is bad but told the truth, there will be no good persons in the group**.\n        - lying. In this case person 1 is a good person.\n            - Since person 1 is a good person, person 0 is also a good person.\n            - **Following that person 2 is bad and lied, there will be two good persons in the group**.\nWe can see that at most 2 persons are good in the best case, so we return 2.\nNote that there is more than one way to arrive at this conclusion."
            },
            {
                "Input": "** statements = [[2,0],[0,2]]",
                "Output": "** 1",
                "Explanation": "** Each person makes a single statement.\n- Person 0 states that person 1 is bad.\n- Person 1 states that person 0 is bad.\nLet's take person 0 as the key.\n- Assuming that person 0 is a good person:\n    - Based on the statement made by person 0, person 1 is a bad person and was lying.\n    - **Following that person 0 is a good person, there will be only one good person in the group**.\n- Assuming that person 0 is a bad person:\n    - Based on the statement made by person 0, and since person 0 is bad, they could be:\n        - telling the truth. Following this scenario, person 0 and 1 are both bad.\n            - **Following that person 0 is bad but told the truth, there will be no good persons in the group**.\n        - lying. In this case person 1 is a good person.\n            - **Following that person 0 is bad and lied, there will be only one good person in the group**.\nWe can see that at most, one person is good in the best case, so we return 1.\nNote that there is more than one way to arrive at this conclusion."
            }
        ]
    },
    {
        "Title": "Keep Multiplying Found Values by Two",
        "slug": "keep-multiplying-found-values-by-two",
        "description": "You are given an array of integers `nums`. You are also given an integer `original` which is the first number that needs to be searched for in `nums`.\n\n\nYou then do the following steps:\n\n\n1. If `original` is found in `nums`, **multiply** it by two (i.e., set `original = 2 * original`).\n2. Otherwise, **stop** the process.\n3. **Repeat** this process with the new number as long as you keep finding the number.\n\n\nReturn *the **final** value of* `original`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [5,3,6,1,12], original = 3",
                "Output": "** 24",
                "Explanation": "** \n- 3 is found in nums. 3 is multiplied by 2 to obtain 6.\n- 6 is found in nums. 6 is multiplied by 2 to obtain 12.\n- 12 is found in nums. 12 is multiplied by 2 to obtain 24.\n- 24 is not found in nums. Thus, 24 is returned."
            },
            {
                "Input": "** nums = [2,7,9], original = 4",
                "Output": "** 4",
                "Explanation": "**\n- 4 is not found in nums. Thus, 4 is returned."
            }
        ]
    },
    {
        "Title": "All Divisions With the Highest Score of a Binary Array",
        "slug": "all-divisions-with-the-highest-score-of-a-binary-array",
        "description": "You are given a **0-indexed** binary array `nums` of length `n`. `nums` can be divided at index `i` (where `0 <= i <= n)` into two arrays (possibly empty) `numsleft` and `numsright`:\n\n\n `numsleft` has all the elements of `nums` between index `0` and `i - 1` **(inclusive)**, while `numsright` has all the elements of nums between index `i` and `n - 1` **(inclusive)**.\n If `i == 0`, `numsleft` is **empty**, while `numsright` has all the elements of `nums`.\n If `i == n`, `numsleft` has all the elements of nums, while `numsright` is **empty**.\n\n\nThe **division score** of an index `i` is the **sum** of the number of `0`'s in `numsleft` and the number of `1`'s in `numsright`.\n\n\nReturn ***all distinct indices** that have the **highest** possible **division score***. You may return the answer in **any order**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [0,0,1,0]",
                "Output": "** [2,4]",
                "Explanation": "** Division at index\n- 0: numsleft is []. numsright is [0,0,**1**,0]. The score is 0 + 1 = 1.\n- 1: numsleft is [**0**]. numsright is [0,**1**,0]. The score is 1 + 1 = 2.\n- 2: numsleft is [**0**,**0**]. numsright is [**1**,0]. The score is 2 + 1 = 3.\n- 3: numsleft is [**0**,**0**,1]. numsright is [0]. The score is 2 + 0 = 2.\n- 4: numsleft is [**0**,**0**,1,**0**]. numsright is []. The score is 3 + 0 = 3.\nIndices 2 and 4 both have the highest possible division score 3.\nNote the answer [4,2] would also be accepted."
            },
            {
                "Input": "** nums = [0,0,0]",
                "Output": "** [3]",
                "Explanation": "** Division at index\n- 0: numsleft is []. numsright is [0,0,0]. The score is 0 + 0 = 0.\n- 1: numsleft is [**0**]. numsright is [0,0]. The score is 1 + 0 = 1.\n- 2: numsleft is [**0**,**0**]. numsright is [0]. The score is 2 + 0 = 2.\n- 3: numsleft is [**0**,**0**,**0**]. numsright is []. The score is 3 + 0 = 3.\nOnly index 3 has the highest possible division score 3."
            },
            {
                "Input": "** nums = [1,1]",
                "Output": "** [0]",
                "Explanation": "** Division at index\n- 0: numsleft is []. numsright is [**1**,**1**]. The score is 0 + 2 = 2.\n- 1: numsleft is [1]. numsright is [**1**]. The score is 0 + 1 = 1.\n- 2: numsleft is [1,1]. numsright is []. The score is 0 + 0 = 0.\nOnly index 0 has the highest possible division score 2."
            }
        ]
    },
    {
        "Title": "Find Substring With Given Hash Value",
        "slug": "find-substring-with-given-hash-value",
        "description": "The hash of a **0-indexed** string `s` of length `k`, given integers `p` and `m`, is computed using the following function:\n\n\n `hash(s, p, m) = (val(s[0]) * p0 + val(s[1]) * p1 + ... + val(s[k-1]) * pk-1) mod m`.\n\n\nWhere `val(s[i])` represents the index of `s[i]` in the alphabet from `val('a') = 1` to `val('z') = 26`.\n\n\nYou are given a string `s` and the integers `power`, `modulo`, `k`, and `hashValue.` Return `sub`, *the **first** **substring** of* `s` *of length* `k` *such that* `hash(sub, power, modulo) == hashValue`.\n\n\nThe test cases will be generated such that an answer always **exists**.\n\n\nA **substring** is a contiguous non-empty sequence of characters within a string.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Sliding Window",
            "Rolling Hash",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "** s = \"leetcode\", power = 7, modulo = 20, k = 2, hashValue = 0",
                "Output": "** \"ee\"",
                "Explanation": "** The hash of \"ee\" can be computed to be hash(\"ee\", 7, 20) = (5 * 1 + 5 * 7) mod 20 = 40 mod 20 = 0. \n\"ee\" is the first substring of length 2 with hashValue 0. Hence, we return \"ee\"."
            },
            {
                "Input": "** s = \"fbxzaad\", power = 31, modulo = 100, k = 3, hashValue = 32",
                "Output": "** \"fbx\"",
                "Explanation": "** The hash of \"fbx\" can be computed to be hash(\"fbx\", 31, 100) = (6 * 1 + 2 * 31 + 24 * 312) mod 100 = 23132 mod 100 = 32. \nThe hash of \"bxz\" can be computed to be hash(\"bxz\", 31, 100) = (2 * 1 + 24 * 31 + 26 * 312) mod 100 = 25732 mod 100 = 32. \n\"fbx\" is the first substring of length 3 with hashValue 32. Hence, we return \"fbx\".\nNote that \"bxz\" also has a hash of 32 but it appears later than \"fbx\"."
            }
        ]
    },
    {
        "Title": "Groups of Strings",
        "slug": "groups-of-strings",
        "description": "You are given a **0-indexed** array of strings `words`. Each string consists of **lowercase English letters** only. No letter occurs more than once in any string of `words`.\n\n\nTwo strings `s1` and `s2` are said to be **connected** if the set of letters of `s2` can be obtained from the set of letters of `s1` by any **one** of the following operations:\n\n\n Adding exactly one letter to the set of the letters of `s1`.\n Deleting exactly one letter from the set of the letters of `s1`.\n Replacing exactly one letter from the set of the letters of `s1` with any letter, **including** itself.\n\n\nThe array `words` can be divided into one or more non-intersecting **groups**. A string belongs to a group if any **one** of the following is true:\n\n\n It is connected to **at least one** other string of the group.\n It is the **only** string present in the group.\n\n\nNote that the strings in `words` should be grouped in such a manner that a string belonging to a group cannot be connected to a string present in any other group. It can be proved that such an arrangement is always unique.\n\n\nReturn *an array* `ans` *of size* `2` *where:\n\n\n `ans[0]` *is the **maximum number** of groups* `words` *can be divided into, and\n `ans[1]` *is the **size of the largest** group*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Bit Manipulation",
            "Union Find"
        ],
        "examples": [
            {
                "Input": "** words = [\"a\",\"b\",\"ab\",\"cde\"]",
                "Output": "** [2,3]",
                "Explanation": "**\n- words[0] can be used to obtain words[1] (by replacing 'a' with 'b'), and words[2] (by adding 'b'). So words[0] is connected to words[1] and words[2].\n- words[1] can be used to obtain words[0] (by replacing 'b' with 'a'), and words[2] (by adding 'a'). So words[1] is connected to words[0] and words[2].\n- words[2] can be used to obtain words[0] (by deleting 'b'), and words[1] (by deleting 'a'). So words[2] is connected to words[0] and words[1].\n- words[3] is not connected to any string in words.\nThus, words can be divided into 2 groups [\"a\",\"b\",\"ab\"] and [\"cde\"]. The size of the largest group is 3."
            },
            {
                "Input": "** words = [\"a\",\"ab\",\"abc\"]",
                "Output": "** [1,3]",
                "Explanation": "**\n- words[0] is connected to words[1].\n- words[1] is connected to words[0] and words[2].\n- words[2] is connected to words[1].\nSince all strings are connected to each other, they should be grouped together.\nThus, the size of the largest group is 3."
            }
        ]
    },
    {
        "Title": "Minimum Sum of Four Digit Number After Splitting Digits",
        "slug": "minimum-sum-of-four-digit-number-after-splitting-digits",
        "description": "You are given a **positive** integer `num` consisting of exactly four digits. Split `num` into two new integers `new1` and `new2` by using the **digits** found in `num`. **Leading zeros** are allowed in `new1` and `new2`, and **all** the digits found in `num` must be used.\n\n\n For example, given `num = 2932`, you have the following digits: two `2`'s, one `9` and one `3`. Some of the possible pairs `[new1, new2]` are `[22, 93]`, `[23, 92]`, `[223, 9]` and `[2, 329]`.\n\n\nReturn *the **minimum** possible sum of* `new1` *and* `new2`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** num = 2932",
                "Output": "** 52",
                "Explanation": "** Some possible pairs [new1, new2] are [29, 23], [223, 9], etc.\nThe minimum sum can be obtained by the pair [29, 23]: 29 + 23 = 52."
            },
            {
                "Input": "** num = 4009",
                "Output": "** 13",
                "Explanation": "** Some possible pairs [new1, new2] are [0, 49], [490, 0], etc. \nThe minimum sum can be obtained by the pair [4, 9]: 4 + 9 = 13."
            }
        ]
    },
    {
        "Title": "Partition Array According to Given Pivot",
        "slug": "partition-array-according-to-given-pivot",
        "description": "You are given a **0-indexed** integer array `nums` and an integer `pivot`. Rearrange `nums` such that the following conditions are satisfied:\n\n\n Every element less than `pivot` appears **before** every element greater than `pivot`.\n Every element equal to `pivot` appears **in between** the elements less than and greater than `pivot`.\n The **relative order** of the elements less than `pivot` and the elements greater than `pivot` is maintained.\n\t+ More formally, consider every `pi`, `pj` where `pi` is the new position of the `ith` element and `pj` is the new position of the `jth` element. For elements less than `pivot`, if `i < j` and `nums[i] < pivot` and `nums[j] < pivot`, then `pi < pj`. Similarly for elements greater than `pivot`, if `i < j` and `nums[i] > pivot` and `nums[j] > pivot`, then `pi < pj`.\n\n\nReturn `nums` *after the rearrangement.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [9,12,5,10,14,3,10], pivot = 10",
                "Output": "** [9,5,3,10,10,12,14]",
                "Explanation": "** \nThe elements 9, 5, and 3 are less than the pivot so they are on the left side of the array.\nThe elements 12 and 14 are greater than the pivot so they are on the right side of the array.\nThe relative ordering of the elements less than and greater than pivot is also maintained. [9, 5, 3] and [12, 14] are the respective orderings."
            },
            {
                "Input": "** nums = [-3,4,3,2], pivot = 2",
                "Output": "** [-3,2,4,3]",
                "Explanation": "** \nThe element -3 is less than the pivot so it is on the left side of the array.\nThe elements 4 and 3 are greater than the pivot so they are on the right side of the array.\nThe relative ordering of the elements less than and greater than pivot is also maintained. [-3] and [4, 3] are the respective orderings."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Set Cooking Time",
        "slug": "minimum-cost-to-set-cooking-time",
        "description": "A generic microwave supports cooking times for:\n\n\n at least `1` second.\n at most `99` minutes and `99` seconds.\n\n\nTo set the cooking time, you push **at most four digits**. The microwave normalizes what you push as four digits by **prepending zeroes**. It interprets the **first** two digits as the minutes and the **last** two digits as the seconds. It then **adds** them up as the cooking time. For example,\n\n\n You push `9` `5` `4` (three digits). It is normalized as `0954` and interpreted as `9` minutes and `54` seconds.\n You push `0` `0` `0` `8` (four digits). It is interpreted as `0` minutes and `8` seconds.\n You push `8` `0` `9` `0`. It is interpreted as `80` minutes and `90` seconds.\n You push `8` `1` `3` `0`. It is interpreted as `81` minutes and `30` seconds.\n\n\nYou are given integers `startAt`, `moveCost`, `pushCost`, and `targetSeconds`. **Initially**, your finger is on the digit `startAt`. Moving the finger above **any specific digit** costs `moveCost` units of fatigue. Pushing the digit below the finger **once** costs `pushCost` units of fatigue.\n\n\nThere can be multiple ways to set the microwave to cook for `targetSeconds` seconds but you are interested in the way with the minimum cost.\n\n\nReturn *the **minimum cost** to set* `targetSeconds` *seconds of cooking time*.\n\n\nRemember that one minute consists of `60` seconds.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** startAt = 1, moveCost = 2, pushCost = 1, targetSeconds = 600",
                "Output": "** 6",
                "Explanation": "** The following are the possible ways to set the cooking time.\n- 1 0 0 0, interpreted as 10 minutes and 0 seconds.\n\u00a0 The finger is already on digit 1, pushes 1 (with cost 1), moves to 0 (with cost 2), pushes 0 (with cost 1), pushes 0 (with cost 1), and pushes 0 (with cost 1).\n\u00a0 The cost is: 1 + 2 + 1 + 1 + 1 = 6. This is the minimum cost.\n- 0 9 6 0, interpreted as 9 minutes and 60 seconds. That is also 600 seconds.\n\u00a0 The finger moves to 0 (with cost 2), pushes 0 (with cost 1), moves to 9 (with cost 2), pushes 9 (with cost 1), moves to 6 (with cost 2), pushes 6 (with cost 1), moves to 0 (with cost 2), and pushes 0 (with cost 1).\n\u00a0 The cost is: 2 + 1 + 2 + 1 + 2 + 1 + 2 + 1 = 12.\n- 9 6 0, normalized as 0960 and interpreted as 9 minutes and 60 seconds.\n\u00a0 The finger moves to 9 (with cost 2), pushes 9 (with cost 1), moves to 6 (with cost 2), pushes 6 (with cost 1), moves to 0 (with cost 2), and pushes 0 (with cost 1).\n\u00a0 The cost is: 2 + 1 + 2 + 1 + 2 + 1 = 9."
            },
            {
                "Input": "** startAt = 0, moveCost = 1, pushCost = 2, targetSeconds = 76",
                "Output": "** 6",
                "Explanation": "** The optimal way is to push two digits: 7 6, interpreted as 76 seconds.\nThe finger moves to 7 (with cost 1), pushes 7 (with cost 2), moves to 6 (with cost 1), and pushes 6 (with cost 2). The total cost is: 1 + 2 + 1 + 2 = 6\nNote other possible ways are 0076, 076, 0116, and 116, but none of them produces the minimum cost."
            }
        ]
    },
    {
        "Title": "Minimum Difference in Sums After Removal of Elements",
        "slug": "minimum-difference-in-sums-after-removal-of-elements",
        "description": "You are given a **0-indexed** integer array `nums` consisting of `3 * n` elements.\n\n\nYou are allowed to remove any **subsequence** of elements of size **exactly** `n` from `nums`. The remaining `2 * n` elements will be divided into two **equal** parts:\n\n\n The first `n` elements belonging to the first part and their sum is `sumfirst`.\n The next `n` elements belonging to the second part and their sum is `sumsecond`.\n\n\nThe **difference in sums** of the two parts is denoted as `sumfirst - sumsecond`.\n\n\n For example, if `sumfirst = 3` and `sumsecond = 2`, their difference is `1`.\n Similarly, if `sumfirst = 2` and `sumsecond = 3`, their difference is `-1`.\n\n\nReturn *the **minimum difference** possible between the sums of the two parts after the removal of* `n` *elements*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** nums = [3,1,2]",
                "Output": "** -1",
                "Explanation": "** Here, nums has 3 elements, so n = 1. \nThus we have to remove 1 element from nums and divide the array into two equal parts.\n- If we remove nums[0] = 3, the array will be [1,2]. The difference in sums of the two parts will be 1 - 2 = -1.\n- If we remove nums[1] = 1, the array will be [3,2]. The difference in sums of the two parts will be 3 - 2 = 1.\n- If we remove nums[2] = 2, the array will be [3,1]. The difference in sums of the two parts will be 3 - 1 = 2.\nThe minimum difference between sums of the two parts is min(-1,1,2) = -1."
            },
            {
                "Input": "** nums = [7,9,5,8,1,3]",
                "Output": "** 1",
                "Explanation": "** Here n = 2. So we must remove 2 elements and divide the remaining array into two parts containing two elements each.\nIf we remove nums[2] = 5 and nums[3] = 8, the resultant array will be [7,9,1,3]. The difference in sums will be (7+9) - (1+3) = 12.\nTo obtain the minimum difference, we should remove nums[1] = 9 and nums[4] = 1. The resultant array becomes [7,5,8,3]. The difference in sums of the two parts is (7+5) - (8+3) = 1.\nIt can be shown that it is not possible to obtain a difference smaller than 1."
            }
        ]
    },
    {
        "Title": "Sort Even and Odd Indices Independently",
        "slug": "sort-even-and-odd-indices-independently",
        "description": "You are given a **0-indexed** integer array `nums`. Rearrange the values of `nums` according to the following rules:\n\n\n1. Sort the values at **odd indices** of `nums` in **non-increasing** order.\n\t* For example, if `nums = [4,**1**,2,**3**]` before this step, it becomes `[4,**3**,2,**1**]` after. The values at odd indices `1` and `3` are sorted in non-increasing order.\n2. Sort the values at **even indices** of `nums` in **non-decreasing** order.\n\t* For example, if `nums = [**4**,1,**2**,3]` before this step, it becomes `[**2**,1,**4**,3]` after. The values at even indices `0` and `2` are sorted in non-decreasing order.\n\n\nReturn *the array formed after rearranging the values of* `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [4,1,2,3]",
                "Output": "** [2,3,4,1]",
                "Explanation": "** \nFirst, we sort the values present at odd indices (1 and 3) in non-increasing order.\nSo, nums changes from [4,**1**,2,**3**] to [4,**3**,2,**1**].\nNext, we sort the values present at even indices (0 and 2) in non-decreasing order.\nSo, nums changes from [**4**,1,**2**,3] to [**2**,3,**4**,1].\nThus, the array formed after rearranging the values is [2,3,4,1]."
            },
            {
                "Input": "** nums = [2,1]",
                "Output": "** [2,1]",
                "Explanation": "** \nSince there is exactly one odd index and one even index, no rearrangement of values takes place.\nThe resultant array formed is [2,1], which is the same as the initial array."
            }
        ]
    },
    {
        "Title": "Smallest Value of the Rearranged Number",
        "slug": "smallest-value-of-the-rearranged-number",
        "description": "You are given an integer `num.` **Rearrange** the digits of `num` such that its value is **minimized** and it does not contain **any** leading zeros.\n\n\nReturn *the rearranged number with minimal value*.\n\n\nNote that the sign of the number does not change after rearranging the digits.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** num = 310",
                "Output": "** 103",
                "Explanation": "** The possible arrangements for the digits of 310 are 013, 031, 103, 130, 301, 310. \nThe arrangement with the smallest value that does not contain any leading zeros is 103."
            },
            {
                "Input": "** num = -7605",
                "Output": "** -7650",
                "Explanation": "** Some possible arrangements for the digits of -7605 are -7650, -6705, -5076, -0567.\nThe arrangement with the smallest value that does not contain any leading zeros is -7650."
            }
        ]
    },
    {
        "Title": "Design Bitset",
        "slug": "design-bitset",
        "description": "A **Bitset** is a data structure that compactly stores bits.\n\n\nImplement the `Bitset` class:\n\n\n `Bitset(int size)` Initializes the Bitset with `size` bits, all of which are `0`.\n `void fix(int idx)` Updates the value of the bit at the index `idx` to `1`. If the value was already `1`, no change occurs.\n `void unfix(int idx)` Updates the value of the bit at the index `idx` to `0`. If the value was already `0`, no change occurs.\n `void flip()` Flips the values of each bit in the Bitset. In other words, all bits with value `0` will now have value `1` and vice versa.\n `boolean all()` Checks if the value of **each** bit in the Bitset is `1`. Returns `true` if it satisfies the condition, `false` otherwise.\n `boolean one()` Checks if there is **at least one** bit in the Bitset with value `1`. Returns `true` if it satisfies the condition, `false` otherwise.\n `int count()` Returns the **total number** of bits in the Bitset which have value `1`.\n `String toString()` Returns the current composition of the Bitset. Note that in the resultant string, the character at the `ith` index should coincide with the value at the `ith` bit of the Bitset.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Design"
        ],
        "examples": [
            {
                "Input": "[\"Bitset\", \"fix\", \"fix\", \"flip\", \"all\", \"unfix\", \"flip\", \"one\", \"unfix\", \"count\", \"toString\"]\n[[5], [3], [1], [], [], [0], [], [], [0], [], []]",
                "Output": "[null, null, null, null, false, null, null, true, null, 2, \"01010\"]",
                "Explanation": "Bitset bs = new Bitset(5); // bitset = \"00000\".\nbs.fix(3);     // the value at idx = 3 is updated to 1, so bitset = \"00010\".\nbs.fix(1);     // the value at idx = 1 is updated to 1, so bitset = \"01010\". \nbs.flip();     // the value of each bit is flipped, so bitset = \"10101\". \nbs.all();      // return False, as not all values of the bitset are 1.\nbs.unfix(0);   // the value at idx = 0 is updated to 0, so bitset = \"00101\".\nbs.flip();     // the value of each bit is flipped, so bitset = \"11010\". \nbs.one();      // return True, as there is at least 1 index with value 1.\nbs.unfix(0);   // the value at idx = 0 is updated to 0, so bitset = \"01010\".\nbs.count();    // return 2, as there are 2 bits with value 1.\nbs.toString(); // return \"01010\", which is the composition of bitset."
            }
        ]
    },
    {
        "Title": "Minimum Time to Remove All Cars Containing Illegal Goods",
        "slug": "minimum-time-to-remove-all-cars-containing-illegal-goods",
        "description": "You are given a **0-indexed** binary string `s` which represents a sequence of train cars. `s[i] = '0'` denotes that the `ith` car does **not** contain illegal goods and `s[i] = '1'` denotes that the `ith` car does contain illegal goods.\n\n\nAs the train conductor, you would like to get rid of all the cars containing illegal goods. You can do any of the following three operations **any** number of times:\n\n\n1. Remove a train car from the **left** end (i.e., remove `s[0]`) which takes 1 unit of time.\n2. Remove a train car from the **right** end (i.e., remove `s[s.length - 1]`) which takes 1 unit of time.\n3. Remove a train car from **anywhere** in the sequence which takes 2 units of time.\n\n\nReturn *the **minimum** time to remove all the cars containing illegal goods*.\n\n\nNote that an empty sequence of cars is considered to have no cars containing illegal goods.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"**11**00**1**0**1**\"",
                "Output": "** 5",
                "Explanation": "** \nOne way to remove all the cars containing illegal goods from the sequence is to\n- remove a car from the left end 2 times. Time taken is 2 * 1 = 2.\n- remove a car from the right end. Time taken is 1.\n- remove the car containing illegal goods found in the middle. Time taken is 2.\nThis obtains a total time of 2 + 1 + 2 = 5. \n\nAn alternative way is to\n- remove a car from the left end 2 times. Time taken is 2 * 1 = 2.\n- remove a car from the right end 3 times. Time taken is 3 * 1 = 3.\nThis also obtains a total time of 2 + 3 = 5.\n\n5 is the minimum time taken to remove all the cars containing illegal goods. \nThere are no other ways to remove them with less time."
            },
            {
                "Input": "** s = \"00**1**0\"",
                "Output": "** 2",
                "Explanation": "**\nOne way to remove all the cars containing illegal goods from the sequence is to\n- remove a car from the left end 3 times. Time taken is 3 * 1 = 3.\nThis obtains a total time of 3.\n\nAnother way to remove all the cars containing illegal goods from the sequence is to\n- remove the car containing illegal goods found in the middle. Time taken is 2.\nThis obtains a total time of 2.\n\nAnother way to remove all the cars containing illegal goods from the sequence is to \n- remove a car from the right end 2 times. Time taken is 2 * 1 = 2. \nThis obtains a total time of 2.\n\n2 is the minimum time taken to remove all the cars containing illegal goods. \nThere are no other ways to remove them with less time."
            }
        ]
    },
    {
        "Title": "Count Operations to Obtain Zero",
        "slug": "count-operations-to-obtain-zero",
        "description": "You are given two **non-negative** integers `num1` and `num2`.\n\n\nIn one **operation**, if `num1 >= num2`, you must subtract `num2` from `num1`, otherwise subtract `num1` from `num2`.\n\n\n For example, if `num1 = 5` and `num2 = 4`, subtract `num2` from `num1`, thus obtaining `num1 = 1` and `num2 = 4`. However, if `num1 = 4` and `num2 = 5`, after one operation, `num1 = 4` and `num2 = 1`.\n\n\nReturn *the **number of operations** required to make either* `num1 = 0` *or* `num2 = 0`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** num1 = 2, num2 = 3",
                "Output": "** 3",
                "Explanation": "** \n- Operation 1: num1 = 2, num2 = 3. Since num1 < num2, we subtract num1 from num2 and get num1 = 2, num2 = 3 - 2 = 1.\n- Operation 2: num1 = 2, num2 = 1. Since num1 > num2, we subtract num2 from num1.\n- Operation 3: num1 = 1, num2 = 1. Since num1 == num2, we subtract num2 from num1.\nNow num1 = 0 and num2 = 1. Since num1 == 0, we do not need to perform any further operations.\nSo the total number of operations required is 3."
            },
            {
                "Input": "** num1 = 10, num2 = 10",
                "Output": "** 1",
                "Explanation": "** \n- Operation 1: num1 = 10, num2 = 10. Since num1 == num2, we subtract num2 from num1 and get num1 = 10 - 10 = 0.\nNow num1 = 0 and num2 = 10. Since num1 == 0, we are done.\nSo the total number of operations required is 1."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Make the Array Alternating",
        "slug": "minimum-operations-to-make-the-array-alternating",
        "description": "You are given a **0-indexed** array `nums` consisting of `n` positive integers.\n\n\nThe array `nums` is called **alternating** if:\n\n\n `nums[i - 2] == nums[i]`, where `2 <= i <= n - 1`.\n `nums[i - 1] != nums[i]`, where `1 <= i <= n - 1`.\n\n\nIn one **operation**, you can choose an index `i` and **change** `nums[i]` into **any** positive integer.\n\n\nReturn *the **minimum number of operations** required to make the array alternating*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [3,1,3,2,4,3]",
                "Output": "** 3",
                "Explanation": "**\nOne way to make the array alternating is by converting it to [3,1,3,**1**,**3**,**1**].\nThe number of operations required in this case is 3.\nIt can be proven that it is not possible to make the array alternating in less than 3 operations."
            },
            {
                "Input": "** nums = [1,2,2,2,2]",
                "Output": "** 2",
                "Explanation": "**\nOne way to make the array alternating is by converting it to [1,2,**1**,2,**1**].\nThe number of operations required in this case is 2.\nNote that the array cannot be converted to [**2**,2,2,2,2] because in this case nums[0] == nums[1] which violates the conditions of an alternating array."
            }
        ]
    },
    {
        "Title": "Removing Minimum Number of Magic Beans",
        "slug": "removing-minimum-number-of-magic-beans",
        "description": "You are given an array of **positive** integers `beans`, where each integer represents the number of magic beans found in a particular magic bag.\n\n\nRemove** any number of beans (**possibly none**) from each bag such that the number of beans in each remaining **non-empty** bag (still containing **at least one** bean) is **equal**. Once a bean has been removed from a bag, you are **not** allowed to return it to any of the bags.\n\n\nReturn *the **minimum** number of magic beans that you have to remove*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting",
            "Enumeration",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** beans = [4,1,6,5]",
                "Output": "** 4",
                "Explanation": "** \n- We remove 1 bean from the bag with only 1 bean.\n  This results in the remaining bags: [4,**0**,6,5]\n- Then we remove 2 beans from the bag with 6 beans.\n  This results in the remaining bags: [4,0,**4**,5]\n- Then we remove 1 bean from the bag with 5 beans.\n  This results in the remaining bags: [4,0,4,**4**]\nWe removed a total of 1 + 2 + 1 = 4 beans to make the remaining non-empty bags have an equal number of beans.\nThere are no other solutions that remove 4 beans or fewer."
            },
            {
                "Input": "** beans = [2,10,3,2]",
                "Output": "** 7",
                "Explanation": "**\n- We remove 2 beans from one of the bags with 2 beans.\n  This results in the remaining bags: [**0**,10,3,2]\n- Then we remove 2 beans from the other bag with 2 beans.\n  This results in the remaining bags: [0,10,3,**0**]\n- Then we remove 3 beans from the bag with 3 beans. \n  This results in the remaining bags: [0,10,**0**,0]\nWe removed a total of 2 + 2 + 3 = 7 beans to make the remaining non-empty bags have an equal number of beans.\nThere are no other solutions that removes 7 beans or fewer."
            }
        ]
    },
    {
        "Title": "Maximum AND Sum of Array",
        "slug": "maximum-and-sum-of-array",
        "description": "You are given an integer array `nums` of length `n` and an integer `numSlots` such that `2 * numSlots >= n`. There are `numSlots` slots numbered from `1` to `numSlots`.\n\n\nYou have to place all `n` integers into the slots such that each slot contains at **most** two numbers. The **AND sum** of a given placement is the sum of the **bitwise** `AND` of every number with its respective slot number.\n\n\n For example, the **AND sum** of placing the numbers `[1, 3]` into slot `1` and `[4, 6]` into slot `2` is equal to `(1 AND 1) + (3 AND 1) + (4 AND 2) + (6 AND 2) = 1 + 1 + 0 + 2 = 4`.\n\n\nReturn *the maximum possible **AND sum** of* `nums` *given* `numSlots` *slots.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5,6], numSlots = 3",
                "Output": "** 9",
                "Explanation": "** One possible placement is [1, 4] into slot 1, [2, 6] into slot 2, and [3, 5] into slot 3. \nThis gives the maximum AND sum of (1 AND 1) + (4 AND 1) + (2 AND 2) + (6 AND 2) + (3 AND 3) + (5 AND 3) = 1 + 0 + 2 + 2 + 3 + 1 = 9."
            },
            {
                "Input": "** nums = [1,3,10,4,7,1], numSlots = 9",
                "Output": "** 24",
                "Explanation": "** One possible placement is [1, 1] into slot 1, [3] into slot 3, [4] into slot 4, [7] into slot 7, and [10] into slot 9.\nThis gives the maximum AND sum of (1 AND 1) + (1 AND 1) + (3 AND 3) + (4 AND 4) + (7 AND 7) + (10 AND 9) = 1 + 1 + 3 + 4 + 7 + 8 = 24.\nNote that slots 2, 5, 6, and 8 are empty which is permitted."
            }
        ]
    },
    {
        "Title": "Count Equal and Divisible Pairs in an Array",
        "slug": "count-equal-and-divisible-pairs-in-an-array",
        "description": "Given a **0-indexed** integer array `nums` of length `n` and an integer `k`, return *the **number of pairs*** `(i, j)` *where* `0 <= i < j < n`, *such that* `nums[i] == nums[j]` *and* `(i * j)` *is divisible by* `k`.\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [3,1,2,2,2,1,3], k = 2",
                "Output": "** 4",
                "Explanation": "**\nThere are 4 pairs that meet all the requirements:\n- nums[0] == nums[6], and 0 * 6 == 0, which is divisible by 2.\n- nums[2] == nums[3], and 2 * 3 == 6, which is divisible by 2.\n- nums[2] == nums[4], and 2 * 4 == 8, which is divisible by 2.\n- nums[3] == nums[4], and 3 * 4 == 12, which is divisible by 2."
            },
            {
                "Input": "** nums = [1,2,3,4], k = 1",
                "Output": "** 0",
                "Explanation": "** Since no value in nums is repeated, there are no pairs (i,j) that meet all the requirements."
            }
        ]
    },
    {
        "Title": "Find Three Consecutive Integers That Sum to a Given Number",
        "slug": "find-three-consecutive-integers-that-sum-to-a-given-number",
        "description": "Given an integer `num`, return *three consecutive integers (as a sorted array)* *that **sum** to* `num`. If `num` cannot be expressed as the sum of three consecutive integers, return *an **empty** array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** num = 33",
                "Output": "** [10,11,12]",
                "Explanation": "** 33 can be expressed as 10 + 11 + 12 = 33.\n10, 11, 12 are 3 consecutive integers, so we return [10, 11, 12]."
            },
            {
                "Input": "** num = 4",
                "Output": "** []",
                "Explanation": "** There is no way to express 4 as the sum of 3 consecutive integers."
            }
        ]
    },
    {
        "Title": "Maximum Split of Positive Even Integers",
        "slug": "maximum-split-of-positive-even-integers",
        "description": "You are given an integer `finalSum`. Split it into a sum of a **maximum** number of **unique** positive even integers.\n\n\n For example, given `finalSum = 12`, the following splits are **valid** (unique positive even integers summing up to `finalSum`): `(12)`, `(2 + 10)`, `(2 + 4 + 6)`, and `(4 + 8)`. Among them, `(2 + 4 + 6)` contains the maximum number of integers. Note that `finalSum` cannot be split into `(2 + 2 + 4 + 4)` as all the numbers should be unique.\n\n\nReturn *a list of integers that represent a valid split containing a **maximum** number of integers*. If no valid split exists for `finalSum`, return *an **empty** list*. You may return the integers in **any** order.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Backtracking",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** finalSum = 12",
                "Output": "** [2,4,6]",
                "Explanation": "** The following are valid splits: (12), (2 + 10), (2 + 4 + 6), and (4 + 8).\n(2 + 4 + 6) has the maximum number of integers, which is 3. Thus, we return [2,4,6].\nNote that [2,6,4], [6,2,4], etc. are also accepted."
            },
            {
                "Input": "** finalSum = 7",
                "Output": "** []",
                "Explanation": "** There are no valid splits for the given finalSum.\nThus, we return an empty array."
            },
            {
                "Input": "** finalSum = 28",
                "Output": "** [6,8,2,12]",
                "Explanation": "** The following are valid splits: (2 + 26), (6 + 8 + 2 + 12), and (4 + 24). \n(6 + 8 + 2 + 12) has the maximum number of integers, which is 4. Thus, we return [6,8,2,12].\nNote that [10,2,4,12], [6,2,4,16], etc. are also accepted."
            }
        ]
    },
    {
        "Title": "Count Good Triplets in an Array",
        "slug": "count-good-triplets-in-an-array",
        "description": "You are given two **0-indexed** arrays `nums1` and `nums2` of length `n`, both of which are **permutations** of `[0, 1, ..., n - 1]`.\n\n\nA **good triplet** is a set of `3` **distinct** values which are present in **increasing order** by position both in `nums1` and `nums2`. In other words, if we consider `pos1v` as the index of the value `v` in `nums1` and `pos2v` as the index of the value `v` in `nums2`, then a good triplet will be a set `(x, y, z)` where `0 <= x, y, z <= n - 1`, such that `pos1x < pos1y < pos1z` and `pos2x < pos2y < pos2z`.\n\n\nReturn *the **total number** of good triplets*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Divide and Conquer",
            "Binary Indexed Tree",
            "Segment Tree",
            "Merge Sort",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** nums1 = [2,0,1,3], nums2 = [0,1,2,3]",
                "Output": "** 1",
                "Explanation": "** \nThere are 4 triplets (x,y,z) such that pos1x < pos1y < pos1z. They are (2,0,1), (2,0,3), (2,1,3), and (0,1,3). \nOut of those triplets, only the triplet (0,1,3) satisfies pos2x < pos2y < pos2z. Hence, there is only 1 good triplet."
            },
            {
                "Input": "** nums1 = [4,0,1,3,2], nums2 = [4,1,0,2,3]",
                "Output": "** 4",
                "Explanation": "** The 4 good triplets are (4,0,3), (4,0,2), (4,1,3), and (4,1,2)."
            }
        ]
    },
    {
        "Title": "Count Integers With Even Digit Sum",
        "slug": "count-integers-with-even-digit-sum",
        "description": "Given a positive integer `num`, return *the number of positive integers **less than or equal to*** `num` *whose digit sums are **even***.\n\n\nThe **digit sum** of a positive integer is the sum of all its digits.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** num = 4",
                "Output": "** 2",
                "Explanation": "**\nThe only integers less than or equal to 4 whose digit sums are even are 2 and 4."
            },
            {
                "Input": "** num = 30",
                "Output": "** 14",
                "Explanation": "**\nThe 14 integers less than or equal to 30 whose digit sums are even are\n2, 4, 6, 8, 11, 13, 15, 17, 19, 20, 22, 24, 26, and 28."
            }
        ]
    },
    {
        "Title": "Merge Nodes in Between Zeros",
        "slug": "merge-nodes-in-between-zeros",
        "description": "You are given the `head` of a linked list, which contains a series of integers **separated** by `0`'s. The **beginning** and **end** of the linked list will have `Node.val == 0`.\n\n\nFor **every** two consecutive `0`'s, **merge** all the nodes lying in between them into a single node whose value is the **sum** of all the merged nodes. The modified list should not contain any `0`'s.\n\n\nReturn *the* `head` *of the modified linked list*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** head = [0,3,1,0,4,5,2,0]",
                "Output": "** [4,11]",
                "Explanation": "** \nThe above figure represents the given linked list. The modified list contains\n- The sum of the nodes marked in green: 3 + 1 = 4.\n- The sum of the nodes marked in red: 4 + 5 + 2 = 11."
            },
            {
                "Input": "** head = [0,1,0,3,0,2,2,0]",
                "Output": "** [1,3,4]",
                "Explanation": "** \nThe above figure represents the given linked list. The modified list contains\n- The sum of the nodes marked in green: 1 = 1.\n- The sum of the nodes marked in red: 3 = 3.\n- The sum of the nodes marked in yellow: 2 + 2 = 4."
            }
        ]
    },
    {
        "Title": "Construct String With Repeat Limit",
        "slug": "construct-string-with-repeat-limit",
        "description": "You are given a string `s` and an integer `repeatLimit`. Construct a new string `repeatLimitedString` using the characters of `s` such that no letter appears **more than** `repeatLimit` times **in a row**. You do **not** have to use all characters from `s`.\n\n\nReturn *the **lexicographically largest*** `repeatLimitedString` *possible*.\n\n\nA string `a` is **lexicographically larger** than a string `b` if in the first position where `a` and `b` differ, string `a` has a letter that appears later in the alphabet than the corresponding letter in `b`. If the first `min(a.length, b.length)` characters do not differ, then the longer string is the lexicographically larger one.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Greedy",
            "Heap (Priority Queue)",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** s = \"cczazcc\", repeatLimit = 3",
                "Output": "** \"zzcccac\"",
                "Explanation": "** We use all of the characters from s to construct the repeatLimitedString \"zzcccac\".\nThe letter 'a' appears at most 1 time in a row.\nThe letter 'c' appears at most 3 times in a row.\nThe letter 'z' appears at most 2 times in a row.\nHence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.\nThe string is the lexicographically largest repeatLimitedString possible so we return \"zzcccac\".\nNote that the string \"zzcccca\" is lexicographically larger but the letter 'c' appears more than 3 times in a row, so it is not a valid repeatLimitedString."
            },
            {
                "Input": "** s = \"aababab\", repeatLimit = 2",
                "Output": "** \"bbabaa\"",
                "Explanation": "** We use only some of the characters from s to construct the repeatLimitedString \"bbabaa\". \nThe letter 'a' appears at most 2 times in a row.\nThe letter 'b' appears at most 2 times in a row.\nHence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.\nThe string is the lexicographically largest repeatLimitedString possible so we return \"bbabaa\".\nNote that the string \"bbabaaa\" is lexicographically larger but the letter 'a' appears more than 2 times in a row, so it is not a valid repeatLimitedString."
            }
        ]
    },
    {
        "Title": "Count Array Pairs Divisible by K",
        "slug": "count-array-pairs-divisible-by-k",
        "description": "Given a **0-indexed** integer array `nums` of length `n` and an integer `k`, return *the **number of pairs*** `(i, j)` *such that:\n\n\n `0 <= i < j <= n - 1` *and\n `nums[i] * nums[j]` *is divisible by* `k`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5], k = 2",
                "Output": "** 7",
                "Explanation": "** \nThe 7 pairs of indices whose corresponding products are divisible by 2 are\n(0, 1), (0, 3), (1, 2), (1, 3), (1, 4), (2, 3), and (3, 4).\nTheir products are 2, 4, 6, 8, 10, 12, and 20 respectively.\nOther pairs such as (0, 2) and (2, 4) have products 3 and 15 respectively, which are not divisible by 2."
            },
            {
                "Input": "** nums = [1,2,3,4], k = 5",
                "Output": "** 0",
                "Explanation": "** There does not exist any pair of indices whose corresponding product is divisible by 5."
            }
        ]
    },
    {
        "Title": "Counting Words With a Given Prefix",
        "slug": "counting-words-with-a-given-prefix",
        "description": "You are given an array of strings `words` and a string `pref`.\n\n\nReturn *the number of strings in* `words` *that contain* `pref` *as a **prefix***.\n\n\nA **prefix** of a string `s` is any leading contiguous substring of `s`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "String",
            "String Matching"
        ],
        "examples": [
            {
                "Input": "** words = [\"pay\",\"**at**tention\",\"practice\",\"**at**tend\"], pref = \"at\"",
                "Output": "** 2",
                "Explanation": "** The 2 strings that contain \"at\" as a prefix are: \"**at**tention\" and \"**at**tend\"."
            },
            {
                "Input": "** words = [\"leetcode\",\"win\",\"loops\",\"success\"], pref = \"code\"",
                "Output": "** 0",
                "Explanation": "** There are no strings that contain \"code\" as a prefix."
            }
        ]
    },
    {
        "Title": "Minimum Number of Steps to Make Two Strings Anagram II",
        "slug": "minimum-number-of-steps-to-make-two-strings-anagram-ii",
        "description": "You are given two strings `s` and `t`. In one step, you can append **any character** to either `s` or `t`.\n\n\nReturn *the minimum number of steps to make* `s` *and* `t` ***anagrams** of each other.\n\n\nAn **anagram** of a string is a string that contains the same characters with a different (or the same) ordering.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** s = \"**lee**tco**de**\", t = \"co**a**t**s**\"",
                "Output": "** 7",
                "Explanation": "** \n- In 2 steps, we can append the letters in \"as\" onto s = \"leetcode\", forming s = \"leetcode**as**\".\n- In 5 steps, we can append the letters in \"leede\" onto t = \"coats\", forming t = \"coats**leede**\".\n\"leetcodeas\" and \"coatsleede\" are now anagrams of each other.\nWe used a total of 2 + 5 = 7 steps.\nIt can be shown that there is no way to make them anagrams of each other with less than 7 steps."
            },
            {
                "Input": "** s = \"night\", t = \"thing\"",
                "Output": "** 0",
                "Explanation": "** The given strings are already anagrams of each other. Thus, we do not need any further steps."
            }
        ]
    },
    {
        "Title": "Minimum Time to Complete Trips",
        "slug": "minimum-time-to-complete-trips",
        "description": "You are given an array `time` where `time[i]` denotes the time taken by the `ith` bus to complete **one trip**.\n\n\nEach bus can make multiple trips **successively**; that is, the next trip can start **immediately after** completing the current trip. Also, each bus operates **independently**; that is, the trips of one bus do not influence the trips of any other bus.\n\n\nYou are also given an integer `totalTrips`, which denotes the number of trips all buses should make **in total**. Return *the **minimum time** required for all buses to complete **at least*** `totalTrips` *trips*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** time = [1,2,3], totalTrips = 5",
                "Output": "** 3",
                "Explanation": "**\n- At time t = 1, the number of trips completed by each bus are [1,0,0]. \n  The total number of trips completed is 1 + 0 + 0 = 1.\n- At time t = 2, the number of trips completed by each bus are [2,1,0]. \n  The total number of trips completed is 2 + 1 + 0 = 3.\n- At time t = 3, the number of trips completed by each bus are [3,1,1]. \n  The total number of trips completed is 3 + 1 + 1 = 5.\nSo the minimum time needed for all buses to complete at least 5 trips is 3."
            },
            {
                "Input": "** time = [2], totalTrips = 1",
                "Output": "** 2",
                "Explanation": "**\nThere is only one bus, and it will complete its first trip at t = 2.\nSo the minimum time needed to complete 1 trip is 2."
            }
        ]
    },
    {
        "Title": "Minimum Time to Finish the Race",
        "slug": "minimum-time-to-finish-the-race",
        "description": "You are given a **0-indexed** 2D integer array `tires` where `tires[i] = [fi, ri]` indicates that the `ith` tire can finish its `xth` successive lap in `fi * ri(x-1)` seconds.\n\n\n For example, if `fi = 3` and `ri = 2`, then the tire would finish its `1st` lap in `3` seconds, its `2nd` lap in `3 * 2 = 6` seconds, its `3rd` lap in `3 * 22 = 12` seconds, etc.\n\n\nYou are also given an integer `changeTime` and an integer `numLaps`.\n\n\nThe race consists of `numLaps` laps and you may start the race with **any** tire. You have an **unlimited** supply of each tire and after every lap, you may **change** to any given tire (including the current tire type) if you wait `changeTime` seconds.\n\n\nReturn *the **minimum** time to finish the race.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** tires = [[2,3],[3,4]], changeTime = 5, numLaps = 4",
                "Output": "** 21",
                "Explanation": "** \nLap 1: Start with tire 0 and finish the lap in 2 seconds.\nLap 2: Continue with tire 0 and finish the lap in 2 * 3 = 6 seconds.\nLap 3: Change tires to a new tire 0 for 5 seconds and then finish the lap in another 2 seconds.\nLap 4: Continue with tire 0 and finish the lap in 2 * 3 = 6 seconds.\nTotal time = 2 + 6 + 5 + 2 + 6 = 21 seconds.\nThe minimum time to complete the race is 21 seconds."
            },
            {
                "Input": "** tires = [[1,10],[2,2],[3,4]], changeTime = 6, numLaps = 5",
                "Output": "** 25",
                "Explanation": "** \nLap 1: Start with tire 1 and finish the lap in 2 seconds.\nLap 2: Continue with tire 1 and finish the lap in 2 * 2 = 4 seconds.\nLap 3: Change tires to a new tire 1 for 6 seconds and then finish the lap in another 2 seconds.\nLap 4: Continue with tire 1 and finish the lap in 2 * 2 = 4 seconds.\nLap 5: Change tires to tire 0 for 6 seconds then finish the lap in another 1 second.\nTotal time = 2 + 4 + 6 + 2 + 4 + 6 + 1 = 25 seconds.\nThe minimum time to complete the race is 25 seconds."
            }
        ]
    },
    {
        "Title": "Most Frequent Number Following Key In an Array",
        "slug": "most-frequent-number-following-key-in-an-array",
        "description": "You are given a **0-indexed** integer array `nums`.You are also given an integer `key`, which is present in `nums`.\n\n\nFor every unique integer `target` in `nums`, **count** the number of times `target` immediately follows an occurrence of `key` in `nums`. In other words, count the number of indices `i` such that:\n\n\n `0 <= i <= nums.length - 2`,\n `nums[i] == key` and,\n `nums[i + 1] == target`.\n\n\nReturn *the* `target` *with the **maximum** count*. The test cases will be generated such that the `target` with maximum count is unique.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,100,200,1,100], key = 1",
                "Output": "** 100",
                "Explanation": "** For target = 100, there are 2 occurrences at indices 1 and 4 which follow an occurrence of key.\nNo other integers follow an occurrence of key, so we return 100."
            },
            {
                "Input": "** nums = [2,2,2,2,3], key = 2",
                "Output": "** 2",
                "Explanation": "** For target = 2, there are 3 occurrences at indices 1, 2, and 3 which follow an occurrence of key.\nFor target = 3, there is only one occurrence at index 4 which follows an occurrence of key.\ntarget = 2 has the maximum number of occurrences following an occurrence of key, so we return 2."
            }
        ]
    },
    {
        "Title": "Sort the Jumbled Numbers",
        "slug": "sort-the-jumbled-numbers",
        "description": "You are given a **0-indexed** integer array `mapping` which represents the mapping rule of a shuffled decimal system. `mapping[i] = j` means digit `i` should be mapped to digit `j` in this system.\n\n\nThe **mapped value** of an integer is the new integer obtained by replacing each occurrence of digit `i` in the integer with `mapping[i]` for all `0 <= i <= 9`.\n\n\nYou are also given another integer array `nums`. Return *the array* `nums` *sorted in **non-decreasing** order based on the **mapped values** of its elements.\n\n\nNotes:\n\n\n Elements with the same mapped values should appear in the **same relative order** as in the input.\n The elements of `nums` should only be sorted based on their mapped values and **not be replaced** by them.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** mapping = [8,9,4,0,2,1,3,5,7,6], nums = [991,338,38]",
                "Output": "** [338,38,991]",
                "Explanation": "** \nMap the number 991 as follows:\n1. mapping[9] = 6, so all occurrences of the digit 9 will become 6.\n2. mapping[1] = 9, so all occurrences of the digit 1 will become 9.\nTherefore, the mapped value of 991 is 669.\n338 maps to 007, or 7 after removing the leading zeros.\n38 maps to 07, which is also 7 after removing leading zeros.\nSince 338 and 38 share the same mapped value, they should remain in the same relative order, so 338 comes before 38.\nThus, the sorted array is [338,38,991]."
            },
            {
                "Input": "** mapping = [0,1,2,3,4,5,6,7,8,9], nums = [789,456,123]",
                "Output": "** [123,456,789]",
                "Explanation": "** 789 maps to 789, 456 maps to 456, and 123 maps to 123. Thus, the sorted array is [123,456,789]."
            }
        ]
    },
    {
        "Title": "All Ancestors of a Node in a Directed Acyclic Graph",
        "slug": "all-ancestors-of-a-node-in-a-directed-acyclic-graph",
        "description": "You are given a positive integer `n` representing the number of nodes of a **Directed Acyclic Graph** (DAG). The nodes are numbered from `0` to `n - 1` (**inclusive**).\n\n\nYou are also given a 2D integer array `edges`, where `edges[i] = [fromi, toi]` denotes that there is a **unidirectional** edge from `fromi` to `toi` in the graph.\n\n\nReturn *a list* `answer`*, where* `answer[i]` *is the **list of ancestors** of the* `ith` *node, sorted in **ascending order***.\n\n\nA node `u` is an **ancestor** of another node `v` if `u` can reach `v` via a set of edges.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Graph",
            "Topological Sort"
        ],
        "examples": [
            {
                "Input": "** n = 8, edgeList = [[0,3],[0,4],[1,3],[2,4],[2,7],[3,5],[3,6],[3,7],[4,6]]",
                "Output": "** [[],[],[],[0,1],[0,2],[0,1,3],[0,1,2,3,4],[0,1,2,3]]",
                "Explanation": "**\nThe above diagram represents the input graph.\n- Nodes 0, 1, and 2 do not have any ancestors.\n- Node 3 has two ancestors 0 and 1.\n- Node 4 has two ancestors 0 and 2.\n- Node 5 has three ancestors 0, 1, and 3.\n- Node 6 has five ancestors 0, 1, 2, 3, and 4.\n- Node 7 has four ancestors 0, 1, 2, and 3."
            },
            {
                "Input": "** n = 5, edgeList = [[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]",
                "Output": "** [[],[0],[0,1],[0,1,2],[0,1,2,3]]",
                "Explanation": "**\nThe above diagram represents the input graph.\n- Node 0 does not have any ancestor.\n- Node 1 has one ancestor 0.\n- Node 2 has two ancestors 0 and 1.\n- Node 3 has three ancestors 0, 1, and 2.\n- Node 4 has four ancestors 0, 1, 2, and 3."
            }
        ]
    },
    {
        "Title": "Minimum Number of Moves to Make Palindrome",
        "slug": "minimum-number-of-moves-to-make-palindrome",
        "description": "You are given a string `s` consisting only of lowercase English letters.\n\n\nIn one **move**, you can select any two **adjacent** characters of `s` and swap them.\n\n\nReturn *the **minimum number of moves** needed to make* `s` *a palindrome*.\n\n\nNote** that the input will be generated such that `s` can always be converted to a palindrome.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Two Pointers",
            "String",
            "Greedy",
            "Binary Indexed Tree"
        ],
        "examples": [
            {
                "Input": "** s = \"aabb\"",
                "Output": "** 2",
                "Explanation": "**\nWe can obtain two palindromes from s, \"abba\" and \"baab\". \n- We can obtain \"abba\" from s in 2 moves: \"a**ab**b\" -> \"ab**ab**\" -> \"abba\".\n- We can obtain \"baab\" from s in 2 moves: \"a**ab**b\" -> \"**ab**ab\" -> \"baab\".\nThus, the minimum number of moves needed to make s a palindrome is 2."
            },
            {
                "Input": "** s = \"letelt\"",
                "Output": "** 2",
                "Explanation": "**\nOne of the palindromes we can obtain from s in 2 moves is \"lettel\".\nOne of the ways we can obtain it is \"lete**lt**\" -> \"let**et**l\" -> \"lettel\".\nOther palindromes such as \"tleelt\" can also be obtained in 2 moves.\nIt can be shown that it is not possible to obtain a palindrome in less than 2 moves."
            }
        ]
    },
    {
        "Title": "Cells in a Range on an Excel Sheet",
        "slug": "cells-in-a-range-on-an-excel-sheet",
        "description": "A cell `(r, c)` of an excel sheet is represented as a string `\"<col><row>\"` where:\n\n\n `<col>` denotes the column number `c` of the cell. It is represented by **alphabetical letters**.\n\t+ For example, the `1st` column is denoted by `'A'`, the `2nd` by `'B'`, the `3rd` by `'C'`, and so on.\n `<row>` is the row number `r` of the cell. The `rth` row is represented by the **integer** `r`.\n\n\nYou are given a string `s`\u00a0in\u00a0the format `\"<col1><row1>:<col2><row2>\"`, where `<col1>` represents the column `c1`, `<row1>` represents the row `r1`, `<col2>` represents the column `c2`, and `<row2>` represents the row `r2`, such that `r1 <= r2` and `c1 <= c2`.\n\n\nReturn *the **list of cells*** `(x, y)` *such that* `r1 <= x <= r2` *and* `c1 <= y <= c2`. The cells should be represented as\u00a0**strings** in the format mentioned above and be sorted in **non-decreasing** order first by columns and then by rows.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"K1:L2\"",
                "Output": "** [\"K1\",\"K2\",\"L1\",\"L2\"]",
                "Explanation": "**\nThe above diagram shows the cells which should be present in the list.\nThe red arrows denote the order in which the cells should be presented."
            },
            {
                "Input": "** s = \"A1:F1\"",
                "Output": "** [\"A1\",\"B1\",\"C1\",\"D1\",\"E1\",\"F1\"]",
                "Explanation": "**\nThe above diagram shows the cells which should be present in the list.\nThe red arrow denotes the order in which the cells should be presented."
            }
        ]
    },
    {
        "Title": "Append K Integers With Minimal Sum",
        "slug": "append-k-integers-with-minimal-sum",
        "description": "You are given an integer array `nums` and an integer `k`. Append `k` **unique positive** integers that do **not** appear in `nums` to `nums` such that the resulting total sum is **minimum**.\n\n\nReturn *the sum of the* `k` *integers appended to* `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,4,25,10,25], k = 2",
                "Output": "** 5",
                "Explanation": "** The two unique positive integers that do not appear in nums which we append are 2 and 3.\nThe resulting sum of nums is 1 + 4 + 25 + 10 + 25 + 2 + 3 = 70, which is the minimum.\nThe sum of the two integers appended is 2 + 3 = 5, so we return 5."
            },
            {
                "Input": "** nums = [5,6], k = 6",
                "Output": "** 25",
                "Explanation": "** The six unique positive integers that do not appear in nums which we append are 1, 2, 3, 4, 7, and 8.\nThe resulting sum of nums is 5 + 6 + 1 + 2 + 3 + 4 + 7 + 8 = 36, which is the minimum. \nThe sum of the six integers appended is 1 + 2 + 3 + 4 + 7 + 8 = 25, so we return 25."
            }
        ]
    },
    {
        "Title": "Create Binary Tree From Descriptions",
        "slug": "create-binary-tree-from-descriptions",
        "description": "You are given a 2D integer array `descriptions` where `descriptions[i] = [parenti, childi, isLefti]` indicates that `parenti` is the **parent** of `childi` in a **binary** tree of **unique** values. Furthermore,\n\n\n If `isLefti == 1`, then `childi` is the left child of `parenti`.\n If `isLefti == 0`, then `childi` is the right child of `parenti`.\n\n\nConstruct the binary tree described by `descriptions` and return *its **root***.\n\n\nThe test cases will be generated such that the binary tree is **valid**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** descriptions = [[20,15,1],[20,17,0],[50,20,1],[50,80,0],[80,19,1]]",
                "Output": "** [50,20,80,15,17,19]",
                "Explanation": "** The root node is the node with value 50 since it has no parent.\nThe resulting binary tree is shown in the diagram."
            },
            {
                "Input": "** descriptions = [[1,2,1],[2,3,0],[3,4,1]]",
                "Output": "** [1,2,null,null,3,4]",
                "Explanation": "** The root node is the node with value 1 since it has no parent.\nThe resulting binary tree is shown in the diagram."
            }
        ]
    },
    {
        "Title": "Replace Non-Coprime Numbers in Array",
        "slug": "replace-non-coprime-numbers-in-array",
        "description": "You are given an array of integers `nums`. Perform the following steps:\n\n\n1. Find **any** two **adjacent** numbers in `nums` that are **non-coprime**.\n2. If no such numbers are found, **stop** the process.\n3. Otherwise, delete the two numbers and **replace** them with their **LCM (Least Common Multiple)**.\n4. **Repeat** this process as long as you keep finding two adjacent non-coprime numbers.\n\n\nReturn *the **final** modified array.* It can be shown that replacing adjacent non-coprime numbers in **any** arbitrary order will lead to the same result.\n\n\nThe test cases are generated such that the values in the final array are **less than or equal** to `108`.\n\n\nTwo values `x` and `y` are **non-coprime** if `GCD(x, y) > 1` where `GCD(x, y)` is the **Greatest Common Divisor** of `x` and `y`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Stack",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [6,4,3,2,7,6,2]",
                "Output": "** [12,7,6]",
                "Explanation": "** \n- (6, 4) are non-coprime with LCM(6, 4) = 12. Now, nums = [**12**,3,2,7,6,2].\n- (12, 3) are non-coprime with LCM(12, 3) = 12. Now, nums = [**12**,2,7,6,2].\n- (12, 2) are non-coprime with LCM(12, 2) = 12. Now, nums = [**12**,7,6,2].\n- (6, 2) are non-coprime with LCM(6, 2) = 6. Now, nums = [12,7,**6**].\nThere are no more adjacent non-coprime numbers in nums.\nThus, the final modified array is [12,7,6].\nNote that there are other ways to obtain the same resultant array."
            },
            {
                "Input": "** nums = [2,2,1,1,3,3,3]",
                "Output": "** [2,1,1,3]",
                "Explanation": "** \n- (3, 3) are non-coprime with LCM(3, 3) = 3. Now, nums = [2,2,1,1,**3**,3].\n- (3, 3) are non-coprime with LCM(3, 3) = 3. Now, nums = [2,2,1,1,**3**].\n- (2, 2) are non-coprime with LCM(2, 2) = 2. Now, nums = [**2**,1,1,3].\nThere are no more adjacent non-coprime numbers in nums.\nThus, the final modified array is [2,1,1,3].\nNote that there are other ways to obtain the same resultant array."
            }
        ]
    },
    {
        "Title": "Find All K-Distant Indices in an Array",
        "slug": "find-all-k-distant-indices-in-an-array",
        "description": "You are given a **0-indexed** integer array `nums` and two integers `key` and `k`. A **k-distant index** is an index `i` of `nums` for which there exists at least one index `j` such that `|i - j| <= k` and `nums[j] == key`.\n\n\nReturn *a list of all k-distant indices sorted in **increasing order***.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** nums = [3,4,9,1,3,9,5], key = 9, k = 1",
                "Output": "** [1,2,3,4,5,6]",
                "Explanation": "** Here, nums[2] == key and nums[5] == key.\n- For index 0, |0 - 2| > k and |0 - 5| > k, so there is no j where |0 - j| <= k and nums[j] == key. Thus, 0 is not a k-distant index.\n- For index 1, |1 - 2| <= k and nums[2] == key, so 1 is a k-distant index.\n- For index 2, |2 - 2| <= k and nums[2] == key, so 2 is a k-distant index.\n- For index 3, |3 - 2| <= k and nums[2] == key, so 3 is a k-distant index.\n- For index 4, |4 - 5| <= k and nums[5] == key, so 4 is a k-distant index.\n- For index 5, |5 - 5| <= k and nums[5] == key, so 5 is a k-distant index.\n- For index 6, |6 - 5| <= k and nums[5] == key, so 6 is a k-distant index.\nThus, we return [1,2,3,4,5,6] which is sorted in increasing order."
            },
            {
                "Input": "** nums = [2,2,2,2,2], key = 2, k = 2",
                "Output": "** [0,1,2,3,4]",
                "Explanation": "** For all indices i in nums, there exists some index j such that |i - j| <= k and nums[j] == key, so every index is a k-distant index. \nHence, we return [0,1,2,3,4]."
            }
        ]
    },
    {
        "Title": "Count Artifacts That Can Be Extracted",
        "slug": "count-artifacts-that-can-be-extracted",
        "description": "There is an `n x n` **0-indexed** grid with some artifacts buried in it. You are given the integer `n` and a **0-indexed** 2D integer array `artifacts` describing the positions of the rectangular artifacts where `artifacts[i] = [r1i, c1i, r2i, c2i]` denotes that the `ith` artifact is buried in the subgrid where:\n\n\n `(r1i, c1i)` is the coordinate of the **top-left** cell of the `ith` artifact and\n `(r2i, c2i)` is the coordinate of the **bottom-right** cell of the `ith` artifact.\n\n\nYou will excavate some cells of the grid and remove all the mud from them. If the cell has a part of an artifact buried underneath, it will be uncovered. If all the parts of an artifact are uncovered, you can extract it.\n\n\nGiven a **0-indexed** 2D integer array `dig` where `dig[i] = [ri, ci]` indicates that you will excavate the cell `(ri, ci)`, return *the number of artifacts that you can extract*.\n\n\nThe test cases are generated such that:\n\n\n No two artifacts overlap.\n Each artifact only covers at most `4` cells.\n The entries of `dig` are unique.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1]]",
                "Output": "** 1",
                "Explanation": "** \nThe different colors represent different artifacts. Excavated cells are labeled with a 'D' in the grid.\nThere is 1 artifact that can be extracted, namely the red artifact.\nThe blue artifact has one part in cell (1,1) which remains uncovered, so we cannot extract it.\nThus, we return 1."
            },
            {
                "Input": "** n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1],[1,1]]",
                "Output": "** 2",
                "Explanation": "** Both the red and blue artifacts have all parts uncovered (labeled with a 'D') and can be extracted, so we return 2."
            }
        ]
    },
    {
        "Title": "Maximize the Topmost Element After K Moves",
        "slug": "maximize-the-topmost-element-after-k-moves",
        "description": "You are given a **0-indexed** integer array `nums` representing the contents of a **pile**, where `nums[0]` is the topmost element of the pile.\n\n\nIn one move, you can perform **either** of the following:\n\n\n If the pile is not empty, **remove** the topmost element of the pile.\n If there are one or more removed elements, **add** any one of them back onto the pile. This element becomes the new topmost element.\n\n\nYou are also given an integer `k`, which denotes the total number of moves to be made.\n\n\nReturn *the **maximum value** of the topmost element of the pile possible after **exactly*** `k` *moves*. In case it is not possible to obtain a non-empty pile after `k` moves, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums = [5,2,2,4,0,6], k = 4",
                "Output": "** 5",
                "Explanation": "**\nOne of the ways we can end with 5 at the top of the pile after 4 moves is as follows:\n- Step 1: Remove the topmost element = 5. The pile becomes [2,2,4,0,6].\n- Step 2: Remove the topmost element = 2. The pile becomes [2,4,0,6].\n- Step 3: Remove the topmost element = 2. The pile becomes [4,0,6].\n- Step 4: Add 5 back onto the pile. The pile becomes [5,4,0,6].\nNote that this is not the only way to end with 5 at the top of the pile. It can be shown that 5 is the largest answer possible after 4 moves."
            },
            {
                "Input": "** nums = [2], k = 1",
                "Output": "** -1",
                "Explanation": "** \nIn the first move, our only option is to pop the topmost element of the pile.\nSince it is not possible to obtain a non-empty pile after one move, we return -1."
            }
        ]
    },
    {
        "Title": "Minimum Weighted Subgraph With the Required Paths",
        "slug": "minimum-weighted-subgraph-with-the-required-paths",
        "description": "You are given an integer `n` denoting the number of nodes of a **weighted directed** graph. The nodes are numbered from `0` to `n - 1`.\n\n\nYou are also given a 2D integer array `edges` where `edges[i] = [fromi, toi, weighti]` denotes that there exists a **directed** edge from `fromi` to `toi` with weight `weighti`.\n\n\nLastly, you are given three **distinct** integers `src1`, `src2`, and `dest` denoting three distinct nodes of the graph.\n\n\nReturn *the **minimum weight** of a subgraph of the graph such that it is **possible** to reach* `dest` *from both* `src1` *and* `src2` *via a set of edges of this subgraph*. In case such a subgraph does not exist, return `-1`.\n\n\nA **subgraph** is a graph whose vertices and edges are subsets of the original graph. The **weight** of a subgraph is the sum of weights of its constituent edges.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Graph",
            "Shortest Path"
        ],
        "examples": [
            {
                "Input": "** n = 6, edges = [[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]], src1 = 0, src2 = 1, dest = 5",
                "Output": "** 9",
                "Explanation": "**\nThe above figure represents the input graph.\nThe blue edges represent one of the subgraphs that yield the optimal answer.\nNote that the subgraph [[1,0,3],[0,5,6]] also yields the optimal answer. It is not possible to get a subgraph with less weight satisfying all the constraints."
            },
            {
                "Input": "** n = 3, edges = [[0,1,1],[2,1,1]], src1 = 0, src2 = 1, dest = 2",
                "Output": "** -1",
                "Explanation": "**\nThe above figure represents the input graph.\nIt can be seen that there does not exist any path from node 1 to node 2, hence there are no subgraphs satisfying all the constraints."
            }
        ]
    },
    {
        "Title": "Divide Array Into Equal Pairs",
        "slug": "divide-array-into-equal-pairs",
        "description": "You are given an integer array `nums` consisting of `2 * n` integers.\n\n\nYou need to divide `nums` into `n` pairs such that:\n\n\n Each element belongs to **exactly one** pair.\n The elements present in a pair are **equal**.\n\n\nReturn `true` *if nums can be divided into* `n` *pairs, otherwise return* `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Bit Manipulation",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [3,2,3,2,2,2]",
                "Output": "** true",
                "Explanation": "** \nThere are 6 elements in nums, so they should be divided into 6 / 2 = 3 pairs.\nIf nums is divided into the pairs (2, 2), (3, 3), and (2, 2), it will satisfy all the conditions."
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** false",
                "Explanation": "** \nThere is no way to divide nums into 4 / 2 = 2 pairs such that the pairs satisfy every condition."
            }
        ]
    },
    {
        "Title": "Maximize Number of Subsequences in a String",
        "slug": "maximize-number-of-subsequences-in-a-string",
        "description": "You are given a **0-indexed** string `text` and another **0-indexed** string `pattern` of length `2`, both of which consist of only lowercase English letters.\n\n\nYou can add **either** `pattern[0]` **or** `pattern[1]` anywhere in `text` **exactly once**. Note that the character can be added even at the beginning or at the end of `text`.\n\n\nReturn *the **maximum** number of times* `pattern` *can occur as a **subsequence** of the modified* `text`.\n\n\nA **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Greedy",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** text = \"abdcdbc\", pattern = \"ac\"",
                "Output": "** 4",
                "Explanation": "**\nIf we add pattern[0] = 'a' in between text[1] and text[2], we get \"ab**a**dcdbc\". Now, the number of times \"ac\" occurs as a subsequence is 4.\nSome other strings which have 4 subsequences \"ac\" after adding a character to text are \"**a**abdcdbc\" and \"abd**a**cdbc\".\nHowever, strings such as \"abdc**a**dbc\", \"abd**c**cdbc\", and \"abdcdbc**c**\", although obtainable, have only 3 subsequences \"ac\" and are thus suboptimal.\nIt can be shown that it is not possible to get more than 4 subsequences \"ac\" by adding only one character."
            },
            {
                "Input": "** text = \"aabb\", pattern = \"ab\"",
                "Output": "** 6",
                "Explanation": "**\nSome of the strings which can be obtained from text and have 6 subsequences \"ab\" are \"**a**aabb\", \"aa**a**bb\", and \"aab**b**b\"."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Halve Array Sum",
        "slug": "minimum-operations-to-halve-array-sum",
        "description": "You are given an array `nums` of positive integers. In one operation, you can choose **any** number from `nums` and reduce it to **exactly** half the number. (Note that you may choose this reduced number in future operations.)\n\n\nReturn *the **minimum** number of operations to reduce the sum of* `nums` *by **at least** half.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** nums = [5,19,8,1]",
                "Output": "** 3",
                "Explanation": "** The initial sum of nums is equal to 5 + 19 + 8 + 1 = 33.\nThe following is one of the ways to reduce the sum by at least half:\nPick the number 19 and reduce it to 9.5.\nPick the number 9.5 and reduce it to 4.75.\nPick the number 8 and reduce it to 4.\nThe final array is [5, 4.75, 4, 1] with a total sum of 5 + 4.75 + 4 + 1 = 14.75. \nThe sum of nums has been reduced by 33 - 14.75 = 18.25, which is at least half of the initial sum, 18.25 >= 33/2 = 16.5.\nOverall, 3 operations were used so we return 3.\nIt can be shown that we cannot reduce the sum by at least half in less than 3 operations."
            },
            {
                "Input": "** nums = [3,8,20]",
                "Output": "** 3",
                "Explanation": "** The initial sum of nums is equal to 3 + 8 + 20 = 31.\nThe following is one of the ways to reduce the sum by at least half:\nPick the number 20 and reduce it to 10.\nPick the number 10 and reduce it to 5.\nPick the number 3 and reduce it to 1.5.\nThe final array is [1.5, 8, 5] with a total sum of 1.5 + 8 + 5 = 14.5. \nThe sum of nums has been reduced by 31 - 14.5 = 16.5, which is at least half of the initial sum, 16.5 >= 31/2 = 15.5.\nOverall, 3 operations were used so we return 3.\nIt can be shown that we cannot reduce the sum by at least half in less than 3 operations."
            }
        ]
    },
    {
        "Title": "Minimum White Tiles After Covering With Carpets",
        "slug": "minimum-white-tiles-after-covering-with-carpets",
        "description": "You are given a **0-indexed binary** string `floor`, which represents the colors of tiles on a floor:\n\n\n `floor[i] = '0'` denotes that the `ith` tile of the floor is colored **black**.\n On the other hand, `floor[i] = '1'` denotes that the `ith` tile of the floor is colored **white**.\n\n\nYou are also given `numCarpets` and `carpetLen`. You have `numCarpets` **black** carpets, each of length `carpetLen` tiles. Cover the tiles with the given carpets such that the number of **white** tiles still visible is **minimum**. Carpets may overlap one another.\n\n\nReturn *the **minimum** number of white tiles still visible.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** floor = \"10110101\", numCarpets = 2, carpetLen = 2",
                "Output": "** 2",
                "Explanation": "** \nThe figure above shows one way of covering the tiles with the carpets such that only 2 white tiles are visible.\nNo other way of covering the tiles with the carpets can leave less than 2 white tiles visible."
            },
            {
                "Input": "** floor = \"11111\", numCarpets = 2, carpetLen = 3",
                "Output": "** 0",
                "Explanation": "** \nThe figure above shows one way of covering the tiles with the carpets such that no white tiles are visible.\nNote that the carpets are able to overlap one another."
            }
        ]
    },
    {
        "Title": "Count Hills and Valleys in an Array",
        "slug": "count-hills-and-valleys-in-an-array",
        "description": "You are given a **0-indexed** integer array `nums`. An index `i` is part of a **hill** in `nums` if the closest non-equal neighbors of `i` are smaller than `nums[i]`. Similarly, an index `i` is part of a **valley** in `nums` if the closest non-equal neighbors of `i` are larger than `nums[i]`. Adjacent indices `i` and `j` are part of the **same** hill or valley if `nums[i] == nums[j]`.\n\n\nNote that for an index to be part of a hill or valley, it must have a non-equal neighbor on **both** the left and right of the index.\n\n\nReturn *the number of hills and valleys in* `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [2,4,1,1,6,5]",
                "Output": "** 3",
                "Explanation": "**\nAt index 0: There is no non-equal neighbor of 2 on the left, so index 0 is neither a hill nor a valley.\nAt index 1: The closest non-equal neighbors of 4 are 2 and 1. Since 4 > 2 and 4 > 1, index 1 is a hill. \nAt index 2: The closest non-equal neighbors of 1 are 4 and 6. Since 1 < 4 and 1 < 6, index 2 is a valley.\nAt index 3: The closest non-equal neighbors of 1 are 4 and 6. Since 1 < 4 and 1 < 6, index 3 is a valley, but note that it is part of the same valley as index 2.\nAt index 4: The closest non-equal neighbors of 6 are 1 and 5. Since 6 > 1 and 6 > 5, index 4 is a hill.\nAt index 5: There is no non-equal neighbor of 5 on the right, so index 5 is neither a hill nor a valley. \nThere are 3 hills and valleys so we return 3."
            },
            {
                "Input": "** nums = [6,6,5,5,4,1]",
                "Output": "** 0",
                "Explanation": "**\nAt index 0: There is no non-equal neighbor of 6 on the left, so index 0 is neither a hill nor a valley.\nAt index 1: There is no non-equal neighbor of 6 on the left, so index 1 is neither a hill nor a valley.\nAt index 2: The closest non-equal neighbors of 5 are 6 and 4. Since 5 < 6 and 5 > 4, index 2 is neither a hill nor a valley.\nAt index 3: The closest non-equal neighbors of 5 are 6 and 4. Since 5 < 6 and 5 > 4, index 3 is neither a hill nor a valley.\nAt index 4: The closest non-equal neighbors of 4 are 5 and 1. Since 4 < 5 and 4 > 1, index 4 is neither a hill nor a valley.\nAt index 5: There is no non-equal neighbor of 1 on the right, so index 5 is neither a hill nor a valley.\nThere are 0 hills and valleys so we return 0."
            }
        ]
    },
    {
        "Title": "Count Collisions on a Road",
        "slug": "count-collisions-on-a-road",
        "description": "There are `n` cars on an infinitely long road. The cars are numbered from `0` to `n - 1` from left to right and each car is present at a **unique** point.\n\n\nYou are given a **0-indexed** string `directions` of length `n`. `directions[i]` can be either `'L'`, `'R'`, or `'S'` denoting whether the `ith` car is moving towards the **left**, towards the **right**, or **staying** at its current point respectively. Each moving car has the **same speed**.\n\n\nThe number of collisions can be calculated as follows:\n\n\n When two cars moving in **opposite** directions collide with each other, the number of collisions increases by `2`.\n When a moving car collides with a stationary car, the number of collisions increases by `1`.\n\n\nAfter a collision, the cars involved can no longer move and will stay at the point where they collided. Other than that, cars cannot change their state or direction of motion.\n\n\nReturn *the **total number of collisions** that will happen on the road*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Stack",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** directions = \"RLRSLL\"",
                "Output": "** 5",
                "Explanation": "**\nThe collisions that will happen on the road are:\n- Cars 0 and 1 will collide with each other. Since they are moving in opposite directions, the number of collisions becomes 0 + 2 = 2.\n- Cars 2 and 3 will collide with each other. Since car 3 is stationary, the number of collisions becomes 2 + 1 = 3.\n- Cars 3 and 4 will collide with each other. Since car 3 is stationary, the number of collisions becomes 3 + 1 = 4.\n- Cars 4 and 5 will collide with each other. After car 4 collides with car 3, it will stay at the point of collision and get hit by car 5. The number of collisions becomes 4 + 1 = 5.\nThus, the total number of collisions that will happen on the road is 5."
            },
            {
                "Input": "** directions = \"LLRR\"",
                "Output": "** 0",
                "Explanation": "**\nNo cars will collide with each other. Thus, the total number of collisions that will happen on the road is 0."
            }
        ]
    },
    {
        "Title": "Maximum Points in an Archery Competition",
        "slug": "maximum-points-in-an-archery-competition",
        "description": "Alice and Bob are opponents in an archery competition. The competition has set the following rules:\n\n\n1. Alice first shoots `numArrows` arrows and then Bob shoots `numArrows` arrows.\n2. The points are then calculated as follows:\n\t1. The target has integer scoring sections ranging from `0` to `11` **inclusive**.\n\t2. For **each** section of the target with score `k` (in between `0` to `11`), say Alice and Bob have shot `ak` and `bk` arrows on that section respectively. If `ak >= bk`, then Alice takes `k` points. If `ak < bk`, then Bob takes `k` points.\n\t3. However, if `ak == bk == 0`, then **nobody** takes `k` points.\n\n\n For example, if Alice and Bob both shot `2` arrows on the section with score `11`, then Alice takes `11` points. On the other hand, if Alice shot `0` arrows on the section with score `11` and Bob shot `2` arrows on that same section, then Bob takes `11` points.\n\n\nYou are given the integer `numArrows` and an integer array `aliceArrows` of size `12`, which represents the number of arrows Alice shot on each scoring section from `0` to `11`. Now, Bob wants to **maximize** the total number of points he can obtain.\n\n\nReturn *the array* `bobArrows` *which represents the number of arrows Bob shot on **each** scoring section from* `0` *to* `11`. The sum of the values in `bobArrows` should equal `numArrows`.\n\n\nIf there are multiple ways for Bob to earn the maximum total points, return **any** one of them.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Backtracking",
            "Bit Manipulation",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** numArrows = 9, aliceArrows = [1,1,0,1,0,0,2,1,0,1,2,0]",
                "Output": "** [0,0,0,0,1,1,0,0,1,2,3,1]",
                "Explanation": "** The table above shows how the competition is scored. \nBob earns a total point of 4 + 5 + 8 + 9 + 10 + 11 = 47.\nIt can be shown that Bob cannot obtain a score higher than 47 points."
            },
            {
                "Input": "** numArrows = 3, aliceArrows = [0,0,1,0,0,0,0,0,0,0,0,2]",
                "Output": "** [0,0,0,0,0,0,0,0,1,1,1,0]",
                "Explanation": "** The table above shows how the competition is scored.\nBob earns a total point of 8 + 9 + 10 = 27.\nIt can be shown that Bob cannot obtain a score higher than 27 points."
            }
        ]
    },
    {
        "Title": "Longest Substring of One Repeating Character",
        "slug": "longest-substring-of-one-repeating-character",
        "description": "You are given a **0-indexed** string `s`. You are also given a **0-indexed** string `queryCharacters` of length `k` and a **0-indexed** array of integer **indices** `queryIndices` of length `k`, both of which are used to describe `k` queries.\n\n\nThe `ith` query updates the character in `s` at index `queryIndices[i]` to the character `queryCharacters[i]`.\n\n\nReturn *an array* `lengths` *of length* `k` *where* `lengths[i]` *is the **length** of the **longest substring** of* `s` *consisting of **only one repeating** character **after** the* `ith` *query* *is performed.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "String",
            "Segment Tree",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** s = \"babacc\", queryCharacters = \"bcb\", queryIndices = [1,3,3]",
                "Output": "** [3,3,4]",
                "Explanation": "** \n- 1st query updates s = \"b**b**bacc\". The longest substring consisting of one repeating character is \"bbb\" with length 3.\n- 2nd query updates s = \"bbb**c**cc\". \n  The longest substring consisting of one repeating character can be \"bbb\" or \"ccc\" with length 3.\n- 3rd query updates s = \"bbb**b**cc\". The longest substring consisting of one repeating character is \"bbbb\" with length 4.\nThus, we return [3,3,4]."
            },
            {
                "Input": "** s = \"abyzz\", queryCharacters = \"aa\", queryIndices = [2,1]",
                "Output": "** [2,3]",
                "Explanation": "**\n- 1st query updates s = \"ab**a**zz\". The longest substring consisting of one repeating character is \"zz\" with length 2.\n- 2nd query updates s = \"a**a**azz\". The longest substring consisting of one repeating character is \"aaa\" with length 3.\nThus, we return [2,3]."
            }
        ]
    },
    {
        "Title": "Find the Difference of Two Arrays",
        "slug": "find-the-difference-of-two-arrays",
        "description": "Given two **0-indexed** integer arrays `nums1` and `nums2`, return *a list* `answer` *of size* `2` *where:\n\n\n `answer[0]` *is a list of all **distinct** integers in* `nums1` *which are **not** present in* `nums2`*.\n `answer[1]` *is a list of all **distinct** integers in* `nums2` *which are **not** present in* `nums1`.\n\n\nNote** that the integers in the lists may be returned in **any** order.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** nums1 = [1,2,3], nums2 = [2,4,6]",
                "Output": "** [[1,3],[4,6]]",
                "Explanation": "**For nums1, nums1[1] = 2 is present at index 0 of nums2, whereas nums1[0] = 1 and nums1[2] = 3 are not present in nums2. Therefore, answer[0] = [1,3].\nFor nums2, nums2[0] = 2 is present at index 1 of nums1, whereas nums2[1] = 4 and nums2[2] = 6 are not present in nums2. Therefore, answer[1] = [4,6]."
            },
            {
                "Input": "** nums1 = [1,2,3,3], nums2 = [1,1,2,2]",
                "Output": "** [[3],[]]",
                "Explanation": "**For nums1, nums1[2] and nums1[3] are not present in nums2. Since nums1[2] == nums1[3], their value is only included once and answer[0] = [3].\nEvery integer in nums2 is present in nums1. Therefore, answer[1] = []."
            }
        ]
    },
    {
        "Title": "Minimum Deletions to Make Array Beautiful",
        "slug": "minimum-deletions-to-make-array-beautiful",
        "description": "You are given a **0-indexed** integer array `nums`. The array `nums` is **beautiful** if:\n\n\n `nums.length` is even.\n `nums[i] != nums[i + 1]` for all `i % 2 == 0`.\n\n\nNote that an empty array is considered beautiful.\n\n\nYou can delete any number of elements from `nums`. When you delete an element, all the elements to the right of the deleted element will be **shifted one unit to the left** to fill the gap created and all the elements to the left of the deleted element will remain **unchanged**.\n\n\nReturn *the **minimum** number of elements to delete from* `nums` *to make it* *beautiful.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Stack",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums = [1,1,2,3,5]",
                "Output": "** 1",
                "Explanation": "** You can delete either nums[0] or nums[1] to make nums = [1,2,3,5] which is beautiful. It can be proven you need at least 1 deletion to make nums beautiful."
            },
            {
                "Input": "** nums = [1,1,2,2,3,3]",
                "Output": "** 2",
                "Explanation": "** You can delete nums[0] and nums[5] to make nums = [1,2,2,3] which is beautiful. It can be proven you need at least 2 deletions to make nums beautiful."
            }
        ]
    },
    {
        "Title": "Find Palindrome With Fixed Length",
        "slug": "find-palindrome-with-fixed-length",
        "description": "Given an integer array `queries` and a **positive** integer `intLength`, return *an array* `answer` *where* `answer[i]` *is either the* `queries[i]th` *smallest **positive palindrome** of length* `intLength` *or* `-1` *if no such palindrome exists*.\n\n\nA **palindrome** is a number that reads the same backwards and forwards. Palindromes cannot have leading zeros.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math"
        ],
        "examples": [
            {
                "Input": "** queries = [1,2,3,4,5,90], intLength = 3",
                "Output": "** [101,111,121,131,141,999]",
                "Explanation": "**\nThe first few palindromes of length 3 are:\n101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, ...\nThe 90th palindrome of length 3 is 999."
            },
            {
                "Input": "** queries = [2,4,6], intLength = 4",
                "Output": "** [1111,1331,1551]",
                "Explanation": "**\nThe first six palindromes of length 4 are:\n1001, 1111, 1221, 1331, 1441, and 1551."
            }
        ]
    },
    {
        "Title": "Maximum Value of K Coins From Piles",
        "slug": "maximum-value-of-k-coins-from-piles",
        "description": "There are `n` **piles** of coins on a table. Each pile consists of a **positive number** of coins of assorted denominations.\n\n\nIn one move, you can choose any coin on **top** of any pile, remove it, and add it to your wallet.\n\n\nGiven a list `piles`, where `piles[i]` is a list of integers denoting the composition of the `ith` pile from **top to bottom**, and a positive integer `k`, return *the **maximum total value** of coins you can have in your wallet if you choose **exactly*** `k` *coins optimally*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** piles = [[1,100,3],[7,8,9]], k = 2",
                "Output": "** 101",
                "Explanation": "**\nThe above diagram shows the different ways we can choose k coins.\nThe maximum total we can obtain is 101."
            }
        ]
    },
    {
        "Title": "Minimum Bit Flips to Convert Number",
        "slug": "minimum-bit-flips-to-convert-number",
        "description": "A **bit flip** of a number `x` is choosing a bit in the binary representation of `x` and **flipping** it from either `0` to `1` or `1` to `0`.\n\n\n For example, for `x = 7`, the binary representation is `111` and we may choose any bit (including any leading zeros not shown) and flip it. We can flip the first bit from the right to get `110`, flip the second bit from the right to get `101`, flip the fifth bit from the right (a leading zero) to get `10111`, etc.\n\n\nGiven two integers `start` and `goal`, return *the **minimum** number of **bit flips** to convert* `start` *to* `goal`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** start = 10, goal = 7",
                "Output": "** 3",
                "Explanation": "** The binary representation of 10 and 7 are 1010 and 0111 respectively. We can convert 10 to 7 in 3 steps:\n- Flip the first bit from the right: 1010 -> 1011.\n- Flip the third bit from the right: 1011 -> 1111.\n- Flip the fourth bit from the right: 1111 -> 0111.\nIt can be shown we cannot convert 10 to 7 in less than 3 steps. Hence, we return 3."
            },
            {
                "Input": "** start = 3, goal = 4",
                "Output": "** 3",
                "Explanation": "** The binary representation of 3 and 4 are 011 and 100 respectively. We can convert 3 to 4 in 3 steps:\n- Flip the first bit from the right: 011 -> 010.\n- Flip the second bit from the right: 010 -> 000.\n- Flip the third bit from the right: 000 -> 100.\nIt can be shown we cannot convert 3 to 4 in less than 3 steps. Hence, we return 3."
            }
        ]
    },
    {
        "Title": "Find Triangular Sum of an Array",
        "slug": "find-triangular-sum-of-an-array",
        "description": "You are given a **0-indexed** integer array `nums`, where `nums[i]` is a digit between `0` and `9` (**inclusive**).\n\n\nThe **triangular sum** of `nums` is the value of the only element present in `nums` after the following process terminates:\n\n\n1. Let `nums` comprise of `n` elements. If `n == 1`, **end** the process. Otherwise, **create** a new **0-indexed** integer array `newNums` of length `n - 1`.\n2. For each index `i`, where `0 <= i <\u00a0n - 1`, **assign** the value of `newNums[i]` as `(nums[i] + nums[i+1]) % 10`, where `%` denotes modulo operator.\n3. **Replace** the array `nums` with `newNums`.\n4. **Repeat** the entire process starting from step 1.\n\n\nReturn *the triangular sum of* `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Simulation",
            "Combinatorics"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** 8",
                "Explanation": "**\nThe above diagram depicts the process from which we obtain the triangular sum of the array."
            }
        ]
    },
    {
        "Title": "Number of Ways to Select Buildings",
        "slug": "number-of-ways-to-select-buildings",
        "description": "You are given a **0-indexed** binary string `s` which represents the types of buildings along a street where:\n\n\n `s[i] = '0'` denotes that the `ith` building is an office and\n `s[i] = '1'` denotes that the `ith` building is a restaurant.\n\n\nAs a city official, you would like to **select** 3 buildings for random inspection. However, to ensure variety, **no two consecutive** buildings out of the **selected** buildings can be of the same type.\n\n\n For example, given `s = \"0**0**1**1**0**1**\"`, we cannot select the `1st`, `3rd`, and `5th` buildings as that would form `\"0**11**\"` which is **not** allowed due to having two consecutive buildings of the same type.\n\n\nReturn *the **number of valid ways** to select 3 buildings.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** s = \"001101\"",
                "Output": "** 6",
                "Explanation": "** \nThe following sets of indices selected are valid:\n- [0,2,4] from \"**0**0**1**1**0**1\" forms \"010\"\n- [0,3,4] from \"**0**01**10**1\" forms \"010\"\n- [1,2,4] from \"0**01**1**0**1\" forms \"010\"\n- [1,3,4] from \"0**0**1**10**1\" forms \"010\"\n- [2,4,5] from \"00**1**1**01**\" forms \"101\"\n- [3,4,5] from \"001**101**\" forms \"101\"\nNo other selection is valid. Thus, there are 6 total ways."
            },
            {
                "Input": "** s = \"11100\"",
                "Output": "** 0",
                "Explanation": "** It can be shown that there are no valid selections."
            }
        ]
    },
    {
        "Title": "Sum of Scores of Built Strings",
        "slug": "sum-of-scores-of-built-strings",
        "description": "You are **building** a string `s` of length `n` **one** character at a time, **prepending** each new character to the **front** of the string. The strings are labeled from `1` to `n`, where the string with length `i` is labeled `si`.\n\n\n For example, for `s = \"abaca\"`, `s1 == \"a\"`, `s2 == \"ca\"`, `s3 == \"aca\"`, etc.\n\n\nThe **score** of `si` is the length of the **longest common prefix** between `si` and `sn` (Note that `s == sn`).\n\n\nGiven the final string `s`, return *the **sum** of the **score** of every* `si`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Binary Search",
            "Rolling Hash",
            "Suffix Array",
            "String Matching",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "** s = \"babab\"",
                "Output": "** 9",
                "Explanation": "**\nFor s1 == \"b\", the longest common prefix is \"b\" which has a score of 1.\nFor s2 == \"ab\", there is no common prefix so the score is 0.\nFor s3 == \"bab\", the longest common prefix is \"bab\" which has a score of 3.\nFor s4 == \"abab\", there is no common prefix so the score is 0.\nFor s5 == \"babab\", the longest common prefix is \"babab\" which has a score of 5.\nThe sum of the scores is 1 + 0 + 3 + 0 + 5 = 9, so we return 9."
            },
            {
                "Input": "** s = \"azbazbzaz\"",
                "Output": "** 14",
                "Explanation": "** \nFor s2 == \"az\", the longest common prefix is \"az\" which has a score of 2.\nFor s6 == \"azbzaz\", the longest common prefix is \"azb\" which has a score of 3.\nFor s9 == \"azbazbzaz\", the longest common prefix is \"azbazbzaz\" which has a score of 9.\nFor all other si, the score is 0.\nThe sum of the scores is 2 + 3 + 9 = 14, so we return 14."
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Convert Time",
        "slug": "minimum-number-of-operations-to-convert-time",
        "description": "You are given two strings `current` and `correct` representing two **24-hour times**.\n\n\n24-hour times are formatted as `\"HH:MM\"`, where `HH` is between `00` and `23`, and `MM` is between `00` and `59`. The earliest 24-hour time is `00:00`, and the latest is `23:59`.\n\n\nIn one operation you can increase the time `current` by `1`, `5`, `15`, or `60` minutes. You can perform this operation **any** number of times.\n\n\nReturn *the **minimum number of operations** needed to convert* `current` *to* `correct`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** current = \"02:30\", correct = \"04:35\"",
                "Output": "** 3",
                "Explanation": "**We can convert current to correct in 3 operations as follows:\n- Add 60 minutes to current. current becomes \"03:30\".\n- Add 60 minutes to current. current becomes \"04:30\".\n- Add 5 minutes to current. current becomes \"04:35\".\nIt can be proven that it is not possible to convert current to correct in fewer than 3 operations."
            },
            {
                "Input": "** current = \"11:00\", correct = \"11:01\"",
                "Output": "** 1",
                "Explanation": "** We only have to add one minute to current, so the minimum number of operations needed is 1."
            }
        ]
    },
    {
        "Title": "Find Players With Zero or One Losses",
        "slug": "find-players-with-zero-or-one-losses",
        "description": "You are given an integer array `matches` where `matches[i] = [winneri, loseri]` indicates that the player `winneri` defeated player `loseri` in a match.\n\n\nReturn *a list* `answer` *of size* `2` *where:\n\n\n `answer[0]` is a list of all players that have **not** lost any matches.\n `answer[1]` is a list of all players that have lost exactly **one** match.\n\n\nThe values in the two lists should be returned in **increasing** order.\n\n\nNote:\n\n\n You should only consider the players that have played **at least one** match.\n The testcases will be generated such that **no** two matches will have the **same** outcome.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** matches = [[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]",
                "Output": "** [[1,2,10],[4,5,7,8]]",
                "Explanation": "**\nPlayers 1, 2, and 10 have not lost any matches.\nPlayers 4, 5, 7, and 8 each have lost one match.\nPlayers 3, 6, and 9 each have lost two matches.\nThus, answer[0] = [1,2,10] and answer[1] = [4,5,7,8]."
            },
            {
                "Input": "** matches = [[2,3],[1,3],[5,4],[6,4]]",
                "Output": "** [[1,2,5,6],[]]",
                "Explanation": "**\nPlayers 1, 2, 5, and 6 have not lost any matches.\nPlayers 3 and 4 each have lost two matches.\nThus, answer[0] = [1,2,5,6] and answer[1] = []."
            }
        ]
    },
    {
        "Title": "Maximum Candies Allocated to K Children",
        "slug": "maximum-candies-allocated-to-k-children",
        "description": "You are given a **0-indexed** integer array `candies`. Each element in the array denotes a pile of candies of size `candies[i]`. You can divide each pile into any number of **sub piles**, but you **cannot** merge two piles together.\n\n\nYou are also given an integer `k`. You should allocate piles of candies to `k` children such that each child gets the **same** number of candies. Each child can take **at most one** pile of candies and some piles of candies may go unused.\n\n\nReturn *the **maximum number of candies** each child can get.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** candies = [5,8,6], k = 3",
                "Output": "** 5",
                "Explanation": "** We can divide candies[1] into 2 piles of size 5 and 3, and candies[2] into 2 piles of size 5 and 1. We now have five piles of candies of sizes 5, 5, 3, 5, and 1. We can allocate the 3 piles of size 5 to 3 children. It can be proven that each child cannot receive more than 5 candies."
            },
            {
                "Input": "** candies = [2,5], k = 11",
                "Output": "** 0",
                "Explanation": "** There are 11 children but only 7 candies in total, so it is impossible to ensure each child receives at least one candy. Thus, each child gets no candy and the answer is 0."
            }
        ]
    },
    {
        "Title": "Encrypt and Decrypt Strings",
        "slug": "encrypt-and-decrypt-strings",
        "description": "You are given a character array `keys` containing **unique** characters and a string array `values` containing strings of length 2. You are also given another string array `dictionary` that contains all permitted original strings after decryption. You should implement a data structure that can encrypt or decrypt a **0-indexed** string.\n\n\nA string is **encrypted** with the following process:\n\n\n1. For each character `c` in the string, we find the index `i` satisfying `keys[i] == c` in `keys`.\n2. Replace `c` with `values[i]` in the string.\n\n\nNote that in case a character of the string is **not present** in `keys`, the encryption process cannot be carried out, and an empty string `\"\"` is returned.\n\n\nA string is **decrypted** with the following process:\n\n\n1. For each substring `s` of length 2 occurring at an even index in the string, we find an `i` such that `values[i] == s`. If there are multiple valid `i`, we choose **any** one of them. This means a string could have multiple possible strings it can decrypt to.\n2. Replace `s` with `keys[i]` in the string.\n\n\nImplement the `Encrypter` class:\n\n\n `Encrypter(char[] keys, String[] values, String[] dictionary)` Initializes the `Encrypter` class with `keys, values`, and `dictionary`.\n `String encrypt(String word1)` Encrypts `word1` with the encryption process described above and returns the encrypted string.\n `int decrypt(String word2)` Returns the number of possible strings `word2` could decrypt to that also appear in `dictionary`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Design",
            "Trie"
        ],
        "examples": [
            {
                "Input": "[\"Encrypter\", \"encrypt\", \"decrypt\"]\n[[['a', 'b', 'c', 'd'], [\"ei\", \"zf\", \"ei\", \"am\"], [\"abcd\", \"acbd\", \"adbc\", \"badc\", \"dacb\", \"cadb\", \"cbda\", \"abad\"]], [\"abcd\"], [\"eizfeiam\"]]",
                "Output": "[null, \"eizfeiam\", 2]",
                "Explanation": "Encrypter encrypter = new Encrypter([['a', 'b', 'c', 'd'], [\"ei\", \"zf\", \"ei\", \"am\"], [\"abcd\", \"acbd\", \"adbc\", \"badc\", \"dacb\", \"cadb\", \"cbda\", \"abad\"]);\nencrypter.encrypt(\"abcd\"); // return \"eizfeiam\". \n\u00a0                          // 'a' maps to \"ei\", 'b' maps to \"zf\", 'c' maps to \"ei\", and 'd' maps to \"am\".\nencrypter.decrypt(\"eizfeiam\"); // return 2. \n                              // \"ei\" can map to 'a' or 'c', \"zf\" maps to 'b', and \"am\" maps to 'd'. \n                              // Thus, the possible strings after decryption are \"abad\", \"cbad\", \"abcd\", and \"cbcd\". \n                              // 2 of those strings, \"abad\" and \"abcd\", appear in dictionary, so the answer is 2."
            }
        ]
    },
    {
        "Title": "Largest Number After Digit Swaps by Parity",
        "slug": "largest-number-after-digit-swaps-by-parity",
        "description": "You are given a positive integer `num`. You may swap any two digits of `num` that have the same **parity** (i.e. both odd digits or both even digits).\n\n\nReturn *the **largest** possible value of* `num` *after **any** number of swaps.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** num = 1234",
                "Output": "** 3412",
                "Explanation": "** Swap the digit 3 with the digit 1, this results in the number 3214.\nSwap the digit 2 with the digit 4, this results in the number 3412.\nNote that there may be other sequences of swaps but it can be shown that 3412 is the largest possible number.\nAlso note that we may not swap the digit 4 with the digit 1 since they are of different parities."
            },
            {
                "Input": "** num = 65875",
                "Output": "** 87655",
                "Explanation": "** Swap the digit 8 with the digit 6, this results in the number 85675.\nSwap the first digit 5 with the digit 7, this results in the number 87655.\nNote that there may be other sequences of swaps but it can be shown that 87655 is the largest possible number."
            }
        ]
    },
    {
        "Title": "Minimize Result by Adding Parentheses to Expression",
        "slug": "minimize-result-by-adding-parentheses-to-expression",
        "description": "You are given a **0-indexed** string `expression` of the form `\"<num1>+<num2>\"` where `<num1>` and `<num2>` represent positive integers.\n\n\nAdd a pair of parentheses to `expression` such that after the addition of parentheses, `expression` is a **valid** mathematical expression and evaluates to the **smallest** possible value. The left parenthesis **must** be added to the left of `'+'` and the right parenthesis **must** be added to the right of `'+'`.\n\n\nReturn `expression` *after adding a pair of parentheses such that* `expression` *evaluates to the **smallest** possible value.* If there are multiple answers that yield the same result, return any of them.\n\n\nThe input has been generated such that the original value of `expression`, and the value of `expression` after adding any pair of parentheses that meets the requirements fits within a signed 32-bit integer.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** expression = \"247+38\"",
                "Output": "** \"2(47+38)\"",
                "Explanation": "** The expression evaluates to 2 * (47 + 38) = 2 * 85 = 170.\nNote that \"2(4)7+38\" is invalid because the right parenthesis must be to the right of the '+'.\nIt can be shown that 170 is the smallest possible value."
            },
            {
                "Input": "** expression = \"12+34\"",
                "Output": "** \"1(2+3)4\"",
                "Explanation": "** The expression evaluates to 1 * (2 + 3) * 4 = 1 * 5 * 4 = 20."
            },
            {
                "Input": "** expression = \"999+999\"",
                "Output": "** \"(999+999)\"",
                "Explanation": "** The expression evaluates to 999 + 999 = 1998."
            }
        ]
    },
    {
        "Title": "Maximum Product After K Increments",
        "slug": "maximum-product-after-k-increments",
        "description": "You are given an array of non-negative integers `nums` and an integer `k`. In one operation, you may choose **any** element from `nums` and **increment** it by `1`.\n\n\nReturn *the **maximum** **product** of* `nums` *after **at most*** `k` *operations.* Since the answer may be very large, return it **modulo** `109 + 7`. Note that you should maximize the product before taking the modulo.\u00a0\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** nums = [0,4], k = 5",
                "Output": "** 20",
                "Explanation": "** Increment the first number 5 times.\nNow nums = [5, 4], with a product of 5 * 4 = 20.\nIt can be shown that 20 is maximum product possible, so we return 20.\nNote that there may be other ways to increment nums to have the maximum product."
            },
            {
                "Input": "** nums = [6,3,3,2], k = 2",
                "Output": "** 216",
                "Explanation": "** Increment the second number 1 time and increment the fourth number 1 time.\nNow nums = [6, 4, 3, 3], with a product of 6 * 4 * 3 * 3 = 216.\nIt can be shown that 216 is maximum product possible, so we return 216.\nNote that there may be other ways to increment nums to have the maximum product."
            }
        ]
    },
    {
        "Title": "Maximum Total Beauty of the Gardens",
        "slug": "maximum-total-beauty-of-the-gardens",
        "description": "Alice is a caretaker of `n` gardens and she wants to plant flowers to maximize the total beauty of all her gardens.\n\n\nYou are given a **0-indexed** integer array `flowers` of size `n`, where `flowers[i]` is the number of flowers already planted in the `ith` garden. Flowers that are already planted **cannot** be removed. You are then given another integer `newFlowers`, which is the **maximum** number of flowers that Alice can additionally plant. You are also given the integers `target`, `full`, and `partial`.\n\n\nA garden is considered **complete** if it has **at least** `target` flowers. The **total beauty** of the gardens is then determined as the **sum** of the following:\n\n\n The number of **complete** gardens multiplied by `full`.\n The **minimum** number of flowers in any of the **incomplete** gardens multiplied by `partial`. If there are no incomplete gardens, then this value will be `0`.\n\n\nReturn *the **maximum** total beauty that Alice can obtain after planting at most* `newFlowers` *flowers.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** flowers = [1,3,1,1], newFlowers = 7, target = 6, full = 12, partial = 1",
                "Output": "** 14",
                "Explanation": "** Alice can plant\n- 2 flowers in the 0th garden\n- 3 flowers in the 1st garden\n- 1 flower in the 2nd garden\n- 1 flower in the 3rd garden\nThe gardens will then be [3,6,2,2]. She planted a total of 2 + 3 + 1 + 1 = 7 flowers.\nThere is 1 garden that is complete.\nThe minimum number of flowers in the incomplete gardens is 2.\nThus, the total beauty is 1 * 12 + 2 * 1 = 12 + 2 = 14.\nNo other way of planting flowers can obtain a total beauty higher than 14."
            },
            {
                "Input": "** flowers = [2,4,5,3], newFlowers = 10, target = 5, full = 2, partial = 6",
                "Output": "** 30",
                "Explanation": "** Alice can plant\n- 3 flowers in the 0th garden\n- 0 flowers in the 1st garden\n- 0 flowers in the 2nd garden\n- 2 flowers in the 3rd garden\nThe gardens will then be [5,4,5,5]. She planted a total of 3 + 0 + 0 + 2 = 5 flowers.\nThere are 3 gardens that are complete.\nThe minimum number of flowers in the incomplete gardens is 4.\nThus, the total beauty is 3 * 2 + 4 * 6 = 6 + 24 = 30.\nNo other way of planting flowers can obtain a total beauty higher than 30.\nNote that Alice could make all the gardens complete but in this case, she would obtain a lower total beauty."
            }
        ]
    },
    {
        "Title": "Add Two Integers",
        "slug": "add-two-integers",
        "description": "Given two integers `num1` and `num2`, return *the **sum** of the two integers*.\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** num1 = 12, num2 = 5",
                "Output": "** 17",
                "Explanation": "** num1 is 12, num2 is 5, and their sum is 12 + 5 = 17, so 17 is returned."
            },
            {
                "Input": "** num1 = -10, num2 = 4",
                "Output": "** -6",
                "Explanation": "** num1 + num2 = -6, so -6 is returned."
            }
        ]
    },
    {
        "Title": "Root Equals Sum of Children",
        "slug": "root-equals-sum-of-children",
        "description": "You are given the `root` of a **binary tree** that consists of exactly `3` nodes: the root, its left child, and its right child.\n\n\nReturn `true` *if the value of the root is equal to the **sum** of the values of its two children, or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [10,4,6]",
                "Output": "** true",
                "Explanation": "** The values of the root, its left child, and its right child are 10, 4, and 6, respectively.\n10 is equal to 4 + 6, so we return true."
            },
            {
                "Input": "** root = [5,3,1]",
                "Output": "** false",
                "Explanation": "** The values of the root, its left child, and its right child are 5, 3, and 1, respectively.\n5 is not equal to 3 + 1, so we return false."
            }
        ]
    },
    {
        "Title": "Find Closest Number to Zero",
        "slug": "find-closest-number-to-zero",
        "description": "Given an integer array `nums` of size `n`, return *the number with the value **closest** to* `0` *in* `nums`. If there are multiple answers, return *the number with the **largest** value*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [-4,-2,1,4,8]",
                "Output": "** 1",
                "Explanation": "**\nThe distance from -4 to 0 is |-4| = 4.\nThe distance from -2 to 0 is |-2| = 2.\nThe distance from 1 to 0 is |1| = 1.\nThe distance from 4 to 0 is |4| = 4.\nThe distance from 8 to 0 is |8| = 8.\nThus, the closest number to 0 in the array is 1."
            },
            {
                "Input": "** nums = [2,-1,1]",
                "Output": "** 1",
                "Explanation": "** 1 and -1 are both the closest numbers to 0, so 1 being larger is returned."
            }
        ]
    },
    {
        "Title": "Number of Ways to Buy Pens and Pencils",
        "slug": "number-of-ways-to-buy-pens-and-pencils",
        "description": "You are given an integer `total` indicating the amount of money you have. You are also given two integers `cost1` and `cost2` indicating the price of a pen and pencil respectively. You can spend **part or all** of your money to buy multiple quantities (or none) of each kind of writing utensil.\n\n\nReturn *the **number of distinct ways** you can buy some number of pens and pencils.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** total = 20, cost1 = 10, cost2 = 5",
                "Output": "** 9",
                "Explanation": "** The price of a pen is 10 and the price of a pencil is 5.\n- If you buy 0 pens, you can buy 0, 1, 2, 3, or 4 pencils.\n- If you buy 1 pen, you can buy 0, 1, or 2 pencils.\n- If you buy 2 pens, you cannot buy any pencils.\nThe total number of ways to buy pens and pencils is 5 + 3 + 1 = 9."
            },
            {
                "Input": "** total = 5, cost1 = 10, cost2 = 10",
                "Output": "** 1",
                "Explanation": "** The price of both pens and pencils are 10, which cost more than total, so you cannot buy any writing utensils. Therefore, there is only 1 way: buy 0 pens and 0 pencils."
            }
        ]
    },
    {
        "Title": "Design an ATM Machine",
        "slug": "design-an-atm-machine",
        "description": "There is an ATM machine that stores banknotes of `5` denominations: `20`, `50`, `100`, `200`, and `500` dollars. Initially the ATM is empty. The user can use the machine to deposit or withdraw any amount of money.\n\n\nWhen withdrawing, the machine prioritizes using banknotes of **larger** values.\n\n\n For example, if you want to withdraw `$300` and there are `2` `$50` banknotes, `1` `$100` banknote, and `1` `$200` banknote, then the machine will use the `$100` and `$200` banknotes.\n However, if you try to withdraw `$600` and there are `3` `$200` banknotes and `1` `$500` banknote, then the withdraw request will be rejected because the machine will first try to use the `$500` banknote and then be unable to use banknotes to complete the remaining `$100`. Note that the machine is **not** allowed to use the `$200` banknotes instead of the `$500` banknote.\n\n\nImplement the ATM class:\n\n\n `ATM()` Initializes the ATM object.\n `void deposit(int[] banknotesCount)` Deposits new banknotes in the order `$20`, `$50`, `$100`, `$200`, and `$500`.\n `int[] withdraw(int amount)` Returns an array of length `5` of the number of banknotes that will be handed to the user in the order `$20`, `$50`, `$100`, `$200`, and `$500`, and update the number of banknotes in the ATM after withdrawing. Returns `[-1]` if it is not possible (do **not** withdraw any banknotes in this case).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Design"
        ],
        "examples": [
            {
                "Input": "[\"ATM\", \"deposit\", \"withdraw\", \"deposit\", \"withdraw\", \"withdraw\"]\n[[], [[0,0,1,2,1]], [600], [[0,1,0,1,1]], [600], [550]]",
                "Output": "[null, null, [0,0,1,0,1], null, [-1], [0,1,0,0,1]]",
                "Explanation": "ATM atm = new ATM();\natm.deposit([0,0,1,2,1]); // Deposits 1 $100 banknote, 2 $200 banknotes,\n                          // and 1 $500 banknote.\natm.withdraw(600);        // Returns [0,0,1,0,1]. The machine uses 1 $100 banknote\n                          // and 1 $500 banknote. The banknotes left over in the\n                          // machine are [0,0,0,2,0].\natm.deposit([0,1,0,1,1]); // Deposits 1 $50, $200, and $500 banknote.\n                          // The banknotes in the machine are now [0,1,0,3,1].\natm.withdraw(600);        // Returns [-1]. The machine will try to use a $500 banknote\n                          // and then be unable to complete the remaining $100,\n                          // so the withdraw request will be rejected.\n                          // Since the request is rejected, the number of banknotes\n                          // in the machine is not modified.\natm.withdraw(550);        // Returns [0,1,0,0,1]. The machine uses 1 $50 banknote\n                          // and 1 $500 banknote."
            }
        ]
    },
    {
        "Title": "Maximum Score of a Node Sequence",
        "slug": "maximum-score-of-a-node-sequence",
        "description": "There is an **undirected** graph with `n` nodes, numbered from `0` to `n - 1`.\n\n\nYou are given a **0-indexed** integer array `scores` of length `n` where `scores[i]` denotes the score of node `i`. You are also given a 2D integer array `edges` where `edges[i] = [ai, bi]` denotes that there exists an **undirected** edge connecting nodes `ai` and `bi`.\n\n\nA node sequence is **valid** if it meets the following conditions:\n\n\n There is an edge connecting every pair of **adjacent** nodes in the sequence.\n No node appears more than once in the sequence.\n\n\nThe score of a node sequence is defined as the **sum** of the scores of the nodes in the sequence.\n\n\nReturn *the **maximum score** of a valid node sequence with a length of* `4`*.* If no such sequence exists, return`-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Graph",
            "Sorting",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** scores = [5,2,9,8,4], edges = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]",
                "Output": "** 24",
                "Explanation": "** The figure above shows the graph and the chosen node sequence [0,1,2,3].\nThe score of the node sequence is 5 + 2 + 9 + 8 = 24.\nIt can be shown that no other node sequence has a score of more than 24.\nNote that the sequences [3,1,2,0] and [1,0,2,3] are also valid and have a score of 24.\nThe sequence [0,3,2,4] is not valid since no edge connects nodes 0 and 3."
            },
            {
                "Input": "** scores = [9,20,6,4,11,12], edges = [[0,3],[5,3],[2,4],[1,3]]",
                "Output": "** -1",
                "Explanation": "** The figure above shows the graph.\nThere are no valid node sequences of length 4, so we return -1."
            }
        ]
    },
    {
        "Title": "Calculate Digit Sum of a String",
        "slug": "calculate-digit-sum-of-a-string",
        "description": "You are given a string `s` consisting of digits and an integer `k`.\n\n\nA **round** can be completed if the length of `s` is greater than `k`. In one round, do the following:\n\n\n1. **Divide** `s` into **consecutive groups** of size `k` such that the first `k` characters are in the first group, the next `k` characters are in the second group, and so on. **Note** that the size of the last group can be smaller than `k`.\n2. **Replace** each group of `s` with a string representing the sum of all its digits. For example, `\"346\"` is replaced with `\"13\"` because `3 + 4 + 6 = 13`.\n3. **Merge** consecutive groups together to form a new string. If the length of the string is greater than `k`, repeat from step `1`.\n\n\nReturn `s` *after all rounds have been completed*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** s = \"11111222223\", k = 3",
                "Output": "** \"135\"",
                "Explanation": "** \n- For the first round, we divide s into groups of size 3: \"111\", \"112\", \"222\", and \"23\".\n  \u200b\u200b\u200b\u200b\u200bThen we calculate the digit sum of each group: 1 + 1 + 1 = 3, 1 + 1 + 2 = 4, 2 + 2 + 2 = 6, and 2 + 3 = 5. \n\u00a0 So, s becomes \"3\" + \"4\" + \"6\" + \"5\" = \"3465\" after the first round.\n- For the second round, we divide s into \"346\" and \"5\".\n\u00a0 Then we calculate the digit sum of each group: 3 + 4 + 6 = 13, 5 = 5. \n\u00a0 So, s becomes \"13\" + \"5\" = \"135\" after second round. \nNow, s.length <= k, so we return \"135\" as the answer."
            },
            {
                "Input": "** s = \"00000000\", k = 3",
                "Output": "** \"000\"",
                "Explanation": "** \nWe divide s into \"000\", \"000\", and \"00\".\nThen we calculate the digit sum of each group: 0 + 0 + 0 = 0, 0 + 0 + 0 = 0, and 0 + 0 = 0. \ns becomes \"0\" + \"0\" + \"0\" = \"000\", whose length is equal to k, so we return \"000\"."
            }
        ]
    },
    {
        "Title": "Minimum Rounds to Complete All Tasks",
        "slug": "minimum-rounds-to-complete-all-tasks",
        "description": "You are given a **0-indexed** integer array `tasks`, where `tasks[i]` represents the difficulty level of a task. In each round, you can complete either 2 or 3 tasks of the **same difficulty level**.\n\n\nReturn *the **minimum** rounds required to complete all the tasks, or* `-1` *if it is not possible to complete all the tasks.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** tasks = [2,2,3,3,2,4,4,4,4,4]",
                "Output": "** 4",
                "Explanation": "** To complete all the tasks, a possible plan is:\n- In the first round, you complete 3 tasks of difficulty level 2. \n- In the second round, you complete 2 tasks of difficulty level 3. \n- In the third round, you complete 3 tasks of difficulty level 4. \n- In the fourth round, you complete 2 tasks of difficulty level 4.  \nIt can be shown that all the tasks cannot be completed in fewer than 4 rounds, so the answer is 4."
            },
            {
                "Input": "** tasks = [2,3,3]",
                "Output": "** -1",
                "Explanation": "** There is only 1 task of difficulty level 2, but in each round, you can only complete either 2 or 3 tasks of the same difficulty level. Hence, you cannot complete all the tasks, and the answer is -1."
            }
        ]
    },
    {
        "Title": "Maximum Trailing Zeros in a Cornered Path",
        "slug": "maximum-trailing-zeros-in-a-cornered-path",
        "description": "You are given a 2D integer array `grid` of size `m x n`, where each cell contains a positive integer.\n\n\nA **cornered path** is defined as a set of adjacent cells with **at most** one turn. More specifically, the path should exclusively move either **horizontally** or **vertically** up to the turn (if there is one), without returning to a previously visited cell. After the turn, the path will then move exclusively in the **alternate** direction: move vertically if it moved horizontally, and vice versa, also without returning to a previously visited cell.\n\n\nThe **product** of a path is defined as the product of all the values in the path.\n\n\nReturn *the **maximum** number of **trailing zeros** in the product of a cornered path found in* `grid`.\n\n\nNote:\n\n\n **Horizontal** movement means moving in either the left or right direction.\n **Vertical** movement means moving in either the up or down direction.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** grid = [[23,17,15,3,20],[8,1,20,27,11],[9,4,6,2,21],[40,9,1,10,6],[22,7,4,5,3]]",
                "Output": "** 3",
                "Explanation": "** The grid on the left shows a valid cornered path.\nIt has a product of 15 * 20 * 6 * 1 * 10 = 18000 which has 3 trailing zeros.\nIt can be shown that this is the maximum trailing zeros in the product of a cornered path.\n\nThe grid in the middle is not a cornered path as it has more than one turn.\nThe grid on the right is not a cornered path as it requires a return to a previously visited cell."
            },
            {
                "Input": "** grid = [[4,3,2],[7,6,1],[8,8,8]]",
                "Output": "** 0",
                "Explanation": "** The grid is shown in the figure above.\nThere are no cornered paths in the grid that result in a product with a trailing zero."
            }
        ]
    },
    {
        "Title": "Longest Path With Different Adjacent Characters",
        "slug": "longest-path-with-different-adjacent-characters",
        "description": "You are given a **tree** (i.e. a connected, undirected graph that has no cycles) **rooted** at node `0` consisting of `n` nodes numbered from `0` to `n - 1`. The tree is represented by a **0-indexed** array `parent` of size `n`, where `parent[i]` is the parent of node `i`. Since node `0` is the root, `parent[0] == -1`.\n\n\nYou are also given a string `s` of length `n`, where `s[i]` is the character assigned to node `i`.\n\n\nReturn *the length of the **longest path** in the tree such that no pair of **adjacent** nodes on the path have the same character assigned to them.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "String",
            "Tree",
            "Depth-First Search",
            "Graph",
            "Topological Sort"
        ],
        "examples": [
            {
                "Input": "** parent = [-1,0,0,1,1,2], s = \"abacbe\"",
                "Output": "** 3",
                "Explanation": "** The longest path where each two adjacent nodes have different characters in the tree is the path: 0 -> 1 -> 3. The length of this path is 3, so 3 is returned.\nIt can be proven that there is no longer path that satisfies the conditions."
            },
            {
                "Input": "** parent = [-1,0,0,0], s = \"aabc\"",
                "Output": "** 3",
                "Explanation": "** The longest path where each two adjacent nodes have different characters is the path: 2 -> 0 -> 3. The length of this path is 3, so 3 is returned."
            }
        ]
    },
    {
        "Title": "Intersection of Multiple Arrays",
        "slug": "intersection-of-multiple-arrays",
        "description": "Given a 2D integer array `nums` where `nums[i]` is a non-empty array of **distinct** positive integers, return *the list of integers that are present in **each array** of* `nums` *sorted in **ascending order***.\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [[**3**,1,2,**4**,5],[1,2,**3**,**4**],[**3**,**4**,5,6]]",
                "Output": "** [3,4]",
                "Explanation": "** \nThe only integers present in each of nums[0] = [**3**,1,2,**4**,5], nums[1] = [1,2,**3**,**4**], and nums[2] = [**3**,**4**,5,6] are 3 and 4, so we return [3,4]."
            },
            {
                "Input": "** nums = [[1,2,3],[4,5,6]]",
                "Output": "** []",
                "Explanation": "** \nThere does not exist any integer present both in nums[0] and nums[1], so we return an empty list []."
            }
        ]
    },
    {
        "Title": "Count Lattice Points Inside a Circle",
        "slug": "count-lattice-points-inside-a-circle",
        "description": "Given a 2D integer array `circles` where `circles[i] = [xi, yi, ri]` represents the center `(xi, yi)` and radius `ri` of the `ith` circle drawn on a grid, return *the **number of lattice points*** *that are present inside **at least one** circle*.\n\n\nNote:\n\n\n A **lattice point** is a point with integer coordinates.\n Points that lie **on the circumference of a circle** are also considered to be inside it.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Geometry",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** circles = [[2,2,1]]",
                "Output": "** 5",
                "Explanation": "**\nThe figure above shows the given circle.\nThe lattice points present inside the circle are (1, 2), (2, 1), (2, 2), (2, 3), and (3, 2) and are shown in green.\nOther points such as (1, 1) and (1, 3), which are shown in red, are not considered inside the circle.\nHence, the number of lattice points present inside at least one circle is 5."
            },
            {
                "Input": "** circles = [[2,2,2],[3,4,1]]",
                "Output": "** 16",
                "Explanation": "**\nThe figure above shows the given circles.\nThere are exactly 16 lattice points which are present inside at least one circle. \nSome of them are (0, 2), (2, 0), (2, 4), (3, 2), and (4, 4)."
            }
        ]
    },
    {
        "Title": "Count Number of Rectangles Containing Each Point",
        "slug": "count-number-of-rectangles-containing-each-point",
        "description": "You are given a 2D integer array `rectangles` where `rectangles[i] = [li, hi]` indicates that `ith` rectangle has a length of `li` and a height of `hi`. You are also given a 2D integer array `points` where `points[j] = [xj, yj]` is a point with coordinates `(xj, yj)`.\n\n\nThe `ith` rectangle has its **bottom-left corner** point at the coordinates `(0, 0)` and its **top-right corner** point at `(li, hi)`.\n\n\nReturn *an integer array* `count` *of length* `points.length` *where* `count[j]` *is the number of rectangles that **contain** the* `jth` *point.\n\n\nThe `ith` rectangle **contains** the `jth` point if `0 <= xj <= li` and `0 <= yj <= hi`. Note that points that lie on the **edges** of a rectangle are also considered to be contained by that rectangle.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Binary Indexed Tree",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** rectangles = [[1,2],[2,3],[2,5]], points = [[2,1],[1,4]]",
                "Output": "** [2,1]",
                "Explanation": "** \nThe first rectangle contains no points.\nThe second rectangle contains only the point (2, 1).\nThe third rectangle contains the points (2, 1) and (1, 4).\nThe number of rectangles that contain the point (2, 1) is 2.\nThe number of rectangles that contain the point (1, 4) is 1.\nTherefore, we return [2, 1]."
            },
            {
                "Input": "** rectangles = [[1,1],[2,2],[3,3]], points = [[1,3],[1,1]]",
                "Output": "** [1,3]",
                "Explanation": "**The first rectangle contains only the point (1, 1).\nThe second rectangle contains only the point (1, 1).\nThe third rectangle contains the points (1, 3) and (1, 1).\nThe number of rectangles that contain the point (1, 3) is 1.\nThe number of rectangles that contain the point (1, 1) is 3.\nTherefore, we return [1, 3]."
            }
        ]
    },
    {
        "Title": "Number of Flowers in Full Bloom",
        "slug": "number-of-flowers-in-full-bloom",
        "description": "You are given a **0-indexed** 2D integer array `flowers`, where `flowers[i] = [starti, endi]` means the `ith` flower will be in **full bloom** from `starti` to `endi` (**inclusive**). You are also given a **0-indexed** integer array `people` of size `n`, where `people[i]` is the time that the `ith` person will arrive to see the flowers.\n\n\nReturn *an integer array* `answer` *of size* `n`*, where* `answer[i]` *is the **number** of flowers that are in full bloom when the* `ith` *person arrives.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Sorting",
            "Prefix Sum",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** flowers = [[1,6],[3,7],[9,12],[4,13]], people = [2,3,7,11]",
                "Output": "** [1,2,2,2]",
                "Explanation": "** The figure above shows the times when the flowers are in full bloom and when the people arrive.\nFor each person, we return the number of flowers in full bloom during their arrival."
            },
            {
                "Input": "** flowers = [[1,10],[3,3]], people = [3,3,2]",
                "Output": "** [2,2,1]",
                "Explanation": "** The figure above shows the times when the flowers are in full bloom and when the people arrive.\nFor each person, we return the number of flowers in full bloom during their arrival."
            }
        ]
    },
    {
        "Title": "Count Prefixes of a Given String",
        "slug": "count-prefixes-of-a-given-string",
        "description": "You are given a string array `words` and a string `s`, where `words[i]` and `s` comprise only of **lowercase English letters**.\n\n\nReturn *the **number of strings** in* `words` *that are a **prefix** of* `s`.\n\n\nA **prefix** of a string is a substring that occurs at the beginning of the string. A **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "examples": [
            {
                "Input": "** words = [\"a\",\"b\",\"c\",\"ab\",\"bc\",\"abc\"], s = \"abc\"",
                "Output": "** 3",
                "Explanation": "**\nThe strings in words which are a prefix of s = \"abc\" are:\n\"a\", \"ab\", and \"abc\".\nThus the number of strings in words which are a prefix of s is 3."
            },
            {
                "Input": "** words = [\"a\",\"a\"], s = \"aa\"",
                "Output": "** 2",
                "Explanation": "**Both of the strings are a prefix of s. \nNote that the same string can occur multiple times in words, and it should be counted each time."
            }
        ]
    },
    {
        "Title": "Minimum Average Difference",
        "slug": "minimum-average-difference",
        "description": "You are given a **0-indexed** integer array `nums` of length `n`.\n\n\nThe **average difference** of the index `i` is the **absolute** **difference** between the average of the **first** `i + 1` elements of `nums` and the average of the **last** `n - i - 1` elements. Both averages should be **rounded down** to the nearest integer.\n\n\nReturn *the index with the **minimum average difference***. If there are multiple such indices, return the **smallest** one.\n\n\nNote:\n\n\n The **absolute difference** of two numbers is the absolute value of their difference.\n The **average** of `n` elements is the **sum** of the `n` elements divided (**integer division**) by `n`.\n The average of `0` elements is considered to be `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [2,5,3,9,5,3]",
                "Output": "** 3",
                "Explanation": "**\n- The average difference of index 0 is: |2 / 1 - (5 + 3 + 9 + 5 + 3) / 5| = |2 / 1 - 25 / 5| = |2 - 5| = 3.\n- The average difference of index 1 is: |(2 + 5) / 2 - (3 + 9 + 5 + 3) / 4| = |7 / 2 - 20 / 4| = |3 - 5| = 2.\n- The average difference of index 2 is: |(2 + 5 + 3) / 3 - (9 + 5 + 3) / 3| = |10 / 3 - 17 / 3| = |3 - 5| = 2.\n- The average difference of index 3 is: |(2 + 5 + 3 + 9) / 4 - (5 + 3) / 2| = |19 / 4 - 8 / 2| = |4 - 4| = 0.\n- The average difference of index 4 is: |(2 + 5 + 3 + 9 + 5) / 5 - 3 / 1| = |24 / 5 - 3 / 1| = |4 - 3| = 1.\n- The average difference of index 5 is: |(2 + 5 + 3 + 9 + 5 + 3) / 6 - 0| = |27 / 6 - 0| = |4 - 0| = 4.\nThe average difference of index 3 is the minimum average difference so return 3."
            },
            {
                "Input": "** nums = [0]",
                "Output": "** 0",
                "Explanation": "**\nThe only index is 0 so return 0.\nThe average difference of index 0 is: |0 / 1 - 0| = |0 - 0| = 0."
            }
        ]
    },
    {
        "Title": "Count Unguarded Cells in the Grid",
        "slug": "count-unguarded-cells-in-the-grid",
        "description": "You are given two integers `m` and `n` representing a **0-indexed** `m x n` grid. You are also given two 2D integer arrays `guards` and `walls` where `guards[i] = [rowi, coli]` and `walls[j] = [rowj, colj]` represent the positions of the `ith` guard and `jth` wall respectively.\n\n\nA guard can see **every** cell in the four cardinal directions (north, east, south, or west) starting from their position unless **obstructed** by a wall or another guard. A cell is **guarded** if there is **at least** one guard that can see it.\n\n\nReturn *the number of unoccupied cells that are **not** **guarded**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** m = 4, n = 6, guards = [[0,0],[1,1],[2,3]], walls = [[0,1],[2,2],[1,4]]",
                "Output": "** 7",
                "Explanation": "** The guarded and unguarded cells are shown in red and green respectively in the above diagram.\nThere are a total of 7 unguarded cells, so we return 7."
            },
            {
                "Input": "** m = 3, n = 3, guards = [[1,1]], walls = [[0,1],[1,0],[2,1],[1,2]]",
                "Output": "** 4",
                "Explanation": "** The unguarded cells are shown in green in the above diagram.\nThere are a total of 4 unguarded cells, so we return 4."
            }
        ]
    },
    {
        "Title": "Escape the Spreading Fire",
        "slug": "escape-the-spreading-fire",
        "description": "You are given a **0-indexed** 2D integer array `grid` of size `m x n` which represents a field. Each cell has one of three values:\n\n\n `0` represents grass,\n `1` represents fire,\n `2` represents a wall that you and fire cannot pass through.\n\n\nYou are situated in the top-left cell, `(0, 0)`, and you want to travel to the safehouse at the bottom-right cell, `(m - 1, n - 1)`. Every minute, you may move to an **adjacent** grass cell. **After** your move, every fire cell will spread to all **adjacent** cells that are not walls.\n\n\nReturn *the **maximum** number of minutes that you can stay in your initial position before moving while still safely reaching the safehouse*. If this is impossible, return `-1`. If you can **always** reach the safehouse regardless of the minutes stayed, return `109`.\n\n\nNote that even if the fire spreads to the safehouse immediately after you have reached it, it will be counted as safely reaching the safehouse.\n\n\nA cell is **adjacent** to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Breadth-First Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[0,2,0,0,0,0,0],[0,0,0,2,2,1,0],[0,2,0,0,1,2,0],[0,0,2,2,2,0,2],[0,0,0,0,0,0,0]]",
                "Output": "** 3",
                "Explanation": "** The figure above shows the scenario where you stay in the initial position for 3 minutes.\nYou will still be able to safely reach the safehouse.\nStaying for more than 3 minutes will not allow you to safely reach the safehouse."
            },
            {
                "Input": "** grid = [[0,0,0,0],[0,1,2,0],[0,2,0,0]]",
                "Output": "** -1",
                "Explanation": "** The figure above shows the scenario where you immediately move towards the safehouse.\nFire will spread to any cell you move towards and it is impossible to safely reach the safehouse.\nThus, -1 is returned."
            },
            {
                "Input": "** grid = [[0,0,0],[2,2,0],[1,2,0]]",
                "Output": "** 1000000000",
                "Explanation": "** The figure above shows the initial grid.\nNotice that the fire is contained by walls and you will always be able to safely reach the safehouse.\nThus, 109 is returned."
            }
        ]
    },
    {
        "Title": "Remove Digit From Number to Maximize Result",
        "slug": "remove-digit-from-number-to-maximize-result",
        "description": "You are given a string `number` representing a **positive integer** and a character `digit`.\n\n\nReturn *the resulting string after removing **exactly one occurrence** of* `digit` *from* `number` *such that the value of the resulting string in **decimal** form is **maximized***. The test cases are generated such that `digit` occurs at least once in `number`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Greedy",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** number = \"123\", digit = \"3\"",
                "Output": "** \"12\"",
                "Explanation": "** There is only one '3' in \"123\". After removing '3', the result is \"12\"."
            },
            {
                "Input": "** number = \"1231\", digit = \"1\"",
                "Output": "** \"231\"",
                "Explanation": "** We can remove the first '1' to get \"231\" or remove the second '1' to get \"123\".\nSince 231 > 123, we return \"231\"."
            },
            {
                "Input": "** number = \"551\", digit = \"5\"",
                "Output": "** \"51\"",
                "Explanation": "** We can remove either the first or second '5' from \"551\".\nBoth result in the string \"51\"."
            }
        ]
    },
    {
        "Title": "Minimum Consecutive Cards to Pick Up",
        "slug": "minimum-consecutive-cards-to-pick-up",
        "description": "You are given an integer array `cards` where `cards[i]` represents the **value** of the `ith` card. A pair of cards are **matching** if the cards have the **same** value.\n\n\nReturn *the **minimum** number of **consecutive** cards you have to pick up to have a pair of **matching** cards among the picked cards.* If it is impossible to have matching cards, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** cards = [3,4,2,3,4,7]",
                "Output": "** 4",
                "Explanation": "** We can pick up the cards [3,4,2,3] which contain a matching pair of cards with value 3. Note that picking up the cards [4,2,3,4] is also optimal."
            },
            {
                "Input": "** cards = [1,0,5,3]",
                "Output": "** -1",
                "Explanation": "** There is no way to pick up a set of consecutive cards that contain a pair of matching cards."
            }
        ]
    },
    {
        "Title": "K Divisible Elements Subarrays",
        "slug": "k-divisible-elements-subarrays",
        "description": "Given an integer array `nums` and two integers `k` and `p`, return *the number of **distinct subarrays,** which have **at most*** `k` *elements* that are *divisible by* `p`.\n\n\nTwo arrays `nums1` and `nums2` are said to be **distinct** if:\n\n\n They are of **different** lengths, or\n There exists **at least** one index `i` where `nums1[i] != nums2[i]`.\n\n\nA **subarray** is defined as a **non-empty** contiguous sequence of elements in an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Trie",
            "Rolling Hash",
            "Hash Function",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** nums = [**2**,3,3,**2**,**2**], k = 2, p = 2",
                "Output": "** 11",
                "Explanation": "**\nThe elements at indices 0, 3, and 4 are divisible by p = 2.\nThe 11 distinct subarrays which have at most k = 2 elements divisible by 2 are:\n[2], [2,3], [2,3,3], [2,3,3,2], [3], [3,3], [3,3,2], [3,3,2,2], [3,2], [3,2,2], and [2,2].\nNote that the subarrays [2] and [3] occur more than once in nums, but they should each be counted only once.\nThe subarray [2,3,3,2,2] should not be counted because it has 3 elements that are divisible by 2."
            },
            {
                "Input": "** nums = [1,2,3,4], k = 4, p = 1",
                "Output": "** 10",
                "Explanation": "**\nAll element of nums are divisible by p = 1.\nAlso, every subarray of nums will have at most 4 elements that are divisible by 1.\nSince all subarrays are distinct, the total number of subarrays satisfying all the constraints is 10."
            }
        ]
    },
    {
        "Title": "Total Appeal of A String",
        "slug": "total-appeal-of-a-string",
        "description": "The **appeal** of a string is the number of **distinct** characters found in the string.\n\n\n For example, the appeal of `\"abbca\"` is `3` because it has `3` distinct characters: `'a'`, `'b'`, and `'c'`.\n\n\nGiven a string `s`, return *the **total appeal of all of its **substrings**.\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"abbca\"",
                "Output": "** 28",
                "Explanation": "** The following are the substrings of \"abbca\":\n- Substrings of length 1: \"a\", \"b\", \"b\", \"c\", \"a\" have an appeal of 1, 1, 1, 1, and 1 respectively. The sum is 5.\n- Substrings of length 2: \"ab\", \"bb\", \"bc\", \"ca\" have an appeal of 2, 1, 2, and 2 respectively. The sum is 7.\n- Substrings of length 3: \"abb\", \"bbc\", \"bca\" have an appeal of 2, 2, and 3 respectively. The sum is 7.\n- Substrings of length 4: \"abbc\", \"bbca\" have an appeal of 3 and 3 respectively. The sum is 6.\n- Substrings of length 5: \"abbca\" has an appeal of 3. The sum is 3.\nThe total sum is 5 + 7 + 7 + 6 + 3 = 28."
            },
            {
                "Input": "** s = \"code\"",
                "Output": "** 20",
                "Explanation": "** The following are the substrings of \"code\":\n- Substrings of length 1: \"c\", \"o\", \"d\", \"e\" have an appeal of 1, 1, 1, and 1 respectively. The sum is 4.\n- Substrings of length 2: \"co\", \"od\", \"de\" have an appeal of 2, 2, and 2 respectively. The sum is 6.\n- Substrings of length 3: \"cod\", \"ode\" have an appeal of 3 and 3 respectively. The sum is 6.\n- Substrings of length 4: \"code\" has an appeal of 4. The sum is 4.\nThe total sum is 4 + 6 + 6 + 4 = 20."
            }
        ]
    },
    {
        "Title": "Largest 3-Same-Digit Number in String",
        "slug": "largest-3-same-digit-number-in-string",
        "description": "You are given a string `num` representing a large integer. An integer is **good** if it meets the following conditions:\n\n\n It is a **substring** of `num` with length `3`.\n It consists of only one unique digit.\n\n\nReturn *the **maximum good** integer as a **string** or an empty string* `\"\"` *if no such integer exists*.\n\n\nNote:\n\n\n A **substring** is a contiguous sequence of characters within a string.\n There may be **leading zeroes** in `num` or a good integer.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** num = \"6**777**133339\"",
                "Output": "** \"777\"",
                "Explanation": "** There are two distinct good integers: \"777\" and \"333\".\n\"777\" is the largest, so we return \"777\"."
            },
            {
                "Input": "** num = \"23**000**19\"",
                "Output": "** \"000\"",
                "Explanation": "** \"000\" is the only good integer."
            },
            {
                "Input": "** num = \"42352338\"",
                "Output": "** \"\"",
                "Explanation": "** No substring of length 3 consists of only one unique digit. Therefore, there are no good integers."
            }
        ]
    },
    {
        "Title": "Count Nodes Equal to Average of Subtree",
        "slug": "count-nodes-equal-to-average-of-subtree",
        "description": "Given the `root` of a binary tree, return *the number of nodes where the value of the node is equal to the **average** of the values in its **subtree***.\n\n\nNote:\n\n\n The **average** of `n` elements is the **sum** of the `n` elements divided by `n` and **rounded down** to the nearest integer.\n A **subtree** of `root` is a tree consisting of `root` and all of its descendants.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [4,8,5,0,1,null,6]",
                "Output": "** 5",
                "Explanation": "** \nFor the node with value 4: The average of its subtree is (4 + 8 + 5 + 0 + 1 + 6) / 6 = 24 / 6 = 4.\nFor the node with value 5: The average of its subtree is (5 + 6) / 2 = 11 / 2 = 5.\nFor the node with value 0: The average of its subtree is 0 / 1 = 0.\nFor the node with value 1: The average of its subtree is 1 / 1 = 1.\nFor the node with value 6: The average of its subtree is 6 / 1 = 6."
            },
            {
                "Input": "** root = [1]",
                "Output": "** 1",
                "Explanation": "** For the node with value 1: The average of its subtree is 1 / 1 = 1."
            }
        ]
    },
    {
        "Title": "Count Number of Texts",
        "slug": "count-number-of-texts",
        "description": "Alice is texting Bob using her phone. The **mapping** of digits to letters is shown in the figure below.\n\n\n![](https://assets.leetcode.com/uploads/2022/03/15/1200px-telephone-keypad2svg.png)\nIn order to **add** a letter, Alice has to **press** the key of the corresponding digit `i` times, where `i` is the position of the letter in the key.\n\n\n For example, to add the letter `'s'`, Alice has to press `'7'` four times. Similarly, to add the letter `'k'`, Alice has to press `'5'` twice.\n Note that the digits `'0'` and `'1'` do not map to any letters, so Alice **does not** use them.\n\n\nHowever, due to an error in transmission, Bob did not receive Alice's text message but received a **string of pressed keys** instead.\n\n\n For example, when Alice sent the message `\"bob\"`, Bob received the string `\"2266622\"`.\n\n\nGiven a string `pressedKeys` representing the string received by Bob, return *the **total number of possible text messages** Alice could have sent*.\n\n\nSince the answer may be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Math",
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** pressedKeys = \"22233\"",
                "Output": "** 8",
                "Explanation": "**\nThe possible text messages Alice could have sent are:\n\"aaadd\", \"abdd\", \"badd\", \"cdd\", \"aaae\", \"abe\", \"bae\", and \"ce\".\nSince there are 8 possible messages, we return 8."
            },
            {
                "Input": "** pressedKeys = \"222222222222222222222222222222222222\"",
                "Output": "** 82876089",
                "Explanation": "**\nThere are 2082876103 possible text messages Alice could have sent.\nSince we need to return the answer modulo 109 + 7, we return 2082876103 % (109 + 7) = 82876089."
            }
        ]
    },
    {
        "Title": " Check if There Is a Valid Parentheses String Path",
        "slug": "check-if-there-is-a-valid-parentheses-string-path",
        "description": "A parentheses string is a **non-empty** string consisting only of `'('` and `')'`. It is **valid** if **any** of the following conditions is **true**:\n\n\n It is `()`.\n It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid parentheses strings.\n It can be written as `(A)`, where `A` is a valid parentheses string.\n\n\nYou are given an `m x n` matrix of parentheses `grid`. A **valid parentheses string path** in the grid is a path satisfying **all** of the following conditions:\n\n\n The path starts from the upper left cell `(0, 0)`.\n The path ends at the bottom-right cell `(m - 1, n - 1)`.\n The path only ever moves **down** or **right**.\n The resulting parentheses string formed by the path is **valid**.\n\n\nReturn `true` *if there exists a **valid parentheses string path** in the grid.* Otherwise, return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[\"(\",\"(\",\"(\"],[\")\",\"(\",\")\"],[\"(\",\"(\",\")\"],[\"(\",\"(\",\")\"]]",
                "Output": "** true",
                "Explanation": "** The above diagram shows two possible paths that form valid parentheses strings.\nThe first path shown results in the valid parentheses string \"()(())\".\nThe second path shown results in the valid parentheses string \"((()))\".\nNote that there may be other valid parentheses string paths."
            },
            {
                "Input": "** grid = [[\")\",\")\"],[\"(\",\"(\"]]",
                "Output": "** false",
                "Explanation": "** The two possible paths form the parentheses strings \"))(\" and \")((\". Since neither of them are valid parentheses strings, we return false."
            }
        ]
    },
    {
        "Title": "Find the K-Beauty of a Number",
        "slug": "find-the-k-beauty-of-a-number",
        "description": "The **k-beauty** of an integer `num` is defined as the number of **substrings** of `num` when it is read as a string that meet the following conditions:\n\n\n It has a length of `k`.\n It is a divisor of `num`.\n\n\nGiven integers `num` and `k`, return *the k-beauty of* `num`.\n\n\nNote:\n\n\n **Leading zeros** are allowed.\n `0` is not a divisor of any value.\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "String",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** num = 240, k = 2",
                "Output": "** 2",
                "Explanation": "** The following are the substrings of num of length k:\n- \"24\" from \"**24**0\": 24 is a divisor of 240.\n- \"40\" from \"2**40**\": 40 is a divisor of 240.\nTherefore, the k-beauty is 2."
            },
            {
                "Input": "** num = 430043, k = 2",
                "Output": "** 2",
                "Explanation": "** The following are the substrings of num of length k:\n- \"43\" from \"**43**0043\": 43 is a divisor of 430043.\n- \"30\" from \"4**30**043\": 30 is not a divisor of 430043.\n- \"00\" from \"43**00**43\": 0 is not a divisor of 430043.\n- \"04\" from \"430**04**3\": 4 is not a divisor of 430043.\n- \"43\" from \"4300**43**\": 43 is a divisor of 430043.\nTherefore, the k-beauty is 2."
            }
        ]
    },
    {
        "Title": "Number of Ways to Split Array",
        "slug": "number-of-ways-to-split-array",
        "description": "You are given a **0-indexed** integer array `nums` of length `n`.\n\n\n`nums` contains a **valid split** at index `i` if the following are true:\n\n\n The sum of the first `i + 1` elements is **greater than or equal to** the sum of the last `n - i - 1` elements.\n There is **at least one** element to the right of `i`. That is, `0 <= i < n - 1`.\n\n\nReturn *the number of **valid splits** in* `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [10,4,-8,7]",
                "Output": "** 2",
                "Explanation": "** \nThere are three ways of splitting nums into two non-empty parts:\n- Split nums at index 0. Then, the first part is [10], and its sum is 10. The second part is [4,-8,7], and its sum is 3. Since 10 >= 3, i = 0 is a valid split.\n- Split nums at index 1. Then, the first part is [10,4], and its sum is 14. The second part is [-8,7], and its sum is -1. Since 14 >= -1, i = 1 is a valid split.\n- Split nums at index 2. Then, the first part is [10,4,-8], and its sum is 6. The second part is [7], and its sum is 7. Since 6 < 7, i = 2 is not a valid split.\nThus, the number of valid splits in nums is 2."
            },
            {
                "Input": "** nums = [2,3,1,0]",
                "Output": "** 2",
                "Explanation": "** \nThere are two valid splits in nums:\n- Split nums at index 1. Then, the first part is [2,3], and its sum is 5. The second part is [1,0], and its sum is 1. Since 5 >= 1, i = 1 is a valid split. \n- Split nums at index 2. Then, the first part is [2,3,1], and its sum is 6. The second part is [0], and its sum is 0. Since 6 >= 0, i = 2 is a valid split."
            }
        ]
    },
    {
        "Title": "Maximum White Tiles Covered by a Carpet",
        "slug": "maximum-white-tiles-covered-by-a-carpet",
        "description": "You are given a 2D integer array `tiles` where `tiles[i] = [li, ri]` represents that every tile `j` in the range `li <= j <= ri` is colored white.\n\n\nYou are also given an integer `carpetLen`, the length of a single carpet that can be placed **anywhere**.\n\n\nReturn *the **maximum** number of white tiles that can be covered by the carpet*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Greedy",
            "Sorting",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** tiles = [[1,5],[10,11],[12,18],[20,25],[30,32]], carpetLen = 10",
                "Output": "** 9",
                "Explanation": "** Place the carpet starting on tile 10. \nIt covers 9 white tiles, so we return 9.\nNote that there may be other places where the carpet covers 9 white tiles.\nIt can be shown that the carpet cannot cover more than 9 white tiles."
            },
            {
                "Input": "** tiles = [[10,11],[1,1]], carpetLen = 2",
                "Output": "** 2",
                "Explanation": "** Place the carpet starting on tile 10. \nIt covers 2 white tiles, so we return 2."
            }
        ]
    },
    {
        "Title": "Substring With Largest Variance",
        "slug": "substring-with-largest-variance",
        "description": "The **variance** of a string is defined as the largest difference between the number of occurrences of **any** `2` characters present in the string. Note the two characters may or may not be the same.\n\n\nGiven a string `s` consisting of lowercase English letters only, return *the **largest variance** possible among all **substrings** of* `s`.\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"aababbb\"",
                "Output": "** 3",
                "Explanation": "**\nAll possible variances along with their respective substrings are listed below:\n- Variance 0 for substrings \"a\", \"aa\", \"ab\", \"abab\", \"aababb\", \"ba\", \"b\", \"bb\", and \"bbb\".\n- Variance 1 for substrings \"aab\", \"aba\", \"abb\", \"aabab\", \"ababb\", \"aababbb\", and \"bab\".\n- Variance 2 for substrings \"aaba\", \"ababbb\", \"abbb\", and \"babb\".\n- Variance 3 for substring \"babbb\".\nSince the largest possible variance is 3, we return it."
            },
            {
                "Input": "** s = \"abcde\"",
                "Output": "** 0",
                "Explanation": "**\nNo letter occurs more than once in s, so the variance of every substring is 0."
            }
        ]
    },
    {
        "Title": "Find Resultant Array After Removing Anagrams",
        "slug": "find-resultant-array-after-removing-anagrams",
        "description": "You are given a **0-indexed** string array `words`, where `words[i]` consists of lowercase English letters.\n\n\nIn one operation, select any index `i` such that `0 < i < words.length` and `words[i - 1]` and `words[i]` are **anagrams**, and **delete** `words[i]` from `words`. Keep performing this operation as long as you can select an index that satisfies the conditions.\n\n\nReturn `words` *after performing all operations*. It can be shown that selecting the indices for each operation in **any** arbitrary order will lead to the same result.\n\n\nAn **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase using all the original letters exactly once. For example, `\"dacb\"` is an anagram of `\"abdc\"`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** words = [\"abba\",\"baba\",\"bbaa\",\"cd\",\"cd\"]",
                "Output": "** [\"abba\",\"cd\"]",
                "Explanation": "**\nOne of the ways we can obtain the resultant array is by using the following operations:\n- Since words[2] = \"bbaa\" and words[1] = \"baba\" are anagrams, we choose index 2 and delete words[2].\n  Now words = [\"abba\",\"baba\",\"cd\",\"cd\"].\n- Since words[1] = \"baba\" and words[0] = \"abba\" are anagrams, we choose index 1 and delete words[1].\n  Now words = [\"abba\",\"cd\",\"cd\"].\n- Since words[2] = \"cd\" and words[1] = \"cd\" are anagrams, we choose index 2 and delete words[2].\n  Now words = [\"abba\",\"cd\"].\nWe can no longer perform any operations, so [\"abba\",\"cd\"] is the final answer."
            },
            {
                "Input": "** words = [\"a\",\"b\",\"c\",\"d\",\"e\"]",
                "Output": "** [\"a\",\"b\",\"c\",\"d\",\"e\"]",
                "Explanation": "**\nNo two adjacent strings in words are anagrams of each other, so no operations are performed."
            }
        ]
    },
    {
        "Title": "Maximum Consecutive Floors Without Special Floors",
        "slug": "maximum-consecutive-floors-without-special-floors",
        "description": "Alice manages a company and has rented some floors of a building as office space. Alice has decided some of these floors should be **special floors**, used for relaxation only.\n\n\nYou are given two integers `bottom` and `top`, which denote that Alice has rented all the floors from `bottom` to `top` (**inclusive**). You are also given the integer array `special`, where `special[i]` denotes a special floor that Alice has designated for relaxation.\n\n\nReturn *the **maximum** number of consecutive floors without a special floor*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** bottom = 2, top = 9, special = [4,6]",
                "Output": "** 3",
                "Explanation": "** The following are the ranges (inclusive) of consecutive floors without a special floor:\n- (2, 3) with a total amount of 2 floors.\n- (5, 5) with a total amount of 1 floor.\n- (7, 9) with a total amount of 3 floors.\nTherefore, we return the maximum number which is 3 floors."
            },
            {
                "Input": "** bottom = 6, top = 8, special = [7,6,8]",
                "Output": "** 0",
                "Explanation": "** Every floor rented is a special floor, so we return 0."
            }
        ]
    },
    {
        "Title": "Largest Combination With Bitwise AND Greater Than Zero",
        "slug": "largest-combination-with-bitwise-and-greater-than-zero",
        "description": "The **bitwise AND** of an array `nums` is the bitwise AND of all integers in `nums`.\n\n\n For example, for `nums = [1, 5, 3]`, the bitwise AND is equal to `1 & 5 & 3 = 1`.\n Also, for `nums = [7]`, the bitwise AND is `7`.\n\n\nYou are given an array of positive integers `candidates`. Evaluate the **bitwise AND** of every **combination** of numbers of `candidates`. Each number in `candidates` may only be used **once** in each combination.\n\n\nReturn *the size of the **largest** combination of* `candidates` *with a bitwise AND **greater** than* `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Bit Manipulation",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** candidates = [16,17,71,62,12,24,14]",
                "Output": "** 4",
                "Explanation": "** The combination [16,17,62,24] has a bitwise AND of 16 & 17 & 62 & 24 = 16 > 0.\nThe size of the combination is 4.\nIt can be shown that no combination with a size greater than 4 has a bitwise AND greater than 0.\nNote that more than one combination may have the largest size.\nFor example, the combination [62,12,24,14] has a bitwise AND of 62 & 12 & 24 & 14 = 8 > 0."
            },
            {
                "Input": "** candidates = [8,8]",
                "Output": "** 2",
                "Explanation": "** The largest combination [8,8] has a bitwise AND of 8 & 8 = 8 > 0.\nThe size of the combination is 2, so we return 2."
            }
        ]
    },
    {
        "Title": "Count Integers in Intervals",
        "slug": "count-integers-in-intervals",
        "description": "Given an **empty** set of intervals, implement a data structure that can:\n\n\n **Add** an interval to the set of intervals.\n **Count** the number of integers that are present in **at least one** interval.\n\n\nImplement the `CountIntervals` class:\n\n\n `CountIntervals()` Initializes the object with an empty set of intervals.\n `void add(int left, int right)` Adds the interval `[left, right]` to the set of intervals.\n `int count()` Returns the number of integers that are present in **at least one** interval.\n\n\nNote** that an interval `[left, right]` denotes all the integers `x` where `left <= x <= right`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Design",
            "Segment Tree",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "[\"CountIntervals\", \"add\", \"add\", \"count\", \"add\", \"count\"]\n[[], [2, 3], [7, 10], [], [5, 8], []]",
                "Output": "[null, null, null, 6, null, 8]",
                "Explanation": "CountIntervals countIntervals = new CountIntervals(); // initialize the object with an empty set of intervals. \ncountIntervals.add(2, 3);  // add [2, 3] to the set of intervals.\ncountIntervals.add(7, 10); // add [7, 10] to the set of intervals.\ncountIntervals.count();    // return 6\n                           // the integers 2 and 3 are present in the interval [2, 3].\n                           // the integers 7, 8, 9, and 10 are present in the interval [7, 10].\ncountIntervals.add(5, 8);  // add [5, 8] to the set of intervals.\ncountIntervals.count();    // return 8\n                           // the integers 2 and 3 are present in the interval [2, 3].\n                           // the integers 5 and 6 are present in the interval [5, 8].\n                           // the integers 7 and 8 are present in the intervals [5, 8] and [7, 10].\n                           // the integers 9 and 10 are present in the interval [7, 10]."
            }
        ]
    },
    {
        "Title": "Percentage of Letter in String",
        "slug": "percentage-of-letter-in-string",
        "description": "Given a string `s` and a character `letter`, return *the **percentage** of characters in* `s` *that equal* `letter` ***rounded down** to the nearest whole percent.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"foobar\", letter = \"o\"",
                "Output": "** 33",
                "Explanation": "**\nThe percentage of characters in s that equal the letter 'o' is 2 / 6 * 100% = 33% when rounded down, so we return 33."
            },
            {
                "Input": "** s = \"jjjj\", letter = \"k\"",
                "Output": "** 0",
                "Explanation": "**\nThe percentage of characters in s that equal the letter 'k' is 0%, so we return 0."
            }
        ]
    },
    {
        "Title": "Maximum Bags With Full Capacity of Rocks",
        "slug": "maximum-bags-with-full-capacity-of-rocks",
        "description": "You have `n` bags numbered from `0` to `n - 1`. You are given two **0-indexed** integer arrays `capacity` and `rocks`. The `ith` bag can hold a maximum of `capacity[i]` rocks and currently contains `rocks[i]` rocks. You are also given an integer `additionalRocks`, the number of additional rocks you can place in **any** of the bags.\n\n\nReturn *the **maximum** number of bags that could have full capacity after placing the additional rocks in some bags.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** capacity = [2,3,4,5], rocks = [1,2,4,4], additionalRocks = 2",
                "Output": "** 3",
                "Explanation": "**\nPlace 1 rock in bag 0 and 1 rock in bag 1.\nThe number of rocks in each bag are now [2,3,4,4].\nBags 0, 1, and 2 have full capacity.\nThere are 3 bags at full capacity, so we return 3.\nIt can be shown that it is not possible to have more than 3 bags at full capacity.\nNote that there may be other ways of placing the rocks that result in an answer of 3."
            },
            {
                "Input": "** capacity = [10,2,2], rocks = [2,2,0], additionalRocks = 100",
                "Output": "** 3",
                "Explanation": "**\nPlace 8 rocks in bag 0 and 2 rocks in bag 2.\nThe number of rocks in each bag are now [10,2,2].\nBags 0, 1, and 2 have full capacity.\nThere are 3 bags at full capacity, so we return 3.\nIt can be shown that it is not possible to have more than 3 bags at full capacity.\nNote that we did not use all of the additional rocks."
            }
        ]
    },
    {
        "Title": "Minimum Lines to Represent a Line Chart",
        "slug": "minimum-lines-to-represent-a-line-chart",
        "description": "You are given a 2D integer array `stockPrices` where `stockPrices[i] = [dayi, pricei]` indicates the price of the stock on day `dayi` is `pricei`. A **line chart** is created from the array by plotting the points on an XY plane with the X-axis representing the day and the Y-axis representing the price and connecting adjacent points. One such example is shown below:\n\n\n![](https://assets.leetcode.com/uploads/2022/03/30/1920px-pushkin_population_historysvg.png)\nReturn *the **minimum number of lines** needed to represent the line chart*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Geometry",
            "Sorting",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** stockPrices = [[1,7],[2,6],[3,5],[4,4],[5,4],[6,3],[7,2],[8,1]]",
                "Output": "** 3",
                "Explanation": "**\nThe diagram above represents the input, with the X-axis representing the day and Y-axis representing the price.\nThe following 3 lines can be drawn to represent the line chart:\n- Line 1 (in red) from (1,7) to (4,4) passing through (1,7), (2,6), (3,5), and (4,4).\n- Line 2 (in blue) from (4,4) to (5,4).\n- Line 3 (in green) from (5,4) to (8,1) passing through (5,4), (6,3), (7,2), and (8,1).\nIt can be shown that it is not possible to represent the line chart using less than 3 lines."
            },
            {
                "Input": "** stockPrices = [[3,4],[1,2],[7,8],[2,3]]",
                "Output": "** 1",
                "Explanation": "**\nAs shown in the diagram above, the line chart can be represented with a single line."
            }
        ]
    },
    {
        "Title": "Sum of Total Strength of Wizards",
        "slug": "sum-of-total-strength-of-wizards",
        "description": "As the ruler of a kingdom, you have an army of wizards at your command.\n\n\nYou are given a **0-indexed** integer array `strength`, where `strength[i]` denotes the strength of the `ith` wizard. For a **contiguous** group of wizards (i.e. the wizards' strengths form a **subarray** of `strength`), the **total strength** is defined as the **product** of the following two values:\n\n\n The strength of the **weakest** wizard in the group.\n The **total** of all the individual strengths of the wizards in the group.\n\n\nReturn *the **sum** of the total strengths of **all** contiguous groups of wizards*. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\nA **subarray** is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Stack",
            "Monotonic Stack",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** strength = [1,3,1,2]",
                "Output": "** 44",
                "Explanation": "** The following are all the contiguous groups of wizards:\n- [1] from [**1**,3,1,2] has a total strength of min([1]) * sum([1]) = 1 * 1 = 1\n- [3] from [1,**3**,1,2] has a total strength of min([3]) * sum([3]) = 3 * 3 = 9\n- [1] from [1,3,**1**,2] has a total strength of min([1]) * sum([1]) = 1 * 1 = 1\n- [2] from [1,3,1,**2**] has a total strength of min([2]) * sum([2]) = 2 * 2 = 4\n- [1,3] from [**1,3**,1,2] has a total strength of min([1,3]) * sum([1,3]) = 1 * 4 = 4\n- [3,1] from [1,**3,1**,2] has a total strength of min([3,1]) * sum([3,1]) = 1 * 4 = 4\n- [1,2] from [1,3,**1,2**] has a total strength of min([1,2]) * sum([1,2]) = 1 * 3 = 3\n- [1,3,1] from [**1,3,1**,2] has a total strength of min([1,3,1]) * sum([1,3,1]) = 1 * 5 = 5\n- [3,1,2] from [1,**3,1,2**] has a total strength of min([3,1,2]) * sum([3,1,2]) = 1 * 6 = 6\n- [1,3,1,2] from [**1,3,1,2**] has a total strength of min([1,3,1,2]) * sum([1,3,1,2]) = 1 * 7 = 7\nThe sum of all the total strengths is 1 + 9 + 1 + 4 + 4 + 4 + 3 + 5 + 6 + 7 = 44."
            },
            {
                "Input": "** strength = [5,4,6]",
                "Output": "** 213",
                "Explanation": "** The following are all the contiguous groups of wizards: \n- [5] from [**5**,4,6] has a total strength of min([5]) * sum([5]) = 5 * 5 = 25\n- [4] from [5,**4**,6] has a total strength of min([4]) * sum([4]) = 4 * 4 = 16\n- [6] from [5,4,**6**] has a total strength of min([6]) * sum([6]) = 6 * 6 = 36\n- [5,4] from [**5,4**,6] has a total strength of min([5,4]) * sum([5,4]) = 4 * 9 = 36\n- [4,6] from [5,**4,6**] has a total strength of min([4,6]) * sum([4,6]) = 4 * 10 = 40\n- [5,4,6] from [**5,4,6**] has a total strength of min([5,4,6]) * sum([5,4,6]) = 4 * 15 = 60\nThe sum of all the total strengths is 25 + 16 + 36 + 36 + 40 + 60 = 213."
            }
        ]
    },
    {
        "Title": "Check if Number Has Equal Digit Count and Digit Value",
        "slug": "check-if-number-has-equal-digit-count-and-digit-value",
        "description": "You are given a **0-indexed** string `num` of length `n` consisting of digits.\n\n\nReturn `true` *if for **every** index* `i` *in the range* `0 <= i < n`*, the digit* `i` *occurs* `num[i]` *times in* `num`*, otherwise return* `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** num = \"1210\"",
                "Output": "** true",
                "Explanation": "**\nnum[0] = '1'. The digit 0 occurs once in num.\nnum[1] = '2'. The digit 1 occurs twice in num.\nnum[2] = '1'. The digit 2 occurs once in num.\nnum[3] = '0'. The digit 3 occurs zero times in num.\nThe condition holds true for every index in \"1210\", so return true."
            },
            {
                "Input": "** num = \"030\"",
                "Output": "** false",
                "Explanation": "**\nnum[0] = '0'. The digit 0 should occur zero times, but actually occurs twice in num.\nnum[1] = '3'. The digit 1 should occur three times, but actually occurs zero times in num.\nnum[2] = '0'. The digit 2 occurs zero times in num.\nThe indices 0 and 1 both violate the condition, so return false."
            }
        ]
    },
    {
        "Title": "Sender With Largest Word Count",
        "slug": "sender-with-largest-word-count",
        "description": "You have a chat log of `n` messages. You are given two string arrays `messages` and `senders` where `messages[i]` is a **message** sent by `senders[i]`.\n\n\nA **message** is list of **words** that are separated by a single space with no leading or trailing spaces. The **word count** of a sender is the total number of **words** sent by the sender. Note that a sender may send more than one message.\n\n\nReturn *the sender with the **largest** word count*. If there is more than one sender with the largest word count, return *the one with the **lexicographically largest** name*.\n\n\nNote:\n\n\n Uppercase letters come before lowercase letters in lexicographical order.\n `\"Alice\"` and `\"alice\"` are distinct.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** messages = [\"Hello userTwooo\",\"Hi userThree\",\"Wonderful day Alice\",\"Nice day userThree\"], senders = [\"Alice\",\"userTwo\",\"userThree\",\"Alice\"]",
                "Output": "** \"Alice\"",
                "Explanation": "** Alice sends a total of 2 + 3 = 5 words.\nuserTwo sends a total of 2 words.\nuserThree sends a total of 3 words.\nSince Alice has the largest word count, we return \"Alice\"."
            },
            {
                "Input": "** messages = [\"How is leetcode for everyone\",\"Leetcode is useful for practice\"], senders = [\"Bob\",\"Charlie\"]",
                "Output": "** \"Charlie\"",
                "Explanation": "** Bob sends a total of 5 words.\nCharlie sends a total of 5 words.\nSince there is a tie for the largest word count, we return the sender with the lexicographically larger name, Charlie."
            }
        ]
    },
    {
        "Title": "Maximum Total Importance of Roads",
        "slug": "maximum-total-importance-of-roads",
        "description": "You are given an integer `n` denoting the number of cities in a country. The cities are numbered from `0` to `n - 1`.\n\n\nYou are also given a 2D integer array `roads` where `roads[i] = [ai, bi]` denotes that there exists a **bidirectional** road connecting cities `ai` and `bi`.\n\n\nYou need to assign each city with an integer value from `1` to `n`, where each value can only be used **once**. The **importance** of a road is then defined as the **sum** of the values of the two cities it connects.\n\n\nReturn *the **maximum total importance** of all roads possible after assigning the values optimally.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Greedy",
            "Graph",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** n = 5, roads = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]",
                "Output": "** 43",
                "Explanation": "** The figure above shows the country and the assigned values of [2,4,5,3,1].\n- The road (0,1) has an importance of 2 + 4 = 6.\n- The road (1,2) has an importance of 4 + 5 = 9.\n- The road (2,3) has an importance of 5 + 3 = 8.\n- The road (0,2) has an importance of 2 + 5 = 7.\n- The road (1,3) has an importance of 4 + 3 = 7.\n- The road (2,4) has an importance of 5 + 1 = 6.\nThe total importance of all roads is 6 + 9 + 8 + 7 + 7 + 6 = 43.\nIt can be shown that we cannot obtain a greater total importance than 43."
            },
            {
                "Input": "** n = 5, roads = [[0,3],[2,4],[1,3]]",
                "Output": "** 20",
                "Explanation": "** The figure above shows the country and the assigned values of [4,3,2,5,1].\n- The road (0,3) has an importance of 4 + 5 = 9.\n- The road (2,4) has an importance of 2 + 1 = 3.\n- The road (1,3) has an importance of 3 + 5 = 8.\nThe total importance of all roads is 9 + 3 + 8 = 20.\nIt can be shown that we cannot obtain a greater total importance than 20."
            }
        ]
    },
    {
        "Title": "Booking Concert Tickets in Groups",
        "slug": "booking-concert-tickets-in-groups",
        "description": "A concert hall has `n` rows numbered from `0` to `n - 1`, each with `m` seats, numbered from `0` to `m - 1`. You need to design a ticketing system that can allocate seats in the following cases:\n\n\n If a group of `k` spectators can sit **together** in a row.\n If **every** member of a group of `k` spectators can get a seat. They may or **may not** sit together.\n\n\nNote that the spectators are very picky. Hence:\n\n\n They will book seats only if each member of their group can get a seat with row number **less than or equal** to `maxRow`. `maxRow` can **vary** from group to group.\n In case there are multiple rows to choose from, the row with the **smallest** number is chosen. If there are multiple seats to choose in the same row, the seat with the **smallest** number is chosen.\n\n\nImplement the `BookMyShow` class:\n\n\n `BookMyShow(int n, int m)` Initializes the object with `n` as number of rows and `m` as number of seats per row.\n `int[] gather(int k, int maxRow)` Returns an array of length `2` denoting the row and seat number (respectively) of the **first seat** being allocated to the `k` members of the group, who must sit **together**. In other words, it returns the smallest possible `r` and `c` such that all `[c, c + k - 1]` seats are valid and empty in row `r`, and `r <= maxRow`. Returns `[]` in case it is **not possible** to allocate seats to the group.\n `boolean scatter(int k, int maxRow)` Returns `true` if all `k` members of the group can be allocated seats in rows `0` to `maxRow`, who may or **may not** sit together. If the seats can be allocated, it allocates `k` seats to the group with the **smallest** row numbers, and the smallest possible seat numbers in each row. Otherwise, returns `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Binary Search",
            "Design",
            "Binary Indexed Tree",
            "Segment Tree"
        ],
        "examples": [
            {
                "Input": "[\"BookMyShow\", \"gather\", \"gather\", \"scatter\", \"scatter\"]\n[[2, 5], [4, 0], [2, 0], [5, 1], [5, 1]]",
                "Output": "[null, [0, 0], [], true, false]",
                "Explanation": "BookMyShow bms = new BookMyShow(2, 5); // There are 2 rows with 5 seats each \nbms.gather(4, 0); // return [0, 0]\n                  // The group books seats [0, 3] of row 0. \nbms.gather(2, 0); // return []\n                  // There is only 1 seat left in row 0,\n                  // so it is not possible to book 2 consecutive seats. \nbms.scatter(5, 1); // return True\n                   // The group books seat 4 of row 0 and seats [0, 3] of row 1. \nbms.scatter(5, 1); // return False\n                   // There is only one seat left in the hall."
            }
        ]
    },
    {
        "Title": "Rearrange Characters to Make Target String",
        "slug": "rearrange-characters-to-make-target-string",
        "description": "You are given two **0-indexed** strings `s` and `target`. You can take some letters from `s` and rearrange them to form new strings.\n\n\nReturn *the **maximum** number of copies of* `target` *that can be formed by taking letters from* `s` *and rearranging them.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** s = \"ilovecodingonleetcode\", target = \"code\"",
                "Output": "** 2",
                "Explanation": "**\nFor the first copy of \"code\", take the letters at indices 4, 5, 6, and 7.\nFor the second copy of \"code\", take the letters at indices 17, 18, 19, and 20.\nThe strings that are formed are \"ecod\" and \"code\" which can both be rearranged into \"code\".\nWe can make at most two copies of \"code\", so we return 2."
            },
            {
                "Input": "** s = \"abcba\", target = \"abc\"",
                "Output": "** 1",
                "Explanation": "**\nWe can make one copy of \"abc\" by taking the letters at indices 0, 1, and 2.\nWe can make at most one copy of \"abc\", so we return 1.\nNote that while there is an extra 'a' and 'b' at indices 3 and 4, we cannot reuse the letter 'c' at index 2, so we cannot make a second copy of \"abc\"."
            },
            {
                "Input": "** s = \"abbaccaddaeea\", target = \"aaaaa\"",
                "Output": "** 1",
                "Explanation": "**\nWe can make one copy of \"aaaaa\" by taking the letters at indices 0, 3, 6, 9, and 12.\nWe can make at most one copy of \"aaaaa\", so we return 1."
            }
        ]
    },
    {
        "Title": "Apply Discount to Prices",
        "slug": "apply-discount-to-prices",
        "description": "A **sentence** is a string of single-space separated words where each word can contain digits, lowercase letters, and the dollar sign `'$'`. A word represents a **price** if it is a sequence of digits preceded by a dollar sign.\n\n\n For example, `\"$100\"`, `\"$23\"`, and `\"$6\"` represent prices while `\"100\"`, `\"$\"`, and `\"$1e5\"` do not.\n\n\nYou are given a string `sentence` representing a sentence and an integer `discount`. For each word representing a price, apply a discount of `discount%` on the price and **update** the word in the sentence. All updated prices should be represented with **exactly two** decimal places.\n\n\nReturn *a string representing the modified sentence*.\n\n\nNote that all prices will contain **at most** `10` digits.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** sentence = \"there are $1 $2 and 5$ candies in the shop\", discount = 50",
                "Output": "** \"there are $0.50 $1.00 and 5$ candies in the shop\"",
                "Explanation": "** \nThe words which represent prices are \"$1\" and \"$2\". \n- A 50% discount on \"$1\" yields \"$0.50\", so \"$1\" is replaced by \"$0.50\".\n- A 50% discount on \"$2\" yields \"$1\". Since we need to have exactly 2 decimal places after a price, we replace \"$2\" with \"$1.00\"."
            },
            {
                "Input": "** sentence = \"1 2 $3 4 $5 $6 7 8$ $9 $10$\", discount = 100",
                "Output": "** \"1 2 $0.00 4 $0.00 $0.00 7 8$ $0.00 $10$\"",
                "Explanation": "** \nApplying a 100% discount on any price will result in 0.\nThe words representing prices are \"$3\", \"$5\", \"$6\", and \"$9\".\nEach of them is replaced by \"$0.00\"."
            }
        ]
    },
    {
        "Title": "Steps to Make Array Non-decreasing",
        "slug": "steps-to-make-array-non-decreasing",
        "description": "You are given a **0-indexed** integer array `nums`. In one step, **remove** all elements `nums[i]` where `nums[i - 1] > nums[i]` for all `0 < i < nums.length`.\n\n\nReturn *the number of steps performed until* `nums` *becomes a **non-decreasing** array*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Linked List",
            "Stack",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** nums = [5,3,4,4,7,3,6,11,8,5,11]",
                "Output": "** 3",
                "Explanation": "** The following are the steps performed:\n- Step 1: [5,**3**,4,4,7,**3**,6,11,**8**,**5**,11] becomes [5,4,4,7,6,11,11]\n- Step 2: [5,**4**,4,7,**6**,11,11] becomes [5,4,7,11,11]\n- Step 3: [5,**4**,7,11,11] becomes [5,7,11,11]\n[5,7,11,11] is a non-decreasing array. Therefore, we return 3."
            },
            {
                "Input": "** nums = [4,5,7,7,13]",
                "Output": "** 0",
                "Explanation": "** nums is already a non-decreasing array. Therefore, we return 0."
            }
        ]
    },
    {
        "Title": "Minimum Obstacle Removal to Reach Corner",
        "slug": "minimum-obstacle-removal-to-reach-corner",
        "description": "You are given a **0-indexed** 2D integer array `grid` of size `m x n`. Each cell has one of two values:\n\n\n `0` represents an **empty** cell,\n `1` represents an **obstacle** that may be removed.\n\n\nYou can move up, down, left, or right from and to an empty cell.\n\n\nReturn *the **minimum** number of **obstacles** to **remove** so you can move from the upper left corner* `(0, 0)` *to the lower right corner* `(m - 1, n - 1)`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Breadth-First Search",
            "Graph",
            "Heap (Priority Queue)",
            "Matrix",
            "Shortest Path"
        ],
        "examples": [
            {
                "Input": "** grid = [[0,1,1],[1,1,0],[1,1,0]]",
                "Output": "** 2",
                "Explanation": "** We can remove the obstacles at (0, 1) and (0, 2) to create a path from (0, 0) to (2, 2).\nIt can be shown that we need to remove at least 2 obstacles, so we return 2.\nNote that there may be other ways to remove 2 obstacles to create a path."
            },
            {
                "Input": "** grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]]",
                "Output": "** 0",
                "Explanation": "** We can move from (0, 0) to (2, 4) without removing any obstacles, so we return 0."
            }
        ]
    },
    {
        "Title": "Min Max Game",
        "slug": "min-max-game",
        "description": "You are given a **0-indexed** integer array `nums` whose length is a power of `2`.\n\n\nApply the following algorithm on `nums`:\n\n\n1. Let `n` be the length of `nums`. If `n == 1`, **end** the process. Otherwise, **create** a new **0-indexed** integer array `newNums` of length `n / 2`.\n2. For every **even** index `i` where `0 <= i < n / 2`, **assign** the value of `newNums[i]` as `min(nums[2 * i], nums[2 * i + 1])`.\n3. For every **odd** index `i` where `0 <= i < n / 2`, **assign** the value of `newNums[i]` as `max(nums[2 * i], nums[2 * i + 1])`.\n4. **Replace** the array `nums` with `newNums`.\n5. **Repeat** the entire process starting from step 1.\n\n\nReturn *the last number that remains in* `nums` *after applying the algorithm.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,5,2,4,8,2,2]",
                "Output": "** 1",
                "Explanation": "** The following arrays are the results of applying the algorithm repeatedly.\nFirst: nums = [1,5,4,2]\nSecond: nums = [1,4]\nThird: nums = [1]\n1 is the last remaining number, so we return 1."
            }
        ]
    },
    {
        "Title": "Partition Array Such That Maximum Difference Is K",
        "slug": "partition-array-such-that-maximum-difference-is-k",
        "description": "You are given an integer array `nums` and an integer `k`. You may partition `nums` into one or more **subsequences** such that each element in `nums` appears in **exactly** one of the subsequences.\n\n\nReturn *the **minimum** number of subsequences needed such that the difference between the maximum and minimum values in each subsequence is **at most*** `k`*.\n\n\nA **subsequence** is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [3,6,1,2,5], k = 2",
                "Output": "** 2",
                "Explanation": "**\nWe can partition nums into the two subsequences [3,1,2] and [6,5].\nThe difference between the maximum and minimum value in the first subsequence is 3 - 1 = 2.\nThe difference between the maximum and minimum value in the second subsequence is 6 - 5 = 1.\nSince two subsequences were created, we return 2. It can be shown that 2 is the minimum number of subsequences needed."
            },
            {
                "Input": "** nums = [1,2,3], k = 1",
                "Output": "** 2",
                "Explanation": "**\nWe can partition nums into the two subsequences [1,2] and [3].\nThe difference between the maximum and minimum value in the first subsequence is 2 - 1 = 1.\nThe difference between the maximum and minimum value in the second subsequence is 3 - 3 = 0.\nSince two subsequences were created, we return 2. Note that another optimal solution is to partition nums into the two subsequences [1] and [2,3]."
            },
            {
                "Input": "** nums = [2,2,4,5], k = 0",
                "Output": "** 3",
                "Explanation": "**\nWe can partition nums into the three subsequences [2,2], [4], and [5].\nThe difference between the maximum and minimum value in the first subsequences is 2 - 2 = 0.\nThe difference between the maximum and minimum value in the second subsequences is 4 - 4 = 0.\nThe difference between the maximum and minimum value in the third subsequences is 5 - 5 = 0.\nSince three subsequences were created, we return 3. It can be shown that 3 is the minimum number of subsequences needed."
            }
        ]
    },
    {
        "Title": "Replace Elements in an Array",
        "slug": "replace-elements-in-an-array",
        "description": "You are given a **0-indexed** array `nums` that consists of `n` **distinct** positive integers. Apply `m` operations to this array, where in the `ith` operation you replace the number `operations[i][0]` with `operations[i][1]`.\n\n\nIt is guaranteed that in the `ith` operation:\n\n\n `operations[i][0]` **exists** in `nums`.\n `operations[i][1]` does **not** exist in `nums`.\n\n\nReturn *the array obtained after applying all the operations*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,4,6], operations = [[1,3],[4,7],[6,1]]",
                "Output": "** [3,2,7,1]",
                "Explanation": "** We perform the following operations on nums:\n- Replace the number 1 with 3. nums becomes [**3**,2,4,6].\n- Replace the number 4 with 7. nums becomes [3,2,**7**,6].\n- Replace the number 6 with 1. nums becomes [3,2,7,**1**].\nWe return the final array [3,2,7,1]."
            },
            {
                "Input": "** nums = [1,2], operations = [[1,3],[2,1],[3,2]]",
                "Output": "** [2,1]",
                "Explanation": "** We perform the following operations to nums:\n- Replace the number 1 with 3. nums becomes [**3**,2].\n- Replace the number 2 with 1. nums becomes [3,**1**].\n- Replace the number 3 with 2. nums becomes [**2**,1].\nWe return the array [2,1]."
            }
        ]
    },
    {
        "Title": "Design a Text Editor",
        "slug": "design-a-text-editor",
        "description": "Design a text editor with a cursor that can do the following:\n\n\n **Add** text to where the cursor is.\n **Delete** text from where the cursor is (simulating the backspace key).\n **Move** the cursor either left or right.\n\n\nWhen deleting text, only characters to the left of the cursor will be deleted. The cursor will also remain within the actual text and cannot be moved beyond it. More formally, we have that `0 <= cursor.position <= currentText.length` always holds.\n\n\nImplement the `TextEditor` class:\n\n\n `TextEditor()` Initializes the object with empty text.\n `void addText(string text)` Appends `text` to where the cursor is. The cursor ends to the right of `text`.\n `int deleteText(int k)` Deletes `k` characters to the left of the cursor. Returns the number of characters actually deleted.\n `string cursorLeft(int k)` Moves the cursor to the left `k` times. Returns the last `min(10, len)` characters to the left of the cursor, where `len` is the number of characters to the left of the cursor.\n `string cursorRight(int k)` Moves the cursor to the right `k` times. Returns the last `min(10, len)` characters to the left of the cursor, where `len` is the number of characters to the left of the cursor.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Linked List",
            "String",
            "Stack",
            "Design",
            "Simulation",
            "Doubly-Linked List"
        ],
        "examples": [
            {
                "Input": "[\"TextEditor\", \"addText\", \"deleteText\", \"addText\", \"cursorRight\", \"cursorLeft\", \"deleteText\", \"cursorLeft\", \"cursorRight\"]\n[[], [\"leetcode\"], [4], [\"practice\"], [3], [8], [10], [2], [6]]",
                "Output": "[null, null, 4, null, \"etpractice\", \"leet\", 4, \"\", \"practi\"]",
                "Explanation": "TextEditor textEditor = new TextEditor(); // The current text is \"|\". (The '|' character represents the cursor)\ntextEditor.addText(\"leetcode\"); // The current text is \"leetcode|\".\ntextEditor.deleteText(4); // return 4\n                          // The current text is \"leet|\". \n                          // 4 characters were deleted.\ntextEditor.addText(\"practice\"); // The current text is \"leetpractice|\". \ntextEditor.cursorRight(3); // return \"etpractice\"\n                           // The current text is \"leetpractice|\". \n                           // The cursor cannot be moved beyond the actual text and thus did not move.\n                           // \"etpractice\" is the last 10 characters to the left of the cursor.\ntextEditor.cursorLeft(8); // return \"leet\"\n                          // The current text is \"leet|practice\".\n                          // \"leet\" is the last min(10, 4) = 4 characters to the left of the cursor.\ntextEditor.deleteText(10); // return 4\n                           // The current text is \"|practice\".\n                           // Only 4 characters were deleted.\ntextEditor.cursorLeft(2); // return \"\"\n                          // The current text is \"|practice\".\n                          // The cursor cannot be moved beyond the actual text and thus did not move. \n                          // \"\" is the last min(10, 0) = 0 characters to the left of the cursor.\ntextEditor.cursorRight(6); // return \"practi\"\n                           // The current text is \"practi|ce\".\n                           // \"practi\" is the last min(10, 6) = 6 characters to the left of the cursor."
            }
        ]
    },
    {
        "Title": "Strong Password Checker II",
        "slug": "strong-password-checker-ii",
        "description": "A password is said to be **strong** if it satisfies all the following criteria:\n\n\n It has at least `8` characters.\n It contains at least **one lowercase** letter.\n It contains at least **one uppercase** letter.\n It contains at least **one digit**.\n It contains at least **one special character**. The special characters are the characters in the following string: `\"!@#$%^&*()-+\"`.\n It does **not** contain `2` of the same character in adjacent positions (i.e., `\"aab\"` violates this condition, but `\"aba\"` does not).\n\n\nGiven a string `password`, return `true` *if it is a **strong** password*. Otherwise, return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** password = \"IloveLe3tcode!\"",
                "Output": "** true",
                "Explanation": "** The password meets all the requirements. Therefore, we return true."
            },
            {
                "Input": "** password = \"Me+You--IsMyDream\"",
                "Output": "** false",
                "Explanation": "** The password does not contain a digit and also contains 2 of the same character in adjacent positions. Therefore, we return false."
            },
            {
                "Input": "** password = \"1aB!\"",
                "Output": "** false",
                "Explanation": "** The password does not meet the length requirement. Therefore, we return false."
            }
        ]
    },
    {
        "Title": "Successful Pairs of Spells and Potions",
        "slug": "successful-pairs-of-spells-and-potions",
        "description": "You are given two positive integer arrays `spells` and `potions`, of length `n` and `m` respectively, where `spells[i]` represents the strength of the `ith` spell and `potions[j]` represents the strength of the `jth` potion.\n\n\nYou are also given an integer `success`. A spell and potion pair is considered **successful** if the **product** of their strengths is **at least** `success`.\n\n\nReturn *an integer array* `pairs` *of length* `n` *where* `pairs[i]` *is the number of **potions** that will form a successful pair with the* `ith` *spell.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** spells = [5,1,3], potions = [1,2,3,4,5], success = 7",
                "Output": "** [4,0,3]",
                "Explanation": "**\n- 0th spell: 5 * [1,2,3,4,5] = [5,**10**,**15**,**20**,**25**]. 4 pairs are successful.\n- 1st spell: 1 * [1,2,3,4,5] = [1,2,3,4,5]. 0 pairs are successful.\n- 2nd spell: 3 * [1,2,3,4,5] = [3,6,**9**,**12**,**15**]. 3 pairs are successful.\nThus, [4,0,3] is returned."
            },
            {
                "Input": "** spells = [3,1,2], potions = [8,5,8], success = 16",
                "Output": "** [2,0,2]",
                "Explanation": "**\n- 0th spell: 3 * [8,5,8] = [**24**,15,**24**]. 2 pairs are successful.\n- 1st spell: 1 * [8,5,8] = [8,5,8]. 0 pairs are successful. \n- 2nd spell: 2 * [8,5,8] = [**16**,10,**16**]. 2 pairs are successful. \nThus, [2,0,2] is returned."
            }
        ]
    },
    {
        "Title": "Match Substring After Replacement",
        "slug": "match-substring-after-replacement",
        "description": "You are given two strings `s` and `sub`. You are also given a 2D character array `mappings` where `mappings[i] = [oldi, newi]` indicates that you may perform the following operation **any** number of times:\n\n\n **Replace** a character `oldi` of `sub` with `newi`.\n\n\nEach character in `sub` **cannot** be replaced more than once.\n\n\nReturn `true` *if it is possible to make* `sub` *a substring of* `s` *by replacing zero or more characters according to* `mappings`. Otherwise, return `false`.\n\n\nA **substring** is a contiguous non-empty sequence of characters within a string.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "String Matching"
        ],
        "examples": [
            {
                "Input": "** s = \"fool3e7bar\", sub = \"leet\", mappings = [[\"e\",\"3\"],[\"t\",\"7\"],[\"t\",\"8\"]]",
                "Output": "** true",
                "Explanation": "** Replace the first 'e' in sub with '3' and 't' in sub with '7'.\nNow sub = \"l3e7\" is a substring of s, so we return true."
            },
            {
                "Input": "** s = \"fooleetbar\", sub = \"f00l\", mappings = [[\"o\",\"0\"]]",
                "Output": "** false",
                "Explanation": "** The string \"f00l\" is not a substring of s and no replacements can be made.\nNote that we cannot replace '0' with 'o'."
            },
            {
                "Input": "** s = \"Fool33tbaR\", sub = \"leetd\", mappings = [[\"e\",\"3\"],[\"t\",\"7\"],[\"t\",\"8\"],[\"d\",\"b\"],[\"p\",\"b\"]]",
                "Output": "** true",
                "Explanation": "** Replace the first and second 'e' in sub with '3' and 'd' in sub with 'b'.\nNow sub = \"l33tb\" is a substring of s, so we return true."
            }
        ]
    },
    {
        "Title": "Count Subarrays With Score Less Than K",
        "slug": "count-subarrays-with-score-less-than-k",
        "description": "The **score** of an array is defined as the **product** of its sum and its length.\n\n\n For example, the score of `[1, 2, 3, 4, 5]` is `(1 + 2 + 3 + 4 + 5) * 5 = 75`.\n\n\nGiven a positive integer array `nums` and an integer `k`, return *the **number of non-empty subarrays** of* `nums` *whose score is **strictly less** than* `k`.\n\n\nA **subarray** is a contiguous sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Sliding Window",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [2,1,4,3,5], k = 10",
                "Output": "** 6",
                "Explanation": "**\nThe 6 subarrays having scores less than 10 are:\n- [2] with score 2 * 1 = 2.\n- [1] with score 1 * 1 = 1.\n- [4] with score 4 * 1 = 4.\n- [3] with score 3 * 1 = 3. \n- [5] with score 5 * 1 = 5.\n- [2,1] with score (2 + 1) * 2 = 6.\nNote that subarrays such as [1,4] and [4,3,5] are not considered because their scores are 10 and 36 respectively, while we need scores strictly less than 10."
            },
            {
                "Input": "** nums = [1,1,1], k = 5",
                "Output": "** 5",
                "Explanation": "**\nEvery subarray except [1,1,1] has a score less than 5.\n[1,1,1] has a score (1 + 1 + 1) * 3 = 9, which is greater than 5.\nThus, there are 5 subarrays having scores less than 5."
            }
        ]
    },
    {
        "Title": "Calculate Amount Paid in Taxes",
        "slug": "calculate-amount-paid-in-taxes",
        "description": "You are given a **0-indexed** 2D integer array `brackets` where `brackets[i] = [upperi, percenti]` means that the `ith` tax bracket has an upper bound of `upperi` and is taxed at a rate of `percenti`. The brackets are **sorted** by upper bound (i.e. `upperi-1 < upperi` for `0 < i < brackets.length`).\n\n\nTax is calculated as follows:\n\n\n The first `upper0` dollars earned are taxed at a rate of `percent0`.\n The next `upper1 - upper0` dollars earned are taxed at a rate of `percent1`.\n The next `upper2 - upper1` dollars earned are taxed at a rate of `percent2`.\n And so on.\n\n\nYou are given an integer `income` representing the amount of money you earned. Return *the amount of money that you have to pay in taxes.* Answers within `10-5` of the actual answer will be accepted.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** brackets = [[3,50],[7,10],[12,25]], income = 10",
                "Output": "** 2.65000",
                "Explanation": "**\nBased on your income, you have 3 dollars in the 1st tax bracket, 4 dollars in the 2nd tax bracket, and 3 dollars in the 3rd tax bracket.\nThe tax rate for the three tax brackets is 50%, 10%, and 25%, respectively.\nIn total, you pay $3 * 50% + $4 * 10% + $3 * 25% = $2.65 in taxes."
            },
            {
                "Input": "** brackets = [[1,0],[4,25],[5,50]], income = 2",
                "Output": "** 0.25000",
                "Explanation": "**\nBased on your income, you have 1 dollar in the 1st tax bracket and 1 dollar in the 2nd tax bracket.\nThe tax rate for the two tax brackets is 0% and 25%, respectively.\nIn total, you pay $1 * 0% + $1 * 25% = $0.25 in taxes."
            },
            {
                "Input": "** brackets = [[2,50]], income = 0",
                "Output": "** 0.00000",
                "Explanation": "**\nYou have no income to tax, so you have to pay a total of $0 in taxes."
            }
        ]
    },
    {
        "Title": "Minimum Path Cost in a Grid",
        "slug": "minimum-path-cost-in-a-grid",
        "description": "You are given a **0-indexed** `m x n` integer matrix `grid` consisting of **distinct** integers from `0` to `m * n - 1`. You can move in this matrix from a cell to any other cell in the **next** row. That is, if you are in cell `(x, y)` such that `x < m - 1`, you can move to any of the cells `(x + 1, 0)`, `(x + 1, 1)`, ..., `(x + 1, n - 1)`. **Note** that it is not possible to move from cells in the last row.\n\n\nEach possible move has a cost given by a **0-indexed** 2D array `moveCost` of size `(m * n) x n`, where `moveCost[i][j]` is the cost of moving from a cell with value `i` to a cell in column `j` of the next row. The cost of moving from cells in the last row of `grid` can be ignored.\n\n\nThe cost of a path in `grid` is the **sum** of all values of cells visited plus the **sum** of costs of all the moves made. Return *the **minimum** cost of a path that starts from any cell in the **first** row and ends at any cell in the **last** row.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[5,3],[4,0],[2,1]], moveCost = [[9,8],[1,5],[10,12],[18,6],[2,4],[14,3]]",
                "Output": "** 17",
                "Explanation": "** The path with the minimum possible cost is the path 5 -> 0 -> 1.\n- The sum of the values of cells visited is 5 + 0 + 1 = 6.\n- The cost of moving from 5 to 0 is 3.\n- The cost of moving from 0 to 1 is 8.\nSo the total cost of the path is 6 + 3 + 8 = 17."
            }
        ]
    },
    {
        "Title": "Fair Distribution of Cookies",
        "slug": "fair-distribution-of-cookies",
        "description": "You are given an integer array `cookies`, where `cookies[i]` denotes the number of cookies in the `ith` bag. You are also given an integer `k` that denotes the number of children to distribute **all** the bags of cookies to. All the cookies in the same bag must go to the same child and cannot be split up.\n\n\nThe **unfairness** of a distribution is defined as the **maximum** **total** cookies obtained by a single child in the distribution.\n\n\nReturn *the **minimum** unfairness of all distributions*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Backtracking",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** cookies = [8,15,10,20,8], k = 2",
                "Output": "** 31",
                "Explanation": "** One optimal distribution is [8,15,8] and [10,20]\n- The 1st child receives [8,15,8] which has a total of 8 + 15 + 8 = 31 cookies.\n- The 2nd child receives [10,20] which has a total of 10 + 20 = 30 cookies.\nThe unfairness of the distribution is max(31,30) = 31.\nIt can be shown that there is no distribution with an unfairness less than 31."
            },
            {
                "Input": "** cookies = [6,1,3,2,2,4,1,2], k = 3",
                "Output": "** 7",
                "Explanation": "** One optimal distribution is [6,1], [3,2,2], and [4,1,2]\n- The 1st child receives [6,1] which has a total of 6 + 1 = 7 cookies.\n- The 2nd child receives [3,2,2] which has a total of 3 + 2 + 2 = 7 cookies.\n- The 3rd child receives [4,1,2] which has a total of 4 + 1 + 2 = 7 cookies.\nThe unfairness of the distribution is max(7,7,7) = 7.\nIt can be shown that there is no distribution with an unfairness less than 7."
            }
        ]
    },
    {
        "Title": "Naming a Company",
        "slug": "naming-a-company",
        "description": "You are given an array of strings `ideas` that represents a list of names to be used in the process of naming a company. The process of naming a company is as follows:\n\n\n1. Choose 2 **distinct** names from `ideas`, call them `ideaA` and `ideaB`.\n2. Swap the first letters of `ideaA` and `ideaB` with each other.\n3. If **both** of the new names are not found in the original `ideas`, then the name `ideaA ideaB` (the **concatenation** of `ideaA` and `ideaB`, separated by a space) is a valid company name.\n4. Otherwise, it is not a valid name.\n\n\nReturn *the number of **distinct** valid names for the company*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Bit Manipulation",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** ideas = [\"coffee\",\"donuts\",\"time\",\"toffee\"]",
                "Output": "** 6",
                "Explanation": "** The following selections are valid:\n- (\"coffee\", \"donuts\"): The company name created is \"doffee conuts\".\n- (\"donuts\", \"coffee\"): The company name created is \"conuts doffee\".\n- (\"donuts\", \"time\"): The company name created is \"tonuts dime\".\n- (\"donuts\", \"toffee\"): The company name created is \"tonuts doffee\".\n- (\"time\", \"donuts\"): The company name created is \"dime tonuts\".\n- (\"toffee\", \"donuts\"): The company name created is \"doffee tonuts\".\nTherefore, there are a total of 6 distinct company names.\n\nThe following are some examples of invalid selections:\n- (\"coffee\", \"time\"): The name \"toffee\" formed after swapping already exists in the original array.\n- (\"time\", \"toffee\"): Both names are still the same after swapping and exist in the original array.\n- (\"coffee\", \"toffee\"): Both names formed after swapping already exist in the original array."
            },
            {
                "Input": "** ideas = [\"lack\",\"back\"]",
                "Output": "** 0",
                "Explanation": "** There are no valid selections. Therefore, 0 is returned."
            }
        ]
    },
    {
        "Title": "Greatest English Letter in Upper and Lower Case",
        "slug": "greatest-english-letter-in-upper-and-lower-case",
        "description": "Given a string of English letters `s`, return *the **greatest** English letter which occurs as **both** a lowercase and uppercase letter in* `s`. The returned letter should be in **uppercase**. If no such letter exists, return *an empty string*.\n\n\nAn English letter `b` is **greater** than another letter `a` if `b` appears **after** `a` in the English alphabet.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** s = \"l**Ee**TcOd**E**\"",
                "Output": "** \"E\"",
                "Explanation": "**\nThe letter 'E' is the only letter to appear in both lower and upper case."
            },
            {
                "Input": "** s = \"a**rR**AzFif\"",
                "Output": "** \"R\"",
                "Explanation": "**\nThe letter 'R' is the greatest letter to appear in both lower and upper case.\nNote that 'A' and 'F' also appear in both lower and upper case, but 'R' is greater than 'F' or 'A'."
            },
            {
                "Input": "** s = \"AbCdEfGhIjK\"",
                "Output": "** \"\"",
                "Explanation": "**\nThere is no letter that appears in both lower and upper case."
            }
        ]
    },
    {
        "Title": "Sum of Numbers With Units Digit K",
        "slug": "sum-of-numbers-with-units-digit-k",
        "description": "Given two integers `num` and `k`, consider a set of positive integers with the following properties:\n\n\n The units digit of each integer is `k`.\n The sum of the integers is `num`.\n\n\nReturn *the **minimum** possible size of such a set, or* `-1` *if no such set exists.\n\n\nNote:\n\n\n The set can contain multiple instances of the same integer, and the sum of an empty set is considered `0`.\n The **units digit** of a number is the rightmost digit of the number.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Greedy",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** num = 58, k = 9",
                "Output": "** 2",
                "Explanation": "**\nOne valid set is [9,49], as the sum is 58 and each integer has a units digit of 9.\nAnother valid set is [19,39].\nIt can be shown that 2 is the minimum possible size of a valid set."
            },
            {
                "Input": "** num = 37, k = 2",
                "Output": "** -1",
                "Explanation": "** It is not possible to obtain a sum of 37 using only integers that have a units digit of 2."
            },
            {
                "Input": "** num = 0, k = 7",
                "Output": "** 0",
                "Explanation": "** The sum of an empty set is considered 0."
            }
        ]
    },
    {
        "Title": "Longest Binary Subsequence Less Than or Equal to K",
        "slug": "longest-binary-subsequence-less-than-or-equal-to-k",
        "description": "You are given a binary string `s` and a positive integer `k`.\n\n\nReturn *the length of the **longest** subsequence of* `s` *that makes up a **binary** number less than or equal to* `k`.\n\n\nNote:\n\n\n The subsequence can contain **leading zeroes**.\n The empty string is considered to be equal to `0`.\n A **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Greedy",
            "Memoization"
        ],
        "examples": [
            {
                "Input": "** s = \"1001010\", k = 5",
                "Output": "** 5",
                "Explanation": "** The longest subsequence of s that makes up a binary number less than or equal to 5 is \"00010\", as this number is equal to 2 in decimal.\nNote that \"00100\" and \"00101\" are also possible, which are equal to 4 and 5 in decimal, respectively.\nThe length of this subsequence is 5, so 5 is returned."
            },
            {
                "Input": "** s = \"00101001\", k = 1",
                "Output": "** 6",
                "Explanation": "** \"000001\" is the longest subsequence of s that makes up a binary number less than or equal to 1, as this number is equal to 1 in decimal.\nThe length of this subsequence is 6, so 6 is returned."
            }
        ]
    },
    {
        "Title": "Selling Pieces of Wood",
        "slug": "selling-pieces-of-wood",
        "description": "You are given two integers `m` and `n` that represent the height and width of a rectangular piece of wood. You are also given a 2D integer array `prices`, where `prices[i] = [hi, wi, pricei]` indicates you can sell a rectangular piece of wood of height `hi` and width `wi` for `pricei` dollars.\n\n\nTo cut a piece of wood, you must make a vertical or horizontal cut across the **entire** height or width of the piece to split it into two smaller pieces. After cutting a piece of wood into some number of smaller pieces, you can sell pieces according to `prices`. You may sell multiple pieces of the same shape, and you do not have to sell all the shapes. The grain of the wood makes a difference, so you **cannot** rotate a piece to swap its height and width.\n\n\nReturn *the **maximum** money you can earn after cutting an* `m x n` *piece of wood*.\n\n\nNote that you can cut the piece of wood as many times as you want.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Memoization"
        ],
        "examples": [
            {
                "Input": "** m = 3, n = 5, prices = [[1,4,2],[2,2,7],[2,1,3]]",
                "Output": "** 19",
                "Explanation": "** The diagram above shows a possible scenario. It consists of:\n- 2 pieces of wood shaped 2 x 2, selling for a price of 2 * 7 = 14.\n- 1 piece of wood shaped 2 x 1, selling for a price of 1 * 3 = 3.\n- 1 piece of wood shaped 1 x 4, selling for a price of 1 * 2 = 2.\nThis obtains a total of 14 + 3 + 2 = 19 money earned.\nIt can be shown that 19 is the maximum amount of money that can be earned."
            },
            {
                "Input": "** m = 4, n = 6, prices = [[3,2,10],[1,4,2],[4,1,3]]",
                "Output": "** 32",
                "Explanation": "** The diagram above shows a possible scenario. It consists of:\n- 3 pieces of wood shaped 3 x 2, selling for a price of 3 * 10 = 30.\n- 1 piece of wood shaped 1 x 4, selling for a price of 1 * 2 = 2.\nThis obtains a total of 30 + 2 = 32 money earned.\nIt can be shown that 32 is the maximum amount of money that can be earned.\nNotice that we cannot rotate the 1 x 4 piece of wood to obtain a 4 x 1 piece of wood."
            }
        ]
    },
    {
        "Title": "Count Asterisks",
        "slug": "count-asterisks",
        "description": "You are given a string `s`, where every **two** consecutive vertical bars `'|'` are grouped into a **pair**. In other words, the 1st and 2nd `'|'` make a pair, the 3rd and 4th `'|'` make a pair, and so forth.\n\n\nReturn *the number of* `'*'` *in* `s`*, **excluding** the* `'*'` *between each pair of* `'|'`.\n\n\nNote** that each `'|'` will belong to **exactly** one pair.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"l|*e*et|c**o|*de|\"",
                "Output": "** 2",
                "Explanation": "** The considered characters are underlined: \"l|*e*et|c\\*\\*o|*de|\".\nThe characters between the first and second '|' are excluded from the answer.\nAlso, the characters between the third and fourth '|' are excluded from the answer.\nThere are 2 asterisks considered. Therefore, we return 2."
            },
            {
                "Input": "** s = \"iamprogrammer\"",
                "Output": "** 0",
                "Explanation": "** In this example, there are no asterisks in s. Therefore, we return 0."
            },
            {
                "Input": "** s = \"yo|uar|e**|b|e***au|tifu|l\"",
                "Output": "** 5",
                "Explanation": "** The considered characters are underlined: \"yo|uar|e\\*\\*|b|e\\*\\*\\*au|tifu|l\". There are 5 asterisks considered. Therefore, we return 5."
            }
        ]
    },
    {
        "Title": "Count Unreachable Pairs of Nodes in an Undirected Graph",
        "slug": "count-unreachable-pairs-of-nodes-in-an-undirected-graph",
        "description": "You are given an integer `n`. There is an **undirected** graph with `n` nodes, numbered from `0` to `n - 1`. You are given a 2D integer array `edges` where `edges[i] = [ai, bi]` denotes that there exists an **undirected** edge connecting nodes `ai` and `bi`.\n\n\nReturn *the **number of pairs** of different nodes that are **unreachable** from each other*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** n = 3, edges = [[0,1],[0,2],[1,2]]",
                "Output": "** 0",
                "Explanation": "** There are no pairs of nodes that are unreachable from each other. Therefore, we return 0."
            },
            {
                "Input": "** n = 7, edges = [[0,2],[0,5],[2,4],[1,6],[5,4]]",
                "Output": "** 14",
                "Explanation": "** There are 14 pairs of nodes that are unreachable from each other:\n[[0,1],[0,3],[0,6],[1,2],[1,3],[1,4],[1,5],[2,3],[2,6],[3,4],[3,5],[3,6],[4,6],[5,6]].\nTherefore, we return 14."
            }
        ]
    },
    {
        "Title": "Maximum XOR After Operations ",
        "slug": "maximum-xor-after-operations",
        "description": "You are given a **0-indexed** integer array `nums`. In one operation, select **any** non-negative integer `x` and an index `i`, then **update** `nums[i]` to be equal to `nums[i] AND (nums[i] XOR x)`.\n\n\nNote that `AND` is the bitwise AND operation and `XOR` is the bitwise XOR operation.\n\n\nReturn *the **maximum** possible bitwise XOR of all elements of* `nums` *after applying the operation **any number** of times*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [3,2,4,6]",
                "Output": "** 7",
                "Explanation": "** Apply the operation with x = 4 and i = 3, num[3] = 6 AND (6 XOR 4) = 6 AND 2 = 2.\nNow, nums = [3, 2, 4, 2] and the bitwise XOR of all the elements = 3 XOR 2 XOR 4 XOR 2 = 7.\nIt can be shown that 7 is the maximum possible bitwise XOR.\nNote that other operations may be used to achieve a bitwise XOR of 7."
            },
            {
                "Input": "** nums = [1,2,3,9,2]",
                "Output": "** 11",
                "Explanation": "** Apply the operation zero times.\nThe bitwise XOR of all the elements = 1 XOR 2 XOR 3 XOR 9 XOR 2 = 11.\nIt can be shown that 11 is the maximum possible bitwise XOR."
            }
        ]
    },
    {
        "Title": "Number of Distinct Roll Sequences",
        "slug": "number-of-distinct-roll-sequences",
        "description": "You are given an integer `n`. You roll a fair 6-sided dice `n` times. Determine the total number of **distinct** sequences of rolls possible such that the following conditions are satisfied:\n\n\n1. The **greatest common divisor** of any **adjacent** values in the sequence is equal to `1`.\n2. There is **at least** a gap of `2` rolls between **equal** valued rolls. More formally, if the value of the `ith` roll is **equal** to the value of the `jth` roll, then `abs(i - j) > 2`.\n\n\nReturn *the **total number** of distinct sequences possible*. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\nTwo sequences are considered distinct if at least one element is different.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Memoization"
        ],
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** 184",
                "Explanation": "** Some of the possible sequences are (1, 2, 3, 4), (6, 1, 2, 3), (1, 2, 3, 1), etc.\nSome invalid sequences are (1, 2, 1, 3), (1, 2, 3, 6).\n(1, 2, 1, 3) is invalid since the first and third roll have an equal value and abs(1 - 3) = 2 (i and j are 1-indexed).\n(1, 2, 3, 6) is invalid since the greatest common divisor of 3 and 6 = 3.\nThere are a total of 184 distinct sequences possible, so we return 184."
            },
            {
                "Input": "** n = 2",
                "Output": "** 22",
                "Explanation": "** Some of the possible sequences are (1, 2), (2, 1), (3, 2).\nSome invalid sequences are (3, 6), (2, 4) since the greatest common divisor is not equal to 1.\nThere are a total of 22 distinct sequences possible, so we return 22."
            }
        ]
    },
    {
        "Title": "Check if Matrix Is X-Matrix",
        "slug": "check-if-matrix-is-x-matrix",
        "description": "A square matrix is said to be an **X-Matrix** if **both** of the following conditions hold:\n\n\n1. All the elements in the diagonals of the matrix are **non-zero**.\n2. All other elements are 0.\n\n\nGiven a 2D integer array `grid` of size `n x n` representing a square matrix, return `true` *if* `grid` *is an X-Matrix*. Otherwise, return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[2,0,0,1],[0,3,1,0],[0,5,2,0],[4,0,0,2]]",
                "Output": "** true",
                "Explanation": "** Refer to the diagram above. \nAn X-Matrix should have the green elements (diagonals) be non-zero and the red elements be 0.\nThus, grid is an X-Matrix."
            },
            {
                "Input": "** grid = [[5,7,0],[0,3,1],[0,5,0]]",
                "Output": "** false",
                "Explanation": "** Refer to the diagram above.\nAn X-Matrix should have the green elements (diagonals) be non-zero and the red elements be 0.\nThus, grid is not an X-Matrix."
            }
        ]
    },
    {
        "Title": "Count Number of Ways to Place Houses",
        "slug": "count-number-of-ways-to-place-houses",
        "description": "There is a street with `n * 2` **plots**, where there are `n` plots on each side of the street. The plots on each side are numbered from `1` to `n`. On each plot, a house can be placed.\n\n\nReturn *the number of ways houses can be placed such that no two houses are adjacent to each other on the same side of the street*. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\nNote that if a house is placed on the `ith` plot on one side of the street, a house can also be placed on the `ith` plot on the other side of the street.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** 9",
                "Explanation": "** The 9 possible arrangements are shown in the diagram above."
            }
        ]
    },
    {
        "Title": "Maximum Score Of Spliced Array",
        "slug": "maximum-score-of-spliced-array",
        "description": "You are given two **0-indexed** integer arrays `nums1` and `nums2`, both of length `n`.\n\n\nYou can choose two integers `left` and `right` where `0 <= left <= right < n` and **swap** the subarray `nums1[left...right]` with the subarray `nums2[left...right]`.\n\n\n For example, if `nums1 = [1,2,3,4,5]` and `nums2 = [11,12,13,14,15]` and you choose `left = 1` and `right = 2`, `nums1` becomes `[1,**12,13**,4,5]` and `nums2` becomes `[11,**2,3**,14,15]`.\n\n\nYou may choose to apply the mentioned operation **once** or not do anything.\n\n\nThe **score** of the arrays is the **maximum** of `sum(nums1)` and `sum(nums2)`, where `sum(arr)` is the sum of all the elements in the array `arr`.\n\n\nReturn *the **maximum possible score***.\n\n\nA **subarray** is a contiguous sequence of elements within an array. `arr[left...right]` denotes the subarray that contains the elements of `nums` between indices `left` and `right` (**inclusive**).\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums1 = [60,60,60], nums2 = [10,90,10]",
                "Output": "** 210",
                "Explanation": "** Choosing left = 1 and right = 1, we have nums1 = [60,**90**,60] and nums2 = [10,**60**,10].\nThe score is max(sum(nums1), sum(nums2)) = max(210, 80) = 210."
            },
            {
                "Input": "** nums1 = [20,40,20,70,30], nums2 = [50,20,50,40,20]",
                "Output": "** 220",
                "Explanation": "** Choosing left = 3, right = 4, we have nums1 = [20,40,20,**40,20**] and nums2 = [50,20,50,**70,30**].\nThe score is max(sum(nums1), sum(nums2)) = max(140, 220) = 220."
            },
            {
                "Input": "** nums1 = [7,11,13], nums2 = [1,1,1]",
                "Output": "** 31",
                "Explanation": "** We choose not to swap any subarray.\nThe score is max(sum(nums1), sum(nums2)) = max(31, 3) = 31."
            }
        ]
    },
    {
        "Title": "Minimum Score After Removals on a Tree",
        "slug": "minimum-score-after-removals-on-a-tree",
        "description": "There is an undirected connected tree with `n` nodes labeled from `0` to `n - 1` and `n - 1` edges.\n\n\nYou are given a **0-indexed** integer array `nums` of length `n` where `nums[i]` represents the value of the `ith` node. You are also given a 2D integer array `edges` of length `n - 1` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree.\n\n\nRemove two **distinct** edges of the tree to form three connected components. For a pair of removed edges, the following steps are defined:\n\n\n1. Get the XOR of all the values of the nodes for **each** of the three components respectively.\n2. The **difference** between the **largest** XOR value and the **smallest** XOR value is the **score** of the pair.\n\n\n For example, say the three components have the node values: `[4,5,7]`, `[1,9]`, and `[3,3,3]`. The three XOR values are `4 ^ 5 ^ 7 = **6**`, `1 ^ 9 = **8**`, and `3 ^ 3 ^ 3 = **3**`. The largest XOR value is `8` and the smallest XOR value is `3`. The score is then `8 - 3 = 5`.\n\n\nReturn *the **minimum** score of any possible pair of edge removals on the given tree*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Bit Manipulation",
            "Tree",
            "Depth-First Search"
        ],
        "examples": [
            {
                "Input": "** nums = [1,5,5,4,11], edges = [[0,1],[1,2],[1,3],[3,4]]",
                "Output": "** 9",
                "Explanation": "** The diagram above shows a way to make a pair of removals.\n- The 1st component has nodes [1,3,4] with values [5,4,11]. Its XOR value is 5 ^ 4 ^ 11 = 10.\n- The 2nd component has node [0] with value [1]. Its XOR value is 1 = 1.\n- The 3rd component has node [2] with value [5]. Its XOR value is 5 = 5.\nThe score is the difference between the largest and smallest XOR value which is 10 - 1 = 9.\nIt can be shown that no other pair of removals will obtain a smaller score than 9."
            },
            {
                "Input": "** nums = [5,5,2,4,4,2], edges = [[0,1],[1,2],[5,2],[4,3],[1,3]]",
                "Output": "** 0",
                "Explanation": "** The diagram above shows a way to make a pair of removals.\n- The 1st component has nodes [3,4] with values [4,4]. Its XOR value is 4 ^ 4 = 0.\n- The 2nd component has nodes [1,0] with values [5,5]. Its XOR value is 5 ^ 5 = 0.\n- The 3rd component has nodes [2,5] with values [2,2]. Its XOR value is 2 ^ 2 = 0.\nThe score is the difference between the largest and smallest XOR value which is 0 - 0 = 0.\nWe cannot obtain a smaller score than 0."
            }
        ]
    },
    {
        "Title": "Decode the Message",
        "slug": "decode-the-message",
        "description": "You are given the strings `key` and `message`, which represent a cipher key and a secret message, respectively. The steps to decode `message` are as follows:\n\n\n1. Use the **first** appearance of all 26 lowercase English letters in `key` as the **order** of the substitution table.\n2. Align the substitution table with the regular English alphabet.\n3. Each letter in `message` is then **substituted** using the table.\n4. Spaces `' '` are transformed to themselves.\n\n\n For example, given `key = \"**hap**p**y** **bo**y\"` (actual key would have **at least one** instance of each letter in the alphabet), we have the partial substitution table of (`'h' -> 'a'`, `'a' -> 'b'`, `'p' -> 'c'`, `'y' -> 'd'`, `'b' -> 'e'`, `'o' -> 'f'`).\n\n\nReturn *the decoded message*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** key = \"the quick brown fox jumps over the lazy dog\", message = \"vkbs bs t suepuv\"",
                "Output": "** \"this is a secret\"",
                "Explanation": "** The diagram above shows the substitution table.\nIt is obtained by taking the first appearance of each letter in \"**the** **quick** **brown** **f**o**x** **j**u**mps** o**v**er the **lazy** **d**o**g**\"."
            },
            {
                "Input": "** key = \"eljuxhpwnyrdgtqkviszcfmabo\", message = \"zwx hnfx lqantp mnoeius ycgk vcnjrdb\"",
                "Output": "** \"the five boxing wizards jump quickly\"",
                "Explanation": "** The diagram above shows the substitution table.\nIt is obtained by taking the first appearance of each letter in \"**eljuxhpwnyrdgtqkviszcfmabo**\"."
            }
        ]
    },
    {
        "Title": "Spiral Matrix IV",
        "slug": "spiral-matrix-iv",
        "description": "You are given two integers `m` and `n`, which represent the dimensions of a matrix.\n\n\nYou are also given the `head` of a linked list of integers.\n\n\nGenerate an `m x n` matrix that contains the integers in the linked list presented in **spiral** order **(clockwise)**, starting from the **top-left** of the matrix. If there are remaining empty spaces, fill them with `-1`.\n\n\nReturn *the generated matrix*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Linked List",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** m = 3, n = 5, head = [3,0,2,6,8,1,7,9,4,2,5,5,0]",
                "Output": "** [[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]]",
                "Explanation": "** The diagram above shows how the values are printed in the matrix.\nNote that the remaining spaces in the matrix are filled with -1."
            },
            {
                "Input": "** m = 1, n = 4, head = [0,1,2]",
                "Output": "** [[0,1,2,-1]]",
                "Explanation": "** The diagram above shows how the values are printed from left to right in the matrix.\nThe last space in the matrix is set to -1."
            }
        ]
    },
    {
        "Title": "Number of People Aware of a Secret",
        "slug": "number-of-people-aware-of-a-secret",
        "description": "On day `1`, one person discovers a secret.\n\n\nYou are given an integer `delay`, which means that each person will **share** the secret with a new person **every day**, starting from `delay` days after discovering the secret. You are also given an integer `forget`, which means that each person will **forget** the secret `forget` days after discovering it. A person **cannot** share the secret on the same day they forgot it, or on any day afterwards.\n\n\nGiven an integer `n`, return *the number of people who know the secret at the end of day* `n`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming",
            "Queue",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** n = 6, delay = 2, forget = 4",
                "Output": "** 5",
                "Explanation": "**\nDay 1: Suppose the first person is named A. (1 person)\nDay 2: A is the only person who knows the secret. (1 person)\nDay 3: A shares the secret with a new person, B. (2 people)\nDay 4: A shares the secret with a new person, C. (3 people)\nDay 5: A forgets the secret, and B shares the secret with a new person, D. (3 people)\nDay 6: B shares the secret with E, and C shares the secret with F. (5 people)"
            },
            {
                "Input": "** n = 4, delay = 1, forget = 3",
                "Output": "** 6",
                "Explanation": "**\nDay 1: The first person is named A. (1 person)\nDay 2: A shares the secret with B. (2 people)\nDay 3: A and B share the secret with 2 new people, C and D. (4 people)\nDay 4: A forgets the secret. B, C, and D share the secret with 3 new people. (6 people)"
            }
        ]
    },
    {
        "Title": "Number of Increasing Paths in a Grid",
        "slug": "number-of-increasing-paths-in-a-grid",
        "description": "You are given an `m x n` integer matrix `grid`, where you can move from a cell to any adjacent cell in all `4` directions.\n\n\nReturn *the number of **strictly** **increasing** paths in the grid such that you can start from **any** cell and end at **any** cell.* Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\nTwo paths are considered different if they do not have exactly the same sequence of visited cells.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Depth-First Search",
            "Breadth-First Search",
            "Graph",
            "Topological Sort",
            "Memoization",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,1],[3,4]]",
                "Output": "** 8",
                "Explanation": "** The strictly increasing paths are:\n- Paths with length 1: [1], [1], [3], [4].\n- Paths with length 2: [1 -> 3], [1 -> 4], [3 -> 4].\n- Paths with length 3: [1 -> 3 -> 4].\nThe total number of paths is 4 + 3 + 1 = 8."
            }
        ]
    },
    {
        "Title": "Evaluate Boolean Binary Tree",
        "slug": "evaluate-boolean-binary-tree",
        "description": "You are given the `root` of a **full binary tree** with the following properties:\n\n\n **Leaf nodes** have either the value `0` or `1`, where `0` represents `False` and `1` represents `True`.\n **Non-leaf nodes** have either the value `2` or `3`, where `2` represents the boolean `OR` and `3` represents the boolean `AND`.\n\n\nThe **evaluation** of a node is as follows:\n\n\n If the node is a leaf node, the evaluation is the **value** of the node, i.e. `True` or `False`.\n Otherwise, **evaluate** the node's two children and **apply** the boolean operation of its value with the children's evaluations.\n\n\nReturn *the boolean result of **evaluating** the* `root` *node.\n\n\nA **full binary tree** is a binary tree where each node has either `0` or `2` children.\n\n\nA **leaf node** is a node that has zero children.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [2,1,3,null,null,0,1]",
                "Output": "** true",
                "Explanation": "** The above diagram illustrates the evaluation process.\nThe AND node evaluates to False AND True = False.\nThe OR node evaluates to True OR False = True.\nThe root node evaluates to True, so we return true."
            }
        ]
    },
    {
        "Title": "The Latest Time to Catch a Bus",
        "slug": "the-latest-time-to-catch-a-bus",
        "description": "You are given a **0-indexed** integer array `buses` of length `n`, where `buses[i]` represents the departure time of the `ith` bus. You are also given a **0-indexed** integer array `passengers` of length `m`, where `passengers[j]` represents the arrival time of the `jth` passenger. All bus departure times are unique. All passenger arrival times are unique.\n\n\nYou are given an integer `capacity`, which represents the **maximum** number of passengers that can get on each bus.\n\n\nWhen a passenger arrives, they will wait in line for the next available bus. You can get on a bus that departs at `x` minutes if you arrive at `y` minutes where `y <= x`, and the bus is not full. Passengers with the **earliest** arrival times get on the bus first.\n\n\nMore formally when a bus arrives, either:\n\n\n If `capacity` or fewer passengers are waiting for a bus, they will **all** get on the bus, or\n The `capacity` passengers with the **earliest** arrival times will get on the bus.\n\n\nReturn *the latest time you may arrive at the bus station to catch a bus*. You **cannot** arrive at the same time as another passenger.\n\n\nNote:** The arrays `buses` and `passengers` are not necessarily sorted.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** buses = [10,20], passengers = [2,17,18,19], capacity = 2",
                "Output": "** 16",
                "Explanation": "** Suppose you arrive at time 16.\nAt time 10, the first bus departs with the 0th passenger. \nAt time 20, the second bus departs with you and the 1st passenger.\nNote that you may not arrive at the same time as another passenger, which is why you must arrive before the 1st passenger to catch the bus."
            },
            {
                "Input": "** buses = [20,30,10], passengers = [19,13,26,4,25,11,21], capacity = 2",
                "Output": "** 20",
                "Explanation": "** Suppose you arrive at time 20.\nAt time 10, the first bus departs with the 3rd passenger. \nAt time 20, the second bus departs with the 5th and 1st passengers.\nAt time 30, the third bus departs with the 0th passenger and you.\nNotice if you had arrived any later, then the 6th passenger would have taken your seat on the third bus."
            }
        ]
    },
    {
        "Title": "Minimum Sum of Squared Difference",
        "slug": "minimum-sum-of-squared-difference",
        "description": "You are given two positive **0-indexed** integer arrays `nums1` and `nums2`, both of length `n`.\n\n\nThe **sum of squared difference** of arrays `nums1` and `nums2` is defined as the **sum** of `(nums1[i] - nums2[i])2` for each `0 <= i < n`.\n\n\nYou are also given two positive integers `k1` and `k2`. You can modify any of the elements of `nums1` by `+1` or `-1` at most `k1` times. Similarly, you can modify any of the elements of `nums2` by `+1` or `-1` at most `k2` times.\n\n\nReturn *the minimum **sum of squared difference** after modifying array* `nums1` *at most* `k1` *times and modifying array* `nums2` *at most* `k2` *times*.\n\n\nNote**: You are allowed to modify the array elements to become **negative** integers.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** nums1 = [1,2,3,4], nums2 = [2,10,20,19], k1 = 0, k2 = 0",
                "Output": "** 579",
                "Explanation": "** The elements in nums1 and nums2 cannot be modified because k1 = 0 and k2 = 0. \nThe sum of square difference will be: (1 - 2)2 + (2 - 10)2 + (3 - 20)2 + (4 - 19)2\u00a0= 579."
            },
            {
                "Input": "** nums1 = [1,4,10,12], nums2 = [5,8,6,9], k1 = 1, k2 = 1",
                "Output": "** 43",
                "Explanation": "** One way to obtain the minimum sum of square difference is: \n- Increase nums1[0] once.\n- Increase nums2[2] once.\nThe minimum of the sum of square difference will be: \n(2 - 5)2 + (4 - 8)2 + (10 - 7)2 + (12 - 9)2\u00a0= 43.\nNote that, there are other ways to obtain the minimum of the sum of square difference, but there is no way to obtain a sum smaller than 43."
            }
        ]
    },
    {
        "Title": "Subarray With Elements Greater Than Varying Threshold",
        "slug": "subarray-with-elements-greater-than-varying-threshold",
        "description": "You are given an integer array `nums` and an integer `threshold`.\n\n\nFind any subarray of `nums` of length `k` such that **every** element in the subarray is **greater** than `threshold / k`.\n\n\nReturn *the **size** of **any** such subarray*. If there is no such subarray, return `-1`.\n\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Stack",
            "Union Find",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,4,3,1], threshold = 6",
                "Output": "** 3",
                "Explanation": "** The subarray [3,4,3] has a size of 3, and every element is greater than 6 / 3 = 2.\nNote that this is the only valid subarray."
            },
            {
                "Input": "** nums = [6,5,6,5,8], threshold = 7",
                "Output": "** 1",
                "Explanation": "** The subarray [8] has a size of 1, and 8 > 7 / 1 = 7. So 1 is returned.\nNote that the subarray [6,5] has a size of 2, and every element is greater than 7 / 2 = 3.5. \nSimilarly, the subarrays [6,5,6], [6,5,6,5], [6,5,6,5,8] also satisfy the given conditions.\nTherefore, 2, 3, 4, or 5 may also be returned."
            }
        ]
    },
    {
        "Title": "Minimum Amount of Time to Fill Cups",
        "slug": "minimum-amount-of-time-to-fill-cups",
        "description": "You have a water dispenser that can dispense cold, warm, and hot water. Every second, you can either fill up `2` cups with **different** types of water, or `1` cup of any type of water.\n\n\nYou are given a **0-indexed** integer array `amount` of length `3` where `amount[0]`, `amount[1]`, and `amount[2]` denote the number of cold, warm, and hot water cups you need to fill respectively. Return *the **minimum** number of seconds needed to fill up all the cups*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** amount = [1,4,2]",
                "Output": "** 4",
                "Explanation": "** One way to fill up the cups is:\nSecond 1: Fill up a cold cup and a warm cup.\nSecond 2: Fill up a warm cup and a hot cup.\nSecond 3: Fill up a warm cup and a hot cup.\nSecond 4: Fill up a warm cup.\nIt can be proven that 4 is the minimum number of seconds needed."
            },
            {
                "Input": "** amount = [5,4,4]",
                "Output": "** 7",
                "Explanation": "** One way to fill up the cups is:\nSecond 1: Fill up a cold cup, and a hot cup.\nSecond 2: Fill up a cold cup, and a warm cup.\nSecond 3: Fill up a cold cup, and a warm cup.\nSecond 4: Fill up a warm cup, and a hot cup.\nSecond 5: Fill up a cold cup, and a hot cup.\nSecond 6: Fill up a cold cup, and a warm cup.\nSecond 7: Fill up a hot cup."
            },
            {
                "Input": "** amount = [5,0,0]",
                "Output": "** 5",
                "Explanation": "** Every second, we fill up a cold cup."
            }
        ]
    },
    {
        "Title": "Smallest Number in Infinite Set",
        "slug": "smallest-number-in-infinite-set",
        "description": "You have a set which contains all positive integers `[1, 2, 3, 4, 5, ...]`.\n\n\nImplement the `SmallestInfiniteSet` class:\n\n\n `SmallestInfiniteSet()` Initializes the **SmallestInfiniteSet** object to contain **all** positive integers.\n `int popSmallest()` **Removes** and returns the smallest integer contained in the infinite set.\n `void addBack(int num)` **Adds** a positive integer `num` back into the infinite set, if it is **not** already in the infinite set.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Design",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "[\"SmallestInfiniteSet\", \"addBack\", \"popSmallest\", \"popSmallest\", \"popSmallest\", \"addBack\", \"popSmallest\", \"popSmallest\", \"popSmallest\"]\n[[], [2], [], [], [], [1], [], [], []]",
                "Output": "[null, null, 1, 2, 3, null, 1, 4, 5]",
                "Explanation": "SmallestInfiniteSet smallestInfiniteSet = new SmallestInfiniteSet();\nsmallestInfiniteSet.addBack(2);    // 2 is already in the set, so no change is made.\nsmallestInfiniteSet.popSmallest(); // return 1, since 1 is the smallest number, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 2, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 3, and remove it from the set.\nsmallestInfiniteSet.addBack(1);    // 1 is added back to the set.\nsmallestInfiniteSet.popSmallest(); // return 1, since 1 was added back to the set and\n                                   // is the smallest number, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 4, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 5, and remove it from the set."
            }
        ]
    },
    {
        "Title": "Move Pieces to Obtain a String",
        "slug": "move-pieces-to-obtain-a-string",
        "description": "You are given two strings `start` and `target`, both of length `n`. Each string consists **only** of the characters `'L'`, `'R'`, and `'_'` where:\n\n\n The characters `'L'` and `'R'` represent pieces, where a piece `'L'` can move to the **left** only if there is a **blank** space directly to its left, and a piece `'R'` can move to the **right** only if there is a **blank** space directly to its right.\n The character `'_'` represents a blank space that can be occupied by **any** of the `'L'` or `'R'` pieces.\n\n\nReturn `true` *if it is possible to obtain the string* `target` *by moving the pieces of the string* `start` ***any** number of times*. Otherwise, return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** start = \"_L__R__R_\", target = \"L______RR\"",
                "Output": "** true",
                "Explanation": "** We can obtain the string target from start by doing the following moves:\n- Move the first piece one step to the left, start becomes equal to \"**L**___R__R_\".\n- Move the last piece one step to the right, start becomes equal to \"L___R___**R**\".\n- Move the second piece three steps to the right, start becomes equal to \"L______**R**R\".\nSince it is possible to get the string target from start, we return true."
            },
            {
                "Input": "** start = \"R_L_\", target = \"__LR\"",
                "Output": "** false",
                "Explanation": "** The 'R' piece in the string start can move one step to the right to obtain \"_**R**L_\".\nAfter that, no pieces can move anymore, so it is impossible to obtain the string target from start."
            },
            {
                "Input": "** start = \"_R\", target = \"R_\"",
                "Output": "** false",
                "Explanation": "** The piece in the string start can move only to the right, so it is impossible to obtain the string target from start."
            }
        ]
    },
    {
        "Title": "Count the Number of Ideal Arrays",
        "slug": "count-the-number-of-ideal-arrays",
        "description": "You are given two integers `n` and `maxValue`, which are used to describe an **ideal** array.\n\n\nA **0-indexed** integer array `arr` of length `n` is considered **ideal** if the following conditions hold:\n\n\n Every `arr[i]` is a value from `1` to `maxValue`, for `0 <= i < n`.\n Every `arr[i]` is divisible by `arr[i - 1]`, for `0 < i < n`.\n\n\nReturn *the number of **distinct** ideal arrays of length* `n`. Since the answer may be very large, return it modulo `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Combinatorics",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** n = 2, maxValue = 5",
                "Output": "** 10",
                "Explanation": "** The following are the possible ideal arrays:\n- Arrays starting with the value 1 (5 arrays): [1,1], [1,2], [1,3], [1,4], [1,5]\n- Arrays starting with the value 2 (2 arrays): [2,2], [2,4]\n- Arrays starting with the value 3 (1 array): [3,3]\n- Arrays starting with the value 4 (1 array): [4,4]\n- Arrays starting with the value 5 (1 array): [5,5]\nThere are a total of 5 + 2 + 1 + 1 + 1 = 10 distinct ideal arrays."
            },
            {
                "Input": "** n = 5, maxValue = 3",
                "Output": "** 11",
                "Explanation": "** The following are the possible ideal arrays:\n- Arrays starting with the value 1 (9 arrays): \n   - With no other distinct values (1 array): [1,1,1,1,1] \n   - With 2nd distinct value 2 (4 arrays): [1,1,1,1,2], [1,1,1,2,2], [1,1,2,2,2], [1,2,2,2,2]\n   - With 2nd distinct value 3 (4 arrays): [1,1,1,1,3], [1,1,1,3,3], [1,1,3,3,3], [1,3,3,3,3]\n- Arrays starting with the value 2 (1 array): [2,2,2,2,2]\n- Arrays starting with the value 3 (1 array): [3,3,3,3,3]\nThere are a total of 9 + 1 + 1 = 11 distinct ideal arrays."
            }
        ]
    },
    {
        "Title": "Maximum Number of Pairs in Array",
        "slug": "maximum-number-of-pairs-in-array",
        "description": "You are given a **0-indexed** integer array `nums`. In one operation, you may do the following:\n\n\n Choose **two** integers in `nums` that are **equal**.\n Remove both integers from `nums`, forming a **pair**.\n\n\nThe operation is done on `nums` as many times as possible.\n\n\nReturn *a **0-indexed** integer array* `answer` *of size* `2` *where* `answer[0]` *is the number of pairs that are formed and* `answer[1]` *is the number of leftover integers in* `nums` *after doing the operation as many times as possible*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,2,1,3,2,2]",
                "Output": "** [3,1]",
                "Explanation": "**\nForm a pair with nums[0] and nums[3] and remove them from nums. Now, nums = [3,2,3,2,2].\nForm a pair with nums[0] and nums[2] and remove them from nums. Now, nums = [2,2,2].\nForm a pair with nums[0] and nums[1] and remove them from nums. Now, nums = [2].\nNo more pairs can be formed. A total of 3 pairs have been formed, and there is 1 number leftover in nums."
            },
            {
                "Input": "** nums = [1,1]",
                "Output": "** [1,0]",
                "Explanation": "** Form a pair with nums[0] and nums[1] and remove them from nums. Now, nums = [].\nNo more pairs can be formed. A total of 1 pair has been formed, and there are 0 numbers leftover in nums."
            },
            {
                "Input": "** nums = [0]",
                "Output": "** [0,1]",
                "Explanation": "** No pairs can be formed, and there is 1 number leftover in nums."
            }
        ]
    },
    {
        "Title": "Max Sum of a Pair With Equal Sum of Digits",
        "slug": "max-sum-of-a-pair-with-equal-sum-of-digits",
        "description": "You are given a **0-indexed** array `nums` consisting of **positive** integers. You can choose two indices `i` and `j`, such that `i != j`, and the sum of digits of the number `nums[i]` is equal to that of `nums[j]`.\n\n\nReturn *the **maximum** value of* `nums[i] + nums[j]` *that you can obtain over all possible indices* `i` *and* `j` *that satisfy the conditions.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** nums = [18,43,36,13,7]",
                "Output": "** 54",
                "Explanation": "** The pairs (i, j) that satisfy the conditions are:\n- (0, 2), both numbers have a sum of digits equal to 9, and their sum is 18 + 36 = 54.\n- (1, 4), both numbers have a sum of digits equal to 7, and their sum is 43 + 7 = 50.\nSo the maximum sum that we can obtain is 54."
            },
            {
                "Input": "** nums = [10,12,19,14]",
                "Output": "** -1",
                "Explanation": "** There are no two numbers that satisfy the conditions, so we return -1."
            }
        ]
    },
    {
        "Title": "Query Kth Smallest Trimmed Number",
        "slug": "query-kth-smallest-trimmed-number",
        "description": "You are given a **0-indexed** array of strings `nums`, where each string is of **equal length** and consists of only digits.\n\n\nYou are also given a **0-indexed** 2D integer array `queries` where `queries[i] = [ki, trimi]`. For each `queries[i]`, you need to:\n\n\n **Trim** each number in `nums` to its **rightmost** `trimi` digits.\n Determine the **index** of the `kith` smallest trimmed number in `nums`. If two trimmed numbers are equal, the number with the **lower** index is considered to be smaller.\n Reset each number in `nums` to its original length.\n\n\nReturn *an array* `answer` *of the same length as* `queries`, *where* `answer[i]` *is the answer to the* `ith` *query.\n\n\nNote**:\n\n\n To trim to the rightmost `x` digits means to keep removing the leftmost digit, until only `x` digits remain.\n Strings in `nums` may contain leading zeros.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Divide and Conquer",
            "Sorting",
            "Heap (Priority Queue)",
            "Radix Sort",
            "Quickselect"
        ],
        "examples": [
            {
                "Input": "** nums = [\"102\",\"473\",\"251\",\"814\"], queries = [[1,1],[2,3],[4,2],[1,2]]",
                "Output": "** [2,2,1,0]",
                "Explanation": "**\n1. After trimming to the last digit, nums = [\"2\",\"3\",\"1\",\"4\"]. The smallest number is 1 at index 2.\n2. Trimmed to the last 3 digits, nums is unchanged. The 2nd smallest number is 251 at index 2.\n3. Trimmed to the last 2 digits, nums = [\"02\",\"73\",\"51\",\"14\"]. The 4th smallest number is 73.\n4. Trimmed to the last 2 digits, the smallest number is 2 at index 0.\n   Note that the trimmed number \"02\" is evaluated as 2."
            },
            {
                "Input": "** nums = [\"24\",\"37\",\"96\",\"04\"], queries = [[2,1],[2,2]]",
                "Output": "** [3,0]",
                "Explanation": "**\n1. Trimmed to the last digit, nums = [\"4\",\"7\",\"6\",\"4\"]. The 2nd smallest number is 4 at index 3.\n   There are two occurrences of 4, but the one at index 0 is considered smaller than the one at index 3.\n2. Trimmed to the last 2 digits, nums is unchanged. The 2nd smallest number is 24."
            }
        ]
    },
    {
        "Title": "Minimum Deletions to Make Array Divisible",
        "slug": "minimum-deletions-to-make-array-divisible",
        "description": "You are given two positive integer arrays `nums` and `numsDivide`. You can delete any number of elements from `nums`.\n\n\nReturn *the **minimum** number of deletions such that the **smallest** element in* `nums` ***divides** all the elements of* `numsDivide`. If this is not possible, return `-1`.\n\n\nNote that an integer `x` divides `y` if `y % x == 0`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Sorting",
            "Heap (Priority Queue)",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [2,3,2,4,3], numsDivide = [9,6,9,3,15]",
                "Output": "** 2",
                "Explanation": "** \nThe smallest element in [2,3,2,4,3] is 2, which does not divide all the elements of numsDivide.\nWe use 2 deletions to delete the elements in nums that are equal to 2 which makes nums = [3,4,3].\nThe smallest element in [3,4,3] is 3, which divides all the elements of numsDivide.\nIt can be shown that 2 is the minimum number of deletions needed."
            },
            {
                "Input": "** nums = [4,3,6], numsDivide = [8,2,6,10]",
                "Output": "** -1",
                "Explanation": "** \nWe want the smallest element in nums to divide all the elements of numsDivide.\nThere is no way to delete elements from nums to allow this."
            }
        ]
    },
    {
        "Title": "Best Poker Hand",
        "slug": "best-poker-hand",
        "description": "You are given an integer array `ranks` and a character array `suits`. You have `5` cards where the `ith` card has a rank of `ranks[i]` and a suit of `suits[i]`.\n\n\nThe following are the types of **poker hands** you can make from best to worst:\n\n\n1. `\"Flush\"`: Five cards of the same suit.\n2. `\"Three of a Kind\"`: Three cards of the same rank.\n3. `\"Pair\"`: Two cards of the same rank.\n4. `\"High Card\"`: Any single card.\n\n\nReturn *a string representing the **best** type of **poker hand** you can make with the given cards.\n\n\nNote** that the return values are **case-sensitive**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** ranks = [13,2,3,1,9], suits = [\"a\",\"a\",\"a\",\"a\",\"a\"]",
                "Output": "** \"Flush\"",
                "Explanation": "** The hand with all the cards consists of 5 cards with the same suit, so we have a \"Flush\"."
            },
            {
                "Input": "** ranks = [4,4,2,4,4], suits = [\"d\",\"a\",\"a\",\"b\",\"c\"]",
                "Output": "** \"Three of a Kind\"",
                "Explanation": "** The hand with the first, second, and fourth card consists of 3 cards with the same rank, so we have a \"Three of a Kind\".\nNote that we could also make a \"Pair\" hand but \"Three of a Kind\" is a better hand.\nAlso note that other cards could be used to make the \"Three of a Kind\" hand."
            },
            {
                "Input": "** ranks = [10,10,2,12,9], suits = [\"a\",\"b\",\"c\",\"a\",\"d\"]",
                "Output": "** \"Pair\"",
                "Explanation": "** The hand with the first and second card consists of 2 cards with the same rank, so we have a \"Pair\".\nNote that we cannot make a \"Flush\" or a \"Three of a Kind\"."
            }
        ]
    },
    {
        "Title": "Number of Zero-Filled Subarrays",
        "slug": "number-of-zero-filled-subarrays",
        "description": "Given an integer array `nums`, return *the number of **subarrays** filled with* `0`.\n\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,0,0,2,0,0,4]",
                "Output": "** 6",
                "Explanation": "** \nThere are 4 occurrences of [0] as a subarray.\nThere are 2 occurrences of [0,0] as a subarray.\nThere is no occurrence of a subarray with a size more than 2 filled with 0. Therefore, we return 6."
            },
            {
                "Input": "** nums = [0,0,0,2,0,0]",
                "Output": "** 9",
                "Explanation": "**There are 5 occurrences of [0] as a subarray.\nThere are 3 occurrences of [0,0] as a subarray.\nThere is 1 occurrence of [0,0,0] as a subarray.\nThere is no occurrence of a subarray with a size more than 3 filled with 0. Therefore, we return 9."
            },
            {
                "Input": "** nums = [2,10,2019]",
                "Output": "** 0",
                "Explanation": "** There is no subarray filled with 0. Therefore, we return 0."
            }
        ]
    },
    {
        "Title": "Design a Number Container System",
        "slug": "design-a-number-container-system",
        "description": "Design a number container system that can do the following:\n\n\n **Insert** or **Replace** a number at the given index in the system.\n **Return** the smallest index for the given number in the system.\n\n\nImplement the `NumberContainers` class:\n\n\n `NumberContainers()` Initializes the number container system.\n `void change(int index, int number)` Fills the container at `index` with the `number`. If there is already a number at that `index`, replace it.\n `int find(int number)` Returns the smallest index for the given `number`, or `-1` if there is no index that is filled by `number` in the system.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Design",
            "Heap (Priority Queue)",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "[\"NumberContainers\", \"find\", \"change\", \"change\", \"change\", \"change\", \"find\", \"change\", \"find\"]\n[[], [10], [2, 10], [1, 10], [3, 10], [5, 10], [10], [1, 20], [10]]",
                "Output": "[null, -1, null, null, null, null, 1, null, 2]",
                "Explanation": "NumberContainers nc = new NumberContainers();\nnc.find(10); // There is no index that is filled with number 10. Therefore, we return -1.\nnc.change(2, 10); // Your container at index 2 will be filled with number 10.\nnc.change(1, 10); // Your container at index 1 will be filled with number 10.\nnc.change(3, 10); // Your container at index 3 will be filled with number 10.\nnc.change(5, 10); // Your container at index 5 will be filled with number 10.\nnc.find(10); // Number 10 is at the indices 1, 2, 3, and 5. Since the smallest index that is filled with 10 is 1, we return 1.\nnc.change(1, 20); // Your container at index 1 will be filled with number 20. Note that index 1 was filled with 10 and then replaced with 20. \nnc.find(10); // Number 10 is at the indices 2, 3, and 5. The smallest index that is filled with 10 is 2. Therefore, we return 2."
            }
        ]
    },
    {
        "Title": "Shortest Impossible Sequence of Rolls",
        "slug": "shortest-impossible-sequence-of-rolls",
        "description": "You are given an integer array `rolls` of length `n` and an integer `k`. You roll a `k` sided dice numbered from `1` to `k`, `n` times, where the result of the `ith` roll is `rolls[i]`.\n\n\nReturn *the length of the **shortest** sequence of rolls that **cannot** be taken from* `rolls`.\n\n\nA **sequence of rolls** of length `len` is the result of rolling a `k` sided dice `len` times.\n\n\nNote** that the sequence taken does not have to be consecutive as long as it is in order.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** rolls = [4,2,1,2,3,3,2,4,1], k = 4",
                "Output": "** 3",
                "Explanation": "** Every sequence of rolls of length 1, [1], [2], [3], [4], can be taken from rolls.\nEvery sequence of rolls of length 2, [1, 1], [1, 2], ..., [4, 4], can be taken from rolls.\nThe sequence [1, 4, 2] cannot be taken from rolls, so we return 3.\nNote that there are other sequences that cannot be taken from rolls."
            },
            {
                "Input": "** rolls = [1,1,2,2], k = 2",
                "Output": "** 2",
                "Explanation": "** Every sequence of rolls of length 1, [1], [2], can be taken from rolls.\nThe sequence [2, 1] cannot be taken from rolls, so we return 2.\nNote that there are other sequences that cannot be taken from rolls but [2, 1] is the shortest."
            },
            {
                "Input": "** rolls = [1,1,3,2,2,2,3,3], k = 4",
                "Output": "** 1",
                "Explanation": "** The sequence [4] cannot be taken from rolls, so we return 1.\nNote that there are other sequences that cannot be taken from rolls but [4] is the shortest."
            }
        ]
    },
    {
        "Title": "First Letter to Appear Twice",
        "slug": "first-letter-to-appear-twice",
        "description": "Given a string `s` consisting of lowercase English letters, return *the first letter to appear **twice***.\n\n\nNote**:\n\n\n A letter `a` appears twice before another letter `b` if the **second** occurrence of `a` is before the **second** occurrence of `b`.\n `s` will contain at least one letter that appears twice.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Bit Manipulation",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** s = \"abccbaacz\"",
                "Output": "** \"c\"",
                "Explanation": "**\nThe letter 'a' appears on the indexes 0, 5 and 6.\nThe letter 'b' appears on the indexes 1 and 4.\nThe letter 'c' appears on the indexes 2, 3 and 7.\nThe letter 'z' appears on the index 8.\nThe letter 'c' is the first letter to appear twice, because out of all the letters the index of its second occurrence is the smallest."
            },
            {
                "Input": "** s = \"abcdd\"",
                "Output": "** \"d\"",
                "Explanation": "**\nThe only letter that appears twice is 'd' so we return 'd'."
            }
        ]
    },
    {
        "Title": "Equal Row and Column Pairs",
        "slug": "equal-row-and-column-pairs",
        "description": "Given a **0-indexed** `n x n` integer matrix `grid`, *return the number of pairs* `(ri, cj)` *such that row* `ri` *and column* `cj` *are equal*.\n\n\nA row and column pair is considered equal if they contain the same elements in the same order (i.e., an equal array).\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** grid = [[3,2,1],[1,7,6],[2,7,7]]",
                "Output": "** 1",
                "Explanation": "** There is 1 equal row and column pair:\n- (Row 2, Column 1): [2,7,7]"
            },
            {
                "Input": "** grid = [[3,1,2,2],[1,4,4,5],[2,4,2,2],[2,4,2,2]]",
                "Output": "** 3",
                "Explanation": "** There are 3 equal row and column pairs:\n- (Row 0, Column 0): [3,1,2,2]\n- (Row 2, Column 2): [2,4,2,2]\n- (Row 3, Column 2): [2,4,2,2]"
            }
        ]
    },
    {
        "Title": "Design a Food Rating System",
        "slug": "design-a-food-rating-system",
        "description": "Design a food rating system that can do the following:\n\n\n **Modify** the rating of a food item listed in the system.\n Return the highest-rated food item for a type of cuisine in the system.\n\n\nImplement the `FoodRatings` class:\n\n\n `FoodRatings(String[] foods, String[] cuisines, int[] ratings)` Initializes the system. The food items are described by `foods`, `cuisines` and `ratings`, all of which have a length of `n`.\n\t+ `foods[i]` is the name of the `ith` food,\n\t+ `cuisines[i]` is the type of cuisine of the `ith` food, and\n\t+ `ratings[i]` is the initial rating of the `ith` food.\n `void changeRating(String food, int newRating)` Changes the rating of the food item with the name `food`.\n `String highestRated(String cuisine)` Returns the name of the food item that has the highest rating for the given type of `cuisine`. If there is a tie, return the item with the **lexicographically smaller** name.\n\n\nNote that a string `x` is lexicographically smaller than string `y` if `x` comes before `y` in dictionary order, that is, either `x` is a prefix of `y`, or if `i` is the first position such that `x[i] != y[i]`, then `x[i]` comes before `y[i]` in alphabetic order.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Design",
            "Heap (Priority Queue)",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "[\"FoodRatings\", \"highestRated\", \"highestRated\", \"changeRating\", \"highestRated\", \"changeRating\", \"highestRated\"]\n[[[\"kimchi\", \"miso\", \"sushi\", \"moussaka\", \"ramen\", \"bulgogi\"], [\"korean\", \"japanese\", \"japanese\", \"greek\", \"japanese\", \"korean\"], [9, 12, 8, 15, 14, 7]], [\"korean\"], [\"japanese\"], [\"sushi\", 16], [\"japanese\"], [\"ramen\", 16], [\"japanese\"]]",
                "Output": "[null, \"kimchi\", \"ramen\", null, \"sushi\", null, \"ramen\"]",
                "Explanation": "FoodRatings foodRatings = new FoodRatings([\"kimchi\", \"miso\", \"sushi\", \"moussaka\", \"ramen\", \"bulgogi\"], [\"korean\", \"japanese\", \"japanese\", \"greek\", \"japanese\", \"korean\"], [9, 12, 8, 15, 14, 7]);\nfoodRatings.highestRated(\"korean\"); // return \"kimchi\"\n                                    // \"kimchi\" is the highest rated korean food with a rating of 9.\nfoodRatings.highestRated(\"japanese\"); // return \"ramen\"\n                                      // \"ramen\" is the highest rated japanese food with a rating of 14.\nfoodRatings.changeRating(\"sushi\", 16); // \"sushi\" now has a rating of 16.\nfoodRatings.highestRated(\"japanese\"); // return \"sushi\"\n                                      // \"sushi\" is the highest rated japanese food with a rating of 16.\nfoodRatings.changeRating(\"ramen\", 16); // \"ramen\" now has a rating of 16.\nfoodRatings.highestRated(\"japanese\"); // return \"ramen\"\n                                      // Both \"sushi\" and \"ramen\" have a rating of 16.\n                                      // However, \"ramen\" is lexicographically smaller than \"sushi\"."
            }
        ]
    },
    {
        "Title": "Number of Excellent Pairs",
        "slug": "number-of-excellent-pairs",
        "description": "You are given a **0-indexed** positive integer array `nums` and a positive integer `k`.\n\n\nA pair of numbers `(num1, num2)` is called **excellent** if the following conditions are satisfied:\n\n\n **Both** the numbers `num1` and `num2` exist in the array `nums`.\n The sum of the number of set bits in `num1 OR num2` and `num1 AND num2` is greater than or equal to `k`, where `OR` is the bitwise **OR** operation and `AND` is the bitwise **AND** operation.\n\n\nReturn *the number of **distinct** excellent pairs*.\n\n\nTwo pairs `(a, b)` and `(c, d)` are considered distinct if either `a != c` or `b != d`. For example, `(1, 2)` and `(2, 1)` are distinct.\n\n\nNote** that a pair `(num1, num2)` such that `num1 == num2` can also be excellent if you have at least **one** occurrence of `num1` in the array.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,1], k = 3",
                "Output": "** 5",
                "Explanation": "** The excellent pairs are the following:\n- (3, 3). (3 AND 3) and (3 OR 3) are both equal to (11) in binary. The total number of set bits is 2 + 2 = 4, which is greater than or equal to k = 3.\n- (2, 3) and (3, 2). (2 AND 3) is equal to (10) in binary, and (2 OR 3) is equal to (11) in binary. The total number of set bits is 1 + 2 = 3.\n- (1, 3) and (3, 1). (1 AND 3) is equal to (01) in binary, and (1 OR 3) is equal to (11) in binary. The total number of set bits is 1 + 2 = 3.\nSo the number of excellent pairs is 5."
            },
            {
                "Input": "** nums = [5,1,1], k = 10",
                "Output": "** 0",
                "Explanation": "** There are no excellent pairs for this array."
            }
        ]
    },
    {
        "Title": "Number of Unique Subjects Taught by Each Teacher",
        "slug": "number-of-unique-subjects-taught-by-each-teacher",
        "description": "Table: `Teacher`\n\n\n\n```\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| teacher_id  | int  |\n| subject_id  | int  |\n| dept_id     | int  |\n+-------------+------+\n(subject_id, dept_id) is the primary key (combinations of columns with unique values) of this table.\nEach row in this table indicates that the teacher with teacher_id teaches the subject subject_id in the department dept_id.\n\n```\n\n\u00a0\n\n\nWrite a solution to calculate\u00a0the number of unique subjects each teacher teaches in the university.\n\n\nReturn the result table in **any order**.\n\n\nThe\u00a0result format is shown in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Database"
        ],
        "examples": [
            {
                "Input": "** \nTeacher table:\n+------------+------------+---------+\n| teacher_id | subject_id | dept_id |\n+------------+------------+---------+\n| 1          | 2          | 3       |\n| 1          | 2          | 4       |\n| 1          | 3          | 3       |\n| 2          | 1          | 1       |\n| 2          | 2          | 1       |\n| 2          | 3          | 1       |\n| 2          | 4          | 1       |\n+------------+------------+---------+",
                "Output": "**  \n+------------+-----+\n| teacher_id | cnt |\n+------------+-----+\n| 1          | 2   |\n| 2          | 4   |\n+------------+-----+",
                "Explanation": "** \nTeacher 1:\n  - They teach subject 2 in departments 3 and 4.\n  - They teach subject 3 in department 3.\nTeacher 2:\n  - They teach subject 1 in department 1.\n  - They teach subject 2 in department 1.\n  - They teach subject 3 in department 1.\n  - They teach subject 4 in department 1."
            }
        ]
    },
    {
        "Title": "Make Array Zero by Subtracting Equal Amounts",
        "slug": "make-array-zero-by-subtracting-equal-amounts",
        "description": "You are given a non-negative integer array `nums`. In one operation, you must:\n\n\n Choose a positive integer `x` such that `x` is less than or equal to the **smallest non-zero** element in `nums`.\n Subtract `x` from every **positive** element in `nums`.\n\n\nReturn *the **minimum** number of operations to make every element in* `nums` *equal to* `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [1,5,0,3,5]",
                "Output": "** 3",
                "Explanation": "**\nIn the first operation, choose x = 1. Now, nums = [0,4,0,2,4].\nIn the second operation, choose x = 2. Now, nums = [0,2,0,0,2].\nIn the third operation, choose x = 2. Now, nums = [0,0,0,0,0]."
            },
            {
                "Input": "** nums = [0]",
                "Output": "** 0",
                "Explanation": "** Each element in nums is already 0 so no operations are needed."
            }
        ]
    },
    {
        "Title": "Maximum Number of Groups Entering a Competition",
        "slug": "maximum-number-of-groups-entering-a-competition",
        "description": "You are given a positive integer array `grades` which represents the grades of students in a university. You would like to enter **all** these students into a competition in **ordered** non-empty groups, such that the ordering meets the following conditions:\n\n\n The sum of the grades of students in the `ith` group is **less than** the sum of the grades of students in the `(i + 1)th` group, for all groups (except the last).\n The total number of students in the `ith` group is **less than** the total number of students in the `(i + 1)th` group, for all groups (except the last).\n\n\nReturn *the **maximum** number of groups that can be formed*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Binary Search",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** grades = [10,6,12,7,3,5]",
                "Output": "** 3",
                "Explanation": "** The following is a possible way to form 3 groups of students:\n- 1st group has the students with grades = [12]. Sum of grades: 12. Student count: 1\n- 2nd group has the students with grades = [6,7]. Sum of grades: 6 + 7 = 13. Student count: 2\n- 3rd group has the students with grades = [10,3,5]. Sum of grades: 10 + 3 + 5 = 18. Student count: 3\nIt can be shown that it is not possible to form more than 3 groups."
            },
            {
                "Input": "** grades = [8,8]",
                "Output": "** 1",
                "Explanation": "** We can only form 1 group, since forming 2 groups would lead to an equal number of students in both groups."
            }
        ]
    },
    {
        "Title": "Find Closest Node to Given Two Nodes",
        "slug": "find-closest-node-to-given-two-nodes",
        "description": "You are given a **directed** graph of `n` nodes numbered from `0` to `n - 1`, where each node has **at most one** outgoing edge.\n\n\nThe graph is represented with a given **0-indexed** array `edges` of size `n`, indicating that there is a directed edge from node `i` to node `edges[i]`. If there is no outgoing edge from `i`, then `edges[i] == -1`.\n\n\nYou are also given two integers `node1` and `node2`.\n\n\nReturn *the **index** of the node that can be reached from both* `node1` *and* `node2`*, such that the **maximum** between the distance from* `node1` *to that node, and from* `node2` *to that node is **minimized***. If there are multiple answers, return the node with the **smallest** index, and if no possible answer exists, return `-1`.\n\n\nNote that `edges` may contain cycles.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** edges = [2,2,3,-1], node1 = 0, node2 = 1",
                "Output": "** 2",
                "Explanation": "** The distance from node 0 to node 2 is 1, and the distance from node 1 to node 2 is 1.\nThe maximum of those two distances is 1. It can be proven that we cannot get a node with a smaller maximum distance than 1, so we return node 2."
            },
            {
                "Input": "** edges = [1,2,-1], node1 = 0, node2 = 2",
                "Output": "** 2",
                "Explanation": "** The distance from node 0 to node 2 is 2, and the distance from node 2 to itself is 0.\nThe maximum of those two distances is 2. It can be proven that we cannot get a node with a smaller maximum distance than 2, so we return node 2."
            }
        ]
    },
    {
        "Title": "Longest Cycle in a Graph",
        "slug": "longest-cycle-in-a-graph",
        "description": "You are given a **directed** graph of `n` nodes numbered from `0` to `n - 1`, where each node has **at most one** outgoing edge.\n\n\nThe graph is represented with a given **0-indexed** array `edges` of size `n`, indicating that there is a directed edge from node `i` to node `edges[i]`. If there is no outgoing edge from node `i`, then `edges[i] == -1`.\n\n\nReturn *the length of the **longest** cycle in the graph*. If no cycle exists, return `-1`.\n\n\nA cycle is a path that starts and ends at the **same** node.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Depth-First Search",
            "Graph",
            "Topological Sort"
        ],
        "examples": [
            {
                "Input": "** edges = [3,3,4,2,3]",
                "Output": "** 3",
                "Explanation": "** The longest cycle in the graph is the cycle: 2 -> 4 -> 3 -> 2.\nThe length of this cycle is 3, so 3 is returned."
            },
            {
                "Input": "** edges = [2,-1,3,1]",
                "Output": "** -1",
                "Explanation": "** There are no cycles in this graph."
            }
        ]
    },
    {
        "Title": "Merge Similar Items",
        "slug": "merge-similar-items",
        "description": "You are given two 2D integer arrays, `items1` and `items2`, representing two sets of items. Each array `items` has the following properties:\n\n\n `items[i] = [valuei, weighti]` where `valuei` represents the **value** and `weighti` represents the **weight** of the `ith` item.\n The value of each item in `items` is **unique**.\n\n\nReturn *a 2D integer array* `ret` *where* `ret[i] = [valuei, weighti]`*,* *with* `weighti` *being the **sum of weights** of all items with value* `valuei`.\n\n\nNote:** `ret` should be returned in **ascending** order by value.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** items1 = [[1,1],[4,5],[3,8]], items2 = [[3,1],[1,5]]",
                "Output": "** [[1,6],[3,9],[4,5]]",
                "Explanation": "** \nThe item with value = 1 occurs in items1 with weight = 1 and in items2 with weight = 5, total weight = 1 + 5 = 6.\nThe item with value = 3 occurs in items1 with weight = 8 and in items2 with weight = 1, total weight = 8 + 1 = 9.\nThe item with value = 4 occurs in items1 with weight = 5, total weight = 5.  \nTherefore, we return [[1,6],[3,9],[4,5]]."
            },
            {
                "Input": "** items1 = [[1,1],[3,2],[2,3]], items2 = [[2,1],[3,2],[1,3]]",
                "Output": "** [[1,4],[2,4],[3,4]]",
                "Explanation": "** \nThe item with value = 1 occurs in items1 with weight = 1 and in items2 with weight = 3, total weight = 1 + 3 = 4.\nThe item with value = 2 occurs in items1 with weight = 3 and in items2 with weight = 1, total weight = 3 + 1 = 4.\nThe item with value = 3 occurs in items1 with weight = 2 and in items2 with weight = 2, total weight = 2 + 2 = 4.\nTherefore, we return [[1,4],[2,4],[3,4]]."
            },
            {
                "Input": "** items1 = [[1,3],[2,2]], items2 = [[7,1],[2,2],[1,4]]",
                "Output": "** [[1,7],[2,4],[7,1]]",
                "Explanation": "**The item with value = 1 occurs in items1 with weight = 3 and in items2 with weight = 4, total weight = 3 + 4 = 7. \nThe item with value = 2 occurs in items1 with weight = 2 and in items2 with weight = 2, total weight = 2 + 2 = 4. \nThe item with value = 7 occurs in items2 with weight = 1, total weight = 1.\nTherefore, we return [[1,7],[2,4],[7,1]]."
            }
        ]
    },
    {
        "Title": "Count Number of Bad Pairs",
        "slug": "count-number-of-bad-pairs",
        "description": "You are given a **0-indexed** integer array `nums`. A pair of indices `(i, j)` is a **bad pair** if `i < j` and `j - i != nums[j] - nums[i]`.\n\n\nReturn *the total number of **bad pairs** in* `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** nums = [4,1,3,3]",
                "Output": "** 5",
                "Explanation": "** The pair (0, 1) is a bad pair since 1 - 0 != 1 - 4.\nThe pair (0, 2) is a bad pair since 2 - 0 != 3 - 4, 2 != -1.\nThe pair (0, 3) is a bad pair since 3 - 0 != 3 - 4, 3 != -1.\nThe pair (1, 2) is a bad pair since 2 - 1 != 3 - 1, 1 != 2.\nThe pair (2, 3) is a bad pair since 3 - 2 != 3 - 3, 1 != 0.\nThere are a total of 5 bad pairs, so we return 5."
            },
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** 0",
                "Explanation": "** There are no bad pairs."
            }
        ]
    },
    {
        "Title": "Task Scheduler II",
        "slug": "task-scheduler-ii",
        "description": "You are given a **0-indexed** array of positive integers `tasks`, representing tasks that need to be completed **in order**, where `tasks[i]` represents the **type** of the `ith` task.\n\n\nYou are also given a positive integer `space`, which represents the **minimum** number of days that must pass **after** the completion of a task before another task of the **same** type can be performed.\n\n\nEach day, until all tasks have been completed, you must either:\n\n\n Complete the next task from `tasks`, or\n Take a break.\n\n\nReturn *the **minimum** number of days needed to complete all tasks*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** tasks = [1,2,1,2,3,1], space = 3",
                "Output": "** 9",
                "Explanation": "**\nOne way to complete all tasks in 9 days is as follows:\nDay 1: Complete the 0th task.\nDay 2: Complete the 1st task.\nDay 3: Take a break.\nDay 4: Take a break.\nDay 5: Complete the 2nd task.\nDay 6: Complete the 3rd task.\nDay 7: Take a break.\nDay 8: Complete the 4th task.\nDay 9: Complete the 5th task.\nIt can be shown that the tasks cannot be completed in less than 9 days."
            },
            {
                "Input": "** tasks = [5,8,8,5], space = 2",
                "Output": "** 6",
                "Explanation": "**\nOne way to complete all tasks in 6 days is as follows:\nDay 1: Complete the 0th task.\nDay 2: Complete the 1st task.\nDay 3: Take a break.\nDay 4: Take a break.\nDay 5: Complete the 2nd task.\nDay 6: Complete the 3rd task.\nIt can be shown that the tasks cannot be completed in less than 6 days."
            }
        ]
    },
    {
        "Title": "Minimum Replacements to Sort the Array",
        "slug": "minimum-replacements-to-sort-the-array",
        "description": "You are given a **0-indexed** integer array `nums`. In one operation you can replace any element of the array with **any two** elements that **sum** to it.\n\n\n For example, consider `nums = [5,6,7]`. In one operation, we can replace `nums[1]` with `2` and `4` and convert `nums` to `[5,2,4,7]`.\n\n\nReturn *the minimum number of operations to make an array that is sorted in **non-decreasing** order*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums = [3,9,3]",
                "Output": "** 2",
                "Explanation": "** Here are the steps to sort the array in non-decreasing order:\n- From [3,9,3], replace the 9 with 3 and 6 so the array becomes [3,3,6,3]\n- From [3,3,6,3], replace the 6 with 3 and 3 so the array becomes [3,3,3,3,3]\nThere are 2 steps to sort the array in non-decreasing order. Therefore, we return 2."
            },
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** 0",
                "Explanation": "** The array is already in non-decreasing order. Therefore, we return 0."
            }
        ]
    },
    {
        "Title": "Number of Arithmetic Triplets",
        "slug": "number-of-arithmetic-triplets",
        "description": "You are given a **0-indexed**, **strictly increasing** integer array `nums` and a positive integer `diff`. A triplet `(i, j, k)` is an **arithmetic triplet** if the following conditions are met:\n\n\n `i < j < k`,\n `nums[j] - nums[i] == diff`, and\n `nums[k] - nums[j] == diff`.\n\n\nReturn *the number of unique **arithmetic triplets**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** nums = [0,1,4,6,7,10], diff = 3",
                "Output": "** 2",
                "Explanation": "**\n(1, 2, 4) is an arithmetic triplet because both 7 - 4 == 3 and 4 - 1 == 3.\n(2, 4, 5) is an arithmetic triplet because both 10 - 7 == 3 and 7 - 4 == 3."
            },
            {
                "Input": "** nums = [4,5,6,7,8,9], diff = 2",
                "Output": "** 2",
                "Explanation": "**\n(0, 2, 4) is an arithmetic triplet because both 8 - 6 == 2 and 6 - 4 == 2.\n(1, 3, 5) is an arithmetic triplet because both 9 - 7 == 2 and 7 - 5 == 2."
            }
        ]
    },
    {
        "Title": "Reachable Nodes With Restrictions",
        "slug": "reachable-nodes-with-restrictions",
        "description": "There is an undirected tree with `n` nodes labeled from `0` to `n - 1` and `n - 1` edges.\n\n\nYou are given a 2D integer array `edges` of length `n - 1` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree. You are also given an integer array `restricted` which represents **restricted** nodes.\n\n\nReturn *the **maximum** number of nodes you can reach from node* `0` *without visiting a restricted node.\n\n\nNote that node `0` will **not** be a restricted node.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** n = 7, edges = [[0,1],[1,2],[3,1],[4,0],[0,5],[5,6]], restricted = [4,5]",
                "Output": "** 4",
                "Explanation": "** The diagram above shows the tree.\nWe have that [0,1,2,3] are the only nodes that can be reached from node 0 without visiting a restricted node."
            },
            {
                "Input": "** n = 7, edges = [[0,1],[0,2],[0,5],[0,4],[3,2],[6,5]], restricted = [4,2,1]",
                "Output": "** 3",
                "Explanation": "** The diagram above shows the tree.\nWe have that [0,5,6] are the only nodes that can be reached from node 0 without visiting a restricted node."
            }
        ]
    },
    {
        "Title": "Check if There is a Valid Partition For The Array",
        "slug": "check-if-there-is-a-valid-partition-for-the-array",
        "description": "You are given a **0-indexed** integer array `nums`. You have to partition the array into one or more **contiguous** subarrays.\n\n\nWe call a partition of the array **valid** if each of the obtained subarrays satisfies **one** of the following conditions:\n\n\n1. The subarray consists of **exactly** `2,` equal elements. For example, the subarray `[2,2]` is good.\n2. The subarray consists of **exactly** `3,` equal elements. For example, the subarray `[4,4,4]` is good.\n3. The subarray consists of **exactly** `3` consecutive increasing elements, that is, the difference between adjacent elements is `1`. For example, the subarray `[3,4,5]` is good, but the subarray `[1,3,5]` is not.\n\n\nReturn `true` *if the array has **at least** one valid partition*. Otherwise, return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [4,4,4,5,6]",
                "Output": "** true",
                "Explanation": "** The array can be partitioned into the subarrays [4,4] and [4,5,6].\nThis partition is valid, so we return true."
            },
            {
                "Input": "** nums = [1,1,1,2]",
                "Output": "** false",
                "Explanation": "** There is no valid partition for this array."
            }
        ]
    },
    {
        "Title": "Longest Ideal Subsequence",
        "slug": "longest-ideal-subsequence",
        "description": "You are given a string `s` consisting of lowercase letters and an integer `k`. We call a string `t` **ideal** if the following conditions are satisfied:\n\n\n `t` is a **subsequence** of the string `s`.\n The absolute difference in the alphabet order of every two **adjacent** letters in `t` is less than or equal to `k`.\n\n\nReturn *the length of the **longest** ideal string*.\n\n\nA **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\n\nNote** that the alphabet order is not cyclic. For example, the absolute difference in the alphabet order of `'a'` and `'z'` is `25`, not `1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"acfgbd\", k = 2",
                "Output": "** 4",
                "Explanation": "** The longest ideal string is \"acbd\". The length of this string is 4, so 4 is returned.\nNote that \"acfgbd\" is not ideal because 'c' and 'f' have a difference of 3 in alphabet order."
            },
            {
                "Input": "** s = \"abcd\", k = 3",
                "Output": "** 4",
                "Explanation": "** The longest ideal string is \"abcd\". The length of this string is 4, so 4 is returned."
            }
        ]
    },
    {
        "Title": "Largest Local Values in a Matrix",
        "slug": "largest-local-values-in-a-matrix",
        "description": "You are given an `n x n` integer matrix `grid`.\n\n\nGenerate an integer matrix `maxLocal` of size `(n - 2) x (n - 2)` such that:\n\n\n `maxLocal[i][j]` is equal to the **largest** value of the `3 x 3` matrix in `grid` centered around row `i + 1` and column `j + 1`.\n\n\nIn other words, we want to find the largest value in every contiguous `3 x 3` matrix in `grid`.\n\n\nReturn *the generated matrix*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[9,9,8,1],[5,6,2,6],[8,2,6,4],[6,2,2,2]]",
                "Output": "** [[9,9],[8,6]]",
                "Explanation": "** The diagram above shows the original matrix and the generated matrix.\nNotice that each value in the generated matrix corresponds to the largest value of a contiguous 3 x 3 matrix in grid."
            },
            {
                "Input": "** grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,2,1,1],[1,1,1,1,1],[1,1,1,1,1]]",
                "Output": "** [[2,2,2],[2,2,2],[2,2,2]]",
                "Explanation": "** Notice that the 2 is contained within every contiguous 3 x 3 matrix in grid."
            }
        ]
    },
    {
        "Title": "Node With Highest Edge Score",
        "slug": "node-with-highest-edge-score",
        "description": "You are given a directed graph with `n` nodes labeled from `0` to `n - 1`, where each node has **exactly one** outgoing edge.\n\n\nThe graph is represented by a given **0-indexed** integer array `edges` of length `n`, where `edges[i]` indicates that there is a **directed** edge from node `i` to node `edges[i]`.\n\n\nThe **edge score** of a node `i` is defined as the sum of the **labels** of all the nodes that have an edge pointing to `i`.\n\n\nReturn *the node with the highest **edge score***. If multiple nodes have the same **edge score**, return the node with the **smallest** index.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** edges = [1,0,0,0,0,7,7,5]",
                "Output": "** 7",
                "Explanation": "**\n- The nodes 1, 2, 3 and 4 have an edge pointing to node 0. The edge score of node 0 is 1 + 2 + 3 + 4 = 10.\n- The node 0 has an edge pointing to node 1. The edge score of node 1 is 0.\n- The node 7 has an edge pointing to node 5. The edge score of node 5 is 7.\n- The nodes 5 and 6 have an edge pointing to node 7. The edge score of node 7 is 5 + 6 = 11.\nNode 7 has the highest edge score so return 7."
            },
            {
                "Input": "** edges = [2,0,0,2]",
                "Output": "** 0",
                "Explanation": "**\n- The nodes 1 and 2 have an edge pointing to node 0. The edge score of node 0 is 1 + 2 = 3.\n- The nodes 0 and 3 have an edge pointing to node 2. The edge score of node 2 is 0 + 3 = 3.\nNodes 0 and 2 both have an edge score of 3. Since node 0 has a smaller index, we return 0."
            }
        ]
    },
    {
        "Title": "Construct Smallest Number From DI String",
        "slug": "construct-smallest-number-from-di-string",
        "description": "You are given a **0-indexed** string `pattern` of length `n` consisting of the characters `'I'` meaning **increasing** and `'D'` meaning **decreasing**.\n\n\nA **0-indexed** string `num` of length `n + 1` is created using the following conditions:\n\n\n `num` consists of the digits `'1'` to `'9'`, where each digit is used **at most** once.\n If `pattern[i] == 'I'`, then `num[i] < num[i + 1]`.\n If `pattern[i] == 'D'`, then `num[i] > num[i + 1]`.\n\n\nReturn *the lexicographically **smallest** possible string* `num` *that meets the conditions.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Backtracking",
            "Stack",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** pattern = \"IIIDIDDD\"",
                "Output": "** \"123549876\"",
                "Explanation": "**At indices 0, 1, 2, and 4 we must have that num[i] < num[i+1].\nAt indices 3, 5, 6, and 7 we must have that num[i] > num[i+1].\nSome possible values of num are \"245639871\", \"135749862\", and \"123849765\".\nIt can be proven that \"123549876\" is the smallest possible num that meets the conditions.\nNote that \"123414321\" is not possible because the digit '1' is used more than once."
            },
            {
                "Input": "** pattern = \"DDD\"",
                "Output": "** \"4321\"",
                "Explanation": "**\nSome possible values of num are \"9876\", \"7321\", and \"8742\".\nIt can be proven that \"4321\" is the smallest possible num that meets the conditions."
            }
        ]
    },
    {
        "Title": "Count Special Integers",
        "slug": "count-special-integers",
        "description": "We call a positive integer **special** if all of its digits are **distinct**.\n\n\nGiven a **positive** integer `n`, return *the number of special integers that belong to the interval* `[1, n]`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** n = 20",
                "Output": "** 19",
                "Explanation": "** All the integers from 1 to 20, except 11, are special. Thus, there are 19 special integers."
            },
            {
                "Input": "** n = 5",
                "Output": "** 5",
                "Explanation": "** All the integers from 1 to 5 are special."
            },
            {
                "Input": "** n = 135",
                "Output": "** 110",
                "Explanation": "** There are 110 integers from 1 to 135 that are special.\nSome of the integers that are not special are: 22, 114, and 131."
            }
        ]
    },
    {
        "Title": "Minimum Recolors to Get K Consecutive Black Blocks",
        "slug": "minimum-recolors-to-get-k-consecutive-black-blocks",
        "description": "You are given a **0-indexed** string `blocks` of length `n`, where `blocks[i]` is either `'W'` or `'B'`, representing the color of the `ith` block. The characters `'W'` and `'B'` denote the colors white and black, respectively.\n\n\nYou are also given an integer `k`, which is the desired number of **consecutive** black blocks.\n\n\nIn one operation, you can **recolor** a white block such that it becomes a black block.\n\n\nReturn *the **minimum** number of operations needed such that there is at least **one** occurrence of* `k` *consecutive black blocks.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** blocks = \"WBBWWBBWBW\", k = 7",
                "Output": "** 3",
                "Explanation": "**\nOne way to achieve 7 consecutive black blocks is to recolor the 0th, 3rd, and 4th blocks\nso that blocks = \"BBBBBBBWBW\". \nIt can be shown that there is no way to achieve 7 consecutive black blocks in less than 3 operations.\nTherefore, we return 3."
            },
            {
                "Input": "** blocks = \"WBWBBBW\", k = 2",
                "Output": "** 0",
                "Explanation": "**\nNo changes need to be made, since 2 consecutive black blocks already exist.\nTherefore, we return 0."
            }
        ]
    },
    {
        "Title": "Time Needed to Rearrange a Binary String",
        "slug": "time-needed-to-rearrange-a-binary-string",
        "description": "You are given a binary string `s`. In one second, **all** occurrences of `\"01\"` are **simultaneously** replaced with `\"10\"`. This process **repeats** until no occurrences of `\"01\"` exist.\n\n\nReturn *the number of seconds needed to complete this process.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** s = \"0110101\"",
                "Output": "** 4",
                "Explanation": "** \nAfter one second, s becomes \"1011010\".\nAfter another second, s becomes \"1101100\".\nAfter the third second, s becomes \"1110100\".\nAfter the fourth second, s becomes \"1111000\".\nNo occurrence of \"01\" exists any longer, and the process needed 4 seconds to complete,\nso we return 4."
            },
            {
                "Input": "** s = \"11100\"",
                "Output": "** 0",
                "Explanation": "**\nNo occurrence of \"01\" exists in s, and the processes needed 0 seconds to complete,\nso we return 0."
            }
        ]
    },
    {
        "Title": "Shifting Letters II",
        "slug": "shifting-letters-ii",
        "description": "You are given a string `s` of lowercase English letters and a 2D integer array `shifts` where `shifts[i] = [starti, endi, directioni]`. For every `i`, **shift** the characters in `s` from the index `starti` to the index `endi` (**inclusive**) forward if `directioni = 1`, or shift the characters backward if `directioni = 0`.\n\n\nShifting a character **forward** means replacing it with the **next** letter in the alphabet (wrapping around so that `'z'` becomes `'a'`). Similarly, shifting a character **backward** means replacing it with the **previous** letter in the alphabet (wrapping around so that `'a'` becomes `'z'`).\n\n\nReturn *the final string after all such shifts to* `s` *are applied*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** s = \"abc\", shifts = [[0,1,0],[1,2,1],[0,2,1]]",
                "Output": "** \"ace\"",
                "Explanation": "** Firstly, shift the characters from index 0 to index 1 backward. Now s = \"zac\".\nSecondly, shift the characters from index 1 to index 2 forward. Now s = \"zbd\".\nFinally, shift the characters from index 0 to index 2 forward. Now s = \"ace\"."
            },
            {
                "Input": "** s = \"dztz\", shifts = [[0,0,0],[1,1,1]]",
                "Output": "** \"catz\"",
                "Explanation": "** Firstly, shift the characters from index 0 to index 0 backward. Now s = \"cztz\".\nFinally, shift the characters from index 1 to index 1 forward. Now s = \"catz\"."
            }
        ]
    },
    {
        "Title": "Maximum Segment Sum After Removals",
        "slug": "maximum-segment-sum-after-removals",
        "description": "You are given two **0-indexed** integer arrays `nums` and `removeQueries`, both of length `n`. For the `ith` query, the element in `nums` at the index `removeQueries[i]` is removed, splitting `nums` into different segments.\n\n\nA **segment** is a contiguous sequence of **positive** integers in `nums`. A **segment sum** is the sum of every element in a segment.\n\n\nReturn *an integer array* `answer`*, of length* `n`*, where* `answer[i]` *is the **maximum** segment sum after applying the* `ith` *removal.\n\n\nNote:** The same index will **not** be removed more than once.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Union Find",
            "Prefix Sum",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,5,6,1], removeQueries = [0,3,2,4,1]",
                "Output": "** [14,7,2,2,0]",
                "Explanation": "** Using 0 to indicate a removed element, the answer is as follows:\nQuery 1: Remove the 0th element, nums becomes [0,2,5,6,1] and the maximum segment sum is 14 for segment [2,5,6,1].\nQuery 2: Remove the 3rd element, nums becomes [0,2,5,0,1] and the maximum segment sum is 7 for segment [2,5].\nQuery 3: Remove the 2nd element, nums becomes [0,2,0,0,1] and the maximum segment sum is 2 for segment [2]. \nQuery 4: Remove the 4th element, nums becomes [0,2,0,0,0] and the maximum segment sum is 2 for segment [2]. \nQuery 5: Remove the 1st element, nums becomes [0,0,0,0,0] and the maximum segment sum is 0, since there are no segments.\nFinally, we return [14,7,2,2,0]."
            },
            {
                "Input": "** nums = [3,2,11,1], removeQueries = [3,2,1,0]",
                "Output": "** [16,5,3,0]",
                "Explanation": "** Using 0 to indicate a removed element, the answer is as follows:\nQuery 1: Remove the 3rd element, nums becomes [3,2,11,0] and the maximum segment sum is 16 for segment [3,2,11].\nQuery 2: Remove the 2nd element, nums becomes [3,2,0,0] and the maximum segment sum is 5 for segment [3,2].\nQuery 3: Remove the 1st element, nums becomes [3,0,0,0] and the maximum segment sum is 3 for segment [3].\nQuery 4: Remove the 0th element, nums becomes [0,0,0,0] and the maximum segment sum is 0, since there are no segments.\nFinally, we return [16,5,3,0]."
            }
        ]
    },
    {
        "Title": "Minimum Hours of Training to Win a Competition",
        "slug": "minimum-hours-of-training-to-win-a-competition",
        "description": "You are entering a competition, and are given two **positive** integers `initialEnergy` and `initialExperience` denoting your initial energy and initial experience respectively.\n\n\nYou are also given two **0-indexed** integer arrays `energy` and `experience`, both of length `n`.\n\n\nYou will face `n` opponents **in order**. The energy and experience of the `ith` opponent is denoted by `energy[i]` and `experience[i]` respectively. When you face an opponent, you need to have both **strictly** greater experience and energy to defeat them and move to the next opponent if available.\n\n\nDefeating the `ith` opponent **increases** your experience by `experience[i]`, but **decreases** your energy by `energy[i]`.\n\n\nBefore starting the competition, you can train for some number of hours. After each hour of training, you can **either** choose to increase your initial experience by one, or increase your initial energy by one.\n\n\nReturn *the **minimum** number of training hours required to defeat all* `n` *opponents*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** initialEnergy = 5, initialExperience = 3, energy = [1,4,3,2], experience = [2,6,3,1]",
                "Output": "** 8",
                "Explanation": "** You can increase your energy to 11 after 6 hours of training, and your experience to 5 after 2 hours of training.\nYou face the opponents in the following order:\n- You have more energy and experience than the 0th opponent so you win.\n  Your energy becomes 11 - 1 = 10, and your experience becomes 5 + 2 = 7.\n- You have more energy and experience than the 1st opponent so you win.\n  Your energy becomes 10 - 4 = 6, and your experience becomes 7 + 6 = 13.\n- You have more energy and experience than the 2nd opponent so you win.\n  Your energy becomes 6 - 3 = 3, and your experience becomes 13 + 3 = 16.\n- You have more energy and experience than the 3rd opponent so you win.\n  Your energy becomes 3 - 2 = 1, and your experience becomes 16 + 1 = 17.\nYou did a total of 6 + 2 = 8 hours of training before the competition, so we return 8.\nIt can be proven that no smaller answer exists."
            },
            {
                "Input": "** initialEnergy = 2, initialExperience = 4, energy = [1], experience = [3]",
                "Output": "** 0",
                "Explanation": "** You do not need any additional energy or experience to win the competition, so we return 0."
            }
        ]
    },
    {
        "Title": "Largest Palindromic Number",
        "slug": "largest-palindromic-number",
        "description": "You are given a string `num` consisting of digits only.\n\n\nReturn *the **largest palindromic** integer (in the form of a string) that can be formed using digits taken from* `num`. It should not contain **leading zeroes**.\n\n\nNotes:\n\n\n You do **not** need to use all the digits of `num`, but you must use **at least** one digit.\n The digits can be reordered.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** num = \"444947137\"",
                "Output": "** \"7449447\"",
                "Explanation": "** \nUse the digits \"4449477\" from \"**44494****7**13**7**\" to form the palindromic integer \"7449447\".\nIt can be shown that \"7449447\" is the largest palindromic integer that can be formed."
            },
            {
                "Input": "** num = \"00009\"",
                "Output": "** \"9\"",
                "Explanation": "** \nIt can be shown that \"9\" is the largest palindromic integer that can be formed.\nNote that the integer returned should not contain leading zeroes."
            }
        ]
    },
    {
        "Title": "Amount of Time for Binary Tree to Be Infected",
        "slug": "amount-of-time-for-binary-tree-to-be-infected",
        "description": "You are given the `root` of a binary tree with **unique** values, and an integer `start`. At minute `0`, an **infection** starts from the node with value `start`.\n\n\nEach minute, a node becomes infected if:\n\n\n The node is currently uninfected.\n The node is adjacent to an infected node.\n\n\nReturn *the number of minutes needed for the entire tree to be infected.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,5,3,null,4,10,6,9,2], start = 3",
                "Output": "** 4",
                "Explanation": "** The following nodes are infected during:\n- Minute 0: Node 3\n- Minute 1: Nodes 1, 10 and 6\n- Minute 2: Node 5\n- Minute 3: Node 4\n- Minute 4: Nodes 9 and 2\nIt takes 4 minutes for the whole tree to be infected so we return 4."
            },
            {
                "Input": "** root = [1], start = 1",
                "Output": "** 0",
                "Explanation": "** At minute 0, the only node in the tree is infected so we return 0."
            }
        ]
    },
    {
        "Title": "Find the K-Sum of an Array",
        "slug": "find-the-k-sum-of-an-array",
        "description": "You are given an integer array `nums` and a **positive** integer `k`. You can choose any **subsequence** of the array and sum all of its elements together.\n\n\nWe define the **K-Sum** of the array as the `kth` **largest** subsequence sum that can be obtained (**not** necessarily distinct).\n\n\nReturn *the K-Sum of the array*.\n\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n\nNote** that the empty subsequence is considered to have a sum of `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** nums = [2,4,-2], k = 5",
                "Output": "** 2",
                "Explanation": "** All the possible subsequence sums that we can obtain are the following sorted in decreasing order:\n- 6, 4, 4, 2, 2, 0, 0, -2.\nThe 5-Sum of the array is 2."
            },
            {
                "Input": "** nums = [1,-2,3,4,-10,12], k = 16",
                "Output": "** 10",
                "Explanation": "** The 16-Sum of the array is 10."
            }
        ]
    },
    {
        "Title": "Longest Subsequence With Limited Sum",
        "slug": "longest-subsequence-with-limited-sum",
        "description": "You are given an integer array `nums` of length `n`, and an integer array `queries` of length `m`.\n\n\nReturn *an array* `answer` *of length* `m` *where* `answer[i]` *is the **maximum** size of a **subsequence** that you can take from* `nums` *such that the **sum** of its elements is less than or equal to* `queries[i]`.\n\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Binary Search",
            "Greedy",
            "Sorting",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [4,5,2,1], queries = [3,10,21]",
                "Output": "** [2,3,4]",
                "Explanation": "** We answer the queries as follows:\n- The subsequence [2,1] has a sum less than or equal to 3. It can be proven that 2 is the maximum size of such a subsequence, so answer[0] = 2.\n- The subsequence [4,5,1] has a sum less than or equal to 10. It can be proven that 3 is the maximum size of such a subsequence, so answer[1] = 3.\n- The subsequence [4,5,2,1] has a sum less than or equal to 21. It can be proven that 4 is the maximum size of such a subsequence, so answer[2] = 4."
            },
            {
                "Input": "** nums = [2,3,4,5], queries = [1]",
                "Output": "** [0]",
                "Explanation": "** The empty subsequence is the only subsequence that has a sum less than or equal to 1, so answer[0] = 0."
            }
        ]
    },
    {
        "Title": "Removing Stars From a String",
        "slug": "removing-stars-from-a-string",
        "description": "You are given a string `s`, which contains stars `*`.\n\n\nIn one operation, you can:\n\n\n Choose a star in `s`.\n Remove the closest **non-star** character to its **left**, as well as remove the star itself.\n\n\nReturn *the string after **all** stars have been removed*.\n\n\nNote:\n\n\n The input will be generated such that the operation is always possible.\n It can be shown that the resulting string will always be unique.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Stack",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** s = \"leet**cod*e\"",
                "Output": "** \"lecoe\"",
                "Explanation": "** Performing the removals from left to right:\n- The closest character to the 1st star is 't' in \"lee**t****cod*e\". s becomes \"lee*cod*e\".\n- The closest character to the 2nd star is 'e' in \"le**e***cod*e\". s becomes \"lecod*e\".\n- The closest character to the 3rd star is 'd' in \"leco**d***e\". s becomes \"lecoe\".\nThere are no more stars, so we return \"lecoe\"."
            },
            {
                "Input": "** s = \"erase*****\"",
                "Output": "** \"\"",
                "Explanation": "** The entire string is removed, so we return an empty string."
            }
        ]
    },
    {
        "Title": "Minimum Amount of Time to Collect Garbage",
        "slug": "minimum-amount-of-time-to-collect-garbage",
        "description": "You are given a **0-indexed** array of strings `garbage` where `garbage[i]` represents the assortment of garbage at the `ith` house. `garbage[i]` consists only of the characters `'M'`, `'P'` and `'G'` representing one unit of metal, paper and glass garbage respectively. Picking up **one** unit of any type of garbage takes `1` minute.\n\n\nYou are also given a **0-indexed** integer array `travel` where `travel[i]` is the number of minutes needed to go from house `i` to house `i + 1`.\n\n\nThere are three garbage trucks in the city, each responsible for picking up one type of garbage. Each garbage truck starts at house `0` and must visit each house **in order**; however, they do **not** need to visit every house.\n\n\nOnly **one** garbage truck may be used at any given moment. While one truck is driving or picking up garbage, the other two trucks **cannot** do anything.\n\n\nReturn *the **minimum** number of minutes needed to pick up all the garbage.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** garbage = [\"G\",\"P\",\"GP\",\"GG\"], travel = [2,4,3]",
                "Output": "** 21",
                "Explanation": "**\nThe paper garbage truck:\n1. Travels from house 0 to house 1\n2. Collects the paper garbage at house 1\n3. Travels from house 1 to house 2\n4. Collects the paper garbage at house 2\nAltogether, it takes 8 minutes to pick up all the paper garbage.\nThe glass garbage truck:\n1. Collects the glass garbage at house 0\n2. Travels from house 0 to house 1\n3. Travels from house 1 to house 2\n4. Collects the glass garbage at house 2\n5. Travels from house 2 to house 3\n6. Collects the glass garbage at house 3\nAltogether, it takes 13 minutes to pick up all the glass garbage.\nSince there is no metal garbage, we do not need to consider the metal garbage truck.\nTherefore, it takes a total of 8 + 13 = 21 minutes to collect all the garbage."
            },
            {
                "Input": "** garbage = [\"MMM\",\"PGM\",\"GP\"], travel = [3,10]",
                "Output": "** 37",
                "Explanation": "**\nThe metal garbage truck takes 7 minutes to pick up all the metal garbage.\nThe paper garbage truck takes 15 minutes to pick up all the paper garbage.\nThe glass garbage truck takes 15 minutes to pick up all the glass garbage.\nIt takes a total of 7 + 15 + 15 = 37 minutes to collect all the garbage."
            }
        ]
    },
    {
        "Title": "Build a Matrix With Conditions",
        "slug": "build-a-matrix-with-conditions",
        "description": "You are given a **positive** integer `k`. You are also given:\n\n\n a 2D integer array `rowConditions` of size `n` where `rowConditions[i] = [abovei, belowi]`, and\n a 2D integer array `colConditions` of size `m` where `colConditions[i] = [lefti, righti]`.\n\n\nThe two arrays contain integers from `1` to `k`.\n\n\nYou have to build a `k x k` matrix that contains each of the numbers from `1` to `k` **exactly once**. The remaining cells should have the value `0`.\n\n\nThe matrix should also satisfy the following conditions:\n\n\n The number `abovei` should appear in a **row** that is strictly **above** the row at which the number `belowi` appears for all `i` from `0` to `n - 1`.\n The number `lefti` should appear in a **column** that is strictly **left** of the column at which the number `righti` appears for all `i` from `0` to `m - 1`.\n\n\nReturn ***any** matrix that satisfies the conditions*. If no answer exists, return an empty matrix.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Graph",
            "Topological Sort",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** k = 3, rowConditions = [[1,2],[3,2]], colConditions = [[2,1],[3,2]]",
                "Output": "** [[3,0,0],[0,0,1],[0,2,0]]",
                "Explanation": "** The diagram above shows a valid example of a matrix that satisfies all the conditions.\nThe row conditions are the following:\n- Number 1 is in row 1, and number 2 is in row 2, so 1 is above 2 in the matrix.\n- Number 3 is in row 0, and number 2 is in row 2, so 3 is above 2 in the matrix.\nThe column conditions are the following:\n- Number 2 is in column 1, and number 1 is in column 2, so 2 is left of 1 in the matrix.\n- Number 3 is in column 0, and number 2 is in column 1, so 3 is left of 2 in the matrix.\nNote that there may be multiple correct answers."
            }
        ]
    },
    {
        "Title": "Find Subarrays With Equal Sum",
        "slug": "find-subarrays-with-equal-sum",
        "description": "Given a **0-indexed** integer array `nums`, determine whether there exist **two** subarrays of length `2` with **equal** sum. Note that the two subarrays must begin at **different** indices.\n\n\nReturn `true` *if these subarrays exist, and* `false` *otherwise.\n\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** nums = [4,2,4]",
                "Output": "** true",
                "Explanation": "** The subarrays with elements [4,2] and [2,4] have the same sum of 6."
            },
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** false",
                "Explanation": "** No two subarrays of size 2 have the same sum."
            },
            {
                "Input": "** nums = [0,0,0]",
                "Output": "** true",
                "Explanation": "** The subarrays [nums[0],nums[1]] and [nums[1],nums[2]] have the same sum of 0. \nNote that even though the subarrays have the same content, the two subarrays are considered different because they are in different positions in the original array."
            }
        ]
    },
    {
        "Title": "Strictly Palindromic Number",
        "slug": "strictly-palindromic-number",
        "description": "An integer `n` is **strictly palindromic** if, for **every** base `b` between `2` and `n - 2` (**inclusive**), the string representation of the integer `n` in base `b` is **palindromic**.\n\n\nGiven an integer `n`, return `true` *if* `n` *is **strictly palindromic** and* `false` *otherwise*.\n\n\nA string is **palindromic** if it reads the same forward and backward.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Two Pointers",
            "Brainteaser"
        ],
        "examples": [
            {
                "Input": "** n = 9",
                "Output": "** false",
                "Explanation": "** In base 2: 9 = 1001 (base 2), which is palindromic.\nIn base 3: 9 = 100 (base 3), which is not palindromic.\nTherefore, 9 is not strictly palindromic so we return false.\nNote that in bases 4, 5, 6, and 7, n = 9 is also not palindromic."
            },
            {
                "Input": "** n = 4",
                "Output": "** false",
                "Explanation": "** We only consider base 2: 4 = 100 (base 2), which is not palindromic.\nTherefore, we return false."
            }
        ]
    },
    {
        "Title": "Maximum Rows Covered by Columns",
        "slug": "maximum-rows-covered-by-columns",
        "description": "You are given a **0-indexed** `m x n` binary matrix `matrix` and an integer `numSelect`, which denotes the number of **distinct** columns you must select from `matrix`.\n\n\nLet us consider `s = {c1, c2, ...., cnumSelect}` as the set of columns selected by you. A row `row` is **covered** by `s` if:\n\n\n For each cell `matrix[row][col]` (`0 <= col <= n - 1`) where `matrix[row][col] == 1`, `col` is present in `s` or,\n **No cell** in `row` has a value of `1`.\n\n\nYou need to choose `numSelect` columns such that the number of rows that are covered is **maximized**.\n\n\nReturn *the **maximum** number of rows that can be **covered** by a set of* `numSelect` *columns.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Backtracking",
            "Bit Manipulation",
            "Matrix",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** matrix = [[0,0,0],[1,0,1],[0,1,1],[0,0,1]], numSelect = 2",
                "Output": "** 3",
                "Explanation": "** One possible way to cover 3 rows is shown in the diagram above.\nWe choose s = {0, 2}.\n- Row 0 is covered because it has no occurrences of 1.\n- Row 1 is covered because the columns with value 1, i.e. 0 and 2 are present in s.\n- Row 2 is not covered because matrix[2][1] == 1 but 1 is not present in s.\n- Row 3 is covered because matrix[2][2] == 1 and 2 is present in s.\nThus, we can cover three rows.\nNote that s = {1, 2} will also cover 3 rows, but it can be shown that no more than three rows can be covered."
            },
            {
                "Input": "** matrix = [[1],[0]], numSelect = 1",
                "Output": "** 2",
                "Explanation": "** Selecting the only column will result in both rows being covered since the entire matrix is selected.\nTherefore, we return 2."
            }
        ]
    },
    {
        "Title": "Maximum Number of Robots Within Budget",
        "slug": "maximum-number-of-robots-within-budget",
        "description": "You have `n` robots. You are given two **0-indexed** integer arrays, `chargeTimes` and `runningCosts`, both of length `n`. The `ith` robot costs `chargeTimes[i]` units to charge and costs `runningCosts[i]` units to run. You are also given an integer `budget`.\n\n\nThe **total cost** of running `k` chosen robots is equal to `max(chargeTimes) + k * sum(runningCosts)`, where `max(chargeTimes)` is the largest charge cost among the `k` robots and `sum(runningCosts)` is the sum of running costs among the `k` robots.\n\n\nReturn *the **maximum** number of **consecutive** robots you can run such that the total cost **does not** exceed* `budget`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Queue",
            "Sliding Window",
            "Heap (Priority Queue)",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** chargeTimes = [3,6,1,3,4], runningCosts = [2,1,3,4,5], budget = 25",
                "Output": "** 3",
                "Explanation": "** \nIt is possible to run all individual and consecutive pairs of robots within budget.\nTo obtain answer 3, consider the first 3 robots. The total cost will be max(3,6,1) + 3 * sum(2,1,3) = 6 + 3 * 6 = 24 which is less than 25.\nIt can be shown that it is not possible to run more than 3 consecutive robots within budget, so we return 3."
            },
            {
                "Input": "** chargeTimes = [11,12,19], runningCosts = [10,8,7], budget = 19",
                "Output": "** 0",
                "Explanation": "** No robot can be run that does not exceed the budget, so we return 0."
            }
        ]
    },
    {
        "Title": "Check Distances Between Same Letters",
        "slug": "check-distances-between-same-letters",
        "description": "You are given a **0-indexed** string `s` consisting of only lowercase English letters, where each letter in `s` appears **exactly** **twice**. You are also given a **0-indexed** integer array `distance` of length `26`.\n\n\nEach letter in the alphabet is numbered from `0` to `25` (i.e. `'a' -> 0`, `'b' -> 1`, `'c' -> 2`, ... , `'z' -> 25`).\n\n\nIn a **well-spaced** string, the number of letters between the two occurrences of the `ith` letter is `distance[i]`. If the `ith` letter does not appear in `s`, then `distance[i]` can be **ignored**.\n\n\nReturn `true` *if* `s` *is a **well-spaced** string, otherwise return* `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"abaccb\", distance = [1,3,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                "Output": "** true",
                "Explanation": "**\n- 'a' appears at indices 0 and 2 so it satisfies distance[0] = 1.\n- 'b' appears at indices 1 and 5 so it satisfies distance[1] = 3.\n- 'c' appears at indices 3 and 4 so it satisfies distance[2] = 0.\nNote that distance[3] = 5, but since 'd' does not appear in s, it can be ignored.\nReturn true because s is a well-spaced string."
            },
            {
                "Input": "** s = \"aa\", distance = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                "Output": "** false",
                "Explanation": "**\n- 'a' appears at indices 0 and 1 so there are zero letters between them.\nBecause distance[0] = 1, s is not a well-spaced string."
            }
        ]
    },
    {
        "Title": "Number of Ways to Reach a Position After Exactly k Steps",
        "slug": "number-of-ways-to-reach-a-position-after-exactly-k-steps",
        "description": "You are given two **positive** integers `startPos` and `endPos`. Initially, you are standing at position `startPos` on an **infinite** number line. With one step, you can move either one position to the left, or one position to the right.\n\n\nGiven a positive integer `k`, return *the number of **different** ways to reach the position* `endPos` *starting from* `startPos`*, such that you perform **exactly*** `k` *steps*. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\nTwo ways are considered different if the order of the steps made is not exactly the same.\n\n\nNote** that the number line includes negative integers.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Combinatorics"
        ],
        "examples": [
            {
                "Input": "** startPos = 1, endPos = 2, k = 3",
                "Output": "** 3",
                "Explanation": "** We can reach position 2 from 1 in exactly 3 steps in three ways:\n- 1 -> 2 -> 3 -> 2.\n- 1 -> 2 -> 1 -> 2.\n- 1 -> 0 -> 1 -> 2.\nIt can be proven that no other way is possible, so we return 3."
            },
            {
                "Input": "** startPos = 2, endPos = 5, k = 10",
                "Output": "** 0",
                "Explanation": "** It is impossible to reach position 5 from position 2 in exactly 10 steps."
            }
        ]
    },
    {
        "Title": "Longest Nice Subarray",
        "slug": "longest-nice-subarray",
        "description": "You are given an array `nums` consisting of **positive** integers.\n\n\nWe call a subarray of `nums` **nice** if the bitwise **AND** of every pair of elements that are in **different** positions in the subarray is equal to `0`.\n\n\nReturn *the length of the **longest** nice subarray*.\n\n\nA **subarray** is a **contiguous** part of an array.\n\n\nNote** that subarrays of length `1` are always considered nice.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Bit Manipulation",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,8,48,10]",
                "Output": "** 3",
                "Explanation": "** The longest nice subarray is [3,8,48]. This subarray satisfies the conditions:\n- 3 AND 8 = 0.\n- 3 AND 48 = 0.\n- 8 AND 48 = 0.\nIt can be proven that no longer nice subarray can be obtained, so we return 3."
            },
            {
                "Input": "** nums = [3,1,5,11,13]",
                "Output": "** 1",
                "Explanation": "** The length of the longest nice subarray is 1. Any subarray of length 1 can be chosen."
            }
        ]
    },
    {
        "Title": "Meeting Rooms III",
        "slug": "meeting-rooms-iii",
        "description": "You are given an integer `n`. There are `n` rooms numbered from `0` to `n - 1`.\n\n\nYou are given a 2D integer array `meetings` where `meetings[i] = [starti, endi]` means that a meeting will be held during the **half-closed** time interval `[starti, endi)`. All the values of `starti` are **unique**.\n\n\nMeetings are allocated to rooms in the following manner:\n\n\n1. Each meeting will take place in the unused room with the **lowest** number.\n2. If there are no available rooms, the meeting will be delayed until a room becomes free. The delayed meeting should have the **same** duration as the original meeting.\n3. When a room becomes unused, meetings that have an earlier original **start** time should be given the room.\n\n\nReturn *the **number** of the room that held the most meetings.* If there are multiple rooms, return *the room with the **lowest** number.\n\n\nA **half-closed interval** `[a, b)` is the interval between `a` and `b` **including** `a` and **not including** `b`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Heap (Priority Queue)",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** n = 2, meetings = [[0,10],[1,5],[2,7],[3,4]]",
                "Output": "** 0",
                "Explanation": "**\n- At time 0, both rooms are not being used. The first meeting starts in room 0.\n- At time 1, only room 1 is not being used. The second meeting starts in room 1.\n- At time 2, both rooms are being used. The third meeting is delayed.\n- At time 3, both rooms are being used. The fourth meeting is delayed.\n- At time 5, the meeting in room 1 finishes. The third meeting starts in room 1 for the time period [5,10).\n- At time 10, the meetings in both rooms finish. The fourth meeting starts in room 0 for the time period [10,11).\nBoth rooms 0 and 1 held 2 meetings, so we return 0."
            },
            {
                "Input": "** n = 3, meetings = [[1,20],[2,10],[3,5],[4,9],[6,8]]",
                "Output": "** 1",
                "Explanation": "**\n- At time 1, all three rooms are not being used. The first meeting starts in room 0.\n- At time 2, rooms 1 and 2 are not being used. The second meeting starts in room 1.\n- At time 3, only room 2 is not being used. The third meeting starts in room 2.\n- At time 4, all three rooms are being used. The fourth meeting is delayed.\n- At time 5, the meeting in room 2 finishes. The fourth meeting starts in room 2 for the time period [5,10).\n- At time 6, all three rooms are being used. The fifth meeting is delayed.\n- At time 10, the meetings in rooms 1 and 2 finish. The fifth meeting starts in room 1 for the time period [10,12).\nRoom 0 held 1 meeting while rooms 1 and 2 each held 2 meetings, so we return 1."
            }
        ]
    },
    {
        "Title": "Most Frequent Even Element",
        "slug": "most-frequent-even-element",
        "description": "Given an integer array `nums`, return *the most frequent even element*.\n\n\nIf there is a tie, return the **smallest** one. If there is no such element, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [0,1,2,2,4,4,1]",
                "Output": "** 2",
                "Explanation": "**\nThe even elements are 0, 2, and 4. Of these, 2 and 4 appear the most.\nWe return the smallest one, which is 2."
            },
            {
                "Input": "** nums = [4,4,4,9,2,4]",
                "Output": "** 4",
                "Explanation": "** 4 is the even element appears the most."
            },
            {
                "Input": "** nums = [29,47,21,41,13,37,25,7]",
                "Output": "** -1",
                "Explanation": "** There is no even element."
            }
        ]
    },
    {
        "Title": "Optimal Partition of String",
        "slug": "optimal-partition-of-string",
        "description": "Given a string `s`, partition the string into one or more **substrings** such that the characters in each substring are **unique**. That is, no letter appears in a single substring more than **once**.\n\n\nReturn *the **minimum** number of substrings in such a partition.\n\n\nNote that each character should belong to exactly one substring in a partition.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"abacaba\"",
                "Output": "** 4",
                "Explanation": "**\nTwo possible partitions are (\"a\",\"ba\",\"cab\",\"a\") and (\"ab\",\"a\",\"ca\",\"ba\").\nIt can be shown that 4 is the minimum number of substrings needed."
            },
            {
                "Input": "** s = \"ssssss\"",
                "Output": "** 6",
                "Explanation": "**The only valid partition is (\"s\",\"s\",\"s\",\"s\",\"s\",\"s\")."
            }
        ]
    },
    {
        "Title": "Divide Intervals Into Minimum Number of Groups",
        "slug": "divide-intervals-into-minimum-number-of-groups",
        "description": "You are given a 2D integer array `intervals` where `intervals[i] = [lefti, righti]` represents the **inclusive** interval `[lefti, righti]`.\n\n\nYou have to divide the intervals into one or more **groups** such that each interval is in **exactly** one group, and no two intervals that are in the same group **intersect** each other.\n\n\nReturn *the **minimum** number of groups you need to make*.\n\n\nTwo intervals **intersect** if there is at least one common number between them. For example, the intervals `[1, 5]` and `[5, 8]` intersect.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** intervals = [[5,10],[6,8],[1,5],[2,3],[1,10]]",
                "Output": "** 3",
                "Explanation": "** We can divide the intervals into the following groups:\n- Group 1: [1, 5], [6, 8].\n- Group 2: [2, 3], [5, 10].\n- Group 3: [1, 10].\nIt can be proven that it is not possible to divide the intervals into fewer than 3 groups."
            },
            {
                "Input": "** intervals = [[1,3],[5,6],[8,10],[11,13]]",
                "Output": "** 1",
                "Explanation": "** None of the intervals overlap, so we can put all of them in one group."
            }
        ]
    },
    {
        "Title": "Longest Increasing Subsequence II",
        "slug": "longest-increasing-subsequence-ii",
        "description": "You are given an integer array `nums` and an integer `k`.\n\n\nFind the longest subsequence of `nums` that meets the following requirements:\n\n\n The subsequence is **strictly increasing** and\n The difference between adjacent elements in the subsequence is **at most** `k`.\n\n\nReturn *the length of the **longest** **subsequence** that meets the requirements.\n\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Divide and Conquer",
            "Dynamic Programming",
            "Binary Indexed Tree",
            "Segment Tree",
            "Queue",
            "Monotonic Queue"
        ],
        "examples": [
            {
                "Input": "** nums = [4,2,1,4,3,4,5,8,15], k = 3",
                "Output": "** 5",
                "Explanation": "**\nThe longest subsequence that meets the requirements is [1,3,4,5,8].\nThe subsequence has a length of 5, so we return 5.\nNote that the subsequence [1,3,4,5,8,15] does not meet the requirements because 15 - 8 = 7 is larger than 3."
            },
            {
                "Input": "** nums = [7,4,5,1,8,12,4,7], k = 5",
                "Output": "** 4",
                "Explanation": "**\nThe longest subsequence that meets the requirements is [4,5,8,12].\nThe subsequence has a length of 4, so we return 4."
            },
            {
                "Input": "** nums = [1,5], k = 1",
                "Output": "** 1",
                "Explanation": "**\nThe longest subsequence that meets the requirements is [1].\nThe subsequence has a length of 1, so we return 1."
            }
        ]
    },
    {
        "Title": "Count Days Spent Together",
        "slug": "count-days-spent-together",
        "description": "Alice and Bob are traveling to Rome for separate business meetings.\n\n\nYou are given 4 strings `arriveAlice`, `leaveAlice`, `arriveBob`, and `leaveBob`. Alice will be in the city from the dates `arriveAlice` to `leaveAlice` (**inclusive**), while Bob will be in the city from the dates `arriveBob` to `leaveBob` (**inclusive**). Each will be a 5-character string in the format `\"MM-DD\"`, corresponding to the month and day of the date.\n\n\nReturn *the total number of days that Alice and Bob are in Rome together.\n\n\nYou can assume that all dates occur in the **same** calendar year, which is **not** a leap year. Note that the number of days per month can be represented as: `[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "String"
        ],
        "examples": [
            {
                "Input": "** arriveAlice = \"08-15\", leaveAlice = \"08-18\", arriveBob = \"08-16\", leaveBob = \"08-19\"",
                "Output": "** 3",
                "Explanation": "** Alice will be in Rome from August 15 to August 18. Bob will be in Rome from August 16 to August 19. They are both in Rome together on August 16th, 17th, and 18th, so the answer is 3."
            },
            {
                "Input": "** arriveAlice = \"10-01\", leaveAlice = \"10-31\", arriveBob = \"11-01\", leaveBob = \"12-31\"",
                "Output": "** 0",
                "Explanation": "** There is no day when Alice and Bob are in Rome together, so we return 0."
            }
        ]
    },
    {
        "Title": "Maximum Matching of Players With Trainers",
        "slug": "maximum-matching-of-players-with-trainers",
        "description": "You are given a **0-indexed** integer array `players`, where `players[i]` represents the **ability** of the `ith` player. You are also given a **0-indexed** integer array `trainers`, where `trainers[j]` represents the **training capacity** of the `jth` trainer.\n\n\nThe `ith` player can **match** with the `jth` trainer if the player's ability is **less than or equal to** the trainer's training capacity. Additionally, the `ith` player can be matched with at most one trainer, and the `jth` trainer can be matched with at most one player.\n\n\nReturn *the **maximum** number of matchings between* `players` *and* `trainers` *that satisfy these conditions.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** players = [4,7,9], trainers = [8,2,5,8]",
                "Output": "** 2",
                "Explanation": "**\nOne of the ways we can form two matchings is as follows:\n- players[0] can be matched with trainers[0] since 4 <= 8.\n- players[1] can be matched with trainers[3] since 7 <= 8.\nIt can be proven that 2 is the maximum number of matchings that can be formed."
            },
            {
                "Input": "** players = [1,1,1], trainers = [10]",
                "Output": "** 1",
                "Explanation": "**\nThe trainer can be matched with any of the 3 players.\nEach player can only be matched with one trainer, so the maximum answer is 1."
            }
        ]
    },
    {
        "Title": "Smallest Subarrays With Maximum Bitwise OR",
        "slug": "smallest-subarrays-with-maximum-bitwise-or",
        "description": "You are given a **0-indexed** array `nums` of length `n`, consisting of non-negative integers. For each index `i` from `0` to `n - 1`, you must determine the size of the **minimum sized** non-empty subarray of `nums` starting at `i` (**inclusive**) that has the **maximum** possible **bitwise OR**.\n\n\n In other words, let `Bij` be the bitwise OR of the subarray `nums[i...j]`. You need to find the smallest subarray starting at `i`, such that bitwise OR of this subarray is equal to `max(Bik)` where `i <= k <= n - 1`.\n\n\nThe bitwise OR of an array is the bitwise OR of all the numbers in it.\n\n\nReturn *an integer array* `answer` *of size* `n` *where* `answer[i]` *is the length of the **minimum** sized subarray starting at* `i` *with **maximum** bitwise OR.\n\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Bit Manipulation",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [1,0,2,1,3]",
                "Output": "** [3,3,2,2,1]",
                "Explanation": "**\nThe maximum possible bitwise OR starting at any index is 3. \n- Starting at index 0, the shortest subarray that yields it is [1,0,2].\n- Starting at index 1, the shortest subarray that yields the maximum bitwise OR is [0,2,1].\n- Starting at index 2, the shortest subarray that yields the maximum bitwise OR is [2,1].\n- Starting at index 3, the shortest subarray that yields the maximum bitwise OR is [1,3].\n- Starting at index 4, the shortest subarray that yields the maximum bitwise OR is [3].\nTherefore, we return [3,3,2,2,1]."
            },
            {
                "Input": "** nums = [1,2]",
                "Output": "** [2,1]",
                "Explanation": "**Starting at index 0, the shortest subarray that yields the maximum bitwise OR is of length 2.\nStarting at index 1, the shortest subarray that yields the maximum bitwise OR is of length 1.\nTherefore, we return [2,1]."
            }
        ]
    },
    {
        "Title": "Minimum Money Required Before Transactions",
        "slug": "minimum-money-required-before-transactions",
        "description": "You are given a **0-indexed** 2D integer array `transactions`, where `transactions[i] = [costi, cashbacki]`.\n\n\nThe array describes transactions, where each transaction must be completed exactly once in **some order**. At any given moment, you have a certain amount of `money`. In order to complete transaction `i`, `money >= costi` must hold true. After performing a transaction, `money` becomes `money - costi + cashbacki`.\n\n\nReturn *the minimum amount of* `money` *required before any transaction so that all of the transactions can be completed **regardless of the order** of the transactions.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** transactions = [[2,1],[5,0],[4,2]]",
                "Output": "** 10",
                "Explanation": "**Starting with money = 10, the transactions can be performed in any order.\nIt can be shown that starting with money < 10 will fail to complete all transactions in some order."
            },
            {
                "Input": "** transactions = [[3,0],[0,3]]",
                "Output": "** 3",
                "Explanation": "**\n- If transactions are in the order [[3,0],[0,3]], the minimum money required to complete the transactions is 3.\n- If transactions are in the order [[0,3],[3,0]], the minimum money required to complete the transactions is 0.\nThus, starting with money = 3, the transactions can be performed in any order."
            }
        ]
    },
    {
        "Title": "Smallest Even Multiple",
        "slug": "smallest-even-multiple",
        "description": "Given a **positive** integer `n`, return *the smallest positive integer that is a multiple of **both*** `2` *and* `n`.\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** n = 5",
                "Output": "** 10",
                "Explanation": "** The smallest multiple of both 5 and 2 is 10."
            },
            {
                "Input": "** n = 6",
                "Output": "** 6",
                "Explanation": "** The smallest multiple of both 6 and 2 is 6. Note that a number is a multiple of itself."
            }
        ]
    },
    {
        "Title": "Length of the Longest Alphabetical Continuous Substring",
        "slug": "length-of-the-longest-alphabetical-continuous-substring",
        "description": "An **alphabetical continuous string** is a string consisting of consecutive letters in the alphabet. In other words, it is any substring of the string `\"abcdefghijklmnopqrstuvwxyz\"`.\n\n\n For example, `\"abc\"` is an alphabetical continuous string, while `\"acb\"` and `\"za\"` are not.\n\n\nGiven a string `s` consisting of lowercase letters only, return the *length of the **longest** alphabetical continuous substring.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"abacaba\"",
                "Output": "** 2",
                "Explanation": "** There are 4 distinct continuous substrings: \"a\", \"b\", \"c\" and \"ab\".\n\"ab\" is the longest continuous substring."
            },
            {
                "Input": "** s = \"abcde\"",
                "Output": "** 5",
                "Explanation": "** \"abcde\" is the longest continuous substring."
            }
        ]
    },
    {
        "Title": "Reverse Odd Levels of Binary Tree",
        "slug": "reverse-odd-levels-of-binary-tree",
        "description": "Given the `root` of a **perfect** binary tree, reverse the node values at each **odd** level of the tree.\n\n\n For example, suppose the node values at level 3 are `[2,1,3,4,7,11,29,18]`, then it should become `[18,29,11,7,4,3,1,2]`.\n\n\nReturn *the root of the reversed tree*.\n\n\nA binary tree is **perfect** if all parent nodes have two children and all leaves are on the same level.\n\n\nThe **level** of a node is the number of edges along the path between it and the root node.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [2,3,5,8,13,21,34]",
                "Output": "** [2,5,3,8,13,21,34]",
                "Explanation": "** \nThe tree has only one odd level.\nThe nodes at level 1 are 3, 5 respectively, which are reversed and become 5, 3."
            },
            {
                "Input": "** root = [7,13,11]",
                "Output": "** [7,11,13]",
                "Explanation": "** \nThe nodes at level 1 are 13, 11, which are reversed and become 11, 13."
            }
        ]
    },
    {
        "Title": "Sum of Prefix Scores of Strings",
        "slug": "sum-of-prefix-scores-of-strings",
        "description": "You are given an array `words` of size `n` consisting of **non-empty** strings.\n\n\nWe define the **score** of a string `word` as the **number** of strings `words[i]` such that `word` is a **prefix** of `words[i]`.\n\n\n For example, if `words = [\"a\", \"ab\", \"abc\", \"cab\"]`, then the score of `\"ab\"` is `2`, since `\"ab\"` is a prefix of both `\"ab\"` and `\"abc\"`.\n\n\nReturn *an array* `answer` *of size* `n` *where* `answer[i]` *is the **sum** of scores of every **non-empty** prefix of* `words[i]`.\n\n\nNote** that a string is considered as a prefix of itself.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "String",
            "Trie",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** words = [\"abc\",\"ab\",\"bc\",\"b\"]",
                "Output": "** [5,4,3,2]",
                "Explanation": "** The answer for each string is the following:\n- \"abc\" has 3 prefixes: \"a\", \"ab\", and \"abc\".\n- There are 2 strings with the prefix \"a\", 2 strings with the prefix \"ab\", and 1 string with the prefix \"abc\".\nThe total is answer[0] = 2 + 2 + 1 = 5.\n- \"ab\" has 2 prefixes: \"a\" and \"ab\".\n- There are 2 strings with the prefix \"a\", and 2 strings with the prefix \"ab\".\nThe total is answer[1] = 2 + 2 = 4.\n- \"bc\" has 2 prefixes: \"b\" and \"bc\".\n- There are 2 strings with the prefix \"b\", and 1 string with the prefix \"bc\".\nThe total is answer[2] = 2 + 1 = 3.\n- \"b\" has 1 prefix: \"b\".\n- There are 2 strings with the prefix \"b\".\nThe total is answer[3] = 2."
            },
            {
                "Input": "** words = [\"abcd\"]",
                "Output": "** [4]",
                "Explanation": "**\n\"abcd\" has 4 prefixes: \"a\", \"ab\", \"abc\", and \"abcd\".\nEach prefix has a score of one, so the total is answer[0] = 1 + 1 + 1 + 1 = 4."
            }
        ]
    },
    {
        "Title": "Sort the People",
        "slug": "sort-the-people",
        "description": "You are given an array of strings `names`, and an array `heights` that consists of **distinct** positive integers. Both arrays are of length `n`.\n\n\nFor each index `i`, `names[i]` and `heights[i]` denote the name and height of the `ith` person.\n\n\nReturn `names` *sorted in **descending** order by the people's heights*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** names = [\"Mary\",\"John\",\"Emma\"], heights = [180,165,170]",
                "Output": "** [\"Mary\",\"Emma\",\"John\"]",
                "Explanation": "** Mary is the tallest, followed by Emma and John."
            },
            {
                "Input": "** names = [\"Alice\",\"Bob\",\"Bob\"], heights = [155,185,150]",
                "Output": "** [\"Bob\",\"Alice\",\"Bob\"]",
                "Explanation": "** The first Bob is the tallest, followed by Alice and the second Bob."
            }
        ]
    },
    {
        "Title": "Longest Subarray With Maximum Bitwise AND",
        "slug": "longest-subarray-with-maximum-bitwise-and",
        "description": "You are given an integer array `nums` of size `n`.\n\n\nConsider a **non-empty** subarray from `nums` that has the **maximum** possible **bitwise AND**.\n\n\n In other words, let `k` be the maximum value of the bitwise AND of **any** subarray of `nums`. Then, only subarrays with a bitwise AND equal to `k` should be considered.\n\n\nReturn *the length of the **longest** such subarray*.\n\n\nThe bitwise AND of an array is the bitwise AND of all the numbers in it.\n\n\nA **subarray** is a contiguous sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Bit Manipulation",
            "Brainteaser"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,3,2,2]",
                "Output": "** 2",
                "Explanation": "**\nThe maximum possible bitwise AND of a subarray is 3.\nThe longest subarray with that value is [3,3], so we return 2."
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 1",
                "Explanation": "**\nThe maximum possible bitwise AND of a subarray is 4.\nThe longest subarray with that value is [4], so we return 1."
            }
        ]
    },
    {
        "Title": "Find All Good Indices",
        "slug": "find-all-good-indices",
        "description": "You are given a **0-indexed** integer array `nums` of size `n` and a positive integer `k`.\n\n\nWe call an index `i` in the range `k <= i < n - k` **good** if the following conditions are satisfied:\n\n\n The `k` elements that are just **before** the index `i` are in **non-increasing** order.\n The `k` elements that are just **after** the index `i` are in **non-decreasing** order.\n\n\nReturn *an array of all good indices sorted in **increasing** order*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [2,1,1,1,3,4,1], k = 2",
                "Output": "** [2,3]",
                "Explanation": "** There are two good indices in the array:\n- Index 2. The subarray [2,1] is in non-increasing order, and the subarray [1,3] is in non-decreasing order.\n- Index 3. The subarray [1,1] is in non-increasing order, and the subarray [3,4] is in non-decreasing order.\nNote that the index 4 is not good because [4,1] is not non-decreasing."
            },
            {
                "Input": "** nums = [2,1,1,2], k = 2",
                "Output": "** []",
                "Explanation": "** There are no good indices in this array."
            }
        ]
    },
    {
        "Title": "Number of Good Paths",
        "slug": "number-of-good-paths",
        "description": "There is a tree (i.e. a connected, undirected graph with no cycles) consisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1` edges.\n\n\nYou are given a **0-indexed** integer array `vals` of length `n` where `vals[i]` denotes the value of the `ith` node. You are also given a 2D integer array `edges` where `edges[i] = [ai, bi]` denotes that there exists an **undirected** edge connecting nodes `ai` and `bi`.\n\n\nA **good path** is a simple path that satisfies the following conditions:\n\n\n1. The starting node and the ending node have the **same** value.\n2. All nodes between the starting node and the ending node have values **less than or equal to** the starting node (i.e. the starting node's value should be the maximum value along the path).\n\n\nReturn *the number of distinct good paths*.\n\n\nNote that a path and its reverse are counted as the **same** path. For example, `0 -> 1` is considered to be the same as `1 -> 0`. A single node is also considered as a valid path.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Tree",
            "Union Find",
            "Graph",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** vals = [1,3,2,1,3], edges = [[0,1],[0,2],[2,3],[2,4]]",
                "Output": "** 6",
                "Explanation": "** There are 5 good paths consisting of a single node.\nThere is 1 additional good path: 1 -> 0 -> 2 -> 4.\n(The reverse path 4 -> 2 -> 0 -> 1 is treated as the same as 1 -> 0 -> 2 -> 4.)\nNote that 0 -> 2 -> 3 is not a good path because vals[2] > vals[0]."
            },
            {
                "Input": "** vals = [1,1,2,2,3], edges = [[0,1],[1,2],[2,3],[2,4]]",
                "Output": "** 7",
                "Explanation": "** There are 5 good paths consisting of a single node.\nThere are 2 additional good paths: 0 -> 1 and 2 -> 3."
            },
            {
                "Input": "** vals = [1], edges = []",
                "Output": "** 1",
                "Explanation": "** The tree consists of only one node, so there is one good path."
            }
        ]
    },
    {
        "Title": "Remove Letter To Equalize Frequency",
        "slug": "remove-letter-to-equalize-frequency",
        "description": "You are given a **0-indexed** string `word`, consisting of lowercase English letters. You need to select **one** index and **remove** the letter at that index from `word` so that the **frequency** of every letter present in `word` is equal.\n\n\nReturn`true` *if it is possible to remove one letter so that the frequency of all letters in* `word` *are equal, and* `false` *otherwise*.\n\n\nNote:\n\n\n The **frequency** of a letter `x` is the number of times it occurs in the string.\n You **must** remove exactly one letter and cannot choose to do nothing.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** word = \"abcc\"",
                "Output": "** true",
                "Explanation": "** Select index 3 and delete it: word becomes \"abc\" and each character has a frequency of 1."
            },
            {
                "Input": "** word = \"aazz\"",
                "Output": "** false",
                "Explanation": "** We must delete a character, so either the frequency of \"a\" is 1 and the frequency of \"z\" is 2, or vice versa. It is impossible to make all present letters have equal frequency."
            }
        ]
    },
    {
        "Title": "Longest Uploaded Prefix",
        "slug": "longest-uploaded-prefix",
        "description": "You are given a stream of `n` videos, each represented by a **distinct** number from `1` to `n` that you need to \"upload\" to a server. You need to implement a data structure that calculates the length of the **longest uploaded prefix** at various points in the upload process.\n\n\nWe consider `i` to be an uploaded prefix if all videos in the range `1` to `i` (**inclusive**) have been uploaded to the server. The longest uploaded prefix is the **maximum** value of `i` that satisfies this definition.  \n\n  \n\nImplement the `LUPrefix` class:\n\n\n `LUPrefix(int n)` Initializes the object for a stream of `n` videos.\n `void upload(int video)` Uploads `video` to the server.\n `int longest()` Returns the length of the **longest uploaded prefix** defined above.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Binary Search",
            "Union Find",
            "Design",
            "Binary Indexed Tree",
            "Segment Tree",
            "Heap (Priority Queue)",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "[\"LUPrefix\", \"upload\", \"longest\", \"upload\", \"longest\", \"upload\", \"longest\"]\n[[4], [3], [], [1], [], [2], []]",
                "Output": "[null, null, 0, null, 1, null, 3]",
                "Explanation": "LUPrefix server = new LUPrefix(4);   // Initialize a stream of 4 videos.\nserver.upload(3);                    // Upload video 3.\nserver.longest();                    // Since video 1 has not been uploaded yet, there is no prefix.\n                                     // So, we return 0.\nserver.upload(1);                    // Upload video 1.\nserver.longest();                    // The prefix [1] is the longest uploaded prefix, so we return 1.\nserver.upload(2);                    // Upload video 2.\nserver.longest();                    // The prefix [1,2,3] is the longest uploaded prefix, so we return 3."
            }
        ]
    },
    {
        "Title": "Bitwise XOR of All Pairings",
        "slug": "bitwise-xor-of-all-pairings",
        "description": "You are given two **0-indexed** arrays, `nums1` and `nums2`, consisting of non-negative integers. There exists another array, `nums3`, which contains the bitwise XOR of **all pairings** of integers between `nums1` and `nums2` (every integer in `nums1` is paired with every integer in `nums2` **exactly once**).\n\n\nReturn *the **bitwise XOR** of all integers in* `nums3`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Bit Manipulation",
            "Brainteaser"
        ],
        "examples": [
            {
                "Input": "** nums1 = [2,1,3], nums2 = [10,2,5,0]",
                "Output": "** 13",
                "Explanation": "**\nA possible nums3 array is [8,0,7,2,11,3,4,1,9,1,6,3].\nThe bitwise XOR of all these numbers is 13, so we return 13."
            },
            {
                "Input": "** nums1 = [1,2], nums2 = [3,4]",
                "Output": "** 0",
                "Explanation": "**\nAll possible pairs of bitwise XORs are nums1[0] ^ nums2[0], nums1[0] ^ nums2[1], nums1[1] ^ nums2[0],\nand nums1[1] ^ nums2[1].\nThus, one possible nums3 array is [2,5,1,6].\n2 ^ 5 ^ 1 ^ 6 = 0, so we return 0."
            }
        ]
    },
    {
        "Title": "Number of Pairs Satisfying Inequality",
        "slug": "number-of-pairs-satisfying-inequality",
        "description": "You are given two **0-indexed** integer arrays `nums1` and `nums2`, each of size `n`, and an integer `diff`. Find the number of **pairs** `(i, j)` such that:\n\n\n `0 <= i < j <= n - 1` **and\n `nums1[i] - nums1[j] <= nums2[i] - nums2[j] + diff`.\n\n\nReturn *the **number of pairs** that satisfy the conditions.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Divide and Conquer",
            "Binary Indexed Tree",
            "Segment Tree",
            "Merge Sort",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** nums1 = [3,2,5], nums2 = [2,2,1], diff = 1",
                "Output": "** 3",
                "Explanation": "**\nThere are 3 pairs that satisfy the conditions:\n1. i = 0, j = 1: 3 - 2 <= 2 - 2 + 1. Since i < j and 1 <= 1, this pair satisfies the conditions.\n2. i = 0, j = 2: 3 - 5 <= 2 - 1 + 1. Since i < j and -2 <= 2, this pair satisfies the conditions.\n3. i = 1, j = 2: 2 - 5 <= 2 - 1 + 1. Since i < j and -3 <= 2, this pair satisfies the conditions.\nTherefore, we return 3."
            },
            {
                "Input": "** nums1 = [3,-1], nums2 = [-2,2], diff = -1",
                "Output": "** 0",
                "Explanation": "**\nSince there does not exist any pair that satisfies the conditions, we return 0."
            }
        ]
    },
    {
        "Title": "Number of Common Factors",
        "slug": "number-of-common-factors",
        "description": "Given two positive integers `a` and `b`, return *the number of **common** factors of* `a` *and* `b`.\n\n\nAn integer `x` is a **common factor** of `a` and `b` if `x` divides both `a` and `b`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Enumeration",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** a = 12, b = 6",
                "Output": "** 4",
                "Explanation": "** The common factors of 12 and 6 are 1, 2, 3, 6."
            },
            {
                "Input": "** a = 25, b = 30",
                "Output": "** 2",
                "Explanation": "** The common factors of 25 and 30 are 1, 5."
            }
        ]
    },
    {
        "Title": "Maximum Sum of an Hourglass",
        "slug": "maximum-sum-of-an-hourglass",
        "description": "You are given an `m x n` integer matrix `grid`.\n\n\nWe define an **hourglass** as a part of the matrix with the following form:\n\n\n![](https://assets.leetcode.com/uploads/2022/08/21/img.jpg)\nReturn *the **maximum** sum of the elements of an hourglass*.\n\n\nNote** that an hourglass cannot be rotated and must be entirely contained within the matrix.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** grid = [[6,2,1,3],[4,2,1,5],[9,2,8,7],[4,1,2,9]]",
                "Output": "** 30",
                "Explanation": "** The cells shown above represent the hourglass with the maximum sum: 6 + 2 + 1 + 2 + 9 + 2 + 8 = 30."
            },
            {
                "Input": "** grid = [[1,2,3],[4,5,6],[7,8,9]]",
                "Output": "** 35",
                "Explanation": "** There is only one hourglass in the matrix, with the sum: 1 + 2 + 3 + 5 + 7 + 8 + 9 = 35."
            }
        ]
    },
    {
        "Title": "Minimize XOR",
        "slug": "minimize-xor",
        "description": "Given two positive integers `num1` and `num2`, find the positive integer `x` such that:\n\n\n `x` has the same number of set bits as `num2`, and\n The value `x XOR num1` is **minimal**.\n\n\nNote that `XOR` is the bitwise XOR operation.\n\n\nReturn *the integer* `x`. The test cases are generated such that `x` is **uniquely determined**.\n\n\nThe number of **set bits** of an integer is the number of `1`'s in its binary representation.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Greedy",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** num1 = 3, num2 = 5",
                "Output": "** 3",
                "Explanation": "**\nThe binary representations of num1 and num2 are 0011 and 0101, respectively.\nThe integer **3** has the same number of set bits as num2, and the value 3 XOR 3 = 0 is minimal."
            },
            {
                "Input": "** num1 = 1, num2 = 12",
                "Output": "** 3",
                "Explanation": "**\nThe binary representations of num1 and num2 are 0001 and 1100, respectively.\nThe integer **3** has the same number of set bits as num2, and the value 3 XOR 1 = 2 is minimal."
            }
        ]
    },
    {
        "Title": "Maximum Deletions on a String",
        "slug": "maximum-deletions-on-a-string",
        "description": "You are given a string `s` consisting of only lowercase English letters. In one operation, you can:\n\n\n Delete **the entire string** `s`, or\n Delete the **first** `i` letters of `s` if the first `i` letters of `s` are **equal** to the following `i` letters in `s`, for any `i` in the range `1 <= i <= s.length / 2`.\n\n\nFor example, if `s = \"ababc\"`, then in one operation, you could delete the first two letters of `s` to get `\"abc\"`, since the first two letters of `s` and the following two letters of `s` are both equal to `\"ab\"`.\n\n\nReturn *the **maximum** number of operations needed to delete all of* `s`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Rolling Hash",
            "String Matching",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "** s = \"abcabcdabc\"",
                "Output": "** 2",
                "Explanation": "**\n- Delete the first 3 letters (\"abc\") since the next 3 letters are equal. Now, s = \"abcdabc\".\n- Delete all the letters.\nWe used 2 operations so return 2. It can be proven that 2 is the maximum number of operations needed.\nNote that in the second operation we cannot delete \"abc\" again because the next occurrence of \"abc\" does not happen in the next 3 letters."
            },
            {
                "Input": "** s = \"aaabaab\"",
                "Output": "** 4",
                "Explanation": "**\n- Delete the first letter (\"a\") since the next letter is equal. Now, s = \"aabaab\".\n- Delete the first 3 letters (\"aab\") since the next 3 letters are equal. Now, s = \"aab\".\n- Delete the first letter (\"a\") since the next letter is equal. Now, s = \"ab\".\n- Delete all the letters.\nWe used 4 operations so return 4. It can be proven that 4 is the maximum number of operations needed."
            },
            {
                "Input": "** s = \"aaaaa\"",
                "Output": "** 5",
                "Explanation": "** In each operation, we can delete the first letter of s."
            }
        ]
    },
    {
        "Title": "The Employee That Worked on the Longest Task",
        "slug": "the-employee-that-worked-on-the-longest-task",
        "description": "There are `n` employees, each with a unique id from `0` to `n - 1`.\n\n\nYou are given a 2D integer array `logs` where `logs[i] = [idi, leaveTimei]` where:\n\n\n `idi` is the id of the employee that worked on the `ith` task, and\n `leaveTimei` is the time at which the employee finished the `ith` task. All the values `leaveTimei` are **unique**.\n\n\nNote that the `ith` task starts the moment right after the `(i - 1)th` task ends, and the `0th` task starts at time `0`.\n\n\nReturn *the id of the employee that worked the task with the longest time.* If there is a tie between two or more employees, return *the **smallest** id among them*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** n = 10, logs = [[0,3],[2,5],[0,9],[1,15]]",
                "Output": "** 1",
                "Explanation": "** \nTask 0 started at 0 and ended at 3 with 3 units of times.\nTask 1 started at 3 and ended at 5 with 2 units of times.\nTask 2 started at 5 and ended at 9 with 4 units of times.\nTask 3 started at 9 and ended at 15 with 6 units of times.\nThe task with the longest time is task 3 and the employee with id 1 is the one that worked on it, so we return 1."
            },
            {
                "Input": "** n = 26, logs = [[1,1],[3,7],[2,12],[7,17]]",
                "Output": "** 3",
                "Explanation": "** \nTask 0 started at 0 and ended at 1 with 1 unit of times.\nTask 1 started at 1 and ended at 7 with 6 units of times.\nTask 2 started at 7 and ended at 12 with 5 units of times.\nTask 3 started at 12 and ended at 17 with 5 units of times.\nThe tasks with the longest time is task 1. The employee that worked on it is 3, so we return 3."
            },
            {
                "Input": "** n = 2, logs = [[0,10],[1,20]]",
                "Output": "** 0",
                "Explanation": "** \nTask 0 started at 0 and ended at 10 with 10 units of times.\nTask 1 started at 10 and ended at 20 with 10 units of times.\nThe tasks with the longest time are tasks 0 and 1. The employees that worked on them are 0 and 1, so we return the smallest id 0."
            }
        ]
    },
    {
        "Title": "Find The Original Array of Prefix Xor",
        "slug": "find-the-original-array-of-prefix-xor",
        "description": "You are given an **integer** array `pref` of size `n`. Find and return *the array* `arr` *of size* `n` *that satisfies*:\n\n\n `pref[i] = arr[0] ^ arr[1] ^ ... ^ arr[i]`.\n\n\nNote that `^` denotes the **bitwise-xor** operation.\n\n\nIt can be proven that the answer is **unique**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** pref = [5,2,0,3,1]",
                "Output": "** [5,7,2,3,2]",
                "Explanation": "** From the array [5,7,2,3,2] we have the following:\n- pref[0] = 5.\n- pref[1] = 5 ^ 7 = 2.\n- pref[2] = 5 ^ 7 ^ 2 = 0.\n- pref[3] = 5 ^ 7 ^ 2 ^ 3 = 3.\n- pref[4] = 5 ^ 7 ^ 2 ^ 3 ^ 2 = 1."
            },
            {
                "Input": "** pref = [13]",
                "Output": "** [13]",
                "Explanation": "** We have pref[0] = arr[0] = 13."
            }
        ]
    },
    {
        "Title": "Using a Robot to Print the Lexicographically Smallest String",
        "slug": "using-a-robot-to-print-the-lexicographically-smallest-string",
        "description": "You are given a string `s` and a robot that currently holds an empty string `t`. Apply one of the following operations until `s` and `t` **are both empty**:\n\n\n Remove the **first** character of a string `s` and give it to the robot. The robot will append this character to the string `t`.\n Remove the **last** character of a string `t` and give it to the robot. The robot will write this character on paper.\n\n\nReturn *the lexicographically smallest string that can be written on the paper.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Stack",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"zza\"",
                "Output": "** \"azz\"",
                "Explanation": "** Let p denote the written string.\nInitially p=\"\", s=\"zza\", t=\"\".\nPerform first operation three times p=\"\", s=\"\", t=\"zza\".\nPerform second operation three times p=\"azz\", s=\"\", t=\"\"."
            },
            {
                "Input": "** s = \"bac\"",
                "Output": "** \"abc\"",
                "Explanation": "** Let p denote the written string.\nPerform first operation twice p=\"\", s=\"c\", t=\"ba\". \nPerform second operation twice p=\"ab\", s=\"c\", t=\"\". \nPerform first operation p=\"ab\", s=\"\", t=\"c\". \nPerform second operation p=\"abc\", s=\"\", t=\"\"."
            },
            {
                "Input": "** s = \"bdda\"",
                "Output": "** \"addb\"",
                "Explanation": "** Let p denote the written string.\nInitially p=\"\", s=\"bdda\", t=\"\".\nPerform first operation four times p=\"\", s=\"\", t=\"bdda\".\nPerform second operation four times p=\"addb\", s=\"\", t=\"\"."
            }
        ]
    },
    {
        "Title": "Paths in Matrix Whose Sum Is Divisible by K",
        "slug": "paths-in-matrix-whose-sum-is-divisible-by-k",
        "description": "You are given a **0-indexed** `m x n` integer matrix `grid` and an integer `k`. You are currently at position `(0, 0)` and you want to reach position `(m - 1, n - 1)` moving only **down** or **right**.\n\n\nReturn *the number of paths where the sum of the elements on the path is divisible by* `k`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[5,2,4],[3,0,5],[0,7,2]], k = 3",
                "Output": "** 2",
                "Explanation": "** There are two paths where the sum of the elements on the path is divisible by k.\nThe first path highlighted in red has a sum of 5 + 2 + 4 + 5 + 2 = 18 which is divisible by 3.\nThe second path highlighted in blue has a sum of 5 + 3 + 0 + 5 + 2 = 15 which is divisible by 3."
            },
            {
                "Input": "** grid = [[0,0]], k = 5",
                "Output": "** 1",
                "Explanation": "** The path highlighted in red has a sum of 0 + 0 = 0 which is divisible by 5."
            },
            {
                "Input": "** grid = [[7,3,4,9],[2,3,6,2],[2,3,7,0]], k = 1",
                "Output": "** 10",
                "Explanation": "** Every integer is divisible by 1 so the sum of the elements on every possible path is divisible by k."
            }
        ]
    },
    {
        "Title": "Number of Valid Clock Times",
        "slug": "number-of-valid-clock-times",
        "description": "You are given a string of length `5` called `time`, representing the current time on a digital clock in the format `\"hh:mm\"`. The **earliest** possible time is `\"00:00\"` and the **latest** possible time is `\"23:59\"`.\n\n\nIn the string `time`, the digits represented by the `?`\u00a0symbol are **unknown**, and must be **replaced** with a digit from `0` to `9`.\n\n\nReturn *an integer* `answer`*, the number of valid clock times that can be created by replacing every* `?`*with a digit from* `0` *to* `9`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** time = \"?5:00\"",
                "Output": "** 2",
                "Explanation": "** We can replace the ? with either a 0 or 1, producing \"05:00\" or \"15:00\". Note that we cannot replace it with a 2, since the time \"25:00\" is invalid. In total, we have two choices."
            },
            {
                "Input": "** time = \"0?:0?\"",
                "Output": "** 100",
                "Explanation": "** Each ? can be replaced by any digit from 0 to 9, so we have 100 total choices."
            },
            {
                "Input": "** time = \"??:??\"",
                "Output": "** 1440",
                "Explanation": "** There are 24 possible choices for the hours, and 60 possible choices for the minutes. In total, we have 24 * 60 = 1440 choices."
            }
        ]
    },
    {
        "Title": "Range Product Queries of Powers",
        "slug": "range-product-queries-of-powers",
        "description": "Given a positive integer `n`, there exists a **0-indexed** array called `powers`, composed of the **minimum** number of powers of `2` that sum to `n`. The array is sorted in **non-decreasing** order, and there is **only one** way to form the array.\n\n\nYou are also given a **0-indexed** 2D integer array `queries`, where `queries[i] = [lefti, righti]`. Each `queries[i]` represents a query where you have to find the product of all `powers[j]` with `lefti <= j <= righti`.\n\n\nReturn *an array* `answers`*, equal in length to* `queries`*, where* `answers[i]` *is the answer to the* `ith` *query*. Since the answer to the `ith` query may be too large, each `answers[i]` should be returned **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Bit Manipulation",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** n = 15, queries = [[0,1],[2,2],[0,3]]",
                "Output": "** [2,4,64]",
                "Explanation": "**\nFor n = 15, powers = [1,2,4,8]. It can be shown that powers cannot be a smaller size.\nAnswer to 1st query: powers[0] * powers[1] = 1 * 2 = 2.\nAnswer to 2nd query: powers[2] = 4.\nAnswer to 3rd query: powers[0] * powers[1] * powers[2] * powers[3] = 1 * 2 * 4 * 8 = 64.\nEach answer modulo 109 + 7 yields the same answer, so [2,4,64] is returned."
            },
            {
                "Input": "** n = 2, queries = [[0,0]]",
                "Output": "** [2]",
                "Explanation": "**\nFor n = 2, powers = [2].\nThe answer to the only query is powers[0] = 2. The answer modulo 109 + 7 is the same, so [2] is returned."
            }
        ]
    },
    {
        "Title": "Minimize Maximum of Array",
        "slug": "minimize-maximum-of-array",
        "description": "You are given a **0-indexed** array `nums` comprising of `n` non-negative integers.\n\n\nIn one operation, you must:\n\n\n Choose an integer `i` such that `1 <= i < n` and `nums[i] > 0`.\n Decrease `nums[i]` by 1.\n Increase `nums[i - 1]` by 1.\n\n\nReturn *the **minimum** possible value of the **maximum** integer of* `nums` *after performing **any** number of operations*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Dynamic Programming",
            "Greedy",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [3,7,1,6]",
                "Output": "** 5",
                "Explanation": "**\nOne set of optimal operations is as follows:\n1. Choose i = 1, and nums becomes [4,6,1,6].\n2. Choose i = 3, and nums becomes [4,6,2,5].\n3. Choose i = 1, and nums becomes [5,5,2,5].\nThe maximum integer of nums is 5. It can be shown that the maximum number cannot be less than 5.\nTherefore, we return 5."
            },
            {
                "Input": "** nums = [10,1]",
                "Output": "** 10",
                "Explanation": "**\nIt is optimal to leave nums as is, and since 10 is the maximum value, we return 10."
            }
        ]
    },
    {
        "Title": "Create Components With Same Value",
        "slug": "create-components-with-same-value",
        "description": "There is an undirected tree with `n` nodes labeled from `0` to `n - 1`.\n\n\nYou are given a **0-indexed** integer array `nums` of length `n` where `nums[i]` represents the value of the `ith` node. You are also given a 2D integer array `edges` of length `n - 1` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree.\n\n\nYou are allowed to **delete** some edges, splitting the tree into multiple connected components. Let the **value** of a component be the sum of **all** `nums[i]` for which node `i` is in the component.\n\n\nReturn *the **maximum** number of edges you can delete, such that every connected component in the tree has the same value.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Tree",
            "Depth-First Search",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** nums = [6,2,2,2,6], edges = [[0,1],[1,2],[1,3],[3,4]]",
                "Output": "** 2",
                "Explanation": "** The above figure shows how we can delete the edges [0,1] and [3,4]. The created components are nodes [0], [1,2,3] and [4]. The sum of the values in each component equals 6. It can be proven that no better deletion exists, so the answer is 2."
            }
        ]
    },
    {
        "Title": "Largest Positive Integer That Exists With Its Negative",
        "slug": "largest-positive-integer-that-exists-with-its-negative",
        "description": "Given an integer array `nums` that **does not contain** any zeros, find **the largest positive** integer `k` such that `-k` also exists in the array.\n\n\nReturn *the positive integer* `k`. If there is no such integer, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [-1,2,-3,3]",
                "Output": "** 3",
                "Explanation": "** 3 is the only valid k we can find in the array."
            },
            {
                "Input": "** nums = [-1,10,6,7,-7,1]",
                "Output": "** 7",
                "Explanation": "** Both 1 and 7 have their corresponding negative values in the array. 7 has a larger value."
            },
            {
                "Input": "** nums = [-10,8,6,7,-2,-3]",
                "Output": "** -1",
                "Explanation": "** There is no a single valid k, we return -1."
            }
        ]
    },
    {
        "Title": "Count Number of Distinct Integers After Reverse Operations",
        "slug": "count-number-of-distinct-integers-after-reverse-operations",
        "description": "You are given an array `nums` consisting of **positive** integers.\n\n\nYou have to take each integer in the array, **reverse its digits**, and add it to the end of the array. You should apply this operation to the original integers in `nums`.\n\n\nReturn *the number of **distinct** integers in the final array*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Math"
        ],
        "examples": [
            {
                "Input": "** nums = [1,13,10,12,31]",
                "Output": "** 6",
                "Explanation": "** After including the reverse of each number, the resulting array is [1,13,10,12,31,1,31,1,21,13].\nThe reversed integers that were added to the end of the array are underlined. Note that for the integer 10, after reversing it, it becomes 01 which is just 1.\nThe number of distinct integers in this array is 6 (The numbers 1, 10, 12, 13, 21, and 31)."
            },
            {
                "Input": "** nums = [2,2,2]",
                "Output": "** 1",
                "Explanation": "** After including the reverse of each number, the resulting array is [2,2,2,2,2,2].\nThe number of distinct integers in this array is 1 (The number 2)."
            }
        ]
    },
    {
        "Title": "Sum of Number and Its Reverse",
        "slug": "sum-of-number-and-its-reverse",
        "description": "Given a **non-negative** integer `num`, return `true` *if* `num` *can be expressed as the sum of any **non-negative** integer and its reverse, or* `false` *otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** num = 443",
                "Output": "** true",
                "Explanation": "** 172 + 271 = 443 so we return true."
            },
            {
                "Input": "** num = 63",
                "Output": "** false",
                "Explanation": "** 63 cannot be expressed as the sum of a non-negative integer and its reverse so we return false."
            },
            {
                "Input": "** num = 181",
                "Output": "** true",
                "Explanation": "** 140 + 041 = 181 so we return true. Note that when a number is reversed, there may be leading zeros."
            }
        ]
    },
    {
        "Title": "Count Subarrays With Fixed Bounds",
        "slug": "count-subarrays-with-fixed-bounds",
        "description": "You are given an integer array `nums` and two integers `minK` and `maxK`.\n\n\nA **fixed-bound subarray** of `nums` is a subarray that satisfies the following conditions:\n\n\n The **minimum** value in the subarray is equal to `minK`.\n The **maximum** value in the subarray is equal to `maxK`.\n\n\nReturn *the **number** of fixed-bound subarrays*.\n\n\nA **subarray** is a **contiguous** part of an array.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Queue",
            "Sliding Window",
            "Monotonic Queue"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,5,2,7,5], minK = 1, maxK = 5",
                "Output": "** 2",
                "Explanation": "** The fixed-bound subarrays are [1,3,5] and [1,3,5,2]."
            },
            {
                "Input": "** nums = [1,1,1,1], minK = 1, maxK = 1",
                "Output": "** 10",
                "Explanation": "** Every subarray of nums is a fixed-bound subarray. There are 10 possible subarrays."
            }
        ]
    },
    {
        "Title": "Determine if Two Events Have Conflict",
        "slug": "determine-if-two-events-have-conflict",
        "description": "You are given two arrays of strings that represent two inclusive events that happened **on the same day**, `event1` and `event2`, where:\n\n\n `event1 = [startTime1, endTime1]` and\n `event2 = [startTime2, endTime2]`.\n\n\nEvent times are valid 24 hours format in the form of `HH:MM`.\n\n\nA **conflict** happens when two events have some non-empty intersection (i.e., some moment is common to both events).\n\n\nReturn `true` *if there is a conflict between two events. Otherwise, return* `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "examples": [
            {
                "Input": "** event1 = [\"01:15\",\"02:00\"], event2 = [\"02:00\",\"03:00\"]",
                "Output": "** true",
                "Explanation": "** The two events intersect at time 2:00."
            },
            {
                "Input": "** event1 = [\"01:00\",\"02:00\"], event2 = [\"01:20\",\"03:00\"]",
                "Output": "** true",
                "Explanation": "** The two events intersect starting from 01:20 to 02:00."
            },
            {
                "Input": "** event1 = [\"10:00\",\"11:00\"], event2 = [\"14:00\",\"15:00\"]",
                "Output": "** false",
                "Explanation": "** The two events do not intersect."
            }
        ]
    },
    {
        "Title": "Number of Subarrays With GCD Equal to K",
        "slug": "number-of-subarrays-with-gcd-equal-to-k",
        "description": "Given an integer array `nums` and an integer `k`, return *the number of **subarrays** of* `nums` *where the greatest common divisor of the subarray's elements is* `k`.\n\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\n\nThe **greatest common divisor of an array** is the largest integer that evenly divides all the array elements.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [9,3,1,2,6,3], k = 3",
                "Output": "** 4",
                "Explanation": "** The subarrays of nums where 3 is the greatest common divisor of all the subarray's elements are:\n- [9,**3**,1,2,6,3]\n- [9,3,1,2,6,**3**]\n- [**9,3**,1,2,6,3]\n- [9,3,1,2,**6,3**]"
            },
            {
                "Input": "** nums = [4], k = 7",
                "Output": "** 0",
                "Explanation": "** There are no subarrays of nums where 7 is the greatest common divisor of all the subarray's elements."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Make Array Equal",
        "slug": "minimum-cost-to-make-array-equal",
        "description": "You are given two **0-indexed** arrays `nums` and `cost` consisting each of `n` **positive** integers.\n\n\nYou can do the following operation **any** number of times:\n\n\n Increase or decrease **any** element of the array `nums` by `1`.\n\n\nThe cost of doing one operation on the `ith` element is `cost[i]`.\n\n\nReturn *the **minimum** total cost such that all the elements of the array* `nums` *become **equal***.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Greedy",
            "Sorting",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,5,2], cost = [2,3,1,14]",
                "Output": "** 8",
                "Explanation": "** We can make all the elements equal to 2 in the following way:\n- Increase the 0th element one time. The cost is 2.\n- Decrease the 1st element one time. The cost is 3.\n- Decrease the 2nd element three times. The cost is 1 + 1 + 1 = 3.\nThe total cost is 2 + 3 + 3 = 8.\nIt can be shown that we cannot make the array equal with a smaller cost."
            },
            {
                "Input": "** nums = [2,2,2,2,2], cost = [4,2,8,1,3]",
                "Output": "** 0",
                "Explanation": "** All the elements are already equal, so no operations are needed."
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Make Arrays Similar",
        "slug": "minimum-number-of-operations-to-make-arrays-similar",
        "description": "You are given two positive integer arrays `nums` and `target`, of the same length.\n\n\nIn one operation, you can choose any two **distinct** indices `i` and `j` where `0 <= i, j < nums.length` and:\n\n\n set `nums[i] = nums[i] + 2` and\n set `nums[j] = nums[j] - 2`.\n\n\nTwo arrays are considered to be **similar** if the frequency of each element is the same.\n\n\nReturn *the minimum number of operations required to make* `nums` *similar to* `target`. The test cases are generated such that `nums` can always be similar to `target`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [8,12,6], target = [2,14,10]",
                "Output": "** 2",
                "Explanation": "** It is possible to make nums similar to target in two operations:\n- Choose i = 0 and j = 2, nums = [10,12,4].\n- Choose i = 1 and j = 2, nums = [10,14,2].\nIt can be shown that 2 is the minimum number of operations needed."
            },
            {
                "Input": "** nums = [1,2,5], target = [4,1,3]",
                "Output": "** 1",
                "Explanation": "** We can make nums similar to target in one operation:\n- Choose i = 1 and j = 2, nums = [1,4,3]."
            },
            {
                "Input": "** nums = [1,1,1,1,1], target = [1,1,1,1,1]",
                "Output": "** 0",
                "Explanation": "** The array nums is already similiar to target."
            }
        ]
    },
    {
        "Title": "Odd String Difference",
        "slug": "odd-string-difference",
        "description": "You are given an array of equal-length strings `words`. Assume that the length of each string is `n`.\n\n\nEach string `words[i]` can be converted into a **difference integer array** `difference[i]` of length `n - 1` where `difference[i][j] = words[i][j+1] - words[i][j]` where `0 <= j <= n - 2`. Note that the difference between two letters is the difference between their **positions** in the alphabet i.e.\u00a0the position of `'a'` is `0`, `'b'` is `1`, and `'z'` is `25`.\n\n\n For example, for the string `\"acb\"`, the difference integer array is `[2 - 0, 1 - 2] = [2, -1]`.\n\n\nAll the strings in words have the same difference integer array, **except one**. You should find that string.\n\n\nReturn *the string in* `words` *that has different **difference integer array**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** words = [\"adc\",\"wzy\",\"abc\"]",
                "Output": "** \"abc\"",
                "Explanation": "** \n- The difference integer array of \"adc\" is [3 - 0, 2 - 3] = [3, -1].\n- The difference integer array of \"wzy\" is [25 - 22, 24 - 25]= [3, -1].\n- The difference integer array of \"abc\" is [1 - 0, 2 - 1] = [1, 1]. \nThe odd array out is [1, 1], so we return the corresponding string, \"abc\"."
            },
            {
                "Input": "** words = [\"aaa\",\"bob\",\"ccc\",\"ddd\"]",
                "Output": "** \"bob\"",
                "Explanation": "** All the integer arrays are [0, 0] except for \"bob\", which corresponds to [13, -13]."
            }
        ]
    },
    {
        "Title": "Words Within Two Edits of Dictionary",
        "slug": "words-within-two-edits-of-dictionary",
        "description": "You are given two string arrays, `queries` and `dictionary`. All words in each array comprise of lowercase English letters and have the same length.\n\n\nIn one **edit** you can take a word from `queries`, and change any letter in it to any other letter. Find all words from `queries` that, after a **maximum** of two edits, equal some word from `dictionary`.\n\n\nReturn *a list of all words from* `queries`*,* *that match with some word from* `dictionary` *after a maximum of **two edits***. Return the words in the **same order** they appear in `queries`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String"
        ],
        "examples": [
            {
                "Input": "** queries = [\"word\",\"note\",\"ants\",\"wood\"], dictionary = [\"wood\",\"joke\",\"moat\"]",
                "Output": "** [\"word\",\"note\",\"wood\"]",
                "Explanation": "**\n- Changing the 'r' in \"word\" to 'o' allows it to equal the dictionary word \"wood\".\n- Changing the 'n' to 'j' and the 't' to 'k' in \"note\" changes it to \"joke\".\n- It would take more than 2 edits for \"ants\" to equal a dictionary word.\n- \"wood\" can remain unchanged (0 edits) and match the corresponding dictionary word.\nThus, we return [\"word\",\"note\",\"wood\"]."
            },
            {
                "Input": "** queries = [\"yes\"], dictionary = [\"not\"]",
                "Output": "** []",
                "Explanation": "**\nApplying any two edits to \"yes\" cannot make it equal to \"not\". Thus, we return an empty array."
            }
        ]
    },
    {
        "Title": "Destroy Sequential Targets",
        "slug": "destroy-sequential-targets",
        "description": "You are given a **0-indexed** array `nums` consisting of positive integers, representing targets on a number line. You are also given an integer `space`.\n\n\nYou have a machine which can destroy targets. **Seeding** the machine with some `nums[i]` allows it to destroy all targets with values that can be represented as `nums[i] + c * space`, where `c` is any non-negative integer. You want to destroy the **maximum** number of targets in `nums`.\n\n\nReturn *the **minimum value** of* `nums[i]` *you can seed the machine with to destroy the maximum number of targets.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [3,7,8,1,1,5], space = 2",
                "Output": "** 1",
                "Explanation": "** If we seed the machine with nums[3], then we destroy all targets equal to 1,3,5,7,9,... \nIn this case, we would destroy 5 total targets (all except for nums[2]). \nIt is impossible to destroy more than 5 targets, so we return nums[3]."
            },
            {
                "Input": "** nums = [1,3,5,2,4,6], space = 2",
                "Output": "** 1",
                "Explanation": "** Seeding the machine with nums[0], or nums[3] destroys 3 targets. \nIt is not possible to destroy more than 3 targets.\nSince nums[0] is the minimal integer that can destroy 3 targets, we return 1."
            },
            {
                "Input": "** nums = [6,2,5], space = 100",
                "Output": "** 2",
                "Explanation": "** Whatever initial seed we select, we can only destroy 1 target. The minimal seed is nums[1]."
            }
        ]
    },
    {
        "Title": "Next Greater Element IV",
        "slug": "next-greater-element-iv",
        "description": "You are given a **0-indexed** array of non-negative integers `nums`. For each integer in `nums`, you must find its respective **second greater** integer.\n\n\nThe **second greater** integer of `nums[i]` is `nums[j]` such that:\n\n\n `j > i`\n `nums[j] > nums[i]`\n There exists **exactly one** index `k` such that `nums[k] > nums[i]` and `i < k < j`.\n\n\nIf there is no such `nums[j]`, the second greater integer is considered to be `-1`.\n\n\n For example, in the array `[1, 2, 4, 3]`, the second greater integer of `1` is `4`, `2` is `3`,\u00a0and that of `3` and `4` is `-1`.\n\n\nReturn *an integer array* `answer`*, where* `answer[i]` *is the second greater integer of* `nums[i]`*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Stack",
            "Sorting",
            "Heap (Priority Queue)",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** nums = [2,4,0,9,6]",
                "Output": "** [9,6,6,-1,-1]",
                "Explanation": "**\n0th index: 4 is the first integer greater than 2, and 9 is the second integer greater than 2, to the right of 2.\n1st index: 9 is the first, and 6 is the second integer greater than 4, to the right of 4.\n2nd index: 9 is the first, and 6 is the second integer greater than 0, to the right of 0.\n3rd index: There is no integer greater than 9 to its right, so the second greater integer is considered to be -1.\n4th index: There is no integer greater than 6 to its right, so the second greater integer is considered to be -1.\nThus, we return [9,6,6,-1,-1]."
            },
            {
                "Input": "** nums = [3,3]",
                "Output": "** [-1,-1]",
                "Explanation": "**\nWe return [-1,-1] since neither integer has any integer greater than it."
            }
        ]
    },
    {
        "Title": "Average Value of Even Numbers That Are Divisible by Three",
        "slug": "average-value-of-even-numbers-that-are-divisible-by-three",
        "description": "Given an integer array `nums` of **positive** integers, return *the average value of all even integers that are divisible by* `3`*.\n\n\nNote that the **average** of `n` elements is the **sum** of the `n` elements divided by `n` and **rounded down** to the nearest integer.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,6,10,12,15]",
                "Output": "** 9",
                "Explanation": "** 6 and 12 are even numbers that are divisible by 3. (6 + 12) / 2 = 9."
            },
            {
                "Input": "** nums = [1,2,4,7,10]",
                "Output": "** 0",
                "Explanation": "** There is no single number that satisfies the requirement, so return 0."
            }
        ]
    },
    {
        "Title": "Most Popular Video Creator",
        "slug": "most-popular-video-creator",
        "description": "You are given two string arrays `creators` and `ids`, and an integer array `views`, all of length `n`. The `ith` video on a platform was created by `creator[i]`, has an id of `ids[i]`, and has `views[i]` views.\n\n\nThe **popularity** of a creator is the **sum** of the number of views on **all** of the creator's videos. Find the creator with the **highest** popularity and the id of their **most** viewed video.\n\n\n If multiple creators have the highest popularity, find all of them.\n If multiple videos have the highest view count for a creator, find the lexicographically **smallest** id.\n\n\nReturn *a 2D array of strings* `answer` *where* `answer[i] = [creatori, idi]` *means that* `creatori` *has the **highest** popularity and* `idi` *is the id of their most popular video.* The answer can be returned in any order.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** creators = [\"alice\",\"bob\",\"alice\",\"chris\"], ids = [\"one\",\"two\",\"three\",\"four\"], views = [5,10,5,4]",
                "Output": "** [[\"alice\",\"one\"],[\"bob\",\"two\"]]",
                "Explanation": "**\nThe popularity of alice is 5 + 5 = 10.\nThe popularity of bob is 10.\nThe popularity of chris is 4.\nalice and bob are the most popular creators.\nFor bob, the video with the highest view count is \"two\".\nFor alice, the videos with the highest view count are \"one\" and \"three\". Since \"one\" is lexicographically smaller than \"three\", it is included in the answer."
            },
            {
                "Input": "** creators = [\"alice\",\"alice\",\"alice\"], ids = [\"a\",\"b\",\"c\"], views = [1,2,2]",
                "Output": "** [[\"alice\",\"b\"]]",
                "Explanation": "**\nThe videos with id \"b\" and \"c\" have the highest view count.\nSince \"b\" is lexicographically smaller than \"c\", it is included in the answer."
            }
        ]
    },
    {
        "Title": "Minimum Addition to Make Integer Beautiful",
        "slug": "minimum-addition-to-make-integer-beautiful",
        "description": "You are given two positive integers `n` and `target`.\n\n\nAn integer is considered **beautiful** if the sum of its digits is less than or equal to `target`.\n\n\nReturn the *minimum **non-negative** integer* `x` *such that* `n + x` *is beautiful*. The input will be generated such that it is always possible to make `n` beautiful.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** n = 16, target = 6",
                "Output": "** 4",
                "Explanation": "** Initially n is 16 and its digit sum is 1 + 6 = 7. After adding 4, n becomes 20 and digit sum becomes 2 + 0 = 2. It can be shown that we can not make n beautiful with adding non-negative integer less than 4."
            },
            {
                "Input": "** n = 467, target = 6",
                "Output": "** 33",
                "Explanation": "** Initially n is 467 and its digit sum is 4 + 6 + 7 = 17. After adding 33, n becomes 500 and digit sum becomes 5 + 0 + 0 = 5. It can be shown that we can not make n beautiful with adding non-negative integer less than 33."
            },
            {
                "Input": "** n = 1, target = 1",
                "Output": "** 0",
                "Explanation": "** Initially n is 1 and its digit sum is 1, which is already smaller than or equal to target."
            }
        ]
    },
    {
        "Title": "Height of Binary Tree After Subtree Removal Queries",
        "slug": "height-of-binary-tree-after-subtree-removal-queries",
        "description": "You are given the `root` of a **binary tree** with `n` nodes. Each node is assigned a unique value from `1` to `n`. You are also given an array `queries` of size `m`.\n\n\nYou have to perform `m` **independent** queries on the tree where in the `ith` query you do the following:\n\n\n **Remove** the subtree rooted at the node with the value `queries[i]` from the tree. It is **guaranteed** that `queries[i]` will **not** be equal to the value of the root.\n\n\nReturn *an array* `answer` *of size* `m` *where* `answer[i]` *is the height of the tree after performing the* `ith` *query*.\n\n\nNote**:\n\n\n The queries are independent, so the tree returns to its **initial** state after each query.\n The height of a tree is the **number of edges in the longest simple path** from the root to some node in the tree.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,3,4,2,null,6,5,null,null,null,null,null,7], queries = [4]",
                "Output": "** [2]",
                "Explanation": "** The diagram above shows the tree after removing the subtree rooted at node with value 4.\nThe height of the tree is 2 (The path 1 -> 3 -> 2)."
            },
            {
                "Input": "** root = [5,8,9,2,1,3,7,4,6], queries = [3,2,4,8]",
                "Output": "** [3,2,3,2]",
                "Explanation": "** We have the following queries:\n- Removing the subtree rooted at node with value 3. The height of the tree becomes 3 (The path 5 -> 8 -> 2 -> 4).\n- Removing the subtree rooted at node with value 2. The height of the tree becomes 2 (The path 5 -> 8 -> 1).\n- Removing the subtree rooted at node with value 4. The height of the tree becomes 3 (The path 5 -> 8 -> 2 -> 6).\n- Removing the subtree rooted at node with value 8. The height of the tree becomes 2 (The path 5 -> 9 -> 3)."
            }
        ]
    },
    {
        "Title": "Apply Operations to an Array",
        "slug": "apply-operations-to-an-array",
        "description": "You are given a **0-indexed** array `nums` of size `n` consisting of **non-negative** integers.\n\n\nYou need to apply `n - 1` operations to this array where, in the `ith` operation (**0-indexed**), you will apply the following on the `ith` element of `nums`:\n\n\n If `nums[i] == nums[i + 1]`, then multiply `nums[i]` by `2` and set `nums[i + 1]` to `0`. Otherwise, you skip this operation.\n\n\nAfter performing **all** the operations, **shift** all the `0`'s to the **end** of the array.\n\n\n For example, the array `[1,0,2,0,0,1]` after shifting all its `0`'s to the end, is `[1,2,1,0,0,0]`.\n\n\nReturn *the resulting array*.\n\n\nNote** that the operations are applied **sequentially**, not all at once.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,2,1,1,0]",
                "Output": "** [1,4,2,0,0,0]",
                "Explanation": "** We do the following operations:\n- i = 0: nums[0] and nums[1] are not equal, so we skip this operation.\n- i = 1: nums[1] and nums[2] are equal, we multiply nums[1] by 2 and change nums[2] to 0. The array becomes [1,**4**,**0**,1,1,0].\n- i = 2: nums[2] and nums[3] are not equal, so we skip this operation.\n- i = 3: nums[3] and nums[4] are equal, we multiply nums[3] by 2 and change nums[4] to 0. The array becomes [1,4,0,**2**,**0**,0].\n- i = 4: nums[4] and nums[5] are equal, we multiply nums[4] by 2 and change nums[5] to 0. The array becomes [1,4,0,2,**0**,**0**].\nAfter that, we shift the 0's to the end, which gives the array [1,4,2,0,0,0]."
            },
            {
                "Input": "** nums = [0,1]",
                "Output": "** [1,0]",
                "Explanation": "** No operation can be applied, we just shift the 0 to the end."
            }
        ]
    },
    {
        "Title": "Maximum Sum of Distinct Subarrays With Length K",
        "slug": "maximum-sum-of-distinct-subarrays-with-length-k",
        "description": "You are given an integer array `nums` and an integer `k`. Find the maximum subarray sum of all the subarrays of `nums` that meet the following conditions:\n\n\n The length of the subarray is `k`, and\n All the elements of the subarray are **distinct**.\n\n\nReturn *the maximum subarray sum of all the subarrays that meet the conditions**.* If no subarray meets the conditions, return `0`.\n\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [1,5,4,2,9,9,9], k = 3",
                "Output": "** 15",
                "Explanation": "** The subarrays of nums with length 3 are:\n- [1,5,4] which meets the requirements and has a sum of 10.\n- [5,4,2] which meets the requirements and has a sum of 11.\n- [4,2,9] which meets the requirements and has a sum of 15.\n- [2,9,9] which does not meet the requirements because the element 9 is repeated.\n- [9,9,9] which does not meet the requirements because the element 9 is repeated.\nWe return 15 because it is the maximum subarray sum of all the subarrays that meet the conditions"
            },
            {
                "Input": "** nums = [4,4,4], k = 3",
                "Output": "** 0",
                "Explanation": "** The subarrays of nums with length 3 are:\n- [4,4,4] which does not meet the requirements because the element 4 is repeated.\nWe return 0 because no subarrays meet the conditions."
            }
        ]
    },
    {
        "Title": "Total Cost to Hire K Workers",
        "slug": "total-cost-to-hire-k-workers",
        "description": "You are given a **0-indexed** integer array `costs` where `costs[i]` is the cost of hiring the `ith` worker.\n\n\nYou are also given two integers `k` and `candidates`. We want to hire exactly `k` workers according to the following rules:\n\n\n You will run `k` sessions and hire exactly one worker in each session.\n In each hiring session, choose the worker with the lowest cost from either the first `candidates` workers or the last `candidates` workers. Break the tie by the smallest index.\n\t+ For example, if `costs = [3,2,7,7,1,2]` and `candidates = 2`, then in the first hiring session, we will choose the `4th` worker because they have the lowest cost `[3,2,7,7,**1**,2]`.\n\t+ In the second hiring session, we will choose `1st` worker because they have the same lowest cost as `4th` worker but they have the smallest index `[3,**2**,7,7,2]`. Please note that the indexing may be changed in the process.\n If there are fewer than candidates workers remaining, choose the worker with the lowest cost among them. Break the tie by the smallest index.\n A worker can only be chosen once.\n\n\nReturn *the total cost to hire exactly* `k` *workers.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Heap (Priority Queue)",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** costs = [17,12,10,2,7,2,11,20,8], k = 3, candidates = 4",
                "Output": "** 11",
                "Explanation": "** We hire 3 workers in total. The total cost is initially 0.\n- In the first hiring round we choose the worker from [17,12,10,2,7,2,11,20,8]. The lowest cost is 2, and we break the tie by the smallest index, which is 3. The total cost = 0 + 2 = 2.\n- In the second hiring round we choose the worker from [17,12,10,7,2,11,20,8]. The lowest cost is 2 (index 4). The total cost = 2 + 2 = 4.\n- In the third hiring round we choose the worker from [17,12,10,7,11,20,8]. The lowest cost is 7 (index 3). The total cost = 4 + 7 = 11. Notice that the worker with index 3 was common in the first and last four workers.\nThe total hiring cost is 11."
            },
            {
                "Input": "** costs = [1,2,4,1], k = 3, candidates = 3",
                "Output": "** 4",
                "Explanation": "** We hire 3 workers in total. The total cost is initially 0.\n- In the first hiring round we choose the worker from [1,2,4,1]. The lowest cost is 1, and we break the tie by the smallest index, which is 0. The total cost = 0 + 1 = 1. Notice that workers with index 1 and 2 are common in the first and last 3 workers.\n- In the second hiring round we choose the worker from [2,4,1]. The lowest cost is 1 (index 2). The total cost = 1 + 1 = 2.\n- In the third hiring round there are less than three candidates. We choose the worker from the remaining workers [2,4]. The lowest cost is 2 (index 0). The total cost = 2 + 2 = 4.\nThe total hiring cost is 4."
            }
        ]
    },
    {
        "Title": "Minimum Total Distance Traveled",
        "slug": "minimum-total-distance-traveled",
        "description": "There are some robots and factories on the X-axis. You are given an integer array `robot` where `robot[i]` is the position of the `ith` robot. You are also given a 2D integer array `factory` where `factory[j] = [positionj, limitj]` indicates that `positionj` is the position of the `jth` factory and that the `jth` factory can repair at most `limitj` robots.\n\n\nThe positions of each robot are **unique**. The positions of each factory are also **unique**. Note that a robot can be **in the same position** as a factory initially.\n\n\nAll the robots are initially broken; they keep moving in one direction. The direction could be the negative or the positive direction of the X-axis. When a robot reaches a factory that did not reach its limit, the factory repairs the robot, and it stops moving.\n\n\nAt any moment**, you can set the initial direction of moving for **some** robot. Your target is to minimize the total distance traveled by all the robots.\n\n\nReturn *the minimum total distance traveled by all the robots*. The test cases are generated such that all the robots can be repaired.\n\n\nNote that\n\n\n All robots move at the same speed.\n If two robots move in the same direction, they will never collide.\n If two robots move in opposite directions and they meet at some point, they do not collide. They cross each other.\n If a robot passes by a factory that reached its limits, it crosses it as if it does not exist.\n If the robot moved from a position `x` to a position `y`, the distance it moved is `|y - x|`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** robot = [0,4,6], factory = [[2,2],[6,2]]",
                "Output": "** 4",
                "Explanation": "** As shown in the figure:\n- The first robot at position 0 moves in the positive direction. It will be repaired at the first factory.\n- The second robot at position 4 moves in the negative direction. It will be repaired at the first factory.\n- The third robot at position 6 will be repaired at the second factory. It does not need to move.\nThe limit of the first factory is 2, and it fixed 2 robots.\nThe limit of the second factory is 2, and it fixed 1 robot.\nThe total distance is |2 - 0| + |2 - 4| + |6 - 6| = 4. It can be shown that we cannot achieve a better total distance than 4."
            },
            {
                "Input": "** robot = [1,-1], factory = [[-2,1],[2,1]]",
                "Output": "** 2",
                "Explanation": "** As shown in the figure:\n- The first robot at position 1 moves in the positive direction. It will be repaired at the second factory.\n- The second robot at position -1 moves in the negative direction. It will be repaired at the first factory.\nThe limit of the first factory is 1, and it fixed 1 robot.\nThe limit of the second factory is 1, and it fixed 1 robot.\nThe total distance is |2 - 1| + |(-2) - (-1)| = 2. It can be shown that we cannot achieve a better total distance than 2."
            }
        ]
    },
    {
        "Title": "Number of Distinct Averages",
        "slug": "number-of-distinct-averages",
        "description": "You are given a **0-indexed** integer array `nums` of **even** length.\n\n\nAs long as `nums` is **not** empty, you must repetitively:\n\n\n Find the minimum number in `nums` and remove it.\n Find the maximum number in `nums` and remove it.\n Calculate the average of the two removed numbers.\n\n\nThe **average** of two numbers `a` and `b` is `(a + b) / 2`.\n\n\n For example, the average of `2` and `3` is `(2 + 3) / 2 = 2.5`.\n\n\nReturn *the number of **distinct** averages calculated using the above process*.\n\n\nNote** that when there is a tie for a minimum or maximum number, any can be removed.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [4,1,4,0,3,5]",
                "Output": "** 2",
                "Explanation": "**\n1. Remove 0 and 5, and the average is (0 + 5) / 2 = 2.5. Now, nums = [4,1,4,3].\n2. Remove 1 and 4. The average is (1 + 4) / 2 = 2.5, and nums = [4,3].\n3. Remove 3 and 4, and the average is (3 + 4) / 2 = 3.5.\nSince there are 2 distinct numbers among 2.5, 2.5, and 3.5, we return 2."
            },
            {
                "Input": "** nums = [1,100]",
                "Output": "** 1",
                "Explanation": "**\nThere is only one average to be calculated after removing 1 and 100, so we return 1."
            }
        ]
    },
    {
        "Title": "Count Ways To Build Good Strings",
        "slug": "count-ways-to-build-good-strings",
        "description": "Given the integers `zero`, `one`, `low`, and `high`, we can construct a string by starting with an empty string, and then at each step perform either of the following:\n\n\n Append the character `'0'` `zero` times.\n Append the character `'1'` `one` times.\n\n\nThis can be performed any number of times.\n\n\nA **good** string is a string constructed by the above process having a **length** between `low` and `high` (**inclusive**).\n\n\nReturn *the number of **different** good strings that can be constructed satisfying these properties.* Since the answer can be large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** low = 3, high = 3, zero = 1, one = 1",
                "Output": "** 8",
                "Explanation": "** \nOne possible valid good string is \"011\". \nIt can be constructed as follows: \"\" -> \"0\" -> \"01\" -> \"011\". \nAll binary strings from \"000\" to \"111\" are good strings in this example."
            },
            {
                "Input": "** low = 2, high = 3, zero = 1, one = 2",
                "Output": "** 5",
                "Explanation": "** The good strings are \"00\", \"11\", \"000\", \"110\", and \"011\"."
            }
        ]
    },
    {
        "Title": "Most Profitable Path in a Tree",
        "slug": "most-profitable-path-in-a-tree",
        "description": "There is an undirected tree with `n` nodes labeled from `0` to `n - 1`, rooted at node `0`. You are given a 2D integer array `edges` of length `n - 1` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree.\n\n\nAt every node `i`, there is a gate. You are also given an array of even integers `amount`, where `amount[i]` represents:\n\n\n the price needed to open the gate at node `i`, if `amount[i]` is negative, or,\n the cash reward obtained on opening the gate at node `i`, otherwise.\n\n\nThe game goes on as follows:\n\n\n Initially, Alice is at node `0` and Bob is at node `bob`.\n At every second, Alice and Bob **each** move to an adjacent node. Alice moves towards some **leaf node**, while Bob moves towards node `0`.\n For **every** node along their path, Alice and Bob either spend money to open the gate at that node, or accept the reward. Note that:\n\t+ If the gate is **already open**, no price will be required, nor will there be any cash reward.\n\t+ If Alice and Bob reach the node **simultaneously**, they share the price/reward for opening the gate there. In other words, if the price to open the gate is `c`, then both Alice and Bob pay\u00a0`c / 2` each. Similarly, if the reward at the gate is `c`, both of them receive `c / 2` each.\n If Alice reaches a leaf node, she stops moving. Similarly, if Bob reaches node `0`, he stops moving. Note that these events are **independent** of each other.\n\n\nReturn *the **maximum** net income Alice can have if she travels towards the optimal leaf node.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** edges = [[0,1],[1,2],[1,3],[3,4]], bob = 3, amount = [-2,4,2,-4,6]",
                "Output": "** 6",
                "Explanation": "** \nThe above diagram represents the given tree. The game goes as follows:\n- Alice is initially on node 0, Bob on node 3. They open the gates of their respective nodes.\n  Alice's net income is now -2.\n- Both Alice and Bob move to node 1. \n\u00a0 Since they reach here simultaneously, they open the gate together and share the reward.\n\u00a0 Alice's net income becomes -2 + (4 / 2) = 0.\n- Alice moves on to node 3. Since Bob already opened its gate, Alice's income remains unchanged.\n\u00a0 Bob moves on to node 0, and stops moving.\n- Alice moves on to node 4 and opens the gate there. Her net income becomes 0 + 6 = 6.\nNow, neither Alice nor Bob can make any further moves, and the game ends.\nIt is not possible for Alice to get a higher net income."
            },
            {
                "Input": "** edges = [[0,1]], bob = 1, amount = [-7280,2350]",
                "Output": "** -7280",
                "Explanation": "** \nAlice follows the path 0->1 whereas Bob follows the path 1->0.\nThus, Alice opens the gate at node 0 only. Hence, her net income is -7280."
            }
        ]
    },
    {
        "Title": "Split Message Based on Limit",
        "slug": "split-message-based-on-limit",
        "description": "You are given a string, `message`, and a positive integer, `limit`.\n\n\nYou must **split** `message` into one or more **parts** based on `limit`. Each resulting part should have the suffix `\"<a/b>\"`, where `\"b\"` is to be **replaced** with the total number of parts and `\"a\"` is to be **replaced** with the index of the part, starting from `1` and going up to `b`. Additionally, the length of each resulting part (including its suffix) should be **equal** to `limit`, except for the last part whose length can be **at most** `limit`.\n\n\nThe resulting parts should be formed such that when their suffixes are removed and they are all concatenated **in order**, they should be equal to `message`. Also, the result should contain as few parts as possible.\n\n\nReturn *the parts* `message` *would be split into as an array of strings*. If it is impossible to split `message` as required, return *an empty array*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** message = \"this is really a very awesome message\", limit = 9",
                "Output": "** [\"thi<1/14>\",\"s i<2/14>\",\"s r<3/14>\",\"eal<4/14>\",\"ly <5/14>\",\"a v<6/14>\",\"ery<7/14>\",\" aw<8/14>\",\"eso<9/14>\",\"me<10/14>\",\" m<11/14>\",\"es<12/14>\",\"sa<13/14>\",\"ge<14/14>\"]",
                "Explanation": "**\nThe first 9 parts take 3 characters each from the beginning of message.\nThe next 5 parts take 2 characters each to finish splitting message. \nIn this example, each part, including the last, has length 9. \nIt can be shown it is not possible to split message into less than 14 parts."
            },
            {
                "Input": "** message = \"short message\", limit = 15",
                "Output": "** [\"short mess<1/2>\",\"age<2/2>\"]",
                "Explanation": "**\nUnder the given constraints, the string can be split into two parts: \n- The first part comprises of the first 10 characters, and has a length 15.\n- The next part comprises of the last 3 characters, and has a length 8."
            }
        ]
    },
    {
        "Title": "Convert the Temperature",
        "slug": "convert-the-temperature",
        "description": "You are given a non-negative floating point number rounded to two decimal places `celsius`, that denotes the **temperature in Celsius**.\n\n\nYou should convert Celsius into **Kelvin** and **Fahrenheit** and return it as an array `ans = [kelvin, fahrenheit]`.\n\n\nReturn *the array `ans`.* Answers within `10-5` of the actual answer will be accepted.\n\n\nNote that:\n\n\n `Kelvin = Celsius + 273.15`\n `Fahrenheit = Celsius * 1.80 + 32.00`\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** celsius = 36.50",
                "Output": "** [309.65000,97.70000]",
                "Explanation": "** Temperature at 36.50 Celsius converted in Kelvin is 309.65 and converted in Fahrenheit is 97.70."
            },
            {
                "Input": "** celsius = 122.11",
                "Output": "** [395.26000,251.79800]",
                "Explanation": "** Temperature at 122.11 Celsius converted in Kelvin is 395.26 and converted in Fahrenheit is 251.798."
            }
        ]
    },
    {
        "Title": "Number of Subarrays With LCM Equal to K",
        "slug": "number-of-subarrays-with-lcm-equal-to-k",
        "description": "Given an integer array `nums` and an integer `k`, return *the number of **subarrays** of* `nums` *where the least common multiple of the subarray's elements is* `k`.\n\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\n\nThe **least common multiple of an array** is the smallest positive integer that is divisible by all the array elements.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [3,6,2,7,1], k = 6",
                "Output": "** 4",
                "Explanation": "** The subarrays of nums where 6 is the least common multiple of all the subarray's elements are:\n- [**3**,**6**,2,7,1]\n- [**3**,**6**,**2**,7,1]\n- [3,**6**,2,7,1]\n- [3,**6**,**2**,7,1]"
            },
            {
                "Input": "** nums = [3], k = 2",
                "Output": "** 0",
                "Explanation": "** There are no subarrays of nums where 2 is the least common multiple of all the subarray's elements."
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Sort a Binary Tree by Level",
        "slug": "minimum-number-of-operations-to-sort-a-binary-tree-by-level",
        "description": "You are given the `root` of a binary tree with **unique values**.\n\n\nIn one operation, you can choose any two nodes **at the same level** and swap their values.\n\n\nReturn *the minimum number of operations needed to make the values at each level sorted in a **strictly increasing order***.\n\n\nThe **level** of a node is the number of edges along the path between it and the root node*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [1,4,3,7,6,8,5,null,null,null,null,9,null,10]",
                "Output": "** 3",
                "Explanation": "**\n- Swap 4 and 3. The 2nd level becomes [3,4].\n- Swap 7 and 5. The 3rd level becomes [5,6,8,7].\n- Swap 8 and 7. The 3rd level becomes [5,6,7,8].\nWe used 3 operations so return 3.\nIt can be proven that 3 is the minimum number of operations needed."
            },
            {
                "Input": "** root = [1,3,2,7,6,5,4]",
                "Output": "** 3",
                "Explanation": "**\n- Swap 3 and 2. The 2nd level becomes [2,3].\n- Swap 7 and 4. The 3rd level becomes [4,6,5,7].\n- Swap 6 and 5. The 3rd level becomes [4,5,6,7].\nWe used 3 operations so return 3.\nIt can be proven that 3 is the minimum number of operations needed."
            },
            {
                "Input": "** root = [1,2,3,4,5,6]",
                "Output": "** 0",
                "Explanation": "** Each level is already sorted in increasing order so return 0."
            }
        ]
    },
    {
        "Title": "Maximum Number of Non-overlapping Palindrome Substrings",
        "slug": "maximum-number-of-non-overlapping-palindrome-substrings",
        "description": "You are given a string `s` and a **positive** integer `k`.\n\n\nSelect a set of **non-overlapping** substrings from the string `s` that satisfy the following conditions:\n\n\n The **length** of each substring is **at least** `k`.\n Each substring is a **palindrome**.\n\n\nReturn *the **maximum** number of substrings in an optimal selection*.\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"abaccdbbd\", k = 3",
                "Output": "** 2",
                "Explanation": "** We can select the substrings underlined in s = \"**aba**cc**dbbd**\". Both \"aba\" and \"dbbd\" are palindromes and have a length of at least k = 3.\nIt can be shown that we cannot find a selection with more than two valid substrings."
            },
            {
                "Input": "** s = \"adbcda\", k = 2",
                "Output": "** 0",
                "Explanation": "** There is no palindrome substring of length at least 2 in the string."
            }
        ]
    },
    {
        "Title": "Number of Unequal Triplets in Array",
        "slug": "number-of-unequal-triplets-in-array",
        "description": "You are given a **0-indexed** array of positive integers `nums`. Find the number of triplets `(i, j, k)` that meet the following conditions:\n\n\n `0 <= i < j < k < nums.length`\n `nums[i]`, `nums[j]`, and `nums[k]` are **pairwise distinct**.\n\t+ In other words, `nums[i] != nums[j]`, `nums[i] != nums[k]`, and `nums[j] != nums[k]`.\n\n\nReturn *the number of triplets that meet the conditions.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [4,4,2,4,3]",
                "Output": "** 3",
                "Explanation": "** The following triplets meet the conditions:\n- (0, 2, 4) because 4 != 2 != 3\n- (1, 2, 4) because 4 != 2 != 3\n- (2, 3, 4) because 2 != 4 != 3\nSince there are 3 triplets, we return 3.\nNote that (2, 0, 4) is not a valid triplet because 2 > 0."
            },
            {
                "Input": "** nums = [1,1,1,1,1]",
                "Output": "** 0",
                "Explanation": "** No triplets meet the conditions so we return 0."
            }
        ]
    },
    {
        "Title": "Closest Nodes Queries in a Binary Search Tree",
        "slug": "closest-nodes-queries-in-a-binary-search-tree",
        "description": "You are given the `root` of a **binary search tree** and an array `queries` of size `n` consisting of positive integers.\n\n\nFind a **2D** array `answer` of size `n` where `answer[i] = [mini, maxi]`:\n\n\n `mini` is the **largest** value in the tree that is smaller than or equal to `queries[i]`. If a such value does not exist, add `-1` instead.\n `maxi` is the **smallest** value in the tree that is greater than or equal to `queries[i]`. If a such value does not exist, add `-1` instead.\n\n\nReturn *the array* `answer`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [6,2,13,1,4,9,15,null,null,null,null,null,null,14], queries = [2,5,16]",
                "Output": "** [[2,2],[4,6],[15,-1]]",
                "Explanation": "** We answer the queries in the following way:\n- The largest number that is smaller or equal than 2 in the tree is 2, and the smallest number that is greater or equal than 2 is still 2. So the answer for the first query is [2,2].\n- The largest number that is smaller or equal than 5 in the tree is 4, and the smallest number that is greater or equal than 5 is 6. So the answer for the second query is [4,6].\n- The largest number that is smaller or equal than 16 in the tree is 15, and the smallest number that is greater or equal than 16 does not exist. So the answer for the third query is [15,-1]."
            },
            {
                "Input": "** root = [4,null,9], queries = [3]",
                "Output": "** [[-1,4]]",
                "Explanation": "** The largest number that is smaller or equal to 3 in the tree does not exist, and the smallest number that is greater or equal to 3 is 4. So the answer for the query is [-1,4]."
            }
        ]
    },
    {
        "Title": "Minimum Fuel Cost to Report to the Capital",
        "slug": "minimum-fuel-cost-to-report-to-the-capital",
        "description": "There is a tree (i.e., a connected, undirected graph with no cycles) structure country network consisting of `n` cities numbered from `0` to `n - 1` and exactly `n - 1` roads. The capital city is city `0`. You are given a 2D integer array `roads` where `roads[i] = [ai, bi]` denotes that there exists a **bidirectional road** connecting cities `ai` and `bi`.\n\n\nThere is a meeting for the representatives of each city. The meeting is in the capital city.\n\n\nThere is a car in each city. You are given an integer `seats` that indicates the number of seats in each car.\n\n\nA representative can use the car in their city to travel or change the car and ride with another representative. The cost of traveling between two cities is one liter of fuel.\n\n\nReturn *the minimum number of liters of fuel to reach the capital city*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** roads = [[0,1],[0,2],[0,3]], seats = 5",
                "Output": "** 3",
                "Explanation": "** \n- Representative1 goes directly to the capital with 1 liter of fuel.\n- Representative2 goes directly to the capital with 1 liter of fuel.\n- Representative3 goes directly to the capital with 1 liter of fuel.\nIt costs 3 liters of fuel at minimum. \nIt can be proven that 3 is the minimum number of liters of fuel needed."
            },
            {
                "Input": "** roads = [[3,1],[3,2],[1,0],[0,4],[0,5],[4,6]], seats = 2",
                "Output": "** 7",
                "Explanation": "** \n- Representative2 goes directly to city 3 with 1 liter of fuel.\n- Representative2 and representative3 go together to city 1 with 1 liter of fuel.\n- Representative2 and representative3 go together to the capital with 1 liter of fuel.\n- Representative1 goes directly to the capital with 1 liter of fuel.\n- Representative5 goes directly to the capital with 1 liter of fuel.\n- Representative6 goes directly to city 4 with 1 liter of fuel.\n- Representative4 and representative6 go together to the capital with 1 liter of fuel.\nIt costs 7 liters of fuel at minimum. \nIt can be proven that 7 is the minimum number of liters of fuel needed."
            },
            {
                "Input": "** roads = [], seats = 1",
                "Output": "** 0",
                "Explanation": "** No representatives need to travel to the capital city."
            }
        ]
    },
    {
        "Title": "Number of Beautiful Partitions",
        "slug": "number-of-beautiful-partitions",
        "description": "You are given a string `s` that consists of the digits `'1'` to `'9'` and two integers `k` and `minLength`.\n\n\nA partition of `s` is called **beautiful** if:\n\n\n `s` is partitioned into `k` non-intersecting substrings.\n Each substring has a length of **at least** `minLength`.\n Each substring starts with a **prime** digit and ends with a **non-prime** digit. Prime digits are `'2'`, `'3'`, `'5'`, and `'7'`, and the rest of the digits are non-prime.\n\n\nReturn *the number of **beautiful** partitions of* `s`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"23542185131\", k = 3, minLength = 2",
                "Output": "** 3",
                "Explanation": "** There exists three ways to create a beautiful partition:\n\"2354 | 218 | 5131\"\n\"2354 | 21851 | 31\"\n\"2354218 | 51 | 31\""
            },
            {
                "Input": "** s = \"23542185131\", k = 3, minLength = 3",
                "Output": "** 1",
                "Explanation": "** There exists one way to create a beautiful partition: \"2354 | 218 | 5131\"."
            },
            {
                "Input": "** s = \"3312958\", k = 3, minLength = 1",
                "Output": "** 1",
                "Explanation": "** There exists one way to create a beautiful partition: \"331 | 29 | 58\"."
            }
        ]
    },
    {
        "Title": "Minimum Cuts to Divide a Circle",
        "slug": "minimum-cuts-to-divide-a-circle",
        "description": "A **valid cut** in a circle can be:\n\n\n A cut that is represented by a straight line that touches two points on the edge of the circle and passes through its center, or\n A cut that is represented by a straight line that touches one point on the edge of the circle and its center.\n\n\nSome valid and invalid cuts are shown in the figures below.\n\n\n![](https://assets.leetcode.com/uploads/2022/10/29/alldrawio.png)\nGiven the integer `n`, return *the **minimum** number of cuts needed to divide a circle into* `n` *equal slices*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Geometry"
        ],
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** 2",
                "Explanation": "** \nThe above figure shows how cutting the circle twice through the middle divides it into 4 equal slices."
            },
            {
                "Input": "** n = 3",
                "Output": "** 3",
                "Explanation": "**\nAt least 3 cuts are needed to divide the circle into 3 equal slices. \nIt can be shown that less than 3 cuts cannot result in 3 slices of equal size and shape.\nAlso note that the first cut will not divide the circle into distinct parts."
            }
        ]
    },
    {
        "Title": "Difference Between Ones and Zeros in Row and Column",
        "slug": "difference-between-ones-and-zeros-in-row-and-column",
        "description": "You are given a **0-indexed** `m x n` binary matrix `grid`.\n\n\nA **0-indexed** `m x n` difference matrix `diff` is created with the following procedure:\n\n\n Let the number of ones in the `ith` row be `onesRowi`.\n Let the number of ones in the `jth` column be `onesColj`.\n Let the number of zeros in the `ith` row be `zerosRowi`.\n Let the number of zeros in the `jth` column be `zerosColj`.\n `diff[i][j] = onesRowi + onesColj - zerosRowi - zerosColj`\n\n\nReturn *the difference matrix* `diff`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** grid = [[0,1,1],[1,0,1],[0,0,1]]",
                "Output": "** [[0,0,4],[0,0,4],[-2,-2,2]]",
                "Explanation": "**\n- diff[0][0] = onesRow0 + onesCol0 - zerosRow0 - zerosCol0 = 2 + 1 - 1 - 2 = 0 \n- diff[0][1] = onesRow0 + onesCol1 - zerosRow0 - zerosCol1 = 2 + 1 - 1 - 2 = 0 \n- diff[0][2] = onesRow0 + onesCol2 - zerosRow0 - zerosCol2 = 2 + 3 - 1 - 0 = 4 \n- diff[1][0] = onesRow1 + onesCol0 - zerosRow1 - zerosCol0 = 2 + 1 - 1 - 2 = 0 \n- diff[1][1] = onesRow1 + onesCol1 - zerosRow1 - zerosCol1 = 2 + 1 - 1 - 2 = 0 \n- diff[1][2] = onesRow1 + onesCol2 - zerosRow1 - zerosCol2 = 2 + 3 - 1 - 0 = 4 \n- diff[2][0] = onesRow2 + onesCol0 - zerosRow2 - zerosCol0 = 1 + 1 - 2 - 2 = -2\n- diff[2][1] = onesRow2 + onesCol1 - zerosRow2 - zerosCol1 = 1 + 1 - 2 - 2 = -2\n- diff[2][2] = onesRow2 + onesCol2 - zerosRow2 - zerosCol2 = 1 + 3 - 2 - 0 = 2"
            },
            {
                "Input": "** grid = [[1,1,1],[1,1,1]]",
                "Output": "** [[5,5,5],[5,5,5]]",
                "Explanation": "**\n- diff[0][0] = onesRow0 + onesCol0 - zerosRow0 - zerosCol0 = 3 + 2 - 0 - 0 = 5\n- diff[0][1] = onesRow0 + onesCol1 - zerosRow0 - zerosCol1 = 3 + 2 - 0 - 0 = 5\n- diff[0][2] = onesRow0 + onesCol2 - zerosRow0 - zerosCol2 = 3 + 2 - 0 - 0 = 5\n- diff[1][0] = onesRow1 + onesCol0 - zerosRow1 - zerosCol0 = 3 + 2 - 0 - 0 = 5\n- diff[1][1] = onesRow1 + onesCol1 - zerosRow1 - zerosCol1 = 3 + 2 - 0 - 0 = 5\n- diff[1][2] = onesRow1 + onesCol2 - zerosRow1 - zerosCol2 = 3 + 2 - 0 - 0 = 5"
            }
        ]
    },
    {
        "Title": "Minimum Penalty for a Shop",
        "slug": "minimum-penalty-for-a-shop",
        "description": "You are given the customer visit log of a shop represented by a **0-indexed** string `customers` consisting only of characters `'N'` and `'Y'`:\n\n\n if the `ith` character is `'Y'`, it means that customers come at the `ith` hour\n whereas `'N'` indicates that no customers come at the `ith` hour.\n\n\nIf the shop closes at the `jth` hour (`0 <= j <= n`), the **penalty** is calculated as follows:\n\n\n For every hour when the shop is open and no customers come, the penalty increases by `1`.\n For every hour when the shop is closed and customers come, the penalty increases by `1`.\n\n\nReturn *the **earliest** hour at which the shop must be closed to incur a **minimum** penalty.\n\n\nNote** that if a shop closes at the `jth` hour, it means the shop is closed at the hour `j`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** customers = \"YYNY\"",
                "Output": "** 2",
                "Explanation": "** \n- Closing the shop at the 0th hour incurs in 1+1+0+1 = 3 penalty.\n- Closing the shop at the 1st hour incurs in 0+1+0+1 = 2 penalty.\n- Closing the shop at the 2nd hour incurs in 0+0+0+1 = 1 penalty.\n- Closing the shop at the 3rd hour incurs in 0+0+1+1 = 2 penalty.\n- Closing the shop at the 4th hour incurs in 0+0+1+0 = 1 penalty.\nClosing the shop at 2nd or 4th hour gives a minimum penalty. Since 2 is earlier, the optimal closing time is 2."
            },
            {
                "Input": "** customers = \"NNNNN\"",
                "Output": "** 0",
                "Explanation": "** It is best to close the shop at the 0th hour as no customers arrive."
            },
            {
                "Input": "** customers = \"YYYY\"",
                "Output": "** 4",
                "Explanation": "** It is best to close the shop at the 4th hour as customers arrive at each hour."
            }
        ]
    },
    {
        "Title": "Count Palindromic Subsequences",
        "slug": "count-palindromic-subsequences",
        "description": "Given a string of digits `s`, return *the number of **palindromic subsequences** of* `s` *having length* `5`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\nNote:\n\n\n A string is **palindromic** if it reads the same forward and backward.\n A **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"103301\"",
                "Output": "** 2",
                "Explanation": "** \nThere are 6 possible subsequences of length 5: \"10330\",\"10331\",\"10301\",\"10301\",\"13301\",\"03301\". \nTwo of them (both equal to \"10301\") are palindromic."
            },
            {
                "Input": "** s = \"0000000\"",
                "Output": "** 21",
                "Explanation": "** All 21 subsequences are \"00000\", which is palindromic."
            },
            {
                "Input": "** s = \"9999900000\"",
                "Output": "** 2",
                "Explanation": "** The only two palindromic subsequences are \"99999\" and \"00000\"."
            }
        ]
    },
    {
        "Title": "Find the Pivot Integer",
        "slug": "find-the-pivot-integer",
        "description": "Given a positive integer `n`, find the **pivot integer** `x` such that:\n\n\n The sum of all elements between `1` and `x` inclusively equals the sum of all elements between `x` and `n` inclusively.\n\n\nReturn *the pivot integer* `x`. If no such integer exists, return `-1`. It is guaranteed that there will be at most one pivot index for the given input.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** n = 8",
                "Output": "** 6",
                "Explanation": "** 6 is the pivot integer since: 1 + 2 + 3 + 4 + 5 + 6 = 6 + 7 + 8 = 21."
            },
            {
                "Input": "** n = 1",
                "Output": "** 1",
                "Explanation": "** 1 is the pivot integer since: 1 = 1."
            },
            {
                "Input": "** n = 4",
                "Output": "** -1",
                "Explanation": "** It can be proved that no such integer exist."
            }
        ]
    },
    {
        "Title": "Append Characters to String to Make Subsequence",
        "slug": "append-characters-to-string-to-make-subsequence",
        "description": "You are given two strings `s` and `t` consisting of only lowercase English letters.\n\n\nReturn *the minimum number of characters that need to be appended to the end of* `s` *so that* `t` *becomes a **subsequence** of* `s`.\n\n\nA **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Two Pointers",
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"coaching\", t = \"coding\"",
                "Output": "** 4",
                "Explanation": "** Append the characters \"ding\" to the end of s so that s = \"coachingding\".\nNow, t is a subsequence of s (\"**co**aching**ding**\").\nIt can be shown that appending any 3 characters to the end of s will never make t a subsequence."
            },
            {
                "Input": "** s = \"abcde\", t = \"a\"",
                "Output": "** 0",
                "Explanation": "** t is already a subsequence of s (\"**a**bcde\")."
            },
            {
                "Input": "** s = \"z\", t = \"abcde\"",
                "Output": "** 5",
                "Explanation": "** Append the characters \"abcde\" to the end of s so that s = \"zabcde\".\nNow, t is a subsequence of s (\"z**abcde**\").\nIt can be shown that appending any 4 characters to the end of s will never make t a subsequence."
            }
        ]
    },
    {
        "Title": "Remove Nodes From Linked List",
        "slug": "remove-nodes-from-linked-list",
        "description": "You are given the `head` of a linked list.\n\n\nRemove every node which has a node with a greater value anywhere to the right side of it.\n\n\nReturn *the* `head` *of the modified linked list.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Stack",
            "Recursion",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** head = [5,2,13,3,8]",
                "Output": "** [13,8]",
                "Explanation": "** The nodes that should be removed are 5, 2 and 3.\n- Node 13 is to the right of node 5.\n- Node 13 is to the right of node 2.\n- Node 8 is to the right of node 3."
            }
        ]
    },
    {
        "Title": "Count Subarrays With Median K",
        "slug": "count-subarrays-with-median-k",
        "description": "You are given an array `nums` of size `n` consisting of **distinct** integers from `1` to `n` and a positive integer `k`.\n\n\nReturn *the number of non-empty subarrays in* `nums` *that have a **median** equal to* `k`.\n\n\nNote**:\n\n\n The median of an array is the **middle** element after sorting the array in **ascending** order. If the array is of even length, the median is the **left** middle element.\n\t+ For example, the median of `[2,3,1,4]` is `2`, and the median of `[8,4,3,5,1]` is `4`.\n A subarray is a contiguous part of an array.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [3,2,1,4,5], k = 4",
                "Output": "** 3",
                "Explanation": "** The subarrays that have a median equal to 4 are: [4], [4,5] and [1,4,5]."
            },
            {
                "Input": "** nums = [2,3,1], k = 3",
                "Output": "** 1",
                "Explanation": "** [3] is the only subarray that has a median equal to 3."
            }
        ]
    },
    {
        "Title": "Circular Sentence",
        "slug": "circular-sentence",
        "description": "A **sentence** is a list of words that are separated by a **single** space with no leading or trailing spaces.\n\n\n For example, `\"Hello World\"`, `\"HELLO\"`, `\"hello world hello world\"` are all sentences.\n\n\nWords consist of **only** uppercase and lowercase English letters. Uppercase and lowercase English letters are considered different.\n\n\nA sentence is **circular** if:\n\n\n The last character of a word is equal to the first character of the next word.\n The last character of the last word is equal to the first character of the first word.\n\n\nFor example, `\"leetcode exercises sound delightful\"`, `\"eetcode\"`, `\"leetcode eats soul\"` are all circular sentences. However, `\"Leetcode is cool\"`, `\"happy Leetcode\"`, `\"Leetcode\"` and `\"I like Leetcode\"` are **not** circular sentences.\n\n\nGiven a string `sentence`, return `true` *if it is circular*. Otherwise, return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** sentence = \"leetcode exercises sound delightful\"",
                "Output": "** true",
                "Explanation": "** The words in sentence are [\"leetcode\", \"exercises\", \"sound\", \"delightful\"].\n- leetcode's\u00a0last character is equal to exercises's first character.\n- exercises's\u00a0last character is equal to sound's first character.\n- sound's\u00a0last character is equal to delightful's first character.\n- delightful's\u00a0last character is equal to leetcode's first character.\nThe sentence is circular."
            },
            {
                "Input": "** sentence = \"eetcode\"",
                "Output": "** true",
                "Explanation": "** The words in sentence are [\"eetcode\"].\n- eetcode's\u00a0last character is equal to eetcode's first character.\nThe sentence is circular."
            },
            {
                "Input": "** sentence = \"Leetcode is cool\"",
                "Output": "** false",
                "Explanation": "** The words in sentence are [\"Leetcode\", \"is\", \"cool\"].\n- Leetcode's\u00a0last character is **not** equal to is's first character.\nThe sentence is **not** circular."
            }
        ]
    },
    {
        "Title": "Divide Players Into Teams of Equal Skill",
        "slug": "divide-players-into-teams-of-equal-skill",
        "description": "You are given a positive integer array `skill` of **even** length `n` where `skill[i]` denotes the skill of the `ith` player. Divide the players into `n / 2` teams of size `2` such that the total skill of each team is **equal**.\n\n\nThe **chemistry** of a team is equal to the **product** of the skills of the players on that team.\n\n\nReturn *the sum of the **chemistry** of all the teams, or return* `-1` *if there is no way to divide the players into teams such that the total skill of each team is equal.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** skill = [3,2,5,1,3,4]",
                "Output": "** 22",
                "Explanation": "** \nDivide the players into the following teams: (1, 5), (2, 4), (3, 3), where each team has a total skill of 6.\nThe sum of the chemistry of all the teams is: 1 * 5 + 2 * 4 + 3 * 3 = 5 + 8 + 9 = 22."
            },
            {
                "Input": "** skill = [3,4]",
                "Output": "** 12",
                "Explanation": "** \nThe two players form a team with a total skill of 7.\nThe chemistry of the team is 3 * 4 = 12."
            },
            {
                "Input": "** skill = [1,1,2,3]",
                "Output": "** -1",
                "Explanation": "** \nThere is no way to divide the players into teams such that the total skill of each team is equal."
            }
        ]
    },
    {
        "Title": "Minimum Score of a Path Between Two Cities",
        "slug": "minimum-score-of-a-path-between-two-cities",
        "description": "You are given a positive integer `n` representing `n` cities numbered from `1` to `n`. You are also given a **2D** array `roads` where `roads[i] = [ai, bi, distancei]` indicates that there is a **bidirectional** road between cities `ai` and `bi` with a distance equal to `distancei`. The cities graph is not necessarily connected.\n\n\nThe **score** of a path between two cities is defined as the **minimum** distance of a road in this path.\n\n\nReturn *the **minimum** possible score of a path between cities* `1` *and* `n`.\n\n\nNote**:\n\n\n A path is a sequence of roads between two cities.\n It is allowed for a path to contain the same road **multiple** times, and you can visit cities `1` and `n` multiple times along the path.\n The test cases are generated such that there is **at least** one path between `1` and `n`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** n = 4, roads = [[1,2,9],[2,3,6],[2,4,5],[1,4,7]]",
                "Output": "** 5",
                "Explanation": "** The path from city 1 to 4 with the minimum score is: 1 -> 2 -> 4. The score of this path is min(9,5) = 5.\nIt can be shown that no other path has less score."
            },
            {
                "Input": "** n = 4, roads = [[1,2,2],[1,3,4],[3,4,7]]",
                "Output": "** 2",
                "Explanation": "** The path from city 1 to 4 with the minimum score is: 1 -> 2 -> 1 -> 3 -> 4. The score of this path is min(2,2,4,7) = 2."
            }
        ]
    },
    {
        "Title": "Divide Nodes Into the Maximum Number of Groups",
        "slug": "divide-nodes-into-the-maximum-number-of-groups",
        "description": "You are given a positive integer `n` representing the number of nodes in an **undirected** graph. The nodes are labeled from `1` to `n`.\n\n\nYou are also given a 2D integer array `edges`, where `edges[i] = [ai, bi]` indicates that there is a **bidirectional** edge between nodes `ai` and `bi`. **Notice** that the given graph may be disconnected.\n\n\nDivide the nodes of the graph into `m` groups (**1-indexed**) such that:\n\n\n Each node in the graph belongs to exactly one group.\n For every pair of nodes in the graph that are connected by an edge `[ai, bi]`, if `ai` belongs to the group with index `x`, and `bi` belongs to the group with index `y`, then `|y - x| = 1`.\n\n\nReturn *the maximum number of groups (i.e., maximum* `m`*) into which you can divide the nodes*. Return `-1` *if it is impossible to group the nodes with the given conditions*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Breadth-First Search",
            "Union Find",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** n = 6, edges = [[1,2],[1,4],[1,5],[2,6],[2,3],[4,6]]",
                "Output": "** 4",
                "Explanation": "** As shown in the image we:\n- Add node 5 to the first group.\n- Add node 1 to the second group.\n- Add nodes 2 and 4 to the third group.\n- Add nodes 3 and 6 to the fourth group.\nWe can see that every edge is satisfied.\nIt can be shown that that if we create a fifth group and move any node from the third or fourth group to it, at least on of the edges will not be satisfied."
            }
        ]
    },
    {
        "Title": "Maximum Value of a String in an Array",
        "slug": "maximum-value-of-a-string-in-an-array",
        "description": "The **value** of an alphanumeric string can be defined as:\n\n\n The **numeric** representation of the string in base `10`, if it comprises of digits **only**.\n The **length** of the string, otherwise.\n\n\nGiven an array `strs` of alphanumeric strings, return *the **maximum value** of any string in* `strs`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "examples": [
            {
                "Input": "** strs = [\"alic3\",\"bob\",\"3\",\"4\",\"00000\"]",
                "Output": "** 5",
                "Explanation": "** \n- \"alic3\" consists of both letters and digits, so its value is its length, i.e. 5.\n- \"bob\" consists only of letters, so its value is also its length, i.e. 3.\n- \"3\" consists only of digits, so its value is its numeric equivalent, i.e. 3.\n- \"4\" also consists only of digits, so its value is 4.\n- \"00000\" consists only of digits, so its value is 0.\nHence, the maximum value is 5, of \"alic3\"."
            },
            {
                "Input": "** strs = [\"1\",\"01\",\"001\",\"0001\"]",
                "Output": "** 1",
                "Explanation": "** \nEach string in the array has value 1. Hence, we return 1."
            }
        ]
    },
    {
        "Title": "Maximum Star Sum of a Graph",
        "slug": "maximum-star-sum-of-a-graph",
        "description": "There is an undirected graph consisting of `n` nodes numbered from `0` to `n - 1`. You are given a **0-indexed** integer array `vals` of length `n` where `vals[i]` denotes the value of the `ith` node.\n\n\nYou are also given a 2D integer array `edges` where `edges[i] = [ai, bi]` denotes that there exists an **undirected** edge connecting nodes `ai` and `bi.`\n\n\nA **star graph** is a subgraph of the given graph having a center node containing `0` or more neighbors. In other words, it is a subset of edges of the given graph such that there exists a common node for all edges.\n\n\nThe image below shows star graphs with `3` and `4` neighbors respectively, centered at the blue node.\n\n\n![](https://assets.leetcode.com/uploads/2022/11/07/max-star-sum-descdrawio.png)\nThe **star sum** is the sum of the values of all the nodes present in the star graph.\n\n\nGiven an integer `k`, return *the **maximum star sum** of a star graph containing **at most*** `k` *edges.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Graph",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** vals = [1,2,3,4,10,-10,-20], edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[3,6]], k = 2",
                "Output": "** 16",
                "Explanation": "** The above diagram represents the input graph.\nThe star graph with the maximum star sum is denoted by blue. It is centered at 3 and includes its neighbors 1 and 4.\nIt can be shown it is not possible to get a star graph with a sum greater than 16."
            }
        ]
    },
    {
        "Title": "Frog Jump II",
        "slug": "frog-jump-ii",
        "description": "You are given a **0-indexed** integer array `stones` sorted in **strictly increasing order** representing the positions of stones in a river.\n\n\nA frog, initially on the first stone, wants to travel to the last stone and then return to the first stone. However, it can jump to any stone **at most once**.\n\n\nThe **length** of a jump is the absolute difference between the position of the stone the frog is currently on and the position of the stone to which the frog jumps.\n\n\n More formally, if the frog is at `stones[i]` and is jumping to `stones[j]`, the length of the jump is `|stones[i] - stones[j]|`.\n\n\nThe **cost** of a path is the **maximum length of a jump** among all jumps in the path.\n\n\nReturn *the **minimum** cost of a path for the frog*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** stones = [0,2,5,6,7]",
                "Output": "** 5",
                "Explanation": "** The above figure represents one of the optimal paths the frog can take.\nThe cost of this path is 5, which is the maximum length of a jump.\nSince it is not possible to achieve a cost of less than 5, we return it."
            },
            {
                "Input": "** stones = [0,3,9]",
                "Output": "** 9",
                "Explanation": "** \nThe frog can jump directly to the last stone and come back to the first stone. \nIn this case, the length of each jump will be 9. The cost for the path will be max(9, 9) = 9.\nIt can be shown that this is the minimum achievable cost."
            }
        ]
    },
    {
        "Title": "Minimum Total Cost to Make Arrays Unequal",
        "slug": "minimum-total-cost-to-make-arrays-unequal",
        "description": "You are given two **0-indexed** integer arrays `nums1` and `nums2`, of equal length `n`.\n\n\nIn one operation, you can swap the values of any two indices of `nums1`. The **cost** of this operation is the **sum** of the indices.\n\n\nFind the **minimum** total cost of performing the given operation **any** number of times such that `nums1[i] != nums2[i]` for all `0 <= i <= n - 1` after performing all the operations.\n\n\nReturn *the **minimum total cost** such that* `nums1` and `nums2` *satisfy the above condition*. In case it is not possible, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5]",
                "Output": "** 10",
                "Explanation": "** \nOne of the ways we can perform the operations is:\n- Swap values at indices 0 and 3, incurring cost = 0 + 3 = 3. Now, nums1 = [4,2,3,1,5]\n- Swap values at indices 1 and 2, incurring cost = 1 + 2 = 3. Now, nums1 = [4,3,2,1,5].\n- Swap values at indices 0 and 4, incurring cost = 0 + 4 = 4. Now, nums1 =[5,3,2,1,4].\nWe can see that for each index i, nums1[i] != nums2[i]. The cost required here is 10.\nNote that there are other ways to swap values, but it can be proven that it is not possible to obtain a cost less than 10."
            },
            {
                "Input": "** nums1 = [2,2,2,1,3], nums2 = [1,2,2,3,3]",
                "Output": "** 10",
                "Explanation": "** \nOne of the ways we can perform the operations is:\n- Swap values at indices 2 and 3, incurring cost = 2 + 3 = 5. Now, nums1 = [2,2,1,2,3].\n- Swap values at indices 1 and 4, incurring cost = 1 + 4 = 5. Now, nums1 = [2,3,1,2,2].\nThe total cost needed here is 10, which is the minimum possible."
            },
            {
                "Input": "** nums1 = [1,2,2], nums2 = [1,2,2]",
                "Output": "** -1",
                "Explanation": "** \nIt can be shown that it is not possible to satisfy the given conditions irrespective of the number of operations we perform.\nHence, we return -1."
            }
        ]
    },
    {
        "Title": "Delete Greatest Value in Each Row",
        "slug": "delete-greatest-value-in-each-row",
        "description": "You are given an `m x n` matrix `grid` consisting of positive integers.\n\n\nPerform the following operation until `grid` becomes empty:\n\n\n Delete the element with the greatest value from each row. If multiple such elements exist, delete any of them.\n Add the maximum of deleted elements to the answer.\n\n\nNote** that the number of columns decreases by one after each operation.\n\n\nReturn *the answer after performing the operations described above*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting",
            "Heap (Priority Queue)",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,2,4],[3,3,1]]",
                "Output": "** 8",
                "Explanation": "** The diagram above shows the removed values in each step.\n- In the first operation, we remove 4 from the first row and 3 from the second row (notice that, there are two cells with value 3 and we can remove any of them). We add 4 to the answer.\n- In the second operation, we remove 2 from the first row and 3 from the second row. We add 3 to the answer.\n- In the third operation, we remove 1 from the first row and 1 from the second row. We add 1 to the answer.\nThe final answer = 4 + 3 + 1 = 8."
            },
            {
                "Input": "** grid = [[10]]",
                "Output": "** 10",
                "Explanation": "** The diagram above shows the removed values in each step.\n- In the first operation, we remove 10 from the first row. We add 10 to the answer.\nThe final answer = 10."
            }
        ]
    },
    {
        "Title": "Longest Square Streak in an Array",
        "slug": "longest-square-streak-in-an-array",
        "description": "You are given an integer array `nums`. A subsequence of `nums` is called a **square streak** if:\n\n\n The length of the subsequence is at least `2`, and\n **after** sorting the subsequence, each element (except the first element) is the **square** of the previous number.\n\n\nReturn *the length of the **longest square streak** in* `nums`*, or return* `-1` *if there is no **square streak**.\n\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Dynamic Programming",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [4,3,6,16,8,2]",
                "Output": "** 3",
                "Explanation": "** Choose the subsequence [4,16,2]. After sorting it, it becomes [2,4,16].\n- 4 = 2 * 2.\n- 16 = 4 * 4.\nTherefore, [4,16,2] is a square streak.\nIt can be shown that every subsequence of length 4 is not a square streak."
            },
            {
                "Input": "** nums = [2,3,5,6,7]",
                "Output": "** -1",
                "Explanation": "** There is no square streak in nums so return -1."
            }
        ]
    },
    {
        "Title": "Design Memory Allocator",
        "slug": "design-memory-allocator",
        "description": "You are given an integer `n` representing the size of a **0-indexed** memory array. All memory units are initially free.\n\n\nYou have a memory allocator with the following functionalities:\n\n\n1. **Allocate** a block of `size` consecutive free memory units and assign it the id `mID`.\n2. **Free** all memory units with the given id `mID`.\n\n\nNote** that:\n\n\n Multiple blocks can be allocated to the same `mID`.\n You should free all the memory units with `mID`, even if they were allocated in different blocks.\n\n\nImplement the `Allocator` class:\n\n\n `Allocator(int n)` Initializes an `Allocator` object with a memory array of size `n`.\n `int allocate(int size, int mID)` Find the **leftmost** block of `size` **consecutive** free memory units and allocate it with the id `mID`. Return the block's first index. If such a block does not exist, return `-1`.\n `int free(int mID)` Free all memory units with the id `mID`. Return the number of memory units you have freed.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Design",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "[\"Allocator\", \"allocate\", \"allocate\", \"allocate\", \"free\", \"allocate\", \"allocate\", \"allocate\", \"free\", \"allocate\", \"free\"]\n[[10], [1, 1], [1, 2], [1, 3], [2], [3, 4], [1, 1], [1, 1], [1], [10, 2], [7]]",
                "Output": "[null, 0, 1, 2, 1, 3, 1, 6, 3, -1, 0]",
                "Explanation": "Allocator loc = new Allocator(10); // Initialize a memory array of size 10. All memory units are initially free.\nloc.allocate(1, 1); // The leftmost block's first index is 0. The memory array becomes [**1**,_,_,_,_,_,_,_,_,_]. We return 0.\nloc.allocate(1, 2); // The leftmost block's first index is 1. The memory array becomes [1,**2**,_,_,_,_,_,_,_,_]. We return 1.\nloc.allocate(1, 3); // The leftmost block's first index is 2. The memory array becomes [1,2,**3**,_,_,_,_,_,_,_]. We return 2.\nloc.free(2); // Free all memory units with mID 2. The memory array becomes [1,_, 3,_,_,_,_,_,_,_]. We return 1 since there is only 1 unit with mID 2.\nloc.allocate(3, 4); // The leftmost block's first index is 3. The memory array becomes [1,_,3,**4**,**4**,**4**,_,_,_,_]. We return 3.\nloc.allocate(1, 1); // The leftmost block's first index is 1. The memory array becomes [1,**1**,3,4,4,4,_,_,_,_]. We return 1.\nloc.allocate(1, 1); // The leftmost block's first index is 6. The memory array becomes [1,1,3,4,4,4,**1**,_,_,_]. We return 6.\nloc.free(1); // Free all memory units with mID 1. The memory array becomes [_,_,3,4,4,4,_,_,_,_]. We return 3 since there are 3 units with mID 1.\nloc.allocate(10, 2); // We can not find any free block with 10 consecutive free memory units, so we return -1.\nloc.free(7); // Free all memory units with mID 7. The memory array remains the same since there is no memory unit with mID 7. We return 0."
            }
        ]
    },
    {
        "Title": "Maximum Number of Points From Grid Queries",
        "slug": "maximum-number-of-points-from-grid-queries",
        "description": "You are given an `m x n` integer matrix `grid` and an array `queries` of size `k`.\n\n\nFind an array `answer` of size `k` such that for each integer `queries[i]` you start in the **top left** cell of the matrix and repeat the following process:\n\n\n If `queries[i]` is **strictly** greater than the value of the current cell that you are in, then you get one point if it is your first time visiting this cell, and you can move to any **adjacent** cell in all `4` directions: up, down, left, and right.\n Otherwise, you do not get any points, and you end this process.\n\n\nAfter the process, `answer[i]` is the **maximum** number of points you can get. **Note** that for each query you are allowed to visit the same cell **multiple** times.\n\n\nReturn *the resulting array* `answer`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Two Pointers",
            "Breadth-First Search",
            "Union Find",
            "Sorting",
            "Heap (Priority Queue)",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,2,3],[2,5,7],[3,5,1]], queries = [5,6,2]",
                "Output": "** [5,8,1]",
                "Explanation": "** The diagrams above show which cells we visit to get points for each query."
            },
            {
                "Input": "** grid = [[5,2,1],[1,1,2]], queries = [3]",
                "Output": "** [0]",
                "Explanation": "** We can not get any points because the value of the top left cell is already greater than or equal to 3."
            }
        ]
    },
    {
        "Title": "Count Pairs Of Similar Strings",
        "slug": "count-pairs-of-similar-strings",
        "description": "You are given a **0-indexed** string array `words`.\n\n\nTwo strings are **similar** if they consist of the same characters.\n\n\n For example, `\"abca\"` and `\"cba\"` are similar since both consist of characters `'a'`, `'b'`, and `'c'`.\n However, `\"abacba\"` and `\"bcfd\"` are not similar since they do not consist of the same characters.\n\n\nReturn *the number of pairs* `(i, j)` *such that* `0 <= i < j <= word.length - 1` *and the two strings* `words[i]` *and* `words[j]` *are similar*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** words = [\"aba\",\"aabb\",\"abcd\",\"bac\",\"aabc\"]",
                "Output": "** 2",
                "Explanation": "** There are 2 pairs that satisfy the conditions:\n- i = 0 and j = 1 : both words[0] and words[1] only consist of characters 'a' and 'b'. \n- i = 3 and j = 4 : both words[3] and words[4] only consist of characters 'a', 'b', and 'c'."
            },
            {
                "Input": "** words = [\"aabb\",\"ab\",\"ba\"]",
                "Output": "** 3",
                "Explanation": "** There are 3 pairs that satisfy the conditions:\n- i = 0 and j = 1 : both words[0] and words[1] only consist of characters 'a' and 'b'. \n- i = 0 and j = 2 : both words[0] and words[2] only consist of characters 'a' and 'b'.\n- i = 1 and j = 2 : both words[1] and words[2] only consist of characters 'a' and 'b'."
            },
            {
                "Input": "** words = [\"nba\",\"cba\",\"dba\"]",
                "Output": "** 0",
                "Explanation": "** Since there does not exist any pair that satisfies the conditions, we return 0."
            }
        ]
    },
    {
        "Title": "Smallest Value After Replacing With Sum of Prime Factors",
        "slug": "smallest-value-after-replacing-with-sum-of-prime-factors",
        "description": "You are given a positive integer `n`.\n\n\nContinuously replace `n` with the sum of its **prime factors**.\n\n\n Note that if a prime factor divides `n` multiple times, it should be included in the sum as many times as it divides `n`.\n\n\nReturn *the smallest value* `n` *will take on.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Simulation",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** n = 15",
                "Output": "** 5",
                "Explanation": "** Initially, n = 15.\n15 = 3 * 5, so replace n with 3 + 5 = 8.\n8 = 2 * 2 * 2, so replace n with 2 + 2 + 2 = 6.\n6 = 2 * 3, so replace n with 2 + 3 = 5.\n5 is the smallest value n will take on."
            },
            {
                "Input": "** n = 3",
                "Output": "** 3",
                "Explanation": "** Initially, n = 3.\n3 is the smallest value n will take on."
            }
        ]
    },
    {
        "Title": "Add Edges to Make Degrees of All Nodes Even",
        "slug": "add-edges-to-make-degrees-of-all-nodes-even",
        "description": "There is an **undirected** graph consisting of `n` nodes numbered from `1` to `n`. You are given the integer `n` and a **2D** array `edges` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi`. The graph can be disconnected.\n\n\nYou can add **at most** two additional edges (possibly none) to this graph so that there are no repeated edges and no self-loops.\n\n\nReturn `true` *if it is possible to make the degree of each node in the graph even, otherwise return* `false`*.\n\n\nThe degree of a node is the number of edges connected to it.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** n = 5, edges = [[1,2],[2,3],[3,4],[4,2],[1,4],[2,5]]",
                "Output": "** true",
                "Explanation": "** The above diagram shows a valid way of adding an edge.\nEvery node in the resulting graph is connected to an even number of edges."
            },
            {
                "Input": "** n = 4, edges = [[1,2],[3,4]]",
                "Output": "** true",
                "Explanation": "** The above diagram shows a valid way of adding two edges."
            },
            {
                "Input": "** n = 4, edges = [[1,2],[1,3],[1,4]]",
                "Output": "** false",
                "Explanation": "** It is not possible to obtain a valid graph with adding at most 2 edges."
            }
        ]
    },
    {
        "Title": "Cycle Length Queries in a Tree",
        "slug": "cycle-length-queries-in-a-tree",
        "description": "You are given an integer `n`. There is a **complete binary tree** with `2n - 1` nodes. The root of that tree is the node with the value `1`, and every node with a value `val` in the range `[1, 2n - 1 - 1]` has two children where:\n\n\n The left node has the value `2 * val`, and\n The right node has the value `2 * val + 1`.\n\n\nYou are also given a 2D integer array `queries` of length `m`, where `queries[i] = [ai, bi]`. For each query, solve the following problem:\n\n\n1. Add an edge between the nodes with values `ai` and `bi`.\n2. Find the length of the cycle in the graph.\n3. Remove the added edge between nodes with values `ai` and `bi`.\n\n\nNote** that:\n\n\n A **cycle** is a path that starts and ends at the same node, and each edge in the path is visited only once.\n The length of a cycle is the number of edges visited in the cycle.\n There could be multiple edges between two nodes in the tree after adding the edge of the query.\n\n\nReturn *an array* `answer` *of length* `m` *where* `answer[i]` *is the answer to the* `ith` *query.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** n = 3, queries = [[5,3],[4,7],[2,3]]",
                "Output": "** [4,5,3]",
                "Explanation": "** The diagrams above show the tree of 23 - 1 nodes. Nodes colored in red describe the nodes in the cycle after adding the edge.\n- After adding the edge between nodes 3 and 5, the graph contains a cycle of nodes [5,2,1,3]. Thus answer to the first query is 4. We delete the added edge and process the next query.\n- After adding the edge between nodes 4 and 7, the graph contains a cycle of nodes [4,2,1,3,7]. Thus answer to the second query is 5. We delete the added edge and process the next query.\n- After adding the edge between nodes 2 and 3, the graph contains a cycle of nodes [2,1,3]. Thus answer to the third query is 3. We delete the added edge."
            },
            {
                "Input": "** n = 2, queries = [[1,2]]",
                "Output": "** [2]",
                "Explanation": "** The diagram above shows the tree of 22 - 1 nodes. Nodes colored in red describe the nodes in the cycle after adding the edge.\n- After adding the edge between nodes 1 and 2, the graph contains a cycle of nodes [2,1]. Thus answer for the first query is 2. We delete the added edge."
            }
        ]
    },
    {
        "Title": "Maximum Enemy Forts That Can Be Captured",
        "slug": "maximum-enemy-forts-that-can-be-captured",
        "description": "You are given a **0-indexed** integer array `forts` of length `n` representing the positions of several forts. `forts[i]` can be `-1`, `0`, or `1` where:\n\n\n `-1` represents there is **no fort** at the `ith` position.\n `0` indicates there is an **enemy** fort at the `ith` position.\n `1` indicates the fort at the `ith` the position is under your command.\n\n\nNow you have decided to move your army from one of your forts at position `i` to an empty position `j` such that:\n\n\n `0 <= i, j <= n - 1`\n The army travels over enemy forts **only**. Formally, for all `k` where `min(i,j) < k < max(i,j)`, `forts[k] == 0.`\n\n\nWhile moving the army, all the enemy forts that come in the way are **captured**.\n\n\nReturn *the **maximum** number of enemy forts that can be captured*. In case it is **impossible** to move your army, or you do not have any fort under your command, return `0`*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** forts = [1,0,0,-1,0,0,0,0,1]",
                "Output": "** 4",
                "Explanation": "**\n- Moving the army from position 0 to position 3 captures 2 enemy forts, at 1 and 2.\n- Moving the army from position 8 to position 3 captures 4 enemy forts.\nSince 4 is the maximum number of enemy forts that can be captured, we return 4."
            },
            {
                "Input": "** forts = [0,0,1,-1]",
                "Output": "** 0",
                "Explanation": "** Since no enemy fort can be captured, 0 is returned."
            }
        ]
    },
    {
        "Title": "Reward Top K Students",
        "slug": "reward-top-k-students",
        "description": "You are given two string arrays `positive_feedback` and `negative_feedback`, containing the words denoting positive and negative feedback, respectively. Note that **no** word is both positive and negative.\n\n\nInitially every student has `0` points. Each positive word in a feedback report **increases** the points of a student by `3`, whereas each negative word **decreases** the points by `1`.\n\n\nYou are given `n` feedback reports, represented by a **0-indexed** string array `report`\u00a0and a **0-indexed** integer array `student_id`, where `student_id[i]` represents the ID of the student who has received the feedback report `report[i]`. The ID of each student is **unique**.\n\n\nGiven an integer `k`, return *the top* `k` *students after ranking them in **non-increasing** order by their points*. In case more than one student has the same points, the one with the lower ID ranks higher.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** positive_feedback = [\"smart\",\"brilliant\",\"studious\"], negative_feedback = [\"not\"], report = [\"this student is studious\",\"the student is smart\"], student_id = [1,2], k = 2",
                "Output": "** [1,2]",
                "Explanation": "** \nBoth the students have 1 positive feedback and 3 points but since student 1 has a lower ID he ranks higher."
            },
            {
                "Input": "** positive_feedback = [\"smart\",\"brilliant\",\"studious\"], negative_feedback = [\"not\"], report = [\"this student is not studious\",\"the student is smart\"], student_id = [1,2], k = 2",
                "Output": "** [2,1]",
                "Explanation": "** \n- The student with ID 1 has 1 positive feedback and 1 negative feedback, so he has 3-1=2 points. \n- The student with ID 2 has 1 positive feedback, so he has 3 points. \nSince student 2 has more points, [2,1] is returned."
            }
        ]
    },
    {
        "Title": "Minimize the Maximum of Two Arrays",
        "slug": "minimize-the-maximum-of-two-arrays",
        "description": "We have two arrays `arr1` and `arr2` which are initially empty. You need to add positive integers to them such that they satisfy all the following conditions:\n\n\n `arr1` contains `uniqueCnt1` **distinct** positive integers, each of which is **not divisible** by `divisor1`.\n `arr2` contains `uniqueCnt2` **distinct** positive integers, each of which is **not divisible** by `divisor2`.\n **No** integer is present in both `arr1` and `arr2`.\n\n\nGiven `divisor1`, `divisor2`, `uniqueCnt1`, and `uniqueCnt2`, return *the **minimum possible maximum** integer that can be present in either array*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Binary Search",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** divisor1 = 2, divisor2 = 7, uniqueCnt1 = 1, uniqueCnt2 = 3",
                "Output": "** 4",
                "Explanation": "** \nWe can distribute the first 4 natural numbers into arr1 and arr2.\narr1 = [1] and arr2 = [2,3,4].\nWe can see that both arrays satisfy all the conditions.\nSince the maximum value is 4, we return it."
            },
            {
                "Input": "** divisor1 = 3, divisor2 = 5, uniqueCnt1 = 2, uniqueCnt2 = 1",
                "Output": "** 3",
                "Explanation": "** \nHere arr1 = [1,2], and arr2 = [3] satisfy all conditions.\nSince the maximum value is 3, we return it."
            },
            {
                "Input": "** divisor1 = 2, divisor2 = 4, uniqueCnt1 = 8, uniqueCnt2 = 2",
                "Output": "** 15",
                "Explanation": "** \nHere, the final possible arrays can be arr1 = [1,3,5,7,9,11,13,15], and arr2 = [2,6].\nIt can be shown that it is not possible to obtain a lower maximum satisfying all conditions."
            }
        ]
    },
    {
        "Title": "Count Anagrams",
        "slug": "count-anagrams",
        "description": "You are given a string `s` containing one or more words. Every consecutive pair of words is separated by a single space `' '`.\n\n\nA string `t` is an **anagram** of string `s` if the `ith` word of `t` is a **permutation** of the `ith` word of `s`.\n\n\n For example, `\"acb dfe\"` is an anagram of `\"abc def\"`, but `\"def cab\"`\u00a0and `\"adc bef\"` are not.\n\n\nReturn *the number of **distinct anagrams** of* `s`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "Math",
            "String",
            "Combinatorics",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** s = \"too hot\"",
                "Output": "** 18",
                "Explanation": "** Some of the anagrams of the given string are \"too hot\", \"oot hot\", \"oto toh\", \"too toh\", and \"too oht\"."
            },
            {
                "Input": "** s = \"aa\"",
                "Output": "** 1",
                "Explanation": "** There is only one anagram possible for the given string."
            }
        ]
    },
    {
        "Title": "Shortest Distance to Target String in a Circular Array",
        "slug": "shortest-distance-to-target-string-in-a-circular-array",
        "description": "You are given a **0-indexed** **circular** string array `words` and a string `target`. A **circular array** means that the array's end connects to the array's beginning.\n\n\n Formally, the next element of `words[i]` is `words[(i + 1) % n]` and the previous element of `words[i]` is `words[(i - 1 + n) % n]`, where `n` is the length of `words`.\n\n\nStarting from `startIndex`, you can move to either the next word or the previous word with `1` step at a time.\n\n\nReturn *the **shortest** distance needed to reach the string* `target`. If the string `target` does not exist in `words`, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "examples": [
            {
                "Input": "** words = [\"hello\",\"i\",\"am\",\"leetcode\",\"hello\"], target = \"hello\", startIndex = 1",
                "Output": "** 1",
                "Explanation": "** We start from index 1 and can reach \"hello\" by\n- moving 3 units to the right to reach index 4.\n- moving 2 units to the left to reach index 4.\n- moving 4 units to the right to reach index 0.\n- moving 1 unit to the left to reach index 0.\nThe shortest distance to reach \"hello\" is 1."
            },
            {
                "Input": "** words = [\"a\",\"b\",\"leetcode\"], target = \"leetcode\", startIndex = 0",
                "Output": "** 1",
                "Explanation": "** We start from index 0 and can reach \"leetcode\" by\n- moving 2 units to the right to reach index 3.\n- moving 1 unit to the left to reach index 3.\nThe shortest distance to reach \"leetcode\" is 1."
            },
            {
                "Input": "** words = [\"i\",\"eat\",\"leetcode\"], target = \"ate\", startIndex = 0",
                "Output": "** -1",
                "Explanation": "** Since \"ate\" does not exist in words, we return -1."
            }
        ]
    },
    {
        "Title": "Take K of Each Character From Left and Right",
        "slug": "take-k-of-each-character-from-left-and-right",
        "description": "You are given a string `s` consisting of the characters `'a'`, `'b'`, and `'c'` and a non-negative integer `k`. Each minute, you may take either the **leftmost** character of `s`, or the **rightmost** character of `s`.\n\n\nReturn *the **minimum** number of minutes needed for you to take **at least*** `k` *of each character, or return* `-1` *if it is not possible to take* `k` *of each character.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** s = \"aabaaaacaabc\", k = 2",
                "Output": "** 8",
                "Explanation": "** \nTake three characters from the left of s. You now have two 'a' characters, and one 'b' character.\nTake five characters from the right of s. You now have four 'a' characters, two 'b' characters, and two 'c' characters.\nA total of 3 + 5 = 8 minutes is needed.\nIt can be proven that 8 is the minimum number of minutes needed."
            },
            {
                "Input": "** s = \"a\", k = 1",
                "Output": "** -1",
                "Explanation": "** It is not possible to take one 'b' or 'c' so return -1."
            }
        ]
    },
    {
        "Title": "Maximum Tastiness of Candy Basket",
        "slug": "maximum-tastiness-of-candy-basket",
        "description": "You are given an array of positive integers `price` where `price[i]` denotes the price of the `ith` candy and a positive integer `k`.\n\n\nThe store sells baskets of `k` **distinct** candies. The **tastiness** of a candy basket is the smallest absolute difference of the **prices** of any two candies in the basket.\n\n\nReturn *the **maximum** tastiness of a candy basket.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** price = [13,5,1,8,21,2], k = 3",
                "Output": "** 8",
                "Explanation": "** Choose the candies with the prices [13,5,21].\nThe tastiness of the candy basket is: min(|13 - 5|, |13 - 21|, |5 - 21|) = min(8, 8, 16) = 8.\nIt can be proven that 8 is the maximum tastiness that can be achieved."
            },
            {
                "Input": "** price = [1,3,1], k = 2",
                "Output": "** 2",
                "Explanation": "** Choose the candies with the prices [1,3].\nThe tastiness of the candy basket is: min(|1 - 3|) = min(2) = 2.\nIt can be proven that 2 is the maximum tastiness that can be achieved."
            },
            {
                "Input": "** price = [7,7,7,7], k = 2",
                "Output": "** 0",
                "Explanation": "** Choosing any two distinct candies from the candies we have will result in a tastiness of 0."
            }
        ]
    },
    {
        "Title": "Number of Great Partitions",
        "slug": "number-of-great-partitions",
        "description": "You are given an array `nums` consisting of **positive** integers and an integer `k`.\n\n\nPartition** the array into two ordered **groups** such that each element is in exactly **one** group. A partition is called great if the **sum** of elements of each group is greater than or equal to `k`.\n\n\nReturn *the number of **distinct** great partitions*. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n\nTwo partitions are considered distinct if some element `nums[i]` is in different groups in the two partitions.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4], k = 4",
                "Output": "** 6",
                "Explanation": "** The great partitions are: ([1,2,3], [4]), ([1,3], [2,4]), ([1,4], [2,3]), ([2,3], [1,4]), ([2,4], [1,3]) and ([4], [1,2,3])."
            },
            {
                "Input": "** nums = [3,3,3], k = 4",
                "Output": "** 0",
                "Explanation": "** There are no great partitions for this array."
            },
            {
                "Input": "** nums = [6,6], k = 2",
                "Output": "** 2",
                "Explanation": "** We can either put nums[0] in the first partition or in the second partition.\nThe great partitions will be ([6], [6]) and ([6], [6])."
            }
        ]
    },
    {
        "Title": "Count the Digits That Divide a Number",
        "slug": "count-the-digits-that-divide-a-number",
        "description": "Given an integer `num`, return *the number of digits in `num` that divide* `num`.\n\n\nAn integer `val` divides `nums` if `nums % val == 0`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** num = 7",
                "Output": "** 1",
                "Explanation": "** 7 divides itself, hence the answer is 1."
            },
            {
                "Input": "** num = 121",
                "Output": "** 2",
                "Explanation": "** 121 is divisible by 1, but not 2. Since 1 occurs twice as a digit, we return 2."
            },
            {
                "Input": "** num = 1248",
                "Output": "** 4",
                "Explanation": "** 1248 is divisible by all of its digits, hence the answer is 4."
            }
        ]
    },
    {
        "Title": "Distinct Prime Factors of Product of Array",
        "slug": "distinct-prime-factors-of-product-of-array",
        "description": "Given an array of positive integers `nums`, return *the number of **distinct prime factors** in the product of the elements of* `nums`.\n\n\nNote** that:\n\n\n A number greater than `1` is called **prime** if it is divisible by only `1` and itself.\n An integer `val1` is a factor of another integer `val2` if `val2 / val1` is an integer.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [2,4,3,7,10,6]",
                "Output": "** 4",
                "Explanation": "**\nThe product of all the elements in nums is: 2 * 4 * 3 * 7 * 10 * 6 = 10080 = 25 * 32 * 5 * 7.\nThere are 4 distinct prime factors so we return 4."
            },
            {
                "Input": "** nums = [2,4,8,16]",
                "Output": "** 1",
                "Explanation": "**\nThe product of all the elements in nums is: 2 * 4 * 8 * 16 = 1024 = 210.\nThere is 1 distinct prime factor so we return 1."
            }
        ]
    },
    {
        "Title": "Partition String Into Substrings With Values at Most K",
        "slug": "partition-string-into-substrings-with-values-at-most-k",
        "description": "You are given a string `s` consisting of digits from `1` to `9` and an integer `k`.\n\n\nA partition of a string `s` is called **good** if:\n\n\n Each digit of `s` is part of **exactly** one substring.\n The value of each substring is less than or equal to `k`.\n\n\nReturn *the **minimum** number of substrings in a **good** partition of* `s`. If no **good** partition of `s` exists, return `-1`.\n\n\nNote** that:\n\n\n The **value** of a string is its result when interpreted as an integer. For example, the value of `\"123\"` is `123` and the value of `\"1\"` is `1`.\n A **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"165462\", k = 60",
                "Output": "** 4",
                "Explanation": "** We can partition the string into substrings \"16\", \"54\", \"6\", and \"2\". Each substring has a value less than or equal to k = 60.\nIt can be shown that we cannot partition the string into less than 4 substrings."
            },
            {
                "Input": "** s = \"238182\", k = 5",
                "Output": "** -1",
                "Explanation": "** There is no good partition for this string."
            }
        ]
    },
    {
        "Title": "Closest Prime Numbers in Range",
        "slug": "closest-prime-numbers-in-range",
        "description": "Given two positive integers `left` and `right`, find the two integers `num1` and `num2` such that:\n\n\n `left <= num1 < num2 <= right` .\n `num1` and `num2` are both **prime** numbers.\n `num2 - num1` is the **minimum** amongst all other pairs satisfying the above conditions.\n\n\nReturn *the positive integer array* `ans = [num1, num2]`. *If there are multiple pairs satisfying these conditions, return the one with the minimum* `num1` *value or* `[-1, -1]` *if such numbers do not exist.\n\n\nA number greater than `1` is called **prime** if it is only divisible by `1` and itself.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** left = 10, right = 19",
                "Output": "** [11,13]",
                "Explanation": "** The prime numbers between 10 and 19 are 11, 13, 17, and 19.\nThe closest gap between any pair is 2, which can be achieved by [11,13] or [17,19].\nSince 11 is smaller than 17, we return the first pair."
            },
            {
                "Input": "** left = 4, right = 6",
                "Output": "** [-1,-1]",
                "Explanation": "** There exists only one prime number in the given range, so the conditions cannot be satisfied."
            }
        ]
    },
    {
        "Title": "Categorize Box According to Criteria",
        "slug": "categorize-box-according-to-criteria",
        "description": "Given four integers `length`, `width`, `height`, and `mass`, representing the dimensions and mass of a box, respectively, return *a string representing the **category** of the box*.\n\n\n The box is `\"Bulky\"` if:\n\t+ **Any** of the dimensions of the box is greater or equal to `104`.\n\t+ Or, the **volume** of the box is greater or equal to `109`.\n If the mass of the box is greater or equal to `100`, it is `\"Heavy\".`\n If the box is both `\"Bulky\"` and `\"Heavy\"`, then its category is `\"Both\"`.\n If the box is neither `\"Bulky\"` nor `\"Heavy\"`, then its category is `\"Neither\"`.\n If the box is `\"Bulky\"` but not `\"Heavy\"`, then its category is `\"Bulky\"`.\n If the box is `\"Heavy\"` but not `\"Bulky\"`, then its category is `\"Heavy\"`.\n\n\nNote** that the volume of the box is the product of its length, width and height.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** length = 1000, width = 35, height = 700, mass = 300",
                "Output": "** \"Heavy\"",
                "Explanation": "** \nNone of the dimensions of the box is greater or equal to 104. \nIts volume = 24500000 <= 109. So it cannot be categorized as \"Bulky\".\nHowever mass >= 100, so the box is \"Heavy\".\nSince the box is not \"Bulky\" but \"Heavy\", we return \"Heavy\"."
            },
            {
                "Input": "** length = 200, width = 50, height = 800, mass = 50",
                "Output": "** \"Neither\"",
                "Explanation": "** \nNone of the dimensions of the box is greater or equal to 104.\nIts volume = 8 * 106 <= 109. So it cannot be categorized as \"Bulky\".\nIts mass is also less than 100, so it cannot be categorized as \"Heavy\" either. \nSince its neither of the two above categories, we return \"Neither\"."
            }
        ]
    },
    {
        "Title": "Find Consecutive Integers from a Data Stream",
        "slug": "find-consecutive-integers-from-a-data-stream",
        "description": "For a stream of integers, implement a data structure that checks if the last `k` integers parsed in the stream are **equal** to `value`.\n\n\nImplement the **DataStream** class:\n\n\n `DataStream(int value, int k)` Initializes the object with an empty integer stream and the two integers `value` and `k`.\n `boolean consec(int num)` Adds `num` to the stream of integers. Returns `true` if the last `k` integers are equal to `value`, and `false` otherwise. If there are less than `k` integers, the condition does not hold true, so returns `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Design",
            "Queue",
            "Counting",
            "Data Stream"
        ],
        "examples": [
            {
                "Input": "[\"DataStream\", \"consec\", \"consec\", \"consec\", \"consec\"]\n[[4, 3], [4], [4], [4], [3]]",
                "Output": "[null, false, false, true, false]",
                "Explanation": "DataStream dataStream = new DataStream(4, 3); //value = 4, k = 3 \ndataStream.consec(4); // Only 1 integer is parsed, so returns False. \ndataStream.consec(4); // Only 2 integers are parsed.\n                      // Since 2 is less than k, returns False. \ndataStream.consec(4); // The 3 integers parsed are all equal to value, so returns True. \ndataStream.consec(3); // The last k integers parsed in the stream are [4,4,3].\n                      // Since 3 is not equal to value, it returns False."
            }
        ]
    },
    {
        "Title": "Find Xor-Beauty of Array",
        "slug": "find-xor-beauty-of-array",
        "description": "You are given a **0-indexed** integer array `nums`.\n\n\nThe **effective value** of three indices `i`, `j`, and `k` is defined as `((nums[i] | nums[j]) & nums[k])`.\n\n\nThe **xor-beauty** of the array is the XORing of **the effective values of all the possible triplets** of indices `(i, j, k)` where `0 <= i, j, k < n`.\n\n\nReturn *the xor-beauty of* `nums`.\n\n\nNote** that:\n\n\n `val1 | val2` is bitwise OR of `val1` and `val2`.\n `val1 & val2` is bitwise AND of `val1` and `val2`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [1,4]",
                "Output": "** 5",
                "Explanation": "** \nThe triplets and their corresponding effective values are listed below:\n- (0,0,0) with effective value ((1 | 1) & 1) = 1\n- (0,0,1) with effective value ((1 | 1) & 4) = 0\n- (0,1,0) with effective value ((1 | 4) & 1) = 1\n- (0,1,1) with effective value ((1 | 4) & 4) = 4\n- (1,0,0) with effective value ((4 | 1) & 1) = 1\n- (1,0,1) with effective value ((4 | 1) & 4) = 4\n- (1,1,0) with effective value ((4 | 4) & 1) = 0\n- (1,1,1) with effective value ((4 | 4) & 4) = 4 \nXor-beauty of array will be bitwise XOR of all beauties = 1 ^ 0 ^ 1 ^ 4 ^ 1 ^ 4 ^ 0 ^ 4 = 5."
            },
            {
                "Input": "** nums = [15,45,20,2,34,35,5,44,32,30]",
                "Output": "** 34",
                "Explanation": "** The xor-beauty of the given array is 34."
            }
        ]
    },
    {
        "Title": "Maximize the Minimum Powered City",
        "slug": "maximize-the-minimum-powered-city",
        "description": "You are given a **0-indexed** integer array `stations` of length `n`, where `stations[i]` represents the number of power stations in the `ith` city.\n\n\nEach power station can provide power to every city in a fixed **range**. In other words, if the range is denoted by `r`, then a power station at city `i` can provide power to all cities `j` such that `|i - j| <= r` and `0 <= i, j <= n - 1`.\n\n\n Note that `|x|` denotes **absolute** value. For example, `|7 - 5| = 2` and `|3 - 10| = 7`.\n\n\nThe **power** of a city is the total number of power stations it is being provided power from.\n\n\nThe government has sanctioned building `k` more power stations, each of which can be built in any city, and have the same range as the pre-existing ones.\n\n\nGiven the two integers `r` and `k`, return *the **maximum possible minimum power** of a city, if the additional power stations are built optimally.\n\n\nNote** that you can build the `k` power stations in multiple cities.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Greedy",
            "Queue",
            "Sliding Window",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** stations = [1,2,4,5,0], r = 1, k = 2",
                "Output": "** 5",
                "Explanation": "** \nOne of the optimal ways is to install both the power stations at city 1. \nSo stations will become [1,4,4,5,0].\n- City 0 is provided by 1 + 4 = 5 power stations.\n- City 1 is provided by 1 + 4 + 4 = 9 power stations.\n- City 2 is provided by 4 + 4 + 5 = 13 power stations.\n- City 3 is provided by 5 + 4 = 9 power stations.\n- City 4 is provided by 5 + 0 = 5 power stations.\nSo the minimum power of a city is 5.\nSince it is not possible to obtain a larger power, we return 5."
            },
            {
                "Input": "** stations = [4,4,4,4], r = 0, k = 3",
                "Output": "** 4",
                "Explanation": "** \nIt can be proved that we cannot make the minimum power of a city greater than 4."
            }
        ]
    },
    {
        "Title": "Maximum Count of Positive Integer and Negative Integer",
        "slug": "maximum-count-of-positive-integer-and-negative-integer",
        "description": "Given an array `nums` sorted in **non-decreasing** order, return *the maximum between the number of positive integers and the number of negative integers.\n\n\n In other words, if the number of positive integers in `nums` is `pos` and the number of negative integers is `neg`, then return the maximum of `pos` and `neg`.\n\n\nNote** that `0` is neither positive nor negative.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Binary Search",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [-2,-1,-1,1,2,3]",
                "Output": "** 3",
                "Explanation": "** There are 3 positive integers and 3 negative integers. The maximum count among them is 3."
            },
            {
                "Input": "** nums = [-3,-2,-1,0,0,1,2]",
                "Output": "** 3",
                "Explanation": "** There are 2 positive integers and 3 negative integers. The maximum count among them is 3."
            },
            {
                "Input": "** nums = [5,20,66,1314]",
                "Output": "** 4",
                "Explanation": "** There are 4 positive integers and 0 negative integers. The maximum count among them is 4."
            }
        ]
    },
    {
        "Title": "Maximal Score After Applying K Operations",
        "slug": "maximal-score-after-applying-k-operations",
        "description": "You are given a **0-indexed** integer array `nums` and an integer `k`. You have a **starting score** of `0`.\n\n\nIn one **operation**:\n\n\n1. choose an index `i` such that `0 <= i < nums.length`,\n2. increase your **score** by `nums[i]`, and\n3. replace `nums[i]` with `ceil(nums[i] / 3)`.\n\n\nReturn *the maximum possible **score** you can attain after applying **exactly*** `k` *operations*.\n\n\nThe ceiling function `ceil(val)` is the least integer greater than or equal to `val`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** nums = [10,10,10,10,10], k = 5",
                "Output": "** 50",
                "Explanation": "** Apply the operation to each array element exactly once. The final score is 10 + 10 + 10 + 10 + 10 = 50."
            },
            {
                "Input": "** nums = [1,10,3,3,3], k = 3",
                "Output": "** 17",
                "Explanation": "** You can do the following operations:\nOperation 1: Select i = 1, so nums becomes [1,**4**,3,3,3]. Your score increases by 10.\nOperation 2: Select i = 1, so nums becomes [1,**2**,3,3,3]. Your score increases by 4.\nOperation 3: Select i = 2, so nums becomes [1,1,**1**,3,3]. Your score increases by 3.\nThe final score is 10 + 4 + 3 = 17."
            }
        ]
    },
    {
        "Title": "Make Number of Distinct Characters Equal",
        "slug": "make-number-of-distinct-characters-equal",
        "description": "You are given two **0-indexed** strings `word1` and `word2`.\n\n\nA **move** consists of choosing two indices `i` and `j` such that `0 <= i < word1.length` and `0 <= j < word2.length` and swapping `word1[i]` with `word2[j]`.\n\n\nReturn `true` *if it is possible to get the number of distinct characters in* `word1` *and* `word2` *to be equal with **exactly one** move.* Return `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** word1 = \"ac\", word2 = \"b\"",
                "Output": "** false",
                "Explanation": "** Any pair of swaps would yield two distinct characters in the first string, and one in the second string."
            },
            {
                "Input": "** word1 = \"abcc\", word2 = \"aab\"",
                "Output": "** true",
                "Explanation": "** We swap index 2 of the first string with index 0 of the second string. The resulting strings are word1 = \"abac\" and word2 = \"cab\", which both have 3 distinct characters."
            },
            {
                "Input": "** word1 = \"abcde\", word2 = \"fghij\"",
                "Output": "** true",
                "Explanation": "** Both resulting strings will have 5 distinct characters, regardless of which indices we swap."
            }
        ]
    },
    {
        "Title": "Time to Cross a Bridge",
        "slug": "time-to-cross-a-bridge",
        "description": "There are `k` workers who want to move `n` boxes from the right (old) warehouse to the left (new) warehouse. You are given the two integers `n` and `k`, and a 2D integer array `time` of size `k x 4` where `time[i] = [righti, picki, lefti, puti]`.\n\n\nThe warehouses are separated by a river and connected by a bridge. Initially, all `k` workers are waiting on the left side of the bridge. To move the boxes, the `ith` worker can do the following:\n\n\n Cross the bridge to the right side in `righti` minutes.\n Pick a box from the right warehouse in `picki` minutes.\n Cross the bridge to the left side in `lefti` minutes.\n Put the box into the left warehouse in `puti` minutes.\n\n\nThe `ith` worker is **less efficient** than the j`th` worker if either condition is met:\n\n\n `lefti + righti > leftj + rightj`\n `lefti + righti == leftj + rightj` and `i > j`\n\n\nThe following rules regulate the movement of the workers through the bridge:\n\n\n Only one worker can use the bridge at a time.\n When the bridge is unused prioritize the **least efficient** worker on the right side to cross. If there are no workers on the right side, prioritize the **least efficient** worker on the left side to cross.\n\n\nReturn the **elapsed minutes** at which the last box reaches the **left side of the bridge**.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Heap (Priority Queue)",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** n = 1, k = 3, time = [[1,1,2,1],[1,1,3,1],[1,1,4,1]]",
                "Output": "** 6",
                "Explanation": "**\n\n\n\n```\n\nFrom 0 to 1 minutes: worker 2 crosses the bridge to the right.\nFrom 1 to 2 minutes: worker 2 picks up a box from the right warehouse.\nFrom 2 to 6 minutes: worker 2 crosses the bridge to the left.\nFrom 6 to 7 minutes: worker 2 puts a box at the left warehouse.\nThe whole process ends after 7 minutes. We return 6 because the problem asks for the instance of time at which the last worker reaches the left side of the bridge.\n\n```"
            },
            {
                "Input": "** n = 3, k = 2, time = [[1,9,1,8],[10,10,10,10]]",
                "Output": "** 50",
                "Explanation": "**\n\n\n\n```\n\nFrom 0  to 10: worker 1 crosses the bridge to the right.\nFrom 10 to 20: worker 1 picks up a box from the right warehouse.\nFrom 10 to 11: worker 0 crosses the bridge to the right.\nFrom 11 to 20: worker 0 picks up a box from the right warehouse.\nFrom 20 to 30: worker 1 crosses the bridge to the left.\nFrom 30 to 40: worker 1 puts a box at the left warehouse.\nFrom 30 to 31: worker 0 crosses the bridge to the left.\nFrom 31 to 39: worker 0 puts a box at the left warehouse.\nFrom 39 to 40: worker 0 crosses the bridge to the right.\nFrom 40 to 49: worker 0 picks up a box from the right warehouse.\nFrom 49 to 50: worker 0 crosses the bridge to the left.\n\n```\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n, k <= 104`\n* `time.length == k`\n* `time[i].length == 4`\n* `1 <= leftToRighti, pickOldi, rightToLefti, putNewi <= 1000`\n\n\nHints:\n    0. Try simulating this process.\n    1. We can use a priority queue to query over the least efficient worker.\nSimilarQuestions: [2332, 2462]"
            }
        ]
    },
    {
        "Title": "Difference Between Element Sum and Digit Sum of an Array",
        "slug": "difference-between-element-sum-and-digit-sum-of-an-array",
        "description": "You are given a positive integer array `nums`.\n\n\n The **element sum** is the sum of all the elements in `nums`.\n The **digit sum** is the sum of all the digits (not necessarily distinct) that appear in `nums`.\n\n\nReturn *the **absolute** difference between the **element sum** and **digit sum** of* `nums`.\n\n\nNote** that the absolute difference between two integers `x` and `y` is defined as `|x - y|`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math"
        ],
        "examples": [
            {
                "Input": "** nums = [1,15,6,3]",
                "Output": "** 9",
                "Explanation": "** \nThe element sum of nums is 1 + 15 + 6 + 3 = 25.\nThe digit sum of nums is 1 + 1 + 5 + 6 + 3 = 16.\nThe absolute difference between the element sum and digit sum is |25 - 16| = 9."
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 0",
                "Explanation": "**\nThe element sum of nums is 1 + 2 + 3 + 4 = 10.\nThe digit sum of nums is 1 + 2 + 3 + 4 = 10.\nThe absolute difference between the element sum and digit sum is |10 - 10| = 0."
            }
        ]
    },
    {
        "Title": "Increment Submatrices by One",
        "slug": "increment-submatrices-by-one",
        "description": "You are given a positive integer `n`, indicating that we initially have an `n x n`\u00a0**0-indexed** integer matrix `mat` filled with zeroes.\n\n\nYou are also given a 2D integer array `query`. For each `query[i] = [row1i, col1i, row2i, col2i]`, you should do the following operation:\n\n\n Add `1` to **every element** in the submatrix with the **top left** corner `(row1i, col1i)` and the **bottom right** corner `(row2i, col2i)`. That is, add `1` to `mat[x][y]` for all `row1i <= x <= row2i` and `col1i <= y <= col2i`.\n\n\nReturn *the matrix* `mat` *after performing every query.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** n = 3, queries = [[1,1,2,2],[0,0,1,1]]",
                "Output": "** [[1,1,0],[1,2,1],[0,1,1]]",
                "Explanation": "** The diagram above shows the initial matrix, the matrix after the first query, and the matrix after the second query.\n- In the first query, we add 1 to every element in the submatrix with the top left corner (1, 1) and bottom right corner (2, 2).\n- In the second query, we add 1 to every element in the submatrix with the top left corner (0, 0) and bottom right corner (1, 1)."
            },
            {
                "Input": "** n = 2, queries = [[0,0,1,1]]",
                "Output": "** [[1,1],[1,1]]",
                "Explanation": "** The diagram above shows the initial matrix and the matrix after the first query.\n- In the first query we add 1 to every element in the matrix."
            }
        ]
    },
    {
        "Title": "Count the Number of Good Subarrays",
        "slug": "count-the-number-of-good-subarrays",
        "description": "Given an integer array `nums` and an integer `k`, return *the number of **good** subarrays of* `nums`.\n\n\nA subarray `arr` is **good** if it there are **at least** `k` pairs of indices `(i, j)` such that `i < j` and `arr[i] == arr[j]`.\n\n\nA **subarray** is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [1,1,1,1,1], k = 10",
                "Output": "** 1",
                "Explanation": "** The only good subarray is the array nums itself."
            },
            {
                "Input": "** nums = [3,1,4,3,2,2,4], k = 2",
                "Output": "** 4",
                "Explanation": "** There are 4 different good subarrays:\n- [3,1,4,3,2,2] that has 2 pairs.\n- [3,1,4,3,2,2,4] that has 3 pairs.\n- [1,4,3,2,2,4] that has 2 pairs.\n- [4,3,2,2,4] that has 2 pairs."
            }
        ]
    },
    {
        "Title": "Difference Between Maximum and Minimum Price Sum",
        "slug": "difference-between-maximum-and-minimum-price-sum",
        "description": "There exists an undirected and initially unrooted tree with `n` nodes indexed from `0` to `n - 1`. You are given the integer `n` and a 2D integer array `edges` of length `n - 1`, where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree.\n\n\nEach node has an associated price. You are given an integer array `price`, where `price[i]` is the price of the `ith` node.\n\n\nThe **price sum** of a given path is the sum of the prices of all nodes lying on that path.\n\n\nThe tree can be rooted at any node `root` of your choice. The incurred **cost** after choosing `root` is the difference between the maximum and minimum **price sum** amongst all paths starting at `root`.\n\n\nReturn *the **maximum** possible **cost*** *amongst all possible root choices*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Tree",
            "Depth-First Search"
        ],
        "examples": [
            {
                "Input": "** n = 6, edges = [[0,1],[1,2],[1,3],[3,4],[3,5]], price = [9,8,7,6,10,5]",
                "Output": "** 24",
                "Explanation": "** The diagram above denotes the tree after rooting it at node 2. The first part (colored in red) shows the path with the maximum price sum. The second part (colored in blue) shows the path with the minimum price sum.\n- The first path contains nodes [2,1,3,4]: the prices are [7,8,6,10], and the sum of the prices is 31.\n- The second path contains the node [2] with the price [7].\nThe difference between the maximum and minimum price sum is 24. It can be proved that 24 is the maximum cost."
            },
            {
                "Input": "** n = 3, edges = [[0,1],[1,2]], price = [1,1,1]",
                "Output": "** 2",
                "Explanation": "** The diagram above denotes the tree after rooting it at node 0. The first part (colored in red) shows the path with the maximum price sum. The second part (colored in blue) shows the path with the minimum price sum.\n- The first path contains nodes [0,1,2]: the prices are [1,1,1], and the sum of the prices is 3.\n- The second path contains node [0] with a price [1].\nThe difference between the maximum and minimum price sum is 2. It can be proved that 2 is the maximum cost."
            }
        ]
    },
    {
        "Title": "Minimum Common Value",
        "slug": "minimum-common-value",
        "description": "Given two integer arrays `nums1` and `nums2`, sorted in non-decreasing order, return *the **minimum integer common** to both arrays*. If there is no common integer amongst `nums1` and `nums2`, return `-1`.\n\n\nNote that an integer is said to be **common** to `nums1` and `nums2` if both arrays have **at least one** occurrence of that integer.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** nums1 = [1,2,3], nums2 = [2,4]",
                "Output": "** 2",
                "Explanation": "** The smallest element common to both arrays is 2, so we return 2."
            },
            {
                "Input": "** nums1 = [1,2,3,6], nums2 = [2,3,4,5]",
                "Output": "** 2",
                "Explanation": "** There are two common elements in the array 2 and 3 out of which 2 is the smallest, so 2 is returned."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Make Array Equal II",
        "slug": "minimum-operations-to-make-array-equal-ii",
        "description": "You are given two integer arrays `nums1` and `nums2` of equal length `n` and an integer `k`. You can perform the following operation on `nums1`:\n\n\n Choose two indexes `i` and `j` and increment `nums1[i]` by `k` and decrement `nums1[j]` by `k`. In other words, `nums1[i] = nums1[i] + k` and `nums1[j] = nums1[j] - k`.\n\n\n`nums1` is said to be **equal** to `nums2` if for all indices `i` such that `0 <= i < n`, `nums1[i] == nums2[i]`.\n\n\nReturn *the **minimum** number of operations required to make* `nums1` *equal to* `nums2`. If it is impossible to make them equal, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums1 = [4,3,1,4], nums2 = [1,3,7,1], k = 3",
                "Output": "** 2",
                "Explanation": "** In 2 operations, we can transform nums1 to nums2.\n1st operation: i = 2, j = 0. After applying the operation, nums1 = [1,3,4,4].\n2nd operation: i = 2, j = 3. After applying the operation, nums1 = [1,3,7,1].\nOne can prove that it is impossible to make arrays equal in fewer operations."
            },
            {
                "Input": "** nums1 = [3,8,5,2], nums2 = [2,4,1,6], k = 1",
                "Output": "** -1",
                "Explanation": "** It can be proved that it is impossible to make the two arrays equal."
            }
        ]
    },
    {
        "Title": "Maximum Subsequence Score",
        "slug": "maximum-subsequence-score",
        "description": "You are given two **0-indexed** integer arrays `nums1` and `nums2` of equal length `n` and a positive integer `k`. You must choose a **subsequence** of indices from `nums1` of length `k`.\n\n\nFor chosen indices `i0`, `i1`, ..., `ik - 1`, your **score** is defined as:\n\n\n The sum of the selected elements from `nums1` multiplied with the **minimum** of the selected elements from `nums2`.\n It can defined simply as: `(nums1[i0] + nums1[i1] +...+ nums1[ik - 1]) * min(nums2[i0] , nums2[i1], ... ,nums2[ik - 1])`.\n\n\nReturn *the **maximum** possible score.\n\n\nA **subsequence** of indices of an array is a set that can be derived from the set `{0, 1, ..., n-1}` by deleting some or no elements.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** nums1 = [1,3,3,2], nums2 = [2,1,3,4], k = 3",
                "Output": "** 12",
                "Explanation": "** \nThe four possible subsequence scores are:\n- We choose the indices 0, 1, and 2 with score = (1+3+3) * min(2,1,3) = 7.\n- We choose the indices 0, 1, and 3 with score = (1+3+2) * min(2,1,4) = 6. \n- We choose the indices 0, 2, and 3 with score = (1+3+2) * min(2,3,4) = 12. \n- We choose the indices 1, 2, and 3 with score = (3+3+2) * min(1,3,4) = 8.\nTherefore, we return the max score, which is 12."
            },
            {
                "Input": "** nums1 = [4,2,3,1,1], nums2 = [7,5,10,9,6], k = 1",
                "Output": "** 30",
                "Explanation": "** \nChoosing index 2 is optimal: nums1[2] * nums2[2] = 3 * 10 = 30 is the maximum possible score."
            }
        ]
    },
    {
        "Title": "Check if Point Is Reachable",
        "slug": "check-if-point-is-reachable",
        "description": "There exists an infinitely large grid. You are currently at point `(1, 1)`, and you need to reach the point `(targetX, targetY)` using a finite number of steps.\n\n\nIn one **step**, you can move from point `(x, y)` to any one of the following points:\n\n\n `(x, y - x)`\n `(x - y, y)`\n `(2 * x, y)`\n `(x, 2 * y)`\n\n\nGiven two integers `targetX` and `targetY` representing the X-coordinate and Y-coordinate of your final position, return `true` *if you can reach the point from* `(1, 1)` *using some number of steps, and* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** targetX = 6, targetY = 9",
                "Output": "** false",
                "Explanation": "** It is impossible to reach (6,9) from (1,1) using any sequence of moves, so false is returned."
            },
            {
                "Input": "** targetX = 4, targetY = 7",
                "Output": "** true",
                "Explanation": "** You can follow the path (1,1) -> (1,2) -> (1,4) -> (1,8) -> (1,7) -> (2,7) -> (4,7)."
            }
        ]
    },
    {
        "Title": "Alternating Digit Sum",
        "slug": "alternating-digit-sum",
        "description": "You are given a positive integer `n`. Each digit of `n` has a sign according to the following rules:\n\n\n The **most significant digit** is assigned a **positive** sign.\n Each other digit has an opposite sign to its adjacent digits.\n\n\nReturn *the sum of all digits with their corresponding sign*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** n = 521",
                "Output": "** 4",
                "Explanation": "** (+5) + (-2) + (+1) = 4."
            },
            {
                "Input": "** n = 111",
                "Output": "** 1",
                "Explanation": "** (+1) + (-1) + (+1) = 1."
            },
            {
                "Input": "** n = 886996",
                "Output": "** 0",
                "Explanation": "** (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0."
            }
        ]
    },
    {
        "Title": "Sort the Students by Their Kth Score",
        "slug": "sort-the-students-by-their-kth-score",
        "description": "There is a class with `m` students and `n` exams. You are given a **0-indexed** `m x n` integer matrix `score`, where each row represents one student and `score[i][j]` denotes the score the `ith` student got in the `jth` exam. The matrix `score` contains **distinct** integers only.\n\n\nYou are also given an integer `k`. Sort the students (i.e., the rows of the matrix) by their scores in the `kth`\u00a0(**0-indexed**) exam from the highest to the lowest.\n\n\nReturn *the matrix after sorting it.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sorting",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** score = [[10,6,9,1],[7,5,11,2],[4,8,3,15]], k = 2",
                "Output": "** [[7,5,11,2],[10,6,9,1],[4,8,3,15]]",
                "Explanation": "** In the above diagram, S denotes the student, while E denotes the exam.\n- The student with index 1 scored 11 in exam 2, which is the highest score, so they got first place.\n- The student with index 0 scored 9 in exam 2, which is the second highest score, so they got second place.\n- The student with index 2 scored 3 in exam 2, which is the lowest score, so they got third place."
            },
            {
                "Input": "** score = [[3,4],[5,6]], k = 0",
                "Output": "** [[5,6],[3,4]]",
                "Explanation": "** In the above diagram, S denotes the student, while E denotes the exam.\n- The student with index 1 scored 5 in exam 0, which is the highest score, so they got first place.\n- The student with index 0 scored 3 in exam 0, which is the lowest score, so they got second place."
            }
        ]
    },
    {
        "Title": "Apply Bitwise Operations to Make Strings Equal",
        "slug": "apply-bitwise-operations-to-make-strings-equal",
        "description": "You are given two **0-indexed binary** strings `s` and `target` of the same length `n`. You can do the following operation on `s` **any** number of times:\n\n\n Choose two **different** indices `i` and `j` where `0 <= i, j < n`.\n Simultaneously, replace `s[i]` with (`s[i]` **OR** `s[j]`) and `s[j]` with (`s[i]` **XOR** `s[j]`).\n\n\nFor example, if `s = \"0110\"`, you can choose `i = 0` and `j = 2`, then simultaneously replace `s[0]` with (`s[0]` **OR** `s[2]` = `0` **OR** `1` = `1`), and `s[2]` with (`s[0]` **XOR** `s[2]` = `0` **XOR** `1` = `1`), so we will have `s = \"1110\"`.\n\n\nReturn `true` *if you can make the string* `s` *equal to* `target`*, or* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** s = \"1010\", target = \"0110\"",
                "Output": "** true",
                "Explanation": "** We can do the following operations:\n- Choose i = 2 and j = 0. We have now s = \"**0**0**1**0\".\n- Choose i = 2 and j = 1. We have now s = \"0**11**0\".\nSince we can make s equal to target, we return true."
            },
            {
                "Input": "** s = \"11\", target = \"00\"",
                "Output": "** false",
                "Explanation": "** It is not possible to make s equal to target with any number of operations."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Split an Array",
        "slug": "minimum-cost-to-split-an-array",
        "description": "You are given an integer array `nums` and an integer `k`.\n\n\nSplit the array into some number of non-empty subarrays. The **cost** of a split is the sum of the **importance value** of each subarray in the split.\n\n\nLet `trimmed(subarray)` be the version of the subarray where all numbers which appear only once are removed.\n\n\n For example, `trimmed([3,1,2,4,3,4]) = [3,4,3,4].`\n\n\nThe **importance value** of a subarray is `k + trimmed(subarray).length`.\n\n\n For example, if a subarray is `[1,2,3,3,3,4,4]`, then trimmed(`[1,2,3,3,3,4,4]) = [3,3,3,4,4].`The importance value of this subarray will be `k + 5`.\n\n\nReturn *the minimum possible cost of a split of* `nums`.\n\n\nA **subarray** is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Dynamic Programming",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,1,2,1,3,3], k = 2",
                "Output": "** 8",
                "Explanation": "** We split nums to have two subarrays: [1,2], [1,2,1,3,3].\nThe importance value of [1,2] is 2 + (0) = 2.\nThe importance value of [1,2,1,3,3] is 2 + (2 + 2) = 6.\nThe cost of the split is 2 + 6 = 8. It can be shown that this is the minimum possible cost among all the possible splits."
            },
            {
                "Input": "** nums = [1,2,1,2,1], k = 2",
                "Output": "** 6",
                "Explanation": "** We split nums to have two subarrays: [1,2], [1,2,1].\nThe importance value of [1,2] is 2 + (0) = 2.\nThe importance value of [1,2,1] is 2 + (2) = 4.\nThe cost of the split is 2 + 4 = 6. It can be shown that this is the minimum possible cost among all the possible splits."
            },
            {
                "Input": "** nums = [1,2,1,2,1], k = 5",
                "Output": "** 10",
                "Explanation": "** We split nums to have one subarray: [1,2,1,2,1].\nThe importance value of [1,2,1,2,1] is 5 + (3 + 2) = 10.\nThe cost of the split is 10. It can be shown that this is the minimum possible cost among all the possible splits."
            }
        ]
    },
    {
        "Title": "Count Distinct Numbers on Board",
        "slug": "count-distinct-numbers-on-board",
        "description": "You are given a positive integer `n`, that is initially placed on a board. Every day, for `109` days, you perform the following procedure:\n\n\n For each number `x` present on the board, find all numbers `1 <= i <= n` such that `x % i == 1`.\n Then, place those numbers on the board.\n\n\nReturn *the number of **distinct** integers present on the board after* `109` *days have elapsed*.\n\n\nNote:\n\n\n Once a number is placed on the board, it will remain on it until the end.\n `%`\u00a0stands\u00a0for the modulo operation. For example,\u00a0`14 % 3` is `2`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** n = 5",
                "Output": "** 4",
                "Explanation": "** Initially, 5 is present on the board. \nThe next day, 2 and 4 will be added since 5 % 2 == 1 and 5 % 4 == 1. \nAfter that day, 3 will be added to the board because 4 % 3 == 1. \nAt the end of a billion days, the distinct numbers on the board will be 2, 3, 4, and 5."
            },
            {
                "Input": "** n = 3",
                "Output": "** 2",
                "Explanation": "** \nSince 3 % 2 == 1, 2 will be added to the board. \nAfter a billion days, the only two distinct numbers on the board are 2 and 3."
            }
        ]
    },
    {
        "Title": "Count Collisions of Monkeys on a Polygon",
        "slug": "count-collisions-of-monkeys-on-a-polygon",
        "description": "There is a regular convex polygon with `n` vertices. The vertices are labeled from `0` to `n - 1` in a clockwise direction, and each vertex has **exactly one monkey**. The following figure shows a convex polygon of `6` vertices.\n\n\n![](https://assets.leetcode.com/uploads/2023/01/22/hexagon.jpg)\nSimultaneously, each monkey moves to a neighboring vertex. A **collision** happens if at least two monkeys reside on the same vertex after the movement or intersect on an edge.\n\n\nReturn the number of ways the monkeys can move so that at least **one collision** happens. Since the answer may be very large, return it modulo `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Recursion"
        ],
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** 6",
                "Explanation": "**\n\n\nThere are 8 total possible movements.  \n\nTwo ways such that they collide at some point are:\n\n\n* Monkey 1 moves in a clockwise direction; monkey 2 moves in an anticlockwise direction; monkey 3 moves in a clockwise direction. Monkeys 1 and 2 collide.\n* Monkey 1 moves in an anticlockwise direction; monkey 2 moves in an anticlockwise direction; monkey 3 moves in a clockwise direction. Monkeys 1 and 3 collide."
            },
            {
                "Input": "** n = 4",
                "Output": "** 14\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `3 <= n <= 109`\n\n\nSimilarQuestions: [50]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Put Marbles in Bags",
        "slug": "put-marbles-in-bags",
        "description": "You have `k` bags. You are given a **0-indexed** integer array `weights` where `weights[i]` is the weight of the `ith` marble. You are also given the integer `k.`\n\n\nDivide the marbles into the `k` bags according to the following rules:\n\n\n No bag is empty.\n If the `ith` marble and `jth` marble are in a bag, then all marbles with an index between the `ith` and `jth` indices should also be in that same bag.\n If a bag consists of all the marbles with an index from `i` to `j` inclusively, then the cost of the bag is `weights[i] + weights[j]`.\n\n\nThe **score** after distributing the marbles is the sum of the costs of all the `k` bags.\n\n\nReturn *the **difference** between the **maximum** and **minimum** scores among marble distributions*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** weights = [1,3,5,1], k = 2",
                "Output": "** 4",
                "Explanation": "** \nThe distribution [1],[3,5,1] results in the minimal score of (1+1) + (3+1) = 6. \nThe distribution [1,3],[5,1], results in the maximal score of (1+3) + (5+1) = 10. \nThus, we return their difference 10 - 6 = 4."
            },
            {
                "Input": "** weights = [1, 3], k = 2",
                "Output": "** 0",
                "Explanation": "** The only distribution possible is [1],[3]. \nSince both the maximal and minimal score are the same, we return 0."
            }
        ]
    },
    {
        "Title": "Count Increasing Quadruplets",
        "slug": "count-increasing-quadruplets",
        "description": "Given a **0-indexed** integer array `nums` of size `n` containing all numbers from `1` to `n`, return *the number of increasing quadruplets*.\n\n\nA quadruplet `(i, j, k, l)` is increasing if:\n\n\n `0 <= i < j < k < l < n`, and\n `nums[i] < nums[k] < nums[j] < nums[l]`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Binary Indexed Tree",
            "Enumeration",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,2,4,5]",
                "Output": "** 2",
                "Explanation": "** \n- When i = 0, j = 1, k = 2, and l = 3, nums[i] < nums[k] < nums[j] < nums[l].\n- When i = 0, j = 1, k = 2, and l = 4, nums[i] < nums[k] < nums[j] < nums[l]. \nThere are no other quadruplets, so we return 2."
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 0",
                "Explanation": "** There exists only one quadruplet with i = 0, j = 1, k = 2, l = 3, but since nums[j] < nums[k], we return 0."
            }
        ]
    },
    {
        "Title": "Separate the Digits in an Array",
        "slug": "separate-the-digits-in-an-array",
        "description": "Given an array of positive integers `nums`, return *an array* `answer` *that consists of the digits of each integer in* `nums` *after separating them in **the same order** they appear in* `nums`.\n\n\nTo separate the digits of an integer is to get all the digits it has in the same order.\n\n\n For example, for the integer `10921`, the separation of its digits is `[1,0,9,2,1]`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [13,25,83,77]",
                "Output": "** [1,3,2,5,8,3,7,7]",
                "Explanation": "** \n- The separation of 13 is [1,3].\n- The separation of 25 is [2,5].\n- The separation of 83 is [8,3].\n- The separation of 77 is [7,7].\nanswer = [1,3,2,5,8,3,7,7]. Note that answer contains the separations in the same order."
            },
            {
                "Input": "** nums = [7,1,3,9]",
                "Output": "** [7,1,3,9]",
                "Explanation": "** The separation of each integer in nums is itself.\nanswer = [7,1,3,9]."
            }
        ]
    },
    {
        "Title": "Maximum Number of Integers to Choose From a Range I",
        "slug": "maximum-number-of-integers-to-choose-from-a-range-i",
        "description": "You are given an integer array `banned` and two integers `n` and `maxSum`. You are choosing some number of integers following the below rules:\n\n\n The chosen integers have to be in the range `[1, n]`.\n Each integer can be chosen **at most once**.\n The chosen integers should not be in the array `banned`.\n The sum of the chosen integers should not exceed `maxSum`.\n\n\nReturn *the **maximum** number of integers you can choose following the mentioned rules*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** banned = [1,6,5], n = 5, maxSum = 6",
                "Output": "** 2",
                "Explanation": "** You can choose the integers 2 and 4.\n2 and 4 are from the range [1, 5], both did not appear in banned, and their sum is 6, which did not exceed maxSum."
            },
            {
                "Input": "** banned = [1,2,3,4,5,6,7], n = 8, maxSum = 1",
                "Output": "** 0",
                "Explanation": "** You cannot choose any integer while following the mentioned conditions."
            },
            {
                "Input": "** banned = [11], n = 7, maxSum = 50",
                "Output": "** 7",
                "Explanation": "** You can choose the integers 1, 2, 3, 4, 5, 6, and 7.\nThey are from the range [1, 7], all did not appear in banned, and their sum is 28, which did not exceed maxSum."
            }
        ]
    },
    {
        "Title": "Maximize Win From Two Segments",
        "slug": "maximize-win-from-two-segments",
        "description": "There are some prizes on the **X-axis**. You are given an integer array `prizePositions` that is **sorted in non-decreasing order**, where `prizePositions[i]` is the position of the `ith` prize. There could be different prizes at the same position on the line. You are also given an integer `k`.\n\n\nYou are allowed to select two segments with integer endpoints. The length of each segment must be `k`. You will collect all prizes whose position falls within at least one of the two selected segments (including the endpoints of the segments). The two selected segments may intersect.\n\n\n For example if `k = 2`, you can choose segments `[1, 3]` and `[2, 4]`, and you will win any prize i that satisfies `1 <= prizePositions[i] <= 3` or `2 <= prizePositions[i] <= 4`.\n\n\nReturn *the **maximum** number of prizes you can win if you choose the two segments optimally*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** prizePositions = [1,1,2,2,3,3,5], k = 2",
                "Output": "** 7",
                "Explanation": "** In this example, you can win all 7 prizes by selecting two segments [1, 3] and [3, 5]."
            },
            {
                "Input": "** prizePositions = [1,2,3,4], k = 0",
                "Output": "** 2",
                "Explanation": "** For this example, **one choice** for the segments is [3, 3] and [4, 4], and you will be able to get 2 prizes."
            }
        ]
    },
    {
        "Title": "Disconnect Path in a Binary Matrix by at Most One Flip",
        "slug": "disconnect-path-in-a-binary-matrix-by-at-most-one-flip",
        "description": "You are given a **0-indexed** `m x n` **binary** matrix `grid`. You can move from a cell `(row, col)` to any of the cells `(row + 1, col)` or `(row, col + 1)` that has the value `1`.\u00a0The matrix is **disconnected** if there is no path from `(0, 0)` to `(m - 1, n - 1)`.\n\n\nYou can flip the value of **at most one** (possibly none) cell. You **cannot flip** the cells `(0, 0)` and `(m - 1, n - 1)`.\n\n\nReturn `true` *if it is possible to make the matrix disconnect or* `false` *otherwise*.\n\n\nNote** that flipping a cell changes its value from `0` to `1` or from `1` to `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Depth-First Search",
            "Breadth-First Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,1,1],[1,0,0],[1,1,1]]",
                "Output": "** true",
                "Explanation": "** We can change the cell shown in the diagram above. There is no path from (0, 0) to (2, 2) in the resulting grid."
            },
            {
                "Input": "** grid = [[1,1,1],[1,0,1],[1,1,1]]",
                "Output": "** false",
                "Explanation": "** It is not possible to change at most one cell such that there is not path from (0, 0) to (2, 2)."
            }
        ]
    },
    {
        "Title": "Take Gifts From the Richest Pile",
        "slug": "take-gifts-from-the-richest-pile",
        "description": "You are given an integer array `gifts` denoting the number of gifts in various piles. Every second, you do the following:\n\n\n Choose the pile with the maximum number of gifts.\n If there is more than one pile with the maximum number of gifts, choose any.\n Leave behind the floor of the square root of the number of gifts in the pile. Take the rest of the gifts.\n\n\nReturn *the number of gifts remaining after* `k` *seconds.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Heap (Priority Queue)",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** gifts = [25,64,9,4,100], k = 4",
                "Output": "** 29",
                "Explanation": "** \nThe gifts are taken in the following way:\n- In the first second, the last pile is chosen and 10 gifts are left behind.\n- Then the second pile is chosen and 8 gifts are left behind.\n- After that the first pile is chosen and 5 gifts are left behind.\n- Finally, the last pile is chosen again and 3 gifts are left behind.\nThe final remaining gifts are [5,8,9,4,3], so the total number of gifts remaining is 29."
            },
            {
                "Input": "** gifts = [1,1,1,1], k = 4",
                "Output": "** 4",
                "Explanation": "** \nIn this case, regardless which pile you choose, you have to leave behind 1 gift in each pile. \nThat is, you can't take any pile with you. \nSo, the total gifts remaining are 4."
            }
        ]
    },
    {
        "Title": "Count Vowel Strings in Ranges",
        "slug": "count-vowel-strings-in-ranges",
        "description": "You are given a **0-indexed** array of strings `words` and a 2D array of integers `queries`.\n\n\nEach query `queries[i] = [li, ri]` asks us to find the number of strings present in the range `li` to `ri` (both **inclusive**) of `words` that start and end with a vowel.\n\n\nReturn *an array* `ans` *of size* `queries.length`*, where* `ans[i]` *is the answer to the* `i`th *query*.\n\n\nNote** that the vowel letters are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** words = [\"aba\",\"bcb\",\"ece\",\"aa\",\"e\"], queries = [[0,2],[1,4],[1,1]]",
                "Output": "** [2,3,0]",
                "Explanation": "** The strings starting and ending with a vowel are \"aba\", \"ece\", \"aa\" and \"e\".\nThe answer to the query [0,2] is 2 (strings \"aba\" and \"ece\").\nto query [1,4] is 3 (strings \"ece\", \"aa\", \"e\").\nto query [1,1] is 0.\nWe return [2,3,0]."
            },
            {
                "Input": "** words = [\"a\",\"e\",\"i\"], queries = [[0,2],[0,1],[2,2]]",
                "Output": "** [3,2,1]",
                "Explanation": "** Every string satisfies the conditions, so we return [3,2,1]."
            }
        ]
    },
    {
        "Title": "House Robber IV",
        "slug": "house-robber-iv",
        "description": "There are several consecutive houses along a street, each of which has some money inside. There is also a robber, who wants to steal money from the homes, but he **refuses to steal from adjacent homes**.\n\n\nThe **capability** of the robber is the maximum amount of money he steals from one house of all the houses he robbed.\n\n\nYou are given an integer array `nums` representing how much money is stashed in each house. More formally, the `ith` house from the left has `nums[i]` dollars.\n\n\nYou are also given an integer `k`, representing the **minimum** number of houses the robber will steal from. It is always possible to steal at least `k` houses.\n\n\nReturn *the **minimum** capability of the robber out of all the possible ways to steal at least* `k` *houses*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** nums = [2,3,5,9], k = 2",
                "Output": "** 5",
                "Explanation": "** \nThere are three ways to rob at least 2 houses:\n- Rob the houses at indices 0 and 2. Capability is max(nums[0], nums[2]) = 5.\n- Rob the houses at indices 0 and 3. Capability is max(nums[0], nums[3]) = 9.\n- Rob the houses at indices 1 and 3. Capability is max(nums[1], nums[3]) = 9.\nTherefore, we return min(5, 9, 9) = 5."
            },
            {
                "Input": "** nums = [2,7,9,3,1], k = 2",
                "Output": "** 2",
                "Explanation": "** There are 7 ways to rob the houses. The way which leads to minimum capability is to rob the house at index 0 and 4. Return max(nums[0], nums[4]) = 2."
            }
        ]
    },
    {
        "Title": "Rearranging Fruits",
        "slug": "rearranging-fruits",
        "description": "You have two fruit baskets containing `n` fruits each. You are given two **0-indexed** integer arrays `basket1` and `basket2` representing the cost of fruit in each basket. You want to make both baskets **equal**. To do so, you can use the following operation as many times as you want:\n\n\n Chose two indices `i` and `j`, and swap the `ith`fruit of `basket1` with the `jth`\u00a0fruit of `basket2`.\n The cost of the swap is `min(basket1[i],basket2[j])`.\n\n\nTwo baskets are considered equal if sorting them according to the fruit cost makes them exactly the same baskets.\n\n\nReturn *the minimum cost to make both the baskets equal or* `-1` *if impossible.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** basket1 = [4,2,2,2], basket2 = [1,4,1,2]",
                "Output": "** 1",
                "Explanation": "** Swap index 1 of basket1 with index 0 of basket2, which has cost 1. Now basket1 = [4,1,2,2] and basket2 = [2,4,1,2]. Rearranging both the arrays makes them equal."
            },
            {
                "Input": "** basket1 = [2,3,4,1], basket2 = [3,2,5,1]",
                "Output": "** -1",
                "Explanation": "** It can be shown that it is impossible to make both the baskets equal."
            }
        ]
    },
    {
        "Title": "Find the Array Concatenation Value",
        "slug": "find-the-array-concatenation-value",
        "description": "You are given a **0-indexed** integer array `nums`.\n\n\nThe **concatenation** of two numbers is the number formed by concatenating their numerals.\n\n\n For example, the concatenation of `15`, `49` is `1549`.\n\n\nThe **concatenation value** of `nums` is initially equal to `0`. Perform this operation until `nums` becomes empty:\n\n\n If there exists more than one number in `nums`, pick the first element and last element in `nums` respectively and add the value of their concatenation to the **concatenation value** of `nums`, then delete the first and last element from `nums`.\n If one element exists, add its value to the **concatenation value** of `nums`, then delete it.\n\n\nReturn *the concatenation value of the `nums`*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [7,52,2,4]",
                "Output": "** 596",
                "Explanation": "** Before performing any operation, nums is [7,52,2,4] and concatenation value is 0.\n - In the first operation:\nWe pick the first element, 7, and the last element, 4.\nTheir concatenation is 74, and we add it to the concatenation value, so it becomes equal to 74.\nThen we delete them from nums, so nums becomes equal to [52,2].\n - In the second operation:\nWe pick the first element, 52, and the last element, 2.\nTheir concatenation is 522, and we add it to the concatenation value, so it becomes equal to 596.\nThen we delete them from the nums, so nums becomes empty.\nSince the concatenation value is 596 so the answer is 596."
            },
            {
                "Input": "** nums = [5,14,13,8,12]",
                "Output": "** 673",
                "Explanation": "** Before performing any operation, nums is [5,14,13,8,12] and concatenation value is 0.\n - In the first operation:\nWe pick the first element, 5, and the last element, 12.\nTheir concatenation is 512, and we add it to the concatenation value, so it becomes equal to 512.\nThen we delete them from the nums, so nums becomes equal to [14,13,8].\n - In the second operation:\nWe pick the first element, 14, and the last element, 8.\nTheir concatenation is 148, and we add it to the concatenation value, so it becomes equal to 660.\nThen we delete them from the nums, so nums becomes equal to [13].\n - In the third operation:\nnums has only one element, so we pick 13 and add it to the concatenation value, so it becomes equal to 673.\nThen we delete it from nums, so nums become empty.\nSince the concatenation value is 673 so the answer is 673."
            }
        ]
    },
    {
        "Title": "Count the Number of Fair Pairs",
        "slug": "count-the-number-of-fair-pairs",
        "description": "Given a **0-indexed** integer array `nums` of size `n` and two integers `lower` and `upper`, return *the number of fair pairs*.\n\n\nA pair `(i, j)` is **fair** if:\n\n\n `0 <= i < j < n`, and\n `lower <= nums[i] + nums[j] <= upper`\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [0,1,7,4,4,5], lower = 3, upper = 6",
                "Output": "** 6",
                "Explanation": "** There are 6 fair pairs: (0,3), (0,4), (0,5), (1,3), (1,4), and (1,5)."
            },
            {
                "Input": "** nums = [1,7,9,2,5], lower = 11, upper = 11",
                "Output": "** 1",
                "Explanation": "** There is a single fair pair: (2,3)."
            }
        ]
    },
    {
        "Title": "Substring XOR Queries",
        "slug": "substring-xor-queries",
        "description": "You are given a **binary string** `s`, and a **2D** integer array `queries` where `queries[i] = [firsti, secondi]`.\n\n\nFor the `ith` query, find the **shortest substring** of `s` whose **decimal value**, `val`, yields `secondi` when **bitwise XORed** with `firsti`. In other words, `val ^ firsti == secondi`.\n\n\nThe answer to the `ith` query is the endpoints (**0-indexed**) of the substring `[lefti, righti]` or `[-1, -1]` if no such substring exists. If there are multiple answers, choose the one with the **minimum** `lefti`.\n\n\nReturn an array* `ans` *where* `ans[i] = [lefti, righti]` *is the answer to the* `ith` *query.\n\n\nA **substring** is a contiguous non-empty sequence of characters within a string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** s = \"101101\", queries = [[0,5],[1,2]]",
                "Output": "** [[0,2],[2,3]]",
                "Explanation": "** For the first query the substring in range [0,2] is **\"101\"** which has a decimal value of **`5`**, and **`5 ^ 0 = 5`**, hence the answer to the first query is [0,2]. In the second query, the substring in range [2,3] is **\"11\",** and has a decimal value of **3**, and **3 `^ 1 = 2`**.\u00a0So, [2,3] is returned for the second query."
            },
            {
                "Input": "** s = \"0101\", queries = [[12,8]]",
                "Output": "** [[-1,-1]]",
                "Explanation": "** In this example there is no substring that answers the query, hence [-1,-1] is returned."
            },
            {
                "Input": "** s = \"1\", queries = [[4,5]]",
                "Output": "** [[0,0]]",
                "Explanation": "** For this example, the substring in range [0,0] has a decimal value of **`1`**, and **`1 ^ 4 = 5`**. So, the answer is [0,0]."
            }
        ]
    },
    {
        "Title": "Subsequence With the Minimum Score",
        "slug": "subsequence-with-the-minimum-score",
        "description": "You are given two strings `s` and `t`.\n\n\nYou are allowed to remove any number of characters from the string `t`.\n\n\nThe score of the string is `0` if no characters are removed from the string `t`, otherwise:\n\n\n Let `left` be the minimum index among all removed characters.\n Let `right` be the maximum index among all removed characters.\n\n\nThen the score of the string is `right - left + 1`.\n\n\nReturn *the minimum possible score to make* `t`*a subsequence of* `s`*.\n\n\nA **subsequence** of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `\"ace\"` is a subsequence of `\"abcde\"` while `\"aec\"` is not).\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Two Pointers",
            "String",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** s = \"abacaba\", t = \"bzaa\"",
                "Output": "** 1",
                "Explanation": "** In this example, we remove the character \"z\" at index 1 (0-indexed).\nThe string t becomes \"baa\" which is a subsequence of the string \"abacaba\" and the score is 1 - 1 + 1 = 1.\nIt can be proven that 1 is the minimum score that we can achieve."
            },
            {
                "Input": "** s = \"cde\", t = \"xyz\"",
                "Output": "** 3",
                "Explanation": "** In this example, we remove characters \"x\", \"y\" and \"z\" at indices 0, 1, and 2 (0-indexed).\nThe string t becomes \"\" which is a subsequence of the string \"cde\" and the score is 2 - 0 + 1 = 3.\nIt can be proven that 3 is the minimum score that we can achieve."
            }
        ]
    },
    {
        "Title": "Maximum Difference by Remapping a Digit",
        "slug": "maximum-difference-by-remapping-a-digit",
        "description": "You are given an integer `num`. You know that Bob will sneakily **remap** one of the `10` possible digits (`0` to `9`) to another digit.\n\n\nReturn *the difference between the maximum and minimum\u00a0values Bob can make by remapping\u00a0**exactly** **one** digit in* `num`.\n\n\nNotes:\n\n\n When Bob remaps a digit d1\u00a0to another digit d2, Bob replaces all occurrences of `d1`\u00a0in `num`\u00a0with `d2`.\n Bob can remap a digit to itself, in which case `num`\u00a0does not change.\n Bob can remap different digits for obtaining minimum and maximum values respectively.\n The resulting number after remapping can contain leading zeroes.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** num = 11891",
                "Output": "** 99009",
                "Explanation": "** \nTo achieve the maximum value, Bob can remap the digit 1 to the digit 9 to yield 99899.\nTo achieve the minimum value, Bob can remap the digit 1 to the digit 0, yielding 890.\nThe difference between these two numbers is 99009."
            },
            {
                "Input": "** num = 90",
                "Output": "** 99",
                "Explanation": "**\nThe maximum value that can be returned by the function is 99 (if 0 is replaced by 9) and the minimum value that can be returned by the function is 0 (if 9 is replaced by 0).\nThus, we return 99."
            }
        ]
    },
    {
        "Title": "Minimum Score by Changing Two Elements",
        "slug": "minimum-score-by-changing-two-elements",
        "description": "You are given an integer array `nums`.\n\n\n The **low** score of `nums` is the **minimum** absolute difference between any two integers.\n The **high** score of `nums` is the **maximum** absolute difference between any two integers.\n The **score** of `nums` is the sum of the **high** and **low** scores.\n\n\nReturn the **minimum score** after **changing two elements** of `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,4,7,8,5]",
                "Output": "** 3",
                "Explanation": "**\n\n\n* Change `nums[0]` and `nums[1]` to be 6 so that `nums` becomes [6,6,7,8,5].\n* The low score is the minimum absolute difference: |6 - 6| = 0.\n* The high score is the maximum absolute difference: |8 - 5| = 3.\n* The sum of high and low score is 3."
            },
            {
                "Input": "** nums = [1,4,3]",
                "Output": "** 0",
                "Explanation": "**\n\n\n* Change `nums[1]` and `nums[2]` to 1 so that `nums` becomes [1,1,1].\n* The sum of maximum absolute difference and minimum absolute difference is 0.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `3 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\nHints:\n    0. Changing the minimum or maximum values will only minimize the score.\n    1. Think about what all possible pairs of minimum and maximum values can be changed to form the minimum score."
            }
        ]
    },
    {
        "Title": "Minimum Impossible OR",
        "slug": "minimum-impossible-or",
        "description": "You are given a **0-indexed**\u00a0integer array `nums`.\n\n\nWe say that an integer x is **expressible** from `nums` if there exist some integers `0 <= index1 < index2 < ... < indexk < nums.length` for which `nums[index1] | nums[index2] | ... | nums[indexk] = x`. In other words, an integer is expressible if it can be written as the bitwise OR of some subsequence of `nums`.\n\n\nReturn *the minimum **positive non-zero integer**\u00a0that is not* *expressible from* `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Bit Manipulation",
            "Brainteaser"
        ],
        "examples": [
            {
                "Input": "** nums = [2,1]",
                "Output": "** 4",
                "Explanation": "** 1 and 2 are already present in the array. We know that 3 is expressible, since nums[0] | nums[1] = 2 | 1 = 3. Since 4 is not expressible, we return 4."
            },
            {
                "Input": "** nums = [5,3,2]",
                "Output": "** 1",
                "Explanation": "** We can show that 1 is the smallest number that is not expressible."
            }
        ]
    },
    {
        "Title": "Handling Sum Queries After Update",
        "slug": "handling-sum-queries-after-update",
        "description": "You are given two **0-indexed** arrays `nums1` and `nums2` and a 2D array `queries` of queries. There are three types of queries:\n\n\n1. For a query of type 1, `queries[i]\u00a0= [1, l, r]`. Flip the values from `0` to `1` and from `1` to `0` in `nums1`\u00a0from index `l` to index `r`. Both `l` and `r` are **0-indexed**.\n2. For a query of type 2, `queries[i]\u00a0= [2, p, 0]`. For every index `0 <= i < n`, set\u00a0`nums2[i] =\u00a0nums2[i]\u00a0+ nums1[i]\u00a0* p`.\n3. For a query of type 3, `queries[i]\u00a0= [3, 0, 0]`. Find the sum of the elements in `nums2`.\n\n\nReturn *an array containing all the answers to the third type\u00a0queries.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Segment Tree"
        ],
        "examples": [
            {
                "Input": "** nums1 = [1,0,1], nums2 = [0,0,0], queries = [[1,1,1],[2,1,0],[3,0,0]]",
                "Output": "** [3]",
                "Explanation": "** After the first query nums1 becomes [1,1,1]. After the second query, nums2 becomes [1,1,1], so the answer to the third query is 3. Thus, [3] is returned."
            },
            {
                "Input": "** nums1 = [1], nums2 = [5], queries = [[2,0,0],[3,0,0]]",
                "Output": "** [5]",
                "Explanation": "** After the first query, nums2 remains [5], so the answer to the second query is 5. Thus, [5] is returned."
            }
        ]
    },
    {
        "Title": "Merge Two 2D Arrays by Summing Values",
        "slug": "merge-two-2d-arrays-by-summing-values",
        "description": "You are given two **2D** integer arrays `nums1` and `nums2.`\n\n\n `nums1[i] = [idi, vali]`\u00a0indicate that the number with the id `idi` has a value equal to `vali`.\n `nums2[i] = [idi, vali]`\u00a0indicate that the number with the id `idi` has a value equal to `vali`.\n\n\nEach array contains **unique** ids and is sorted in **ascending** order by id.\n\n\nMerge the two arrays into one array that is sorted in ascending order by id, respecting the following conditions:\n\n\n Only ids that appear in at least one of the two arrays should be included in the resulting array.\n Each id should be included **only once** and its value should be the sum of the values of this id in the two arrays. If the id does not exist in one of the two arrays then its value in that array is considered to be `0`.\n\n\nReturn *the resulting array*. The returned array must be sorted in ascending order by id.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** nums1 = [[1,2],[2,3],[4,5]], nums2 = [[1,4],[3,2],[4,1]]",
                "Output": "** [[1,6],[2,3],[3,2],[4,6]]",
                "Explanation": "** The resulting array contains the following:\n- id = 1, the value of this id is 2 + 4 = 6.\n- id = 2, the value of this id is 3.\n- id = 3, the value of this id is 2.\n- id = 4, the value of this id is 5 + 1 = 6."
            },
            {
                "Input": "** nums1 = [[2,4],[3,6],[5,5]], nums2 = [[1,3],[4,3]]",
                "Output": "** [[1,3],[2,4],[3,6],[4,3],[5,5]]",
                "Explanation": "** There are no common ids, so we just include each id with its value in the resulting list."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Reduce an Integer to 0",
        "slug": "minimum-operations-to-reduce-an-integer-to-0",
        "description": "You are given a positive integer `n`, you can do the following operation **any** number of times:\n\n\n Add or subtract a **power** of `2` from `n`.\n\n\nReturn *the **minimum** number of operations to make* `n` *equal to* `0`.\n\n\nA number `x` is power of `2` if `x == 2i`\u00a0where `i >= 0`*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming",
            "Greedy",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** n = 39",
                "Output": "** 3",
                "Explanation": "** We can do the following operations:\n- Add 20 = 1 to n, so now n = 40.\n- Subtract 23 = 8 from n, so now n = 32.\n- Subtract 25 = 32 from n, so now n = 0.\nIt can be shown that 3 is the minimum number of operations we need to make n equal to 0."
            },
            {
                "Input": "** n = 54",
                "Output": "** 3",
                "Explanation": "** We can do the following operations:\n- Add 21 = 2 to n, so now n = 56.\n- Add 23 = 8 to n, so now n = 64.\n- Subtract 26 = 64 from n, so now n = 0.\nSo the minimum number of operations is 3."
            }
        ]
    },
    {
        "Title": "Count the Number of Square-Free Subsets",
        "slug": "count-the-number-of-square-free-subsets",
        "description": "You are given a positive integer **0-indexed**\u00a0array `nums`.\n\n\nA subset of the array `nums` is **square-free** if the product of its elements is a **square-free integer**.\n\n\nA **square-free integer** is an integer that is divisible by no square number other than `1`.\n\n\nReturn *the number of square-free non-empty subsets of the array* **nums**. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n\nA **non-empty**\u00a0**subset** of `nums` is an array that can be obtained by deleting some (possibly none but not all) elements from `nums`. Two subsets are different if and only if the chosen indices to delete are different.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** nums = [3,4,4,5]",
                "Output": "** 3",
                "Explanation": "** There are 3 square-free subsets in this example:\n- The subset consisting of the 0th element [3]. The product of its elements is 3, which is a square-free integer.\n- The subset consisting of the 3rd element [5]. The product of its elements is 5, which is a square-free integer.\n- The subset consisting of 0th and 3rd elements [3,5]. The product of its elements is 15, which is a square-free integer.\nIt can be proven that there are no more than 3 square-free subsets in the given array."
            },
            {
                "Input": "** nums = [1]",
                "Output": "** 1",
                "Explanation": "** There is 1 square-free subset in this example:\n- The subset consisting of the 0th element [1]. The product of its elements is 1, which is a square-free integer.\nIt can be proven that there is no more than 1 square-free subset in the given array."
            }
        ]
    },
    {
        "Title": "Find the String with LCP",
        "slug": "find-the-string-with-lcp",
        "description": "We define the `lcp` matrix of any **0-indexed** string `word` of `n` lowercase English letters as an `n x n` grid such that:\n\n\n `lcp[i][j]` is equal to the length of the **longest common prefix** between the substrings `word[i,n-1]` and `word[j,n-1]`.\n\n\nGiven an\u00a0`n x n` matrix `lcp`, return the alphabetically smallest string `word` that corresponds to `lcp`. If there is no such string, return an empty string.\n\n\nA string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, string `a` has a letter that appears earlier in the alphabet than the corresponding letter in `b`. For example, `\"aabd\"` is lexicographically smaller than `\"aaca\"` because the first position they differ is at the third letter, and `'b'` comes before `'c'`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "String",
            "Dynamic Programming",
            "Greedy",
            "Union Find",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** lcp = [[4,0,2,0],[0,3,0,1],[2,0,2,0],[0,1,0,1]]",
                "Output": "** \"abab\"",
                "Explanation": "** lcp corresponds to any 4 letter string with two alternating letters. The lexicographically smallest of them is \"abab\"."
            },
            {
                "Input": "** lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,1]]",
                "Output": "** \"aaaa\"",
                "Explanation": "** lcp corresponds to any 4 letter string with a single distinct letter. The lexicographically smallest of them is \"aaaa\"."
            },
            {
                "Input": "** lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,3]]",
                "Output": "** \"\"",
                "Explanation": "** lcp[3][3] cannot be equal to 3 since word[3,...,3] consists of only a single letter; Thus, no answer exists."
            }
        ]
    },
    {
        "Title": "Find the Divisibility Array of a String",
        "slug": "find-the-divisibility-array-of-a-string",
        "description": "You are given a **0-indexed** string `word` of length `n`\u00a0consisting of digits, and a positive integer\u00a0`m`.\n\n\nThe **divisibility array** `div` of `word` is an integer array of length `n` such that:\n\n\n `div[i] = 1` if the\u00a0**numeric value**\u00a0of\u00a0`word[0,...,i]` is divisible by `m`, or\n `div[i] = 0` otherwise.\n\n\nReturn *the divisibility array of*`word`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "String"
        ],
        "examples": [
            {
                "Input": "** word = \"998244353\", m = 3",
                "Output": "** [1,1,0,0,0,1,1,0,0]",
                "Explanation": "** There are only 4 prefixes that are divisible by 3: \"9\", \"99\", \"998244\", and \"9982443\"."
            },
            {
                "Input": "** word = \"1010\", m = 10",
                "Output": "** [0,1,0,1]",
                "Explanation": "** There are only 2 prefixes that are divisible by 10: \"10\", and \"1010\"."
            }
        ]
    },
    {
        "Title": "Find the Maximum Number of Marked Indices",
        "slug": "find-the-maximum-number-of-marked-indices",
        "description": "You are given a **0-indexed** integer array `nums`.\n\n\nInitially, all of the indices are unmarked. You are allowed to make this operation any number of times:\n\n\n Pick two **different unmarked** indices `i` and `j` such that `2 * nums[i] <= nums[j]`, then mark `i` and `j`.\n\n\nReturn *the maximum possible number of marked indices in `nums` using the above operation any number of times*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [3,5,2,4]",
                "Output": "** 2",
                "Explanation": "** In the first operation: pick i = 2 and j = 1, the operation is allowed because 2 * nums[2] <= nums[1]. Then mark index 2 and 1.\nIt can be shown that there's no other valid operation so the answer is 2."
            },
            {
                "Input": "** nums = [9,2,5,4]",
                "Output": "** 4",
                "Explanation": "** In the first operation: pick i = 3 and j = 0, the operation is allowed because 2 * nums[3] <= nums[0]. Then mark index 3 and 0.\nIn the second operation: pick i = 1 and j = 2, the operation is allowed because 2 * nums[1] <= nums[2]. Then mark index 1 and 2.\nSince there is no other operation, the answer is 4."
            },
            {
                "Input": "** nums = [7,6,8]",
                "Output": "** 0",
                "Explanation": "** There is no valid operation to do, so the answer is 0."
            }
        ]
    },
    {
        "Title": "Minimum Time to Visit a Cell In a Grid",
        "slug": "minimum-time-to-visit-a-cell-in-a-grid",
        "description": "You are given a `m x n` matrix `grid` consisting of **non-negative** integers where `grid[row][col]` represents the **minimum** time required to be able to visit the cell `(row, col)`, which means you can visit the cell `(row, col)` only when the time you visit it is greater than or equal to `grid[row][col]`.\n\n\nYou are standing in the **top-left** cell of the matrix in the `0th` second, and you must move to **any** adjacent cell in the four directions: up, down, left, and right. Each move you make takes 1 second.\n\n\nReturn *the **minimum** time required in which you can visit the bottom-right cell of the matrix*. If you cannot visit the bottom-right cell, then return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Breadth-First Search",
            "Graph",
            "Heap (Priority Queue)",
            "Matrix",
            "Shortest Path"
        ],
        "examples": [
            {
                "Input": "** grid = [[0,1,3,2],[5,1,2,5],[4,3,8,6]]",
                "Output": "** 7",
                "Explanation": "** One of the paths that we can take is the following:\n- at t = 0, we are on the cell (0,0).\n- at t = 1, we move to the cell (0,1). It is possible because grid[0][1] <= 1.\n- at t = 2, we move to the cell (1,1). It is possible because grid[1][1] <= 2.\n- at t = 3, we move to the cell (1,2). It is possible because grid[1][2] <= 3.\n- at t = 4, we move to the cell (1,1). It is possible because grid[1][1] <= 4.\n- at t = 5, we move to the cell (1,2). It is possible because grid[1][2] <= 5.\n- at t = 6, we move to the cell (1,3). It is possible because grid[1][3] <= 6.\n- at t = 7, we move to the cell (2,3). It is possible because grid[2][3] <= 7.\nThe final time is 7. It can be shown that it is the minimum time possible."
            },
            {
                "Input": "** grid = [[0,2,4],[3,2,1],[1,0,4]]",
                "Output": "** -1",
                "Explanation": "** There is no path from the top left to the bottom-right cell."
            }
        ]
    },
    {
        "Title": "Split With Minimum Sum",
        "slug": "split-with-minimum-sum",
        "description": "Given a positive integer `num`, split it into two non-negative integers `num1` and `num2` such that:\n\n\n The concatenation of `num1` and `num2` is a permutation of `num`.\n\t+ In other words, the sum of the number of occurrences of each digit in `num1` and `num2` is equal to the number of occurrences of that digit in `num`.\n `num1` and `num2` can contain leading zeros.\n\n\nReturn *the **minimum** possible sum of* `num1` *and* `num2`.\n\n\nNotes:\n\n\n It is guaranteed that `num` does not contain any leading zeros.\n The order of occurrence of the digits in `num1` and `num2` may differ from the order of occurrence of `num`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** num = 4325",
                "Output": "** 59",
                "Explanation": "** We can split 4325 so that num1 is 24 and num2 is 35, giving a sum of 59. We can prove that 59 is indeed the minimal possible sum."
            },
            {
                "Input": "** num = 687",
                "Output": "** 75",
                "Explanation": "** We can split 687 so that num1 is 68 and num2 is 7, which would give an optimal sum of 75."
            }
        ]
    },
    {
        "Title": "Count Total Number of Colored Cells",
        "slug": "count-total-number-of-colored-cells",
        "description": "There exists an infinitely large two-dimensional grid of uncolored unit cells. You are given a positive integer `n`, indicating that you must do the following routine for `n` minutes:\n\n\n At the first minute, color **any** arbitrary unit cell blue.\n Every minute thereafter, color blue **every** uncolored cell that touches a blue cell.\n\n\nBelow is a pictorial representation of the state of the grid after minutes 1, 2, and 3.\n\n\n![](https://assets.leetcode.com/uploads/2023/01/10/example-copy-2.png)\nReturn *the number of **colored cells** at the end of* `n` *minutes*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** 1",
                "Explanation": "** After 1 minute, there is only 1 blue cell, so we return 1."
            },
            {
                "Input": "** n = 2",
                "Output": "** 5",
                "Explanation": "** After 2 minutes, there are 4 colored cells on the boundary and 1 in the center, so we return 5."
            }
        ]
    },
    {
        "Title": "Count Ways to Group Overlapping Ranges",
        "slug": "count-ways-to-group-overlapping-ranges",
        "description": "You are given a 2D integer array `ranges` where `ranges[i] = [starti, endi]` denotes that all integers between `starti` and `endi` (both **inclusive**) are contained in the `ith` range.\n\n\nYou are to split `ranges` into **two** (possibly empty) groups such that:\n\n\n Each range belongs to exactly one group.\n Any two **overlapping** ranges must belong to the **same** group.\n\n\nTwo ranges are said to be **overlapping**\u00a0if there exists at least **one** integer that is present in both ranges.\n\n\n For example, `[1, 3]` and `[2, 5]` are overlapping because `2` and `3` occur in both ranges.\n\n\nReturn *the **total number** of ways to split* `ranges` *into two groups*. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** ranges = [[6,10],[5,15]]",
                "Output": "** 2",
                "Explanation": "** \nThe two ranges are overlapping, so they must be in the same group.\nThus, there are two possible ways:\n- Put both the ranges together in group 1.\n- Put both the ranges together in group 2."
            },
            {
                "Input": "** ranges = [[1,3],[10,20],[2,5],[4,8]]",
                "Output": "** 4",
                "Explanation": "** \nRanges [1,3], and [2,5] are overlapping. So, they must be in the same group.\nAgain, ranges [2,5] and [4,8] are also overlapping. So, they must also be in the same group. \nThus, there are four possible ways to group them:\n- All the ranges in group 1.\n- All the ranges in group 2.\n- Ranges [1,3], [2,5], and [4,8] in group 1 and [10,20] in group 2.\n- Ranges [1,3], [2,5], and [4,8] in group 2 and [10,20] in group 1."
            }
        ]
    },
    {
        "Title": "Count Number of Possible Root Nodes",
        "slug": "count-number-of-possible-root-nodes",
        "description": "Alice has an undirected tree with `n` nodes labeled from `0` to `n - 1`. The tree is represented as a 2D integer array `edges` of length `n - 1` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree.\n\n\nAlice wants Bob to find the root of the tree. She allows Bob to make several **guesses** about her tree. In one guess, he does the following:\n\n\n Chooses two **distinct** integers `u` and `v` such that there exists an edge `[u, v]` in the tree.\n He tells Alice that `u` is the **parent** of `v` in the tree.\n\n\nBob's guesses are represented by a 2D integer array `guesses` where `guesses[j] = [uj, vj]` indicates Bob guessed `uj` to be the parent of `vj`.\n\n\nAlice being lazy, does not reply to each of Bob's guesses, but just says that **at least** `k` of his guesses are `true`.\n\n\nGiven the 2D integer arrays `edges`, `guesses` and the integer `k`, return *the **number of possible nodes** that can be the root of Alice's tree*. If there is no such tree, return `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "Dynamic Programming",
            "Tree",
            "Depth-First Search"
        ],
        "examples": [
            {
                "Input": "** edges = [[0,1],[1,2],[1,3],[4,2]], guesses = [[1,3],[0,1],[1,0],[2,4]], k = 3",
                "Output": "** 3",
                "Explanation": "** \nRoot = 0, correct guesses = [1,3], [0,1], [2,4]\nRoot = 1, correct guesses = [1,3], [1,0], [2,4]\nRoot = 2, correct guesses = [1,3], [1,0], [2,4]\nRoot = 3, correct guesses = [1,0], [2,4]\nRoot = 4, correct guesses = [1,3], [1,0]\nConsidering 0, 1, or 2 as root node leads to 3 correct guesses."
            },
            {
                "Input": "** edges = [[0,1],[1,2],[2,3],[3,4]], guesses = [[1,0],[3,4],[2,1],[3,2]], k = 1",
                "Output": "** 5",
                "Explanation": "** \nRoot = 0, correct guesses = [3,4]\nRoot = 1, correct guesses = [1,0], [3,4]\nRoot = 2, correct guesses = [1,0], [2,1], [3,4]\nRoot = 3, correct guesses = [1,0], [2,1], [3,2], [3,4]\nRoot = 4, correct guesses = [1,0], [2,1], [3,2]\nConsidering any node as root will give at least 1 correct guess."
            }
        ]
    },
    {
        "Title": "Pass the Pillow",
        "slug": "pass-the-pillow",
        "description": "There are `n` people standing in a line labeled from `1` to `n`. The first person in the line is holding a pillow initially. Every second, the person holding the pillow passes it to the next person standing in the line. Once the pillow reaches the end of the line, the direction changes, and people continue passing the pillow in the opposite direction.\n\n\n For example, once the pillow reaches the `nth` person they pass it to the `n - 1th` person, then to the `n - 2th` person and so on.\n\n\nGiven the two positive integers `n` and `time`, return *the index of the person holding the pillow after* `time` *seconds*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** n = 4, time = 5",
                "Output": "** 2",
                "Explanation": "** People pass the pillow in the following way: 1 -> 2 -> 3 -> 4 -> 3 -> 2.\nAfer five seconds, the pillow is given to the 2nd person."
            },
            {
                "Input": "** n = 3, time = 2",
                "Output": "** 3",
                "Explanation": "** People pass the pillow in the following way: 1 -> 2 -> 3.\nAfer two seconds, the pillow is given to the 3rd person."
            }
        ]
    },
    {
        "Title": "Kth Largest Sum in a Binary Tree",
        "slug": "kth-largest-sum-in-a-binary-tree",
        "description": "You are given the `root` of a binary tree and a positive integer `k`.\n\n\nThe **level sum** in the tree is the sum of the values of the nodes that are on the **same** level.\n\n\nReturn *the* `kth` ***largest** level sum in the tree (not necessarily distinct)*. If there are fewer than `k` levels in the tree, return `-1`.\n\n\nNote** that two nodes are on the same level if they have the same distance from the root.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Tree",
            "Breadth-First Search",
            "Sorting",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [5,8,9,2,1,3,7,4,6], k = 2",
                "Output": "** 13",
                "Explanation": "** The level sums are the following:\n- Level 1: 5.\n- Level 2: 8 + 9 = 17.\n- Level 3: 2 + 1 + 3 + 7 = 13.\n- Level 4: 4 + 6 = 10.\nThe 2nd largest level sum is 13."
            },
            {
                "Input": "** root = [1,2,null,3], k = 1",
                "Output": "** 3",
                "Explanation": "** The largest level sum is 3."
            }
        ]
    },
    {
        "Title": "Split the Array to Make Coprime Products",
        "slug": "split-the-array-to-make-coprime-products",
        "description": "You are given a **0-indexed** integer array `nums` of length `n`.\n\n\nA **split** at an index `i` where `0 <= i <= n - 2` is called **valid** if the product of the first `i + 1` elements and the product of the remaining elements are coprime.\n\n\n For example, if `nums = [2, 3, 3]`, then a split at the index `i = 0` is valid because `2` and `9` are coprime, while a split at the index `i = 1` is not valid because `6` and `3` are not coprime. A split at the index `i = 2` is not valid because `i == n - 1`.\n\n\nReturn *the smallest index* `i` *at which the array can be split validly or* `-1` *if there is no such split*.\n\n\nTwo values `val1` and `val2` are coprime if `gcd(val1, val2) == 1` where `gcd(val1, val2)` is the greatest common divisor of `val1` and `val2`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [4,7,8,15,3,5]",
                "Output": "** 2",
                "Explanation": "** The table above shows the values of the product of the first i + 1 elements, the remaining elements, and their gcd at each index i.\nThe only valid split is at index 2."
            },
            {
                "Input": "** nums = [4,7,15,8,3,5]",
                "Output": "** -1",
                "Explanation": "** The table above shows the values of the product of the first i + 1 elements, the remaining elements, and their gcd at each index i.\nThere is no valid split."
            }
        ]
    },
    {
        "Title": "Number of Ways to Earn Points",
        "slug": "number-of-ways-to-earn-points",
        "description": "There is a test that has `n` types of questions. You are given an integer `target` and a **0-indexed** 2D integer array `types` where `types[i] = [counti, marksi]` indicates that there are `counti` questions of the `ith` type, and each one of them is worth `marksi` points.\n\n\n\n\nReturn *the number of ways you can earn **exactly*** `target` *points in the exam*. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n\nNote** that questions of the same type are indistinguishable.\n\n\n For example, if there are `3` questions of the same type, then solving the `1st` and `2nd` questions is the same as solving the `1st` and `3rd` questions, or the `2nd` and `3rd` questions.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** target = 6, types = [[6,1],[3,2],[2,3]]",
                "Output": "** 7",
                "Explanation": "** You can earn 6 points in one of the seven ways:\n- Solve 6 questions of the 0th type: 1 + 1 + 1 + 1 + 1 + 1 = 6\n- Solve 4 questions of the 0th type and 1 question of the 1st type: 1 + 1 + 1 + 1 + 2 = 6\n- Solve 2 questions of the 0th type and 2 questions of the 1st type: 1 + 1 + 2 + 2 = 6\n- Solve 3 questions of the 0th type and 1 question of the 2nd type: 1 + 1 + 1 + 3 = 6\n- Solve 1 question of the 0th type, 1 question of the 1st type and 1 question of the 2nd type: 1 + 2 + 3 = 6\n- Solve 3 questions of the 1st type: 2 + 2 + 2 = 6\n- Solve 2 questions of the 2nd type: 3 + 3 = 6"
            },
            {
                "Input": "** target = 5, types = [[50,1],[50,2],[50,5]]",
                "Output": "** 4",
                "Explanation": "** You can earn 5 points in one of the four ways:\n- Solve 5 questions of the 0th type: 1 + 1 + 1 + 1 + 1 = 5\n- Solve 3 questions of the 0th type and 1 question of the 1st type: 1 + 1 + 1 + 2 = 5\n- Solve 1 questions of the 0th type and 2 questions of the 1st type: 1 + 2 + 2 = 5\n- Solve 1 question of the 2nd type: 5"
            },
            {
                "Input": "** target = 18, types = [[6,1],[3,2],[2,3]]",
                "Output": "** 1",
                "Explanation": "** You can only earn 18 points by answering all questions."
            }
        ]
    },
    {
        "Title": "Count the Number of Vowel Strings in Range",
        "slug": "count-the-number-of-vowel-strings-in-range",
        "description": "You are given a **0-indexed** array of string `words` and two integers `left` and `right`.\n\n\nA string is called a **vowel string** if it starts with a vowel character and ends with a vowel character where vowel characters are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.\n\n\nReturn *the number of vowel strings* `words[i]` *where* `i` *belongs to the inclusive range* `[left, right]`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "examples": [
            {
                "Input": "** words = [\"are\",\"amy\",\"u\"], left = 0, right = 2",
                "Output": "** 2",
                "Explanation": "** \n- \"are\" is a vowel string because it starts with 'a' and ends with 'e'.\n- \"amy\" is not a vowel string because it does not end with a vowel.\n- \"u\" is a vowel string because it starts with 'u' and ends with 'u'.\nThe number of vowel strings in the mentioned range is 2."
            },
            {
                "Input": "** words = [\"hey\",\"aeo\",\"mu\",\"ooo\",\"artro\"], left = 1, right = 4",
                "Output": "** 3",
                "Explanation": "** \n- \"aeo\" is a vowel string because it starts with 'a' and ends with 'o'.\n- \"mu\" is not a vowel string because it does not start with a vowel.\n- \"ooo\" is a vowel string because it starts with 'o' and ends with 'o'.\n- \"artro\" is a vowel string because it starts with 'a' and ends with 'o'.\nThe number of vowel strings in the mentioned range is 3."
            }
        ]
    },
    {
        "Title": "Rearrange Array to Maximize Prefix Score",
        "slug": "rearrange-array-to-maximize-prefix-score",
        "description": "You are given a **0-indexed** integer array `nums`. You can rearrange the elements of `nums` to **any order** (including the given order).\n\n\nLet `prefix` be the array containing the prefix sums of `nums` after rearranging it. In other words, `prefix[i]` is the sum of the elements from `0` to `i` in `nums` after rearranging it. The **score** of `nums` is the number of positive integers in the array `prefix`.\n\n\nReturn *the maximum score you can achieve*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [2,-1,0,1,-3,3,-3]",
                "Output": "** 6",
                "Explanation": "** We can rearrange the array into nums = [2,3,1,-1,-3,0,-3].\nprefix = [2,5,6,5,2,2,-1], so the score is 6.\nIt can be shown that 6 is the maximum score we can obtain."
            },
            {
                "Input": "** nums = [-2,-3,0]",
                "Output": "** 0",
                "Explanation": "** Any rearrangement of the array will result in a score of 0."
            }
        ]
    },
    {
        "Title": "Count the Number of Beautiful Subarrays",
        "slug": "count-the-number-of-beautiful-subarrays",
        "description": "You are given a **0-indexed** integer array `nums`. In one operation, you can:\n\n\n Choose two different indices `i` and `j` such that `0 <= i, j < nums.length`.\n Choose a non-negative integer `k` such that the `kth` bit (**0-indexed**) in the binary representation of `nums[i]` and `nums[j]` is `1`.\n Subtract `2k` from `nums[i]` and `nums[j]`.\n\n\nA subarray is **beautiful** if it is possible to make all of its elements equal to `0` after applying the above operation any number of times.\n\n\nReturn *the number of **beautiful subarrays** in the array* `nums`.\n\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Bit Manipulation",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [4,3,1,2,4]",
                "Output": "** 2",
                "Explanation": "** There are 2 beautiful subarrays in nums: [4,3,1,2,4] and [4,3,1,2,4].\n- We can make all elements in the subarray [3,1,2] equal to 0 in the following way:\n  - Choose [3, 1, 2] and k = 1. Subtract 21 from both numbers. The subarray becomes [1, 1, 0].\n  - Choose [1, 1, 0] and k = 0. Subtract 20 from both numbers. The subarray becomes [0, 0, 0].\n- We can make all elements in the subarray [4,3,1,2,4] equal to 0 in the following way:\n  - Choose [4, 3, 1, 2, 4] and k = 2. Subtract 22 from both numbers. The subarray becomes [0, 3, 1, 2, 0].\n  - Choose [0, 3, 1, 2, 0] and k = 0. Subtract 20 from both numbers. The subarray becomes [0, 2, 0, 2, 0].\n  - Choose [0, 2, 0, 2, 0] and k = 1. Subtract 21 from both numbers. The subarray becomes [0, 0, 0, 0, 0]."
            },
            {
                "Input": "** nums = [1,10,4]",
                "Output": "** 0",
                "Explanation": "** There are no beautiful subarrays in nums."
            }
        ]
    },
    {
        "Title": "Minimum Time to Complete All Tasks",
        "slug": "minimum-time-to-complete-all-tasks",
        "description": "There is a computer that can run an unlimited number of tasks **at the same time**. You are given a 2D integer array `tasks` where `tasks[i] = [starti, endi, durationi]` indicates that the `ith` task should run for a total of `durationi` seconds (not necessarily continuous) within the **inclusive** time range `[starti, endi]`.\n\n\nYou may turn on the computer only when it needs to run a task. You can also turn it off if it is idle.\n\n\nReturn *the minimum time during which the computer should be turned on to complete all tasks*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Stack",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** tasks = [[2,3,1],[4,5,1],[1,5,2]]",
                "Output": "** 2",
                "Explanation": "** \n- The first task can be run in the inclusive time range [2, 2].\n- The second task can be run in the inclusive time range [5, 5].\n- The third task can be run in the two inclusive time ranges [2, 2] and [5, 5].\nThe computer will be on for a total of 2 seconds."
            },
            {
                "Input": "** tasks = [[1,3,2],[2,5,3],[5,6,2]]",
                "Output": "** 4",
                "Explanation": "** \n- The first task can be run in the inclusive time range [2, 3].\n- The second task can be run in the inclusive time ranges [2, 3] and [5, 5].\n- The third task can be run in the two inclusive time range [5, 6].\nThe computer will be on for a total of 4 seconds."
            }
        ]
    },
    {
        "Title": "Distribute Money to Maximum Children",
        "slug": "distribute-money-to-maximum-children",
        "description": "You are given an integer `money` denoting the amount of money (in dollars) that you have and another integer `children` denoting the number of children that you must distribute the money to.\n\n\nYou have to distribute the money according to the following rules:\n\n\n All money must be distributed.\n Everyone must receive at least `1` dollar.\n Nobody receives `4` dollars.\n\n\nReturn *the **maximum** number of children who may receive **exactly*** `8` *dollars if you distribute the money according to the aforementioned rules*. If there is no way to distribute the money, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** money = 20, children = 3",
                "Output": "** 1",
                "Explanation": "** \nThe maximum number of children with 8 dollars will be 1. One of the ways to distribute the money is:\n- 8 dollars to the first child.\n- 9 dollars to the second child. \n- 3 dollars to the third child.\nIt can be proven that no distribution exists such that number of children getting 8 dollars is greater than 1."
            },
            {
                "Input": "** money = 16, children = 2",
                "Output": "** 2",
                "Explanation": "** Each child can be given 8 dollars."
            }
        ]
    },
    {
        "Title": "Maximize Greatness of an Array",
        "slug": "maximize-greatness-of-an-array",
        "description": "You are given a 0-indexed integer array `nums`. You are allowed to permute `nums` into a new array `perm` of your choosing.\n\n\nWe define the **greatness** of `nums` be the number of indices `0 <= i < nums.length` for which `perm[i] > nums[i]`.\n\n\nReturn *the **maximum** possible greatness you can achieve after permuting* `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,5,2,1,3,1]",
                "Output": "** 4",
                "Explanation": "** One of the optimal rearrangements is perm = [2,5,1,3,3,1,1].\nAt indices = 0, 1, 3, and 4, perm[i] > nums[i]. Hence, we return 4."
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 3",
                "Explanation": "** We can prove the optimal perm is [2,3,4,1].\nAt indices = 0, 1, and 2, perm[i] > nums[i]. Hence, we return 3."
            }
        ]
    },
    {
        "Title": "Find Score of an Array After Marking All Elements",
        "slug": "find-score-of-an-array-after-marking-all-elements",
        "description": "You are given an array `nums` consisting of positive integers.\n\n\nStarting with `score = 0`, apply the following algorithm:\n\n\n Choose the smallest integer of the array that is not marked. If there is a tie, choose the one with the smallest index.\n Add the value of the chosen integer to `score`.\n Mark **the chosen element and its two adjacent elements if they exist**.\n Repeat until all the array elements are marked.\n\n\nReturn *the score you get after applying the above algorithm*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Heap (Priority Queue)",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [2,1,3,4,5,2]",
                "Output": "** 7",
                "Explanation": "** We mark the elements as follows:\n- 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [2,1,3,4,5,2].\n- 2 is the smallest unmarked element, so we mark it and its left adjacent element: [2,1,3,4,5,2].\n- 4 is the only remaining unmarked element, so we mark it: [2,1,3,4,5,2].\nOur score is 1 + 2 + 4 = 7."
            },
            {
                "Input": "** nums = [2,3,5,1,3,2]",
                "Output": "** 5",
                "Explanation": "** We mark the elements as follows:\n- 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [2,3,5,1,3,2].\n- 2 is the smallest unmarked element, since there are two of them, we choose the left-most one, so we mark the one at index 0 and its right adjacent element: [2,3,5,1,3,2].\n- 2 is the only remaining unmarked element, so we mark it: [2,3,5,1,3,2].\nOur score is 1 + 2 + 2 = 5."
            }
        ]
    },
    {
        "Title": "Minimum Time to Repair Cars",
        "slug": "minimum-time-to-repair-cars",
        "description": "You are given an integer array `ranks` representing the **ranks** of some mechanics. ranksi is the rank of the ith mechanic. A mechanic with a rank `r` can repair n cars in `r * n2` minutes.\n\n\nYou are also given an integer `cars` representing the total number of cars waiting in the garage to be repaired.\n\n\nReturn *the **minimum** time taken to repair all the cars.\n\n\nNote:** All the mechanics can repair the cars simultaneously.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** ranks = [4,2,3,1], cars = 10",
                "Output": "** 16",
                "Explanation": "** \n- The first mechanic will repair two cars. The time required is 4 * 2 * 2 = 16 minutes.\n- The second mechanic will repair two cars. The time required is 2 * 2 * 2 = 8 minutes.\n- The third mechanic will repair two cars. The time required is 3 * 2 * 2 = 12 minutes.\n- The fourth mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.\nIt can be proved that the cars cannot be repaired in less than 16 minutes.\u200b\u200b\u200b\u200b\u200b"
            },
            {
                "Input": "** ranks = [5,1,8], cars = 6",
                "Output": "** 16",
                "Explanation": "** \n- The first mechanic will repair one car. The time required is 5 * 1 * 1 = 5 minutes.\n- The second mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.\n- The third mechanic will repair one car. The time required is 8 * 1 * 1 = 8 minutes.\nIt can be proved that the cars cannot be repaired in less than 16 minutes.\u200b\u200b\u200b\u200b\u200b"
            }
        ]
    },
    {
        "Title": "Number of Even and Odd Bits",
        "slug": "number-of-even-and-odd-bits",
        "description": "You are given a **positive** integer `n`.\n\n\nLet `even` denote the number of even indices in the binary representation of `n` with value 1.\n\n\nLet `odd` denote the number of odd indices in the binary representation of `n` with value 1.\n\n\nNote that bits are indexed from **right to left** in the binary representation of a number.\n\n\nReturn the array `[even, odd]`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** n = 50",
                "Output": "** [1,2]",
                "Explanation": "**\n\n\nThe binary representation of 50 is `110010`.\n\n\nIt contains 1 on indices 1, 4, and 5."
            },
            {
                "Input": "** n = 2",
                "Output": "** [0,1]",
                "Explanation": "**\n\n\nThe binary representation of 2 is `10`.\n\n\nIt contains 1 only on index 1.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 1000`\n\n\nHints:\n    0. Maintain two integer variables, even and odd, to count the number of even and odd indices in the binary representation of integer n.\n    1. Divide n by 2 while n is positive, and if n modulo 2 is 1, add 1 to its corresponding variable.\nSimilarQuestions: [1295]"
            }
        ]
    },
    {
        "Title": "Check Knight Tour Configuration",
        "slug": "check-knight-tour-configuration",
        "description": "There is a knight on an `n x n` chessboard. In a valid configuration, the knight starts **at the top-left cell** of the board and visits every cell on the board **exactly once**.\n\n\nYou are given an `n x n` integer matrix `grid` consisting of distinct integers from the range `[0, n * n - 1]` where `grid[row][col]` indicates that the cell `(row, col)` is the `grid[row][col]th` cell that the knight visited. The moves are **0-indexed**.\n\n\nReturn `true` *if* `grid` *represents a valid configuration of the knight's movements or* `false` *otherwise*.\n\n\nNote** that a valid knight move consists of moving two squares vertically and one square horizontally, or two squares horizontally and one square vertically. The figure below illustrates all the possible eight moves of a knight from some cell.\n\n\n![](https://assets.leetcode.com/uploads/2018/10/12/knight.png)\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** grid = [[0,11,16,5,20],[17,4,19,10,15],[12,1,8,21,6],[3,18,23,14,9],[24,13,2,7,22]]",
                "Output": "** true",
                "Explanation": "** The above diagram represents the grid. It can be shown that it is a valid configuration."
            },
            {
                "Input": "** grid = [[0,3,6],[5,8,1],[2,7,4]]",
                "Output": "** false",
                "Explanation": "** The above diagram represents the grid. The 8th move of the knight is not valid considering its position after the 7th move."
            }
        ]
    },
    {
        "Title": "The Number of Beautiful Subsets",
        "slug": "the-number-of-beautiful-subsets",
        "description": "You are given an array `nums` of positive integers and a **positive** integer `k`.\n\n\nA subset of `nums` is **beautiful** if it does not contain two integers with an absolute difference equal to `k`.\n\n\nReturn *the number of **non-empty beautiful** subsets of the array* `nums`.\n\n\nA **subset** of `nums` is an array that can be obtained by deleting some (possibly none) elements from `nums`. Two subsets are different if and only if the chosen indices to delete are different.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Backtracking",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [2,4,6], k = 2",
                "Output": "** 4",
                "Explanation": "** The beautiful subsets of the array nums are: [2], [4], [6], [2, 6].\nIt can be proved that there are only 4 beautiful subsets in the array [2,4,6]."
            },
            {
                "Input": "** nums = [1], k = 1",
                "Output": "** 1",
                "Explanation": "** The beautiful subset of the array nums is [1].\nIt can be proved that there is only 1 beautiful subset in the array [1]."
            }
        ]
    },
    {
        "Title": "Smallest Missing Non-negative Integer After Operations",
        "slug": "smallest-missing-non-negative-integer-after-operations",
        "description": "You are given a **0-indexed** integer array `nums` and an integer `value`.\n\n\nIn one operation, you can add or subtract `value` from any element of `nums`.\n\n\n For example, if `nums = [1,2,3]` and `value = 2`, you can choose to subtract `value` from `nums[0]` to make `nums = [-1,2,3]`.\n\n\nThe MEX (minimum excluded) of an array is the smallest missing **non-negative** integer in it.\n\n\n For example, the MEX of `[-1,2,3]` is `0` while the MEX of `[1,0,3]` is `2`.\n\n\nReturn *the maximum MEX of* `nums` *after applying the mentioned operation **any number of times***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums = [1,-10,7,13,6,8], value = 5",
                "Output": "** 4",
                "Explanation": "** One can achieve this result by applying the following operations:\n- Add value to nums[1] twice to make nums = [1,**0**,7,13,6,8]\n- Subtract value from nums[2] once to make nums = [1,0,**2**,13,6,8]\n- Subtract value from nums[3] twice to make nums = [1,0,2,**3**,6,8]\nThe MEX of nums is 4. It can be shown that 4 is the maximum MEX we can achieve."
            },
            {
                "Input": "** nums = [1,-10,7,13,6,8], value = 7",
                "Output": "** 2",
                "Explanation": "** One can achieve this result by applying the following operation:\n- subtract value from nums[2] once to make nums = [1,-10,**0**,13,6,8]\nThe MEX of nums is 2. It can be shown that 2 is the maximum MEX we can achieve."
            }
        ]
    },
    {
        "Title": "K Items With the Maximum Sum",
        "slug": "k-items-with-the-maximum-sum",
        "description": "There is a bag that consists of items, each item\u00a0has a number `1`, `0`, or `-1` written on it.\n\n\nYou are given four **non-negative** integers `numOnes`, `numZeros`, `numNegOnes`, and `k`.\n\n\nThe bag initially contains:\n\n\n `numOnes` items with `1`s written on them.\n `numZeroes` items with `0`s written on them.\n `numNegOnes` items with `-1`s written on them.\n\n\nWe want to pick exactly `k` items among the available items. Return *the **maximum** possible sum of numbers written on the items*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** numOnes = 3, numZeros = 2, numNegOnes = 0, k = 2",
                "Output": "** 2",
                "Explanation": "** We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 2 items with 1 written on them and get a sum in a total of 2.\nIt can be proven that 2 is the maximum possible sum."
            },
            {
                "Input": "** numOnes = 3, numZeros = 2, numNegOnes = 0, k = 4",
                "Output": "** 3",
                "Explanation": "** We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 3 items with 1 written on them, and 1 item with 0 written on it, and get a sum in a total of 3.\nIt can be proven that 3 is the maximum possible sum."
            }
        ]
    },
    {
        "Title": "Prime Subtraction Operation",
        "slug": "prime-subtraction-operation",
        "description": "You are given a **0-indexed** integer array `nums` of length `n`.\n\n\nYou can perform the following operation as many times as you want:\n\n\n Pick an index `i` that you haven\u2019t picked before, and pick a prime `p` **strictly less than** `nums[i]`, then subtract `p` from `nums[i]`.\n\n\nReturn *true if you can make `nums` a strictly increasing array using the above operation and false otherwise.\n\n\nA **strictly increasing array** is an array whose each element is strictly greater than its preceding element.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Binary Search",
            "Greedy",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [4,9,6,10]",
                "Output": "** true",
                "Explanation": "** In the first operation: Pick i = 0 and p = 3, and then subtract 3 from nums[0], so that nums becomes [1,9,6,10].\nIn the second operation: i = 1, p = 7, subtract 7 from nums[1], so nums becomes equal to [1,2,6,10].\nAfter the second operation, nums is sorted in strictly increasing order, so the answer is true."
            },
            {
                "Input": "** nums = [6,8,11,12]",
                "Output": "** true",
                "Explanation": "** Initially nums is sorted in strictly increasing order, so we don't need to make any operations."
            },
            {
                "Input": "** nums = [5,8,3]",
                "Output": "** false",
                "Explanation": "** It can be proven that there is no way to perform operations to make nums sorted in strictly increasing order, so the answer is false."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Make All Array Elements Equal",
        "slug": "minimum-operations-to-make-all-array-elements-equal",
        "description": "You are given an array `nums` consisting of positive integers.\n\n\nYou are also given an integer array `queries` of size `m`. For the `ith` query, you want to make all of the elements of `nums` equal to `queries[i]`. You can perform the following operation on the array **any** number of times:\n\n\n **Increase** or **decrease** an element of the array by `1`.\n\n\nReturn *an array* `answer` *of size* `m` *where* `answer[i]` *is the **minimum** number of operations to make all elements of* `nums` *equal to* `queries[i]`.\n\n\nNote** that after each query the array is reset to its original state.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Sorting",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [3,1,6,8], queries = [1,5]",
                "Output": "** [14,10]",
                "Explanation": "** For the first query we can do the following operations:\n- Decrease nums[0] 2 times, so that nums = [1,1,6,8].\n- Decrease nums[2] 5 times, so that nums = [1,1,1,8].\n- Decrease nums[3] 7 times, so that nums = [1,1,1,1].\nSo the total number of operations for the first query is 2 + 5 + 7 = 14.\nFor the second query we can do the following operations:\n- Increase nums[0] 2 times, so that nums = [5,1,6,8].\n- Increase nums[1] 4 times, so that nums = [5,5,6,8].\n- Decrease nums[2] 1 time, so that nums = [5,5,5,8].\n- Decrease nums[3] 3 times, so that nums = [5,5,5,5].\nSo the total number of operations for the second query is 2 + 4 + 1 + 3 = 10."
            },
            {
                "Input": "** nums = [2,9,6,3], queries = [10]",
                "Output": "** [20]",
                "Explanation": "** We can increase each value in the array to 10. The total number of operations will be 8 + 1 + 4 + 7 = 20."
            }
        ]
    },
    {
        "Title": "Collect Coins in a Tree",
        "slug": "collect-coins-in-a-tree",
        "description": "There exists an undirected and unrooted tree with `n` nodes indexed from `0` to `n - 1`. You are given an integer `n` and a 2D integer array edges of length `n - 1`, where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree. You are also given\u00a0an array `coins` of size `n` where `coins[i]` can be either `0` or `1`, where `1` indicates the presence of a coin in the vertex `i`.\n\n\nInitially, you choose to start at any vertex in\u00a0the tree.\u00a0Then, you can perform\u00a0the following operations any number of times:\u00a0\n\n\n Collect all the coins that are at a distance of at most `2` from the current vertex, or\n Move to any adjacent vertex in the tree.\n\n\nFind *the minimum number of edges you need to go through to collect all the coins and go back to the initial vertex*.\n\n\nNote that if you pass an edge several times, you need to count it into the answer several times.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Tree",
            "Graph",
            "Topological Sort"
        ],
        "examples": [
            {
                "Input": "** coins = [1,0,0,0,0,1], edges = [[0,1],[1,2],[2,3],[3,4],[4,5]]",
                "Output": "** 2",
                "Explanation": "** Start at vertex 2, collect the coin at vertex 0, move to vertex 3, collect the coin at vertex 5 then move back to vertex 2."
            },
            {
                "Input": "** coins = [0,0,0,1,1,0,0,1], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[5,6],[5,7]]",
                "Output": "** 2",
                "Explanation": "** Start at vertex 0, collect the coins at vertices 4 and 3, move to vertex 2,  collect the coin at vertex 7, then move back to vertex 0."
            }
        ]
    },
    {
        "Title": "Form Smallest Number From Two Digit Arrays",
        "slug": "form-smallest-number-from-two-digit-arrays",
        "description": "Given two arrays of **unique** digits `nums1` and `nums2`, return *the **smallest** number that contains **at least** one digit from each array*.\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** nums1 = [4,1,3], nums2 = [5,7]",
                "Output": "** 15",
                "Explanation": "** The number 15 contains the digit 1 from nums1 and the digit 5 from nums2. It can be proven that 15 is the smallest number we can have."
            },
            {
                "Input": "** nums1 = [3,5,2,6], nums2 = [3,1,7]",
                "Output": "** 3",
                "Explanation": "** The number 3 contains the digit 3 which exists in both arrays."
            }
        ]
    },
    {
        "Title": "Find the Substring With Maximum Cost",
        "slug": "find-the-substring-with-maximum-cost",
        "description": "You are given a string `s`, a string `chars` of **distinct** characters and an integer array `vals` of the same length as `chars`.\n\n\nThe **cost of the substring** is the sum of the values of each character in the substring. The cost of an empty string is considered `0`.\n\n\nThe **value of the character** is defined in the following way:\n\n\n If the character is not in the string `chars`, then its value is its corresponding position **(1-indexed)** in the alphabet.\n\t+ For example, the value of `'a'` is `1`, the value of `'b'` is `2`, and so on. The value of `'z'` is `26`.\n Otherwise, assuming `i` is the index where the character occurs in the string `chars`, then its value is `vals[i]`.\n\n\nReturn *the maximum cost among all substrings of the string* `s`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s = \"adaa\", chars = \"d\", vals = [-1000]",
                "Output": "** 2",
                "Explanation": "** The value of the characters \"a\" and \"d\" is 1 and -1000 respectively.\nThe substring with the maximum cost is \"aa\" and its cost is 1 + 1 = 2.\nIt can be proven that 2 is the maximum cost."
            },
            {
                "Input": "** s = \"abc\", chars = \"abc\", vals = [-1,-1,-1]",
                "Output": "** 0",
                "Explanation": "** The value of the characters \"a\", \"b\" and \"c\" is -1, -1, and -1 respectively.\nThe substring with the maximum cost is the empty substring \"\" and its cost is 0.\nIt can be proven that 0 is the maximum cost."
            }
        ]
    },
    {
        "Title": "Make K-Subarray Sums Equal",
        "slug": "make-k-subarray-sums-equal",
        "description": "You are given a **0-indexed** integer array `arr` and an integer `k`. The array `arr` is circular. In other words, the first element of the array is the next element of the last element, and the last element of the array is the previous element of the first element.\n\n\nYou can do the following operation any number of times:\n\n\n Pick any element from `arr` and increase or decrease it by `1`.\n\n\nReturn *the minimum number of operations such that the sum of each **subarray** of length* `k` *is equal*.\n\n\nA **subarray** is a contiguous part of the array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Sorting",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** arr = [1,4,1,3], k = 2",
                "Output": "** 1",
                "Explanation": "** we can do one operation on index 1 to make its value equal to 3.\nThe array after the operation is [1,3,1,3]\n- Subarray starts at index 0 is [1, 3], and its sum is 4 \n- Subarray starts at index 1 is [3, 1], and its sum is 4 \n- Subarray starts at index 2 is [1, 3], and its sum is 4 \n- Subarray starts at index 3 is [3, 1], and its sum is 4"
            },
            {
                "Input": "** arr = [2,5,5,7], k = 3",
                "Output": "** 5",
                "Explanation": "** we can do three operations on index 0 to make its value equal to 5 and two operations on index 3 to make its value equal to 5.\nThe array after the operations is [5,5,5,5]\n- Subarray starts at index 0 is [5, 5, 5], and its sum is 15\n- Subarray starts at index 1 is [5, 5, 5], and its sum is 15\n- Subarray starts at index 2 is [5, 5, 5], and its sum is 15\n- Subarray starts at index 3 is [5, 5, 5], and its sum is 15"
            }
        ]
    },
    {
        "Title": "Shortest Cycle in a Graph",
        "slug": "shortest-cycle-in-a-graph",
        "description": "There is a **bi-directional** graph with `n` vertices, where each vertex is labeled from `0` to `n - 1`. The edges in the graph are represented by a given 2D integer array `edges`, where `edges[i] = [ui, vi]` denotes an edge between vertex `ui` and vertex `vi`. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.\n\n\nReturn *the length of the **shortest** cycle in the graph*. If no cycle exists, return `-1`.\n\n\nA cycle is a path that starts and ends at the same node, and each edge in the path is used only once.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Breadth-First Search",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** n = 7, edges = [[0,1],[1,2],[2,0],[3,4],[4,5],[5,6],[6,3]]",
                "Output": "** 3",
                "Explanation": "** The cycle with the smallest length is : 0 -> 1 -> 2 -> 0"
            },
            {
                "Input": "** n = 4, edges = [[0,1],[0,2]]",
                "Output": "** -1",
                "Explanation": "** There are no cycles in this graph."
            }
        ]
    },
    {
        "Title": "Find the Longest Balanced Substring of a Binary String",
        "slug": "find-the-longest-balanced-substring-of-a-binary-string",
        "description": "You are given a binary string `s` consisting only of zeroes and ones.\n\n\nA substring of `s` is considered balanced if **all zeroes are before ones** and the number of zeroes is equal to the number of ones inside the substring. Notice that the empty substring is considered a balanced substring.\n\n\nReturn *the length of the longest balanced substring of* `s`.\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"01000111\"",
                "Output": "** 6",
                "Explanation": "** The longest balanced substring is \"000111\", which has length 6."
            },
            {
                "Input": "** s = \"00111\"",
                "Output": "** 4",
                "Explanation": "** The longest balanced substring is \"0011\", which has length 4."
            },
            {
                "Input": "** s = \"111\"",
                "Output": "** 0",
                "Explanation": "** There is no balanced substring except the empty substring, so the answer is 0."
            }
        ]
    },
    {
        "Title": "Convert an Array Into a 2D Array With Conditions",
        "slug": "convert-an-array-into-a-2d-array-with-conditions",
        "description": "You are given an integer array `nums`. You need to create a 2D array from `nums` satisfying the following conditions:\n\n\n The 2D array should contain **only** the elements of the array `nums`.\n Each row in the 2D array contains **distinct** integers.\n The number of rows in the 2D array should be **minimal**.\n\n\nReturn *the resulting array*. If there are multiple answers, return any of them.\n\n\nNote** that the 2D array can have a different number of elements on each row.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,4,1,2,3,1]",
                "Output": "** [[1,3,4,2],[1,3],[1]]",
                "Explanation": "** We can create a 2D array that contains the following rows:\n- 1,3,4,2\n- 1,3\n- 1\nAll elements of nums were used, and each row of the 2D array contains distinct integers, so it is a valid answer.\nIt can be shown that we cannot have less than 3 rows in a valid array."
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** [[4,3,2,1]]",
                "Explanation": "** All elements of the array are distinct, so we can keep all of them in the first row of the 2D array."
            }
        ]
    },
    {
        "Title": "Mice and Cheese",
        "slug": "mice-and-cheese",
        "description": "There are two mice and `n` different types of cheese, each type of cheese should be eaten by exactly one mouse.\n\n\nA point of the cheese with index `i` (**0-indexed**) is:\n\n\n `reward1[i]` if the first mouse eats it.\n `reward2[i]` if the second mouse eats it.\n\n\nYou are given a positive integer array `reward1`, a positive integer array `reward2`, and a non-negative integer `k`.\n\n\nReturn ***the maximum** points the mice can achieve if the first mouse eats exactly* `k` *types of cheese.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** reward1 = [1,1,3,4], reward2 = [4,4,1,1], k = 2",
                "Output": "** 15",
                "Explanation": "** In this example, the first mouse eats the 2nd\u00a0(0-indexed) and the 3rd\u00a0types of cheese, and the second mouse eats the 0th\u00a0and the 1st types of cheese.\nThe total points are 4 + 4 + 3 + 4 = 15.\nIt can be proven that 15 is the maximum total points that the mice can achieve."
            },
            {
                "Input": "** reward1 = [1,1], reward2 = [1,1], k = 2",
                "Output": "** 2",
                "Explanation": "** In this example, the first mouse eats the 0th\u00a0(0-indexed) and 1st\u00a0types of cheese, and the second mouse does not eat any cheese.\nThe total points are 1 + 1 = 2.\nIt can be proven that 2 is the maximum total points that the mice can achieve."
            }
        ]
    },
    {
        "Title": "Minimum Reverse Operations",
        "slug": "minimum-reverse-operations",
        "description": "You are given an integer `n` and an integer `p` representing an array `arr` of length `n` where all elements are set to 0's, except position `p` which is set to 1. You are also given an integer array `banned` containing restricted positions. Perform the following operation on `arr`:\n\n\n Reverse a **subarray** with size `k` if the single 1 is not set to a position in `banned`.\n\n\nReturn an integer array `answer` with `n` results where the `ith` result isthe **minimum** number of operations needed to bring the single 1 to position `i` in `arr`, or -1 if it is impossible.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Breadth-First Search",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** n = 4, p = 0, banned = [1,2], k = 4",
                "Output": "** [0,-1,-1,1]",
                "Explanation": "**\n\n\n* Initially 1 is placed at position 0 so the number of operations we need for position 0 is 0.\n* We can never place 1 on the banned positions, so the answer for positions 1 and 2 is -1.\n* Perform the operation of size 4 to reverse the whole array.\n* After a single operation 1 is at position 3 so the answer for position 3 is 1."
            },
            {
                "Input": "** n = 5, p = 0, banned = [2,4], k = 3",
                "Output": "** [0,-1,-1,-1,-1]",
                "Explanation": "**\n\n\n* Initially 1 is placed at position 0 so the number of operations we need for position 0 is 0.\n* We cannot perform the operation on the subarray positions `[0, 2]` because position 2 is in banned.\n* Because 1 cannot be set at position 2, it is impossible to set 1 at other positions in more operations."
            },
            {
                "Input": "** n = 4, p = 2, banned = [0,1,3], k = 1",
                "Output": "** [-1,-1,0,-1]",
                "Explanation": "**\n\n\nPerform operations of size 1 and 1 never changes its position.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 105`\n* `0 <= p <= n - 1`\n* `0 <= banned.length <= n - 1`\n* `0 <= banned[i] <= n - 1`\n* `1 <= k <= n`\n* `banned[i] != p`\n* all values in `banned`\u00a0are **unique**\n\n\nHints:\n    0. Can we use a breadth-first search to find the minimum number of operations?\n    1. Find the beginning and end indices of the subarray of size k that can be reversed to bring 1 to a particular position.\n    2. Can we visit every index or do we need to consider the parity of k?"
            }
        ]
    },
    {
        "Title": "Prime In Diagonal",
        "slug": "prime-in-diagonal",
        "description": "You are given a 0-indexed two-dimensional integer array `nums`.\n\n\nReturn *the largest **prime** number that lies on at least one of the **diagonals** of* `nums`. In case, no prime is present on any of the diagonals, return *0.\n\n\nNote that:\n\n\n An integer is **prime** if it is greater than `1` and has no positive integer divisors other than `1` and itself.\n An integer `val` is on one of the **diagonals** of `nums` if there exists an integer `i` for which `nums[i][i] = val` or an `i` for which `nums[i][nums.length - i - 1] = val`.\n\n\n![](https://assets.leetcode.com/uploads/2023/03/06/screenshot-2023-03-06-at-45648-pm.png)\n\n\nIn the above diagram, one diagonal is **[1,5,9]** and another diagonal is **[3,5,7]**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Matrix",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [[1,2,3],[5,6,7],[9,10,11]]",
                "Output": "** 11",
                "Explanation": "** The numbers 1, 3, 6, 9, and 11 are the only numbers present on at least one of the diagonals. Since 11 is the largest prime, we return 11."
            },
            {
                "Input": "** nums = [[1,2,3],[5,17,7],[9,11,10]]",
                "Output": "** 17",
                "Explanation": "** The numbers 1, 3, 9, 10, and 17 are all present on at least one of the diagonals. 17 is the largest prime, so we return 17."
            }
        ]
    },
    {
        "Title": "Sum of Distances",
        "slug": "sum-of-distances",
        "description": "You are given a **0-indexed** integer array `nums`. There exists an array `arr` of length `nums.length`, where `arr[i]` is the sum of `|i - j|` over all `j` such that `nums[j] == nums[i]` and `j != i`. If there is no such `j`, set `arr[i]` to be `0`.\n\n\nReturn *the array* `arr`*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,1,1,2]",
                "Output": "** [5,0,3,4,0]",
                "Explanation": "** \nWhen i = 0, nums[0] == nums[2] and nums[0] == nums[3]. Therefore, arr[0] = |0 - 2| + |0 - 3| = 5. \nWhen i = 1, arr[1] = 0 because there is no other index with value 3.\nWhen i = 2, nums[2] == nums[0] and nums[2] == nums[3]. Therefore, arr[2] = |2 - 0| + |2 - 3| = 3. \nWhen i = 3, nums[3] == nums[0] and nums[3] == nums[2]. Therefore, arr[3] = |3 - 0| + |3 - 2| = 4. \nWhen i = 4, arr[4] = 0 because there is no other index with value 2."
            },
            {
                "Input": "** nums = [0,5,3]",
                "Output": "** [0,0,0]",
                "Explanation": "** Since each element in nums is distinct, arr[i] = 0 for all i."
            }
        ]
    },
    {
        "Title": "Minimize the Maximum Difference of Pairs",
        "slug": "minimize-the-maximum-difference-of-pairs",
        "description": "You are given a **0-indexed** integer array `nums` and an integer `p`. Find `p` pairs of indices of `nums` such that the **maximum** difference amongst all the pairs is **minimized**. Also, ensure no index appears more than once amongst the `p` pairs.\n\n\nNote that for a pair of elements at the index `i` and `j`, the difference of this pair is `|nums[i] - nums[j]|`, where `|x|` represents the **absolute** **value** of `x`.\n\n\nReturn *the **minimum** **maximum** difference among all* `p` *pairs.* We define the maximum of an empty set to be zero.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums = [10,1,2,7,1,3], p = 2",
                "Output": "** 1",
                "Explanation": "** The first pair is formed from the indices 1 and 4, and the second pair is formed from the indices 2 and 5. \nThe maximum difference is max(|nums[1] - nums[4]|, |nums[2] - nums[5]|) = max(0, 1) = 1. Therefore, we return 1."
            },
            {
                "Input": "** nums = [4,2,1,2], p = 1",
                "Output": "** 0",
                "Explanation": "** Let the indices 1 and 3 form a pair. The difference of that pair is |2 - 2| = 0, which is the minimum we can attain."
            }
        ]
    },
    {
        "Title": "Minimum Number of Visited Cells in a Grid",
        "slug": "minimum-number-of-visited-cells-in-a-grid",
        "description": "You are given a **0-indexed** `m x n` integer matrix `grid`. Your initial position is at the **top-left** cell `(0, 0)`.\n\n\nStarting from the cell `(i, j)`, you can move to one of the following cells:\n\n\n Cells `(i, k)` with `j < k <= grid[i][j] + j` (rightward movement), or\n Cells `(k, j)` with `i < k <= grid[i][j] + i` (downward movement).\n\n\nReturn *the minimum number of cells you need to visit to reach the **bottom-right** cell* `(m - 1, n - 1)`. If there is no valid path, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Stack",
            "Breadth-First Search",
            "Union Find",
            "Heap (Priority Queue)",
            "Matrix",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** grid = [[3,4,2,1],[4,2,3,1],[2,1,0,0],[2,4,0,0]]",
                "Output": "** 4",
                "Explanation": "** The image above shows one of the paths that visits exactly 4 cells."
            },
            {
                "Input": "** grid = [[3,4,2,1],[4,2,1,1],[2,1,1,0],[3,4,1,0]]",
                "Output": "** 3",
                "Explanation": "** The image above shows one of the paths that visits exactly 3 cells."
            },
            {
                "Input": "** grid = [[2,1,0],[1,0,0]]",
                "Output": "** -1",
                "Explanation": "** It can be proven that no path exists."
            }
        ]
    },
    {
        "Title": "Check if Object Instance of Class",
        "slug": "check-if-object-instance-of-class",
        "description": "Write a function that checks if a given value\u00a0is an instance of a given class or superclass. For this problem, an object is considered an instance of a given class if that object has access to that class's methods.\n\n\nThere are\u00a0no constraints on the data types that can be passed to the function. For example, the value or the class could be\u00a0`undefined`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [],
        "examples": [
            {
                "Input": "** func = () => checkIfInstanceOf(new Date(), Date)",
                "Output": "** true",
                "Explanation": "** The object returned by the Date constructor is, by definition, an instance of Date."
            },
            {
                "Input": "** func = () => { class Animal {}; class Dog extends Animal {}; return checkIfInstanceOf(new Dog(), Animal); }",
                "Output": "** true",
                "Explanation": "**\nclass Animal {};\nclass Dog extends Animal {};\ncheckIfInstanceOf(new Dog(), Animal); // true\n\nDog is a subclass of Animal. Therefore, a Dog object is an instance of both Dog and Animal."
            },
            {
                "Input": "** func = () => checkIfInstanceOf(Date, Date)",
                "Output": "** false",
                "Explanation": "** A date constructor cannot logically be an instance of itself."
            },
            {
                "Input": "** func = () => checkIfInstanceOf(5, Number)",
                "Output": "** true",
                "Explanation": "** 5 is a Number. Note that the \"instanceof\" keyword would return false. However, it is still considered an instance of Number because it accesses the Number methods. For example \"toFixed()\"."
            }
        ]
    },
    {
        "Title": "Array Prototype Last",
        "slug": "array-prototype-last",
        "description": "Write code that enhances all arrays such that you can call the\u00a0`array.last()`\u00a0method on any array and it will return the last element. If there are no elements in the array, it should return\u00a0`-1`.\n\n\nYou may assume the array is the output of\u00a0`JSON.parse`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "** nums = [null, {}, 3]",
                "Output": "** 3",
                "Explanation": "** Calling nums.last() should return the last element: 3."
            },
            {
                "Input": "** nums = []",
                "Output": "** -1",
                "Explanation": "** Because there are no elements, return -1."
            }
        ]
    },
    {
        "Title": "Counter",
        "slug": "counter",
        "description": "Given an integer\u00a0`n`,\u00a0return a `counter` function. This `counter` function initially returns\u00a0`n`\u00a0and then returns 1 more than the previous value every subsequent time it is called (`n`, `n + 1`, `n + 2`, etc).\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "** \nn = 10 \n[\"call\",\"call\",\"call\"]",
                "Output": "** [10,11,12]",
                "Explanation": "**counter() = 10 // The first time counter() is called, it returns n.\ncounter() = 11 // Returns 1 more than the previous time.\ncounter() = 12 // Returns 1 more than the previous time."
            },
            {
                "Input": "** \nn = -2\n[\"call\",\"call\",\"call\",\"call\",\"call\"]",
                "Output": "** [-2,-1,0,1,2]",
                "Explanation": "** counter() initially returns -2. Then increases after each sebsequent call."
            }
        ]
    },
    {
        "Title": "Sleep",
        "slug": "sleep",
        "description": "Given\u00a0a positive integer `millis`, write an asynchronous function that sleeps for `millis`\u00a0milliseconds. It can resolve any value.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "** millis = 100",
                "Output": "** 100",
                "Explanation": "** It should return a promise that resolves after 100ms.\nlet t = Date.now();\nsleep(100).then(() => {\n  console.log(Date.now() - t); // 100\n});"
            },
            {
                "Input": "** millis = 200",
                "Output": "** 200",
                "Explanation": "** It should return a promise that resolves after 200ms."
            }
        ]
    },
    {
        "Title": "Cache With Time Limit",
        "slug": "cache-with-time-limit",
        "description": "Write a class that allows getting and setting\u00a0key-value pairs, however a\u00a0**time until expiration**\u00a0is associated with each key.\n\n\nThe class has three public methods:\n\n\n`set(key, value, duration)`:\u00a0accepts an integer\u00a0`key`, an\u00a0integer\u00a0`value`, and a `duration` in milliseconds. Once the\u00a0`duration`\u00a0has elapsed, the key should be inaccessible. The method should return\u00a0`true`\u00a0if the same\u00a0un-expired key already exists and `false` otherwise. Both the value and duration should be overwritten if the key already exists.\n\n\n`get(key)`: if an un-expired key exists, it should return the associated value. Otherwise it should return\u00a0`-1`.\n\n\n`count()`: returns the count of un-expired keys.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [],
        "examples": [
            {
                "Input": "** \nactions = [\"TimeLimitedCache\", \"set\", \"get\", \"count\", \"get\"]\nvalues = [[], [1, 42, 100], [1], [], [1]]\ntimeDelays = [0, 0, 50, 50, 150]",
                "Output": "** [null, false, 42, 1, -1]",
                "Explanation": "**\nAt t=0, the cache is constructed.\nAt t=0, a key-value pair (1: 42) is added with a time limit of 100ms. The value doesn't exist so false is returned.\nAt t=50, key=1 is requested and the value of 42 is returned.\nAt t=50, count() is called and there is one active key in the cache.\nAt t=100, key=1 expires.\nAt t=150, get(1) is called but -1 is returned because the cache is empty."
            },
            {
                "Input": "** \nactions = [\"TimeLimitedCache\", \"set\", \"set\", \"get\", \"get\", \"get\", \"count\"]\nvalues = [[], [1, 42, 50], [1, 50, 100], [1], [1], [1], []]\ntimeDelays = [0, 0, 40, 50, 120, 200, 250]",
                "Output": "** [null, false, true, 50, 50, -1, 0]",
                "Explanation": "**\nAt t=0, the cache is constructed.\nAt t=0, a key-value pair (1: 42) is added with a time limit of 50ms. The value doesn't exist so false is returned.\nAt t=40, a key-value pair (1: 50) is added with a time limit of 100ms. A non-expired value already existed so true is returned and the old value was overwritten.\nAt t=50, get(1) is called which returned 50.\nAt t=120, get(1) is called which returned 50.\nAt t=140, key=1 expires.\nAt t=200, get(1) is called but the cache is empty so -1 is returned.\nAt t=250, count() returns 0 because the cache is empty."
            }
        ]
    },
    {
        "Title": "Memoize",
        "slug": "memoize",
        "description": "Given a function `fn`, return a\u00a0**memoized**\u00a0version of that function.\n\n\nA\u00a0**memoized**function is a function that will never be called twice with\u00a0the same inputs. Instead it will return\u00a0a cached value.\n\n\nYou can assume there are\u00a0**3**possible input functions:\u00a0`sum`**,** `fib`**,**and\u00a0`factorial`**.\n\n\n `sum`accepts two integers\u00a0`a` and `b` and returns `a + b`.\u00a0Assume that if a value has already been cached for the arguments `(b, a)` where `a != b`, it cannot be used for the arguments `(a, b)`. For example, if the arguments are `(3, 2)` and `(2, 3)`, two separate calls should be made.\n `fib`accepts a\u00a0single integer\u00a0`n` and\u00a0returns\u00a0`1` if `n <= 1` or\u00a0`fib(n - 1) + fib(n - 2)`\u00a0otherwise.\n `factorial`\u00a0accepts a single integer\u00a0`n` and returns `1`\u00a0if\u00a0`n <= 1`\u00a0or\u00a0`factorial(n - 1) * n`\u00a0otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [],
        "examples": [
            {
                "Input": "**\nfnName = \"sum\"\nactions = [\"call\",\"call\",\"getCallCount\",\"call\",\"getCallCount\"]\nvalues = [[2,2],[2,2],[],[1,2],[]]",
                "Output": "** [4,4,1,3,2]",
                "Explanation": "**\nconst sum = (a, b) => a + b;\nconst memoizedSum = memoize(sum);\nmemoizedSum(2, 2); // \"call\" - returns 4. sum() was called as (2, 2) was not seen before.\nmemoizedSum(2, 2); // \"call\" - returns 4. However sum() was not called because the same inputs were seen before.\n// \"getCallCount\" - total call count: 1\nmemoizedSum(1, 2); // \"call\" - returns 3. sum() was called as (1, 2) was not seen before.\n// \"getCallCount\" - total call count: 2"
            },
            {
                "Input": "**fnName = \"factorial\"\nactions = [\"call\",\"call\",\"call\",\"getCallCount\",\"call\",\"getCallCount\"]\nvalues = [[2],[3],[2],[],[3],[]]",
                "Output": "** [2,6,2,2,6,2]",
                "Explanation": "**\nconst factorial = (n) => (n <= 1) ? 1 : (n * factorial(n - 1));\nconst memoFactorial = memoize(factorial);\nmemoFactorial(2); // \"call\" - returns 2.\nmemoFactorial(3); // \"call\" - returns 6.\nmemoFactorial(2); // \"call\" - returns 2. However factorial was not called because 2 was seen before.\n// \"getCallCount\" - total call count: 2\nmemoFactorial(3); // \"call\" - returns 6. However factorial was not called because 3 was seen before.\n// \"getCallCount\" - total call count: 2"
            },
            {
                "Input": "**fnName = \"fib\"\nactions = [\"call\",\"getCallCount\"]\nvalues = [[5],[]]",
                "Output": "** [8,1]",
                "Explanation": "**fib(5) = 8 // \"call\"\n// \"getCallCount\" - total call count: 1"
            }
        ]
    },
    {
        "Title": "Snail Traversal",
        "slug": "snail-traversal",
        "description": "Write code that enhances all arrays such that you can call the `snail(rowsCount, colsCount)` method that transforms the 1D\u00a0array into\u00a0a 2D array organised in\u00a0the pattern known as **snail traversal order**. Invalid input values should output an empty array. If\u00a0`rowsCount * colsCount !== nums.length`,\u00a0the input is considered invalid.\n\n\nSnail traversal order**starts at the top left cell with the first value of the current array. It then moves through the entire first column from top to bottom, followed by moving to the next column on the right and traversing it from bottom to top. This pattern continues, alternating the direction of traversal with each column, until the entire current array is covered. For example, when given the input array\u00a0`[19, 10, 3, 7, 9, 8, 5, 2, 1, 17, 16, 14, 12, 18, 6, 13, 11, 20, 4, 15]` with `rowsCount = 5` and `colsCount = 4`,\u00a0the desired output matrix is shown below. Note that iterating the matrix following the arrows corresponds to the order of numbers in the original array.\n\n\n\u00a0\n\n\n![Traversal Diagram](https://assets.leetcode.com/uploads/2023/04/10/screen-shot-2023-04-10-at-100006-pm.png)\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [],
        "examples": [
            {
                "Input": "** \nnums = [19, 10, 3, 7, 9, 8, 5, 2, 1, 17, 16, 14, 12, 18, 6, 13, 11, 20, 4, 15]\nrowsCount = 5\ncolsCount = 4",
                "Output": "** \n[\n [19,17,16,15],\n\u00a0[10,1,14,4],\n\u00a0[3,2,12,20],\n\u00a0[7,5,18,11],\n\u00a0[9,8,6,13]\n]",
                "Explanation": null
            },
            {
                "Input": "** \nnums = [1,2,3,4]\nrowsCount = 1\ncolsCount = 4",
                "Output": "** [[1, 2, 3, 4]]",
                "Explanation": null
            },
            {
                "Input": "** \nnums = [1,3]\nrowsCount = 2\ncolsCount = 2",
                "Output": "** []",
                "Explanation": "** 2 multiplied by 2 is 4, and the original array [1,3] has a length of 2; therefore, the input is invalid."
            }
        ]
    },
    {
        "Title": "Flatten Deeply Nested Array",
        "slug": "flatten-deeply-nested-array",
        "description": "Given a\u00a0**multi-dimensional** array\u00a0`arr`\u00a0and a depth `n`, return\u00a0a\u00a0**flattened**\u00a0version of that array.\n\n\nA **multi-dimensional**\u00a0array is a recursive data structure that contains integers or other\u00a0**multi-dimensional**\u00a0arrays.\n\n\nA\u00a0**flattened**\u00a0array is a version of that array with some or all of the sub-arrays removed and replaced with the actual elements in that sub-array. This flattening operation should only be done if the current depth of nesting\u00a0is less\u00a0than\u00a0`n`. The depth of the elements in the first array are considered to be\u00a0`0`.\n\n\nPlease solve it without the built-in\u00a0`Array.flat` method.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [],
        "examples": [
            {
                "Input": "arr = [1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]]\nn = 0",
                "Output": "[1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]]",
                "Explanation": "Passing a depth of n=0 will always result in the original array. This is because the smallest possible depth of a subarray (0) is not less than n=0. Thus, no subarray should be flattened."
            },
            {
                "Input": "arr = [1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]]\nn = 1",
                "Output": "[1, 2, 3, 4, 5, 6, 7, 8, [9, 10, 11], 12, 13, 14, 15]",
                "Explanation": "The subarrays starting with 4, 7, and 13 are all flattened. This is because their depth of 0 is less than 1. However [9, 10, 11] remains unflattened because its depth is 1."
            },
            {
                "Input": "arr = [[1, 2, 3], [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]]\nn = 2",
                "Output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
                "Explanation": "The maximum depth of any subarray is 1. Thus, all of them are flattened."
            }
        ]
    },
    {
        "Title": "Array Reduce Transformation",
        "slug": "array-reduce-transformation",
        "description": "Given an integer array `nums`, a reducer function `fn`, and an initial value `init`, return the final result obtained by executing the `fn` function on each element of the array, sequentially, passing in the return value from the calculation on the preceding element.\n\n\nThis result is achieved through the following operations: `val = fn(init, nums[0]), val = fn(val, nums[1]), val = fn(val, nums[2]), ...` until every element in the array has been processed. The ultimate value of `val` is then returned.\n\n\nIf the length of the array is 0, the function should return `init`.\n\n\nPlease solve it without using the built-in `Array.reduce` method.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "** \nnums = [1,2,3,4]\nfn = function sum(accum, curr) { return accum + curr; }\ninit = 0",
                "Output": "** 10",
                "Explanation": "**\ninitially, the value is init=0.\n(0) + nums[0] = 1\n(1) + nums[1] = 3\n(3) + nums[2] = 6\n(6) + nums[3] = 10\nThe final answer is 10."
            },
            {
                "Input": "** \nnums = [1,2,3,4]\nfn = function sum(accum, curr) { return accum + curr * curr; }\ninit = 100",
                "Output": "** 130",
                "Explanation": "**\ninitially, the value is init=100.\n(100) + nums[0] * nums[0] = 101\n(101) + nums[1] * nums[1] = 105\n(105) + nums[2] * nums[2] = 114\n(114) + nums[3] * nums[3] = 130\nThe final answer is 130."
            },
            {
                "Input": "** \nnums = []\nfn = function sum(accum, curr) { return 0; }\ninit = 25",
                "Output": "** 25",
                "Explanation": "** For empty arrays, the answer is always init."
            }
        ]
    },
    {
        "Title": "Debounce",
        "slug": "debounce",
        "description": "Given a function\u00a0`fn` and a time in milliseconds\u00a0`t`, return\u00a0a\u00a0**debounced**\u00a0version of that function.\n\n\nA\u00a0**debounced**\u00a0function is a function whose execution is delayed by\u00a0`t`\u00a0milliseconds and whose\u00a0execution is cancelled if it is called again within that window of time. The debounced function should also receive the passed parameters.\n\n\nFor example, let's say\u00a0`t = 50ms`, and the function was called at\u00a0`30ms`,\u00a0`60ms`, and `100ms`.\n\n\nThe first 2 function calls would be cancelled, and the 3rd function call would be executed at\u00a0`150ms`.\n\n\nIf instead\u00a0`t = 35ms`, The 1st call would be cancelled, the 2nd would be executed at\u00a0`95ms`, and the 3rd would be executed at\u00a0`135ms`.\n\n\n![Debounce Schematic](https://assets.leetcode.com/uploads/2023/04/08/screen-shot-2023-04-08-at-11048-pm.png)\n\n\nThe above diagram\u00a0shows how debounce will transform\u00a0events. Each rectangle represents 100ms and the debounce time is 400ms. Each color represents a different set of inputs.\n\n\nPlease solve it without using lodash's\u00a0`_.debounce()` function.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [],
        "examples": [
            {
                "Input": "** \nt = 50\ncalls = [\n\u00a0 {\"t\": 50, inputs: [1]},\n\u00a0 {\"t\": 75, inputs: [2]}\n]",
                "Output": "** [{\"t\": 125, inputs: [2]}]",
                "Explanation": "**\nlet start = Date.now();\nfunction log(...inputs) { \n\u00a0 console.log([Date.now() - start, inputs ])\n}\nconst dlog = debounce(log, 50);\nsetTimeout(() => dlog(1), 50);\nsetTimeout(() => dlog(2), 75);\n\nThe 1st call is cancelled by the 2nd call because the 2nd call occurred before 100ms\nThe 2nd call is delayed by 50ms and executed at 125ms. The inputs were (2)."
            },
            {
                "Input": "** \nt = 20\ncalls = [\n\u00a0 {\"t\": 50, inputs: [1]},\n\u00a0 {\"t\": 100, inputs: [2]}\n]",
                "Output": "** [{\"t\": 70, inputs: [1]}, {\"t\": 120, inputs: [2]}]",
                "Explanation": "**\nThe 1st call is delayed until 70ms. The inputs were (1).\nThe 2nd call is delayed until 120ms. The inputs were (2)."
            },
            {
                "Input": "** \nt = 150\ncalls = [\n\u00a0 {\"t\": 50, inputs: [1, 2]},\n\u00a0 {\"t\": 300, inputs: [3, 4]},\n\u00a0 {\"t\": 300, inputs: [5, 6]}\n]",
                "Output": "** [{\"t\": 200, inputs: [1,2]}, {\"t\": 450, inputs: [5, 6]}]",
                "Explanation": "**\nThe 1st call is delayed by 150ms and ran at 200ms. The inputs were (1, 2).\nThe 2nd call is cancelled by the 3rd call\nThe 3rd call is delayed by 150ms and ran at 450ms. The inputs were (5, 6)."
            }
        ]
    },
    {
        "Title": "Function Composition",
        "slug": "function-composition",
        "description": "Given an array of functions\u00a0`[f1, f2, f3,\u00a0..., fn]`, return\u00a0a new function\u00a0`fn`\u00a0that is the **function\u00a0composition** of the array of functions.\n\n\nThe\u00a0**function\u00a0composition**\u00a0of\u00a0`[f(x), g(x), h(x)]`\u00a0is\u00a0`fn(x) = f(g(h(x)))`.\n\n\nThe\u00a0**function\u00a0composition**\u00a0of an empty list of functions is the\u00a0**identity function**\u00a0`f(x) = x`.\n\n\nYou may assume each\u00a0function\u00a0in the array accepts one integer as input\u00a0and returns one integer as output.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "** functions = [x => x + 1, x => x * x, x => 2 * x], x = 4",
                "Output": "** 65",
                "Explanation": "**\nEvaluating from right to left ...\nStarting with x = 4.\n2 * (4) = 8\n(8) * (8) = 64\n(64) + 1 = 65"
            },
            {
                "Input": "** functions = [x => 10 * x, x => 10 * x, x => 10 * x], x = 1",
                "Output": "** 1000",
                "Explanation": "**\nEvaluating from right to left ...\n10 * (1) = 10\n10 * (10) = 100\n10 * (100) = 1000"
            },
            {
                "Input": "** functions = [], x = 42",
                "Output": "** 42",
                "Explanation": "**\nThe composition of zero functions is the identity function"
            }
        ]
    },
    {
        "Title": "Memoize II",
        "slug": "memoize-ii",
        "description": "Given a function `fn`,\u00a0return\u00a0a\u00a0**memoized**\u00a0version of that function.\n\n\nA\u00a0**memoized**function is a function that will never be called twice with\u00a0the same inputs. Instead it will return\u00a0a cached value.\n\n\n`fn`\u00a0can be any function and there are no constraints on what type of values it accepts. Inputs are considered identical if they are\u00a0`===` to each other.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [],
        "examples": [
            {
                "Input": "** \ngetInputs = () => [[2,2],[2,2],[1,2]]\nfn = function (a, b) { return a + b; }",
                "Output": "** [{\"val\":4,\"calls\":1},{\"val\":4,\"calls\":1},{\"val\":3,\"calls\":2}]",
                "Explanation": "**\nconst inputs = getInputs();\nconst memoized = memoize(fn);\nfor (const arr of inputs) {\n  memoized(...arr);\n}\n\nFor the inputs of (2, 2): 2 + 2 = 4, and it required a call to fn().\nFor the inputs of (2, 2): 2 + 2 = 4, but those inputs were seen before so no call to fn() was required.\nFor the inputs of (1, 2): 1 + 2 = 3, and it required another call to fn() for a total of 2."
            },
            {
                "Input": "** \ngetInputs = () => [[{},{}],[{},{}],[{},{}]] \nfn = function (a, b) { return ({...a, ...b}); }",
                "Output": "** [{\"val\":{},\"calls\":1},{\"val\":{},\"calls\":2},{\"val\":{},\"calls\":3}]",
                "Explanation": "**\nMerging two empty objects will always result in an empty object. It may seem like there should only be 1\u00a0call to fn() because of cache-hits, however none of those objects are === to each other."
            },
            {
                "Input": "** \ngetInputs = () => { const o = {}; return [[o,o],[o,o],[o,o]]; }\nfn = function (a, b) { return ({...a, ...b}); }",
                "Output": "** [{\"val\":{},\"calls\":1},{\"val\":{},\"calls\":1},{\"val\":{},\"calls\":1}]",
                "Explanation": "**\nMerging two empty objects will always result in an empty object. The 2nd and 3rd third function calls result in a cache-hit. This is because every object passed in is identical."
            }
        ]
    },
    {
        "Title": "Group By",
        "slug": "group-by",
        "description": "Write code that enhances all arrays such that you can call the\u00a0`array.groupBy(fn)`\u00a0method on any array and it will return a **grouped**\u00a0version of the array.\n\n\nA\u00a0**grouped**\u00a0array is an object where each\u00a0key\u00a0is\u00a0the output of\u00a0`fn(arr[i])`\u00a0and each\u00a0value is an array containing all items in the original array with that key.\n\n\nThe provided callback\u00a0`fn`\u00a0will accept an item in the array and return a string key.\n\n\nThe order of each value list should be the order the items\u00a0appear in the array. Any order of keys is acceptable.\n\n\nPlease solve it without lodash's\u00a0`_.groupBy` function.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [],
        "examples": [
            {
                "Input": "** \narray = [\n\u00a0 {\"id\":\"1\"},\n\u00a0 {\"id\":\"1\"},\n\u00a0 {\"id\":\"2\"}\n], \nfn = function (item) { \n\u00a0 return item.id; \n}",
                "Output": "** \n{ \n\u00a0 \"1\": [{\"id\": \"1\"}, {\"id\": \"1\"}], \u00a0 \n\u00a0 \"2\": [{\"id\": \"2\"}] \n}",
                "Explanation": "**\nOutput is from array.groupBy(fn).\nThe selector function gets the \"id\" out of each item in the array.\nThere are two objects with an \"id\" of 1. Both of those objects are put in the first array.\nThere is one object with an \"id\" of 2. That object is put in the second array."
            },
            {
                "Input": "** \narray = [\n\u00a0 [1, 2, 3],\n\u00a0 [1, 3, 5],\n\u00a0 [1, 5, 9]\n]\nfn = function (list) { \n\u00a0 return String(list[0]); \n}",
                "Output": "** \n{ \n\u00a0 \"1\": [[1, 2, 3], [1, 3, 5], [1, 5, 9]] \n}",
                "Explanation": "**\nThe array can be of any type. In this case, the selector function defines the key as being the first element in the array. \nAll the arrays have 1 as their first element so they are grouped together.\n{\n  \"1\": [[1, 2, 3], [1, 3, 5], [1, 5, 9]]\n}"
            },
            {
                "Input": "** \narray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfn = function (n) { \n\u00a0 return String(n > 5);\n}",
                "Output": "**\n{\n\u00a0 \"true\": [6, 7, 8, 9, 10],\n\u00a0 \"false\": [1, 2, 3, 4, 5]\n}",
                "Explanation": "**\nThe selector function splits the array by whether each number is greater than 5."
            }
        ]
    },
    {
        "Title": "Filter Elements from Array",
        "slug": "filter-elements-from-array",
        "description": "Given an integer array `arr` and a filtering function `fn`, return a filtered array `filteredArr`.\n\n\nThe `fn` function takes one or two arguments:\n\n\n `arr[i]` - number\u00a0from\u00a0the `arr`\n `i`\u00a0- index of `arr[i]`\n\n\n`filteredArr` should only contain the elements from the\u00a0`arr` for which the expression `fn(arr[i], i)` evaluates to a **truthy** value. A\u00a0**truthy**\u00a0value is a value where\u00a0`Boolean(value)`\u00a0returns\u00a0`true`.\n\n\nPlease solve it without the built-in `Array.filter` method.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "** arr = [0,10,20,30], fn = function greaterThan10(n) { return n > 10; }",
                "Output": "** [20,30]",
                "Explanation": "**\nconst newArray = filter(arr, fn); // [20, 30]\nThe function filters out values that are not greater than 10"
            },
            {
                "Input": "** arr = [1,2,3], fn = function firstIndex(n, i) { return i === 0; }",
                "Output": "** [1]",
                "Explanation": "**\nfn can also accept the index of each element\nIn this case, the function removes elements not at index 0"
            },
            {
                "Input": "** arr = [-2,-1,0,1,2], fn = function plusOne(n) { return n + 1 }",
                "Output": "** [-2,0,1,2]",
                "Explanation": "**\nFalsey values such as 0 should be filtered out"
            }
        ]
    },
    {
        "Title": "Apply Transform Over Each Element in Array",
        "slug": "apply-transform-over-each-element-in-array",
        "description": "Given an integer array\u00a0`arr`\u00a0and a mapping function\u00a0`fn`, return\u00a0a new array with a transformation applied to each element.\n\n\nThe returned array should be created such that\u00a0`returnedArray[i] = fn(arr[i], i)`.\n\n\nPlease solve it without the built-in `Array.map` method.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "** arr = [1,2,3], fn = function plusone(n) { return n + 1; }",
                "Output": "** [2,3,4]",
                "Explanation": "**\nconst newArray = map(arr, plusone); // [2,3,4]\nThe function increases each value in the array by one."
            },
            {
                "Input": "** arr = [1,2,3], fn = function plusI(n, i) { return n + i; }",
                "Output": "** [1,3,5]",
                "Explanation": "** The function increases each value by the index it resides in."
            },
            {
                "Input": "** arr = [10,20,30], fn = function constant() { return 42; }",
                "Output": "** [42,42,42]",
                "Explanation": "** The function always returns 42."
            }
        ]
    },
    {
        "Title": "Promise Time Limit",
        "slug": "promise-time-limit",
        "description": "Given an\u00a0asynchronous function\u00a0`fn`\u00a0and a time `t`\u00a0in milliseconds, return\u00a0a new\u00a0**time limited**\u00a0version of the input function. `fn` takes arguments provided to the\u00a0**time limited**function.\n\n\nThe **time limited** function should follow these rules:\n\n\n If the `fn` completes within the time limit of `t` milliseconds, the **time limited** function should\u00a0resolve with the result.\n If the execution of the `fn` exceeds the time limit, the **time limited** function should reject with the string `\"Time Limit Exceeded\"`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [],
        "examples": [
            {
                "Input": "** \nfn = async (n) => { \n\u00a0 await new Promise(res => setTimeout(res, 100)); \n\u00a0 return n * n; \n}\ninputs = [5]\nt = 50",
                "Output": "** {\"rejected\":\"Time Limit Exceeded\",\"time\":50}",
                "Explanation": "**\nconst limited = timeLimit(fn, t)\nconst start = performance.now()\nlet result;\ntry {\n\u00a0 \u00a0const res = await limited(...inputs)\n\u00a0 \u00a0result = {\"resolved\": res, \"time\": Math.floor(performance.now() - start)};\n} catch (err) {\n\u00a0  result = {\"rejected\": err, \"time\": Math.floor(performance.now() - start)};\n}\nconsole.log(result) // Output\n\nThe provided function is set to resolve after 100ms. However, the time limit is set to 50ms. It rejects at t=50ms because the time limit was reached."
            },
            {
                "Input": "** \nfn = async (n) => { \n\u00a0 await new Promise(res => setTimeout(res, 100)); \n\u00a0 return n * n; \n}\ninputs = [5]\nt = 150",
                "Output": "** {\"resolved\":25,\"time\":100}",
                "Explanation": "**\nThe function resolved 5 * 5 = 25 at t=100ms. The time limit is never reached."
            },
            {
                "Input": "** \nfn = async (a, b) => { \n\u00a0 await new Promise(res => setTimeout(res, 120)); \n\u00a0 return a + b; \n}\ninputs = [5,10]\nt = 150",
                "Output": "** {\"resolved\":15,\"time\":120}",
                "Explanation": "**\n\u200b\u200b\u200b\u200bThe function resolved 5 + 10 = 15 at t=120ms. The time limit is never reached."
            },
            {
                "Input": "** \nfn = async () => { \n\u00a0 throw \"Error\";\n}\ninputs = []\nt = 1000",
                "Output": "** {\"rejected\":\"Error\",\"time\":0}",
                "Explanation": "**\nThe function immediately throws an error."
            }
        ]
    },
    {
        "Title": "Find the Width of Columns of a Grid",
        "slug": "find-the-width-of-columns-of-a-grid",
        "description": "You are given a **0-indexed** `m x n` integer matrix `grid`. The width of a column is the maximum **length** of its integers.\n\n\n For example, if `grid = [[-10], [3], [12]]`, the width of the only column is `3` since `-10` is of length `3`.\n\n\nReturn *an integer array* `ans` *of size* `n` *where* `ans[i]` *is the width of the* `ith` *column*.\n\n\nThe **length** of an integer `x` with `len` digits is equal to `len` if `x` is non-negative, and `len + 1` otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[1],[22],[333]]",
                "Output": "** [3]",
                "Explanation": "** In the 0th column, 333 is of length 3."
            },
            {
                "Input": "** grid = [[-15,1,3],[15,7,12],[5,6,-2]]",
                "Output": "** [3,1,2]",
                "Explanation": "** \nIn the 0th column, only -15 is of length 3.\nIn the 1st column, all integers are of length 1. \nIn the 2nd column, both 12 and -2 are of length 2."
            }
        ]
    },
    {
        "Title": "Find the Score of All Prefixes of an Array",
        "slug": "find-the-score-of-all-prefixes-of-an-array",
        "description": "We define the **conversion array** `conver` of an array `arr` as follows:\n\n\n `conver[i] = arr[i] + max(arr[0..i])` where `max(arr[0..i])` is the maximum value of `arr[j]` over `0 <= j <= i`.\n\n\nWe also define the **score** of an array `arr` as the sum of the values of the conversion array of `arr`.\n\n\nGiven a **0-indexed** integer array `nums` of length `n`, return *an array* `ans` *of length* `n` *where* `ans[i]` *is the score of the prefix* `nums[0..i]`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [2,3,7,5,10]",
                "Output": "** [4,10,24,36,56]",
                "Explanation": "** \nFor the prefix [2], the conversion array is [4] hence the score is 4\nFor the prefix [2, 3], the conversion array is [4, 6] hence the score is 10\nFor the prefix [2, 3, 7], the conversion array is [4, 6, 14] hence the score is 24\nFor the prefix [2, 3, 7, 5], the conversion array is [4, 6, 14, 12] hence the score is 36\nFor the prefix [2, 3, 7, 5, 10], the conversion array is [4, 6, 14, 12, 20] hence the score is 56"
            },
            {
                "Input": "** nums = [1,1,2,4,8,16]",
                "Output": "** [2,4,8,16,32,64]",
                "Explanation": "** \nFor the prefix [1], the conversion array is [2] hence the score is 2\nFor the prefix [1, 1], the conversion array is [2, 2] hence the score is 4\nFor the prefix [1, 1, 2], the conversion array is [2, 2, 4] hence the score is 8\nFor the prefix [1, 1, 2, 4], the conversion array is [2, 2, 4, 8] hence the score is 16\nFor the prefix [1, 1, 2, 4, 8], the conversion array is [2, 2, 4, 8, 16] hence the score is 32\nFor the prefix [1, 1, 2, 4, 8, 16], the conversion array is [2, 2, 4, 8, 16, 32] hence the score is 64"
            }
        ]
    },
    {
        "Title": "Cousins in Binary Tree II",
        "slug": "cousins-in-binary-tree-ii",
        "description": "Given the `root` of a binary tree, replace the value of each node in the tree with the **sum of all its cousins' values**.\n\n\nTwo nodes of a binary tree are **cousins** if they have the same depth with different parents.\n\n\nReturn *the* `root` *of the modified tree*.\n\n\nNote** that the depth of a node is the number of edges in the path from the root node to it.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** root = [5,4,9,1,10,null,7]",
                "Output": "** [0,0,0,7,7,null,11]",
                "Explanation": "** The diagram above shows the initial binary tree and the binary tree after changing the value of each node.\n- Node with value 5 does not have any cousins so its sum is 0.\n- Node with value 4 does not have any cousins so its sum is 0.\n- Node with value 9 does not have any cousins so its sum is 0.\n- Node with value 1 has a cousin with value 7 so its sum is 7.\n- Node with value 10 has a cousin with value 7 so its sum is 7.\n- Node with value 7 has cousins with values 1 and 10 so its sum is 11."
            },
            {
                "Input": "** root = [3,1,2]",
                "Output": "** [0,0,0]",
                "Explanation": "** The diagram above shows the initial binary tree and the binary tree after changing the value of each node.\n- Node with value 3 does not have any cousins so its sum is 0.\n- Node with value 1 does not have any cousins so its sum is 0.\n- Node with value 2 does not have any cousins so its sum is 0."
            }
        ]
    },
    {
        "Title": "Design Graph With Shortest Path Calculator",
        "slug": "design-graph-with-shortest-path-calculator",
        "description": "There is a **directed weighted** graph that consists of `n` nodes numbered from `0` to `n - 1`. The edges of the graph are initially represented by the given array `edges` where `edges[i] = [fromi, toi, edgeCosti]` meaning that there is an edge from `fromi` to `toi` with the cost `edgeCosti`.\n\n\nImplement the `Graph` class:\n\n\n `Graph(int n, int[][] edges)` initializes the object with `n` nodes and the given edges.\n `addEdge(int[] edge)` adds an edge to the list of edges where `edge = [from, to, edgeCost]`. It is guaranteed that there is no edge between the two nodes before adding this one.\n `int shortestPath(int node1, int node2)` returns the **minimum** cost of a path from `node1` to `node2`. If no path exists, return `-1`. The cost of a path is the sum of the costs of the edges in the path.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Graph",
            "Design",
            "Heap (Priority Queue)",
            "Shortest Path"
        ],
        "examples": [
            {
                "Input": "[\"Graph\", \"shortestPath\", \"shortestPath\", \"addEdge\", \"shortestPath\"]\n[[4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]], [3, 2], [0, 3], [[1, 3, 4]], [0, 3]]",
                "Output": "[null, 6, -1, null, 6]",
                "Explanation": "Graph g = new Graph(4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]);\ng.shortestPath(3, 2); // return 6. The shortest path from 3 to 2 in the first diagram above is 3 -> 0 -> 1 -> 2 with a total cost of 3 + 2 + 1 = 6.\ng.shortestPath(0, 3); // return -1. There is no path from 0 to 3.\ng.addEdge([1, 3, 4]); // We add an edge from node 1 to node 3, and we get the second diagram above.\ng.shortestPath(0, 3); // return 6. The shortest path from 0 to 3 now is 0 -> 1 -> 3 with a total cost of 2 + 4 = 6."
            }
        ]
    },
    {
        "Title": "Row With Maximum Ones",
        "slug": "row-with-maximum-ones",
        "description": "Given a `m x n` binary matrix `mat`, find the **0-indexed** position of the row that contains the **maximum** count of **ones,** and the number of ones in that row.\n\n\nIn case there are multiple rows that have the maximum count of ones, the row with the **smallest row number** should be selected.\n\n\nReturn *an array containing the index of the row, and the number of ones in it.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** mat = [[0,1],[1,0]]",
                "Output": "** [0,1]",
                "Explanation": "** Both rows have the same number of 1's. So we return the index of the smaller row, 0, and the maximum count of ones (1). So, the answer is [0,1]."
            },
            {
                "Input": "** mat = [[0,0,0],[0,1,1]]",
                "Output": "** [1,2]",
                "Explanation": "** The row indexed 1 has the maximum count of ones (2). So we return its index, 1, and the count. So, the answer is [1,2]."
            },
            {
                "Input": "** mat = [[0,0],[1,1],[0,0]]",
                "Output": "** [1,2]",
                "Explanation": "** The row indexed 1 has the maximum count of ones (2). So the answer is [1,2]."
            }
        ]
    },
    {
        "Title": "Find the Maximum Divisibility Score",
        "slug": "find-the-maximum-divisibility-score",
        "description": "You are given two integer arrays `nums` and `divisors`.\n\n\nThe **divisibility score** of `divisors[i]` is the number of indices `j` such that `nums[j]` is divisible by `divisors[i]`.\n\n\nReturn the integer `divisors[i]` with the **maximum** divisibility score. If multiple integers have the maximum score, return the smallest one.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [2,9,15,50], divisors = [5,3,7,2]",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe divisibility score of `divisors[0]` is 2 since `nums[2]` and `nums[3]` are divisible by 5.\n\n\nThe divisibility score of `divisors[1]` is 1 since only `nums[1]` is divisible by 3.\n\n\nThe divisibility score of `divisors[2]` is 0 since none of the numbers in `nums` is divisible by 7.\n\n\nThe divisibility score of `divisors[3]` is 2 since `nums[0]` and `nums[3]` are divisible by 2.\n\n\nAs `divisors[0]` and `divisors[3]` have the same divisibility score, we return the smaller one which is `divisors[3]`."
            },
            {
                "Input": "** nums = [4,7,9,3,9], divisors = [5,2,3]",
                "Output": "** 3",
                "Explanation": "**\n\n\nThe divisibility score of `divisors[0]` is 0 since none of numbers in `nums` is divisible by 5.\n\n\nThe divisibility score of `divisors[1]` is 1 since only `nums[0]` is divisible by 2.\n\n\nThe divisibility score of `divisors[2]` is 3 since `nums[2]`, `nums[3]` and `nums[4]` are divisible by 3."
            },
            {
                "Input": "** nums = [20,14,21,10], divisors = [10,16,20]",
                "Output": "** 10",
                "Explanation": "**\n\n\nThe divisibility score of `divisors[0]` is 0 since none of the numbers in `nums` is divisible by 10.\n\n\nThe divisibility score of `divisors[1]` is 0 since none of the numbers in `nums` is divisible by 16.\n\n\nThe divisibility score of `divisors[2]` is 0 since none of the numbers in `nums` is divisible by 20.\n\n\nAs `divisors[0]`, `divisors[1]` and `divisors[2]` all have the same divisibility score, we return the smallest one which is `divisors[0]`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length, divisors.length <= 1000`\n* `1 <= nums[i], divisors[i] <= 109`\n\n\nHints:\n    0. Consider counting for each element in divisors the count of elements in nums divisible by it using bruteforce.\n    1. After counting for each divisor, take the one with the maximum count. In case of a tie, take the minimum one of them.\nSimilarQuestions: [1018]"
            }
        ]
    },
    {
        "Title": "Minimum Additions to Make Valid String",
        "slug": "minimum-additions-to-make-valid-string",
        "description": "Given a string `word` to which you can insert letters \"a\", \"b\" or \"c\" anywhere and any number of times, return *the minimum number of letters that must be inserted so that `word` becomes **valid**.\n\n\nA string is called **valid** if it can be formed by concatenating the string \"abc\" several times.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Stack",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** word = \"b\"",
                "Output": "** 2",
                "Explanation": "** Insert the letter \"a\" right before \"b\", and the letter \"c\" right next to \"b\" to obtain the valid string \"**a**b**c**\"."
            },
            {
                "Input": "** word = \"aaa\"",
                "Output": "** 6",
                "Explanation": "** Insert letters \"b\" and \"c\" next to each \"a\" to obtain the valid string \"a**bc**a**bc**a**bc**\"."
            },
            {
                "Input": "** word = \"abc\"",
                "Output": "** 0",
                "Explanation": "** word is already valid. No modifications are needed."
            }
        ]
    },
    {
        "Title": "Minimize the Total Price of the Trips",
        "slug": "minimize-the-total-price-of-the-trips",
        "description": "There exists an undirected and unrooted tree with `n` nodes indexed from `0` to `n - 1`. You are given the integer `n` and a 2D integer array `edges` of length `n - 1`, where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree.\n\n\nEach node has an associated price. You are given an integer array `price`, where `price[i]` is the price of the `ith` node.\n\n\nThe **price sum** of a given path is the sum of the prices of all nodes lying on that path.\n\n\nAdditionally, you are given a 2D integer array `trips`, where `trips[i] = [starti, endi]` indicates that you start the `ith` trip from the node `starti` and travel to the node `endi` by any path you like.\n\n\nBefore performing your first trip, you can choose some **non-adjacent** nodes and halve the prices.\n\n\nReturn *the minimum total price sum to perform all the given trips*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Tree",
            "Depth-First Search",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** n = 4, edges = [[0,1],[1,2],[1,3]], price = [2,2,10,6], trips = [[0,3],[2,1],[2,3]]",
                "Output": "** 23",
                "Explanation": "** The diagram above denotes the tree after rooting it at node 2. The first part shows the initial tree and the second part shows the tree after choosing nodes 0, 2, and 3, and making their price half.\nFor the 1st trip, we choose path [0,1,3]. The price sum of that path is 1 + 2 + 3 = 6.\nFor the 2nd trip, we choose path [2,1]. The price sum of that path is 2 + 5 = 7.\nFor the 3rd trip, we choose path [2,1,3]. The price sum of that path is 5 + 2 + 3 = 10.\nThe total price sum of all trips is 6 + 7 + 10 = 23.\nIt can be proven, that 23 is the minimum answer that we can achieve."
            },
            {
                "Input": "** n = 2, edges = [[0,1]], price = [2,2], trips = [[0,0]]",
                "Output": "** 1",
                "Explanation": "** The diagram above denotes the tree after rooting it at node 0. The first part shows the initial tree and the second part shows the tree after choosing node 0, and making its price half.\nFor the 1st trip, we choose path [0]. The price sum of that path is 1.\nThe total price sum of all trips is 1. It can be proven, that 1 is the minimum answer that we can achieve."
            }
        ]
    },
    {
        "Title": "Generate Fibonacci Sequence",
        "slug": "generate-fibonacci-sequence",
        "description": "Write a generator function that returns a generator object which yields the\u00a0**fibonacci sequence**.\n\n\nThe\u00a0**fibonacci sequence**\u00a0is defined by the relation `Xn\u00a0= Xn-1\u00a0+ Xn-2`.\n\n\nThe first few numbers\u00a0of the series are `0, 1, 1, 2, 3, 5, 8, 13`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "** callCount = 5",
                "Output": "** [0,1,1,2,3]",
                "Explanation": "**\nconst gen = fibGenerator();\ngen.next().value; // 0\ngen.next().value; // 1\ngen.next().value; // 1\ngen.next().value; // 2\ngen.next().value; // 3"
            },
            {
                "Input": "** callCount = 0",
                "Output": "** []",
                "Explanation": "** gen.next() is never called so nothing is outputted"
            }
        ]
    },
    {
        "Title": "Nested Array Generator",
        "slug": "nested-array-generator",
        "description": "Given a\u00a0**multi-dimensional array** of integers, return\u00a0a generator object which\u00a0yields integers in the same order as\u00a0**inorder traversal**.\n\n\nA\u00a0**multi-dimensional array**\u00a0is a recursive data structure that contains both integers and other\u00a0**multi-dimensional arrays**.\n\n\ninorder traversal**\u00a0iterates over\u00a0each array from left to right, yielding any integers it encounters or applying\u00a0**inorder traversal**\u00a0to any arrays it encounters.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [],
        "examples": [
            {
                "Input": "** arr = [[[6]],[1,3],[]]",
                "Output": "** [6,1,3]",
                "Explanation": "**\nconst generator = inorderTraversal(arr);\ngenerator.next().value; // 6\ngenerator.next().value; // 1\ngenerator.next().value; // 3\ngenerator.next().done; // true"
            },
            {
                "Input": "** arr = []",
                "Output": "** []",
                "Explanation": "** There are no integers so the generator doesn't yield anything."
            }
        ]
    },
    {
        "Title": "Design Cancellable Function",
        "slug": "design-cancellable-function",
        "description": "Sometimes you have a long running task, and you may wish to cancel it before it completes. To help with this goal, write a function\u00a0`cancellable` that accepts a generator object and returns an array of two values: a **cancel function** and a **promise**.\n\n\nYou may assume the generator function will only\u00a0yield promises. It is your function's responsibility to pass the values resolved by the promise back to the generator. If the promise rejects, your function should throw that\u00a0error back to the generator.\n\n\nIf the cancel callback is called before the generator is done, your function should throw an error back to the generator. That error should be the string\u00a0`\"Cancelled\"`\u00a0(Not an `Error`\u00a0object). If the error was caught, the returned\u00a0promise should resolve with the next value that was yielded or returned. Otherwise, the promise should reject with the thrown error. No more code should be executed.\n\n\nWhen the generator is done, the promise your function returned should resolve the value the generator returned. If, however, the generator throws an error, the returned promise should reject with the error.\n\n\nAn example of how your code would be used:\n\n\n\n```\n\nfunction* tasks() {\n  const val = yield new Promise(resolve => resolve(2 + 2));\n  yield new Promise(resolve => setTimeout(resolve, 100));\n  return val + 1; // calculation shouldn't be done.\n}\nconst [cancel, promise] = cancellable(tasks());\nsetTimeout(cancel, 50);\npromise.catch(console.log); // logs \"Cancelled\" at t=50ms\n\n```\n\nIf\u00a0instead\u00a0`cancel()` was not called or was called after `t=100ms`, the promise would\u00a0have resolved\u00a0`5`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [],
        "examples": [
            {
                "Input": "** \ngeneratorFunction = function*() { \n\u00a0 return 42; \n}\ncancelledAt = 100",
                "Output": "** {\"resolved\": 42}",
                "Explanation": "**\nconst generator = generatorFunction();\nconst [cancel, promise] = cancellable(generator);\nsetTimeout(cancel, 100);\npromise.then(console.log); // resolves 42 at t=0ms\n\nThe generator immediately yields 42 and finishes. Because of that, the returned promise immediately resolves 42. Note that cancelling a finished generator does nothing."
            },
            {
                "Input": "**\ngeneratorFunction = function*() { \n\u00a0 const msg = yield new Promise(res => res(\"Hello\")); \n\u00a0 throw `Error: ${msg}`; \n}\ncancelledAt = null",
                "Output": "** {\"rejected\": \"Error: Hello\"}",
                "Explanation": "**\nA promise is yielded. The function handles this by waiting for it to resolve and then passes the resolved value back to the generator. Then an error is thrown which has the effect of causing the promise to reject with the same thrown error."
            },
            {
                "Input": "** \ngeneratorFunction = function*() { \n\u00a0 yield new Promise(res => setTimeout(res, 200)); \n\u00a0 return \"Success\"; \n}\ncancelledAt = 100",
                "Output": "** {\"rejected\": \"Cancelled\"}",
                "Explanation": "**\nWhile the function is waiting for the yielded promise to resolve, cancel() is called. This causes an error message to be sent back to the generator. Since this error is uncaught, the returned promise rejected with this error."
            },
            {
                "Input": "**\ngeneratorFunction = function*() { \n\u00a0 let result = 0; \n\u00a0 yield new Promise(res => setTimeout(res, 100));\n\u00a0 result += yield new Promise(res => res(1)); \n\u00a0 yield new Promise(res => setTimeout(res, 100)); \n\u00a0 result += yield new Promise(res => res(1)); \n\u00a0 return result;\n}\ncancelledAt = null",
                "Output": "** {\"resolved\": 2}",
                "Explanation": "**\n4 promises are yielded. Two of those promises have their values added to the result. After 200ms, the generator finishes with a value of 2, and that value is resolved by the returned promise."
            },
            {
                "Input": "** \ngeneratorFunction = function*() { \n\u00a0 let result = 0; \n\u00a0 try { \n\u00a0   yield new Promise(res => setTimeout(res, 100)); \n\u00a0   result += yield new Promise(res => res(1)); \n\u00a0   yield new Promise(res => setTimeout(res, 100)); \n\u00a0   result += yield new Promise(res => res(1)); \n\u00a0 } catch(e) { \n\u00a0   return result; \n\u00a0 } \n\u00a0 return result; \n}\ncancelledAt = 150",
                "Output": "** {\"resolved\": 1}",
                "Explanation": "**\nThe first two yielded promises resolve and cause the result to increment. However, at t=150ms, the generator is cancelled. The error sent to the generator is caught and the result is returned and finally resolved by the returned promise."
            },
            {
                "Input": "** \ngeneratorFunction = function*() { \n\u00a0 try { \n\u00a0   yield new Promise((resolve, reject) => reject(\"Promise Rejected\")); \n\u00a0 } catch(e) { \n\u00a0   let a = yield new Promise(resolve => resolve(2));\n    let b = yield new Promise(resolve => resolve(2)); \n\u00a0   return a + b; \n\u00a0 }; \n}\ncancelledAt = null",
                "Output": "** {\"resolved\": 4}",
                "Explanation": "**\nThe first yielded promise immediately rejects. This error is caught. Because the generator hasn't been cancelled, execution continues as usual. It ends up resolving 2 + 2 = 4."
            }
        ]
    },
    {
        "Title": "Calculate Delayed Arrival Time",
        "slug": "calculate-delayed-arrival-time",
        "description": "You are given a positive integer `arrivalTime` denoting the arrival time of a train in hours, and another positive integer `delayedTime` denoting the amount of delay in hours.\n\n\nReturn *the time when the train will arrive at the station.\n\n\nNote that the time in this problem is in 24-hours format.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** arrivalTime = 15, delayedTime = 5",
                "Output": "** 20",
                "Explanation": "** Arrival time of the train was 15:00 hours. It is delayed by 5 hours. Now it will reach at 15+5 = 20 (20:00 hours)."
            },
            {
                "Input": "** arrivalTime = 13, delayedTime = 11",
                "Output": "** 0",
                "Explanation": "** Arrival time of the train was 13:00 hours. It is delayed by 11 hours. Now it will reach at 13+11=24 (Which is denoted by 00:00 in 24 hours format so return 0)."
            }
        ]
    },
    {
        "Title": "Sum Multiples",
        "slug": "sum-multiples",
        "description": "Given a positive integer `n`, find the sum of all integers in the range `[1, n]` **inclusive** that are divisible by `3`, `5`, or `7`.\n\n\nReturn *an integer denoting the sum of all numbers in the given range satisfying\u00a0the constraint.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** n = 7",
                "Output": "** 21",
                "Explanation": "** Numbers in the range [1, 7] that are divisible by 3, 5, or 7 are 3, 5, 6, 7. The sum of these numbers is 21."
            },
            {
                "Input": "** n = 10",
                "Output": "** 40",
                "Explanation": "** Numbers in the range [1, 10] that are divisible by 3, 5, or 7 are 3, 5, 6, 7, 9, 10. The sum of these numbers is 40."
            },
            {
                "Input": "** n = 9",
                "Output": "** 30",
                "Explanation": "** Numbers in the range [1, 9] that are divisible by 3, 5, or 7 are 3, 5, 6, 7, 9. The sum of these numbers is 30."
            }
        ]
    },
    {
        "Title": "Sliding Subarray Beauty",
        "slug": "sliding-subarray-beauty",
        "description": "Given an integer array `nums` containing `n` integers, find the **beauty** of each subarray of size `k`.\n\n\nThe **beauty** of a subarray is the `xth` **smallest integer** in the subarray if it is **negative**, or `0` if there are fewer than `x` negative integers.\n\n\nReturn *an integer array containing* `n - k + 1` *integers, which denote the* **beauty** *of the subarrays **in order** from the first index in the array.\n\n\n A subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [1,-1,-3,-2,3], k = 3, x = 2",
                "Output": "** [-1,-2,-2]",
                "Explanation": "** There are 3 subarrays with size k = 3. \nThe first subarray is [1, -1, -3] and the 2nd smallest negative integer is -1.\u00a0\nThe second subarray is [-1, -3, -2] and the 2nd smallest negative integer is -2.\u00a0\nThe third subarray is [-3, -2, 3]\u00a0and the 2nd smallest negative integer is -2."
            },
            {
                "Input": "** nums = [-1,-2,-3,-4,-5], k = 2, x = 2",
                "Output": "** [-1,-2,-3,-4]",
                "Explanation": "** There are 4 subarrays with size k = 2.\nFor [-1, -2], the 2nd smallest negative integer is -1.\nFor [-2, -3], the 2nd smallest negative integer is -2.\nFor [-3, -4], the 2nd smallest negative integer is -3.\nFor [-4, -5], the 2nd smallest negative integer is -4."
            },
            {
                "Input": "** nums = [-3,1,2,-3,0,-3], k = 2, x = 1",
                "Output": "** [-3,0,-3,-3,-3]",
                "Explanation": "** There are 5 subarrays with size k = 2**.**\nFor [-3, 1], the 1st smallest negative integer is -3.\nFor [1, 2], there is no negative integer so the beauty is 0.\nFor [2, -3], the 1st smallest negative integer is -3.\nFor [-3, 0], the 1st smallest negative integer is -3.\nFor [0, -3], the 1st smallest negative integer is -3."
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Make All Array Elements Equal to 1",
        "slug": "minimum-number-of-operations-to-make-all-array-elements-equal-to-1",
        "description": "You are given a **0-indexed**\u00a0array `nums` consisiting of **positive** integers. You can do the following operation on the array **any** number of times:\n\n\n Select an index `i` such that `0 <= i < n - 1` and replace either of\u00a0`nums[i]` or `nums[i+1]` with their gcd value.\n\n\nReturn *the **minimum** number of operations to make all elements of* `nums` *equal to* `1`. If it is impossible, return `-1`.\n\n\nThe gcd of two integers is the greatest common divisor of the two integers.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [2,6,3,4]",
                "Output": "** 4",
                "Explanation": "** We can do the following operations:\n- Choose index i = 2 and replace nums[2] with gcd(3,4) = 1. Now we have nums = [2,6,1,4].\n- Choose index i = 1 and replace nums[1] with gcd(6,1) = 1. Now we have nums = [2,1,1,4].\n- Choose index i = 0 and replace nums[0] with gcd(2,1) = 1. Now we have nums = [1,1,1,4].\n- Choose index i = 2 and replace nums[3] with gcd(1,4) = 1. Now we have nums = [1,1,1,1]."
            },
            {
                "Input": "** nums = [2,10,6,14]",
                "Output": "** -1",
                "Explanation": "** It can be shown that it is impossible to make all the elements equal to 1."
            }
        ]
    },
    {
        "Title": "Maximum Sum With Exactly K Elements ",
        "slug": "maximum-sum-with-exactly-k-elements",
        "description": "You are given a **0-indexed** integer array `nums` and an integer `k`. Your task is to perform the following operation **exactly** `k` times in order to maximize your score:\n\n\n1. Select an element `m` from `nums`.\n2. Remove the selected element `m` from the array.\n3. Add a new element with a value of `m + 1` to the array.\n4. Increase your score by `m`.\n\n\nReturn *the maximum score you can achieve after performing the operation exactly* `k` *times.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5], k = 3",
                "Output": "** 18",
                "Explanation": "** We need to choose exactly 3 elements from nums to maximize the sum.\nFor the first iteration, we choose 5. Then sum is 5 and nums = [1,2,3,4,6]\nFor the second iteration, we choose 6. Then sum is 5 + 6 and nums = [1,2,3,4,7]\nFor the third iteration, we choose 7. Then sum is 5 + 6 + 7 = 18 and nums = [1,2,3,4,8]\nSo, we will return 18.\nIt can be proven, that 18 is the maximum answer that we can achieve."
            },
            {
                "Input": "** nums = [5,5,5], k = 2",
                "Output": "** 11",
                "Explanation": "** We need to choose exactly 2 elements from nums to maximize the sum.\nFor the first iteration, we choose 5. Then sum is 5 and nums = [5,5,6]\nFor the second iteration, we choose 6. Then sum is 5 + 6 = 11 and nums = [5,5,7]\nSo, we will return 11.\nIt can be proven, that 11 is the maximum answer that we can achieve."
            }
        ]
    },
    {
        "Title": "Find the Prefix Common Array of Two Arrays",
        "slug": "find-the-prefix-common-array-of-two-arrays",
        "description": "You are given two **0-indexed** integerpermutations `A` and `B` of length `n`.\n\n\nA **prefix common array** of `A` and `B` is an array `C` such that `C[i]` is equal to the count of numbers that are present at or before the index `i` in both `A` and `B`.\n\n\nReturn *the **prefix common array** of* `A` *and* `B`.\n\n\nA sequence of `n` integers is called a\u00a0**permutation** if it contains all integers from `1` to `n` exactly once.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** A = [1,3,2,4], B = [3,1,2,4]",
                "Output": "** [0,2,3,4]",
                "Explanation": "** At i = 0: no number is common, so C[0] = 0.\nAt i = 1: 1 and 3 are common in A and B, so C[1] = 2.\nAt i = 2: 1, 2, and 3 are common in A and B, so C[2] = 3.\nAt i = 3: 1, 2, 3, and 4 are common in A and B, so C[3] = 4."
            },
            {
                "Input": "** A = [2,3,1], B = [3,1,2]",
                "Output": "** [0,1,3]",
                "Explanation": "** At i = 0: no number is common, so C[0] = 0.\nAt i = 1: only 3 is common in A and B, so C[1] = 1.\nAt i = 2: 1, 2, and 3 are common in A and B, so C[2] = 3."
            }
        ]
    },
    {
        "Title": "Maximum Number of Fish in a Grid",
        "slug": "maximum-number-of-fish-in-a-grid",
        "description": "You are given a **0-indexed** 2D matrix `grid` of size `m x n`, where `(r, c)` represents:\n\n\n A **land** cell if `grid[r][c] = 0`, or\n A **water** cell containing `grid[r][c]` fish, if `grid[r][c] > 0`.\n\n\nA fisher can start at any **water** cell `(r, c)` and can do the following operations any number of times:\n\n\n Catch all the fish at cell `(r, c)`, or\n Move to any adjacent **water** cell.\n\n\nReturn *the **maximum** number of fish the fisher can catch if he chooses his starting cell optimally, or* `0` if no water cell exists.\n\n\nAn **adjacent** cell of the cell `(r, c)`, is one of the cells `(r, c + 1)`, `(r, c - 1)`, `(r + 1, c)` or `(r - 1, c)` if it exists.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[0,2,1,0],[4,0,0,3],[1,0,0,4],[0,3,2,0]]",
                "Output": "** 7",
                "Explanation": "** The fisher can start at cell (1,3) and collect 3 fish, then move to cell (2,3)\u00a0and collect 4 fish."
            },
            {
                "Input": "** grid = [[1,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,1]]",
                "Output": "** 1",
                "Explanation": "** The fisher can start at cells (0,0) or (3,3) and collect a single fish."
            }
        ]
    },
    {
        "Title": "Make Array Empty",
        "slug": "make-array-empty",
        "description": "You are given an integer array `nums` containing **distinct** numbers, and you can perform the following operations **until the array is empty**:\n\n\n If the first element has the **smallest** value, remove it\n Otherwise, put the first element at the **end** of the array.\n\n\nReturn *an integer denoting the number of operations it takes to make* `nums` *empty.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Greedy",
            "Binary Indexed Tree",
            "Segment Tree",
            "Sorting",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** nums = [3,4,-1]",
                "Output": "** 5",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2,4,3]",
                "Output": "** 5",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Determine the Winner of a Bowling Game",
        "slug": "determine-the-winner-of-a-bowling-game",
        "description": "You are given two **0-indexed** integer arrays `player1` and `player2`, representing the number of pins that player 1 and player 2 hit in a bowling game, respectively.\n\n\nThe bowling game consists of `n` turns, and the number of pins in each turn is exactly 10.\n\n\nAssume a player hits `xi` pins in the ith turn. The value of the ith turn for the player is:\n\n\n `2xi` if the player hits 10 pins **in either (i - 1)th or (i - 2)th turn**.\n Otherwise, it is `xi`.\n\n\nThe **score** of the player is the sum of the values of their `n` turns.\n\n\nReturn\n\n\n 1 if the score of player 1 is more than the score of player 2,\n 2 if the score of player 2 is more than the score of player 1, and\n 0 in case of a draw.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** player1 = [5,10,3,2], player2 = [6,5,7,3]",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe score of player 1 is 5 + 10 + 2\\*3 + 2\\*2 = 25.\n\n\nThe score of player 2 is 6 + 5 + 7 + 3 = 21."
            },
            {
                "Input": "** player1 = [3,5,7,6], player2 = [8,10,10,2]",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe score of player 1 is 3 + 5 + 7 + 6 = 21.\n\n\nThe score of player 2 is 8 + 10 + 2\\*10 + 2\\*2 = 42."
            },
            {
                "Input": "** player1 = [2,3], player2 = [4,1]",
                "Output": "** 0",
                "Explanation": "**\n\n\nThe score of player1 is 2 + 3 = 5.\n\n\nThe score of player2 is 4 + 1 = 5."
            },
            {
                "Input": "** player1 = [1,1,1,10,10,10,10], player2 = [10,10,10,10,1,1,1]",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe score of player1 is 1 + 1 + 1 + 10 + 2\\*10 + 2\\*10 + 2\\*10 = 73.\n\n\nThe score of player2 is 10 + 2\\*10 + 2\\*10 + 2\\*10 + 2\\*1 + 2\\*1 + 1 = 75.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == player1.length == player2.length`\n* `1 <= n <= 1000`\n* `0 <= player1[i], player2[i] <= 10`\n\n\nHints:\n    0. Think about simulating the process to calculate the answer.\n    1. Iterate over each element and check the previous two elements. See if one of them is 10 and can affect the score.\nSimilarQuestions: [1086]"
            }
        ]
    },
    {
        "Title": "First Completely Painted Row or Column",
        "slug": "first-completely-painted-row-or-column",
        "description": "You are given a **0-indexed** integer array `arr`, and an `m x n` integer **matrix** `mat`. `arr` and `mat` both contain **all** the integers in the range `[1, m * n]`.\n\n\nGo through each index `i` in `arr` starting from index `0` and paint the cell in `mat` containing the integer `arr[i]`.\n\n\nReturn *the smallest index* `i` *at which either a row or a column will be completely painted in* `mat`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** arr = [1,3,4,2], mat = [[1,4],[2,3]]",
                "Output": "** 2",
                "Explanation": "** The moves are shown in order, and both the first row and second column of the matrix become fully painted at arr[2]."
            },
            {
                "Input": "** arr = [2,8,7,4,1,3,5,6,9], mat = [[3,2,5],[1,4,6],[8,7,9]]",
                "Output": "** 3",
                "Explanation": "** The second column becomes fully painted at arr[3]."
            }
        ]
    },
    {
        "Title": "Minimum Cost of a Path With Special Roads",
        "slug": "minimum-cost-of-a-path-with-special-roads",
        "description": "You are given an array `start` where `start = [startX, startY]` represents your initial position `(startX, startY)` in a 2D space. You are also given the array `target` where `target = [targetX, targetY]` represents your target position `(targetX, targetY)`.\n\n\nThe **cost** of going from a position `(x1, y1)` to any other position in the space `(x2, y2)` is `|x2 - x1| + |y2 - y1|`.\n\n\nThere are also some **special roads**. You are given a 2D array `specialRoads` where `specialRoads[i] = [x1i, y1i, x2i, y2i, costi]` indicates that the `ith` special road goes in **on direction** from `(x1i, y1i)` to `(x2i, y2i)` with a cost equal to `costi`. You can use each special road any number of times.\n\n\nReturn the **minimum** cost required to go from `(startX, startY)` to `(targetX, targetY)`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Graph",
            "Heap (Priority Queue)",
            "Shortest Path"
        ],
        "examples": [
            {
                "Input": "** start = [1,1], target = [4,5], specialRoads = [[1,2,3,3,2],[3,4,4,5,1]]",
                "Output": "** 5",
                "Explanation": "**\n\n\n1. (1,1) to (1,2) with a cost of |1 - 1| + |2 - 1| = 1.\n2. (1,2) to (3,3). Use `specialRoads[0]` with the cost 2.\n3. (3,3) to (3,4) with a cost of |3 - 3| + |4 - 3| = 1.\n4. (3,4) to (4,5). Use `specialRoads[1]` with the cost 1.\n\n\nSo the total cost is 1 + 2 + 1 + 1 = 5."
            },
            {
                "Input": "** start = [3,2], target = [5,7], specialRoads = [[5,7,3,2,1],[3,2,3,4,4],[3,3,5,5,5],[3,4,5,6,6]]",
                "Output": "** 7",
                "Explanation": "**\n\n\nIt is optimal not to use any special edges and go directly from the starting to the ending position with a cost |5 - 3| + |7 - 2| = 7.\n\n\nNote that the `specialRoads[0]` is directed from (5,7) to (3,2)."
            },
            {
                "Input": "** start = [1,1], target = [10,4], specialRoads = [[4,2,1,1,3],[1,2,7,4,4],[10,3,6,1,2],[6,1,1,2,3]]",
                "Output": "** 8",
                "Explanation": "**\n\n\n1. (1,1) to (1,2) with a cost of |1 - 1| + |2 - 1| = 1.\n2. (1,2) to (7,4). Use `specialRoads[1]` with the cost 4.\n3. (7,4) to (10,4) with a cost of |10 - 7| + |4 - 4| = 3.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `start.length == target.length == 2`\n* `1 <= startX <= targetX <= 105`\n* `1 <= startY <= targetY <= 105`\n* `1 <= specialRoads.length <= 200`\n* `specialRoads[i].length == 5`\n* `startX <= x1i, x2i <= targetX`\n* `startY <= y1i, y2i <= targetY`\n* `1 <= costi <= 105`\n\n\nHints:\n    0. It can be proven that it is optimal to go only to the positions that are either the start or the end of a special road or the target position.\n    1. Consider all positions given to you as nodes in a graph, and the edges of the graph are the special roads.\n    2. Now the problem is equivalent to finding the shortest path in a directed graph.\nSimilarQuestions: [64, 1786]"
            }
        ]
    },
    {
        "Title": "Lexicographically Smallest Beautiful String",
        "slug": "lexicographically-smallest-beautiful-string",
        "description": "A string is **beautiful** if:\n\n\n It consists of the first `k` letters of the English lowercase alphabet.\n It does not contain any substring of length `2` or more which is a palindrome.\n\n\nYou are given a beautiful string `s` of length `n` and a positive integer `k`.\n\n\nReturn *the lexicographically smallest string of length* `n`*, which is larger than* `s` *and is **beautiful***. If there is no such string, return an empty string.\n\n\nA string `a` is lexicographically larger than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly larger than the corresponding character in `b`.\n\n\n For example, `\"abcd\"` is lexicographically larger than `\"abcc\"` because the first position they differ is at the fourth character, and `d` is greater than `c`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"abcz\", k = 26",
                "Output": "** \"abda\"",
                "Explanation": "** The string \"abda\" is beautiful and lexicographically larger than the string \"abcz\".\nIt can be proven that there is no string that is lexicographically larger than the string \"abcz\", beautiful, and lexicographically smaller than the string \"abda\"."
            },
            {
                "Input": "** s = \"dc\", k = 4",
                "Output": "** \"\"",
                "Explanation": "** It can be proven that there is no string that is lexicographically larger than the string \"dc\" and is beautiful."
            }
        ]
    },
    {
        "Title": "Counter II",
        "slug": "counter-ii",
        "description": "Write a function\u00a0`createCounter`. It should accept an initial integer\u00a0`init`. It should return an object with three functions.\n\n\nThe three functions are:\n\n\n `increment()`\u00a0increases\u00a0the current value by 1 and then returns it.\n `decrement()`\u00a0reduces the current value by 1 and then returns it.\n `reset()`\u00a0sets the current value to\u00a0`init`\u00a0and then returns it.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "** init = 5, calls = [\"increment\",\"reset\",\"decrement\"]",
                "Output": "** [6,5,4]",
                "Explanation": "**\nconst counter = createCounter(5);\ncounter.increment(); // 6\ncounter.reset(); // 5\ncounter.decrement(); // 4"
            },
            {
                "Input": "** init = 0, calls = [\"increment\",\"increment\",\"decrement\",\"reset\",\"reset\"]",
                "Output": "** [1,2,1,0,0]",
                "Explanation": "**\nconst counter = createCounter(0);\ncounter.increment(); // 1\ncounter.increment(); // 2\ncounter.decrement(); // 1\ncounter.reset(); // 0\ncounter.reset(); // 0"
            }
        ]
    },
    {
        "Title": "Allow One Function Call",
        "slug": "allow-one-function-call",
        "description": "Given a function `fn`, return a new function that is identical to the original function except that it ensures\u00a0`fn`\u00a0is\u00a0called at most once.\n\n\n The first time the returned function is called, it should return the same result as\u00a0`fn`.\n Every subsequent time it is called, it should return\u00a0`undefined`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "** fn = (a,b,c) => (a + b + c), calls = [[1,2,3],[2,3,6]]",
                "Output": "** [{\"calls\":1,\"value\":6}]",
                "Explanation": "**\nconst onceFn = once(fn);\nonceFn(1, 2, 3); // 6\nonceFn(2, 3, 6); // undefined, fn was not called"
            },
            {
                "Input": "** fn = (a,b,c) => (a * b * c), calls = [[5,7,4],[2,3,6],[4,6,8]]",
                "Output": "** [{\"calls\":1,\"value\":140}]",
                "Explanation": "**\nconst onceFn = once(fn);\nonceFn(5, 7, 4); // 140\nonceFn(2, 3, 6); // undefined, fn was not called\nonceFn(4, 6, 8); // undefined, fn was not called"
            }
        ]
    },
    {
        "Title": "Create Hello World Function",
        "slug": "create-hello-world-function",
        "description": "Write a function\u00a0`createHelloWorld`.\u00a0It should return a new function that always returns\u00a0`\"Hello World\"`.\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "** args = []",
                "Output": "** \"Hello World\"",
                "Explanation": "**\nconst f = createHelloWorld();\nf(); // \"Hello World\"\n\nThe function returned by createHelloWorld should always return \"Hello World\"."
            },
            {
                "Input": "** args = [{},null,42]",
                "Output": "** \"Hello World\"",
                "Explanation": "**\nconst f = createHelloWorld();\nf({}, null, 42); // \"Hello World\"\n\nAny arguments could be passed to the function but it should still always return \"Hello World\"."
            }
        ]
    },
    {
        "Title": "Find the Distinct Difference Array",
        "slug": "find-the-distinct-difference-array",
        "description": "You are given a **0-indexed** array `nums` of length `n`.\n\n\nThe **distinct difference** array of `nums` is an array `diff` of length `n` such that `diff[i]` is equal to the number of distinct elements in the suffix `nums[i + 1, ..., n - 1]` **subtracted from** the number of distinct elements in the prefix `nums[0, ..., i]`.\n\n\nReturn *the **distinct difference** array of* `nums`.\n\n\nNote that `nums[i, ..., j]` denotes the subarray of `nums` starting at index `i` and ending at index `j` inclusive. Particularly, if `i > j` then `nums[i, ..., j]` denotes an empty subarray.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** [-3,-1,1,3,5]",
                "Explanation": "** For index i = 0, there is 1 element in the prefix and 4 distinct elements in the suffix. Thus, diff[0] = 1 - 4 = -3.\nFor index i = 1, there are 2 distinct elements in the prefix and 3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1.\nFor index i = 2, there are 3 distinct elements in the prefix and 2 distinct elements in the suffix. Thus, diff[2] = 3 - 2 = 1.\nFor index i = 3, there are 4 distinct elements in the prefix and 1 distinct element in the suffix. Thus, diff[3] = 4 - 1 = 3.\nFor index i = 4, there are 5 distinct elements in the prefix and no elements in the suffix. Thus, diff[4] = 5 - 0 = 5."
            },
            {
                "Input": "** nums = [3,2,3,4,2]",
                "Output": "** [-2,-1,0,2,3]",
                "Explanation": "** For index i = 0, there is 1 element in the prefix and 3 distinct elements in the suffix. Thus, diff[0] = 1 - 3 = -2.\nFor index i = 1, there are 2 distinct elements in the prefix and 3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1.\nFor index i = 2, there are 2 distinct elements in the prefix and 2 distinct elements in the suffix. Thus, diff[2] = 2 - 2 = 0.\nFor index i = 3, there are 3 distinct elements in the prefix and 1 distinct element in the suffix. Thus, diff[3] = 3 - 1 = 2.\nFor index i = 4, there are 3 distinct elements in the prefix and no elements in the suffix. Thus, diff[4] = 3 - 0 = 3."
            }
        ]
    },
    {
        "Title": "Frequency Tracker",
        "slug": "frequency-tracker",
        "description": "Design a data structure that keeps track of the values in it and answers some queries regarding their frequencies.\n\n\nImplement the `FrequencyTracker` class.\n\n\n `FrequencyTracker()`: Initializes the `FrequencyTracker` object with an empty array initially.\n `void add(int number)`: Adds `number` to the data structure.\n `void deleteOne(int number)`: Deletes **one** occurrence of `number` from the data structure. The data structure **may not contain** `number`, and in this case nothing is deleted.\n `bool hasFrequency(int frequency)`: Returns `true` if there is a number in the data structure that occurs `frequency` number of times, otherwise, it returns `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Design"
        ],
        "examples": [
            {
                "Input": "[\"FrequencyTracker\", \"add\", \"add\", \"hasFrequency\"]\n[[], [3], [3], [2]]",
                "Output": "[null, null, null, true]",
                "Explanation": "FrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.add(3); // The data structure now contains [3]\nfrequencyTracker.add(3); // The data structure now contains [3, 3]\nfrequencyTracker.hasFrequency(2); // Returns true, because 3 occurs twice"
            },
            {
                "Input": "[\"FrequencyTracker\", \"add\", \"deleteOne\", \"hasFrequency\"]\n[[], [1], [1], [1]]",
                "Output": "[null, null, null, false]",
                "Explanation": "FrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.add(1); // The data structure now contains [1]\nfrequencyTracker.deleteOne(1); // The data structure becomes empty []\nfrequencyTracker.hasFrequency(1); // Returns false, because the data structure is empty"
            },
            {
                "Input": "[\"FrequencyTracker\", \"hasFrequency\", \"add\", \"hasFrequency\"]\n[[], [2], [3], [1]]",
                "Output": "[null, false, null, true]",
                "Explanation": "FrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.hasFrequency(2); // Returns false, because the data structure is empty\nfrequencyTracker.add(3); // The data structure now contains [3]\nfrequencyTracker.hasFrequency(1); // Returns true, because 3 occurs once"
            }
        ]
    },
    {
        "Title": "Number of Adjacent Elements With the Same Color",
        "slug": "number-of-adjacent-elements-with-the-same-color",
        "description": "You are given an integer `n` representing an array `colors` of length `n` where all elements are set to 0's meaning **uncolored**. You are also given a 2D integer array `queries` where `queries[i] = [indexi, colori]`. For the `ith` **query**:\n\n\n Set `colors[indexi]` to `colori`.\n Count adjacent pairs in `colors` set to the same color (regardless of `colori`).\n\n\nReturn an array `answer` of the same length as `queries` where `answer[i]` is the answer to the `ith` query.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]]",
                "Output": "** [0,1,1,0,2]",
                "Explanation": "**\n\n\n* Initially array colors = [0,0,0,0], where 0 denotes uncolored elements of the array.\n* After the 1st query colors = [2,0,0,0]. The count of adjacent pairs with the same color is 0.\n* After the 2nd query colors = [2,2,0,0]. The count of adjacent pairs with the same color is 1.\n* After the 3rd query colors = [2,2,0,1]. The count of adjacent pairs with the same color is 1.\n* After the 4th query colors = [2,1,0,1]. The count of adjacent pairs with the same color is 0.\n* After the 5th query colors = [2,1,1,1]. The count of adjacent pairs with the same color is 2."
            },
            {
                "Input": "** n = 1, queries = [[0,100000]]",
                "Output": "** [0]",
                "Explanation": "**\n\n\nAfter the 1st query colors = [100000]. The count of adjacent pairs with the same color is 0.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 105`\n* `1 <= queries.length <= 105`\n* `queries[i].length\u00a0== 2`\n* `0 <= indexi\u00a0<= n - 1`\n* `1 <=\u00a0 colori\u00a0<= 105`\n\n\nHints:\n    0. Since at each query, only one element is being recolored, we just need to focus on its neighbors.\n    1. If an element that is changed on the i-th query had the same color as its right element answer decreases by 1. Similarly contributes its left element too.\n    2. After changing the color, if the element has the same color as its right element answer increases by 1. Similarly contributes its left element too."
            }
        ]
    },
    {
        "Title": "Make Costs of Paths Equal in a Binary Tree",
        "slug": "make-costs-of-paths-equal-in-a-binary-tree",
        "description": "You are given an integer `n` representing the number of nodes in a **perfect binary tree** consisting of nodes numbered from `1` to `n`. The root of the tree is node `1` and each node `i` in the tree has two children where the left child is the node `2 * i` and the right child is `2 * i + 1`.\n\n\nEach node in the tree also has a **cost** represented by a given **0-indexed** integer array `cost` of size `n` where `cost[i]` is the cost of node `i + 1`. You are allowed to **increment** the cost of **any** node by `1` **any** number of times.\n\n\nReturn *the **minimum** number of increments you need to make the cost of paths from the root to each **leaf** node equal*.\n\n\nNote**:\n\n\n A **perfect binary tree** is a tree where each node, except the leaf nodes, has exactly 2 children.\n The **cost of a path** is the sum of costs of nodes in the path.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy",
            "Tree",
            "Binary Tree"
        ],
        "examples": [
            {
                "Input": "** n = 7, cost = [1,5,2,2,3,3,1]",
                "Output": "** 6",
                "Explanation": "** We can do the following increments:\n- Increase the cost of node 4 one time.\n- Increase the cost of node 3 three times.\n- Increase the cost of node 7 two times.\nEach path from the root to a leaf will have a total cost of 9.\nThe total increments we did is 1 + 3 + 2 = 6.\nIt can be shown that this is the minimum answer we can achieve."
            },
            {
                "Input": "** n = 3, cost = [5,3,3]",
                "Output": "** 0",
                "Explanation": "** The two paths already have equal total costs, so no increments are needed."
            }
        ]
    },
    {
        "Title": "Chunk Array",
        "slug": "chunk-array",
        "description": "Given an array `arr` and\u00a0a chunk size\u00a0`size`, return a\u00a0**chunked** array.\n\n\nA\u00a0**chunked**\u00a0array contains the original elements in\u00a0`arr`, but\u00a0consists of subarrays each of length\u00a0`size`. The length of the last subarray may be less than\u00a0`size`\u00a0if `arr.length`\u00a0is not evenly divisible by `size`.\n\n\nYou may assume the\u00a0array\u00a0is\u00a0the output of\u00a0`JSON.parse`. In other words, it is valid JSON.\n\n\nPlease solve it without using lodash's\u00a0`_.chunk`\u00a0function.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "** arr = [1,2,3,4,5], size = 1",
                "Output": "** [[1],[2],[3],[4],[5]]",
                "Explanation": "** The arr has been split into subarrays each with 1 element."
            },
            {
                "Input": "** arr = [1,9,6,3,2], size = 3",
                "Output": "** [[1,9,6],[3,2]]",
                "Explanation": "** The arr has been split into subarrays with 3 elements. However, only two elements are left for the 2nd subarray."
            },
            {
                "Input": "** arr = [8,5,3,2,6], size = 6",
                "Output": "** [[8,5,3,2,6]]",
                "Explanation": "** Size is greater than arr.length thus all elements are in the first subarray."
            },
            {
                "Input": "** arr = [], size = 1",
                "Output": "** []",
                "Explanation": "** There are no elements to be chunked so an empty array is returned."
            }
        ]
    },
    {
        "Title": "Number of Senior Citizens",
        "slug": "number-of-senior-citizens",
        "description": "You are given a **0-indexed** array of strings `details`. Each element of `details` provides information about a given passenger compressed into a string of length `15`. The system is such that:\n\n\n The first ten characters consist of the phone number of passengers.\n The next character denotes the gender of the person.\n The following two characters are used to indicate the age of the person.\n The last two characters determine the seat allotted to that person.\n\n\nReturn *the number of passengers who are **strictly** **more than 60 years old**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "examples": [
            {
                "Input": "** details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"]",
                "Output": "** 2",
                "Explanation": "** The passengers at indices 0, 1, and 2 have ages 75, 92, and 40. Thus, there are 2 people who are over 60 years old."
            },
            {
                "Input": "** details = [\"1313579440F2036\",\"2921522980M5644\"]",
                "Output": "** 0",
                "Explanation": "** None of the passengers are older than 60."
            }
        ]
    },
    {
        "Title": "Sum in a Matrix",
        "slug": "sum-in-a-matrix",
        "description": "You are given a **0-indexed** 2D integer array `nums`. Initially, your score is `0`. Perform the following operations until the matrix becomes empty:\n\n\n1. From each row in the matrix, select the largest number and remove it. In the case of a tie, it does not matter which number is chosen.\n2. Identify the highest number amongst all those removed in step 1. Add that number to your **score**.\n\n\nReturn *the final **score**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sorting",
            "Heap (Priority Queue)",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [[7,2,1],[6,4,2],[6,5,3],[3,2,1]]",
                "Output": "** 15",
                "Explanation": "** In the first operation, we remove 7, 6, 6, and 3. We then add 7 to our score. Next, we remove 2, 4, 5, and 2. We add 5 to our score. Lastly, we remove 1, 2, 3, and 1. We add 3 to our score. Thus, our final score is 7 + 5 + 3 = 15."
            },
            {
                "Input": "** nums = [[1]]",
                "Output": "** 1",
                "Explanation": "** We remove 1 and add it to the answer. We return 1."
            }
        ]
    },
    {
        "Title": "Maximum OR",
        "slug": "maximum-or",
        "description": "You are given a **0-indexed** integer array `nums` of length `n` and an integer `k`. In an operation, you can choose an element and multiply it by `2`.\n\n\nReturn *the maximum possible value of* `nums[0] | nums[1] | ... | nums[n - 1]` *that can be obtained after applying the operation on nums at most* `k` *times*.\n\n\nNote that `a | b` denotes the **bitwise or** between two integers `a` and `b`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Bit Manipulation",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [12,9], k = 1",
                "Output": "** 30",
                "Explanation": "** If we apply the operation to index 1, our new array nums will be equal to [12,18]. Thus, we return the bitwise or of 12 and 18, which is 30."
            },
            {
                "Input": "** nums = [8,1,2], k = 2",
                "Output": "** 35",
                "Explanation": "** If we apply the operation twice on index 0, we yield a new array of [32,1,2]. Thus, we return 32|1|2 = 35."
            }
        ]
    },
    {
        "Title": "Power of Heroes",
        "slug": "power-of-heroes",
        "description": "You are given a **0-indexed** integer array `nums` representing the strength of some heroes. The **power** of a group of heroes is defined as follows:\n\n\n Let `i0`, `i1`, ... ,`ik` be the indices of the heroes in a group. Then, the power of this group is `max(nums[i0], nums[i1], ... ,nums[ik])2 * min(nums[i0], nums[i1], ... ,nums[ik])`.\n\n\nReturn *the sum of the **power** of all **non-empty** groups of heroes possible.* Since the sum could be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Sorting",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [2,1,4]",
                "Output": "** 141",
                "Explanation": "** \n1st\u00a0group: [2] has power = 22\u00a0* 2 = 8.\n2nd\u00a0group: [1] has power = 12 * 1 = 1. \n3rd\u00a0group: [4] has power = 42 * 4 = 64. \n4th\u00a0group: [2,1] has power = 22 * 1 = 4. \n5th\u00a0group: [2,4] has power = 42 * 2 = 32. \n6th\u00a0group: [1,4] has power = 42 * 1 = 16. \n\u200b\u200b\u200b\u200b\u200b\u200b\u200b7th\u00a0group: [2,1,4] has power = 42\u200b\u200b\u200b\u200b\u200b\u200b\u200b * 1 = 16. \nThe sum of powers of all groups is 8 + 1 + 64 + 4 + 32 + 16 + 16 = 141."
            },
            {
                "Input": "** nums = [1,1,1]",
                "Output": "** 7",
                "Explanation": "** A total of 7 groups are possible, and the power of each group will be 1. Therefore, the sum of the powers of all groups is 7."
            }
        ]
    },
    {
        "Title": "Neighboring Bitwise XOR",
        "slug": "neighboring-bitwise-xor",
        "description": "A **0-indexed** array `derived` with length `n` is derived by computing the **bitwise XOR**\u00a0(\u2295) of adjacent values in a **binary array** `original` of length `n`.\n\n\nSpecifically, for each index `i` in the range `[0, n - 1]`:\n\n\n If `i = n - 1`, then `derived[i] = original[i] \u2295 original[0]`.\n Otherwise, `derived[i] = original[i] \u2295 original[i + 1]`.\n\n\nGiven an array `derived`, your task is to determine whether there exists a **valid binary array** `original` that could have formed `derived`.\n\n\nReturn ***true** if such an array exists or **false** otherwise.\n\n\n A binary array is an array containing only **0's** and **1's\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** derived = [1,1,0]",
                "Output": "** true",
                "Explanation": "** A valid original array that gives derived is [0,1,0].\nderived[0] = original[0] \u2295 original[1] = 0 \u2295 1 = 1 \nderived[1] = original[1] \u2295 original[2] = 1 \u2295 0 = 1\nderived[2] = original[2] \u2295 original[0] = 0 \u2295 0 = 0"
            },
            {
                "Input": "** derived = [1,1]",
                "Output": "** true",
                "Explanation": "** A valid original array that gives derived is [0,1].\nderived[0] = original[0] \u2295 original[1] = 1\nderived[1] = original[1] \u2295 original[0] = 1"
            },
            {
                "Input": "** derived = [1,0]",
                "Output": "** false",
                "Explanation": "** There is no valid original array that gives derived."
            }
        ]
    },
    {
        "Title": "Maximum Number of Moves in a Grid",
        "slug": "maximum-number-of-moves-in-a-grid",
        "description": "You are given a **0-indexed** `m x n` matrix `grid` consisting of **positive** integers.\n\n\nYou can start at **any** cell in the first column of the matrix, and traverse the grid in the following way:\n\n\n From a cell `(row, col)`, you can move to any of the cells: `(row - 1, col + 1)`, `(row, col + 1)` and `(row + 1, col + 1)` such that the value of the cell you move to, should be **strictly** bigger than the value of the current cell.\n\n\nReturn *the **maximum** number of **moves** that you can perform.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[2,4,3,5],[5,4,9,3],[3,4,2,11],[10,9,13,15]]",
                "Output": "** 3",
                "Explanation": "** We can start at the cell (0, 0) and make the following moves:\n- (0, 0) -> (0, 1).\n- (0, 1) -> (1, 2).\n- (1, 2) -> (2, 3).\nIt can be shown that it is the maximum number of moves that can be made."
            }
        ]
    },
    {
        "Title": "Call Function with Custom Context",
        "slug": "call-function-with-custom-context",
        "description": "Enhance all functions to have the\u00a0`callPolyfill`\u00a0method. The method accepts an object\u00a0`obj`\u00a0as it's first parameter and any number of additional arguments. The\u00a0`obj`\u00a0becomes the\u00a0`this`\u00a0context for the function. The additional arguments are passed to the function (that the `callPolyfill`\u00a0method belongs on).\n\n\nFor example if you had the function:\n\n\n\n```\n\nfunction tax(price, taxRate) {\n  const totalCost = price * (1 + taxRate);\n\u00a0 console.log(`The cost of ${this.item} is ${totalCost}`);\n}\n\n```\n\nCalling this function like\u00a0`tax(10, 0.1)`\u00a0will log\u00a0`\"The cost of undefined is 11\"`. This is because the\u00a0`this`\u00a0context was not defined.\n\n\nHowever, calling the function like\u00a0`tax.callPolyfill({item: \"salad\"}, 10, 0.1)`\u00a0will log\u00a0`\"The cost of salad is 11\"`. The\u00a0`this`\u00a0context was appropriately set, and the function logged an appropriate output.\n\n\nPlease solve this without using\u00a0the built-in\u00a0`Function.call`\u00a0method.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [],
        "examples": [
            {
                "Input": "**\nfn = function add(b) {\n  return this.a + b;\n}\nargs = [{\"a\": 5}, 7]",
                "Output": "** 12",
                "Explanation": "**\nfn.callPolyfill({\"a\": 5}, 7); // 12\ncallPolyfill sets the \"this\" context to {\"a\": 5}. 7 is passed as an argument."
            },
            {
                "Input": "** \nfn = function tax(price, taxRate) { \n\u00a0return `The cost of the ${this.item} is ${price * taxRate}`; \n}\nargs = [{\"item\": \"burger\"}, 10, 1.1]",
                "Output": "** \"The cost of the burger is 11\"",
                "Explanation": "** callPolyfill sets the \"this\" context to {\"item\": \"burger\"}. 10 and 1.1 are passed as additional arguments."
            }
        ]
    },
    {
        "Title": "Event Emitter",
        "slug": "event-emitter",
        "description": "Design an `EventEmitter` class. This interface\u00a0is similar (but with some differences) to the one found in Node.js or the Event Target interface of the DOM. The `EventEmitter` should allow for subscribing to events and emitting them.\n\n\nYour `EventEmitter` class should have the following two methods:\n\n\n **subscribe** - This method takes in two arguments: the name of an event as a string and a callback function. This callback function\u00a0will later be called when the event is emitted.  \n\n An event should be able to have multiple listeners for the same event. When emitting an event with multiple callbacks, each should be called in the order in which they were subscribed. An array of results should be returned. You can assume no callbacks passed to\u00a0`subscribe`\u00a0are referentially identical.  \n\n The `subscribe` method should also return an object with an `unsubscribe`\u00a0method that enables the user to unsubscribe. When it is called, the callback\u00a0should be removed from the list of subscriptions and\u00a0`undefined`\u00a0should be returned.\n **emit** - This method takes in two arguments: the name of an event as a string and an optional array of arguments that will be\u00a0passed to the callback(s). If there are no callbacks subscribed to the given event, return an empty array. Otherwise, return an array of the results of all callback calls in the order they were subscribed.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [],
        "examples": [
            {
                "Input": "** \nactions = [\"EventEmitter\", \"emit\", \"subscribe\", \"subscribe\", \"emit\"], \nvalues = [[], [\"firstEvent\", \"function cb1() { return 5; }\"],  [\"firstEvent\", \"function cb1() { return 6; }\"], [\"firstEvent\"]]",
                "Output": "** [[],[\"emitted\",[]],[\"subscribed\"],[\"subscribed\"],[\"emitted\",[5,6]]]",
                "Explanation": "** \nconst emitter = new EventEmitter();\nemitter.emit(\"firstEvent\"); // [], no callback are subscribed yet\nemitter.subscribe(\"firstEvent\", function cb1() { return 5; });\nemitter.subscribe(\"firstEvent\", function cb2() { return 6; });\nemitter.emit(\"firstEvent\"); // [5, 6], returns the output of cb1 and cb2"
            },
            {
                "Input": "** \nactions = [\"EventEmitter\", \"subscribe\", \"emit\", \"emit\"], \nvalues = [[], [\"firstEvent\", \"function cb1(...args) { return args.join(','); }\"], [\"firstEvent\", [1,2,3]], [\"firstEvent\", [3,4,6]]]",
                "Output": "** [[],[\"subscribed\"],[\"emitted\",[\"1,2,3\"]],[\"emitted\",[\"3,4,6\"]]]",
                "Explanation": "** Note that the emit method should be able to accept an OPTIONAL array of arguments.\n\nconst emitter = new EventEmitter();\nemitter.subscribe(\"firstEvent, function cb1(...args) { return args.join(','); });\nemitter.emit(\"firstEvent\", [1, 2, 3]); // [\"1,2,3\"]\nemitter.emit(\"firstEvent\", [3, 4, 6]); // [\"3,4,6\"]"
            },
            {
                "Input": "** \nactions = [\"EventEmitter\", \"subscribe\", \"emit\", \"unsubscribe\", \"emit\"], \nvalues = [[], [\"firstEvent\", \"(...args) => args.join(',')\"], [\"firstEvent\", [1,2,3]], [0], [\"firstEvent\", [4,5,6]]]",
                "Output": "** [[],[\"subscribed\"],[\"emitted\",[\"1,2,3\"]],[\"unsubscribed\",0],[\"emitted\",[]]]",
                "Explanation": "**\nconst emitter = new EventEmitter();\nconst sub = emitter.subscribe(\"firstEvent\", (...args) => args.join(','));\nemitter.emit(\"firstEvent\", [1, 2, 3]); // [\"1,2,3\"]\nsub.unsubscribe(); // undefined\nemitter.emit(\"firstEvent\", [4, 5, 6]); // [], there are no subscriptions"
            },
            {
                "Input": "** \nactions = [\"EventEmitter\", \"subscribe\", \"subscribe\", \"unsubscribe\", \"emit\"], \nvalues = [[], [\"firstEvent\", \"x => x + 1\"], [\"firstEvent\", \"x => x + 2\"], [0], [\"firstEvent\", [5]]]",
                "Output": "** [[],[\"subscribed\"],[\"emitted\",[\"1,2,3\"]],[\"unsubscribed\",0],[\"emitted\",[7]]]",
                "Explanation": "**\nconst emitter = new EventEmitter();\nconst sub1 = emitter.subscribe(\"firstEvent\", x => x + 1);\nconst sub2 = emitter.subscribe(\"firstEvent\", x => x + 2);\nsub1.unsubscribe(); // undefined\nemitter.emit(\"firstEvent\", [5]); // [7]"
            }
        ]
    },
    {
        "Title": "Array Wrapper",
        "slug": "array-wrapper",
        "description": "Create a class\u00a0`ArrayWrapper` that accepts\u00a0an array of integers in its constructor. This class should have two features:\n\n\n When two instances of this class are added together with the\u00a0`+`\u00a0operator, the resulting value is the sum of all the elements in\u00a0both arrays.\n When the\u00a0`String()`\u00a0function is called on the instance, it will return a comma separated string surrounded by brackets. For example, `[1,2,3]`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "** nums = [[1,2],[3,4]], operation = \"Add\"",
                "Output": "** 10",
                "Explanation": "**\nconst obj1 = new ArrayWrapper([1,2]);\nconst obj2 = new ArrayWrapper([3,4]);\nobj1 + obj2; // 10"
            },
            {
                "Input": "** nums = [[23,98,42,70]], operation = \"String\"",
                "Output": "** \"[23,98,42,70]\"",
                "Explanation": "**\nconst obj = new ArrayWrapper([23,98,42,70]);\nString(obj); // \"[23,98,42,70]\""
            },
            {
                "Input": "** nums = [[],[]], operation = \"Add\"",
                "Output": "** 0",
                "Explanation": "**\nconst obj1 = new ArrayWrapper([]);\nconst obj2 = new ArrayWrapper([]);\nobj1 + obj2; // 0"
            }
        ]
    },
    {
        "Title": "Minimum String Length After Removing Substrings",
        "slug": "minimum-string-length-after-removing-substrings",
        "description": "You are given a string `s` consisting only of **uppercase** English letters.\n\n\nYou can apply some operations to this string where, in one operation, you can remove **any** occurrence of one of the substrings `\"AB\"` or `\"CD\"` from `s`.\n\n\nReturn *the **minimum** possible length of the resulting string that you can obtain*.\n\n\nNote** that the string concatenates after removing the substring and could produce new `\"AB\"` or `\"CD\"` substrings.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Stack",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** s = \"ABFCACDB\"",
                "Output": "** 2",
                "Explanation": "** We can do the following operations:\n- Remove the substring \"ABFCACDB\", so s = \"FCACDB\".\n- Remove the substring \"FCACDB\", so s = \"FCAB\".\n- Remove the substring \"FCAB\", so s = \"FC\".\nSo the resulting length of the string is 2.\nIt can be shown that it is the minimum length that we can obtain."
            },
            {
                "Input": "** s = \"ACBBD\"",
                "Output": "** 5",
                "Explanation": "** We cannot do any operations on the string so the length remains the same."
            }
        ]
    },
    {
        "Title": "Lexicographically Smallest Palindrome",
        "slug": "lexicographically-smallest-palindrome",
        "description": "You are given a string `s` consisting of **lowercase English letters**, and you are allowed to perform operations on it. In one operation, you can **replace** a character in `s` with another lowercase English letter.\n\n\nYour task is to make `s` a **palindrome** with the **minimum** **number** **of operations** possible. If there are **multiple palindromes** that can be made using the **minimum** number of operations, make the **lexicographically smallest** one.\n\n\nA string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, string `a` has a letter that appears earlier in the alphabet than the corresponding letter in `b`.\n\n\nReturn *the resulting palindrome string.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"egcfe\"",
                "Output": "** \"efcfe\"",
                "Explanation": "** The minimum number of operations to make \"egcfe\" a palindrome is 1, and the lexicographically smallest palindrome string we can get by modifying one character is \"efcfe\", by changing 'g'."
            },
            {
                "Input": "** s = \"abcd\"",
                "Output": "** \"abba\"",
                "Explanation": "** The minimum number of operations to make \"abcd\" a palindrome is 2, and the lexicographically smallest palindrome string we can get by modifying two characters is \"abba\"."
            },
            {
                "Input": "** s = \"seven\"",
                "Output": "** \"neven\"",
                "Explanation": "** The minimum number of operations to make \"seven\" a palindrome is 1, and the lexicographically smallest palindrome string we can get by modifying one character is \"neven\"."
            }
        ]
    },
    {
        "Title": "Find the Punishment Number of an Integer",
        "slug": "find-the-punishment-number-of-an-integer",
        "description": "Given a positive integer `n`, return *the **punishment number*** of `n`.\n\n\nThe **punishment number** of `n` is defined as the sum of the squares of all integers `i` such that:\n\n\n `1 <= i <= n`\n The decimal representation of `i * i` can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals `i`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** n = 10",
                "Output": "** 182",
                "Explanation": "** There are exactly 3 integers i that satisfy the conditions in the statement:\n- 1 since 1 * 1 = 1\n- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1.\n- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0.\nHence, the punishment number of 10 is 1 + 81 + 100 = 182"
            },
            {
                "Input": "** n = 37",
                "Output": "** 1478",
                "Explanation": "** There are exactly 4 integers i that satisfy the conditions in the statement:\n- 1 since 1 * 1 = 1. \n- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1. \n- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0. \n- 36 since 36 * 36 = 1296 and 1296 can be partitioned into 1 + 29 + 6.\nHence, the punishment number of 37 is 1 + 81 + 100 + 1296 = 1478"
            }
        ]
    },
    {
        "Title": "Return Length of Arguments Passed",
        "slug": "return-length-of-arguments-passed",
        "description": "Write a function\u00a0`argumentsLength` that returns the count of arguments passed to it.\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "** args = [5]",
                "Output": "** 1",
                "Explanation": "**\nargumentsLength(5); // 1\n\nOne value was passed to the function so it should return 1."
            },
            {
                "Input": "** args = [{}, null, \"3\"]",
                "Output": "** 3",
                "Explanation": "** \nargumentsLength({}, null, \"3\"); // 3\n\nThree values were passed to the function so it should return 3."
            }
        ]
    },
    {
        "Title": "To Be Or Not To Be",
        "slug": "to-be-or-not-to-be",
        "description": "Write a function\u00a0`expect` that helps developers test their code. It should take in any value\u00a0`val`\u00a0and return an object with the following two functions.\n\n\n `toBe(val)`\u00a0accepts another value and returns\u00a0`true`\u00a0if the two values\u00a0`===`\u00a0each other. If they are not equal, it should throw an error\u00a0`\"Not Equal\"`.\n `notToBe(val)`\u00a0accepts another value and returns\u00a0`true`\u00a0if the two values\u00a0`!==`\u00a0each other. If they are equal, it should throw an error\u00a0`\"Equal\"`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "** func = () => expect(5).toBe(5)",
                "Output": "** {\"value\": true}",
                "Explanation": "** 5 === 5 so this expression returns true."
            },
            {
                "Input": "** func = () => expect(5).toBe(null)",
                "Output": "** {\"error\": \"Not Equal\"}",
                "Explanation": "** 5 !== null so this expression throw the error \"Not Equal\"."
            },
            {
                "Input": "** func = () => expect(5).notToBe(null)",
                "Output": "** {\"value\": true}",
                "Explanation": "** 5 !== null so this expression returns true."
            }
        ]
    },
    {
        "Title": "Compact Object",
        "slug": "compact-object",
        "description": "Given an object or array\u00a0`obj`, return a **compact object**.\n\n\nA **compact object**\u00a0is the same as the original object, except with keys containing **falsy** values removed. This operation applies to the object and any nested objects. Arrays are considered objects where\u00a0the indices are\u00a0keys. A value is\u00a0considered **falsy**\u00a0when `Boolean(value)` returns `false`.\n\n\nYou may assume the\u00a0`obj` is\u00a0the output of\u00a0`JSON.parse`. In other words, it is valid JSON.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [],
        "examples": [
            {
                "Input": "** obj = [null, 0, false, 1]",
                "Output": "** [1]",
                "Explanation": "** All falsy values have been removed from the array."
            },
            {
                "Input": "** obj = {\"a\": null, \"b\": [false, 1]}",
                "Output": "** {\"b\": [1]}",
                "Explanation": "** obj[\"a\"] and obj[\"b\"][0] had falsy values and were removed."
            },
            {
                "Input": "** obj = [null, 0, 5, [0], [false, 16]]",
                "Output": "** [5, [], [16]]",
                "Explanation": "** obj[0], obj[1], obj[3][0], and obj[4][0] were falsy and removed."
            }
        ]
    },
    {
        "Title": "Buy Two Chocolates",
        "slug": "buy-two-chocolates",
        "description": "You are given an integer array `prices` representing the prices of various chocolates in a store. You are also given a single integer `money`, which represents your initial amount of money.\n\n\nYou must buy **exactly** two chocolates in such a way that you still have some **non-negative** leftover money. You would like to minimize the sum of the prices of the two chocolates you buy.\n\n\nReturn *the amount of money you will have leftover after buying the two chocolates*. If there is no way for you to buy two chocolates without ending up in debt, return `money`. Note that the leftover must be non-negative.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** prices = [1,2,2], money = 3",
                "Output": "** 0",
                "Explanation": "** Purchase the chocolates priced at 1 and 2 units respectively. You will have 3 - 3 = 0 units of money afterwards. Thus, we return 0."
            },
            {
                "Input": "** prices = [3,2,3], money = 3",
                "Output": "** 3",
                "Explanation": "** You cannot buy 2 chocolates without going in debt, so we return 3."
            }
        ]
    },
    {
        "Title": "Extra Characters in a String",
        "slug": "extra-characters-in-a-string",
        "description": "You are given a **0-indexed** string `s` and a dictionary of words `dictionary`. You have to break `s` into one or more **non-overlapping** substrings such that each substring is present in `dictionary`. There may be some **extra characters** in `s` which are not present in any of the substrings.\n\n\nReturn *the **minimum** number of extra characters left over if you break up* `s` *optimally.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Dynamic Programming",
            "Trie"
        ],
        "examples": [
            {
                "Input": "** s = \"leetscode\", dictionary = [\"leet\",\"code\",\"leetcode\"]",
                "Output": "** 1",
                "Explanation": "** We can break s in two substrings: \"leet\" from index 0 to 3 and \"code\" from index 5 to 8. There is only 1 unused character (at index 4), so we return 1."
            },
            {
                "Input": "** s = \"sayhelloworld\", dictionary = [\"hello\",\"world\"]",
                "Output": "** 3",
                "Explanation": "** We can break s in two substrings: \"hello\" from index 3 to 7 and \"world\" from index 8 to 12. The characters at indices 0, 1, 2 are not used in any substring and thus are considered as extra characters. Hence, we return 3."
            }
        ]
    },
    {
        "Title": "Maximum Strength of a Group",
        "slug": "maximum-strength-of-a-group",
        "description": "You are given a **0-indexed** integer array `nums` representing the score of students in an exam. The teacher would like to form one **non-empty** group of students with maximal **strength**, where the strength of a group of students of indices `i0`, `i1`, `i2`, ... , `ik` is defined as `nums[i0] * nums[i1] * nums[i2] * ... * nums[ik\u200b]`.\n\n\nReturn *the maximum strength of a group the teacher can create*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Backtracking",
            "Greedy",
            "Bit Manipulation",
            "Sorting",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** nums = [3,-1,-5,2,5,-9]",
                "Output": "** 1350",
                "Explanation": "** One way to form a group of maximal strength is to group the students at indices [0,2,3,4,5]. Their strength is 3 * (-5) * 2 * 5 * (-9) = 1350, which we can show is optimal."
            },
            {
                "Input": "** nums = [-4,-5,-4]",
                "Output": "** 20",
                "Explanation": "** Group the students at indices [0, 1] . Then, we\u2019ll have a resulting strength of 20. We cannot achieve greater strength."
            }
        ]
    },
    {
        "Title": "Greatest Common Divisor Traversal",
        "slug": "greatest-common-divisor-traversal",
        "description": "You are given a **0-indexed** integer array `nums`, and you are allowed to **traverse** between its indices. You can traverse between index `i` and index `j`, `i != j`, if and only if `gcd(nums[i], nums[j]) > 1`, where `gcd` is the **greatest common divisor**.\n\n\nYour task is to determine if for **every pair** of indices `i` and `j` in nums, where `i < j`, there exists a **sequence of traversals** that can take us from `i` to `j`.\n\n\nReturn `true` *if it is possible to traverse between all such pairs of indices,* *or* `false` *otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Union Find",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [2,3,6]",
                "Output": "** true",
                "Explanation": "** In this example, there are 3 possible pairs of indices: (0, 1), (0, 2), and (1, 2).\nTo go from index 0 to index 1, we can use the sequence of traversals 0 -> 2 -> 1, where we move from index 0 to index 2 because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 > 1, and then move from index 2 to index 1 because gcd(nums[2], nums[1]) = gcd(6, 3) = 3 > 1.\nTo go from index 0 to index 2, we can just go directly because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 > 1. Likewise, to go from index 1 to index 2, we can just go directly because gcd(nums[1], nums[2]) = gcd(3, 6) = 3 > 1."
            },
            {
                "Input": "** nums = [3,9,5]",
                "Output": "** false",
                "Explanation": "** No sequence of traversals can take us from index 0 to index 2 in this example. So, we return false."
            },
            {
                "Input": "** nums = [4,3,12,8]",
                "Output": "** true",
                "Explanation": "** There are 6 possible pairs of indices to traverse between: (0, 1), (0, 2), (0, 3), (1, 2), (1, 3), and (2, 3). A valid sequence of traversals exists for each pair, so we return true."
            }
        ]
    },
    {
        "Title": "Remove Trailing Zeros From a String",
        "slug": "remove-trailing-zeros-from-a-string",
        "description": "Given a **positive** integer `num` represented as a string, return *the integer* `num` *without trailing zeros as a string*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** num = \"51230100\"",
                "Output": "** \"512301\"",
                "Explanation": "** Integer \"51230100\" has 2 trailing zeros, we remove them and return integer \"512301\"."
            },
            {
                "Input": "** num = \"123\"",
                "Output": "** \"123\"",
                "Explanation": "** Integer \"123\" has no trailing zeros, we return integer \"123\"."
            }
        ]
    },
    {
        "Title": "Difference of Number of Distinct Values on Diagonals",
        "slug": "difference-of-number-of-distinct-values-on-diagonals",
        "description": "Given a 2D `grid` of size `m x n`, you should find the matrix `answer` of size `m x n`.\n\n\nThe cell `answer[r][c]` is calculated by looking at the diagonal values of the cell `grid[r][c]`:\n\n\n Let `leftAbove[r][c]` be the number of **distinct** values on the diagonal to the left and above the cell `grid[r][c]` not including the cell `grid[r][c]` itself.\n Let `rightBelow[r][c]` be the number of **distinct** values on the diagonal to the right and below the cell `grid[r][c]`, not including the cell `grid[r][c]` itself.\n Then `answer[r][c] = |leftAbove[r][c] - rightBelow[r][c]|`.\n\n\nA **matrix diagonal** is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until the end of the matrix is reached.\n\n\n For example, in the below diagram the diagonal is highlighted using the cell with indices `(2, 3)` colored gray:\n\t+ Red-colored cells are left and above the cell.\n\t+ Blue-colored cells are right and below the cell.\n\n\n![](https://assets.leetcode.com/uploads/2024/05/26/diagonal.png)\n\n\nReturn the matrix `answer`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,2,3],[3,1,5],[3,2,1]]",
                "Output": "** Output: [[1,1,0],[1,0,1],[0,1,1]]",
                "Explanation": "**\n\n\nTo calculate the `answer` cells:\n\n\n\n\n| answer | left-above elements | leftAbove | right-below elements | rightBelow | |leftAbove - rightBelow| |\n| --- | --- | --- | --- | --- | --- |\n| [0][0] | [] | 0 | [grid[1][1], grid[2][2]] | |{1, 1}| = 1 | 1 |\n| [0][1] | [] | 0 | [grid[1][2]] | |{5}| = 1 | 1 |\n| [0][2] | [] | 0 | [] | 0 | 0 |\n| [1][0] | [] | 0 | [grid[2][1]] | |{2}| = 1 | 1 |\n| [1][1] | [grid[0][0]] | |{1}| = 1 | [grid[2][2]] | |{1}| = 1 | 0 |\n| [1][2] | [grid[0][1]] | |{2}| = 1 | [] | 0 | 1 |\n| [2][0] | [] | 0 | [] | 0 | 0 |\n| [2][1] | [grid[1][0]] | |{3}| = 1 | [] | 0 | 1 |\n| [2][2] | [grid[0][0], grid[1][1]] | |{1, 1}| = 1 | [] | 0 | 1 |"
            },
            {
                "Input": "** grid = [[1]]",
                "Output": "** Output: [[0]]\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `1 <= m, n, grid[i][j] <= 50`",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Cost to Make All Characters Equal",
        "slug": "minimum-cost-to-make-all-characters-equal",
        "description": "You are given a **0-indexed** binary string `s` of length `n` on which you can apply two types of operations:\n\n\n Choose an index `i` and invert all characters from\u00a0index `0` to index `i`\u00a0(both inclusive), with a cost of `i + 1`\n Choose an index `i` and invert all characters\u00a0from\u00a0index `i` to index `n - 1`\u00a0(both inclusive), with a cost of `n - i`\n\n\nReturn *the **minimum cost** to make all characters of the string **equal***.\n\n\nInvert** a character means\u00a0if its value is '0' it becomes '1' and vice-versa.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"0011\"",
                "Output": "** 2",
                "Explanation": "** Apply the second operation with i = 2 to obtain s = \"0000\" for a cost of 2. It can be shown that 2 is the minimum cost to make all characters equal."
            },
            {
                "Input": "** s = \"010101\"",
                "Output": "** 9",
                "Explanation": "** Apply the first operation with i = 2 to obtain s = \"101101\" for a cost of 3.\nApply the first operation with i = 1 to obtain s = \"011101\" for a cost of 2. \nApply the first operation with i = 0 to obtain s = \"111101\" for a cost of 1. \nApply the second operation with i = 4 to obtain s = \"111110\" for a cost of 2.\nApply the second operation with i = 5 to obtain s = \"111111\" for a cost of 1. \nThe total cost to make all characters equal is 9. It can be shown that 9 is the minimum cost to make all characters equal."
            }
        ]
    },
    {
        "Title": "Timeout Cancellation",
        "slug": "timeout-cancellation",
        "description": "Given a function `fn`, an array of\u00a0arguments\u00a0`args`, and a timeout\u00a0`t`\u00a0in milliseconds, return a cancel function `cancelFn`.\n\n\nAfter a delay of `cancelTimeMs`, the returned cancel function `cancelFn` will be invoked.\n\n\n\n```\n\nsetTimeout(cancelFn, cancelTimeMs)\n\n```\n\nInitially, the execution of the function `fn` should be delayed by `t` milliseconds.\n\n\nIf, before the delay of `t` milliseconds, the function `cancelFn` is invoked, it should cancel the delayed execution of `fn`. Otherwise, if `cancelFn` is not invoked within the specified delay `t`, `fn` should be executed with the provided `args` as arguments.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "** fn = (x) => x * 5, args = [2], t = 20",
                "Output": "** [{\"time\": 20, \"returned\": 10}]",
                "Explanation": "** \nconst cancelTimeMs = 50;\nconst cancelFn = cancellable((x) => x * 5, [2], 20);\nsetTimeout(cancelFn, cancelTimeMs);\n\nThe cancellation was scheduled to occur after a delay of cancelTimeMs (50ms), which happened after the execution of fn(2) at 20ms."
            },
            {
                "Input": "** fn = (x) => x**2, args = [2], t = 100",
                "Output": "** []",
                "Explanation": "** \nconst cancelTimeMs = 50;\nconst cancelFn = cancellable((x) => x**2, [2], 100);\nsetTimeout(cancelFn, cancelTimeMs);\n\nThe cancellation was scheduled to occur after a delay of cancelTimeMs (50ms), which happened before the execution of fn(2) at 100ms, resulting in fn(2) never being called."
            },
            {
                "Input": "** fn = (x1, x2) => x1 * x2, args = [2,4], t = 30",
                "Output": "** [{\"time\": 30, \"returned\": 8}]",
                "Explanation": "**const cancelTimeMs = 100;\nconst cancelFn = cancellable((x1, x2) => x1 * x2, [2,4], 30);\nsetTimeout(cancelFn, cancelTimeMs);\n\nThe cancellation was scheduled to occur after a delay of cancelTimeMs (100ms), which happened after the execution of fn(2,4) at 30ms."
            }
        ]
    },
    {
        "Title": "Minimize String Length",
        "slug": "minimize-string-length",
        "description": "Given a **0-indexed** string `s`, repeatedly perform the following operation **any** number of times:\n\n\n Choose an index `i` in the string, and let `c` be the character in position `i`. **Delete** the **closest occurrence** of `c` to the **left** of `i` (if any) and the **closest occurrence** of `c` to the **right** of `i` (if any).\n\n\nYour task is to **minimize** the length of `s` by performing the above operation any number of times.\n\n\nReturn *an integer denoting the length of the **minimized** string.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"aaabc\"",
                "Output": "** 3",
                "Explanation": "** In this example, s is \"aaabc\". We can start by selecting the character 'a' at index 1. We then remove the closest 'a' to the left of index 1, which is at index 0, and the closest 'a' to the right of index 1, which is at index 2. After this operation, the string becomes \"abc\". Any further operation we perform on the string will leave it unchanged. Therefore, the length of the minimized string is 3."
            },
            {
                "Input": "** s = \"cbbd\"",
                "Output": "** 3",
                "Explanation": "** For this we can start with character 'b' at index 1. There is no occurrence of 'b' to the left of index 1, but there is one to the right at index 2, so we delete the 'b' at index 2. The string becomes \"cbd\" and further operations will leave it unchanged. Hence, the minimized length is 3."
            },
            {
                "Input": "** s = \"dddaaa\"",
                "Output": "** 2",
                "Explanation": "** For this, we can start with the character 'd' at index 1. The closest occurrence of a 'd' to its left is at index 0, and the closest occurrence of a 'd' to its right is at index 2. We delete both index 0 and 2, so the string becomes \"daaa\". In the new string, we can select the character 'a' at index 2. The closest occurrence of an 'a' to its left is at index 1, and the closest occurrence of an 'a' to its right is at index 3. We delete both of them, and the string becomes \"da\". We cannot minimize this further, so the minimized length is 2."
            }
        ]
    },
    {
        "Title": "Semi-Ordered Permutation",
        "slug": "semi-ordered-permutation",
        "description": "You are given a **0-indexed** permutation of `n` integers `nums`.\n\n\nA permutation is called **semi-ordered** if the first number equals `1` and the last number equals `n`. You can perform the below operation as many times as you want until you make `nums` a **semi-ordered** permutation:\n\n\n Pick two adjacent elements in `nums`, then swap them.\n\n\nReturn *the minimum number of operations to make* `nums` *a **semi-ordered permutation***.\n\n\nA **permutation** is a sequence of integers from `1` to `n` of length `n` containing each number exactly once.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [2,1,4,3]",
                "Output": "** 2",
                "Explanation": "** We can make the permutation semi-ordered using these sequence of operations: \n1 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3].\n2 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4].\nIt can be proved that there is no sequence of less than two operations that make nums a semi-ordered permutation."
            },
            {
                "Input": "** nums = [2,4,1,3]",
                "Output": "** 3",
                "Explanation": "** We can make the permutation semi-ordered using these sequence of operations:\n1 - swap i = 1 and j = 2. The permutation becomes [2,1,4,3].\n2 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3].\n3 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4].\nIt can be proved that there is no sequence of less than three operations that make nums a semi-ordered permutation."
            },
            {
                "Input": "** nums = [1,3,4,2,5]",
                "Output": "** 0",
                "Explanation": "** The permutation is already a semi-ordered permutation."
            }
        ]
    },
    {
        "Title": "Sum of Matrix After Queries",
        "slug": "sum-of-matrix-after-queries",
        "description": "You are given an integer `n` and a **0-indexed**\u00a0**2D array** `queries` where `queries[i] = [typei, indexi, vali]`.\n\n\nInitially, there is a **0-indexed** `n x n` matrix filled with `0`'s. For each query, you must apply one of the following changes:\n\n\n if `typei == 0`, set the values in the row with `indexi` to `vali`, overwriting any previous values.\n if `typei == 1`, set the values in the column with `indexi` to `vali`, overwriting any previous values.\n\n\nReturn *the sum of integers in the matrix after all queries are applied*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** n = 3, queries = [[0,0,1],[1,2,2],[0,2,3],[1,0,4]]",
                "Output": "** 23",
                "Explanation": "** The image above describes the matrix after each query. The sum of the matrix after all queries are applied is 23."
            },
            {
                "Input": "** n = 3, queries = [[0,0,4],[0,1,2],[1,0,1],[0,2,3],[1,2,1]]",
                "Output": "** 17",
                "Explanation": "** The image above describes the matrix after each query. The sum of the matrix after all queries are applied is 17."
            }
        ]
    },
    {
        "Title": "Count of Integers",
        "slug": "count-of-integers",
        "description": "You are given two numeric strings `num1` and `num2` and two integers `max_sum` and `min_sum`. We denote an integer `x` to be *good* if:\n\n\n `num1 <= x <= num2`\n `min_sum <= digit_sum(x) <= max_sum`.\n\n\nReturn *the number of good integers*. Since the answer may be large, return it modulo `109 + 7`.\n\n\nNote that `digit_sum(x)` denotes the sum of the digits of `x`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** num1 = \"1\", num2 = \"12\", min_sum = 1, max_sum = 8",
                "Output": "** 11",
                "Explanation": "** There are 11 integers whose sum of digits lies between 1 and 8 are 1,2,3,4,5,6,7,8,10,11, and 12. Thus, we return 11."
            },
            {
                "Input": "** num1 = \"1\", num2 = \"5\", min_sum = 1, max_sum = 5",
                "Output": "** 5",
                "Explanation": "** The 5 integers whose sum of digits lies between 1 and 5 are 1,2,3,4, and 5. Thus, we return 5."
            }
        ]
    },
    {
        "Title": "Execute Asynchronous Functions in Parallel",
        "slug": "execute-asynchronous-functions-in-parallel",
        "description": "Given an array of\u00a0asynchronous functions\u00a0`functions`, return a new promise `promise`. Each function in the array accepts no arguments\u00a0and returns a promise. All the promises should be executed in parallel.\n\n\n`promise` resolves:\n\n\n When all the promises returned from\u00a0`functions`\u00a0were resolved successfully in parallel.\u00a0The resolved\u00a0value of\u00a0`promise` should be an array of all the resolved values of promises in the same order as they were in the\u00a0`functions`. The `promise` should resolve when all the asynchronous functions in the array have completed execution in parallel.\n\n\n`promise` rejects:\n\n\n When any\u00a0of the promises\u00a0returned from\u00a0`functions`\u00a0were rejected.\u00a0`promise` should also\u00a0reject\u00a0with the reason of the first rejection.\n\n\nPlease solve it without using the built-in\u00a0`Promise.all`\u00a0function.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [],
        "examples": [
            {
                "Input": "** functions = [\n\u00a0 () => new Promise(resolve => setTimeout(() => resolve(5), 200))\n]",
                "Output": "** {\"t\": 200, \"resolved\": [5]}",
                "Explanation": "** \npromiseAll(functions).then(console.log); // [5]\n\nThe single function was resolved at 200ms with a value of 5."
            },
            {
                "Input": "** functions = [\n    () => new Promise(resolve => setTimeout(() => resolve(1), 200)), \n    () => new Promise((resolve, reject) => setTimeout(() => reject(\"Error\"), 100))\n]",
                "Output": "** {\"t\": 100, \"rejected\": \"Error\"}",
                "Explanation": "** Since one of the promises rejected, the returned promise also rejected with the same error at the same time."
            },
            {
                "Input": "** functions = [\n    () => new Promise(resolve => setTimeout(() => resolve(4), 50)), \n    () => new Promise(resolve => setTimeout(() => resolve(10), 150)), \n    () => new Promise(resolve => setTimeout(() => resolve(16), 100))\n]",
                "Output": "** {\"t\": 150, \"resolved\": [4, 10, 16]}",
                "Explanation": "** All the promises resolved with a value. The returned promise resolved when the last promise resolved."
            }
        ]
    },
    {
        "Title": "Join Two Arrays by ID",
        "slug": "join-two-arrays-by-id",
        "description": "Given two arrays `arr1` and `arr2`, return a new\u00a0array `joinedArray`. All the objects in each\u00a0of the two inputs arrays will contain an\u00a0`id`\u00a0field that has an integer value.\u00a0\n\n\n`joinedArray`\u00a0is an array formed by merging\u00a0`arr1` and `arr2` based on\u00a0their `id`\u00a0key. The length of\u00a0`joinedArray` should be the length of unique values of `id`. The returned array should be sorted in\u00a0**ascending**\u00a0order based on the `id`\u00a0key.\n\n\nIf a given\u00a0`id`\u00a0exists in one array but not the other, the single object with that\u00a0`id` should be included in the result array without modification.\n\n\nIf two objects share an `id`, their properties should be merged into a single\u00a0object:\n\n\n If a key only exists in one object, that single key-value pair should be included in the object.\n If a key is included in both objects, the value in the object from `arr2`\u00a0should override the value from `arr1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [],
        "examples": [
            {
                "Input": "** \narr1 = [\n\u00a0   {\"id\": 1, \"x\": 1},\n\u00a0   {\"id\": 2, \"x\": 9}\n], \narr2 = [\n    {\"id\": 3, \"x\": 5}\n]",
                "Output": "** \n[\n\u00a0   {\"id\": 1, \"x\": 1},\n\u00a0   {\"id\": 2, \"x\": 9},\n    {\"id\": 3, \"x\": 5}\n]",
                "Explanation": "** There are no duplicate ids so arr1 is simply concatenated with arr2."
            },
            {
                "Input": "** \narr1 = [\n    {\"id\": 1, \"x\": 2, \"y\": 3},\n    {\"id\": 2, \"x\": 3, \"y\": 6}\n], \narr2 = [\n    {\"id\": 2, \"x\": 10, \"y\": 20},\n    {\"id\": 3, \"x\": 0, \"y\": 0}\n]",
                "Output": "** \n[\n    {\"id\": 1, \"x\": 2, \"y\": 3},\n    {\"id\": 2, \"x\": 10, \"y\": 20},\n\u00a0   {\"id\": 3, \"x\": 0, \"y\": 0}\n]",
                "Explanation": "** The two objects with id=1 and id=3 are included in the result array without modifiction. The two objects with id=2 are merged together. The keys from arr2 override the values in arr1."
            },
            {
                "Input": "** \narr1 = [\n    {\"id\": 1, \"b\": {\"b\": 94},\"v\": [4, 3], \"y\": 48}\n]\narr2 = [\n    {\"id\": 1, \"b\": {\"c\": 84}, \"v\": [1, 3]}\n]",
                "Output": "** [\n    {\"id\": 1, \"b\": {\"c\": 84}, \"v\": [1, 3], \"y\": 48}\n]",
                "Explanation": "** The two objects with id=1 are merged together. For the keys \"b\" and \"v\" the values from arr2 are used. Since the key \"y\" only exists in arr1, that value is taken form arr1."
            }
        ]
    },
    {
        "Title": "Add Two Promises",
        "slug": "add-two-promises",
        "description": "Given two promises `promise1` and `promise2`, return a new promise. `promise1` and `promise2`\u00a0will both resolve with a number. The returned promise should resolve with the sum of the two numbers.\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "** \npromise1 = new Promise(resolve => setTimeout(() => resolve(2), 20)), \npromise2 = new Promise(resolve => setTimeout(() => resolve(5), 60))",
                "Output": "** 7",
                "Explanation": "** The two input promises resolve with the values of 2 and 5 respectively. The returned promise should resolve with a value of 2 + 5 = 7. The time the returned promise resolves is not judged for this problem."
            },
            {
                "Input": "** \npromise1 = new Promise(resolve => setTimeout(() => resolve(10), 50)), \npromise2 = new Promise(resolve => setTimeout(() => resolve(-12), 30))",
                "Output": "** -2",
                "Explanation": "** The two input promises resolve with the values of 10 and -12 respectively. The returned promise should resolve with a value of 10 + -12 = -2."
            }
        ]
    },
    {
        "Title": "Sort By",
        "slug": "sort-by",
        "description": "Given an array `arr` and a function `fn`, return a sorted array `sortedArr`. You can assume\u00a0`fn`\u00a0only returns numbers and those numbers determine the sort order of\u00a0`sortedArr`. `sortedArray` must be sorted in **ascending order** by `fn` output.\n\n\nYou may assume that `fn` will never duplicate numbers for a given array.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "** arr = [5, 4, 1, 2, 3], fn = (x) => x",
                "Output": "** [1, 2, 3, 4, 5]",
                "Explanation": "** fn simply returns the number passed to it so the array is sorted in ascending order."
            },
            {
                "Input": "** arr = [{\"x\": 1}, {\"x\": 0}, {\"x\": -1}], fn = (d) => d.x",
                "Output": "** [{\"x\": -1}, {\"x\": 0}, {\"x\": 1}]",
                "Explanation": "** fn returns the value for the \"x\" key. So the array is sorted based on that value."
            },
            {
                "Input": "** arr = [[3, 4], [5, 2], [10, 1]], fn = (x) => x[1]",
                "Output": "** [[10, 1], [5, 2], [3, 4]]",
                "Explanation": "** arr is sorted in ascending order by number at index=1."
            }
        ]
    },
    {
        "Title": "Interval Cancellation",
        "slug": "interval-cancellation",
        "description": "Given a function `fn`, an array of arguments\u00a0`args`, and\u00a0an interval time `t`, return a cancel function `cancelFn`.\n\n\nAfter a delay of\u00a0`cancelTimeMs`, the returned cancel function\u00a0`cancelFn`\u00a0will be invoked.\n\n\n\n```\n\nsetTimeout(cancelFn, cancelTimeMs)\n\n```\n\nThe function `fn` should be called with `args` immediately and then called again every\u00a0`t` milliseconds\u00a0until\u00a0`cancelFn`\u00a0is called at `cancelTimeMs` ms.\n\n\n\u00a0\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "** fn = (x) => x * 2, args = [4], t = 35",
                "Output": "** \n[\n   {\"time\": 0, \"returned\": 8},\n   {\"time\": 35, \"returned\": 8},\n   {\"time\": 70, \"returned\": 8},\n   {\"time\": 105, \"returned\": 8},\n   {\"time\": 140, \"returned\": 8},\n   {\"time\": 175, \"returned\": 8}\n]",
                "Explanation": "** \nconst cancelTimeMs = 190;\nconst cancelFn = cancellable((x) => x * 2, [4], 35);\nsetTimeout(cancelFn, cancelTimeMs);\n\nEvery 35ms, fn(4) is called. Until t=190ms, then it is cancelled.\n1st fn call is at 0ms. fn(4) returns 8.\n2nd fn call is at 35ms. fn(4) returns 8.\n3rd fn call is at 70ms. fn(4) returns 8.\n4th fn call is at\u00a0105ms. fn(4) returns 8.\n5th fn call is at 140ms. fn(4) returns 8.\n6th fn call is at 175ms. fn(4) returns 8.\nCancelled at 190ms"
            },
            {
                "Input": "** fn = (x1, x2) => (x1 * x2), args = [2, 5], t = 30",
                "Output": "** \n[\n   {\"time\": 0, \"returned\": 10},\n   {\"time\": 30, \"returned\": 10},\n   {\"time\": 60, \"returned\": 10},\n   {\"time\": 90, \"returned\": 10},\n   {\"time\": 120, \"returned\": 10},\n   {\"time\": 150, \"returned\": 10}\n]",
                "Explanation": "** \nconst cancelTimeMs = 165; \nconst cancelFn = cancellable((x1, x2) => (x1 * x2), [2, 5], 30) \nsetTimeout(cancelFn, cancelTimeMs)\n\nEvery 30ms, fn(2, 5) is called. Until t=165ms, then it is cancelled.\n1st fn call is at 0ms\u00a0\n2nd fn call is at 30ms\u00a0\n3rd fn call is at 60ms\u00a0\n4th fn call is at\u00a090ms\u00a0\n5th fn call is at 120ms\u00a0\n6th fn call is at 150ms\nCancelled at 165ms"
            },
            {
                "Input": "** fn = (x1, x2, x3) => (x1 + x2 + x3), args = [5, 1, 3], t = 50",
                "Output": "** \n[\n   {\"time\": 0, \"returned\": 9},\n   {\"time\": 50, \"returned\": 9},\n   {\"time\": 100, \"returned\": 9},\n   {\"time\": 150, \"returned\": 9}\n]",
                "Explanation": "** \nconst cancelTimeMs = 180;\nconst cancelFn = cancellable((x1, x2, x3) => (x1 + x2 + x3), [5, 1, 3], 50)\nsetTimeout(cancelFn, cancelTimeMs)\n\nEvery 50ms, fn(5, 1, 3) is called. Until t=180ms, then it is cancelled. \n1st fn call is at 0ms\n2nd fn call is at 50ms\n3rd fn call is at 100ms\n4th fn call is at\u00a0150ms\nCancelled at 180ms"
            }
        ]
    },
    {
        "Title": "Calculator with Method Chaining",
        "slug": "calculator-with-method-chaining",
        "description": "Design a `Calculator` class. The class should provide the\u00a0mathematical operations of\u00a0addition, subtraction, multiplication, division, and exponentiation. It should also allow consecutive operations to be performed using method chaining.\u00a0The `Calculator` class constructor should accept a number\u00a0which serves as the\u00a0initial value of `result`.\n\n\nYour `Calculator`\u00a0class should have the following methods:\n\n\n `add` - This method adds the given number `value` to the\u00a0`result` and returns the updated `Calculator`.\n `subtract` -\u00a0This method subtracts the given number `value`\u00a0from the\u00a0`result` and returns the updated `Calculator`.\n `multiply` -\u00a0This method multiplies the `result`\u00a0 by the given number `value` and returns the updated `Calculator`.\n `divide` -\u00a0This method divides the `result` by the given number `value` and returns the updated `Calculator`. If the passed value is `0`, an error `\"Division by zero is not allowed\"` should be thrown.\n `power` -\u00a0This method raises the\u00a0`result` to the power of the given number `value` and returns the updated `Calculator`.\n `getResult` -\u00a0This method returns the `result`.\n\n\nSolutions within\u00a0`10-5`\u00a0of the actual result are considered correct.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "** \nactions = [\"Calculator\", \"add\", \"subtract\", \"getResult\"], \nvalues = [10, 5, 7]",
                "Output": "** 8",
                "Explanation": "** \nnew Calculator(10).add(5).subtract(7).getResult() // 10 + 5 - 7 = 8"
            },
            {
                "Input": "** \nactions = [\"Calculator\", \"multiply\", \"power\", \"getResult\"], \nvalues = [2, 5, 2]",
                "Output": "** 100",
                "Explanation": "** \nnew Calculator(2).multiply(5).power(2).getResult() // (2 * 5) ^ 2 = 100"
            },
            {
                "Input": "** \nactions = [\"Calculator\", \"divide\", \"getResult\"], \nvalues = [20, 0]",
                "Output": "** \"Division by zero is not allowed\"",
                "Explanation": "** \nnew Calculator(20).divide(0).getResult() // 20 / 0 \n\nThe error should be thrown because we cannot divide by zero."
            }
        ]
    },
    {
        "Title": "Is Object Empty",
        "slug": "is-object-empty",
        "description": "Given an object or an array, return if it is empty.\n\n\n An empty object contains no key-value pairs.\n An empty array contains no elements.\n\n\nYou may assume the object or array is the output of\u00a0`JSON.parse`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "** obj = {\"x\": 5, \"y\": 42}",
                "Output": "** false",
                "Explanation": "** The object has 2 key-value pairs so it is not empty."
            },
            {
                "Input": "** obj = {}",
                "Output": "** true",
                "Explanation": "** The object doesn't have any key-value pairs so it is empty."
            },
            {
                "Input": "** obj = [null, false, 0]",
                "Output": "** false",
                "Explanation": "** The array has 3 elements so it is not empty."
            }
        ]
    },
    {
        "Title": "Check if The Number is Fascinating",
        "slug": "check-if-the-number-is-fascinating",
        "description": "You are given an integer `n` that consists of exactly `3` digits.\n\n\nWe call the number `n` **fascinating** if, after the following modification, the resulting number contains all the digits from `1` to `9` **exactly** once and does not contain any `0`'s:\n\n\n **Concatenate** `n` with the numbers `2 * n` and `3 * n`.\n\n\nReturn `true` *if* `n` *is fascinating, or* `false` *otherwise*.\n\n\nConcatenating** two numbers means joining them together. For example, the concatenation of `121` and `371` is `121371`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "Math"
        ],
        "examples": [
            {
                "Input": "** n = 192",
                "Output": "** true",
                "Explanation": "** We concatenate the numbers n = 192 and 2 * n = 384 and 3 * n = 576. The resulting number is 192384576. This number contains all the digits from 1 to 9 exactly once."
            },
            {
                "Input": "** n = 100",
                "Output": "** false",
                "Explanation": "** We concatenate the numbers n = 100 and 2 * n = 200 and 3 * n = 300. The resulting number is 100200300. This number does not satisfy any of the conditions."
            }
        ]
    },
    {
        "Title": "Find the Longest Semi-Repetitive Substring",
        "slug": "find-the-longest-semi-repetitive-substring",
        "description": "You are given a digit string `s` that consists of digits from 0 to 9.\n\n\nA string is called **semi-repetitive** if there is **at most** one adjacent pair of the same digit. For example, `\"0010\"`, `\"002020\"`, `\"0123\"`, `\"2002\"`, and `\"54944\"` are semi-repetitive while the following are not: `\"00101022\"` (adjacent same digit pairs are 00 and 22), and `\"1101234883\"` (adjacent same digit pairs are 11 and 88).\n\n\nReturn the length of the **longest semi-repetitive substring** of `s`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** s = \"52233\"",
                "Output": "** 4",
                "Explanation": "**\n\n\nThe longest semi-repetitive substring is \"5223\". Picking the whole string \"52233\" has two adjacent same digit pairs 22 and 33, but at most one is allowed."
            },
            {
                "Input": "** s = \"5494\"",
                "Output": "** 4",
                "Explanation": "**\n\n\n`s` is a semi-repetitive string."
            },
            {
                "Input": "** s = \"1111111\"",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe longest semi-repetitive substring is \"11\". Picking the substring \"111\" has two adjacent same digit pairs, but at most one is allowed.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 50`\n* `'0' <= s[i] <= '9'`"
            }
        ]
    },
    {
        "Title": "Movement of Robots",
        "slug": "movement-of-robots",
        "description": "Some robots are standing on an infinite number line with their initial coordinates given by a **0-indexed** integer array `nums` and will start moving once given the command to move. The robots will move a unit distance each second.\n\n\nYou are given a string `s` denoting the direction in which robots will move on command. `'L'` means the robot will move towards the left side or negative side of the number line, whereas `'R'` means the robot will move towards the right side or positive side of the number line.\n\n\nIf two robots collide, they will start moving in opposite directions.\n\n\nReturn *the sum of distances between all the\u00a0pairs of robots* `d` *seconds after\u00a0the command.* Since the sum can be very large, return it modulo `109 + 7`.\n\n\nNote:** \n\n\n For two robots at the index `i` and `j`, pair `(i,j)` and pair `(j,i)` are considered the same pair.\n When robots collide, they **instantly change** their directions without wasting any time.\n Collision happens\u00a0when two robots share the same place in a\u00a0moment.\n\t+ For example, if a robot is positioned in 0 going to the right and another is positioned in 2 going to the left, the next second they'll be both in 1 and they will change direction and the next second the first one will be in 0, heading left, and another will be in 2, heading right.\n\t+ For example,\u00a0if a robot is positioned in 0 going to the right and another is positioned in 1\u00a0going to the left, the next second the first one will be in 0, heading left, and another will be in 1, heading right.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Brainteaser",
            "Sorting",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [-2,0,2], s = \"RLL\", d = 3",
                "Output": "** 8",
                "Explanation": "** \nAfter 1 second, the positions are [-1,-1,1]. Now, the robot at index 0 will move left, and the robot at index 1 will move right.\nAfter 2 seconds, the positions are [-2,0,0]. Now, the robot at index 1 will move left, and the robot at index 2 will move right.\nAfter 3 seconds, the positions are [-3,-1,1].\nThe distance between the robot at index 0 and 1 is abs(-3 - (-1)) = 2.\nThe distance between the robot at index 0 and 2 is abs(-3 - 1) = 4.\nThe distance between the robot at index 1 and 2 is abs(-1 - 1) = 2.\nThe sum of the pairs of all distances = 2 + 4 + 2 = 8."
            },
            {
                "Input": "** nums = [1,0], s = \"RL\", d = 2",
                "Output": "** 5",
                "Explanation": "** \nAfter 1 second, the positions are [2,-1].\nAfter 2 seconds, the positions are [3,-2].\nThe distance between the two robots is abs(-2 - 3) = 5."
            }
        ]
    },
    {
        "Title": "Find a Good Subset of the Matrix",
        "slug": "find-a-good-subset-of-the-matrix",
        "description": "You are given a **0-indexed** `m x n` binary matrix `grid`.\n\n\nLet us call a **non-empty** subset of rows **good** if the sum of each column of the subset is at most half of the length of the subset.\n\n\nMore formally, if the length of the chosen subset of rows is `k`, then the sum of each column should be at most `floor(k / 2)`.\n\n\nReturn *an integer array that contains row indices of a good subset sorted in **ascending** order.\n\n\nIf there are multiple good subsets, you can return any of them. If there are no good subsets, return an empty array.\n\n\nA **subset** of rows of the matrix `grid` is any matrix that can be obtained by deleting some (possibly none or all) rows from `grid`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Bit Manipulation",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
                "Output": "** [0,1]",
                "Explanation": "** We can choose the 0th and 1st rows to create a good subset of rows.\nThe length of the chosen subset is 2.\n- The sum of the 0th\u00a0column is 0 + 0 = 0, which is at most half of the length of the subset.\n- The sum of the 1st\u00a0column is 1 + 0 = 1, which is at most half of the length of the subset.\n- The sum of the 2nd\u00a0column is 1 + 0 = 1, which is at most half of the length of the subset.\n- The sum of the 3rd\u00a0column is 0 + 1 = 1, which is at most half of the length of the subset."
            },
            {
                "Input": "** grid = [[0]]",
                "Output": "** [0]",
                "Explanation": "** We can choose the 0th row to create a good subset of rows.\nThe length of the chosen subset is 1.\n- The sum of the 0th\u00a0column is 0, which is at most half of the length of the subset."
            },
            {
                "Input": "** grid = [[1,1,1],[1,1,1]]",
                "Output": "** []",
                "Explanation": "** It is impossible to choose any subset of rows to create a good subset."
            }
        ]
    },
    {
        "Title": "Neither Minimum nor Maximum",
        "slug": "neither-minimum-nor-maximum",
        "description": "Given an integer array `nums` containing **distinct** **positive** integers, find and return **any** number from the array that is neither the **minimum** nor the **maximum** value in the array, or **`-1`** if there is no such number.\n\n\nReturn *the selected integer.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [3,2,1,4]",
                "Output": "** 2",
                "Explanation": "** In this example, the minimum value is 1 and the maximum value is 4. Therefore, either 2 or 3 can be valid answers."
            },
            {
                "Input": "** nums = [1,2]",
                "Output": "** -1",
                "Explanation": "** Since there is no number in nums that is neither the maximum nor the minimum, we cannot select a number that satisfies the given condition. Therefore, there is no answer."
            },
            {
                "Input": "** nums = [2,1,3]",
                "Output": "** 2",
                "Explanation": "** Since 2 is neither the maximum nor the minimum value in nums, it is the only valid answer."
            }
        ]
    },
    {
        "Title": "Lexicographically Smallest String After Substring Operation",
        "slug": "lexicographically-smallest-string-after-substring-operation",
        "description": "Given a string `s` consisting of lowercase English letters. Perform the following operation:\n\n\n Select any non-empty substring then replace every letter of the substring with the preceding letter of the English alphabet. For example, 'b' is converted to 'a', and 'a' is converted to 'z'.\n\n\nReturn the **lexicographically smallest** string **after performing the operation**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"cbabc\"",
                "Output": "** \"baabc\"",
                "Explanation": "**\n\n\nPerform the operation on the substring starting at index 0, and ending at index 1 inclusive."
            },
            {
                "Input": "** s = \"aa\"",
                "Output": "** \"az\"",
                "Explanation": "**\n\n\nPerform the operation on the last letter."
            },
            {
                "Input": "** s = \"acbbc\"",
                "Output": "** \"abaab\"",
                "Explanation": "**\n\n\nPerform the operation on the substring starting at index 1, and ending at index 4 inclusive."
            },
            {
                "Input": "** s = \"leetcode\"",
                "Output": "** \"kddsbncd\"",
                "Explanation": "**\n\n\nPerform the operation on the entire string.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 3 * 105`\n* `s` consists of lowercase English letters\n\n\nHints:\n    0. When a character is replaced by the one that comes before it on the alphabet, it makes the string lexicographically smaller, except for \u2018a'.\n    1. Find the leftmost substring that doesn\u2019t contain the character 'a' and change all characters in it.\nSimilarQuestions: [848, 1625, 3106, 3081]"
            }
        ]
    },
    {
        "Title": "Collecting Chocolates",
        "slug": "collecting-chocolates",
        "description": "You are given a **0-indexed** integer array `nums` of size `n` representing the cost of collecting different chocolates. The cost of collecting the chocolate at the index `i`\u00a0is `nums[i]`. Each chocolate is of a different type, and initially, the chocolate at the index\u00a0`i`\u00a0is of `ith` type.\n\n\nIn one operation, you can do the following with an incurred **cost** of `x`:\n\n\n Simultaneously change the chocolate of `ith` type to `((i + 1) mod n)th` type for all chocolates.\n\n\nReturn *the minimum cost to collect chocolates of all types, given that you can perform as many operations as you would like.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** nums = [20,1,15], x = 5",
                "Output": "** 13",
                "Explanation": "** Initially, the chocolate types are [0,1,2]. We will buy the 1st\u00a0type of chocolate at a cost of 1.\nNow, we will perform the operation at a cost of 5, and the types of chocolates will become [1,2,0]. We will buy the 2ndtype of chocolate at a cost of 1.\nNow, we will again perform the operation at a cost of 5, and the chocolate types will become [2,0,1]. We will buy the 0th type of chocolate at a cost of 1. \nThus, the total cost will become (1 + 5 + 1 + 5 + 1) = 13. We can prove that this is optimal."
            },
            {
                "Input": "** nums = [1,2,3], x = 4",
                "Output": "** 6",
                "Explanation": "** We will collect all three types of chocolates at their own price without performing any operations. Therefore, the total cost is 1 + 2 + 3 = 6."
            }
        ]
    },
    {
        "Title": "Maximum Sum Queries",
        "slug": "maximum-sum-queries",
        "description": "You are given two **0-indexed** integer arrays `nums1` and `nums2`, each of length `n`, and a **1-indexed 2D array** `queries` where `queries[i] = [xi, yi]`.\n\n\nFor the `ith` query, find the **maximum value** of `nums1[j] + nums2[j]` among all indices `j` `(0 <= j < n)`, where `nums1[j] >= xi` and `nums2[j] >= yi`, or **-1** if there is no `j` satisfying the constraints.\n\n\nReturn *an array* `answer` *where* `answer[i]` *is the answer to the* `ith` *query.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Stack",
            "Binary Indexed Tree",
            "Segment Tree",
            "Sorting",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** nums1 = [4,3,1,2], nums2 = [2,4,9,5], queries = [[4,1],[1,3],[2,5]]",
                "Output": "** [6,10,7]",
                "Explanation": "** \nFor the 1st query xi = 4\u00a0and\u00a0yi = 1, we can select index\u00a0j = 0\u00a0since\u00a0nums1[j] >= 4\u00a0and\u00a0nums2[j] >= 1. The sum\u00a0nums1[j] + nums2[j]\u00a0is 6, and we can show that 6 is the maximum we can obtain.\n\nFor the 2nd query xi = 1\u00a0and\u00a0yi = 3, we can select index\u00a0j = 2\u00a0since\u00a0nums1[j] >= 1\u00a0and\u00a0nums2[j] >= 3. The sum\u00a0nums1[j] + nums2[j]\u00a0is 10, and we can show that 10 is the maximum we can obtain. \n\nFor the 3rd query xi = 2\u00a0and\u00a0yi = 5, we can select index\u00a0j = 3\u00a0since\u00a0nums1[j] >= 2\u00a0and\u00a0nums2[j] >= 5. The sum\u00a0nums1[j] + nums2[j]\u00a0is 7, and we can show that 7 is the maximum we can obtain.\n\nTherefore, we return\u00a0[6,10,7]."
            },
            {
                "Input": "** nums1 = [3,2,5], nums2 = [2,3,4], queries = [[4,4],[3,2],[1,1]]",
                "Output": "** [9,9,9]",
                "Explanation": "** For this example, we can use index\u00a0j = 2\u00a0for all the queries since it satisfies the constraints for each query."
            },
            {
                "Input": "** nums1 = [2,1], nums2 = [2,3], queries = [[3,3]]",
                "Output": "** [-1]",
                "Explanation": "** There is one query in this example with xi = 3 and yi = 3. For every index, j, either nums1[j] < xi or nums2[j] < yi. Hence, there is no solution."
            }
        ]
    },
    {
        "Title": "Total Distance Traveled",
        "slug": "total-distance-traveled",
        "description": "A truck has two fuel tanks. You are given two integers, `mainTank` representing the fuel present in the main tank in liters and `additionalTank` representing the fuel present in the additional tank in liters.\n\n\nThe truck has a mileage of `10` km per liter. Whenever `5` liters of fuel get\u00a0used up in the main tank,\u00a0if the additional tank has at least `1` liters of fuel, `1` liters of fuel will be transferred from the additional tank to the main tank.\n\n\nReturn *the maximum distance which can be traveled.\n\n\nNote:** Injection from the additional tank is not continuous. It happens suddenly and immediately for every 5 liters consumed.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** mainTank = 5, additionalTank = 10",
                "Output": "** 60",
                "Explanation": "** \nAfter spending 5 litre of fuel, fuel remaining is (5 - 5 + 1) = 1 litre and distance traveled is 50km.\nAfter spending another 1 litre of fuel, no fuel gets injected in the main tank and the main tank becomes empty.\nTotal distance traveled is 60km."
            },
            {
                "Input": "** mainTank = 1, additionalTank = 2",
                "Output": "** 10",
                "Explanation": "** \nAfter spending 1 litre of fuel, the main tank becomes empty.\nTotal distance traveled is 10km."
            }
        ]
    },
    {
        "Title": "Find the Value of the Partition",
        "slug": "find-the-value-of-the-partition",
        "description": "You are given a **positive** integer array `nums`.\n\n\nPartition `nums` into two arrays,\u00a0`nums1` and `nums2`, such that:\n\n\n Each element of the array `nums` belongs to either the array `nums1` or the array `nums2`.\n Both arrays are **non-empty**.\n The value of the partition is **minimized**.\n\n\nThe value of the partition is `|max(nums1) - min(nums2)|`.\n\n\nHere, `max(nums1)` denotes the maximum element of the array `nums1`, and `min(nums2)` denotes the minimum element of the array `nums2`.\n\n\nReturn *the integer denoting the value of such partition*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,2,4]",
                "Output": "** 1",
                "Explanation": "** We can partition the array nums into nums1 = [1,2] and nums2 = [3,4].\n- The maximum element of the array nums1 is equal to 2.\n- The minimum element of the array nums2 is equal to 3.\nThe value of the partition is |2 - 3| = 1. \nIt can be proven that 1 is the minimum value out of all partitions."
            },
            {
                "Input": "** nums = [100,1,10]",
                "Output": "** 9",
                "Explanation": "** We can partition the array nums into nums1 = [10] and nums2 = [100,1].\n- The maximum element of the array nums1 is equal to 10.\n- The minimum element of the array nums2 is equal to 1.\nThe value of the partition is |10 - 1| = 9.\nIt can be proven that 9 is the minimum value out of all partitions."
            }
        ]
    },
    {
        "Title": "Special Permutations",
        "slug": "special-permutations",
        "description": "You are given a\u00a0**0-indexed**\u00a0integer array\u00a0`nums`\u00a0containing\u00a0`n`\u00a0**distinct** positive integers. A permutation of\u00a0`nums`\u00a0is called special if:\n\n\n For all indexes\u00a0`0 <= i < n - 1`, either\u00a0`nums[i] % nums[i+1] == 0`\u00a0or\u00a0`nums[i+1] % nums[i] == 0`.\n\n\nReturn\u00a0*the total number of special permutations.*As the answer could be large, return it\u00a0**modulo**`109+ 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** nums = [2,3,6]",
                "Output": "** 2",
                "Explanation": "** [3,6,2] and [2,6,3] are the two special permutations of nums."
            },
            {
                "Input": "** nums = [1,4,3]",
                "Output": "** 2",
                "Explanation": "** [3,1,4] and [4,1,3] are the two special permutations of nums."
            }
        ]
    },
    {
        "Title": "Painting the Walls",
        "slug": "painting-the-walls",
        "description": "You are given two **0-indexed** integer arrays,\u00a0`cost` and `time`, of size `n` representing the costs and the time taken to paint `n` different walls respectively. There are two painters available:\n\n\n A**paid painter**\u00a0that paints the `ith` wall in `time[i]` units of time and takes `cost[i]` units of money.\n A**free painter** that paints\u00a0**any** wall in `1` unit of time at a cost of `0`. But the\u00a0free painter can only be used if the paid painter is already **occupied**.\n\n\nReturn *the minimum amount of money required to paint the* `n`*walls.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** cost = [1,2,3,2], time = [1,2,3,2]",
                "Output": "** 3",
                "Explanation": "** The walls at index 0 and 1 will be painted by the paid painter, and it will take 3 units of time; meanwhile, the free painter will paint the walls at index 2 and 3, free of cost in 2 units of time. Thus, the total cost is 1 + 2 = 3."
            },
            {
                "Input": "** cost = [2,3,4,2], time = [1,1,1,1]",
                "Output": "** 4",
                "Explanation": "** The walls at index 0 and 3 will be painted by the paid painter, and it will take 2 units of time; meanwhile, the free painter will paint the walls at index 1 and 2, free of cost in 2 units of time. Thus, the total cost is 2 + 2 = 4."
            }
        ]
    },
    {
        "Title": "Find Maximum Number of String Pairs",
        "slug": "find-maximum-number-of-string-pairs",
        "description": "You are given a **0-indexed** array `words` consisting of **distinct** strings.\n\n\nThe string `words[i]` can be paired with the string `words[j]` if:\n\n\n The string `words[i]` is equal to the reversed string of `words[j]`.\n `0 <= i < j < words.length`.\n\n\nReturn *the **maximum** number of pairs that can be formed from the array* `words`*.\n\n\nNote that\u00a0each string can belong in\u00a0**at most one** pair.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"]",
                "Output": "** 2",
                "Explanation": "** In this example, we can form 2 pair of strings in the following way:\n- We pair the 0th string with the 2nd string, as the reversed string of word[0] is \"dc\" and is equal to words[2].\n- We pair the 1st string with the 3rd string, as the reversed string of word[1] is \"ca\" and is equal to words[3].\nIt can be proven that 2 is the maximum number of pairs that can be formed."
            },
            {
                "Input": "** words = [\"ab\",\"ba\",\"cc\"]",
                "Output": "** 1",
                "Explanation": "** In this example, we can form 1 pair of strings in the following way:\n- We pair the 0th string with the 1st string, as the reversed string of words[1] is \"ab\" and is equal to words[0].\nIt can be proven that 1 is the maximum number of pairs that can be formed."
            },
            {
                "Input": "** words = [\"aa\",\"ab\"]",
                "Output": "** 0",
                "Explanation": "** In this example, we are unable to form any pair of strings."
            }
        ]
    },
    {
        "Title": "Construct the Longest New String",
        "slug": "construct-the-longest-new-string",
        "description": "You are given three integers `x`, `y`, and `z`.\n\n\nYou have `x` strings equal to `\"AA\"`, `y` strings equal to `\"BB\"`, and `z` strings equal to `\"AB\"`. You want to choose some (possibly all or none) of these strings and concatenate them in some order to form a new string. This new string must not contain `\"AAA\"` or `\"BBB\"` as a substring.\n\n\nReturn *the maximum possible length of the new string*.\n\n\nA **substring** is a contiguous **non-empty** sequence of characters within a string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Greedy",
            "Brainteaser"
        ],
        "examples": [
            {
                "Input": "** x = 2, y = 5, z = 1",
                "Output": "** 12",
                "Explanation": "** We can concactenate the strings \"BB\", \"AA\", \"BB\", \"AA\", \"BB\", and \"AB\" in that order. Then, our new string is \"BBAABBAABBAB\". \nThat string has length 12, and we can show that it is impossible to construct a string of longer length."
            },
            {
                "Input": "** x = 3, y = 2, z = 2",
                "Output": "** 14",
                "Explanation": "** We can concactenate the strings \"AB\", \"AB\", \"AA\", \"BB\", \"AA\", \"BB\", and \"AA\" in that order. Then, our new string is \"ABABAABBAABBAA\". \nThat string has length 14, and we can show that it is impossible to construct a string of longer length."
            }
        ]
    },
    {
        "Title": "Decremental String Concatenation",
        "slug": "decremental-string-concatenation",
        "description": "You are given a **0-indexed** array `words` containing `n` strings.\n\n\nLet's define a **join** operation `join(x, y)` between two strings `x` and `y` as concatenating them into `xy`. However, if the last character of `x` is equal to the first character of `y`, one of them is **deleted**.\n\n\nFor example `join(\"ab\", \"ba\") = \"aba\"` and `join(\"ab\", \"cde\") = \"abcde\"`.\n\n\nYou are to perform `n - 1` **join** operations. Let `str0 = words[0]`. Starting from `i = 1` up to `i = n - 1`, for the `ith` operation, you can do one of the following:\n\n\n Make `stri = join(stri - 1, words[i])`\n Make `stri = join(words[i], stri - 1)`\n\n\nYour task is to **minimize** the length of `strn - 1`.\n\n\nReturn *an integer denoting the minimum possible length of* `strn - 1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** words = [\"aa\",\"ab\",\"bc\"]",
                "Output": "** 4",
                "Explanation": "** In this example, we can perform join operations in the following order to minimize the length of str2: \nstr0 = \"aa\"\nstr1 = join(str0, \"ab\") = \"aab\"\nstr2 = join(str1, \"bc\") = \"aabc\" \nIt can be shown that the minimum possible length of str2 is 4."
            },
            {
                "Input": "** words = [\"ab\",\"b\"]",
                "Output": "** 2",
                "Explanation": "** In this example, str0 = \"ab\", there are two ways to get str1: \njoin(str0, \"b\") = \"ab\" or join(\"b\", str0) = \"bab\". \nThe first string, \"ab\", has the minimum length. Hence, the answer is 2."
            },
            {
                "Input": "** words = [\"aaa\",\"c\",\"aba\"]",
                "Output": "** 6",
                "Explanation": "** In this example, we can perform join operations in the following order to minimize the length of str2: \nstr0 = \"aaa\"\nstr1 = join(str0, \"c\") = \"aaac\"\nstr2 = join(\"aba\", str1) = \"abaaac\"\nIt can be shown that the minimum possible length of str2 is 6."
            }
        ]
    },
    {
        "Title": "Count Zero Request Servers",
        "slug": "count-zero-request-servers",
        "description": "You are given an integer `n` denoting the total number of servers and a **2D** **0-indexed** integer array `logs`, where `logs[i] = [server_id, time]` denotes that the server with id `server_id` received a request at time `time`.\n\n\nYou are also given an integer `x` and a **0-indexed** integer array `queries`.\n\n\nReturn *a **0-indexed** integer array* `arr` *of length* `queries.length` *where* `arr[i]` *represents the number of servers that **did not receive** any requests during the time interval* `[queries[i] - x, queries[i]]`.\n\n\nNote that the time intervals are inclusive.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Sliding Window",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** n = 3, logs = [[1,3],[2,6],[1,5]], x = 5, queries = [10,11]",
                "Output": "** [1,2]",
                "Explanation": "** \nFor queries[0]: The servers with ids 1 and 2 get requests in the duration of [5, 10]. Hence, only server 3 gets zero requests.\nFor queries[1]: Only the server with id 2 gets a request in duration of [6,11]. Hence, the servers with ids 1 and 3 are the only servers that do not receive any requests during that time period."
            },
            {
                "Input": "** n = 3, logs = [[2,4],[2,1],[1,2],[3,1]], x = 2, queries = [3,4]",
                "Output": "** [0,1]",
                "Explanation": "** \nFor queries[0]: All servers get at least one request in the duration of [1, 3].\nFor queries[1]: Only server with id 3 gets no request in the duration [2,4]."
            }
        ]
    },
    {
        "Title": "Number of Beautiful Pairs",
        "slug": "number-of-beautiful-pairs",
        "description": "You are given a **0-indexed** integer array `nums`. A pair of indices `i`, `j` where `0 <=\u00a0i < j < nums.length` is called beautiful if the **first digit** of `nums[i]` and the **last digit** of `nums[j]` are **coprime**.\n\n\nReturn *the total number of beautiful pairs in* `nums`.\n\n\nTwo integers `x` and `y` are **coprime** if there is no integer greater than 1 that divides both of them. In other words, `x` and `y` are coprime if `gcd(x, y) == 1`, where `gcd(x, y)` is the **greatest common divisor** of `x` and `y`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [2,5,1,4]",
                "Output": "** 5",
                "Explanation": "** There are 5 beautiful pairs in nums:\nWhen i = 0 and j = 1: the first digit of nums[0] is 2, and the last digit of nums[1] is 5. We can confirm that 2 and 5 are coprime, since gcd(2,5) == 1.\nWhen i = 0 and j = 2: the first digit of nums[0] is 2, and the last digit of nums[2] is 1. Indeed, gcd(2,1) == 1.\nWhen i = 1 and j = 2: the first digit of nums[1] is 5, and the last digit of nums[2] is 1. Indeed, gcd(5,1) == 1.\nWhen i = 1 and j = 3: the first digit of nums[1] is 5, and the last digit of nums[3] is 4. Indeed, gcd(5,4) == 1.\nWhen i = 2 and j = 3: the first digit of nums[2] is 1, and the last digit of nums[3] is 4. Indeed, gcd(1,4) == 1.\nThus, we return 5."
            },
            {
                "Input": "** nums = [11,21,12]",
                "Output": "** 2",
                "Explanation": "** There are 2 beautiful pairs:\nWhen i = 0 and j = 1: the first digit of nums[0] is 1, and the last digit of nums[1] is 1. Indeed, gcd(1,1) == 1.\nWhen i = 0 and j = 2: the first digit of nums[0] is 1, and the last digit of nums[2] is 2. Indeed, gcd(1,2) == 1.\nThus, we return 2."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Make the Integer Zero",
        "slug": "minimum-operations-to-make-the-integer-zero",
        "description": "You are given two integers `num1` and `num2`.\n\n\nIn one operation, you can choose integer `i` in the range `[0, 60]` and subtract `2i + num2` from `num1`.\n\n\nReturn *the integer denoting the **minimum** number of operations needed to make* `num1` *equal to* `0`.\n\n\nIf it is impossible to make `num1` equal to `0`, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Bit Manipulation",
            "Brainteaser"
        ],
        "examples": [
            {
                "Input": "** num1 = 3, num2 = -2",
                "Output": "** 3",
                "Explanation": "** We can make 3 equal to 0 with the following operations:\n- We choose i = 2 and substract 22 + (-2) from 3, 3 - (4 + (-2)) = 1.\n- We choose i = 2 and substract 22\u00a0+ (-2) from 1, 1 - (4 + (-2)) = -1.\n- We choose i = 0 and substract 20\u00a0+ (-2) from -1, (-1) - (1 + (-2)) = 0.\nIt can be proven, that 3 is the minimum number of operations that we need to perform."
            },
            {
                "Input": "** num1 = 5, num2 = 7",
                "Output": "** -1",
                "Explanation": "** It can be proven, that it is impossible to make 5 equal to 0 with the given operation."
            }
        ]
    },
    {
        "Title": "Ways to Split Array Into Good Subarrays",
        "slug": "ways-to-split-array-into-good-subarrays",
        "description": "You are given a binary array `nums`.\n\n\nA subarray of an array is **good** if it contains **exactly** **one** element with the value `1`.\n\n\nReturn *an integer denoting the number of ways to split the array* `nums` *into **good** subarrays*. As the number may be too large, return it **modulo** `109 + 7`.\n\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [0,1,0,0,1]",
                "Output": "** 3",
                "Explanation": "** There are 3 ways to split nums into good subarrays:\n- [0,1] [0,0,1]\n- [0,1,0] [0,1]\n- [0,1,0,0] [1]"
            },
            {
                "Input": "** nums = [0,1,0]",
                "Output": "** 1",
                "Explanation": "** There is 1 way to split nums into good subarrays:\n- [0,1,0]"
            }
        ]
    },
    {
        "Title": "Robot Collisions",
        "slug": "robot-collisions",
        "description": "There are `n` **1-indexed** robots, each having a position on a line, health, and movement direction.\n\n\nYou are given **0-indexed** integer arrays `positions`, `healths`, and a string `directions` (`directions[i]` is either **'L'** for **left** or **'R'** for **right**). All integers in `positions` are **unique**.\n\n\nAll robots start moving on the line **simultaneously** at the **same speed** in their given directions. If two robots ever share the same position while moving, they will **collide**.\n\n\nIf two robots collide, the robot with **lower health** is **removed** from the line, and the health of the other robot **decreases** **by one**. The surviving robot continues in the **same** direction it was going. If both robots have the **same** health, they are bothremoved from the line.\n\n\nYour task is to determine the **health** of the robots that survive the collisions, in the same **order** that the robots were given,i.e. final heath of robot 1 (if survived), final health of robot 2 (if survived), and so on. If there are no survivors, return an empty array.\n\n\nReturn *an array containing the health of the remaining robots (in the order they were given in the input), after no further collisions can occur.\n\n\nNote:** The positions may be unsorted.\n\n\n\u00a0\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Stack",
            "Sorting",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** positions = [5,4,3,2,1], healths = [2,17,9,15,10], directions = \"RRRRR\"",
                "Output": "** [2,17,9,15,10]",
                "Explanation": "** No collision occurs in this example, since all robots are moving in the same direction. So, the health of the robots in order from the first robot is returned, [2, 17, 9, 15, 10]."
            },
            {
                "Input": "** positions = [3,5,2,6], healths = [10,10,15,12], directions = \"RLRL\"",
                "Output": "** [14]",
                "Explanation": "** There are 2 collisions in this example. Firstly, robot 1 and robot 2 will collide, and since both have the same health, they will be removed from the line. Next, robot 3 and robot 4 will collide and since robot 4's health is smaller, it gets removed, and robot 3's health becomes 15 - 1 = 14. Only robot 3 remains, so we return [14]."
            },
            {
                "Input": "** positions = [1,2,5,6], healths = [10,10,11,11], directions = \"RLRL\"",
                "Output": "** []",
                "Explanation": "** Robot 1 and robot 2 will collide and since both have the same health, they are both removed. Robot 3 and 4 will collide and since both have the same health, they are both removed. So, we return an empty array, []."
            }
        ]
    },
    {
        "Title": "Longest Even Odd Subarray With Threshold",
        "slug": "longest-even-odd-subarray-with-threshold",
        "description": "You are given a **0-indexed** integer array `nums` and an integer `threshold`.\n\n\nFind the length of the **longest subarray** of `nums` starting at index `l` and ending at index `r` `(0 <= l <= r < nums.length)` that satisfies the following conditions:\n\n\n `nums[l] % 2 == 0`\n For all indices `i` in the range `[l, r - 1]`, `nums[i] % 2 != nums[i + 1] % 2`\n For all indices `i` in the range `[l, r]`, `nums[i] <= threshold`\n\n\nReturn *an integer denoting the length of the longest such subarray.\n\n\nNote:** A **subarray** is a contiguous non-empty sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [3,2,5,4], threshold = 5",
                "Output": "** 3",
                "Explanation": "** In this example, we can select the subarray that starts at l = 1 and ends at r = 3 => [2,5,4]. This subarray satisfies the conditions.\nHence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length."
            },
            {
                "Input": "** nums = [1,2], threshold = 2",
                "Output": "** 1",
                "Explanation": "** In this example, we can select the subarray that starts at l = 1 and ends at r = 1 => [2]. \nIt satisfies all the conditions and we can show that 1 is the maximum possible achievable length."
            },
            {
                "Input": "** nums = [2,3,4,5], threshold = 4",
                "Output": "** 3",
                "Explanation": "** In this example, we can select the subarray that starts at l = 0 and ends at r = 2 => [2,3,4]. \nIt satisfies all the conditions.\nHence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length."
            }
        ]
    },
    {
        "Title": "Prime Pairs With Target Sum",
        "slug": "prime-pairs-with-target-sum",
        "description": "You are given an integer `n`. We say that two integers `x` and `y` form a prime number pair if:\n\n\n `1 <= x <= y <= n`\n `x + y == n`\n `x` and `y` are prime numbers\n\n\nReturn *the 2D sorted list of prime number pairs* `[xi, yi]`. The list should be sorted in **increasing** order of `xi`. If there are no prime number pairs at all, return *an empty array*.\n\n\nNote:** A prime number is a natural number greater than `1` with only two factors, itself and `1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Enumeration",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** n = 10",
                "Output": "** [[3,7],[5,5]]",
                "Explanation": "** In this example, there are two prime pairs that satisfy the criteria. \nThese pairs are [3,7] and [5,5], and we return them in the sorted order as described in the problem statement."
            },
            {
                "Input": "** n = 2",
                "Output": "** []",
                "Explanation": "** We can show that there is no prime number pair that gives a sum of 2, so we return an empty array."
            }
        ]
    },
    {
        "Title": "Continuous Subarrays",
        "slug": "continuous-subarrays",
        "description": "You are given a **0-indexed** integer array `nums`. A subarray of `nums` is called **continuous** if:\n\n\n Let `i`, `i + 1`, ..., `j`be the indices in the subarray. Then, for each pair of indices `i <= i1, i2 <= j`, `0 <= |nums[i1] - nums[i2]| <= 2`.\n\n\nReturn *the total number of **continuous** subarrays.\n\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Queue",
            "Sliding Window",
            "Heap (Priority Queue)",
            "Ordered Set",
            "Monotonic Queue"
        ],
        "examples": [
            {
                "Input": "** nums = [5,4,2,4]",
                "Output": "** 8",
                "Explanation": "** \nContinuous subarray of size 1: [5], [4], [2], [4].\nContinuous subarray of size 2: [5,4], [4,2], [2,4].\nContinuous subarray of size 3: [4,2,4].\nThereare no subarrys of size 4.\nTotal continuous subarrays = 4 + 3 + 1 = 8.\nIt can be shown that there are no more continuous subarrays."
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 6",
                "Explanation": "** \nContinuous subarray of size 1: [1], [2], [3].\nContinuous subarray of size 2: [1,2], [2,3].\nContinuous subarray of size 3: [1,2,3].\nTotal continuous subarrays = 3 + 2 + 1 = 6."
            }
        ]
    },
    {
        "Title": "Sum of Imbalance Numbers of All Subarrays",
        "slug": "sum-of-imbalance-numbers-of-all-subarrays",
        "description": "The **imbalance number** of a **0-indexed** integer array `arr` of length `n` is defined as the number of indices in `sarr = sorted(arr)` such that:\n\n\n `0 <= i < n - 1`, and\n `sarr[i+1] - sarr[i] > 1`\n\n\nHere, `sorted(arr)` is the function that returns the sorted version of `arr`.\n\n\nGiven a **0-indexed** integer array `nums`, return *the **sum of imbalance numbers** of all its **subarrays***.\n\n\nA **subarray** is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** nums = [2,3,1,4]",
                "Output": "** 3",
                "Explanation": "** There are 3 subarrays with non-zeroimbalance numbers:\n- Subarray [3, 1] with an imbalance number of 1.\n- Subarray [3, 1, 4] with an imbalance number of 1.\n- Subarray [1, 4] with an imbalance number of 1.\nThe imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 3."
            },
            {
                "Input": "** nums = [1,3,3,3,5]",
                "Output": "** 8",
                "Explanation": "** There are 7 subarrays with non-zero imbalance numbers:\n- Subarray [1, 3] with an imbalance number of 1.\n- Subarray [1, 3, 3] with an imbalance number of 1.\n- Subarray [1, 3, 3, 3] with an imbalance number of 1.\n- Subarray [1, 3, 3, 3, 5] with an imbalance number of 2. \n- Subarray [3, 3, 3, 5] with an imbalance number of 1. \n- Subarray [3, 3, 5] with an imbalance number of 1.\n- Subarray [3, 5] with an imbalance number of 1.\nThe imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 8."
            }
        ]
    },
    {
        "Title": "Longest Alternating Subarray",
        "slug": "longest-alternating-subarray",
        "description": "You are given a **0-indexed** integer array `nums`. A subarray `s` of length `m` is called **alternating** if:\n\n\n `m` is greater than `1`.\n `s1 = s0 + 1`.\n The **0-indexed** subarray `s` looks like `[s0, s1, s0, s1,...,s(m-1) % 2]`. In other words, `s1 - s0 = 1`, `s2 - s1 = -1`, `s3 - s2 = 1`, `s4 - s3 = -1`, and so on up to `s[m - 1] - s[m - 2] = (-1)m`.\n\n\nReturn *the maximum length of all **alternating** subarrays present in* `nums` *or* `-1` *if no such subarray exists**.\n\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** nums = [2,3,4,3,4]",
                "Output": "** 4",
                "Explanation": "** The alternating subarrays are [3,4], [3,4,3], and [3,4,3,4]. The longest of these is [3,4,3,4], which is of length 4."
            },
            {
                "Input": "** nums = [4,5,6]",
                "Output": "** 2",
                "Explanation": "** [4,5] and [5,6] are the only two alternating subarrays. They are both of length 2."
            }
        ]
    },
    {
        "Title": "Relocate Marbles",
        "slug": "relocate-marbles",
        "description": "You are given a **0-indexed** integer array `nums` representing the initial positions of some marbles. You are also given two **0-indexed** integer arrays `moveFrom` and `moveTo` of **equal** length.\n\n\nThroughout `moveFrom.length` steps, you will change the positions of the marbles. On the `ith` step, you will move **all** marbles at position `moveFrom[i]` to position `moveTo[i]`.\n\n\nAfter completing all the steps, return *the sorted list of **occupied** positions*.\n\n\nNotes:\n\n\n We call a position **occupied** if there is at least one marble in that position.\n There may be multiple marbles in a single position.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [1,6,7,8], moveFrom = [1,7,2], moveTo = [2,9,5]",
                "Output": "** [5,6,8,9]",
                "Explanation": "** Initially, the marbles are at positions 1,6,7,8.\nAt the i = 0th step, we move the marbles at position 1 to position 2. Then, positions 2,6,7,8 are occupied.\nAt the i = 1st step, we move the marbles at position 7 to position 9. Then, positions 2,6,8,9 are occupied.\nAt the i = 2nd step, we move the marbles at position 2 to position 5. Then, positions 5,6,8,9 are occupied.\nAt the end, the final positions containing at least one marbles are [5,6,8,9]."
            },
            {
                "Input": "** nums = [1,1,3,3], moveFrom = [1,3], moveTo = [2,2]",
                "Output": "** [2]",
                "Explanation": "** Initially, the marbles are at positions [1,1,3,3].\nAt the i = 0th step, we move all the marbles at position 1 to position 2. Then, the marbles are at positions [2,2,3,3].\nAt the i = 1st step, we move all the marbles at position 3 to position 2. Then, the marbles are at positions [2,2,2,2].\nSince 2 is the only occupied position, we return [2]."
            }
        ]
    },
    {
        "Title": "Partition String Into Minimum Beautiful Substrings",
        "slug": "partition-string-into-minimum-beautiful-substrings",
        "description": "Given a binary string `s`, partition the string into one or more **substrings** such that each substring is **beautiful**.\n\n\nA string is **beautiful** if:\n\n\n It doesn't contain leading zeros.\n It's the **binary** representation of a number that is a power of `5`.\n\n\nReturn *the **minimum** number of substrings in such partition.* If it is impossible to partition the string `s` into beautiful substrings,\u00a0return `-1`.\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Dynamic Programming",
            "Backtracking"
        ],
        "examples": [
            {
                "Input": "** s = \"1011\"",
                "Output": "** 2",
                "Explanation": "** We can paritition the given string into [\"101\", \"1\"].\n- The string \"101\" does not contain leading zeros and is the binary representation of integer 51 = 5.\n- The string \"1\" does not contain leading zeros and is the binary representation of integer 50 = 1.\nIt can be shown that 2 is the minimum number of beautiful substrings that s can be partitioned into."
            },
            {
                "Input": "** s = \"111\"",
                "Output": "** 3",
                "Explanation": "** We can paritition the given string into [\"1\", \"1\", \"1\"].\n- The string \"1\" does not contain leading zeros and is the binary representation of integer 50 = 1.\nIt can be shown that 3 is the minimum number of beautiful substrings that s can be partitioned into."
            },
            {
                "Input": "** s = \"0\"",
                "Output": "** -1",
                "Explanation": "** We can not partition the given string into beautiful substrings."
            }
        ]
    },
    {
        "Title": "Number of Black Blocks",
        "slug": "number-of-black-blocks",
        "description": "You are given two integers `m` and `n` representing the dimensions of a\u00a0**0-indexed**\u00a0`m x n` grid.\n\n\nYou are also given a **0-indexed** 2D integer matrix `coordinates`, where `coordinates[i] = [x, y]` indicates that the cell with coordinates `[x, y]` is colored **black**. All cells in the grid that do not appear in `coordinates` are **white**.\n\n\nA block is defined as a `2 x 2` submatrix of the grid. More formally, a block with cell `[x, y]` as its top-left corner where `0 <= x < m - 1` and `0 <= y < n - 1` contains the coordinates `[x, y]`, `[x + 1, y]`, `[x, y + 1]`, and `[x + 1, y + 1]`.\n\n\nReturn *a **0-indexed** integer array* `arr` *of size* `5` *such that* `arr[i]` *is the number of blocks that contains exactly* `i` ***black** cells*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** m = 3, n = 3, coordinates = [[0,0]]",
                "Output": "** [3,1,0,0,0]",
                "Explanation": "** The grid looks like this:\n![](https://assets.leetcode.com/uploads/2023/06/18/screen-shot-2023-06-18-at-44656-am.png)\nThere is only 1 block with one black cell, and it is the block starting with cell [0,0].\nThe other 3 blocks start with cells [0,1], [1,0] and [1,1]. They all have zero black cells. \nThus, we return [3,1,0,0,0]."
            },
            {
                "Input": "** m = 3, n = 3, coordinates = [[0,0],[1,1],[0,2]]",
                "Output": "** [0,2,2,0,0]",
                "Explanation": "** The grid looks like this:\n![](https://assets.leetcode.com/uploads/2023/06/18/screen-shot-2023-06-18-at-45018-am.png)\nThere are 2 blocks with two black cells (the ones starting with cell coordinates [0,0] and [0,1]).\nThe other 2 blocks have starting cell coordinates of [1,0] and [1,1]. They both have 1 black cell.\nTherefore, we return [0,2,2,0,0]."
            }
        ]
    },
    {
        "Title": "Find the Maximum Achievable Number",
        "slug": "find-the-maximum-achievable-number",
        "description": "Given two integers, `num` and `t`. A **number is achievable** if it can become equal to `num` after applying the following operation:\n\n\n Increase or decrease the number by `1`, and simultaneously increase or decrease `num` by `1`.\n\n\nReturn the **maximum achievable number** after applying the operation at most `t` times.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** num = 4, t = 1",
                "Output": "** 6",
                "Explanation": "**\n\n\nApply the following operation once to make the maximum achievable number equal to `num`:\n\n\n* Decrease the maximum achievable number by 1, and increase `num` by 1."
            },
            {
                "Input": "** num = 3, t = 2",
                "Output": "** 7",
                "Explanation": "**\n\n\nApply the following operation twice to make the maximum achievable number equal to `num`:\n\n\n* Decrease the maximum achievable number by 1, and increase `num` by 1.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num, t\u00a0<= 50`"
            }
        ]
    },
    {
        "Title": "Maximum Number of Jumps to Reach the Last Index",
        "slug": "maximum-number-of-jumps-to-reach-the-last-index",
        "description": "You are given a **0-indexed** array `nums` of `n` integers and an integer `target`.\n\n\nYou are initially positioned at index `0`. In one step, you can jump from index `i` to any index `j` such that:\n\n\n `0 <= i < j < n`\n `-target <= nums[j] - nums[i] <= target`\n\n\nReturn *the **maximum number of jumps** you can make to reach index* `n - 1`.\n\n\nIf there is no way to reach index `n - 1`, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,6,4,1,2], target = 2",
                "Output": "** 3",
                "Explanation": "** To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence:\n- Jump from index 0 to index 1. \n- Jump from index 1 to index 3.\n- Jump from index 3 to index 5.\nIt can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 3 jumps. Hence, the answer is 3."
            },
            {
                "Input": "** nums = [1,3,6,4,1,2], target = 3",
                "Output": "** 5",
                "Explanation": "** To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence:\n- Jump from index 0 to index 1.\n- Jump from index 1 to index 2.\n- Jump from index 2 to index 3.\n- Jump from index 3 to index 4.\n- Jump from index 4 to index 5.\nIt can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 5 jumps. Hence, the answer is 5."
            },
            {
                "Input": "** nums = [1,3,6,4,1,2], target = 0",
                "Output": "** -1",
                "Explanation": "** It can be proven that there is no jumping sequence that goes from 0 to n - 1. Hence, the answer is -1."
            }
        ]
    },
    {
        "Title": "Longest Non-decreasing Subarray From Two Arrays",
        "slug": "longest-non-decreasing-subarray-from-two-arrays",
        "description": "You are given two **0-indexed** integer arrays `nums1` and `nums2` of length `n`.\n\n\nLet's define another **0-indexed** integer array, `nums3`, of length `n`. For each index `i` in the range `[0, n - 1]`, you can assign either `nums1[i]` or `nums2[i]` to `nums3[i]`.\n\n\nYour task is to maximize the length of the **longest non-decreasing subarray** in `nums3` by choosing its values optimally.\n\n\nReturn *an integer representing the length of the **longest non-decreasing** subarray in* `nums3`.\n\n\nNote:** A **subarray** is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums1 = [2,3,1], nums2 = [1,2,1]",
                "Output": "** 2",
                "Explanation": "** One way to construct nums3 is: \nnums3 = [nums1[0], nums2[1], nums2[2]] => [2,2,1]. \nThe subarray starting from index 0 and ending at index 1, [2,2], forms a non-decreasing subarray of length 2. \nWe can show that 2 is the maximum achievable length."
            },
            {
                "Input": "** nums1 = [1,3,2,1], nums2 = [2,2,3,4]",
                "Output": "** 4",
                "Explanation": "** One way to construct nums3 is: \nnums3 = [nums1[0], nums2[1], nums2[2], nums2[3]] => [1,2,3,4]. \nThe entire array forms a non-decreasing subarray of length 4, making it the maximum achievable length."
            },
            {
                "Input": "** nums1 = [1,1], nums2 = [2,2]",
                "Output": "** 2",
                "Explanation": "** One way to construct nums3 is: \nnums3 = [nums1[0], nums1[1]] => [1,1]. \nThe entire array forms a non-decreasing subarray of length 2, making it the maximum achievable length."
            }
        ]
    },
    {
        "Title": "Apply Operations to Make All Array Elements Equal to Zero",
        "slug": "apply-operations-to-make-all-array-elements-equal-to-zero",
        "description": "You are given a **0-indexed** integer array `nums` and a positive integer `k`.\n\n\nYou can apply the following operation on the array **any** number of times:\n\n\n Choose **any** subarray of size `k` from the array and **decrease** all its elements by `1`.\n\n\nReturn `true` *if you can make all the array elements equal to* `0`*, or* `false` *otherwise*.\n\n\nA **subarray** is a contiguous non-empty part of an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [2,2,3,1,1,0], k = 3",
                "Output": "** true",
                "Explanation": "** We can do the following operations:\n- Choose the subarray [2,2,3]. The resulting array will be nums = [**1**,**1**,**2**,1,1,0].\n- Choose the subarray [2,1,1]. The resulting array will be nums = [1,1,**1**,**0**,**0**,0].\n- Choose the subarray [1,1,1]. The resulting array will be nums = [**0**,**0**,**0**,0,0,0]."
            },
            {
                "Input": "** nums = [1,3,1,1], k = 2",
                "Output": "** false",
                "Explanation": "** It is not possible to make all the array elements equal to 0."
            }
        ]
    },
    {
        "Title": "Sum of Squares of Special Elements ",
        "slug": "sum-of-squares-of-special-elements",
        "description": "You are given a **1-indexed** integer array `nums` of length `n`.\n\n\nAn element `nums[i]` of `nums` is called **special** if `i` divides `n`, i.e. `n % i == 0`.\n\n\nReturn *the **sum of the squares** of all **special** elements of* `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 21",
                "Explanation": "** There are exactly 3 special elements in nums: nums[1] since 1 divides 4, nums[2] since 2 divides 4, and nums[4] since 4 divides 4. \nHence, the sum of the squares of all special elements of nums is nums[1] * nums[1] + nums[2] * nums[2] + nums[4] * nums[4] = 1 * 1 + 2 * 2 + 4 * 4 = 21."
            },
            {
                "Input": "** nums = [2,7,1,19,18,3]",
                "Output": "** 63",
                "Explanation": "** There are exactly 4 special elements in nums: nums[1] since 1 divides 6, nums[2] since 2 divides 6, nums[3] since 3 divides 6, and nums[6] since 6 divides 6. \nHence, the sum of the squares of all special elements of nums is nums[1] * nums[1] + nums[2] * nums[2] + nums[3] * nums[3] + nums[6] * nums[6] = 2 * 2 + 7 * 7 + 1 * 1 + 3 * 3 = 63."
            }
        ]
    },
    {
        "Title": "Maximum Beauty of an Array After Applying Operation",
        "slug": "maximum-beauty-of-an-array-after-applying-operation",
        "description": "You are given a **0-indexed** array `nums` and a **non-negative** integer `k`.\n\n\nIn one operation, you can do the following:\n\n\n Choose an index `i` that **hasn't been chosen before** from the range `[0, nums.length - 1]`.\n Replace `nums[i]` with any integer from the range `[nums[i] - k, nums[i] + k]`.\n\n\nThe **beauty** of the array is the length of the longest subsequence consisting of equal elements.\n\n\nReturn *the **maximum** possible beauty of the array* `nums` *after applying the operation any number of times.\n\n\nNote** that you can apply the operation to each index **only once**.\n\n\nA\u00a0**subsequence** of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the order of the remaining elements.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Sliding Window",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [4,6,1,2], k = 2",
                "Output": "** 3",
                "Explanation": "** In this example, we apply the following operations:\n- Choose index 1, replace it with 4 (from range [4,8]), nums = [4,4,1,2].\n- Choose index 3, replace it with 4 (from range [0,4]), nums = [4,4,1,4].\nAfter the applied operations, the beauty of the array nums is 3 (subsequence consisting of indices 0, 1, and 3).\nIt can be proven that 3 is the maximum possible length we can achieve."
            },
            {
                "Input": "** nums = [1,1,1,1], k = 10",
                "Output": "** 4",
                "Explanation": "** In this example we don't have to apply any operations.\nThe beauty of the array nums is 4 (whole array)."
            }
        ]
    },
    {
        "Title": "Minimum Index of a Valid Split",
        "slug": "minimum-index-of-a-valid-split",
        "description": "An element `x` of an integer array `arr` of length `m` is **dominant** if `freq(x) * 2 > m`, where `freq(x)` is the number of occurrences of `x` in `arr`. Note that this definition implies that `arr` can have **at most one** dominant element.\n\n\nYou are given a **0-indexed** integer array `nums` of length `n` with one dominant element.\n\n\nYou can split `nums` at an index `i` into two arrays `nums[0, ..., i]` and `nums[i + 1, ..., n - 1]`, but the split is only **valid** if:\n\n\n `0 <= i < n - 1`\n `nums[0, ..., i]`, and `nums[i + 1, ..., n - 1]` have the same dominant element.\n\n\nHere, `nums[i, ..., j]` denotes the subarray of `nums` starting at index `i` and ending at index `j`, both ends being inclusive. Particularly, if `j < i` then `nums[i, ..., j]` denotes an empty subarray.\n\n\nReturn *the **minimum** index of a **valid split***. If no valid split exists, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,2,2]",
                "Output": "** 2",
                "Explanation": "** We can split the array at index 2 to obtain arrays [1,2,2] and [2]. \nIn array [1,2,2], element 2 is dominant since it occurs twice in the array and 2 * 2 > 3. \nIn array [2], element 2 is dominant since it occurs once in the array and 1 * 2 > 1.\nBoth [1,2,2] and [2] have the same dominant element as nums, so this is a valid split. \nIt can be shown that index 2 is the minimum index of a valid split."
            },
            {
                "Input": "** nums = [2,1,3,1,1,1,7,1,2,1]",
                "Output": "** 4",
                "Explanation": "** We can split the array at index 4 to obtain arrays [2,1,3,1,1] and [1,7,1,2,1].\nIn array [2,1,3,1,1], element 1 is dominant since it occurs thrice in the array and 3 * 2 > 5.\nIn array [1,7,1,2,1], element 1 is dominant since it occurs thrice in the array and 3 * 2 > 5.\nBoth [2,1,3,1,1] and [1,7,1,2,1] have the same dominant element as nums, so this is a valid split.\nIt can be shown that index 4 is the minimum index of a valid split."
            },
            {
                "Input": "** nums = [3,3,3,3,7,2,2]",
                "Output": "** -1",
                "Explanation": "** It can be shown that there is no valid split."
            }
        ]
    },
    {
        "Title": "Length of the Longest Valid Substring",
        "slug": "length-of-the-longest-valid-substring",
        "description": "You are given a string `word` and an array of strings `forbidden`.\n\n\nA string is called **valid** if none of its substrings are present in `forbidden`.\n\n\nReturn *the length of the **longest valid substring** of the string* `word`.\n\n\nA **substring** is a contiguous sequence of characters in a string, possibly empty.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** word = \"cbaaaabc\", forbidden = [\"aaa\",\"cb\"]",
                "Output": "** 4",
                "Explanation": "** There are 11 valid substrings in word: \"c\", \"b\", \"a\", \"ba\", \"aa\", \"bc\", \"baa\", \"aab\", \"ab\", \"abc\" and \"aabc\". The length of the longest valid substring is 4. \nIt can be shown that all other substrings contain either \"aaa\" or \"cb\" as a substring."
            },
            {
                "Input": "** word = \"leetcode\", forbidden = [\"de\",\"le\",\"e\"]",
                "Output": "** 4",
                "Explanation": "** There are 11 valid substrings in word: \"l\", \"t\", \"c\", \"o\", \"d\", \"tc\", \"co\", \"od\", \"tco\", \"cod\", and \"tcod\". The length of the longest valid substring is 4.\nIt can be shown that all other substrings contain either \"de\", \"le\", or \"e\" as a substring."
            }
        ]
    },
    {
        "Title": "Check if Array is Good",
        "slug": "check-if-array-is-good",
        "description": "You are given an integer array `nums`. We consider an array **good** if it is a permutation of an array `base[n]`.\n\n\n`base[n] = [1, 2, ..., n - 1, n, n]` (in other words, it is an array of length `n + 1` which contains `1` to `n - 1` exactly once, plus two occurrences of `n`). For example, `base[1] = [1, 1]` and `base[3] = [1, 2, 3, 3]`.\n\n\nReturn `true` *if the given array is good, otherwise return*`false`.\n\n\nNote:** A permutation of integers represents an arrangement of these numbers.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [2, 1, 3]",
                "Output": "** false",
                "Explanation": "** Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. However, base[3] has four elements but array nums has three. Therefore, it can not be a permutation of base[3] = [1, 2, 3, 3]. So the answer is false."
            },
            {
                "Input": "** nums = [1, 3, 3, 2]",
                "Output": "** true",
                "Explanation": "** Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. It can be seen that nums is a permutation of base[3] = [1, 2, 3, 3] (by swapping the second and fourth elements in nums, we reach base[3]). Therefore, the answer is true."
            },
            {
                "Input": "** nums = [1, 1]",
                "Output": "** true",
                "Explanation": "** Since the maximum element of the array is 1, the only candidate n for which this array could be a permutation of base[n], is n = 1. It can be seen that nums is a permutation of base[1] = [1, 1]. Therefore, the answer is true."
            },
            {
                "Input": "** nums = [3, 4, 4, 1, 2, 1]",
                "Output": "** false",
                "Explanation": "** Since the maximum element of the array is 4, the only candidate n for which this array could be a permutation of base[n], is n = 4. However, base[4] has five elements but array nums has six. Therefore, it can not be a permutation of base[4] = [1, 2, 3, 4, 4]. So the answer is false."
            }
        ]
    },
    {
        "Title": "Sort Vowels in a String",
        "slug": "sort-vowels-in-a-string",
        "description": "Given a **0-indexed** string `s`, **permute** `s` to get a new string `t` such that:\n\n\n All consonants remain in their original places. More formally, if there is an index `i` with `0 <= i < s.length` such that `s[i]` is a consonant, then `t[i] = s[i]`.\n The vowels must be sorted in the **nondecreasing** order of their **ASCII** values. More formally, for pairs of indices `i`, `j` with `0 <= i < j < s.length` such that `s[i]` and `s[j]` are vowels, then `t[i]` must not have a higher ASCII value than `t[j]`.\n\n\nReturn *the resulting string*.\n\n\nThe vowels are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`, and they can appear in lowercase or uppercase. Consonants comprise all letters that are not vowels.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** s = \"lEetcOde\"",
                "Output": "** \"lEOtcede\"",
                "Explanation": "** 'E', 'O', and 'e' are the vowels in s; 'l', 't', 'c', and 'd' are all consonants. The vowels are sorted according to their ASCII values, and the consonants remain in the same places."
            },
            {
                "Input": "** s = \"lYmpH\"",
                "Output": "** \"lYmpH\"",
                "Explanation": "** There are no vowels in s (all characters in s are consonants), so we return \"lYmpH\"."
            }
        ]
    },
    {
        "Title": "Visit Array Positions to Maximize Score",
        "slug": "visit-array-positions-to-maximize-score",
        "description": "You are given a **0-indexed** integer array `nums` and a positive integer `x`.\n\n\nYou are **initially** at position `0` in the array and you can visit other positions according to the following rules:\n\n\n If you are currently in position `i`, then you can move to **any** position `j` such that `i < j`.\n For each position `i` that you visit, you get a score of `nums[i]`.\n If you move from a position `i` to a position `j` and the **parities** of `nums[i]` and `nums[j]` differ, then you lose a score of `x`.\n\n\nReturn *the **maximum** total score you can get*.\n\n\nNote** that initially you have `nums[0]` points.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [2,3,6,1,9,2], x = 5",
                "Output": "** 13",
                "Explanation": "** We can visit the following positions in the array: 0 -> 2 -> 3 -> 4.\nThe corresponding values are 2, 6, 1 and 9. Since the integers 6 and 1 have different parities, the move 2 -> 3 will make you lose a score of x = 5.\nThe total score will be: 2 + 6 + 1 + 9 - 5 = 13."
            },
            {
                "Input": "** nums = [2,4,6,8], x = 3",
                "Output": "** 20",
                "Explanation": "** All the integers in the array have the same parities, so we can visit all of them without losing any score.\nThe total score is: 2 + 4 + 6 + 8 = 20."
            }
        ]
    },
    {
        "Title": "Ways to Express an Integer as Sum of Powers",
        "slug": "ways-to-express-an-integer-as-sum-of-powers",
        "description": "Given two **positive** integers `n` and `x`.\n\n\nReturn *the number of ways* `n` *can be expressed as the sum of the* `xth` *power of **unique** positive integers, in other words, the number of sets of unique integers* `[n1, n2, ..., nk]` *where* `n = n1x + n2x + ... + nkx`*.\n\n\nSince the result can be very large, return it modulo `109 + 7`.\n\n\nFor example, if `n = 160` and `x = 3`, one way to express `n` is `n = 23 + 33 + 53`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** n = 10, x = 2",
                "Output": "** 1",
                "Explanation": "** We can express n as the following: n = 32 + 12 = 10.\nIt can be shown that it is the only way to express 10 as the sum of the 2nd power of unique integers."
            },
            {
                "Input": "** n = 4, x = 1",
                "Output": "** 2",
                "Explanation": "** We can express n in the following ways:\n- n = 41 = 4.\n- n = 31 + 11 = 4."
            }
        ]
    },
    {
        "Title": "Split Strings by Separator",
        "slug": "split-strings-by-separator",
        "description": "Given an array of strings `words` and a character `separator`, **split** each string in `words` by `separator`.\n\n\nReturn *an array of strings containing the new strings formed after the splits, **excluding empty strings**.\n\n\nNotes\n\n\n `separator` is used to determine where the split should occur, but it is not included as part of the resulting strings.\n A split may result in more than two strings.\n The resulting strings must maintain the same order as they were initially given.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "examples": [
            {
                "Input": "** words = [\"one.two.three\",\"four.five\",\"six\"], separator = \".\"",
                "Output": "** [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"]",
                "Explanation": "** In this example we split as follows:\n\n\"one.two.three\" splits into \"one\", \"two\", \"three\"\n\"four.five\" splits into \"four\", \"five\"\n\"six\" splits into \"six\" \n\nHence, the resulting array is [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"]."
            },
            {
                "Input": "** words = [\"$easy$\",\"$problem$\"], separator = \"$\"",
                "Output": "** [\"easy\",\"problem\"]",
                "Explanation": "** In this example we split as follows: \n\n\"$easy$\" splits into \"easy\" (excluding empty strings)\n\"$problem$\" splits into \"problem\" (excluding empty strings)\n\nHence, the resulting array is [\"easy\",\"problem\"]."
            },
            {
                "Input": "** words = [\"|||\"], separator = \"|\"",
                "Output": "** []",
                "Explanation": "** In this example the resulting split of \"|||\" will contain only empty strings, so we return an empty array []."
            }
        ]
    },
    {
        "Title": "Largest Element in an Array after Merge Operations",
        "slug": "largest-element-in-an-array-after-merge-operations",
        "description": "You are given a **0-indexed** array `nums` consisting of positive integers.\n\n\nYou can do the following operation on the array **any** number of times:\n\n\n Choose an integer `i` such that `0 <= i < nums.length - 1` and `nums[i] <= nums[i + 1]`. Replace the element `nums[i + 1]` with `nums[i] + nums[i + 1]` and delete the element `nums[i]` from the array.\n\n\nReturn *the value of the **largest** element that you can possibly obtain in the final array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums = [2,3,7,9,3]",
                "Output": "** 21",
                "Explanation": "** We can apply the following operations on the array:\n- Choose i = 0. The resulting array will be nums = [5,7,9,3].\n- Choose i = 1. The resulting array will be nums = [5,16,3].\n- Choose i = 0. The resulting array will be nums = [21,3].\nThe largest element in the final array is 21. It can be shown that we cannot obtain a larger element."
            },
            {
                "Input": "** nums = [5,3,3]",
                "Output": "** 11",
                "Explanation": "** We can do the following operations on the array:\n- Choose i = 1. The resulting array will be nums = [5,6].\n- Choose i = 0. The resulting array will be nums = [11].\nThere is only one element in the final array, which is 11."
            }
        ]
    },
    {
        "Title": "Maximum Number of Groups With Increasing Length",
        "slug": "maximum-number-of-groups-with-increasing-length",
        "description": "You are given a **0-indexed** array `usageLimits` of length `n`.\n\n\nYour task is to create **groups** using numbers from `0` to `n - 1`, ensuring that each number, `i`, is used no more than `usageLimits[i]` times in total **across all groups**. You must also satisfy the following conditions:\n\n\n Each group must consist of **distinct** numbers, meaning that no duplicate numbers are allowed within a single group.\n Each group (except the first one) must have a length **strictly greater** than the previous group.\n\n\nReturn *an integer denoting the **maximum** number of groups you can create while satisfying these conditions.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Binary Search",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** usageLimits = [1,2,5]",
                "Output": "** 3",
                "Explanation": "** In this example, we can use 0 at most once, 1 at most twice, and 2 at most five times.\nOne way of creating the maximum number of groups while satisfying the conditions is: \nGroup 1 contains the number [2].\nGroup 2 contains the numbers [1,2].\nGroup 3 contains the numbers [0,1,2]. \nIt can be shown that the maximum number of groups is 3. \nSo, the output is 3."
            },
            {
                "Input": "** usageLimits = [2,1,2]",
                "Output": "** 2",
                "Explanation": "** In this example, we can use 0 at most twice, 1 at most once, and 2 at most twice.\nOne way of creating the maximum number of groups while satisfying the conditions is:\nGroup 1 contains the number [0].\nGroup 2 contains the numbers [1,2].\nIt can be shown that the maximum number of groups is 2.\nSo, the output is 2."
            },
            {
                "Input": "** usageLimits = [1,1]",
                "Output": "** 1",
                "Explanation": "** In this example, we can use both 0 and 1 at most once.\nOne way of creating the maximum number of groups while satisfying the conditions is:\nGroup 1 contains the number [0].\nIt can be shown that the maximum number of groups is 1.\nSo, the output is 1."
            }
        ]
    },
    {
        "Title": "Count Paths That Can Form a Palindrome in a Tree",
        "slug": "count-paths-that-can-form-a-palindrome-in-a-tree",
        "description": "You are given a **tree** (i.e. a connected, undirected graph that has no cycles) **rooted** at node `0` consisting of `n` nodes numbered from `0` to `n - 1`. The tree is represented by a **0-indexed** array `parent` of size `n`, where `parent[i]` is the parent of node `i`. Since node `0` is the root, `parent[0] == -1`.\n\n\nYou are also given a string `s` of length `n`, where `s[i]` is the character assigned to the edge between `i` and `parent[i]`. `s[0]` can be ignored.\n\n\nReturn *the number of pairs of nodes* `(u, v)` *such that* `u < v` *and the characters assigned to edges on the path from* `u` *to* `v` *can be **rearranged** to form a **palindrome***.\n\n\nA string is a **palindrome** when it reads the same backwards as forwards.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Bit Manipulation",
            "Tree",
            "Depth-First Search",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** parent = [-1,0,0,1,1,2], s = \"acaabc\"",
                "Output": "** 8",
                "Explanation": "** The valid pairs are:\n- All the pairs (0,1), (0,2), (1,3), (1,4) and (2,5) result in one character which is always a palindrome.\n- The pair (2,3) result in the string \"aca\" which is a palindrome.\n- The pair (1,5) result in the string \"cac\" which is a palindrome.\n- The pair (3,5) result in the string \"acac\" which can be rearranged into the palindrome \"acca\"."
            }
        ]
    },
    {
        "Title": "Number of Employees Who Met the Target",
        "slug": "number-of-employees-who-met-the-target",
        "description": "There are `n` employees in a company, numbered from `0` to `n - 1`. Each employee `i` has worked for `hours[i]` hours in the company.\n\n\nThe company requires each employee to work for **at least** `target` hours.\n\n\nYou are given a **0-indexed** array of non-negative integers `hours` of length `n` and a non-negative integer `target`.\n\n\nReturn *the integer denoting the number of employees who worked at least* `target` *hours*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** hours = [0,1,2,3,4], target = 2",
                "Output": "** 3",
                "Explanation": "** The company wants each employee to work for at least 2 hours.\n- Employee 0 worked for 0 hours and didn't meet the target.\n- Employee 1 worked for 1 hours and didn't meet the target.\n- Employee 2 worked for 2 hours and met the target.\n- Employee 3 worked for 3 hours and met the target.\n- Employee 4 worked for 4 hours and met the target.\nThere are 3 employees who met the target."
            },
            {
                "Input": "** hours = [5,1,4,2,2], target = 6",
                "Output": "** 0",
                "Explanation": "** The company wants each employee to work for at least 6 hours.\nThere are 0 employees who met the target."
            }
        ]
    },
    {
        "Title": "Count Complete Subarrays in an Array",
        "slug": "count-complete-subarrays-in-an-array",
        "description": "You are given an array `nums` consisting of **positive** integers.\n\n\nWe call a subarray of an array **complete** if the following condition is satisfied:\n\n\n The number of **distinct** elements in the subarray is equal to the number of distinct elements in the whole array.\n\n\nReturn *the number of **complete** subarrays*.\n\n\nA **subarray** is a contiguous non-empty part of an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,1,2,2]",
                "Output": "** 4",
                "Explanation": "** The complete subarrays are the following: [1,3,1,2], [1,3,1,2,2], [3,1,2] and [3,1,2,2]."
            },
            {
                "Input": "** nums = [5,5,5,5]",
                "Output": "** 10",
                "Explanation": "** The array consists only of the integer 5, so any subarray is complete. The number of subarrays that we can choose is 10."
            }
        ]
    },
    {
        "Title": "Shortest String That Contains Three Strings",
        "slug": "shortest-string-that-contains-three-strings",
        "description": "Given three strings `a`, `b`, and `c`, your task is to find a string that has the **minimum** length and contains all three strings as **substrings**.\nIf there are multiple such strings, return the**lexicographicallysmallest** one.\n\n\nReturn *a string denoting the answer to the problem.\n\n\nNotes\n\n\n A string `a` is **lexicographically smaller** than a string `b` (of the same length) if in the first position where `a` and `b` differ, string `a` has a letter that appears **earlier** in the alphabet than the corresponding letter in `b`.\n A **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Greedy",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** a = \"abc\", b = \"bca\", c = \"aaa\"",
                "Output": "** \"aaabca\"",
                "Explanation": "**  We show that \"aaabca\" contains all the given strings: a = ans[2...4], b = ans[3..5], c = ans[0..2]. It can be shown that the length of the resulting string would be at least 6 and \"aaabca\" is the lexicographically smallest one."
            },
            {
                "Input": "** a = \"ab\", b = \"ba\", c = \"aba\"",
                "Output": "** \"aba\"",
                "Explanation": "** We show that the string \"aba\" contains all the given strings: a = ans[0..1], b = ans[1..2], c = ans[0..2]. Since the length of c is 3, the length of the resulting string would be at least 3. It can be shown that \"aba\" is the lexicographically smallest one."
            }
        ]
    },
    {
        "Title": "Count Stepping Numbers in Range",
        "slug": "count-stepping-numbers-in-range",
        "description": "Given two positive integers `low` and `high` represented as strings, find the count of **stepping numbers** in the inclusive range `[low, high]`.\n\n\nA **stepping number** is an integer such that all of its adjacent digits have an absolute difference of **exactly** `1`.\n\n\nReturn *an integer denoting the count of stepping numbers in the inclusive range* `[low, high]`*.* \n\n\nSince the answer may be very large, return it **modulo** `109 + 7`.\n\n\nNote:** A stepping number should not have a leading zero.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** low = \"1\", high = \"11\"",
                "Output": "** 10",
                "Explanation": "** The stepping numbers in the range [1,11] are 1, 2, 3, 4, 5, 6, 7, 8, 9 and 10. There are a total of 10 stepping numbers in the range. Hence, the output is 10."
            },
            {
                "Input": "** low = \"90\", high = \"101\"",
                "Output": "** 2",
                "Explanation": "** The stepping numbers in the range [90,101] are 98 and 101. There are a total of 2 stepping numbers in the range. Hence, the output is 2."
            }
        ]
    },
    {
        "Title": "Account Balance After Rounded Purchase",
        "slug": "account-balance-after-rounded-purchase",
        "description": "Initially, you have a bank account balance of `100` dollars.\n\n\nYou are given an integer `purchaseAmount` representing the amount you will spend on a purchase in dollars.\n\n\nAt the store where you will make the purchase, the purchase amount is rounded to the **nearest multiple** of `10`. In other words, you pay a **non-negative** amount, `roundedAmount`, such that `roundedAmount` is a multiple of `10` and `abs(roundedAmount - purchaseAmount)` is **minimized**.\n\n\nIf there is more than one nearest multiple of `10`, the **largest multiple** is chosen.\n\n\nReturn *an integer denoting your account balance after making a purchase worth* `purchaseAmount` *dollars from the store.\n\n\nNote:** `0` is considered to be a multiple of `10` in this problem.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** purchaseAmount = 9",
                "Output": "** 90",
                "Explanation": "** In this example, the nearest multiple of 10 to 9 is 10. Hence, your account balance becomes 100 - 10 = 90."
            },
            {
                "Input": "** purchaseAmount = 15",
                "Output": "** 80",
                "Explanation": "** In this example, there are two nearest multiples of 10 to 15: 10 and 20. So, the larger multiple, 20, is chosen.\nHence, your account balance becomes 100 - 20 = 80."
            }
        ]
    },
    {
        "Title": "Insert Greatest Common Divisors in Linked List",
        "slug": "insert-greatest-common-divisors-in-linked-list",
        "description": "Given the head of a linked list `head`, in which each node contains an integer value.\n\n\nBetween every pair of adjacent nodes, insert a new node with a value equal to the **greatest common divisor** of them.\n\n\nReturn *the linked list after insertion*.\n\n\nThe **greatest common divisor** of two numbers is the largest positive integer that evenly divides both numbers.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Math",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** head = [18,6,10,3]",
                "Output": "** [18,6,6,2,10,1,3]",
                "Explanation": "** The 1st diagram denotes the initial linked list and the 2nd diagram denotes the linked list after inserting the new nodes (nodes in blue are the inserted nodes).\n- We insert the greatest common divisor of 18 and 6 = 6 between the 1st and the 2nd nodes.\n- We insert the greatest common divisor of 6 and 10 = 2 between the 2nd and the 3rd nodes.\n- We insert the greatest common divisor of 10 and 3 = 1 between the 3rd and the 4th nodes.\nThere are no more adjacent nodes, so we return the linked list."
            },
            {
                "Input": "** head = [7]",
                "Output": "** [7]",
                "Explanation": "** The 1st diagram denotes the initial linked list and the 2nd diagram denotes the linked list after inserting the new nodes.\nThere are no pairs of adjacent nodes, so we return the initial linked list."
            }
        ]
    },
    {
        "Title": "Minimum Seconds to Equalize a Circular Array",
        "slug": "minimum-seconds-to-equalize-a-circular-array",
        "description": "You are given a **0-indexed** array `nums` containing `n` integers.\n\n\nAt each second, you perform the following operation on the array:\n\n\n For every index `i` in the range `[0, n - 1]`, replace `nums[i]` with either `nums[i]`, `nums[(i - 1 + n) % n]`, or `nums[(i + 1) % n]`.\n\n\nNote** that all the elements get replaced simultaneously.\n\n\nReturn *the **minimum** number of seconds needed to make all elements in the array* `nums` *equal*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,1,2]",
                "Output": "** 1",
                "Explanation": "** We can equalize the array in 1 second in the following way:\n- At 1st second, replace values at each index with [nums[3],nums[1],nums[3],nums[3]]. After replacement, nums = [2,2,2,2].\nIt can be proven that 1 second is the minimum amount of seconds needed for equalizing the array."
            },
            {
                "Input": "** nums = [2,1,3,3,2]",
                "Output": "** 2",
                "Explanation": "** We can equalize the array in 2 seconds in the following way:\n- At 1st second, replace values at each index with [nums[0],nums[2],nums[2],nums[2],nums[3]]. After replacement, nums = [2,3,3,3,3].\n- At 2nd second, replace values at each index with [nums[1],nums[1],nums[2],nums[3],nums[4]]. After replacement, nums = [3,3,3,3,3].\nIt can be proven that 2 seconds is the minimum amount of seconds needed for equalizing the array."
            },
            {
                "Input": "** nums = [5,5,5,5]",
                "Output": "** 0",
                "Explanation": "** We don't need to perform any operations as all elements in the initial array are the same."
            }
        ]
    },
    {
        "Title": "Minimum Time to Make Array Sum At Most x",
        "slug": "minimum-time-to-make-array-sum-at-most-x",
        "description": "You are given two **0-indexed** integer arrays `nums1` and `nums2` of equal length. Every second, for all indices `0 <= i < nums1.length`, value of `nums1[i]` is incremented by `nums2[i]`. **After** this is done, you can do the following operation:\n\n\n Choose an index `0 <= i < nums1.length` and make `nums1[i] = 0`.\n\n\nYou are also given an integer `x`.\n\n\nReturn *the **minimum** time in which you can make the sum of all elements of* `nums1` *to be **less than or equal** to* `x`, *or* `-1` *if this is not possible.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums1 = [1,2,3], nums2 = [1,2,3], x = 4",
                "Output": "** 3",
                "Explanation": "** \nFor the 1st second, we apply the operation on i = 0. Therefore nums1 = [0,2+2,3+3] = [0,4,6]. \nFor the 2nd second, we apply the operation on i = 1. Therefore nums1 = [0+1,0,6+3] = [1,0,9]. \nFor the 3rd second, we apply the operation on i = 2. Therefore nums1 = [1+1,0+2,0] = [2,2,0]. \nNow sum of nums1 = 4. It can be shown that these operations are optimal, so we return 3."
            },
            {
                "Input": "** nums1 = [1,2,3], nums2 = [3,3,3], x = 4",
                "Output": "** -1",
                "Explanation": "** It can be shown that the sum of nums1 will always be greater than x, no matter which operations are performed."
            }
        ]
    },
    {
        "Title": "Faulty Keyboard",
        "slug": "faulty-keyboard",
        "description": "Your laptop keyboard is faulty, and whenever you type a character `'i'` on it, it reverses the string that you have written. Typing other characters works as expected.\n\n\nYou are given a **0-indexed** string `s`, and you type each character of `s` using your faulty keyboard.\n\n\nReturn *the final string that will be present on your laptop screen.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** s = \"string\"",
                "Output": "** \"rtsng\"",
                "Explanation": "** \nAfter typing first character, the text on the screen is \"s\".\nAfter the second character, the text is \"st\". \nAfter the third character, the text is \"str\".\nSince the fourth character is an 'i', the text gets reversed and becomes \"rts\".\nAfter the fifth character, the text is \"rtsn\". \nAfter the sixth character, the text is \"rtsng\". \nTherefore, we return \"rtsng\"."
            },
            {
                "Input": "** s = \"poiinter\"",
                "Output": "** \"ponter\"",
                "Explanation": "** \nAfter the first character, the text on the screen is \"p\".\nAfter the second character, the text is \"po\". \nSince the third character you type is an 'i', the text gets reversed and becomes \"op\". \nSince the fourth character you type is an 'i', the text gets reversed and becomes \"po\".\nAfter the fifth character, the text is \"pon\".\nAfter the sixth character, the text is \"pont\". \nAfter the seventh character, the text is \"ponte\". \nAfter the eighth character, the text is \"ponter\". \nTherefore, we return \"ponter\"."
            }
        ]
    },
    {
        "Title": "Check if it is Possible to Split Array",
        "slug": "check-if-it-is-possible-to-split-array",
        "description": "You are given an array `nums` of length `n` and an integer `m`. You need to determine if it is possible to split the array into `n` **non-empty** arrays by performing a series of steps.\n\n\nIn each step, you can select an existing array (which may be the result of previous steps) with a length of **at least two** and split it into **two** subarrays, if, **for each** resulting subarray, **at least** one of the following holds:\n\n\n The length of the subarray is one, or\n The sum of elements of the subarray is **greater than or equal** to `m`.\n\n\nReturn `true` *if you can split the given array into* `n` *arrays, otherwise return* `false`.\n\n\nNote:** A subarray is *a contiguous non-empty sequence of elements within an array*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums = [2, 2, 1], m = 4",
                "Output": "** true",
                "Explanation": "** We can split the array into [2, 2] and [1] in the first step. Then, in the second step, we can split [2, 2] into [2] and [2]. As a result, the answer is true."
            },
            {
                "Input": "** nums = [2, 1, 3], m = 5",
                "Output": "** false",
                "Explanation": "** We can try splitting the array in two different ways: the first way is to have [2, 1] and [3], and the second way is to have [2] and [1, 3]. However, both of these ways are not valid. So, the answer is false."
            },
            {
                "Input": "** nums = [2, 3, 3, 2, 3], m = 6",
                "Output": "** true",
                "Explanation": "** We can split the array into [2, 3, 3, 2] and [3] in the first step. Then, in the second step, we can split [2, 3, 3, 2] into [2, 3, 3] and [2]. Then, in the third step, we can split [2, 3, 3] into [2] and [3, 3]. And in the last step we can split [3, 3] into [3] and [3]. As a result, the answer is true."
            }
        ]
    },
    {
        "Title": "Find the Safest Path in a Grid",
        "slug": "find-the-safest-path-in-a-grid",
        "description": "You are given a **0-indexed** 2D matrix `grid` of size `n x n`, where `(r, c)` represents:\n\n\n A cell containing a thief if `grid[r][c] = 1`\n An empty cell if `grid[r][c] = 0`\n\n\nYou are initially positioned at cell `(0, 0)`. In one move, you can move to any adjacent cell in the grid, including cells containing thieves.\n\n\nThe **safeness factor** of a path on the grid is defined as the **minimum** manhattan distance from any cell in the path to any thief in the grid.\n\n\nReturn *the **maximum safeness factor** of all paths leading to cell* `(n - 1, n - 1)`*.\n\n\nAn **adjacent** cell of cell `(r, c)`, is one of the cells `(r, c + 1)`, `(r, c - 1)`, `(r + 1, c)` and `(r - 1, c)` if it exists.\n\n\nThe **Manhattan distance** between two cells `(a, b)` and `(x, y)` is equal to `|a - x| + |b - y|`, where `|val|` denotes the absolute value of val.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Breadth-First Search",
            "Union Find",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,0,0],[0,0,0],[0,0,1]]",
                "Output": "** 0",
                "Explanation": "** All paths from (0, 0) to (n - 1, n - 1) go through the thieves in cells (0, 0) and (n - 1, n - 1)."
            },
            {
                "Input": "** grid = [[0,0,1],[0,0,0],[0,0,0]]",
                "Output": "** 2",
                "Explanation": "** The path depicted in the picture above has a safeness factor of 2 since:\n- The closest cell of the path to the thief at cell (0, 2) is cell (0, 0). The distance between them is | 0 - 0 | + | 0 - 2 | = 2.\nIt can be shown that there are no other paths with a higher safeness factor."
            },
            {
                "Input": "** grid = [[0,0,0,1],[0,0,0,0],[0,0,0,0],[1,0,0,0]]",
                "Output": "** 2",
                "Explanation": "** The path depicted in the picture above has a safeness factor of 2 since:\n- The closest cell of the path to the thief at cell (0, 3) is cell (1, 2). The distance between them is | 0 - 1 | + | 3 - 2 | = 2.\n- The closest cell of the path to the thief at cell (3, 0) is cell (3, 2). The distance between them is | 3 - 3 | + | 0 - 2 | = 2.\nIt can be shown that there are no other paths with a higher safeness factor."
            }
        ]
    },
    {
        "Title": "Maximum Elegance of a K-Length Subsequence",
        "slug": "maximum-elegance-of-a-k-length-subsequence",
        "description": "You are given a **0-indexed** 2D integer array `items` of length `n` and an integer `k`.\n\n\n`items[i] = [profiti, categoryi]`, where `profiti` and `categoryi` denote the profit and category of the `ith` item respectively.\n\n\nLet's define the **elegance** of a **subsequence** of `items` as `total_profit + distinct_categories2`, where `total_profit` is the sum of all profits in the subsequence, and `distinct_categories` is the number of **distinct** categories from all the categories in the selected subsequence.\n\n\nYour task is to find the **maximum elegance** from all subsequences of size `k` in `items`.\n\n\nReturn *an integer denoting the maximum elegance of a subsequence of* `items` *with size exactly* `k`.\n\n\nNote:** A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Stack",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** items = [[3,2],[5,1],[10,1]], k = 2",
                "Output": "** 17",
                "Explanation": "** In this example, we have to select a subsequence of size 2.\nWe can select items[0] = [3,2] and items[2] = [10,1].\nThe total profit in this subsequence is 3 + 10 = 13, and the subsequence contains 2 distinct categories [2,1].\nHence, the elegance is 13 + 22 = 17, and we can show that it is the maximum achievable elegance."
            },
            {
                "Input": "** items = [[3,1],[3,1],[2,2],[5,3]], k = 3",
                "Output": "** 19",
                "Explanation": "** In this example, we have to select a subsequence of size 3. \nWe can select items[0] = [3,1], items[2] = [2,2], and items[3] = [5,3]. \nThe total profit in this subsequence is 3 + 2 + 5 = 10, and the subsequence contains 3 distinct categories [1,2,3]. \nHence, the elegance is 10 + 32 = 19, and we can show that it is the maximum achievable elegance."
            },
            {
                "Input": "** items = [[1,1],[2,1],[3,1]], k = 3",
                "Output": "** 7",
                "Explanation": "** In this example, we have to select a subsequence of size 3. \nWe should select all the items. \nThe total profit will be 1 + 2 + 3 = 6, and the subsequence contains 1 distinct category [1]. \nHence, the maximum elegance is 6 + 12 = 7."
            }
        ]
    },
    {
        "Title": "Max Pair Sum in an Array",
        "slug": "max-pair-sum-in-an-array",
        "description": "You are given an integer array `nums`. You have to find the **maximum** sum of a pair of numbers from `nums` such that the **largest digit** in both numbers is equal.\n\n\nFor example, 2373 is made up of three distinct digits: 2, 3, and 7, where 7 is the largest among them.\n\n\nReturn the **maximum** sum or -1 if no such pair exists.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** nums = [112,131,411]",
                "Output": "** -1",
                "Explanation": "**\n\n\nEach numbers largest digit in order is [2,3,4]."
            },
            {
                "Input": "** nums = [2536,1613,3366,162]",
                "Output": "** 5902",
                "Explanation": "**\n\n\nAll the numbers have 6 as their largest digit, so the answer is 2536 + 3366 = 5902."
            },
            {
                "Input": "** nums = [51,71,17,24,42]",
                "Output": "** 88",
                "Explanation": "**\n\n\nEach number's largest digit in order is [5,7,7,4,4].\n\n\nSo we have only two possible pairs, 71 + 17 = 88 and 24 + 42 = 66.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 100`\n* `1 <= nums[i] <= 104`"
            }
        ]
    },
    {
        "Title": "Double a Number Represented as a Linked List",
        "slug": "double-a-number-represented-as-a-linked-list",
        "description": "You are given the `head` of a **non-empty** linked list representing a non-negative integer without leading zeroes.\n\n\nReturn *the* `head` *of the linked list after **doubling** it*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Math",
            "Stack"
        ],
        "examples": [
            {
                "Input": "** head = [1,8,9]",
                "Output": "** [3,7,8]",
                "Explanation": "** The figure above corresponds to the given linked list which represents the number 189. Hence, the returned linked list represents the number 189 * 2 = 378."
            },
            {
                "Input": "** head = [9,9,9]",
                "Output": "** [1,9,9,8]",
                "Explanation": "** The figure above corresponds to the given linked list which represents the number 999. Hence, the returned linked list reprersents the number 999 * 2 = 1998."
            }
        ]
    },
    {
        "Title": "Minimum Absolute Difference Between Elements With Constraint",
        "slug": "minimum-absolute-difference-between-elements-with-constraint",
        "description": "You are given a **0-indexed** integer array `nums` and an integer `x`.\n\n\nFind the **minimum absolute difference** between two elements in the array that are at least `x` indices apart.\n\n\nIn other words, find two indices `i` and `j` such that `abs(i - j) >= x` and `abs(nums[i] - nums[j])` is minimized.\n\n\nReturn *an integer denoting the **minimum** absolute difference between two elements that are at least* `x` *indices apart*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** nums = [4,3,2,4], x = 2",
                "Output": "** 0",
                "Explanation": "** We can select nums[0] = 4 and nums[3] = 4. \nThey are at least 2 indices apart, and their absolute difference is the minimum, 0. \nIt can be shown that 0 is the optimal answer."
            },
            {
                "Input": "** nums = [5,3,2,10,15], x = 1",
                "Output": "** 1",
                "Explanation": "** We can select nums[1] = 3 and nums[2] = 2.\nThey are at least 1 index apart, and their absolute difference is the minimum, 1.\nIt can be shown that 1 is the optimal answer."
            },
            {
                "Input": "** nums = [1,2,3,4], x = 3",
                "Output": "** 3",
                "Explanation": "** We can select nums[0] = 1 and nums[3] = 4.\nThey are at least 3 indices apart, and their absolute difference is the minimum, 3.\nIt can be shown that 3 is the optimal answer."
            }
        ]
    },
    {
        "Title": "Apply Operations to Maximize Score",
        "slug": "apply-operations-to-maximize-score",
        "description": "You are given an array `nums` of `n` positive integers and an integer `k`.\n\n\nInitially, you start with a score of `1`. You have to maximize your score by applying the following operation at most `k` times:\n\n\n Choose any **non-empty** subarray `nums[l, ..., r]` that you haven't chosen previously.\n Choose an element `x` of `nums[l, ..., r]` with the highest **prime score**. If multiple such elements exist, choose the one with the smallest index.\n Multiply your score by `x`.\n\n\nHere, `nums[l, ..., r]` denotes the subarray of `nums` starting at index `l` and ending at the index `r`, both ends being inclusive.\n\n\nThe **prime score** of an integer `x` is equal to the number of distinct prime factors of `x`. For example, the prime score of `300` is `3` since `300 = 2 * 2 * 3 * 5 * 5`.\n\n\nReturn *the **maximum possible score** after applying at most* `k` *operations*.\n\n\nSince the answer may be large, return it modulo `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Stack",
            "Greedy",
            "Monotonic Stack",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [8,3,9,3,8], k = 2",
                "Output": "** 81",
                "Explanation": "** To get a score of 81, we can apply the following operations:\n- Choose subarray nums[2, ..., 2]. nums[2] is the only element in this subarray. Hence, we multiply the score by nums[2]. The score becomes 1 * 9 = 9.\n- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 1, but nums[2] has the smaller index. Hence, we multiply the score by nums[2]. The score becomes 9 * 9 = 81.\nIt can be proven that 81 is the highest score one can obtain."
            },
            {
                "Input": "** nums = [19,12,14,6,10,18], k = 3",
                "Output": "** 4788",
                "Explanation": "** To get a score of 4788, we can apply the following operations: \n- Choose subarray nums[0, ..., 0]. nums[0] is the only element in this subarray. Hence, we multiply the score by nums[0]. The score becomes 1 * 19 = 19.\n- Choose subarray nums[5, ..., 5]. nums[5] is the only element in this subarray. Hence, we multiply the score by nums[5]. The score becomes 19 * 18 = 342.\n- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 2, but nums[2] has the smaller index. Hence, we multipy the score by nums[2]. The score becomes 342 * 14 = 4788.\nIt can be proven that 4788 is the highest score one can obtain."
            }
        ]
    },
    {
        "Title": "Count Pairs Whose Sum is Less than Target",
        "slug": "count-pairs-whose-sum-is-less-than-target",
        "description": "Given a **0-indexed** integer array `nums` of length `n` and an integer `target`, return *the number of pairs* `(i, j)` *where* `0 <= i < j < n` *and* `nums[i] + nums[j] < target`.\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [-1,1,2,3,1], target = 2",
                "Output": "** 3",
                "Explanation": "** There are 3 pairs of indices that satisfy the conditions in the statement:\n- (0, 1) since 0 < 1 and nums[0] + nums[1] = 0 < target\n- (0, 2) since 0 < 2 and nums[0] + nums[2] = 1 < target \n- (0, 4) since 0 < 4 and nums[0] + nums[4] = 0 < target\nNote that (0, 3) is not counted since nums[0] + nums[3] is not strictly less than the target."
            },
            {
                "Input": "** nums = [-6,2,5,-2,-7,-1,3], target = -2",
                "Output": "** 10",
                "Explanation": "** There are 10 pairs of indices that satisfy the conditions in the statement:\n- (0, 1) since 0 < 1 and nums[0] + nums[1] = -4 < target\n- (0, 3) since 0 < 3 and nums[0] + nums[3] = -8 < target\n- (0, 4) since 0 < 4 and nums[0] + nums[4] = -13 < target\n- (0, 5) since 0 < 5 and nums[0] + nums[5] = -7 < target\n- (0, 6) since 0 < 6 and nums[0] + nums[6] = -3 < target\n- (1, 4) since 1 < 4 and nums[1] + nums[4] = -5 < target\n- (3, 4) since 3 < 4 and nums[3] + nums[4] = -9 < target\n- (3, 5) since 3 < 5 and nums[3] + nums[5] = -3 < target\n- (4, 5) since 4 < 5 and nums[4] + nums[5] = -8 < target\n- (4, 6) since 4 < 6 and nums[4] + nums[6] = -4 < target"
            }
        ]
    },
    {
        "Title": "Make String a Subsequence Using Cyclic Increments",
        "slug": "make-string-a-subsequence-using-cyclic-increments",
        "description": "You are given two **0-indexed** strings `str1` and `str2`.\n\n\nIn an operation, you select a **set** of indices in `str1`, and for each index `i` in the set, increment `str1[i]` to the next character **cyclically**. That is `'a'` becomes `'b'`, `'b'` becomes `'c'`, and so on, and `'z'` becomes `'a'`.\n\n\nReturn `true` *if it is possible to make* `str2` *a subsequence of* `str1` *by performing the operation **at most once***, *and* `false` *otherwise*.\n\n\nNote:** A subsequence of a string is a new string that is formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "examples": [
            {
                "Input": "** str1 = \"abc\", str2 = \"ad\"",
                "Output": "** true",
                "Explanation": "** Select index 2 in str1.\nIncrement str1[2] to become 'd'. \nHence, str1 becomes \"abd\" and str2 is now a subsequence. Therefore, true is returned."
            },
            {
                "Input": "** str1 = \"zc\", str2 = \"ad\"",
                "Output": "** true",
                "Explanation": "** Select indices 0 and 1 in str1. \nIncrement str1[0] to become 'a'. \nIncrement str1[1] to become 'd'. \nHence, str1 becomes \"ad\" and str2 is now a subsequence. Therefore, true is returned."
            },
            {
                "Input": "** str1 = \"ab\", str2 = \"d\"",
                "Output": "** false",
                "Explanation": "** In this example, it can be shown that it is impossible to make str2 a subsequence of str1 using the operation at most once. \nTherefore, false is returned."
            }
        ]
    },
    {
        "Title": "Sorting Three Groups",
        "slug": "sorting-three-groups",
        "description": "You are given an integer array `nums`. Each element in `nums` is 1, 2 or 3. In each operation, you can remove an element from\u00a0`nums`. Return the **minimum** number of operations to make `nums` **non-decreasing**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [2,1,3,2,1]",
                "Output": "** 3",
                "Explanation": "**\n\n\nOne of the optimal solutions is to remove `nums[0]`, `nums[2]` and `nums[3]`."
            },
            {
                "Input": "** nums = [1,3,2,1,3,3]",
                "Output": "** 2",
                "Explanation": "**\n\n\nOne of the optimal solutions is to remove `nums[1]` and `nums[2]`."
            },
            {
                "Input": "** nums = [2,2,2,2,3,3]",
                "Output": "** 0",
                "Explanation": "**\n\n\n`nums` is already non-decreasing.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 3`\n\n\n\u00a0\n\n\n**Follow-up:** Can you come up with an algorithm that runs in `O(n)` time complexity?Hints:\n    0. The problem asks to change the array nums to make it sorted (i.e., all the 1s are on the left of 2s, and all the 2s are on the left of 3s.).\n    1. We can try all the possibilities to make nums indices range in [0, i) to 0 and [i, j) to 1 and [j, n) to 2. Note the ranges are left-close and right-open; each might be empty. Namely, 0 <= i <= j <= n.\n    2. Count the changes we need for each possibility by comparing the expected and original values at each index position."
            }
        ]
    },
    {
        "Title": "Number of Beautiful Integers in the Range",
        "slug": "number-of-beautiful-integers-in-the-range",
        "description": "You are given positive integers `low`, `high`, and `k`.\n\n\nA number is **beautiful** if it meets both of the following conditions:\n\n\n The count of even digits in the number is equal to the count of odd digits.\n The number is divisible by `k`.\n\n\nReturn *the number of beautiful integers in the range* `[low, high]`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** low = 10, high = 20, k = 3",
                "Output": "** 2",
                "Explanation": "** There are 2 beautiful integers in the given range: [12,18]. \n- 12 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 3.\n- 18 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 3.\nAdditionally we can see that:\n- 16 is not beautiful because it is not divisible by k = 3.\n- 15 is not beautiful because it does not contain equal counts even and odd digits.\nIt can be shown that there are only 2 beautiful integers in the given range."
            },
            {
                "Input": "** low = 1, high = 10, k = 1",
                "Output": "** 1",
                "Explanation": "** There is 1 beautiful integer in the given range: [10].\n- 10 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 1.\nIt can be shown that there is only 1 beautiful integer in the given range."
            },
            {
                "Input": "** low = 5, high = 5, k = 2",
                "Output": "** 0",
                "Explanation": "** There are 0 beautiful integers in the given range.\n- 5 is not beautiful because it is not divisible by k = 2 and it does not contain equal even and odd digits."
            }
        ]
    },
    {
        "Title": "Check if a String Is an Acronym of Words",
        "slug": "check-if-a-string-is-an-acronym-of-words",
        "description": "Given an array of strings `words` and a string `s`, determine if `s` is an **acronym** of words.\n\n\nThe string `s` is considered an acronym of `words` if it can be formed by concatenating the **first** character of each string in `words` **in order**. For example, `\"ab\"` can be formed from `[\"apple\", \"banana\"]`, but it can't be formed from `[\"bear\", \"aardvark\"]`.\n\n\nReturn `true` *if* `s` *is an acronym of* `words`*, and* `false` *otherwise.* \n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "examples": [
            {
                "Input": "** words = [\"alice\",\"bob\",\"charlie\"], s = \"abc\"",
                "Output": "** true",
                "Explanation": "** The first character in the words \"alice\", \"bob\", and \"charlie\" are 'a', 'b', and 'c', respectively. Hence, s = \"abc\" is the acronym."
            },
            {
                "Input": "** words = [\"an\",\"apple\"], s = \"a\"",
                "Output": "** false",
                "Explanation": "** The first character in the words \"an\" and \"apple\" are 'a' and 'a', respectively. \nThe acronym formed by concatenating these characters is \"aa\". \nHence, s = \"a\" is not the acronym."
            },
            {
                "Input": "** words = [\"never\",\"gonna\",\"give\",\"up\",\"on\",\"you\"], s = \"ngguoy\"",
                "Output": "** true",
                "Explanation": "** By concatenating the first character of the words in the array, we get the string \"ngguoy\". \nHence, s = \"ngguoy\" is the acronym."
            }
        ]
    },
    {
        "Title": "Determine the Minimum Sum of a k-avoiding Array",
        "slug": "determine-the-minimum-sum-of-a-k-avoiding-array",
        "description": "You are given two integers,\u00a0`n` and `k`.\n\n\nAn array of **distinct** positive integers is called a **k-avoiding** array if there does not exist any pair of distinct elements that sum to `k`.\n\n\nReturn *the **minimum** possible sum of a k-avoiding array of length* `n`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** n = 5, k = 4",
                "Output": "** 18",
                "Explanation": "** Consider the k-avoiding array [1,2,4,5,6], which has a sum of 18.\nIt can be proven that there is no k-avoiding array with a sum less than 18."
            },
            {
                "Input": "** n = 2, k = 6",
                "Output": "** 3",
                "Explanation": "** We can construct the array [1,2], which has a sum of 3.\nIt can be proven that there is no k-avoiding array with a sum less than 3."
            }
        ]
    },
    {
        "Title": "Maximize the Profit as the Salesman",
        "slug": "maximize-the-profit-as-the-salesman",
        "description": "You are given an integer `n` representing the number of houses on a number line, numbered from `0` to `n - 1`.\n\n\nAdditionally, you are given a 2D integer array `offers` where `offers[i] = [starti, endi, goldi]`, indicating that `ith` buyer wants to buy all the houses from `starti` to `endi` for `goldi` amount of gold.\n\n\nAs a salesman, your goal is to **maximize** your earnings by strategically selecting and selling houses to buyers.\n\n\nReturn *the maximum amount of gold you can earn*.\n\n\nNote** that different buyers can't buy the same house, and some houses may remain unsold.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Dynamic Programming",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** n = 5, offers = [[0,0,1],[0,2,2],[1,3,2]]",
                "Output": "** 3",
                "Explanation": "** There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.\nWe sell houses in the range [0,0] to 1st buyer for 1 gold and houses in the range [1,3] to 3rd buyer for 2 golds.\nIt can be proven that 3 is the maximum amount of gold we can achieve."
            },
            {
                "Input": "** n = 5, offers = [[0,0,1],[0,2,10],[1,3,2]]",
                "Output": "** 10",
                "Explanation": "** There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.\nWe sell houses in the range [0,2] to 2nd buyer for 10 golds.\nIt can be proven that 10 is the maximum amount of gold we can achieve."
            }
        ]
    },
    {
        "Title": "Find the Longest Equal Subarray",
        "slug": "find-the-longest-equal-subarray",
        "description": "You are given a **0-indexed** integer array `nums` and an integer `k`.\n\n\nA subarray is called **equal** if all of its elements are equal. Note that the empty subarray is an **equal** subarray.\n\n\nReturn *the length of the **longest** possible equal subarray after deleting **at most*** `k` *elements from* `nums`.\n\n\nA **subarray** is a contiguous, possibly empty sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,2,3,1,3], k = 3",
                "Output": "** 3",
                "Explanation": "** It's optimal to delete the elements at index 2 and index 4.\nAfter deleting them, nums becomes equal to [1, 3, 3, 3].\nThe longest equal subarray starts at i = 1 and ends at j = 3 with length equal to 3.\nIt can be proven that no longer equal subarrays can be created."
            },
            {
                "Input": "** nums = [1,1,2,2,1,1], k = 2",
                "Output": "** 4",
                "Explanation": "** It's optimal to delete the elements at index 2 and index 3.\nAfter deleting them, nums becomes equal to [1, 1, 1, 1].\nThe array itself is an equal subarray, so the answer is 4.\nIt can be proven that no longer equal subarrays can be created."
            }
        ]
    },
    {
        "Title": "Furthest Point From Origin",
        "slug": "furthest-point-from-origin",
        "description": "You are given a string `moves` of length `n` consisting only of characters `'L'`, `'R'`, and `'_'`. The string represents your movement on a number line starting from the origin `0`.\n\n\nIn the `ith` move, you can choose one of the following directions:\n\n\n move to the left if `moves[i] = 'L'` or `moves[i] = '_'`\n move to the right if `moves[i] = 'R'` or `moves[i] = '_'`\n\n\nReturn *the **distance from the origin** of the **furthest** point you can get to after* `n` *moves*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** moves = \"L_RL__R\"",
                "Output": "** 3",
                "Explanation": "** The furthest point we can reach from the origin 0 is point -3 through the following sequence of moves \"LLRLLLR\"."
            },
            {
                "Input": "** moves = \"_R__LL_\"",
                "Output": "** 5",
                "Explanation": "** The furthest point we can reach from the origin 0 is point -5 through the following sequence of moves \"LRLLLLL\"."
            },
            {
                "Input": "** moves = \"_______\"",
                "Output": "** 7",
                "Explanation": "** The furthest point we can reach from the origin 0 is point 7 through the following sequence of moves \"RRRRRRR\"."
            }
        ]
    },
    {
        "Title": "Find the Minimum Possible Sum of a Beautiful Array",
        "slug": "find-the-minimum-possible-sum-of-a-beautiful-array",
        "description": "You are given positive integers `n` and `target`.\n\n\nAn array `nums` is **beautiful** if it meets the following conditions:\n\n\n `nums.length == n`.\n `nums` consists of pairwise **distinct** **positive** integers.\n There doesn't exist two **distinct** indices, `i` and `j`, in the range `[0, n - 1]`, such that `nums[i] + nums[j] == target`.\n\n\nReturn *the **minimum** possible sum that a beautiful array could have modulo* `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** n = 2, target = 3",
                "Output": "** 4",
                "Explanation": "** We can see that nums = [1,3] is beautiful.\n- The array nums has length n = 2.\n- The array nums consists of pairwise distinct positive integers.\n- There doesn't exist two distinct indices, i and j, with nums[i] + nums[j] == 3.\nIt can be proven that 4 is the minimum possible sum that a beautiful array could have."
            },
            {
                "Input": "** n = 3, target = 3",
                "Output": "** 8",
                "Explanation": "** We can see that nums = [1,3,4] is beautiful.\n- The array nums has length n = 3.\n- The array nums consists of pairwise distinct positive integers.\n- There doesn't exist two distinct indices, i and j, with nums[i] + nums[j] == 3.\nIt can be proven that 8 is the minimum possible sum that a beautiful array could have."
            },
            {
                "Input": "** n = 1, target = 1",
                "Output": "** 1",
                "Explanation": "** We can see, that nums = [1] is beautiful."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Form Subsequence With Target Sum",
        "slug": "minimum-operations-to-form-subsequence-with-target-sum",
        "description": "You are given a **0-indexed** array `nums` consisting of **non-negative** powers of `2`, and an integer `target`.\n\n\nIn one operation, you must apply the following changes to the array:\n\n\n Choose any element of the array `nums[i]` such that `nums[i] > 1`.\n Remove `nums[i]` from the array.\n Add **two** occurrences of `nums[i] / 2` to the **end** of `nums`.\n\n\nReturn the ***minimum number of operations** you need to perform so that* `nums` *contains a **subsequence** whose elements sum to* `target`. If it is impossible to obtain such a subsequence, return `-1`.\n\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,8], target = 7",
                "Output": "** 1",
                "Explanation": "** In the first operation, we choose element nums[2]. The array becomes equal to nums = [1,2,4,4].\nAt this stage, nums contains the subsequence [1,2,4] which sums up to 7.\nIt can be shown that there is no shorter sequence of operations that results in a subsequnce that sums up to 7."
            },
            {
                "Input": "** nums = [1,32,1,2], target = 12",
                "Output": "** 2",
                "Explanation": "** In the first operation, we choose element nums[1]. The array becomes equal to nums = [1,1,2,16,16].\nIn the second operation, we choose element nums[3]. The array becomes equal to nums = [1,1,2,16,8,8]\nAt this stage, nums contains the subsequence [1,1,2,8] which sums up to 12.\nIt can be shown that there is no shorter sequence of operations that results in a subsequence that sums up to 12."
            },
            {
                "Input": "** nums = [1,32,1], target = 35",
                "Output": "** -1",
                "Explanation": "** It can be shown that no sequence of operations results in a subsequence that sums up to 35."
            }
        ]
    },
    {
        "Title": "Maximize Value of Function in a Ball Passing Game",
        "slug": "maximize-value-of-function-in-a-ball-passing-game",
        "description": "You are given an integer array `receiver` of length `n` and an integer `k`. `n` players are playing a ball-passing game.\n\n\nYou choose the starting player, `i`. The game proceeds as follows: player `i` passes the ball to player `receiver[i]`, who then passes it to `receiver[receiver[i]]`, and so on, for `k` passes in total. The game's score is the sum of the indices of the players who touched the ball, including repetitions, i.e. `i + receiver[i] + receiver[receiver[i]] + ... + receiver(k)[i]`.\n\n\nReturn\u00a0the **maximum**\u00a0possible score.\n\n\nNotes:\n\n\n `receiver` may contain duplicates.\n `receiver[i]` may be equal to `i`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** receiver = [2,0,1], k = 4",
                "Output": "** 6",
                "Explanation": "**\n\n\nStarting with player `i = 2` the initial score is 2:\n\n\n\n\n| Pass | Sender Index | Receiver Index | Score |\n| --- | --- | --- | --- |\n| 1 | 2 | 1 | 3 |\n| 2 | 1 | 0 | 3 |\n| 3 | 0 | 2 | 5 |\n| 4 | 2 | 1 | 6 |"
            },
            {
                "Input": "** receiver = [1,1,1,2,3], k = 3",
                "Output": "** 10",
                "Explanation": "**\n\n\nStarting with player `i = 4` the initial score is 4:\n\n\n\n\n| Pass | Sender Index | Receiver Index | Score |\n| --- | --- | --- | --- |\n| 1 | 4 | 3 | 7 |\n| 2 | 3 | 2 | 9 |\n| 3 | 2 | 1 | 10 |\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= receiver.length == n <= 105`\n* `0 <= receiver[i] <= n - 1`\n* `1 <= k <= 1010`\n\n\nHints:\n    0. <div class=\"_1l1MA\">We can solve the problem using binary lifting.</div>\n    1. <div class=\"_1l1MA\">For each player with id <code>x</code> and for every <code>i</code> in the range <code>[0, ceil(log<sub>2</sub>k)]</code>, we can determine the last receiver's id and compute the sum of player ids who receive the ball after <code>2<sup>i</sup></code> passes, starting from <code>x</code>.</div>\n    2. <div class=\"_1l1MA\">Let <code>last_receiver[x][i] =</code> the last receiver's id after <code>2<sup>i</sup></code> passes, and <code>sum[x][i] =</code> the sum of player ids who receive the ball after <code>2<sup>i</sup></code> passes. For all <code>x</code> in the range <code>[0, n - 1]</code>, <code>last_receiver[x][0] = receiver[x]</code>, and <code>sum[x][0] = receiver[x]</code>.</div>\n    3. <div class=\"_1l1MA\">Then for <code>i</code> in range <code>[1, ceil(log<sub>2</sub>k)]</code>,\u00a0<code>last_receiver[x][i] = last_receiver[last_receiver[x][i - 1]][i - 1]</code> and <code>sum[x][i] = sum[x][i - 1] + sum[last_receiver[x][i - 1]][i - 1]</code>, for all <code>x</code> in the range <code>[0, n - 1]</code>.</div>\n    4. <div class=\"_1l1MA\">Starting from each player id <code>x</code>, we can now go through the powers of <code>2</code> in the binary representation of <code>k</code> and make jumps corresponding to each power, using the pre-computed values, to compute <code>f(x)</code>.</div>\n    5. <div class=\"_1l1MA\">The answer is the maximum <code>f(x)</code> from each player id.</div>\nSimilarQuestions: [1696]"
            }
        ]
    },
    {
        "Title": "Check if Strings Can be Made Equal With Operations I",
        "slug": "check-if-strings-can-be-made-equal-with-operations-i",
        "description": "You are given two strings `s1` and `s2`, both of length `4`, consisting of **lowercase** English letters.\n\n\nYou can apply the following operation on any of the two strings **any** number of times:\n\n\n Choose any two indices `i` and `j` such that `j - i = 2`, then **swap** the two characters at those indices in the string.\n\n\nReturn `true` *if you can make the strings* `s1` *and* `s2` *equal, and* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s1 = \"abcd\", s2 = \"cdab\"",
                "Output": "** true",
                "Explanation": "** We can do the following operations on s1:\n- Choose the indices i = 0, j = 2. The resulting string is s1 = \"cbad\".\n- Choose the indices i = 1, j = 3. The resulting string is s1 = \"cdab\" = s2."
            },
            {
                "Input": "** s1 = \"abcd\", s2 = \"dacb\"",
                "Output": "** false",
                "Explanation": "** It is not possible to make the two strings equal."
            }
        ]
    },
    {
        "Title": "Check if Strings Can be Made Equal With Operations II",
        "slug": "check-if-strings-can-be-made-equal-with-operations-ii",
        "description": "You are given two strings `s1` and `s2`, both of length `n`, consisting of **lowercase** English letters.\n\n\nYou can apply the following operation on **any** of the two strings **any** number of times:\n\n\n Choose any two indices `i` and `j` such that `i < j` and the difference `j - i` is **even**, then **swap** the two characters at those indices in the string.\n\n\nReturn `true` *if you can make the strings* `s1` *and* `s2` *equal, and*`false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** s1 = \"abcdba\", s2 = \"cabdab\"",
                "Output": "** true",
                "Explanation": "** We can apply the following operations on s1:\n- Choose the indices i = 0, j = 2. The resulting string is s1 = \"cbadba\".\n- Choose the indices i = 2, j = 4. The resulting string is s1 = \"cbbdaa\".\n- Choose the indices i = 1, j = 5. The resulting string is s1 = \"cabdab\" = s2."
            },
            {
                "Input": "** s1 = \"abe\", s2 = \"bea\"",
                "Output": "** false",
                "Explanation": "** It is not possible to make the two strings equal."
            }
        ]
    },
    {
        "Title": "Maximum Sum of Almost Unique Subarray",
        "slug": "maximum-sum-of-almost-unique-subarray",
        "description": "You are given an integer array `nums` and two positive integers `m` and `k`.\n\n\nReturn *the **maximum sum** out of all **almost unique** subarrays of length* `k` *of* `nums`. If no such subarray exists, return `0`.\n\n\nA subarray of `nums` is **almost unique** if it contains at least `m` distinct elements.\n\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [2,6,7,3,1,7], m = 3, k = 4",
                "Output": "** 18",
                "Explanation": "** There are 3 almost unique subarrays of size k = 4. These subarrays are [2, 6, 7, 3], [6, 7, 3, 1], and [7, 3, 1, 7]. Among these subarrays, the one with the maximum sum is [2, 6, 7, 3] which has a sum of 18."
            },
            {
                "Input": "** nums = [5,9,9,2,4,5,4], m = 1, k = 3",
                "Output": "** 23",
                "Explanation": "** There are 5 almost unique subarrays of size k. These subarrays are [5, 9, 9], [9, 9, 2], [9, 2, 4], [2, 4, 5], and [4, 5, 4]. Among these subarrays, the one with the maximum sum is [5, 9, 9] which has a sum of 23."
            },
            {
                "Input": "** nums = [1,2,1,2,1,2,1], m = 3, k = 3",
                "Output": "** 0",
                "Explanation": "** There are no subarrays of size k = 3 that contain at least m = 3 distinct elements in the given array [1,2,1,2,1,2,1]. Therefore, no almost unique subarrays exist, and the maximum sum is 0."
            }
        ]
    },
    {
        "Title": "Count K-Subsequences of a String With Maximum Beauty",
        "slug": "count-k-subsequences-of-a-string-with-maximum-beauty",
        "description": "You are given a string `s` and an integer `k`.\n\n\nA **k-subsequence** is a **subsequence** of `s`, having length `k`, and all its characters are **unique**, **i.e**., every character occurs once.\n\n\nLet `f(c)` denote the number of times the character `c` occurs in `s`.\n\n\nThe **beauty** of a **k-subsequence** is the **sum** of `f(c)` for every character `c` in the k-subsequence.\n\n\nFor example, consider `s = \"abbbdd\"` and `k = 2`:\n\n\n `f('a') = 1`, `f('b') = 3`, `f('d') = 2`\n Some k-subsequences of `s` are:\n\t+ `\"**ab**bbdd\"` -> `\"ab\"` having a beauty of `f('a') + f('b') = 4`\n\t+ `\"**a**bbb**d**d\"` -> `\"ad\"` having a beauty of `f('a') + f('d') = 3`\n\t+ `\"a**b**bb**d**d\"` -> `\"bd\"` having a beauty of `f('b') + f('d') = 5`\n\n\nReturn *an integer denoting the number of k-subsequences* *whose **beauty** is the **maximum** among all **k-subsequences***. Since the answer may be too large, return it modulo `109 + 7`.\n\n\nA subsequence of a string is a new string formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.\n\n\nNotes\n\n\n `f(c)` is the number of times a character `c` occurs in `s`, not a k-subsequence.\n Two k-subsequences are considered different if one is formed by an index that is not present in the other. So, two k-subsequences may form the same string.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "Math",
            "String",
            "Greedy",
            "Combinatorics"
        ],
        "examples": [
            {
                "Input": "** s = \"bcca\", k = 2",
                "Output": "** 4",
                "Explanation": "** From s we have f('a') = 1, f('b') = 1, and f('c') = 2.\nThe k-subsequences of s are: \n**bc**ca having a beauty of f('b') + f('c') = 3 \n**b**c**c**a having a beauty of f('b') + f('c') = 3 \n**b**cc**a** having a beauty of f('b') + f('a') = 2 \nb**c**c**a**having a beauty of f('c') + f('a') = 3\nbc**ca** having a beauty of f('c') + f('a') = 3 \nThere are 4 k-subsequences that have the maximum beauty, 3. \nHence, the answer is 4."
            },
            {
                "Input": "** s = \"abbcd\", k = 4",
                "Output": "** 2",
                "Explanation": "** From s we have f('a') = 1, f('b') = 2, f('c') = 1, and f('d') = 1. \nThe k-subsequences of s are: \n**ab**b**cd** having a beauty of f('a') + f('b') + f('c') + f('d') = 5\n**a**b**bcd** having a beauty of f('a') + f('b') + f('c') + f('d') = 5 \nThere are 2 k-subsequences that have the maximum beauty, 5. \nHence, the answer is 2."
            }
        ]
    },
    {
        "Title": "  Count Symmetric Integers",
        "slug": "count-symmetric-integers",
        "description": "You are given two positive integers `low` and `high`.\n\n\nAn integer `x` consisting of `2 * n` digits is **symmetric** if the sum of the first `n` digits of `x` is equal to the sum of the last `n` digits of `x`. Numbers with an odd number of digits are never symmetric.\n\n\nReturn *the **number of symmetric** integers in the range* `[low, high]`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** low = 1, high = 100",
                "Output": "** 9",
                "Explanation": "** There are 9 symmetric integers between 1 and 100: 11, 22, 33, 44, 55, 66, 77, 88, and 99."
            },
            {
                "Input": "** low = 1200, high = 1230",
                "Output": "** 4",
                "Explanation": "** There are 4 symmetric integers between 1200 and 1230: 1203, 1212, 1221, and 1230."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Make a Special Number",
        "slug": "minimum-operations-to-make-a-special-number",
        "description": "You are given a **0-indexed** string `num` representing a non-negative integer.\n\n\nIn one operation, you can pick any digit of `num` and delete it. Note that if you delete all the digits of `num`, `num` becomes `0`.\n\n\nReturn *the **minimum number of operations** required to make* `num` *special*.\n\n\nAn integer `x` is considered **special** if it is divisible by `25`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "String",
            "Greedy",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** num = \"2245047\"",
                "Output": "** 2",
                "Explanation": "** Delete digits num[5] and num[6]. The resulting number is \"22450\" which is special since it is divisible by 25.\nIt can be shown that 2 is the minimum number of operations required to get a special number."
            },
            {
                "Input": "** num = \"2908305\"",
                "Output": "** 3",
                "Explanation": "** Delete digits num[3], num[4], and num[6]. The resulting number is \"2900\" which is special since it is divisible by 25.\nIt can be shown that 3 is the minimum number of operations required to get a special number."
            },
            {
                "Input": "** num = \"10\"",
                "Output": "** 1",
                "Explanation": "** Delete digit num[0]. The resulting number is \"0\" which is special since it is divisible by 25.\nIt can be shown that 1 is the minimum number of operations required to get a special number."
            }
        ]
    },
    {
        "Title": "Count of Interesting Subarrays",
        "slug": "count-of-interesting-subarrays",
        "description": "You are given a **0-indexed** integer array `nums`, an integer `modulo`, and an integer `k`.\n\n\nYour task is to find the count of subarrays that are **interesting**.\n\n\nA **subarray** `nums[l..r]` is **interesting** if the following condition holds:\n\n\n Let `cnt` be the number of indices `i` in the range `[l, r]` such that `nums[i] % modulo == k`. Then, `cnt % modulo == k`.\n\n\nReturn *an integer denoting the count of interesting subarrays.* \n\n\nNote:** A subarray is *a contiguous non-empty sequence of elements within an array*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [3,2,4], modulo = 2, k = 1",
                "Output": "** 3",
                "Explanation": "** In this example the interesting subarrays are: \nThe subarray nums[0..0] which is [3]. \n- There is only one index, i = 0, in the range [0, 0] that satisfies nums[i] % modulo == k. \n- Hence, cnt = 1 and cnt % modulo == k.  \nThe subarray nums[0..1] which is [3,2].\n- There is only one index, i = 0, in the range [0, 1] that satisfies nums[i] % modulo == k.  \n- Hence, cnt = 1 and cnt % modulo == k.\nThe subarray nums[0..2] which is [3,2,4]. \n- There is only one index, i = 0, in the range [0, 2] that satisfies nums[i] % modulo == k. \n- Hence, cnt = 1 and cnt % modulo == k. \nIt can be shown that there are no other interesting subarrays. So, the answer is 3."
            },
            {
                "Input": "** nums = [3,1,9,6], modulo = 3, k = 0",
                "Output": "** 2",
                "Explanation": "** In this example the interesting subarrays are: \nThe subarray nums[0..3] which is [3,1,9,6]. \n- There are three indices, i = 0, 2, 3, in the range [0, 3] that satisfy nums[i] % modulo == k. \n- Hence, cnt = 3 and cnt % modulo == k. \nThe subarray nums[1..1] which is [1]. \n- There is no index, i, in the range [1, 1] that satisfies nums[i] % modulo == k. \n- Hence, cnt = 0 and cnt % modulo == k. \nIt can be shown that there are no other interesting subarrays. So, the answer is 2."
            }
        ]
    },
    {
        "Title": "Minimum Edge Weight Equilibrium Queries in a Tree",
        "slug": "minimum-edge-weight-equilibrium-queries-in-a-tree",
        "description": "There is an undirected tree with `n` nodes labeled from `0` to `n - 1`. You are given the integer `n` and a 2D integer array `edges` of length `n - 1`, where `edges[i] = [ui, vi, wi]` indicates that there is an edge between nodes `ui` and `vi` with weight `wi` in the tree.\n\n\nYou are also given a 2D integer array `queries` of length `m`, where `queries[i] = [ai, bi]`. For each query, find the **minimum number of operations** required to make the weight of every edge on the path from `ai` to `bi` equal. In one operation, you can choose any edge of the tree and change its weight to any value.\n\n\nNote** that:\n\n\n Queries are **independent** of each other, meaning that the tree returns to its **initial state** on each new query.\n The path from `ai` to `bi` is a sequence of **distinct** nodes starting with node `ai` and ending with node `bi` such that every two adjacent nodes in the sequence share an edge in the tree.\n\n\nReturn *an array* `answer` *of length* `m` *where* `answer[i]` *is the answer to the* `ith` *query.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Tree",
            "Graph",
            "Strongly Connected Component"
        ],
        "examples": [
            {
                "Input": "** n = 7, edges = [[0,1,1],[1,2,1],[2,3,1],[3,4,2],[4,5,2],[5,6,2]], queries = [[0,3],[3,6],[2,6],[0,6]]",
                "Output": "** [0,0,1,3]",
                "Explanation": "** In the first query, all the edges in the path from 0 to 3 have a weight of 1. Hence, the answer is 0.\nIn the second query, all the edges in the path from 3 to 6 have a weight of 2. Hence, the answer is 0.\nIn the third query, we change the weight of edge [2,3] to 2. After this operation, all the edges in the path from 2 to 6 have a weight of 2. Hence, the answer is 1.\nIn the fourth query, we change the weights of edges [0,1], [1,2] and [2,3] to 2. After these operations, all the edges in the path from 0 to 6 have a weight of 2. Hence, the answer is 3.\nFor each queries[i], it can be shown that answer[i] is the minimum number of operations needed to equalize all the edge weights in the path from ai to bi."
            },
            {
                "Input": "** n = 8, edges = [[1,2,6],[1,3,4],[2,4,6],[2,5,3],[3,6,6],[3,0,8],[7,0,2]], queries = [[4,6],[0,4],[6,5],[7,4]]",
                "Output": "** [1,2,2,3]",
                "Explanation": "** In the first query, we change the weight of edge [1,3] to 6. After this operation, all the edges in the path from 4 to 6 have a weight of 6. Hence, the answer is 1.\nIn the second query, we change the weight of edges [0,3] and [3,1] to 6. After these operations, all the edges in the path from 0 to 4 have a weight of 6. Hence, the answer is 2.\nIn the third query, we change the weight of edges [1,3] and [5,2] to 6. After these operations, all the edges in the path from 6 to 5 have a weight of 6. Hence, the answer is 2.\nIn the fourth query, we change the weights of edges [0,7], [0,3] and [1,3] to 6. After these operations, all the edges in the path from 7 to 4 have a weight of 6. Hence, the answer is 3.\nFor each queries[i], it can be shown that answer[i] is the minimum number of operations needed to equalize all the edge weights in the path from ai to bi."
            }
        ]
    },
    {
        "Title": "Points That Intersect With Cars",
        "slug": "points-that-intersect-with-cars",
        "description": "You are given a **0-indexed** 2D integer array `nums` representing the coordinates of the cars parking on a number line. For any index `i`, `nums[i] = [starti, endi]` where `starti` is the starting point of the `ith` car and `endi` is the ending point of the `ith` car.\n\n\nReturn *the number of integer points on the line that are covered with **any part** of a car.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [[3,6],[1,5],[4,7]]",
                "Output": "** 7",
                "Explanation": "** All the points from 1 to 7 intersect at least one car, therefore the answer would be 7."
            },
            {
                "Input": "** nums = [[1,3],[5,8]]",
                "Output": "** 7",
                "Explanation": "** Points intersecting at least one car are 1, 2, 3, 5, 6, 7, 8. There are a total of 7 points, therefore the answer would be 7."
            }
        ]
    },
    {
        "Title": "Determine if a Cell Is Reachable at a Given Time",
        "slug": "determine-if-a-cell-is-reachable-at-a-given-time",
        "description": "You are given four integers `sx`, `sy`, `fx`, `fy`, and a **non-negative** integer `t`.\n\n\nIn an infinite 2D grid, you start at the cell `(sx, sy)`. Each second, you **must** move to any of its adjacent cells.\n\n\nReturn `true` *if you can reach cell* `(fx, fy)` *after **exactly*** `t` ***seconds***, *or* `false` *otherwise*.\n\n\nA cell's **adjacent cells** are the 8 cells around it that share at least one corner with it. You can visit the same cell several times.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** sx = 2, sy = 4, fx = 7, fy = 7, t = 6",
                "Output": "** true",
                "Explanation": "** Starting at cell (2, 4), we can reach cell (7, 7) in exactly 6 seconds by going through the cells depicted in the picture above."
            },
            {
                "Input": "** sx = 3, sy = 1, fx = 7, fy = 3, t = 3",
                "Output": "** false",
                "Explanation": "** Starting at cell (3, 1), it takes at least 4 seconds to reach cell (7, 3) by going through the cells depicted in the picture above. Hence, we cannot reach cell (7, 3) at the third second."
            }
        ]
    },
    {
        "Title": "Minimum Moves to Spread Stones Over Grid",
        "slug": "minimum-moves-to-spread-stones-over-grid",
        "description": "You are given a **0-indexed** 2D integer matrix `grid` of size `3 * 3`, representing the number of stones in each cell. The grid contains exactly `9` stones, and there can be **multiple** stones in a single cell.\n\n\nIn one move, you can move a single stone from its current cell to any other cell if the two cells share a side.\n\n\nReturn *the **minimum number of moves** required to place one stone in each cell*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Breadth-First Search",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,1,0],[1,1,1],[1,2,1]]",
                "Output": "** 3",
                "Explanation": "** One possible sequence of moves to place one stone in each cell is: \n1- Move one stone from cell (2,1) to cell (2,2).\n2- Move one stone from cell (2,2) to cell (1,2).\n3- Move one stone from cell (1,2) to cell (0,2).\nIn total, it takes 3 moves to place one stone in each cell of the grid.\nIt can be shown that 3 is the minimum number of moves required to place one stone in each cell."
            },
            {
                "Input": "** grid = [[1,3,0],[1,0,0],[1,0,3]]",
                "Output": "** 4",
                "Explanation": "** One possible sequence of moves to place one stone in each cell is:\n1- Move one stone from cell (0,1) to cell (0,2).\n2- Move one stone from cell (0,1) to cell (1,1).\n3- Move one stone from cell (2,2) to cell (1,2).\n4- Move one stone from cell (2,2) to cell (2,1).\nIn total, it takes 4 moves to place one stone in each cell of the grid.\nIt can be shown that 4 is the minimum number of moves required to place one stone in each cell."
            }
        ]
    },
    {
        "Title": "String Transformation",
        "slug": "string-transformation",
        "description": "You are given two strings `s` and `t` of equal length `n`. You can perform the following operation on the string `s`:\n\n\n Remove a **suffix** of `s` of length `l` where `0 < l < n` and append it at the start of `s`.  \n\n For example, let `s = 'abcd'` then in one operation you can remove the suffix `'cd'` and append it in front of `s` making `s = 'cdab'`.\n\n\nYou are also given an integer `k`. Return *the number of ways in which* `s` *can be transformed into* `t` *in **exactly*** `k` *operations.\n\n\nSince the answer can be large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "String",
            "Dynamic Programming",
            "String Matching"
        ],
        "examples": [
            {
                "Input": "** s = \"abcd\", t = \"cdab\", k = 2",
                "Output": "** 2",
                "Explanation": "** \nFirst way:\nIn first operation, choose suffix from index = 3, so resulting s = \"dabc\".\nIn second operation, choose suffix from index = 3, so resulting s = \"cdab\".\n\nSecond way:\nIn first operation, choose suffix from index = 1, so resulting s = \"bcda\".\nIn second operation, choose suffix from index = 1, so resulting s = \"cdab\"."
            },
            {
                "Input": "** s = \"ababab\", t = \"ababab\", k = 1",
                "Output": "** 2",
                "Explanation": "** \nFirst way:\nChoose suffix from index = 2, so resulting s = \"ababab\".\n\nSecond way:\nChoose suffix from index = 4, so resulting s = \"ababab\"."
            }
        ]
    },
    {
        "Title": "Minimum Right Shifts to Sort the Array",
        "slug": "minimum-right-shifts-to-sort-the-array",
        "description": "You are given a **0-indexed** array `nums` of length `n` containing **distinct** positive integers. Return *the **minimum** number of **right shifts** required to sort* `nums` *and* `-1` *if this is not possible.\n\n\nA **right shift** is defined as shifting the element at index `i` to index `(i + 1) % n`, for all indices.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [3,4,5,1,2]",
                "Output": "** 2",
                "Explanation": "** \nAfter the first right shift, nums = [2,3,4,5,1].\nAfter the second right shift, nums = [1,2,3,4,5].\nNow nums is sorted; therefore the answer is 2."
            },
            {
                "Input": "** nums = [1,3,5]",
                "Output": "** 0",
                "Explanation": "** nums is already sorted therefore, the answer is 0."
            },
            {
                "Input": "** nums = [2,1,4]",
                "Output": "** -1",
                "Explanation": "** It's impossible to sort the array using right shifts."
            }
        ]
    },
    {
        "Title": "Minimum Array Length After Pair Removals",
        "slug": "minimum-array-length-after-pair-removals",
        "description": "Given an integer array `num` sorted in non-decreasing order.\n\n\nYou can perform the following operation any number of times:\n\n\n Choose **two** indices, `i` and `j`, where `nums[i] < nums[j]`.\n Then, remove the elements at indices `i` and `j` from `nums`. The remaining elements retain their original order, and the array is re-indexed.\n\n\nReturn the **minimum** length of `nums` after applying the operation zero or more times.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers",
            "Binary Search",
            "Greedy",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 0",
                "Explanation": "**\n\n\n![](https://assets.leetcode.com/uploads/2024/05/18/tcase1.gif)"
            },
            {
                "Input": "** nums = [1,1,2,2,3,3]",
                "Output": "** 0",
                "Explanation": "**\n\n\n![](https://assets.leetcode.com/uploads/2024/05/19/tcase2.gif)"
            },
            {
                "Input": "** nums = [1000000000,1000000000]",
                "Output": "** 2",
                "Explanation": "**\n\n\nSince both numbers are equal, they cannot be removed."
            },
            {
                "Input": "** nums = [2,3,4,4,4]",
                "Output": "** 1",
                "Explanation": "**\n\n\n![](https://assets.leetcode.com/uploads/2024/05/19/tcase3.gif)\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* `nums` is sorted in **non-decreasing** order.\n\n\nHints:\n    0. To minimize the length of the array, we should maximize the number of operations performed.\n    1. To perform <code>k</code> operations, it is optimal to use the smallest <code>k</code> values and the largest <code>k</code> values in <code>nums</code>.\n    2. What is the best way to make pairs from the smallest <code>k</code> values and the largest <code>k</code> values so it is possible to remove all the pairs?\n    3. If we consider the smallest <code>k</code> values and the largest <code>k</code> values as two separate <strong>sorted 0-indexed</strong> arrays, <code>a</code> and <code>b</code>, It is optimal to pair <code>a[i]</code> and <code>b[i]</code>. So, a <code>k</code> is valid if <code>a[i] < b[i]</code> for all <code>i</code> in the range <code>[0, k - 1]</code>.\n    4. The greatest possible valid <code>k</code> can be found using binary search.\n    5. The answer is <code>nums.length - 2 * k</code>.\nSimilarQuestions: [2576]"
            }
        ]
    },
    {
        "Title": "Count Pairs of Points With Distance k",
        "slug": "count-pairs-of-points-with-distance-k",
        "description": "You are given a **2D** integer array `coordinates` and an integer `k`, where `coordinates[i] = [xi, yi]` are the coordinates of the `ith` point in a 2D plane.\n\n\nWe define the **distance** between two points `(x1, y1)` and `(x2, y2)` as `(x1 XOR x2) + (y1 XOR y2)` where `XOR` is the bitwise `XOR` operation.\n\n\nReturn *the number of pairs* `(i, j)` *such that* `i < j` *and the distance between points* `i` *and* `j` *is equal to* `k`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** coordinates = [[1,2],[4,2],[1,3],[5,2]], k = 5",
                "Output": "** 2",
                "Explanation": "** We can choose the following pairs:\n- (0,1): Because we have (1 XOR 4) + (2 XOR 2) = 5.\n- (2,3): Because we have (1 XOR 5) + (3 XOR 2) = 5."
            },
            {
                "Input": "** coordinates = [[1,3],[1,3],[1,3],[1,3],[1,3]], k = 0",
                "Output": "** 10",
                "Explanation": "** Any two chosen pairs will have a distance of 0. There are 10 ways to choose two pairs."
            }
        ]
    },
    {
        "Title": "Minimum Edge Reversals So Every Node Is Reachable",
        "slug": "minimum-edge-reversals-so-every-node-is-reachable",
        "description": "There is a **simple directed graph** with `n` nodes labeled from `0` to `n - 1`. The graph would form a **tree** if its edges were bi-directional.\n\n\nYou are given an integer `n` and a **2D** integer array `edges`, where `edges[i] = [ui, vi]` represents a **directed edge** going from node `ui` to node `vi`.\n\n\nAn **edge reversal** changes the direction of an edge, i.e., a directed edge going from node `ui` to node `vi` becomes a directed edge going from node `vi` to node `ui`.\n\n\nFor every node `i` in the range `[0, n - 1]`, your task is to **independently** calculate the **minimum** number of **edge reversals** required so it is possible to reach any other node starting from node `i` through a **sequence** of **directed edges**.\n\n\nReturn *an integer array* `answer`*, where* `answer[i]` *is the* ***minimum** number of **edge reversals** required so it is possible to reach any other node starting from node* `i` *through a **sequence** of **directed edges**.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Depth-First Search",
            "Breadth-First Search",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** n = 4, edges = [[2,0],[2,1],[1,3]]",
                "Output": "** [1,1,0,2]",
                "Explanation": "** The image above shows the graph formed by the edges.\nFor node 0: after reversing the edge [2,0], it is possible to reach any other node starting from node 0.\nSo, answer[0] = 1.\nFor node 1: after reversing the edge [2,1], it is possible to reach any other node starting from node 1.\nSo, answer[1] = 1.\nFor node 2: it is already possible to reach any other node starting from node 2.\nSo, answer[2] = 0.\nFor node 3: after reversing the edges [1,3] and [2,1], it is possible to reach any other node starting from node 3.\nSo, answer[3] = 2."
            },
            {
                "Input": "** n = 3, edges = [[1,2],[2,0]]",
                "Output": "** [2,0,1]",
                "Explanation": "** The image above shows the graph formed by the edges.\nFor node 0: after reversing the edges [2,0] and [1,2], it is possible to reach any other node starting from node 0.\nSo, answer[0] = 2.\nFor node 1: it is already possible to reach any other node starting from node 1.\nSo, answer[1] = 0.\nFor node 2: after reversing the edge [1, 2], it is possible to reach any other node starting from node 2.\nSo, answer[2] = 1."
            }
        ]
    },
    {
        "Title": "Sum of Values at Indices With K Set Bits",
        "slug": "sum-of-values-at-indices-with-k-set-bits",
        "description": "You are given a **0-indexed** integer array `nums` and an integer `k`.\n\n\nReturn *an integer that denotes the **sum** of elements in* `nums` *whose corresponding **indices** have **exactly*** `k` *set bits in their binary representation.\n\n\nThe **set bits** in an integer are the `1`'s present when it is written in binary.\n\n\n For example, the binary representation of `21` is `10101`, which has `3` set bits.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [5,10,1,5,2], k = 1",
                "Output": "** 13",
                "Explanation": "** The binary representation of the indices are: \n0 = 0002\n1 = 0012\n2 = 0102\n3 = 0112\n4 = 1002Indices 1, 2, and 4 have k = 1 set bits in their binary representation.\nHence, the answer is nums[1] + nums[2] + nums[4] = 13."
            },
            {
                "Input": "** nums = [4,3,2,1], k = 2",
                "Output": "** 1",
                "Explanation": "** The binary representation of the indices are:\n0 = 002\n1 = 012\n2 = 102\n3 = 112Only index 3 has k = 2 set bits in its binary representation.\nHence, the answer is nums[3] = 1."
            }
        ]
    },
    {
        "Title": "Happy Students",
        "slug": "happy-students",
        "description": "You are given a **0-indexed** integer array `nums` of length `n` where `n` is the total number of students in the class. The class teacher tries to select a group of students so that all the students remain happy.\n\n\nThe `ith` student will become happy if one of these two conditions is met:\n\n\n The student is selected and the total number of selected students is **strictly greater than** `nums[i]`.\n The student is not selected and the total number of selected students is **strictly** **less than** `nums[i]`.\n\n\nReturn *the number of ways to select a group of students so that everyone remains happy.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sorting",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** nums = [1,1]",
                "Output": "** 2",
                "Explanation": "** \nThe two possible ways are:\nThe class teacher selects no student.\nThe class teacher selects both students to form the group. \nIf the class teacher selects just one student to form a group then the both students will not be happy. Therefore, there are only two possible ways."
            },
            {
                "Input": "** nums = [6,0,3,3,6,7,2,7]",
                "Output": "** 3",
                "Explanation": "** \nThe three possible ways are:\nThe class teacher selects the student with index = 1 to form the group.\nThe class teacher selects the students with index = 1, 2, 3, 6 to form the group.\nThe class teacher selects all the students to form the group."
            }
        ]
    },
    {
        "Title": "Maximum Number of Alloys",
        "slug": "maximum-number-of-alloys",
        "description": "You are the owner of a company that creates alloys using various types of metals. There are `n` different types of metals available, and you have access to `k` machines that can be used to create alloys. Each machine requires a specific amount of each metal type to create an alloy.\n\n\nFor the `ith` machine to create an alloy, it needs `composition[i][j]` units of metal of type `j`. Initially, you have `stock[i]` units of metal type `i`, and purchasing one unit of metal type `i` costs `cost[i]` coins.\n\n\nGiven integers `n`, `k`, `budget`, a **1-indexed** 2D array `composition`, and **1-indexed** arrays `stock` and `cost`, your goal is to **maximize** the number of alloys the company can create while staying within the budget of `budget` coins.\n\n\nAll alloys must be created with the same machine.\n\n\nReturn *the maximum number of alloys that the company can create*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** n = 3, k = 2, budget = 15, composition = [[1,1,1],[1,1,10]], stock = [0,0,0], cost = [1,2,3]",
                "Output": "** 2",
                "Explanation": "** It is optimal to use the 1st machine to create alloys.\nTo create 2 alloys we need to buy the:\n- 2 units of metal of the 1st type.\n- 2 units of metal of the 2nd type.\n- 2 units of metal of the 3rd type.\nIn total, we need 2 * 1 + 2 * 2 + 2 * 3 = 12 coins, which is smaller than or equal to budget = 15.\nNotice that we have 0 units of metal of each type and we have to buy all the required units of metal.\nIt can be proven that we can create at most 2 alloys."
            },
            {
                "Input": "** n = 3, k = 2, budget = 15, composition = [[1,1,1],[1,1,10]], stock = [0,0,100], cost = [1,2,3]",
                "Output": "** 5",
                "Explanation": "** It is optimal to use the 2nd machine to create alloys.\nTo create 5 alloys we need to buy:\n- 5 units of metal of the 1st type.\n- 5 units of metal of the 2nd type.\n- 0 units of metal of the 3rd type.\nIn total, we need 5 * 1 + 5 * 2 + 0 * 3 = 15 coins, which is smaller than or equal to budget = 15.\nIt can be proven that we can create at most 5 alloys."
            },
            {
                "Input": "** n = 2, k = 3, budget = 10, composition = [[2,1],[1,2],[1,1]], stock = [1,1], cost = [5,5]",
                "Output": "** 2",
                "Explanation": "** It is optimal to use the 3rd machine to create alloys.\nTo create 2 alloys we need to buy the:\n- 1 unit of metal of the 1st type.\n- 1 unit of metal of the 2nd type.\nIn total, we need 1 * 5 + 1 * 5 = 10 coins, which is smaller than or equal to budget = 10.\nIt can be proven that we can create at most 2 alloys."
            }
        ]
    },
    {
        "Title": "Maximum Element-Sum of a Complete Subset of Indices",
        "slug": "maximum-element-sum-of-a-complete-subset-of-indices",
        "description": "You are given a **1****-indexed** array `nums`. Your task is to select a **complete subset** from `nums` where every pair of selected indices multiplied is a perfect square,. i. e. if you select `ai` and `aj`, `i * j` must be a perfect square.\n\n\nReturn the *sum* of the complete subset with the *maximum sum*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [8,7,3,5,7,2,4,9]",
                "Output": "** 16",
                "Explanation": "**\n\n\nWe select elements at indices 2 and 8 and `1 * 4` is a perfect square."
            },
            {
                "Input": "** nums = [8,10,3,8,1,13,7,9,4]",
                "Output": "** 20",
                "Explanation": "**\n\n\nWe select elements at indices 1, 4, and 9. `1 * 4`, `1 * 9`, `4 * 9` are perfect squares.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == nums.length <= 104`\n* `1 <= nums[i] <= 109`\n\n\nHints:\n    0. Define <strong>P(x)</strong> as the product of primes <strong>p</strong> with odd exponents in <strong>x</strong>'s factorization. Examples: For <code>x = 18</code>, factorization <code>2<sup>1</sup> \u00d7 3<sup>2</sup></code>, <strong>P(18) = 2</strong>; for <code>x = 45</code>, factorization <code>3<sup>2</sup> \u00d7 5<sup>1</sup></code>, <strong>P(45) = 5</strong>; for <code>x = 50</code>, factorization <code>2<sup>1</sup> \u00d7 5<sup>2</sup></code>, <strong>P(50) = 2</strong>; for <code>x = 210</code>, factorization <code>2<sup>1</sup> \u00d7 3<sup>1</sup> \u00d7 5<sup>1</sup> \u00d7 7<sup>1</sup></code>, <strong>P(210) = 210</strong>.\n    1. If <code>P(nums[i]) = P(nums[j])</code>, <code>nums[i]</code> and <code>nums[j]</code> can be grouped together.\n    2. Pick the group with the largest sum.\nSimilarQuestions: [1425, 1911]"
            }
        ]
    },
    {
        "Title": "Maximum Odd Binary Number",
        "slug": "maximum-odd-binary-number",
        "description": "You are given a **binary** string `s` that contains at least one `'1'`.\n\n\nYou have to **rearrange** the bits in such a way that the resulting binary number is the **maximum odd binary number** that can be created from this combination.\n\n\nReturn *a string representing the maximum odd binary number that can be created from the given combination.\n\n\nNote** that the resulting string **can** have leading zeros.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"010\"",
                "Output": "** \"001\"",
                "Explanation": "** Because there is just one '1', it must be in the last position. So the answer is \"001\"."
            },
            {
                "Input": "** s = \"0101\"",
                "Output": "** \"1001\"",
                "Explanation": "** One of the '1's must be in the last position. The maximum number that can be made with the remaining digits is \"100\". So the answer is \"1001\"."
            }
        ]
    },
    {
        "Title": "Beautiful Towers I",
        "slug": "beautiful-towers-i",
        "description": "You are given an array `heights` of `n` integers representing the number of bricks in `n` consecutive towers. Your task is to remove some bricks to form a **mountain-shaped** tower arrangement. In this arrangement, the tower heights are non-decreasing, reaching a maximum peak value with one or multiple consecutive towers and then non-increasing.\n\n\nReturn the **maximum possible sum** of heights of a mountain-shaped tower arrangement.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Stack",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** heights = [5,3,4,1,1]",
                "Output": "** 13",
                "Explanation": "**\n\n\nWe remove some bricks to make `heights =\u00a0[5,3,3,1,1]`, the peak is at index 0."
            },
            {
                "Input": "** heights = [6,5,3,9,2,7]",
                "Output": "** 22",
                "Explanation": "**\n\n\nWe remove some bricks to make `heights =\u00a0[3,3,3,9,2,2]`, the peak is at index 3."
            },
            {
                "Input": "** heights = [3,2,5,5,2,3]",
                "Output": "** 18",
                "Explanation": "**\n\n\nWe remove some bricks to make `heights = [2,2,5,5,2,2]`, the peak is at index 2 or 3.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == heights <= 103`\n* `1 <= heights[i] <= 109`\n\n\nHints:\n    0. Try all the possible indices <code>i</code> as the peak.\n    1. If <code>i</code> is the peak, <code>i-1<sup>th</sup></code> element, and <code>heights[j] = min(heights[j], heights[j + 1])</code> for <code>0 <= j < i </code>\n    2. If <code>i</code> is the peak, start from <code>i+1<sup>th</sup></code> element, heights[j] = min(heights[j], heights[j - 1]) for <code>i < j < heights.size()</code>\nSimilarQuestions: [941, 1671, 2355]"
            }
        ]
    },
    {
        "Title": "Beautiful Towers II",
        "slug": "beautiful-towers-ii",
        "description": "You are given a **0-indexed** array `maxHeights` of `n` integers.\n\n\nYou are tasked with building `n` towers in the coordinate line. The `ith` tower is built at coordinate `i` and has a height of `heights[i]`.\n\n\nA configuration of towers is **beautiful** if the following conditions hold:\n\n\n1. `1 <= heights[i] <= maxHeights[i]`\n2. `heights` is a **mountain** array.\n\n\nArray `heights` is a **mountain** if there exists an index `i` such that:\n\n\n For all `0 < j <= i`, `heights[j - 1] <= heights[j]`\n For all `i <= k < n - 1`, `heights[k + 1] <= heights[k]`\n\n\nReturn *the **maximum possible sum of heights** of a beautiful configuration of towers*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Stack",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** maxHeights = [5,3,4,1,1]",
                "Output": "** 13",
                "Explanation": "** One beautiful configuration with a maximum sum is heights = [5,3,3,1,1]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]  \n- heights is a mountain of peak i = 0.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 13."
            },
            {
                "Input": "** maxHeights = [6,5,3,9,2,7]",
                "Output": "** 22",
                "Explanation": "** One beautiful configuration with a maximum sum is heights = [3,3,3,9,2,2]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]\n- heights is a mountain of peak i = 3.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 22."
            },
            {
                "Input": "** maxHeights = [3,2,5,5,2,3]",
                "Output": "** 18",
                "Explanation": "** One beautiful configuration with a maximum sum is heights = [2,2,5,5,2,2]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]\n- heights is a mountain of peak i = 2. \nNote that, for this configuration, i = 3 can also be considered a peak.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 18."
            }
        ]
    },
    {
        "Title": "Count Valid Paths in a Tree",
        "slug": "count-valid-paths-in-a-tree",
        "description": "There is an undirected tree with `n` nodes labeled from `1` to `n`. You are given the integer `n` and a 2D integer array `edges` of length `n - 1`, where `edges[i] = [ui, vi]` indicates that there is an edge between nodes `ui` and `vi` in the tree.\n\n\nReturn *the **number of valid paths** in the tree*.\n\n\nA path `(a, b)` is **valid** if there exists **exactly one** prime number among the node labels in the path from `a` to `b`.\n\n\nNote** that:\n\n\n The path `(a, b)` is a sequence of **distinct** nodes starting with node `a` and ending with node `b` such that every two adjacent nodes in the sequence share an edge in the tree.\n Path `(a, b)` and path `(b, a)` are considered the **same** and counted only **once**.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Tree",
            "Depth-First Search",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** n = 5, edges = [[1,2],[1,3],[2,4],[2,5]]",
                "Output": "** 4",
                "Explanation": "** The pairs with exactly one prime number on the path between them are: \n- (1, 2) since the path from 1 to 2 contains prime number 2. \n- (1, 3) since the path from 1 to 3 contains prime number 3.\n- (1, 4) since the path from 1 to 4 contains prime number 2.\n- (2, 4) since the path from 2 to 4 contains prime number 2.\nIt can be shown that there are only 4 valid paths."
            },
            {
                "Input": "** n = 6, edges = [[1,2],[1,3],[2,4],[3,5],[3,6]]",
                "Output": "** 6",
                "Explanation": "** The pairs with exactly one prime number on the path between them are: \n- (1, 2) since the path from 1 to 2 contains prime number 2.\n- (1, 3) since the path from 1 to 3 contains prime number 3.\n- (1, 4) since the path from 1 to 4 contains prime number 2.\n- (1, 6) since the path from 1 to 6 contains prime number 3.\n- (2, 4) since the path from 2 to 4 contains prime number 2.\n- (3, 6) since the path from 3 to 6 contains prime number 3.\nIt can be shown that there are only 6 valid paths."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Collect Elements",
        "slug": "minimum-operations-to-collect-elements",
        "description": "You are given an array `nums` of positive integers and an integer `k`.\n\n\nIn one operation, you can remove the last element of the array and add it to your collection.\n\n\nReturn *the **minimum number of operations** needed to collect elements* `1, 2, ..., k`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [3,1,5,4,2], k = 2",
                "Output": "** 4",
                "Explanation": "** After 4 operations, we collect elements 2, 4, 5, and 1, in this order. Our collection contains elements 1 and 2. Hence, the answer is 4."
            },
            {
                "Input": "** nums = [3,1,5,4,2], k = 5",
                "Output": "** 5",
                "Explanation": "** After 5 operations, we collect elements 2, 4, 5, 1, and 3, in this order. Our collection contains elements 1 through 5. Hence, the answer is 5."
            },
            {
                "Input": "** nums = [3,2,5,3,1], k = 3",
                "Output": "** 4",
                "Explanation": "** After 4 operations, we collect elements 1, 3, 5, and 2, in this order. Our collection contains elements 1 through 3. Hence, the answer is 4."
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Make Array Empty",
        "slug": "minimum-number-of-operations-to-make-array-empty",
        "description": "You are given a **0-indexed** array `nums` consisting of positive integers.\n\n\nThere are two types of operations that you can apply on the array **any** number of times:\n\n\n Choose **two** elements with **equal** values and **delete** them from the array.\n Choose **three** elements with **equal** values and **delete** them from the array.\n\n\nReturn *the **minimum** number of operations required to make the array empty, or* `-1` *if it is not possible*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [2,3,3,2,2,4,2,3,4]",
                "Output": "** 4",
                "Explanation": "** We can apply the following operations to make the array empty:\n- Apply the first operation on the elements at indices 0 and 3. The resulting array is nums = [3,3,2,4,2,3,4].\n- Apply the first operation on the elements at indices 2 and 4. The resulting array is nums = [3,3,4,3,4].\n- Apply the second operation on the elements at indices 0, 1, and 3. The resulting array is nums = [4,4].\n- Apply the first operation on the elements at indices 0 and 1. The resulting array is nums = [].\nIt can be shown that we cannot make the array empty in less than 4 operations."
            },
            {
                "Input": "** nums = [2,1,2,2,3,3]",
                "Output": "** -1",
                "Explanation": "** It is impossible to empty the array."
            }
        ]
    },
    {
        "Title": "Split Array Into Maximum Number of Subarrays",
        "slug": "split-array-into-maximum-number-of-subarrays",
        "description": "You are given an array `nums` consisting of **non-negative** integers.\n\n\nWe define the score of subarray `nums[l..r]` such that `l <= r` as `nums[l] AND nums[l + 1] AND ... AND nums[r]` where **AND** is the bitwise `AND` operation.\n\n\nConsider splitting the array into one or more subarrays such that the following conditions are satisfied:\n\n\n **E****ach** element of the array belongs to **exactly** one subarray.\n The sum of scores of the subarrays is the **minimum** possible.\n\n\nReturn *the **maximum** number of subarrays in a split that satisfies the conditions above.\n\n\nA **subarray** is a contiguous part of an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [1,0,2,0,1,2]",
                "Output": "** 3",
                "Explanation": "** We can split the array into the following subarrays:\n- [1,0]. The score of this subarray is 1 AND 0 = 0.\n- [2,0]. The score of this subarray is 2 AND 0 = 0.\n- [1,2]. The score of this subarray is 1 AND 2 = 0.\nThe sum of scores is 0 + 0 + 0 = 0, which is the minimum possible score that we can obtain.\nIt can be shown that we cannot split the array into more than 3 subarrays with a total score of 0. So we return 3."
            },
            {
                "Input": "** nums = [5,7,1,3]",
                "Output": "** 1",
                "Explanation": "** We can split the array into one subarray: [5,7,1,3] with a score of 1, which is the minimum possible score that we can obtain.\nIt can be shown that we cannot split the array into more than 1 subarray with a total score of 1. So we return 1."
            }
        ]
    },
    {
        "Title": "Maximum Number of K-Divisible Components",
        "slug": "maximum-number-of-k-divisible-components",
        "description": "There is an undirected tree with `n` nodes labeled from `0` to `n - 1`. You are given the integer `n` and a 2D integer array `edges` of length `n - 1`, where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree.\n\n\nYou are also given a **0-indexed** integer array `values` of length `n`, where `values[i]` is the **value** associated with the `ith` node, and an integer `k`.\n\n\nA **valid split** of the tree is obtained by removing any set of edges, possibly empty, from the tree such that the resulting components all have values that are divisible by `k`, where the **value of a connected component** is the sum of the values of its nodes.\n\n\nReturn *the **maximum number of components** in any valid split*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Tree",
            "Depth-First Search"
        ],
        "examples": [
            {
                "Input": "** n = 5, edges = [[0,2],[1,2],[1,3],[2,4]], values = [1,8,1,4,4], k = 6",
                "Output": "** 2",
                "Explanation": "** We remove the edge connecting node 1 with 2. The resulting split is valid because:\n- The value of the component containing nodes 1 and 3 is values[1] + values[3] = 12.\n- The value of the component containing nodes 0, 2, and 4 is values[0] + values[2] + values[4] = 6.\nIt can be shown that no other valid split has more than 2 connected components."
            },
            {
                "Input": "** n = 7, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [3,0,6,1,5,2,1], k = 3",
                "Output": "** 3",
                "Explanation": "** We remove the edge connecting node 0 with 2, and the edge connecting node 0 with 1. The resulting split is valid because:\n- The value of the component containing node 0 is values[0] = 3.\n- The value of the component containing nodes 2, 5, and 6 is values[2] + values[5] + values[6] = 9.\n- The value of the component containing nodes 1, 3, and 4 is values[1] + values[3] + values[4] = 6.\nIt can be shown that no other valid split has more than 3 connected components."
            }
        ]
    },
    {
        "Title": "Maximum Value of an Ordered Triplet I",
        "slug": "maximum-value-of-an-ordered-triplet-i",
        "description": "You are given a **0-indexed** integer array `nums`.\n\n\nReturn ***the maximum value over all triplets of indices*** `(i, j, k)` *such that* `i < j < k`. If all such triplets have a negative value, return `0`.\n\n\nThe **value of a triplet of indices** `(i, j, k)` is equal to `(nums[i] - nums[j]) * nums[k]`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [12,6,1,2,7]",
                "Output": "** 77",
                "Explanation": "** The value of the triplet (0, 2, 4) is (nums[0] - nums[2]) * nums[4] = 77.\nIt can be shown that there are no ordered triplets of indices with a value greater than 77."
            },
            {
                "Input": "** nums = [1,10,3,4,19]",
                "Output": "** 133",
                "Explanation": "** The value of the triplet (1, 2, 4) is (nums[1] - nums[2]) * nums[4] = 133.\nIt can be shown that there are no ordered triplets of indices with a value greater than 133."
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 0",
                "Explanation": "** The only ordered triplet of indices (0, 1, 2) has a negative value of (nums[0] - nums[1]) * nums[2] = -3. Hence, the answer would be 0."
            }
        ]
    },
    {
        "Title": "Maximum Value of an Ordered Triplet II",
        "slug": "maximum-value-of-an-ordered-triplet-ii",
        "description": "You are given a **0-indexed** integer array `nums`.\n\n\nReturn ***the maximum value over all triplets of indices*** `(i, j, k)` *such that* `i < j < k`*.* If all such triplets have a negative value, return `0`.\n\n\nThe **value of a triplet of indices** `(i, j, k)` is equal to `(nums[i] - nums[j]) * nums[k]`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [12,6,1,2,7]",
                "Output": "** 77",
                "Explanation": "** The value of the triplet (0, 2, 4) is (nums[0] - nums[2]) * nums[4] = 77.\nIt can be shown that there are no ordered triplets of indices with a value greater than 77."
            },
            {
                "Input": "** nums = [1,10,3,4,19]",
                "Output": "** 133",
                "Explanation": "** The value of the triplet (1, 2, 4) is (nums[1] - nums[2]) * nums[4] = 133.\nIt can be shown that there are no ordered triplets of indices with a value greater than 133."
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 0",
                "Explanation": "** The only ordered triplet of indices (0, 1, 2) has a negative value of (nums[0] - nums[1]) * nums[2] = -3. Hence, the answer would be 0."
            }
        ]
    },
    {
        "Title": "Minimum Size Subarray in Infinite Array",
        "slug": "minimum-size-subarray-in-infinite-array",
        "description": "You are given a **0-indexed** array `nums` and an integer `target`.\n\n\nA **0-indexed** array `infinite_nums` is generated by infinitely appending the elements of `nums` to itself.\n\n\nReturn *the length of the **shortest** subarray of the array* `infinite_nums` *with a sum equal to* `target`*.* If there is no such subarray return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Sliding Window",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3], target = 5",
                "Output": "** 2",
                "Explanation": "** In this example infinite_nums = [1,2,3,1,2,3,1,2,...].\nThe subarray in the range [1,2], has the sum equal to target = 5 and length = 2.\nIt can be proven that 2 is the shortest length of a subarray with sum equal to target = 5."
            },
            {
                "Input": "** nums = [1,1,1,2,3], target = 4",
                "Output": "** 2",
                "Explanation": "** In this example infinite_nums = [1,1,1,2,3,1,1,1,2,3,1,1,...].\nThe subarray in the range [4,5], has the sum equal to target = 4 and length = 2.\nIt can be proven that 2 is the shortest length of a subarray with sum equal to target = 4."
            },
            {
                "Input": "** nums = [2,4,6,8], target = 3",
                "Output": "** -1",
                "Explanation": "** In this example infinite_nums = [2,4,6,8,2,4,6,8,...].\nIt can be proven that there is no subarray with sum equal to target = 3."
            }
        ]
    },
    {
        "Title": "Count Visited Nodes in a Directed Graph",
        "slug": "count-visited-nodes-in-a-directed-graph",
        "description": "There is a **directed** graph consisting of `n` nodes numbered from `0` to `n - 1` and `n` directed edges.\n\n\nYou are given a **0-indexed** array `edges` where `edges[i]` indicates that there is an edge from node `i` to node `edges[i]`.\n\n\nConsider the following process on the graph:\n\n\n You start from a node `x` and keep visiting other nodes through edges until you reach a node that you have already visited before on this **same** process.\n\n\nReturn *an array* `answer` *where* `answer[i]` *is the number of **different** nodes that you will visit if you perform the process starting from node* `i`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Graph",
            "Memoization"
        ],
        "examples": [
            {
                "Input": "** edges = [1,2,0,0]",
                "Output": "** [3,3,3,4]",
                "Explanation": "** We perform the process starting from each node in the following way:\n- Starting from node 0, we visit the nodes 0 -> 1 -> 2 -> 0. The number of different nodes we visit is 3.\n- Starting from node 1, we visit the nodes 1 -> 2 -> 0 -> 1. The number of different nodes we visit is 3.\n- Starting from node 2, we visit the nodes 2 -> 0 -> 1 -> 2. The number of different nodes we visit is 3.\n- Starting from node 3, we visit the nodes 3 -> 0 -> 1 -> 2 -> 0. The number of different nodes we visit is 4."
            },
            {
                "Input": "** edges = [1,2,3,4,0]",
                "Output": "** [5,5,5,5,5]",
                "Explanation": "** Starting from any node we can visit every node in the graph in the process."
            }
        ]
    },
    {
        "Title": "Create a DataFrame from List",
        "slug": "create-a-dataframe-from-list",
        "description": "Write a solution to **create** a DataFrame from a 2D list called `student_data`. This 2D list contains the IDs and ages of some students.\n\n\nThe DataFrame should have two columns, `student_id` and `age`, and be in the same order as the original 2D list.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "**student_data:[\n  [1, 15],\n  [2, 11],\n  [3, 11],\n  [4, 20]\n]",
                "Output": "**\n+------------+-----+\n| student_id | age |\n+------------+-----+\n| 1          | 15  |\n| 2          | 11  |\n| 3          | 11  |\n| 4          | 20  |\n+------------+-----+",
                "Explanation": "**\nA DataFrame was created on top of student_data, with two columns named student_id and age."
            }
        ]
    },
    {
        "Title": "Get the Size of a DataFrame",
        "slug": "get-the-size-of-a-dataframe",
        "description": "\n```\n\nDataFrame players:\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| player_id   | int    |\n| name        | object |\n| age         | int    |\n| position    | object |\n| ...         | ...    |\n+-------------+--------+\n\n```\n\nWrite a solution to calculate and display the **number of rows and columns** of `players`.\n\n\nReturn the result as an array:\n\n\n`[number of rows, number of columns]`\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "**+-----------+----------+-----+-------------+--------------------+\n| player_id | name     | age | position    | team               |\n+-----------+----------+-----+-------------+--------------------+\n| 846       | Mason    | 21  | Forward     | RealMadrid         |\n| 749       | Riley    | 30  | Winger      | Barcelona          |\n| 155       | Bob      | 28  | Striker     | ManchesterUnited   |\n| 583       | Isabella | 32  | Goalkeeper  | Liverpool          |\n| 388       | Zachary  | 24  | Midfielder  | BayernMunich       |\n| 883       | Ava      | 23  | Defender    | Chelsea            |\n| 355       | Violet   | 18  | Striker     | Juventus           |\n| 247       | Thomas   | 27  | Striker     | ParisSaint-Germain |\n| 761       | Jack     | 33  | Midfielder  | ManchesterCity     |\n| 642       | Charlie  | 36  | Center-back | Arsenal            |\n+-----------+----------+-----+-------------+--------------------+",
                "Output": "**[10, 5]",
                "Explanation": "**\nThis DataFrame contains 10 rows and 5 columns."
            }
        ]
    },
    {
        "Title": "Display the First Three Rows",
        "slug": "display-the-first-three-rows",
        "description": "\n```\n\nDataFrame: employees\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| employee_id | int    |\n| name        | object |\n| department  | object |\n| salary      | int    |\n+-------------+--------+\n\n```\n\nWrite a solution to display the **first `3`** rowsof this DataFrame.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "**DataFrame employees\n+-------------+-----------+-----------------------+--------+\n| employee_id | name      | department            | salary |\n+-------------+-----------+-----------------------+--------+\n| 3           | Bob       | Operations            | 48675  |\n| 90          | Alice     | Sales                 | 11096  |\n| 9           | Tatiana   | Engineering           | 33805  |\n| 60          | Annabelle | InformationTechnology | 37678  |\n| 49          | Jonathan  | HumanResources        | 23793  |\n| 43          | Khaled    | Administration        | 40454  |\n+-------------+-----------+-----------------------+--------+",
                "Output": "**\n+-------------+---------+-------------+--------+\n| employee_id | name    | department  | salary |\n+-------------+---------+-------------+--------+\n| 3           | Bob     | Operations  | 48675  |\n| 90          | Alice   | Sales       | 11096  |\n| 9           | Tatiana | Engineering | 33805  |\n+-------------+---------+-------------+--------+",
                "Explanation": "** \nOnly the first 3 rows are displayed."
            }
        ]
    },
    {
        "Title": "Create a New Column",
        "slug": "create-a-new-column",
        "description": "\n```\n\nDataFrame employees\n+-------------+--------+\n| Column Name | Type.  |\n+-------------+--------+\n| name        | object |\n| salary      | int.   |\n+-------------+--------+\n\n```\n\nA\u00a0company plans to provide its employees with a bonus.\n\n\nWrite a solution to create a new column name `bonus` that contains the **doubled values** of the `salary` column.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "**\nDataFrame employees\n+---------+--------+\n| name    | salary |\n+---------+--------+\n| Piper   | 4548   |\n| Grace   | 28150  |\n| Georgia | 1103   |\n| Willow  | 6593   |\n| Finn    | 74576  |\n| Thomas  | 24433  |\n+---------+--------+",
                "Output": "**\n+---------+--------+--------+\n| name    | salary | bonus  |\n+---------+--------+--------+\n| Piper   | 4548   | 9096   |\n| Grace   | 28150  | 56300  |\n| Georgia | 1103   | 2206   |\n| Willow  | 6593   | 13186  |\n| Finn    | 74576  | 149152 |\n| Thomas  | 24433  | 48866  |\n+---------+--------+--------+",
                "Explanation": "** \nA new column bonus is created by doubling the value in the column salary."
            }
        ]
    },
    {
        "Title": "Drop Duplicate Rows",
        "slug": "drop-duplicate-rows",
        "description": "\n```\n\nDataFrame customers\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| customer_id | int    |\n| name        | object |\n| email       | object |\n+-------------+--------+\n\n```\n\nThere are some duplicate rows in the DataFrame based on the `email` column.\n\n\nWrite a solution to remove these duplicate rows and keep only the **first** occurrence.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n\n\n```\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "**\n+-------------+---------+---------------------+\n| customer_id | name    | email               |\n+-------------+---------+---------------------+\n| 1           | Ella    | emily@example.com   |\n| 2           | David   | michael@example.com |\n| 3           | Zachary | sarah@example.com   |\n| 4           | Alice   | john@example.com    |\n| 5           | Finn    | john@example.com    |\n| 6           | Violet  | alice@example.com   |\n+-------------+---------+---------------------+",
                "Output": "**  \n+-------------+---------+---------------------+\n| customer_id | name    | email               |\n+-------------+---------+---------------------+\n| 1           | Ella    | emily@example.com   |\n| 2           | David   | michael@example.com |\n| 3           | Zachary | sarah@example.com   |\n| 4           | Alice   | john@example.com    |\n| 6           | Violet  | alice@example.com   |\n+-------------+---------+---------------------+",
                "Explanation": "**\nAlic (customer_id = 4) and Finn (customer_id = 5) both use john@example.com, so only the first occurrence of this email is retained.\n\n```"
            }
        ]
    },
    {
        "Title": "Drop Missing Data",
        "slug": "drop-missing-data",
        "description": "\n```\n\nDataFrame students\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| student_id  | int    |\n| name        | object |\n| age         | int    |\n+-------------+--------+\n\n```\n\nThere are some rows having missing values in the `name` column.\n\n\nWrite a solution to remove the rows with missing values.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "**+------------+---------+-----+\n| student_id | name    | age |\n+------------+---------+-----+\n| 32         | Piper   | 5   |\n| 217        | None    | 19  |\n| 779        | Georgia | 20  |\n| 849        | Willow  | 14  |\n+------------+---------+-----+",
                "Output": "**+------------+---------+-----+\n| student_id | name    | age |\n+------------+---------+-----+\n| 32         | Piper   | 5   |\n| 779        | Georgia | 20  | \n| 849        | Willow  | 14  | \n+------------+---------+-----+",
                "Explanation": "** \nStudent with id 217 havs empty value in the name column, so it will be removed."
            }
        ]
    },
    {
        "Title": "Modify Columns",
        "slug": "modify-columns",
        "description": "\n```\n\nDataFrame employees\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| name        | object |\n| salary      | int    |\n+-------------+--------+\n\n```\n\nA company intends to give its employees a pay rise.\n\n\nWrite a solution to **modify** the `salary` column by multiplying each salary by 2.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "**DataFrame employees\n+---------+--------+\n| name    | salary |\n+---------+--------+\n| Jack    | 19666  |\n| Piper   | 74754  |\n| Mia     | 62509  |\n| Ulysses | 54866  |\n+---------+--------+",
                "Output": "**+---------+--------+\n| name    | salary |\n+---------+--------+\n| Jack    | 39332  |\n| Piper   | 149508 |\n| Mia     | 125018 |\n| Ulysses | 109732 |\n+---------+--------+",
                "Explanation": "**Every salary has been doubled."
            }
        ]
    },
    {
        "Title": "Rename Columns",
        "slug": "rename-columns",
        "description": "\n```\n\nDataFrame students\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| id          | int    |\n| first       | object |\n| last        | object |\n| age         | int    |\n+-------------+--------+\n\n```\n\nWrite a solution to rename the columns as follows:\n\n\n `id` to `student_id`\n `first` to `first_name`\n `last` to `last_name`\n `age` to `age_in_years`\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n\n\n```\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "**+----+---------+----------+-----+\n| id | first   | last     | age |\n+----+---------+----------+-----+\n| 1  | Mason   | King     | 6   |\n| 2  | Ava     | Wright   | 7   |\n| 3  | Taylor  | Hall     | 16  |\n| 4  | Georgia | Thompson | 18  |\n| 5  | Thomas  | Moore    | 10  |\n+----+---------+----------+-----+",
                "Output": "**\n+------------+------------+-----------+--------------+\n| student_id | first_name | last_name | age_in_years |\n+------------+------------+-----------+--------------+\n| 1          | Mason      | King      | 6            |\n| 2          | Ava        | Wright    | 7            |\n| 3          | Taylor     | Hall      | 16           |\n| 4          | Georgia    | Thompson  | 18           |\n| 5          | Thomas     | Moore     | 10           |\n+------------+------------+-----------+--------------+",
                "Explanation": "** \nThe column names are changed accordingly.\n```"
            }
        ]
    },
    {
        "Title": "Change Data Type",
        "slug": "change-data-type",
        "description": "\n```\n\nDataFrame students\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| student_id  | int    |\n| name        | object |\n| age         | int    |\n| grade       | float  |\n+-------------+--------+\n\n```\n\nWrite a solution to correct the errors:\n\n\nThe `grade` column is stored as floats,\u00a0convert it to integers.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n\n\n```\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "**DataFrame students:\n+------------+------+-----+-------+\n| student_id | name | age | grade |\n+------------+------+-----+-------+\n| 1          | Ava  | 6   | 73.0  |\n| 2          | Kate | 15  | 87.0  |\n+------------+------+-----+-------+",
                "Output": "**+------------+------+-----+-------+\n| student_id | name | age | grade |\n+------------+------+-----+-------+\n| 1          | Ava  | 6   | 73    |\n| 2          | Kate | 15  | 87    |\n+------------+------+-----+-------+",
                "Explanation": "** \nThe data types of the column grade is converted to int.\n```"
            }
        ]
    },
    {
        "Title": "Fill Missing Data",
        "slug": "fill-missing-data",
        "description": "\n```\n\nDataFrame products\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| name        | object |\n| quantity    | int    |\n| price       | int    |\n+-------------+--------+\n\n```\n\nWrite a solution to fill in the missing value as `**0**` in the `quantity` column.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n\n\n```\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "**+-----------------+----------+-------+\n| name            | quantity | price |\n+-----------------+----------+-------+\n| Wristwatch      | None     | 135   |\n| WirelessEarbuds | None     | 821   |\n| GolfClubs       | 779      | 9319  |\n| Printer         | 849      | 3051  |\n+-----------------+----------+-------+",
                "Output": "**+-----------------+----------+-------+\n| name            | quantity | price |\n+-----------------+----------+-------+\n| Wristwatch      | 0        | 135   |\n| WirelessEarbuds | 0        | 821   |\n| GolfClubs       | 779      | 9319  |\n| Printer         | 849      | 3051  |\n+-----------------+----------+-------+",
                "Explanation": "** \nThe quantity for Wristwatch and WirelessEarbuds are filled by 0.\n```"
            }
        ]
    },
    {
        "Title": "Reshape Data: Concatenate",
        "slug": "reshape-data-concatenate",
        "description": "\n```\n\nDataFrame df1\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| student_id  | int    |\n| name        | object |\n| age         | int    |\n+-------------+--------+\n\nDataFrame df2\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| student_id  | int    |\n| name        | object |\n| age         | int    |\n+-------------+--------+\n\n\n```\n\nWrite a solution to concatenate these two DataFrames **vertically** into one DataFrame.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "df1**\n+------------+---------+-----+\n| student_id | name    | age |\n+------------+---------+-----+\n| 1          | Mason   | 8   |\n| 2          | Ava     | 6   |\n| 3          | Taylor  | 15  |\n| 4          | Georgia | 17  |\n+------------+---------+-----+\n**df2**+------------+------+-----+\n| student_id | name | age |\n+------------+------+-----+\n| 5          | Leo  | 7   |\n| 6          | Alex | 7   |\n+------------+------+-----+",
                "Output": "**\n+------------+---------+-----+\n| student_id | name    | age |\n+------------+---------+-----+\n| 1          | Mason   | 8   |\n| 2          | Ava     | 6   |\n| 3          | Taylor  | 15  |\n| 4          | Georgia | 17  |\n| 5          | Leo     | 7   |\n| 6          | Alex    | 7   |\n+------------+---------+-----+",
                "Explanation": "**The two DataFramess are stacked vertically, and their rows are combined."
            }
        ]
    },
    {
        "Title": "Reshape Data: Pivot",
        "slug": "reshape-data-pivot",
        "description": "\n```\n\nDataFrame weather\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| city        | object |\n| month       | object |\n| temperature | int    |\n+-------------+--------+\n\n```\n\nWrite a solution to **pivot** the data so that each row represents temperatures for a specific month, and each city is a separate column.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n\n\n```\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "**\n+--------------+----------+-------------+\n| city         | month    | temperature |\n+--------------+----------+-------------+\n| Jacksonville | January  | 13          |\n| Jacksonville | February | 23          |\n| Jacksonville | March    | 38          |\n| Jacksonville | April    | 5           |\n| Jacksonville | May      | 34          |\n| ElPaso       | January  | 20          |\n| ElPaso       | February | 6           |\n| ElPaso       | March    | 26          |\n| ElPaso       | April    | 2           |\n| ElPaso       | May      | 43          |\n+--------------+----------+-------------+",
                "Output": "**\n+----------+--------+--------------+\n| month    | ElPaso | Jacksonville |\n+----------+--------+--------------+\n| April    | 2      | 5            |\n| February | 6      | 23           |\n| January  | 20     | 13           |\n| March    | 26     | 38           |\n| May      | 43     | 34           |\n+----------+--------+--------------+",
                "Explanation": "**The table is pivoted, each column represents a city, and each row represents a specific month.\n```"
            }
        ]
    },
    {
        "Title": "Reshape Data: Melt",
        "slug": "reshape-data-melt",
        "description": "\n```\n\nDataFrame report\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| product     | object |\n| quarter_1   | int    |\n| quarter_2   | int    |\n| quarter_3   | int    |\n| quarter_4   | int    |\n+-------------+--------+\n\n```\n\nWrite a solution to **reshape** the data so that each row represents sales data for a product in a specific quarter.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "**+-------------+-----------+-----------+-----------+-----------+\n| product     | quarter_1 | quarter_2 | quarter_3 | quarter_4 |\n+-------------+-----------+-----------+-----------+-----------+\n| Umbrella    | 417       | 224       | 379       | 611       |\n| SleepingBag | 800       | 936       | 93        | 875       |\n+-------------+-----------+-----------+-----------+-----------+",
                "Output": "**\n+-------------+-----------+-------+\n| product     | quarter   | sales |\n+-------------+-----------+-------+\n| Umbrella    | quarter_1 | 417   |\n| SleepingBag | quarter_1 | 800   |\n| Umbrella    | quarter_2 | 224   |\n| SleepingBag | quarter_2 | 936   |\n| Umbrella    | quarter_3 | 379   |\n| SleepingBag | quarter_3 | 93    |\n| Umbrella    | quarter_4 | 611   |\n| SleepingBag | quarter_4 | 875   |\n+-------------+-----------+-------+",
                "Explanation": "**\nThe DataFrame is reshaped from wide to long format. Each row represents the sales of a product in a quarter."
            }
        ]
    },
    {
        "Title": "Method Chaining",
        "slug": "method-chaining",
        "description": "\n```\n\nDataFrame animals\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| name        | object |\n| species     | object |\n| age         | int    |\n| weight      | int    |\n+-------------+--------+\n\n```\n\nWrite a solution to list the names of animals that weigh **strictly more than** `100` kilograms.\n\n\nReturn the\u00a0animals sorted by weight in **descending order**.\n\n\nThe result format is in the following example.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [],
        "examples": [
            {
                "Input": "** \nDataFrame animals:\n+----------+---------+-----+--------+\n| name     | species | age | weight |\n+----------+---------+-----+--------+\n| Tatiana  | Snake   | 98  | 464    |\n| Khaled   | Giraffe | 50  | 41     |\n| Alex     | Leopard | 6   | 328    |\n| Jonathan | Monkey  | 45  | 463    |\n| Stefan   | Bear    | 100 | 50     |\n| Tommy    | Panda   | 26  | 349    |\n+----------+---------+-----+--------+",
                "Output": "** \n+----------+\n| name     |\n+----------+\n| Tatiana  |\n| Jonathan |\n| Tommy    |\n| Alex     |\n+----------+",
                "Explanation": "** \nAll animals weighing more than 100 should be included in the results table.\nTatiana's weight is 464, Jonathan's weight is 463, Tommy's weight is 349, and Alex's weight is 328.\nThe results should be sorted in descending order of weight."
            }
        ]
    },
    {
        "Title": "Divisible and Non-divisible Sums Difference",
        "slug": "divisible-and-non-divisible-sums-difference",
        "description": "You are given positive integers `n` and `m`.\n\n\nDefine two integers, `num1` and `num2`, as follows:\n\n\n `num1`: The sum of all integers in the range `[1, n]` that are **not divisible** by `m`.\n `num2`: The sum of all integers in the range `[1, n]` that are **divisible** by `m`.\n\n\nReturn *the integer* `num1 - num2`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** n = 10, m = 3",
                "Output": "** 19",
                "Explanation": "** In the given example:\n- Integers in the range [1, 10] that are not divisible by 3 are [1,2,4,5,7,8,10], num1 is the sum of those integers = 37.\n- Integers in the range [1, 10] that are divisible by 3 are [3,6,9], num2 is the sum of those integers = 18.\nWe return 37 - 18 = 19 as the answer."
            },
            {
                "Input": "** n = 5, m = 6",
                "Output": "** 15",
                "Explanation": "** In the given example:\n- Integers in the range [1, 5] that are not divisible by 6 are [1,2,3,4,5], num1 is the sum of those integers = 15.\n- Integers in the range [1, 5] that are divisible by 6 are [], num2 is the sum of those integers = 0.\nWe return 15 - 0 = 15 as the answer."
            },
            {
                "Input": "** n = 5, m = 1",
                "Output": "** -15",
                "Explanation": "** In the given example:\n- Integers in the range [1, 5] that are not divisible by 1 are [], num1 is the sum of those integers = 0.\n- Integers in the range [1, 5] that are divisible by 1 are [1,2,3,4,5], num2 is the sum of those integers = 15.\nWe return 0 - 15 = -15 as the answer."
            }
        ]
    },
    {
        "Title": "Minimum Processing Time",
        "slug": "minimum-processing-time",
        "description": "You have a certain number of processors, each having 4 cores. The number of tasks to be executed is four times the number of processors. Each task must be assigned to a unique core, and each core can only be used once.\n\n\nYou are given an array `processorTime` representing the time each processor becomes available and an array `tasks` representing how long each task takes to complete. Return the\u00a0*minimum* time needed to complete all tasks.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** processorTime = [8,10], tasks = [2,2,3,1,8,7,4,5]",
                "Output": "** 16",
                "Explanation": "**\n\n\nAssign the tasks at indices 4, 5, 6, 7 to the first processor which becomes available at `time = 8`, and the tasks at indices 0, 1, 2, 3 to the second processor which becomes available at `time = 10`.\u00a0\n\n\nThe time taken by the first processor to finish the execution of all tasks is\u00a0`max(8 + 8, 8 + 7, 8 + 4, 8 + 5) = 16`.\n\n\nThe time taken by the second processor to finish the execution of all tasks is\u00a0`max(10 + 2, 10 + 2, 10 + 3, 10 + 1) = 13`."
            },
            {
                "Input": "** processorTime = [10,20], tasks = [2,3,1,2,5,8,4,3]",
                "Output": "** 23",
                "Explanation": "**\n\n\nAssign the tasks at indices 1, 4, 5, 6 to the first processor and the others to the second processor.\n\n\nThe time taken by the first processor to finish the execution of all tasks is `max(10 + 3, 10 + 5, 10 + 8, 10 + 4) = 18`.\n\n\nThe time taken by the second processor to finish the execution of all tasks is `max(20 + 2, 20 + 1, 20 + 2, 20 + 3) = 23`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == processorTime.length <= 25000`\n* `1 <= tasks.length <= 105`\n* `0 <= processorTime[i] <= 109`\n* `1 <= tasks[i] <= 109`\n* `tasks.length == 4 * n`\n\n\nHints:\n    0. It\u2019s optimal to make the processor with earlier process time run 4 longer tasks.****\n    1. The largest <code>processTime[i] + tasks[j]</code> (when matched) is the answer."
            }
        ]
    },
    {
        "Title": "Apply Operations to Make Two Strings Equal",
        "slug": "apply-operations-to-make-two-strings-equal",
        "description": "You are given two **0-indexed** binary strings `s1` and `s2`, both of length `n`, and a positive integer `x`.\n\n\nYou can perform any of the following operations on the string `s1` **any** number of times:\n\n\n Choose two indices `i` and `j`, and flip both `s1[i]` and `s1[j]`. The cost of this operation is `x`.\n Choose an index `i` such that `i < n - 1` and flip both `s1[i]` and `s1[i + 1]`. The cost of this operation is `1`.\n\n\nReturn *the **minimum** cost needed to make the strings* `s1` *and* `s2` *equal, or return* `-1` *if it is impossible.\n\n\nNote** that flipping a character means changing it from `0` to `1` or vice-versa.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** s1 = \"1100011000\", s2 = \"0101001010\", x = 2",
                "Output": "** 4",
                "Explanation": "** We can do the following operations:\n- Choose i = 3 and apply the second operation. The resulting string is s1 = \"110**11**11000\".\n- Choose i = 4 and apply the second operation. The resulting string is s1 = \"1101**00**1000\".\n- Choose i = 0 and j = 8 and apply the first operation. The resulting string is s1 = \"**0**1010010**1**0\" = s2.\nThe total cost is 1 + 1 + 2 = 4. It can be shown that it is the minimum cost possible."
            },
            {
                "Input": "** s1 = \"10110\", s2 = \"00011\", x = 4",
                "Output": "** -1",
                "Explanation": "** It is not possible to make the two strings equal."
            }
        ]
    },
    {
        "Title": "Apply Operations on Array to Maximize Sum of Squares",
        "slug": "apply-operations-on-array-to-maximize-sum-of-squares",
        "description": "You are given a **0-indexed** integer array `nums` and a **positive** integer `k`.\n\n\nYou can do the following operation on the array **any** number of times:\n\n\n Choose any two distinct indices `i` and `j` and **simultaneously** update the values of `nums[i]` to `(nums[i] AND nums[j])` and `nums[j]` to `(nums[i] OR nums[j])`. Here, `OR` denotes the bitwise `OR` operation, and `AND` denotes the bitwise `AND` operation.\n\n\nYou have to choose `k` elements from the final array and calculate the sum of their **squares**.\n\n\nReturn *the **maximum** sum of squares you can achieve*.\n\n\nSince the answer can be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [2,6,5,8], k = 2",
                "Output": "** 261",
                "Explanation": "** We can do the following operations on the array:\n- Choose i = 0 and j = 3, then change nums[0] to (2 AND 8) = 0 and nums[3] to (2 OR 8) = 10. The resulting array is nums = [0,6,5,10].\n- Choose i = 2 and j = 3, then change nums[2] to (5 AND 10) = 0 and nums[3] to (5 OR 10) = 15. The resulting array is nums = [0,6,0,15].\nWe can choose the elements 15 and 6 from the final array. The sum of squares is 152 + 62 = 261.\nIt can be shown that this is the maximum value we can get."
            },
            {
                "Input": "** nums = [4,5,4,7], k = 3",
                "Output": "** 90",
                "Explanation": "** We do not need to apply any operations.\nWe can choose the elements 7, 5, and 4 with a sum of squares: 72 + 52 + 42 = 90.\nIt can be shown that this is the maximum value we can get."
            }
        ]
    },
    {
        "Title": "Last Visited Integers",
        "slug": "last-visited-integers",
        "description": "Given an integer array `nums` where `nums[i]` is either a positive integer or `-1`. We need to find for each `-1` the respective positive integer, which we call the last visited integer.\n\n\nTo achieve this goal, let's define two empty arrays: `seen` and `ans`.\n\n\nStart iterating from the beginning of the array `nums`.\n\n\n If a positive integer is encountered, prepend it to the **front** of `seen`.\n If `-1`\u00a0is encountered, let `k` be the number of **consecutive** `-1`s seen so far (including the current `-1`),\n\t+ If `k` is less than or equal to the length of `seen`, append the `k`-th element of `seen` to `ans`.\n\t+ If `k` is strictly greater than the length of `seen`, append `-1` to `ans`.\n\n\nReturn the array`ans`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,-1,-1,-1]",
                "Output": "** [2,1,-1]",
                "Explanation": "**\n\n\nStart with `seen = []` and `ans = []`.\n\n\n1. Process `nums[0]`: The first element in nums is `1`. We prepend it to the front of `seen`. Now, `seen == [1]`.\n2. Process `nums[1]`: The next element is `2`. We prepend it to the front of `seen`. Now, `seen == [2, 1]`.\n3. Process `nums[2]`: The next element is `-1`. This is the first occurrence of `-1`, so `k == 1`. We look for the first element in seen. We append `2` to `ans`. Now, `ans == [2]`.\n4. Process `nums[3]`: Another `-1`. This is the second consecutive `-1`, so `k == 2`. The second element in `seen` is `1`, so we append `1` to `ans`. Now, `ans == [2, 1]`.\n5. Process `nums[4]`: Another `-1`, the third in a row, making `k = 3`. However, `seen` only has two elements (`[2, 1]`). Since `k` is greater than the number of elements in `seen`, we append `-1` to `ans`. Finally, `ans == [2, 1, -1]`."
            },
            {
                "Input": "** nums = [1,-1,2,-1,-1]",
                "Output": "** [1,2,1]",
                "Explanation": "**\n\n\nStart with `seen = []` and `ans = []`.\n\n\n1. Process `nums[0]`: The first element in nums is `1`. We prepend it to the front of `seen`. Now, `seen == [1]`.\n2. Process `nums[1]`: The next element is `-1`. This is the first occurrence of `-1`, so `k == 1`. We look for the first element in `seen`, which is `1`. Append `1` to `ans`. Now, `ans == [1]`.\n3. Process `nums[2]`: The next element is `2`. Prepend this to the front of `seen`. Now, `seen == [2, 1]`.\n4. Process `nums[3]`: The next element is `-1`. This `-1` is not consecutive to the first `-1` since `2` was in between. Thus, `k` resets to `1`. The first element in `seen` is `2`, so append `2` to `ans`. Now, `ans == [1, 2]`.\n5. Process `nums[4]`: Another `-1`. This is consecutive to the previous `-1`, so `k == 2`. The second element in `seen` is `1`, append `1` to `ans`. Finally, `ans == [1, 2, 1]`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `nums[i] == -1` or `1 <= nums[i]\u00a0<= 100`"
            }
        ]
    },
    {
        "Title": "Longest Unequal Adjacent Groups Subsequence I",
        "slug": "longest-unequal-adjacent-groups-subsequence-i",
        "description": "You are given a string array `words` and a **binary** array `groups` both of length `n`, where `words[i]` is associated with `groups[i]`.\n\n\nYour task is to select the **longest alternating** subsequence from `words`. A subsequence of `words` is alternating if for any two consecutive strings in the sequence, their corresponding elements in the binary array `groups` differ. Essentially, you are to choose strings such that adjacent elements have non-matching corresponding bits in the `groups` array.\n\n\nFormally, you need to find the longest subsequence of an array of indices `[0, 1, ..., n - 1]` denoted as `[i0, i1, ..., ik-1]`, such that `groups[ij] != groups[ij+1]` for each `0 <= j < k - 1` and then find the words corresponding to these indices.\n\n\nReturn *the selected subsequence. If there are multiple answers, return **any** of them.\n\n\nNote:** The elements in `words` are distinct.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "String",
            "Dynamic Programming",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** words = [\"e\",\"a\",\"b\"], groups = [0,0,1]",
                "Output": "** [\"e\",\"b\"]",
                "Explanation": "** A subsequence that can be selected is `[\"e\",\"b\"]` because `groups[0] != groups[2]`. Another subsequence that can be selected is `[\"a\",\"b\"]` because `groups[1] != groups[2]`. It can be demonstrated that the length of the longest subsequence of indices that satisfies the condition is `2`."
            },
            {
                "Input": "** words = [\"a\",\"b\",\"c\",\"d\"], groups = [1,0,1,1]",
                "Output": "** [\"a\",\"b\",\"c\"]",
                "Explanation": "** A subsequence that can be selected is `[\"a\",\"b\",\"c\"]` because `groups[0] != groups[1]` and `groups[1] != groups[2]`. Another subsequence that can be selected is `[\"a\",\"b\",\"d\"]` because `groups[0] != groups[1]` and `groups[1] != groups[3]`. It can be shown that the length of the longest subsequence of indices that satisfies the condition is `3`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == words.length == groups.length <= 100`\n* `1 <= words[i].length <= 10`\n* `groups[i]` is either `0` or `1.`\n* `words` consists of **distinct** strings.\n* `words[i]` consists of lowercase English letters.\n\n\nHints:\n    0. This problem can be solved greedily.\n    1. Begin by constructing the answer starting with the first number in <code>groups</code>.\n    2. For each index <code>i</code> in the range <code>[1, n - 1]</code>, add <code>i</code> to the answer if <code>groups[i] != groups[i - 1]</code>."
            }
        ]
    },
    {
        "Title": "Longest Unequal Adjacent Groups Subsequence II",
        "slug": "longest-unequal-adjacent-groups-subsequence-ii",
        "description": "You are given a string array `words`, and an array `groups`, both arrays having length `n`.\n\n\nThe **hamming distance** between two strings of equal length is the number of positions at which the corresponding characters are **different**.\n\n\nYou need to select the **longest** subsequence from an array of indices `[0, 1, ..., n - 1]`, such that for the subsequence denoted as `[i0, i1, ..., ik-1]` having length `k`, the following holds:\n\n\n For **adjacent** indices in the subsequence, their corresponding groups are **unequal**, i.e., `groups[ij] != groups[ij+1]`, for each `j` where `0 < j + 1 < k`.\n `words[ij]` and `words[ij+1]` are **equal** in length, and the **hamming distance** between them is `1`, where `0 < j + 1 < k`, for all indices in the subsequence.\n\n\nReturn *a string array containing the words corresponding to the indices **(in order)** in the selected subsequence*. If there are multiple answers, return *any of them*.\n\n\nNote:** strings in `words` may be **unequal** in length.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** words = [\"bab\",\"dab\",\"cab\"], groups = [1,2,2]",
                "Output": "** [\"bab\",\"cab\"]",
                "Explanation": "** A subsequence that can be selected is `[0,2]`.\n\n\n* `groups[0] != groups[2]`\n* `words[0].length == words[2].length`, and the hamming distance between them is 1.\n\n\nSo, a valid answer is `[words[0],words[2]] = [\"bab\",\"cab\"]`.\n\n\nAnother subsequence that can be selected is `[0,1]`.\n\n\n* `groups[0] != groups[1]`\n* `words[0].length == words[1].length`, and the hamming distance between them is `1`.\n\n\nSo, another valid answer is `[words[0],words[1]] = [\"bab\",\"dab\"]`.\n\n\nIt can be shown that the length of the longest subsequence of indices that satisfies the conditions is `2`."
            },
            {
                "Input": "** words = [\"a\",\"b\",\"c\",\"d\"], groups = [1,2,3,4]",
                "Output": "** [\"a\",\"b\",\"c\",\"d\"]",
                "Explanation": "** We can select the subsequence `[0,1,2,3]`.\n\n\nIt satisfies both conditions.\n\n\nHence, the answer is `[words[0],words[1],words[2],words[3]] = [\"a\",\"b\",\"c\",\"d\"]`.\n\n\nIt has the longest length among all subsequences of indices that satisfy the conditions.\n\n\nHence, it is the only answer.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == words.length == groups.length <= 1000`\n* `1 <= words[i].length <= 10`\n* `1 <= groups[i] <= n`\n* `words` consists of **distinct** strings.\n* `words[i]` consists of lowercase English letters.\n\n\nHints:\n    0. Let <code>dp[i]</code> represent the length of the longest subsequence ending with <code>words[i]</code> that satisfies the conditions.\n    1. <code>dp[i] =</code> (maximum value of <code>dp[j]</code>) <code>+ 1</code> for indices <code>j < i</code>, where <code>groups[i] != groups[j]</code>, <code>words[i]</code> and <code>words[j]</code> are equal in length, and the hamming distance between <code>words[i]</code> and <code>words[j]</code> is exactly <code>1</code>.\n    2. Keep track of the <code>j</code> values used to achieve the maximum <code>dp[i]</code> for each index <code>i</code>.\n    3. The expected array's length is <code>max(dp[0:n])</code>, and starting from the index having the maximum value in <code>dp</code>, we can trace backward to get the words."
            }
        ]
    },
    {
        "Title": "Count of Sub-Multisets With Bounded Sum",
        "slug": "count-of-sub-multisets-with-bounded-sum",
        "description": "You are given a **0-indexed** array `nums` of non-negative integers, and two integers `l` and `r`.\n\n\nReturn *the **count of sub-multisets** within* `nums` *where the sum of elements in each subset falls within the inclusive range of* `[l, r]`.\n\n\nSince the answer may be large, return it modulo `109 + 7`.\n\n\nA **sub-multiset** is an **unordered** collection of elements of the array in which a given value `x` can occur `0, 1, ..., occ[x]` times, where `occ[x]` is the number of occurrences of `x` in the array.\n\n\nNote** that:\n\n\n Two **sub-multisets** are the same if sorting both sub-multisets results in identical multisets.\n The sum of an **empty** multiset is `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Dynamic Programming",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,2,3], l = 6, r = 6",
                "Output": "** 1",
                "Explanation": "** The only subset of nums that has a sum of 6 is {1, 2, 3}."
            },
            {
                "Input": "** nums = [2,1,4,2,7], l = 1, r = 5",
                "Output": "** 7",
                "Explanation": "** The subsets of nums that have a sum within the range [1, 5] are {1}, {2}, {4}, {2, 2}, {1, 2}, {1, 4}, and {1, 2, 2}."
            },
            {
                "Input": "** nums = [1,2,1,3,5,2], l = 3, r = 5",
                "Output": "** 9",
                "Explanation": "** The subsets of nums that have a sum within the range [3, 5] are {3}, {5}, {1, 2}, {1, 3}, {2, 2}, {2, 3}, {1, 1, 2}, {1, 1, 3}, and {1, 2, 2}."
            }
        ]
    },
    {
        "Title": "Find Indices With Index and Value Difference I",
        "slug": "find-indices-with-index-and-value-difference-i",
        "description": "You are given a **0-indexed** integer array `nums` having length `n`, an integer `indexDifference`, and an integer `valueDifference`.\n\n\nYour task is to find **two** indices `i` and `j`, both in the range `[0, n - 1]`, that satisfy the following conditions:\n\n\n `abs(i - j) >= indexDifference`, and\n `abs(nums[i] - nums[j]) >= valueDifference`\n\n\nReturn *an integer array* `answer`, *where* `answer = [i, j]` *if there are two such indices*, *and* `answer = [-1, -1]` *otherwise*. If there are multiple choices for the two indices, return *any of them*.\n\n\nNote:** `i` and `j` may be **equal**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** nums = [5,1,4,1], indexDifference = 2, valueDifference = 4",
                "Output": "** [0,3]",
                "Explanation": "** In this example, i = 0 and j = 3 can be selected.\nabs(0 - 3) >= 2 and abs(nums[0] - nums[3]) >= 4.\nHence, a valid answer is [0,3].\n[3,0] is also a valid answer."
            },
            {
                "Input": "** nums = [2,1], indexDifference = 0, valueDifference = 0",
                "Output": "** [0,0]",
                "Explanation": "** In this example, i = 0 and j = 0 can be selected.\nabs(0 - 0) >= 0 and abs(nums[0] - nums[0]) >= 0.\nHence, a valid answer is [0,0].\nOther valid answers are [0,1], [1,0], and [1,1]."
            },
            {
                "Input": "** nums = [1,2,3], indexDifference = 2, valueDifference = 4",
                "Output": "** [-1,-1]",
                "Explanation": "** In this example, it can be shown that it is impossible to find two indices that satisfy both conditions.\nHence, [-1,-1] is returned."
            }
        ]
    },
    {
        "Title": "Shortest and Lexicographically Smallest Beautiful String",
        "slug": "shortest-and-lexicographically-smallest-beautiful-string",
        "description": "You are given a binary string `s` and a positive integer `k`.\n\n\nA substring of `s` is **beautiful** if the number of `1`'s in it is exactly `k`.\n\n\nLet `len` be the length of the **shortest** beautiful substring.\n\n\nReturn *the lexicographically **smallest** beautiful substring of string* `s` *with length equal to* `len`. If `s` doesn't contain a beautiful substring, return *an **empty** string*.\n\n\nA string `a` is lexicographically **larger** than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly larger than the corresponding character in `b`.\n\n\n For example, `\"abcd\"` is lexicographically larger than `\"abcc\"` because the first position they differ is at the fourth character, and `d` is greater than `c`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** s = \"100011001\", k = 3",
                "Output": "** \"11001\"",
                "Explanation": "** There are 7 beautiful substrings in this example:\n1. The substring \"100011001\".\n2. The substring \"100011001\".\n3. The substring \"100011001\".\n4. The substring \"100011001\".\n5. The substring \"100011001\".\n6. The substring \"100011001\".\n7. The substring \"100011001\".\nThe length of the shortest beautiful substring is 5.\nThe lexicographically smallest beautiful substring with length 5 is the substring \"11001\"."
            },
            {
                "Input": "** s = \"1011\", k = 2",
                "Output": "** \"11\"",
                "Explanation": "** There are 3 beautiful substrings in this example:\n1. The substring \"1011\".\n2. The substring \"1011\".\n3. The substring \"1011\".\nThe length of the shortest beautiful substring is 2.\nThe lexicographically smallest beautiful substring with length 2 is the substring \"11\"."
            },
            {
                "Input": "** s = \"000\", k = 1",
                "Output": "** \"\"",
                "Explanation": "** There are no beautiful substrings in this example."
            }
        ]
    },
    {
        "Title": "Find Indices With Index and Value Difference II",
        "slug": "find-indices-with-index-and-value-difference-ii",
        "description": "You are given a **0-indexed** integer array `nums` having length `n`, an integer `indexDifference`, and an integer `valueDifference`.\n\n\nYour task is to find **two** indices `i` and `j`, both in the range `[0, n - 1]`, that satisfy the following conditions:\n\n\n `abs(i - j) >= indexDifference`, and\n `abs(nums[i] - nums[j]) >= valueDifference`\n\n\nReturn *an integer array* `answer`, *where* `answer = [i, j]` *if there are two such indices*, *and* `answer = [-1, -1]` *otherwise*. If there are multiple choices for the two indices, return *any of them*.\n\n\nNote:** `i` and `j` may be **equal**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers"
        ],
        "examples": [
            {
                "Input": "** nums = [5,1,4,1], indexDifference = 2, valueDifference = 4",
                "Output": "** [0,3]",
                "Explanation": "** In this example, i = 0 and j = 3 can be selected.\nabs(0 - 3) >= 2 and abs(nums[0] - nums[3]) >= 4.\nHence, a valid answer is [0,3].\n[3,0] is also a valid answer."
            },
            {
                "Input": "** nums = [2,1], indexDifference = 0, valueDifference = 0",
                "Output": "** [0,0]",
                "Explanation": "** In this example, i = 0 and j = 0 can be selected.\nabs(0 - 0) >= 0 and abs(nums[0] - nums[0]) >= 0.\nHence, a valid answer is [0,0].\nOther valid answers are [0,1], [1,0], and [1,1]."
            },
            {
                "Input": "** nums = [1,2,3], indexDifference = 2, valueDifference = 4",
                "Output": "** [-1,-1]",
                "Explanation": "** In this example, it can be shown that it is impossible to find two indices that satisfy both conditions.\nHence, [-1,-1] is returned."
            }
        ]
    },
    {
        "Title": "Construct Product Matrix",
        "slug": "construct-product-matrix",
        "description": "Given a **0-indexed** 2D integer matrix `grid` of size `n * m`, we define a **0-indexed** 2D matrix `p` of size `n * m` as the **product** matrix of `grid` if the following condition is met:\n\n\n Each element `p[i][j]` is calculated as the product of all elements in `grid` except for the element `grid[i][j]`. This product is then taken modulo `12345`.\n\n\nReturn *the product matrix of* `grid`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,2],[3,4]]",
                "Output": "** [[24,12],[8,6]]",
                "Explanation": "** p[0][0] = grid[0][1] * grid[1][0] * grid[1][1] = 2 * 3 * 4 = 24\np[0][1] = grid[0][0] * grid[1][0] * grid[1][1] = 1 * 3 * 4 = 12\np[1][0] = grid[0][0] * grid[0][1] * grid[1][1] = 1 * 2 * 4 = 8\np[1][1] = grid[0][0] * grid[0][1] * grid[1][0] = 1 * 2 * 3 = 6\nSo the answer is [[24,12],[8,6]]."
            },
            {
                "Input": "** grid = [[12345],[2],[1]]",
                "Output": "** [[2],[0],[0]]",
                "Explanation": "** p[0][0] = grid[0][1] * grid[0][2] = 2 * 1 = 2.\np[0][1] = grid[0][0] * grid[0][2] = 12345 * 1 = 12345. 12345 % 12345 = 0. So p[0][1] = 0.\np[0][2] = grid[0][0] * grid[0][1] = 12345 * 2 = 24690. 24690 % 12345 = 0. So p[0][2] = 0.\nSo the answer is [[2],[0],[0]]."
            }
        ]
    },
    {
        "Title": "Minimum Sum of Mountain Triplets I",
        "slug": "minimum-sum-of-mountain-triplets-i",
        "description": "You are given a **0-indexed** array `nums` of integers.\n\n\nA triplet of indices `(i, j, k)` is a **mountain** if:\n\n\n `i < j < k`\n `nums[i] < nums[j]` and `nums[k] < nums[j]`\n\n\nReturn *the **minimum possible sum** of a mountain triplet of* `nums`. *If no such triplet exists, return* `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [8,6,1,5,3]",
                "Output": "** 9",
                "Explanation": "** Triplet (2, 3, 4) is a mountain triplet of sum 9 since: \n- 2 < 3 < 4\n- nums[2] < nums[3] and nums[4] < nums[3]\nAnd the sum of this triplet is nums[2] + nums[3] + nums[4] = 9. It can be shown that there are no mountain triplets with a sum of less than 9."
            },
            {
                "Input": "** nums = [5,4,8,7,10,2]",
                "Output": "** 13",
                "Explanation": "** Triplet (1, 3, 5) is a mountain triplet of sum 13 since: \n- 1 < 3 < 5\n- nums[1] < nums[3] and nums[5] < nums[3]\nAnd the sum of this triplet is nums[1] + nums[3] + nums[5] = 13. It can be shown that there are no mountain triplets with a sum of less than 13."
            },
            {
                "Input": "** nums = [6,5,4,3,4,5]",
                "Output": "** -1",
                "Explanation": "** It can be shown that there are no mountain triplets in nums."
            }
        ]
    },
    {
        "Title": "Minimum Sum of Mountain Triplets II",
        "slug": "minimum-sum-of-mountain-triplets-ii",
        "description": "You are given a **0-indexed** array `nums` of integers.\n\n\nA triplet of indices `(i, j, k)` is a **mountain** if:\n\n\n `i < j < k`\n `nums[i] < nums[j]` and `nums[k] < nums[j]`\n\n\nReturn *the **minimum possible sum** of a mountain triplet of* `nums`. *If no such triplet exists, return* `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [8,6,1,5,3]",
                "Output": "** 9",
                "Explanation": "** Triplet (2, 3, 4) is a mountain triplet of sum 9 since: \n- 2 < 3 < 4\n- nums[2] < nums[3] and nums[4] < nums[3]\nAnd the sum of this triplet is nums[2] + nums[3] + nums[4] = 9. It can be shown that there are no mountain triplets with a sum of less than 9."
            },
            {
                "Input": "** nums = [5,4,8,7,10,2]",
                "Output": "** 13",
                "Explanation": "** Triplet (1, 3, 5) is a mountain triplet of sum 13 since: \n- 1 < 3 < 5\n- nums[1] < nums[3] and nums[5] < nums[3]\nAnd the sum of this triplet is nums[1] + nums[3] + nums[5] = 13. It can be shown that there are no mountain triplets with a sum of less than 13."
            },
            {
                "Input": "** nums = [6,5,4,3,4,5]",
                "Output": "** -1",
                "Explanation": "** It can be shown that there are no mountain triplets in nums."
            }
        ]
    },
    {
        "Title": "Minimum Number of Groups to Create a Valid Assignment",
        "slug": "minimum-number-of-groups-to-create-a-valid-assignment",
        "description": "You are given a collection of numbered `balls`\u00a0and instructed to sort them into boxes for a nearly balanced distribution. There are two rules you must follow:\n\n\n Balls with the same\u00a0box must have the same value. But, if you have more than one ball with the same number, you can put them in different boxes.\n The biggest box can only have one more ball than the smallest box.\n\n\n\u200bReturn the *fewest number of boxes* to sort these balls following these rules.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "**   balls = [3,2,3,2,3]",
                "Output": "**   2",
                "Explanation": "**\n\n\nWe can sort `balls` into boxes as follows:\n\n\n* `[3,3,3]`\n* `[2,2]`\n\n\nThe size difference between the two boxes doesn't exceed one."
            },
            {
                "Input": "**   balls = [10,10,10,3,1,1]",
                "Output": "**   4",
                "Explanation": "**\n\n\nWe can sort `balls` into boxes as follows:\n\n\n\n\n* `[10]`\n* `[10,10]`\n* `[3]`\n* `[1,1]`\n\n\nYou can't use fewer than four boxes while still following the rules. For example, putting all three balls numbered 10 in one box would break the rule about the maximum size difference between boxes.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\nHints:\n    0. Calculate the frequency of each number.\n    1. For each <code>x</code> in the range <code>[1, minimum_frequency]</code>, try to create groups with either <code>x</code> or <code>x + 1</code> indices assigned to them while minimizing the total number of groups.\n    2. For each distinct number, using its frequency, check that all its occurrences can be assigned to groups of size <code>x</code> or <code>x + 1</code> while minimizing the number of groups used.\n    3. To get the minimum number of groups needed for a number having frequency <code>f</code> to be assigned to groups of size <code>x</code> or <code>x + 1</code>, let <code>a = f / (x + 1)</code> and <code>b = f % (x + 1)</code>. <ul> <li>If <code>b == 0</code>, then we can simply create <code>a</code> groups of size <code>x + 1</code>.</li> <li>If <code>x - b <= a</code>, we can have <code>a - (x - b)</code> groups of size <code>x + 1</code> and <code>x - b + 1</code> groups of size <code>x</code>. So, in total, we have <code>a + 1</code> groups.</li> <li>Otherwise, it's impossible.</li> </ul>\n    4. The minimum number of groups needed for some <code>x</code> is the total minimized number of groups needed for each distinct number.\n    5. The answer is the minimum number of groups needed for each <code>x</code> in the range <code>[1, minimum_frequency]</code>."
            }
        ]
    },
    {
        "Title": "Minimum Changes to Make K Semi-palindromes",
        "slug": "minimum-changes-to-make-k-semi-palindromes",
        "description": "Given a string `s` and an integer `k`, partition `s` into `k` **substrings** such that the letter changes needed to make each substring a **semi-palindrome**\u00a0are minimized.\n\n\nReturn the ***minimum** number of letter changes* required*.\n\n\nA **semi-palindrome** is a special type of string that can be divided into **palindromes** based on a repeating pattern. To check if a string is a semi-palindrome:\u200b\n\n\n1. Choose a positive divisor `d` of the string's length. `d` can range from `1` up to, but not including, the string's length. For a string of length `1`, it does not have a valid divisor as per this definition, since the only divisor is its length, which is not allowed.\n2. For a given divisor `d`, divide the string into groups where each group contains characters from the string that follow a repeating pattern of length `d`. Specifically, the first group consists of characters at positions `1`, `1 + d`, `1 + 2d`, and so on; the second group includes characters at positions `2`, `2 + d`, `2 + 2d`, etc.\n3. The string is considered a semi-palindrome if each of these groups forms a palindrome.\n\n\nConsider the string `\"abcabc\"`:\n\n\n The length of `\"abcabc\"` is `6`. Valid divisors are `1`, `2`, and `3`.\n For `d = 1`: The entire string `\"abcabc\"` forms one group. Not a palindrome.\n For `d = 2`:\n\t+ Group 1 (positions `1, 3, 5`): `\"acb\"`\n\t+ Group 2 (positions `2, 4, 6`): `\"bac\"`\n\t+ Neither group forms a palindrome.\n For `d = 3`:\n\t+ Group 1 (positions `1, 4`): `\"aa\"`\n\t+ Group 2 (positions `2, 5`): `\"bb\"`\n\t+ Group 3 (positions `3, 6`): `\"cc\"`\n\t+ All groups form palindromes. Therefore, `\"abcabc\"` is a semi-palindrome.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Two Pointers",
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "**   s = \"abcac\", k = 2",
                "Output": "**   1",
                "Explanation": "**  Divide `s` into `\"ab\"` and `\"cac\"`. `\"cac\"` is already semi-palindrome. Change `\"ab\"` to `\"aa\"`, it becomes semi-palindrome with `d = 1`."
            },
            {
                "Input": "**   s = \"abcdef\", k = 2",
                "Output": "**   2",
                "Explanation": "**  Divide `s` into substrings `\"abc\"` and `\"def\"`. Each\u00a0needs one change to become semi-palindrome."
            },
            {
                "Input": "**   s = \"aabbaa\", k = 3",
                "Output": "**   0",
                "Explanation": "**  Divide `s` into substrings `\"aa\"`, `\"bb\"` and `\"aa\"`.\u00a0All are already semi-palindromes.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= s.length <= 200`\n* `1 <= k <= s.length / 2`\n* `s` contains only lowercase English letters.\n\n\nHints:\n    0. Define <code>dp[i][j]</code> as the minimum count of letter changes needed to split the suffix of string <code>s</code> starting from <code>s[i]</code> into <code>j</code> valid parts.\n    1. We have <code>dp[i][j] = min(dp[x + 1][j - 1] + v[i][x])</code>. Here <code>v[i][x]</code> is the minimum number of letter changes to change substring <code>s[i..x]</code> into semi-palindrome.\n    2. <code>v[i][j]</code> can be calculated separately by <b>brute-force</b>. We can create a table of <code>v[i][j]</code> independently to improve the complexity. Also note that semi-palindrome\u2019s length is at least <code>2</code>.\nSimilarQuestions: [1278]"
            }
        ]
    },
    {
        "Title": "Subarrays Distinct Element Sum of Squares I",
        "slug": "subarrays-distinct-element-sum-of-squares-i",
        "description": "You are given a **0-indexed** integer array `nums`.\n\n\nThe **distinct count** of a subarray of `nums` is defined as:\n\n\n Let `nums[i..j]` be a subarray of `nums` consisting of all the indices from `i` to `j` such that `0 <= i <= j < nums.length`. Then the number of distinct values in `nums[i..j]` is called the distinct count of `nums[i..j]`.\n\n\nReturn *the sum of the **squares** of **distinct counts** of all subarrays of* `nums`.\n\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,1]",
                "Output": "** 15",
                "Explanation": "** Six possible subarrays are:\n[1]: 1 distinct value\n[2]: 1 distinct value\n[1]: 1 distinct value\n[1,2]: 2 distinct values\n[2,1]: 2 distinct values\n[1,2,1]: 2 distinct values\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 + 22 + 22 + 22 = 15."
            },
            {
                "Input": "** nums = [1,1]",
                "Output": "** 3",
                "Explanation": "** Three possible subarrays are:\n[1]: 1 distinct value\n[1]: 1 distinct value\n[1,1]: 1 distinct value\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 = 3."
            }
        ]
    },
    {
        "Title": "Minimum Number of Changes to Make Binary String Beautiful",
        "slug": "minimum-number-of-changes-to-make-binary-string-beautiful",
        "description": "You are given a **0-indexed** binary string `s` having an even length.\n\n\nA string is **beautiful** if it's possible to partition it into one or more substrings such that:\n\n\n Each substring has an **even length**.\n Each substring contains **only** `1`'s or **only** `0`'s.\n\n\nYou can change any character in `s` to `0` or `1`.\n\n\nReturn *the **minimum** number of changes required to make the string* `s` *beautiful*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"1001\"",
                "Output": "** 2",
                "Explanation": "** We change s[1] to 1 and s[3] to 0 to get string \"1100\".\nIt can be seen that the string \"1100\" is beautiful because we can partition it into \"11|00\".\nIt can be proven that 2 is the minimum number of changes needed to make the string beautiful."
            },
            {
                "Input": "** s = \"10\"",
                "Output": "** 1",
                "Explanation": "** We change s[1] to 1 to get string \"11\".\nIt can be seen that the string \"11\" is beautiful because we can partition it into \"11\".\nIt can be proven that 1 is the minimum number of changes needed to make the string beautiful."
            },
            {
                "Input": "** s = \"0000\"",
                "Output": "** 0",
                "Explanation": "** We don't need to make any changes as the string \"0000\" is beautiful already."
            }
        ]
    },
    {
        "Title": "Length of the Longest Subsequence That Sums to Target",
        "slug": "length-of-the-longest-subsequence-that-sums-to-target",
        "description": "You are given a **0-indexed** array of integers `nums`, and an integer `target`.\n\n\nReturn *the **length of the longest subsequence** of* `nums` *that sums up to* `target`. *If no such subsequence exists, return* `-1`.\n\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5], target = 9",
                "Output": "** 3",
                "Explanation": "** There are 3 subsequences with a sum equal to 9: [4,5], [1,3,5], and [2,3,4]. The longest subsequences are [1,3,5], and [2,3,4]. Hence, the answer is 3."
            },
            {
                "Input": "** nums = [4,1,3,2,1,5], target = 7",
                "Output": "** 4",
                "Explanation": "** There are 5 subsequences with a sum equal to 7: [4,3], [4,1,2], [4,2,1], [1,1,5], and [1,3,2,1]. The longest subsequence is [1,3,2,1]. Hence, the answer is 4."
            },
            {
                "Input": "** nums = [1,1,5,4,5], target = 3",
                "Output": "** -1",
                "Explanation": "** It can be shown that nums has no subsequence that sums up to 3."
            }
        ]
    },
    {
        "Title": "Subarrays Distinct Element Sum of Squares II",
        "slug": "subarrays-distinct-element-sum-of-squares-ii",
        "description": "You are given a **0-indexed** integer array `nums`.\n\n\nThe **distinct count** of a subarray of `nums` is defined as:\n\n\n Let `nums[i..j]` be a subarray of `nums` consisting of all the indices from `i` to `j` such that `0 <= i <= j < nums.length`. Then the number of distinct values in `nums[i..j]` is called the distinct count of `nums[i..j]`.\n\n\nReturn *the sum of the **squares** of **distinct counts** of all subarrays of* `nums`.\n\n\nSince the answer may be very large, return it **modulo** `109 + 7`.\n\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Binary Indexed Tree",
            "Segment Tree"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,1]",
                "Output": "** 15",
                "Explanation": "** Six possible subarrays are:\n[1]: 1 distinct value\n[2]: 1 distinct value\n[1]: 1 distinct value\n[1,2]: 2 distinct values\n[2,1]: 2 distinct values\n[1,2,1]: 2 distinct values\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 + 22 + 22 + 22 = 15."
            },
            {
                "Input": "** nums = [2,2]",
                "Output": "** 3",
                "Explanation": "** Three possible subarrays are:\n[2]: 1 distinct value\n[2]: 1 distinct value\n[2,2]: 1 distinct value\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 = 3."
            }
        ]
    },
    {
        "Title": "Find the K-or of an Array",
        "slug": "find-the-k-or-of-an-array",
        "description": "You are given an integer array `nums`, and an integer `k`. Let's introduce\u00a0**K-or** operation by extending the standard bitwise OR. In K-or, a bit position in the result is set to `1`\u00a0if at least `k` numbers in `nums` have a `1` in that position.\n\n\nReturn *the K-or of* `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [7,12,9,8,9,15], k = 4",
                "Output": "** 9",
                "Explanation": "** \n\n\nRepresent numbers in binary:\n\n\n\n\n| **Number** | Bit 3 | Bit 2 | Bit 1 | Bit 0 |\n| --- | --- | --- | --- | --- |\n| **7** | 0 | 1 | 1 | 1 |\n| **12** | 1 | 1 | 0 | 0 |\n| **9** | 1 | 0 | 0 | 1 |\n| **8** | 1 | 0 | 0 | 0 |\n| **9** | 1 | 0 | 0 | 1 |\n| **15** | 1 | 1 | 1 | 1 |\n| **Result = 9** | 1 | 0 | 0 | 1 |\n\n\nBit 0 is set in 7, 9, 9, and 15. Bit 3 is set in 12, 9, 8, 9, and 15.  \n\nOnly bits 0 and 3 qualify. The result is `(1001)2 = 9`."
            },
            {
                "Input": "** nums = [2,12,1,11,4,5], k = 6",
                "Output": "** 0",
                "Explanation": "**No bit appears as 1 in all six array numbers, as required for K-or with `k = 6`. Thus, the result is 0."
            },
            {
                "Input": "** nums = [10,8,5,9,11,6,8], k = 1",
                "Output": "** 15",
                "Explanation": "**  Since `k == 1`, the 1-or of the array is equal to the bitwise OR of all its elements. Hence, the answer is `10 OR 8 OR 5 OR 9 OR 11 OR 6 OR 8 = 15`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 50`\n* `0 <= nums[i] < 231`\n* `1 <= k <= nums.length`\n\n\nHints:\n    0. Fix a <code>bit</code> from the range <code>[0, 31]</code>, then count the number of elements of <code>nums</code> that have <code>bit</code> set in them.\n    1. <code>bit</code> is set in integer <code>x</code> if and only if <code>2<sup>bit</sup> AND x == 2<sup>bit</sup></code>, where <code>AND</code> is the bitwise <code>AND</code> operation.\n    2. Fix a <code>bit</code> from the range <code>[0, 31]</code>, then count the number of elements of <code>nums</code> that have <code>bit</code> set in them.\n    3. <code>bit</code> is set in integer <code>x</code> if and only if <code>2<sup>bit</sup> AND x == 2<sup>bit</sup></code>, where <code>AND</code> is the bitwise <code>AND</code> operation.\nSimilarQuestions: [338, 2859]"
            }
        ]
    },
    {
        "Title": "Minimum Equal Sum of Two Arrays After Replacing Zeros",
        "slug": "minimum-equal-sum-of-two-arrays-after-replacing-zeros",
        "description": "You are given two arrays `nums1` and `nums2` consisting of positive integers.\n\n\nYou have to replace **all** the `0`'s in both arrays with **strictly** positive integers such that the sum of elements of both arrays becomes **equal**.\n\n\nReturn *the **minimum** equal sum you can obtain, or* `-1` *if it is impossible*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums1 = [3,2,0,1,0], nums2 = [6,5,0]",
                "Output": "** 12",
                "Explanation": "** We can replace 0's in the following way:\n- Replace the two 0's in nums1 with the values 2 and 4. The resulting array is nums1 = [3,2,2,1,4].\n- Replace the 0 in nums2 with the value 1. The resulting array is nums2 = [6,5,1].\nBoth arrays have an equal sum of 12. It can be shown that it is the minimum sum we can obtain."
            },
            {
                "Input": "** nums1 = [2,0,2,0], nums2 = [1,4]",
                "Output": "** -1",
                "Explanation": "** It is impossible to make the sum of both arrays equal."
            }
        ]
    },
    {
        "Title": "Minimum Increment Operations to Make Array Beautiful",
        "slug": "minimum-increment-operations-to-make-array-beautiful",
        "description": "You are given a **0-indexed** integer array `nums` having length `n`, and an integer `k`.\n\n\nYou can perform the following **increment** operation **any** number of times (**including zero**):\n\n\n Choose an index `i` in the range `[0, n - 1]`, and increase `nums[i]` by `1`.\n\n\nAn array is considered **beautiful** if, for any **subarray** with a size of `3` or **more**, its **maximum** element is **greater than or equal** to `k`.\n\n\nReturn *an integer denoting the **minimum** number of increment operations needed to make* `nums` ***beautiful**.\n\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** nums = [2,3,0,0,2], k = 4",
                "Output": "** 3",
                "Explanation": "** We can perform the following increment operations to make nums beautiful:\nChoose index i = 1 and increase nums[1] by 1 -> [2,4,0,0,2].\nChoose index i = 4 and increase nums[4] by 1 -> [2,4,0,0,3].\nChoose index i = 4 and increase nums[4] by 1 -> [2,4,0,0,4].\nThe subarrays with a size of 3 or more are: [2,4,0], [4,0,0], [0,0,4], [2,4,0,0], [4,0,0,4], [2,4,0,0,4].\nIn all the subarrays, the maximum element is equal to k = 4, so nums is now beautiful.\nIt can be shown that nums cannot be made beautiful with fewer than 3 increment operations.\nHence, the answer is 3."
            },
            {
                "Input": "** nums = [0,1,3,3], k = 5",
                "Output": "** 2",
                "Explanation": "** We can perform the following increment operations to make nums beautiful:\nChoose index i = 2 and increase nums[2] by 1 -> [0,1,4,3].\nChoose index i = 2 and increase nums[2] by 1 -> [0,1,5,3].\nThe subarrays with a size of 3 or more are: [0,1,5], [1,5,3], [0,1,5,3].\nIn all the subarrays, the maximum element is equal to k = 5, so nums is now beautiful.\nIt can be shown that nums cannot be made beautiful with fewer than 2 increment operations.\nHence, the answer is 2."
            },
            {
                "Input": "** nums = [1,1,2], k = 1",
                "Output": "** 0",
                "Explanation": "** The only subarray with a size of 3 or more in this example is [1,1,2].\nThe maximum element, 2, is already greater than k = 1, so we don't need any increment operation.\nHence, the answer is 0."
            }
        ]
    },
    {
        "Title": "Maximum Points After Collecting Coins From All Nodes",
        "slug": "maximum-points-after-collecting-coins-from-all-nodes",
        "description": "There exists an undirected tree rooted at node `0` with `n` nodes labeled from `0` to `n - 1`. You are given a 2D **integer** array `edges` of length `n - 1`, where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree. You are also given a **0-indexed** array `coins` of size `n` where `coins[i]` indicates the number of coins in the vertex `i`, and an integer `k`.\n\n\nStarting from the root, you have to collect all the coins such that the coins at a node can only be collected if the coins of its ancestors have been already collected.\n\n\nCoins at `nodei` can be collected in one of the following ways:\n\n\n Collect all the coins, but you will get `coins[i] - k` points. If `coins[i] - k` is negative then you will lose `abs(coins[i] - k)` points.\n Collect all the coins, but you will get `floor(coins[i] / 2)` points. If this way is used, then for all the `nodej` present in the subtree of `nodei`, `coins[j]` will get reduced to `floor(coins[j] / 2)`.\n\n\nReturn *the **maximum points** you can get after collecting the coins from **all** the tree nodes.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Bit Manipulation",
            "Tree",
            "Depth-First Search"
        ],
        "examples": [
            {
                "Input": "** edges = [[0,1],[1,2],[2,3]], coins = [10,10,3,3], k = 5",
                "Output": "** 11",
                "Explanation": "** \nCollect all the coins from node 0 using the first way. Total points = 10 - 5 = 5.\nCollect all the coins from node 1 using the first way. Total points = 5 + (10 - 5) = 10.\nCollect all the coins from node 2 using the second way so coins left at node 3 will be floor(3 / 2) = 1. Total points = 10 + floor(3 / 2) = 11.\nCollect all the coins from node 3 using the second way. Total points = 11 + floor(1 / 2) = 11.\nIt can be shown that the maximum points we can get after collecting coins from all the nodes is 11."
            }
        ]
    },
    {
        "Title": "Find Champion I",
        "slug": "find-champion-i",
        "description": "There are `n` teams numbered from `0` to `n - 1` in a tournament.\n\n\nGiven a **0-indexed** 2D boolean matrix `grid` of size `n * n`. For all `i, j` that `0 <= i, j <= n - 1` and `i != j` team `i` is **stronger** than team `j` if `grid[i][j] == 1`, otherwise, team `j` is **stronger** than team `i`.\n\n\nTeam `a` will be the **champion** of the tournament if there is no team `b` that is stronger than team `a`.\n\n\nReturn *the team that will be the champion of the tournament.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[0,1],[0,0]]",
                "Output": "** 0",
                "Explanation": "** There are two teams in this tournament.\ngrid[0][1] == 1 means that team 0 is stronger than team 1. So team 0 will be the champion."
            },
            {
                "Input": "** grid = [[0,0,1],[1,0,1],[0,0,0]]",
                "Output": "** 1",
                "Explanation": "** There are three teams in this tournament.\ngrid[1][0] == 1 means that team 1 is stronger than team 0.\ngrid[1][2] == 1 means that team 1 is stronger than team 2.\nSo team 1 will be the champion."
            }
        ]
    },
    {
        "Title": "Find Champion II",
        "slug": "find-champion-ii",
        "description": "There are `n` teams numbered from `0` to `n - 1` in a tournament; each team is also a node in a **DAG**.\n\n\nYou are given the integer `n` and a **0-indexed** 2D integer array `edges` of length `m` representing the **DAG**, where `edges[i] = [ui, vi]` indicates that there is a directed edge from team `ui` to team `vi` in the graph.\n\n\nA directed edge from `a` to `b` in the graph means that team `a` is **stronger** than team `b` and team `b` is **weaker** than team `a`.\n\n\nTeam `a` will be the **champion** of the tournament if there is no team `b` that is **stronger** than team `a`.\n\n\nReturn *the team that will be the **champion** of the tournament if there is a **unique** champion, otherwise, return* `-1`*.\n\n\nNotes\n\n\n A **cycle** is a series of nodes `a1, a2, ..., an, an+1` such that node `a1` is the same node as node `an+1`, the nodes `a1, a2, ..., an` are distinct, and there is a directed edge from the node `ai` to node `ai+1` for every `i` in the range `[1, n]`.\n A **DAG** is a directed graph that does not have any **cycle**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Graph"
        ],
        "examples": [
            {
                "Input": "** n = 3, edges = [[0,1],[1,2]]",
                "Output": "** 0",
                "Explanation": "** Team 1 is weaker than team 0. Team 2 is weaker than team 1. So the champion is team 0."
            },
            {
                "Input": "** n = 4, edges = [[0,2],[1,3],[1,2]]",
                "Output": "** -1",
                "Explanation": "** Team 2 is weaker than team 0 and team 1. Team 3 is weaker than team 1. But team 1 and team 0 are not weaker than any other teams. So the answer is -1."
            }
        ]
    },
    {
        "Title": "Maximum Score After Applying Operations on a Tree",
        "slug": "maximum-score-after-applying-operations-on-a-tree",
        "description": "There is an undirected tree with `n` nodes labeled from `0` to `n - 1`, and rooted at node `0`. You are given\u00a0a 2D integer array `edges` of length `n - 1`, where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree.\n\n\nYou are also given a **0-indexed** integer array `values` of length `n`, where `values[i]` is the **value** associated with the `ith` node.\n\n\nYou start with a score of `0`. In one operation, you can:\n\n\n Pick any node `i`.\n Add `values[i]` to your score.\n Set `values[i]` to `0`.\n\n\nA tree is **healthy** if the sum of values on the path from the root to any leaf node is different than zero.\n\n\nReturn *the **maximum score** you can obtain after performing these operations on the tree any number of times so that it remains **healthy**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming",
            "Tree",
            "Depth-First Search"
        ],
        "examples": [
            {
                "Input": "** edges = [[0,1],[0,2],[0,3],[2,4],[4,5]], values = [5,2,5,2,1,1]",
                "Output": "** 11",
                "Explanation": "** We can choose nodes 1, 2, 3, 4, and 5. The value of the root is non-zero. Hence, the sum of values on the path from the root to any leaf is different than zero. Therefore, the tree is healthy and the score is values[1] + values[2] + values[3] + values[4] + values[5] = 11.\nIt can be shown that 11 is the maximum score obtainable after any number of operations on the tree."
            },
            {
                "Input": "** edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [20,10,9,7,4,3,5]",
                "Output": "** 40",
                "Explanation": "** We can choose nodes 0, 2, 3, and 4.\n- The sum of values on the path from 0 to 4 is equal to 10.\n- The sum of values on the path from 0 to 3 is equal to 10.\n- The sum of values on the path from 0 to 5 is equal to 3.\n- The sum of values on the path from 0 to 6 is equal to 5.\nTherefore, the tree is healthy and the score is values[0] + values[2] + values[3] + values[4] = 40.\nIt can be shown that 40 is the maximum score obtainable after any number of operations on the tree."
            }
        ]
    },
    {
        "Title": "Maximum Balanced Subsequence Sum",
        "slug": "maximum-balanced-subsequence-sum",
        "description": "You are given a **0-indexed** integer array `nums`.\n\n\nA **subsequence** of `nums` having length `k` and consisting of **indices** `i0\u00a0<\u00a0i1 <\u00a0... < ik-1` is **balanced** if the following holds:\n\n\n `nums[ij] - nums[ij-1] >= ij - ij-1`, for every `j` in the range `[1, k - 1]`.\n\n\nA **subsequence** of `nums` having length `1` is considered balanced.\n\n\nReturn *an integer denoting the **maximum** possible **sum of elements** in a **balanced** subsequence of* `nums`.\n\n\nA **subsequence** of an array is a new **non-empty** array that is formed from the original array by deleting some (**possibly none**) of the elements without disturbing the relative positions of the remaining elements.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Dynamic Programming",
            "Binary Indexed Tree",
            "Segment Tree"
        ],
        "examples": [
            {
                "Input": "** nums = [3,3,5,6]",
                "Output": "** 14",
                "Explanation": "** In this example, the subsequence [3,5,6] consisting of indices 0, 2, and 3 can be selected.\nnums[2] - nums[0] >= 2 - 0.\nnums[3] - nums[2] >= 3 - 2.\nHence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.\nThe subsequence consisting of indices 1, 2, and 3 is also valid.\nIt can be shown that it is not possible to get a balanced subsequence with a sum greater than 14."
            },
            {
                "Input": "** nums = [5,-1,-3,8]",
                "Output": "** 13",
                "Explanation": "** In this example, the subsequence [5,8] consisting of indices 0 and 3 can be selected.\nnums[3] - nums[0] >= 3 - 0.\nHence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.\nIt can be shown that it is not possible to get a balanced subsequence with a sum greater than 13."
            },
            {
                "Input": "** nums = [-2,-1]",
                "Output": "** -1",
                "Explanation": "** In this example, the subsequence [-1] can be selected.\nIt is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums."
            }
        ]
    },
    {
        "Title": "Distribute Candies Among Children I",
        "slug": "distribute-candies-among-children-i",
        "description": "You are given two positive integers `n` and `limit`.\n\n\nReturn *the **total number** of ways to distribute* `n` *candies among* `3` *children such that no child gets more than* `limit` *candies.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "Combinatorics",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** n = 5, limit = 2",
                "Output": "** 3",
                "Explanation": "** There are 3 ways to distribute 5 candies such that no child gets more than 2 candies: (1, 2, 2), (2, 1, 2) and (2, 2, 1)."
            },
            {
                "Input": "** n = 3, limit = 3",
                "Output": "** 10",
                "Explanation": "** There are 10 ways to distribute 3 candies such that no child gets more than 3 candies: (0, 0, 3), (0, 1, 2), (0, 2, 1), (0, 3, 0), (1, 0, 2), (1, 1, 1), (1, 2, 0), (2, 0, 1), (2, 1, 0) and (3, 0, 0)."
            }
        ]
    },
    {
        "Title": "Distribute Candies Among Children II",
        "slug": "distribute-candies-among-children-ii",
        "description": "You are given two positive integers `n` and `limit`.\n\n\nReturn *the **total number** of ways to distribute* `n` *candies among* `3` *children such that no child gets more than* `limit` *candies.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Combinatorics",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** n = 5, limit = 2",
                "Output": "** 3",
                "Explanation": "** There are 3 ways to distribute 5 candies such that no child gets more than 2 candies: (1, 2, 2), (2, 1, 2) and (2, 2, 1)."
            },
            {
                "Input": "** n = 3, limit = 3",
                "Output": "** 10",
                "Explanation": "** There are 10 ways to distribute 3 candies such that no child gets more than 3 candies: (0, 0, 3), (0, 1, 2), (0, 2, 1), (0, 3, 0), (1, 0, 2), (1, 1, 1), (1, 2, 0), (2, 0, 1), (2, 1, 0) and (3, 0, 0)."
            }
        ]
    },
    {
        "Title": "Number of Strings Which Can Be Rearranged to Contain Substring",
        "slug": "number-of-strings-which-can-be-rearranged-to-contain-substring",
        "description": "You are given an integer `n`.\n\n\nA string `s` is called **good** if it contains only lowercase English characters **and** it is possible to rearrange the characters of `s` such that the new string contains `\"leet\"` as a **substring**.\n\n\nFor example:\n\n\n The string `\"lteer\"` is good because we can rearrange it to form `\"leetr\"` .\n `\"letl\"` is not good because we cannot rearrange it to contain `\"leet\"` as a substring.\n\n\nReturn *the **total** number of good strings of length* `n`.\n\n\nSince the answer may be large, return it **modulo** `109 + 7`.\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Combinatorics"
        ],
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** 12",
                "Explanation": "** The 12 strings which can be rearranged to have \"leet\" as a substring are: \"eelt\", \"eetl\", \"elet\", \"elte\", \"etel\", \"etle\", \"leet\", \"lete\", \"ltee\", \"teel\", \"tele\", and \"tlee\"."
            },
            {
                "Input": "** n = 10",
                "Output": "** 83943898",
                "Explanation": "** The number of strings with length 10 which can be rearranged to have \"leet\" as a substring is 526083947580. Hence the answer is 526083947580 % (109 + 7) = 83943898."
            }
        ]
    },
    {
        "Title": "Maximum Spending After Buying Items",
        "slug": "maximum-spending-after-buying-items",
        "description": "You are given a **0-indexed** `m * n` integer matrix `values`, representing the values of `m * n` different items in `m` different shops. Each shop has `n` items where the `jth` item in the `ith` shop has a value of `values[i][j]`. Additionally, the items in the `ith` shop are sorted in non-increasing order of value. That is, `values[i][j] >= values[i][j + 1]` for all `0 <= j < n - 1`.\n\n\nOn each day, you would like to buy a single item from one of the shops. Specifically, On the `dth` day you can:\n\n\n Pick any shop `i`.\n Buy the rightmost available item `j` for the price of `values[i][j] * d`. That is, find the greatest index `j` such that item `j` was never bought before, and buy it for the price of `values[i][j] * d`.\n\n\nNote** that all items are pairwise different. For example, if you have bought item `0` from shop `1`, you can still buy item `0` from any other shop.\n\n\nReturn *the **maximum amount of money that can be spent** on buying all*  `m * n` *products*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** values = [[8,5,2],[6,4,1],[9,7,3]]",
                "Output": "** 285",
                "Explanation": "** On the first day, we buy product 2 from shop 1 for a price of values[1][2] * 1 = 1.\nOn the second day, we buy product 2 from shop 0 for a price of values[0][2] * 2 = 4.\nOn the third day, we buy product 2 from shop 2 for a price of values[2][2] * 3 = 9.\nOn the fourth day, we buy product 1 from shop 1 for a price of values[1][1] * 4 = 16.\nOn the fifth day, we buy product 1 from shop 0 for a price of values[0][1] * 5 = 25.\nOn the sixth day, we buy product 0 from shop 1 for a price of values[1][0] * 6 = 36.\nOn the seventh day, we buy product 1 from shop 2 for a price of values[2][1] * 7 = 49.\nOn the eighth day, we buy product 0 from shop 0 for a price of values[0][0] * 8 = 64.\nOn the ninth day, we buy product 0 from shop 2 for a price of values[2][0] * 9 = 81.\nHence, our total spending is equal to 285.\nIt can be shown that 285 is the maximum amount of money that can be spent buying all m * n products."
            },
            {
                "Input": "** values = [[10,8,6,4,2],[9,7,5,3,2]]",
                "Output": "** 386",
                "Explanation": "** On the first day, we buy product 4 from shop 0 for a price of values[0][4] * 1 = 2.\nOn the second day, we buy product 4 from shop 1 for a price of values[1][4] * 2 = 4.\nOn the third day, we buy product 3 from shop 1 for a price of values[1][3] * 3 = 9.\nOn the fourth day, we buy product 3 from shop 0 for a price of values[0][3] * 4 = 16.\nOn the fifth day, we buy product 2 from shop 1 for a price of values[1][2] * 5 = 25.\nOn the sixth day, we buy product 2 from shop 0 for a price of values[0][2] * 6 = 36.\nOn the seventh day, we buy product 1 from shop 1 for a price of values[1][1] * 7 = 49.\nOn the eighth day, we buy product 1 from shop 0 for a price of values[0][1] * 8 = 64\nOn the ninth day, we buy product 0 from shop 1 for a price of values[1][0] * 9 = 81.\nOn the tenth day, we buy product 0 from shop 0 for a price of values[0][0] * 10 = 100.\nHence, our total spending is equal to 386.\nIt can be shown that 386 is the maximum amount of money that can be spent buying all m * n products."
            }
        ]
    },
    {
        "Title": "Maximum Strong Pair XOR I",
        "slug": "maximum-strong-pair-xor-i",
        "description": "You are given a **0-indexed** integer array `nums`. A pair of integers `x` and `y` is called a **strong** pair if it satisfies the condition:\n\n\n `|x - y| <= min(x, y)`\n\n\nYou need to select two integers from `nums` such that they form a strong pair and their bitwise `XOR` is the **maximum** among all strong pairs in the array.\n\n\nReturn *the **maximum*** `XOR` *value out of all possible strong pairs in the array* `nums`.\n\n\nNote** that you can pick the same integer twice to form a pair.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Bit Manipulation",
            "Trie",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** 7",
                "Explanation": "** There are 11 strong pairs in the array nums: (1, 1), (1, 2), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (3, 5), (4, 4), (4, 5) and (5, 5).\nThe maximum XOR possible from these pairs is 3 XOR 4 = 7."
            },
            {
                "Input": "** nums = [10,100]",
                "Output": "** 0",
                "Explanation": "** There are 2 strong pairs in the array nums: (10, 10) and (100, 100).\nThe maximum XOR possible from these pairs is 10 XOR 10 = 0 since the pair (100, 100) also gives 100 XOR 100 = 0."
            },
            {
                "Input": "** nums = [5,6,25,30]",
                "Output": "** 7",
                "Explanation": "** There are 6 strong pairs in the array nums: (5, 5), (5, 6), (6, 6), (25, 25), (25, 30) and (30, 30).\nThe maximum XOR possible from these pairs is 25 XOR 30 = 7 since the only other non-zero XOR value is 5 XOR 6 = 3."
            }
        ]
    },
    {
        "Title": "High-Access Employees",
        "slug": "high-access-employees",
        "description": "You are given a 2D **0-indexed** array of strings, `access_times`, with size `n`. For each `i` where `0 <= i <= n - 1`, `access_times[i][0]` represents the name of an employee, and `access_times[i][1]` represents the access time of that employee. All entries in `access_times` are within the same day.\n\n\nThe access time is represented as **four digits** using a **24-hour** time format, for example, `\"0800\"` or `\"2250\"`.\n\n\nAn employee is said to be **high-access** if he has accessed the system **three or more** times within a **one-hour period**.\n\n\nTimes with exactly one hour of difference are **not** considered part of the same one-hour period. For example, `\"0815\"` and `\"0915\"` are not part of the same one-hour period.\n\n\nAccess times at the start and end of the day are **not** counted within the same one-hour period. For example, `\"0005\"` and `\"2350\"` are not part of the same one-hour period.\n\n\nReturn *a list that contains the names of **high-access** employees with any order you want.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** access_times = [[\"a\",\"0549\"],[\"b\",\"0457\"],[\"a\",\"0532\"],[\"a\",\"0621\"],[\"b\",\"0540\"]]",
                "Output": "** [\"a\"]",
                "Explanation": "** \"a\" has three access times in the one-hour period of [05:32, 06:31] which are 05:32, 05:49, and 06:21.\nBut \"b\" does not have more than two access times at all.\nSo the answer is [\"a\"]."
            },
            {
                "Input": "** access_times = [[\"d\",\"0002\"],[\"c\",\"0808\"],[\"c\",\"0829\"],[\"e\",\"0215\"],[\"d\",\"1508\"],[\"d\",\"1444\"],[\"d\",\"1410\"],[\"c\",\"0809\"]]",
                "Output": "** [\"c\",\"d\"]",
                "Explanation": "** \"c\" has three access times in the one-hour period of [08:08, 09:07] which are 08:08, 08:09, and 08:29.\n\"d\" has also three access times in the one-hour period of [14:10, 15:09] which are 14:10, 14:44, and 15:08.\nHowever, \"e\" has just one access time, so it can not be in the answer and the final answer is [\"c\",\"d\"]."
            },
            {
                "Input": "** access_times = [[\"cd\",\"1025\"],[\"ab\",\"1025\"],[\"cd\",\"1046\"],[\"cd\",\"1055\"],[\"ab\",\"1124\"],[\"ab\",\"1120\"]]",
                "Output": "** [\"ab\",\"cd\"]",
                "Explanation": "** \"ab\" has three access times in the one-hour period of [10:25, 11:24] which are 10:25, 11:20, and 11:24.\n\"cd\" has also three access times in the one-hour period of [10:25, 11:24] which are 10:25, 10:46, and 10:55.\nSo the answer is [\"ab\",\"cd\"]."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Maximize Last Elements in Arrays",
        "slug": "minimum-operations-to-maximize-last-elements-in-arrays",
        "description": "You are given two **0-indexed** integer arrays, `nums1` and `nums2`, both having length `n`.\n\n\nYou are allowed to perform a series of **operations** (**possibly none**).\n\n\nIn an operation, you select an index `i` in the range `[0, n - 1]` and **swap** the values of `nums1[i]` and `nums2[i]`.\n\n\nYour task is to find the **minimum** number of operations required to satisfy the following conditions:\n\n\n `nums1[n - 1]` is equal to the **maximum value** among all elements of `nums1`, i.e., `nums1[n - 1] = max(nums1[0], nums1[1], ..., nums1[n - 1])`.\n `nums2[n - 1]` is equal to the **maximum** **value** among all elements of `nums2`, i.e., `nums2[n - 1] = max(nums2[0], nums2[1], ..., nums2[n - 1])`.\n\n\nReturn *an integer denoting the **minimum** number of operations needed to meet **both** conditions*, *or* `-1` *if it is **impossible** to satisfy both conditions.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** nums1 = [1,2,7], nums2 = [4,5,3]",
                "Output": "** 1",
                "Explanation": "** In this example, an operation can be performed using index i = 2.\nWhen nums1[2] and nums2[2] are swapped, nums1 becomes [1,2,3] and nums2 becomes [4,5,7].\nBoth conditions are now satisfied.\nIt can be shown that the minimum number of operations needed to be performed is 1.\nSo, the answer is 1."
            },
            {
                "Input": "** nums1 = [2,3,4,5,9], nums2 = [8,8,4,4,4]",
                "Output": "** 2",
                "Explanation": "** In this example, the following operations can be performed:\nFirst operation using index i = 4.\nWhen nums1[4] and nums2[4] are swapped, nums1 becomes [2,3,4,5,4], and nums2 becomes [8,8,4,4,9].\nAnother operation using index i = 3.\nWhen nums1[3] and nums2[3] are swapped, nums1 becomes [2,3,4,4,4], and nums2 becomes [8,8,4,5,9].\nBoth conditions are now satisfied.\nIt can be shown that the minimum number of operations needed to be performed is 2.\nSo, the answer is 2."
            },
            {
                "Input": "** nums1 = [1,5,4], nums2 = [2,5,3]",
                "Output": "** -1",
                "Explanation": "** In this example, it is not possible to satisfy both conditions. \nSo, the answer is -1."
            }
        ]
    },
    {
        "Title": "Maximum Strong Pair XOR II",
        "slug": "maximum-strong-pair-xor-ii",
        "description": "You are given a **0-indexed** integer array `nums`. A pair of integers `x` and `y` is called a **strong** pair if it satisfies the condition:\n\n\n `|x - y| <= min(x, y)`\n\n\nYou need to select two integers from `nums` such that they form a strong pair and their bitwise `XOR` is the **maximum** among all strong pairs in the array.\n\n\nReturn *the **maximum*** `XOR` *value out of all possible strong pairs in the array* `nums`.\n\n\nNote** that you can pick the same integer twice to form a pair.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Bit Manipulation",
            "Trie",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** 7",
                "Explanation": "** There are 11 strong pairs in the array nums: (1, 1), (1, 2), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (3, 5), (4, 4), (4, 5) and (5, 5).\nThe maximum XOR possible from these pairs is 3 XOR 4 = 7."
            },
            {
                "Input": "** nums = [10,100]",
                "Output": "** 0",
                "Explanation": "** There are 2 strong pairs in the array nums: (10, 10) and (100, 100).\nThe maximum XOR possible from these pairs is 10 XOR 10 = 0 since the pair (100, 100) also gives 100 XOR 100 = 0."
            },
            {
                "Input": "** nums = [500,520,2500,3000]",
                "Output": "** 1020",
                "Explanation": "** There are 6 strong pairs in the array nums: (500, 500), (500, 520), (520, 520), (2500, 2500), (2500, 3000) and (3000, 3000).\nThe maximum XOR possible from these pairs is 500 XOR 520 = 1020 since the only other non-zero XOR value is 2500 XOR 3000 = 636."
            }
        ]
    },
    {
        "Title": "Make Three Strings Equal",
        "slug": "make-three-strings-equal",
        "description": "You are given three strings: `s1`, `s2`, and `s3`. In one operation you can choose one of these strings and delete its **rightmost** character. Note that you **cannot** completely empty a string.\n\n\nReturn the *minimum number of operations* required to make the strings equal*.* If it is impossible to make them equal, return `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s1 = \"abc\", s2 = \"abb\", s3 = \"ab\"",
                "Output": "** 2",
                "Explanation": "**Deleting the rightmost character from both `s1` and `s2` will result in three equal strings."
            },
            {
                "Input": "** s1 = \"dac\", s2 = \"bac\", s3 = \"cac\"",
                "Output": "** -1",
                "Explanation": "** Since the first letters of `s1` and `s2` differ, they cannot be made equal.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s1.length, s2.length, s3.length <= 100`\n* `s1`, `s2` and `s3` consist only of lowercase English letters.\n\n\nSimilarQuestions: [583]"
            }
        ]
    },
    {
        "Title": "Separate Black and White Balls",
        "slug": "separate-black-and-white-balls",
        "description": "There are `n` balls on a table, each ball has a color black or white.\n\n\nYou are given a **0-indexed** binary string `s` of length `n`, where `1` and `0` represent black and white balls, respectively.\n\n\nIn each step, you can choose two adjacent balls and swap them.\n\n\nReturn *the **minimum** number of steps to group all the black balls to the right and all the white balls to the left*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Two Pointers",
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"101\"",
                "Output": "** 1",
                "Explanation": "** We can group all the black balls to the right in the following way:\n- Swap s[0] and s[1], s = \"011\".\nInitially, 1s are not grouped together, requiring at least 1 step to group them to the right."
            },
            {
                "Input": "** s = \"100\"",
                "Output": "** 2",
                "Explanation": "** We can group all the black balls to the right in the following way:\n- Swap s[0] and s[1], s = \"010\".\n- Swap s[1] and s[2], s = \"001\".\nIt can be proven that the minimum number of steps needed is 2."
            },
            {
                "Input": "** s = \"0111\"",
                "Output": "** 0",
                "Explanation": "** All the black balls are already grouped to the right."
            }
        ]
    },
    {
        "Title": "Maximum Xor Product",
        "slug": "maximum-xor-product",
        "description": "Given three integers `a`, `b`, and `n`, return *the **maximum value** of* `(a XOR x) * (b XOR x)` *where* `0 <= x < 2n`.\n\n\nSince the answer may be too large, return it **modulo** `109 + 7`.\n\n\nNote** that `XOR` is the bitwise XOR operation.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Greedy",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** a = 12, b = 5, n = 4",
                "Output": "** 98",
                "Explanation": "** For x = 2, (a XOR x) = 14 and (b XOR x) = 7. Hence, (a XOR x) * (b XOR x) = 98. \nIt can be shown that 98 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n."
            },
            {
                "Input": "** a = 6, b = 7 , n = 5",
                "Output": "** 930",
                "Explanation": "** For x = 25, (a XOR x) = 31 and (b XOR x) = 30. Hence, (a XOR x) * (b XOR x) = 930.\nIt can be shown that 930 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n."
            },
            {
                "Input": "** a = 1, b = 6, n = 3",
                "Output": "** 12",
                "Explanation": "** For x = 5, (a XOR x) = 4 and (b XOR x) = 3. Hence, (a XOR x) * (b XOR x) = 12.\nIt can be shown that 12 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n."
            }
        ]
    },
    {
        "Title": "Find Building Where Alice and Bob Can Meet",
        "slug": "find-building-where-alice-and-bob-can-meet",
        "description": "You are given a **0-indexed** array `heights` of positive integers, where `heights[i]` represents the height of the `ith` building.\n\n\nIf a person is in building `i`, they can move to any other building `j` if and only if `i < j` and `heights[i] < heights[j]`.\n\n\nYou are also given another array `queries` where `queries[i] = [ai, bi]`. On the `ith` query, Alice is in building `ai` while Bob is in building `bi`.\n\n\nReturn *an array* `ans` *where* `ans[i]` *is **the index of the leftmost building** where Alice and Bob can meet on the* `ith` *query*. *If Alice and Bob cannot move to a common building on query* `i`, *set* `ans[i]` *to* `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Stack",
            "Binary Indexed Tree",
            "Segment Tree",
            "Heap (Priority Queue)",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** heights = [6,4,8,5,2,7], queries = [[0,1],[0,3],[2,4],[3,4],[2,2]]",
                "Output": "** [2,5,-1,5,2]",
                "Explanation": "** In the first query, Alice and Bob can move to building 2 since heights[0] < heights[2] and heights[1] < heights[2]. \nIn the second query, Alice and Bob can move to building 5 since heights[0] < heights[5] and heights[3] < heights[5]. \nIn the third query, Alice cannot meet Bob since Alice cannot move to any other building.\nIn the fourth query, Alice and Bob can move to building 5 since heights[3] < heights[5] and heights[4] < heights[5].\nIn the fifth query, Alice and Bob are already in the same building.  \nFor ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet.\nFor ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet."
            },
            {
                "Input": "** heights = [5,3,8,2,6,1,4,6], queries = [[0,7],[3,5],[5,2],[3,0],[1,6]]",
                "Output": "** [7,6,-1,4,6]",
                "Explanation": "** In the first query, Alice can directly move to Bob's building since heights[0] < heights[7].\nIn the second query, Alice and Bob can move to building 6 since heights[3] < heights[6] and heights[5] < heights[6].\nIn the third query, Alice cannot meet Bob since Bob cannot move to any other building.\nIn the fourth query, Alice and Bob can move to building 4 since heights[3] < heights[4] and heights[0] < heights[4].\nIn the fifth query, Alice can directly move to Bob's building since heights[1] < heights[6].\nFor ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet.\nFor ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet."
            }
        ]
    },
    {
        "Title": "Find Words Containing Character",
        "slug": "find-words-containing-character",
        "description": "You are given a **0-indexed** array of strings `words` and a character `x`.\n\n\nReturn *an **array of indices** representing the words that contain the character* `x`.\n\n\nNote** that the returned array may be in **any** order.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "examples": [
            {
                "Input": "** words = [\"leet\",\"code\"], x = \"e\"",
                "Output": "** [0,1]",
                "Explanation": "** \"e\" occurs in both words: \"l**ee**t\", and \"cod**e**\". Hence, we return indices 0 and 1."
            },
            {
                "Input": "** words = [\"abc\",\"bcd\",\"aaaa\",\"cbc\"], x = \"a\"",
                "Output": "** [0,2]",
                "Explanation": "** \"a\" occurs in \"**a**bc\", and \"**aaaa**\". Hence, we return indices 0 and 2."
            },
            {
                "Input": "** words = [\"abc\",\"bcd\",\"aaaa\",\"cbc\"], x = \"z\"",
                "Output": "** []",
                "Explanation": "** \"z\" does not occur in any of the words. Hence, we return an empty array."
            }
        ]
    },
    {
        "Title": "Minimum Number of Coins for Fruits",
        "slug": "minimum-number-of-coins-for-fruits",
        "description": "You are given an integer array `prices` where `prices[i]` denotes the number of coins needed to purchase the `ith` fruit.\n\n\nThe fruit market has the following reward for each fruit:\n\n\n If you purchase the `ith` fruit at `prices[i]` coins, you can get any number of the next `(i + 1)` fruits for free.\n\n\nNote** that even if you **can** take fruit `j` for free, you can still purchase it for `prices[j]` coins to receive its reward.\n\n\nReturn the **minimum** number of coins needed to acquire all the fruits.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Queue",
            "Heap (Priority Queue)",
            "Monotonic Queue"
        ],
        "examples": [
            {
                "Input": "** prices = [3,1,2]",
                "Output": "** 4",
                "Explanation": "**\n\n\n* Purchase the 1st fruit with `prices[0] = 3` coins, you are allowed to take the 2nd fruit for free.\n* Purchase the 2nd fruit with `prices[1] = 1` coin, you are allowed to take the 3rd fruit for free.\n* Take the 3rd fruit for free.\n\n\nNote that even though you could take the 2nd fruit for free as a reward of buying 1st fruit, you purchase it to receive its reward, which is more optimal."
            },
            {
                "Input": "** prices = [1,10,1,1]",
                "Output": "** 2",
                "Explanation": "**\n\n\n* Purchase the 1st fruit with `prices[0] = 1` coin, you are allowed to take the 2nd fruit for free.\n* Take the 2nd fruit for free.\n* Purchase the 3rd fruit for `prices[2] = 1` coin, you are allowed to take the 4th fruit for free.\n* Take the 4th fruit for free."
            },
            {
                "Input": "** prices = [26,18,6,12,49,7,45,45]",
                "Output": "** 39",
                "Explanation": "**\n\n\n* Purchase the 1st fruit with `prices[0] = 26` coin, you are allowed to take the 2nd fruit for free.\n* Take the 2nd fruit for free.\n* Purchase the 3rd fruit for `prices[2] = 6` coin, you are allowed to take the 4th, 5th and 6th (the next three) fruits for free.\n* Take the 4th fruit for free.\n* Take the 5th fruit for free.\n* Purchase the 6th fruit with `prices[5] = 7` coin, you are allowed to take the 8th and 9th fruit for free.\n* Take the 7th fruit for free.\n* Take the 8th fruit for free.\n\n\nNote that even though you could take the 6th fruit for free as a reward of buying 3rd fruit, you purchase it to receive its reward, which is more optimal.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= prices.length <= 1000`\n* `1 <= prices[i] <= 105`\n\n\nHints:\n    0. The intended solution uses Dynamic Programming.\n    1. Let <code>dp[i]</code> denote the minimum number of coins, such that we bought <code>i<sup>th</sup></code>\u00a0fruit and acquired all the fruits in the range <code>[i...n]</code>.\n    2. <code>dp[i] = min(dp[i], dp[j] + prices[i]) </code>, where <code>j</code> is in the range <code>[i + 1, i + 1 + i]</code>."
            }
        ]
    },
    {
        "Title": "Find Maximum Non-decreasing Array Length",
        "slug": "find-maximum-non-decreasing-array-length",
        "description": "You are given a **0-indexed** integer array `nums`.\n\n\nYou can perform any number of operations, where each operation involves selecting a **subarray** of the array and replacing it with the **sum** of its elements. For example, if the given array is `[1,3,5,6]` and you select subarray `[3,5]` the array will convert to `[1,8,6]`.\n\n\nReturn *the* ***maximum*** *length of a* ***non-decreasing*** *array that can be made after applying operations.\n\n\nA **subarray** is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Dynamic Programming",
            "Stack",
            "Queue",
            "Monotonic Stack",
            "Monotonic Queue"
        ],
        "examples": [
            {
                "Input": "** nums = [5,2,2]",
                "Output": "** 1",
                "Explanation": "** This array with length 3 is not non-decreasing.\nWe have two ways to make the array length two.\nFirst, choosing subarray [2,2] converts the array to [5,4].\nSecond, choosing subarray [5,2] converts the array to [7,2].\nIn these two ways the array is not non-decreasing.\nAnd if we choose subarray [5,2,2] and replace it with [9] it becomes non-decreasing. \nSo the answer is 1."
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 4",
                "Explanation": "** The array is non-decreasing. So the answer is 4."
            },
            {
                "Input": "** nums = [4,3,2,6]",
                "Output": "** 3",
                "Explanation": "** Replacing [3,2] with [5] converts the given array to [4,5,6] that is non-decreasing.\nBecause the given array is not non-decreasing, the maximum possible answer is 3."
            }
        ]
    },
    {
        "Title": "Matrix Similarity After Cyclic Shifts",
        "slug": "matrix-similarity-after-cyclic-shifts",
        "description": "You are given an `m x n` integer matrix `mat` and an integer `k`. The matrix rows are 0-indexed.\n\n\nThe following proccess happens `k` times:\n\n\n **Even-indexed** rows (0, 2, 4, ...) are cyclically shifted to the left.\n\n\n![](https://assets.leetcode.com/uploads/2024/05/19/lshift.jpg)\n\n\n **Odd-indexed** rows (1, 3, 5, ...) are cyclically shifted to the right.\n\n\n![](https://assets.leetcode.com/uploads/2024/05/19/rshift-stlone.jpg)\n\n\nReturn `true` if the final modified matrix after `k` steps is identical to the original matrix, and `false` otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Matrix",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** mat = [[1,2,3],[4,5,6],[7,8,9]], k = 4",
                "Output": "** false",
                "Explanation": "**\n\n\nIn each step left shift is applied to rows 0 and 2 (even indices), and right shift to row 1 (odd index).\n\n\n![](https://assets.leetcode.com/uploads/2024/05/19/t1-2.jpg)"
            },
            {
                "Input": "** mat = [[1,2,1,2],[5,5,5,5],[6,3,6,3]], k = 2",
                "Output": "** true",
                "Explanation": "**\n\n\n![](https://assets.leetcode.com/uploads/2024/05/19/t1-3.jpg)"
            },
            {
                "Input": "** mat = [[2,2],[2,2]], k = 3",
                "Output": "** true",
                "Explanation": "**\n\n\nAs all the values are equal in the matrix, even after performing cyclic shifts the matrix will remain the same.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= mat.length <= 25`\n* `1 <= mat[i].length <= 25`\n* `1 <= mat[i][j] <= 25`\n* `1 <= k <= 50`"
            }
        ]
    },
    {
        "Title": "Count Beautiful Substrings I",
        "slug": "count-beautiful-substrings-i",
        "description": "You are given a string `s` and a positive integer `k`.\n\n\nLet `vowels` and `consonants` be the number of vowels and consonants in a string.\n\n\nA string is **beautiful** if:\n\n\n `vowels == consonants`.\n `(vowels * consonants) % k == 0`, in other terms the multiplication of `vowels` and `consonants` is divisible by `k`.\n\n\nReturn *the number of **non-empty beautiful substrings** in the given string* `s`.\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\nVowel letters** in English are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.\n\n\nConsonant letters** in English are every letter except vowels.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Math",
            "String",
            "Enumeration",
            "Number Theory",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** s = \"baeyh\", k = 2",
                "Output": "** 2",
                "Explanation": "** There are 2 beautiful substrings in the given string.\n- Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"y\",\"h\"]).\nYou can see that string \"aeyh\" is beautiful as vowels == consonants and vowels * consonants % k == 0.\n- Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"b\",\"y\"]). \nYou can see that string \"baey\" is beautiful as vowels == consonants and vowels * consonants % k == 0.\nIt can be shown that there are only 2 beautiful substrings in the given string."
            },
            {
                "Input": "** s = \"abba\", k = 1",
                "Output": "** 3",
                "Explanation": "** There are 3 beautiful substrings in the given string.\n- Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]). \n- Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]).\n- Substring \"abba\", vowels = 2 ([\"a\",\"a\"]), consonants = 2 ([\"b\",\"b\"]).\nIt can be shown that there are only 3 beautiful substrings in the given string."
            },
            {
                "Input": "** s = \"bcdf\", k = 1",
                "Output": "** 0",
                "Explanation": "** There are no beautiful substrings in the given string."
            }
        ]
    },
    {
        "Title": "Make Lexicographically Smallest Array by Swapping Elements",
        "slug": "make-lexicographically-smallest-array-by-swapping-elements",
        "description": "You are given a **0-indexed** array of **positive** integers `nums` and a **positive** integer `limit`.\n\n\nIn one operation, you can choose any two indices `i` and `j` and swap `nums[i]` and `nums[j]` **if** `|nums[i] - nums[j]| <= limit`.\n\n\nReturn *the **lexicographically smallest array** that can be obtained by performing the operation any number of times*.\n\n\nAn array `a` is lexicographically smaller than an array `b` if in the first position where `a` and `b` differ, array `a` has an element that is less than the corresponding element in `b`. For example, the array `[2,10,3]` is lexicographically smaller than the array `[10,2,3]` because they differ at index `0` and `2 < 10`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Union Find",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,5,3,9,8], limit = 2",
                "Output": "** [1,3,5,8,9]",
                "Explanation": "** Apply the operation 2 times:\n- Swap nums[1] with nums[2]. The array becomes [1,3,5,9,8]\n- Swap nums[3] with nums[4]. The array becomes [1,3,5,8,9]\nWe cannot obtain a lexicographically smaller array by applying any more operations.\nNote that it may be possible to get the same result by doing different operations."
            },
            {
                "Input": "** nums = [1,7,6,18,2,1], limit = 3",
                "Output": "** [1,6,7,18,1,2]",
                "Explanation": "** Apply the operation 3 times:\n- Swap nums[1] with nums[2]. The array becomes [1,6,7,18,2,1]\n- Swap nums[0] with nums[4]. The array becomes [2,6,7,18,1,1]\n- Swap nums[0] with nums[5]. The array becomes [1,6,7,18,1,2]\nWe cannot obtain a lexicographically smaller array by applying any more operations."
            },
            {
                "Input": "** nums = [1,7,28,19,10], limit = 3",
                "Output": "** [1,7,28,19,10]",
                "Explanation": "** [1,7,28,19,10] is the lexicographically smallest array we can obtain because we cannot apply the operation on any two indices."
            }
        ]
    },
    {
        "Title": "Count Beautiful Substrings II",
        "slug": "count-beautiful-substrings-ii",
        "description": "You are given a string `s` and a positive integer `k`.\n\n\nLet `vowels` and `consonants` be the number of vowels and consonants in a string.\n\n\nA string is **beautiful** if:\n\n\n `vowels == consonants`.\n `(vowels * consonants) % k == 0`, in other terms the multiplication of `vowels` and `consonants` is divisible by `k`.\n\n\nReturn *the number of **non-empty beautiful substrings** in the given string* `s`.\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\nVowel letters** in English are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.\n\n\nConsonant letters** in English are every letter except vowels.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "Math",
            "String",
            "Number Theory",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** s = \"baeyh\", k = 2",
                "Output": "** 2",
                "Explanation": "** There are 2 beautiful substrings in the given string.\n- Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"y\",\"h\"]).\nYou can see that string \"aeyh\" is beautiful as vowels == consonants and vowels * consonants % k == 0.\n- Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"b\",\"y\"]).\nYou can see that string \"baey\" is beautiful as vowels == consonants and vowels * consonants % k == 0.\nIt can be shown that there are only 2 beautiful substrings in the given string."
            },
            {
                "Input": "** s = \"abba\", k = 1",
                "Output": "** 3",
                "Explanation": "** There are 3 beautiful substrings in the given string.\n- Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]).\n- Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]).\n- Substring \"abba\", vowels = 2 ([\"a\",\"a\"]), consonants = 2 ([\"b\",\"b\"]).\nIt can be shown that there are only 3 beautiful substrings in the given string."
            },
            {
                "Input": "** s = \"bcdf\", k = 1",
                "Output": "** 0",
                "Explanation": "** There are no beautiful substrings in the given string."
            }
        ]
    },
    {
        "Title": "Find the Peaks",
        "slug": "find-the-peaks",
        "description": "You are given a **0-indexed** array `mountain`. Your task is to find all the **peaks** in the `mountain` array.\n\n\nReturn *an array that consists of* indices *of **peaks** in the given array in **any order**.\n\n\nNotes:\n\n\n A **peak** is defined as an element that is **strictly greater** than its neighboring elements.\n The first and last elements of the array are **not** a peak.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** mountain = [2,4,4]",
                "Output": "** []",
                "Explanation": "** mountain[0] and mountain[2] can not be a peak because they are first and last elements of the array.\nmountain[1] also can not be a peak because it is not strictly greater than mountain[2].\nSo the answer is []."
            },
            {
                "Input": "** mountain = [1,4,3,8,5]",
                "Output": "** [1,3]",
                "Explanation": "** mountain[0] and mountain[4] can not be a peak because they are first and last elements of the array.\nmountain[2] also can not be a peak because it is not strictly greater than mountain[3] and mountain[1].\nBut mountain [1] and mountain[3] are strictly greater than their neighboring elements.\nSo the answer is [1,3]."
            }
        ]
    },
    {
        "Title": "Minimum Number of Coins to be Added",
        "slug": "minimum-number-of-coins-to-be-added",
        "description": "You are given a **0-indexed** integer array `coins`, representing the values of the coins available, and an integer `target`.\n\n\nAn integer `x` is **obtainable** if there exists a subsequence of `coins` that sums to `x`.\n\n\nReturn *the **minimum** number of coins **of any value** that need to be added to the array so that every integer in the range* `[1, target]` *is **obtainable***.\n\n\nA **subsequence** of an array is a new **non-empty** array that is formed from the original array by deleting some (**possibly none**) of the elements without disturbing the relative positions of the remaining elements.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** coins = [1,4,10], target = 19",
                "Output": "** 2",
                "Explanation": "** We need to add coins 2 and 8. The resulting array will be [1,2,4,8,10].\nIt can be shown that all integers from 1 to 19 are obtainable from the resulting array, and that 2 is the minimum number of coins that need to be added to the array."
            },
            {
                "Input": "** coins = [1,4,10,5,7,19], target = 19",
                "Output": "** 1",
                "Explanation": "** We only need to add the coin 2. The resulting array will be [1,2,4,5,7,10,19].\nIt can be shown that all integers from 1 to 19 are obtainable from the resulting array, and that 1 is the minimum number of coins that need to be added to the array."
            },
            {
                "Input": "** coins = [1,1,1], target = 20",
                "Output": "** 3",
                "Explanation": "** We need to add coins 4, 8, and 16. The resulting array will be [1,1,1,4,8,16].\nIt can be shown that all integers from 1 to 20 are obtainable from the resulting array, and that 3 is the minimum number of coins that need to be added to the array."
            }
        ]
    },
    {
        "Title": "Count Complete Substrings",
        "slug": "count-complete-substrings",
        "description": "You are given a string `word` and an integer `k`.\n\n\nA substring `s` of `word` is **complete** if:\n\n\n Each character in `s` occurs **exactly** `k` times.\n The difference between two adjacent characters is **at most** `2`. That is, for any two adjacent characters `c1` and `c2` in `s`, the absolute difference in their positions in the alphabet is **at most** `2`.\n\n\nReturn *the number of **complete** substrings of* `word`.\n\n\nA **substring** is a **non-empty** contiguous sequence of characters in a string.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "String",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** word = \"igigee\", k = 2",
                "Output": "** 3",
                "Explanation": "** The complete substrings where each character appears exactly twice and the difference between adjacent characters is at most 2 are: **igig**ee, igig**ee**, **igigee**."
            },
            {
                "Input": "** word = \"aaabbbccc\", k = 3",
                "Output": "** 6",
                "Explanation": "** The complete substrings where each character appears exactly three times and the difference between adjacent characters is at most 2 are: **aaa**bbbccc, aaa**bbb**ccc, aaabbb**ccc**, **aaabbb**ccc, aaa**bbbccc**, **aaabbbccc**."
            }
        ]
    },
    {
        "Title": "Count the Number of Infection Sequences",
        "slug": "count-the-number-of-infection-sequences",
        "description": "You are given an integer `n` and an array `sick` sorted in increasing order, representing positions of infected people in a line of `n` people.\n\n\nAt each step, **one** uninfected person **adjacent** to an infected person gets infected. This process continues until everyone is infected.\n\n\nAn **infection sequence** is the order in which uninfected people become infected, excluding those initially infected.\n\n\nReturn the number of different infection sequences possible, modulo `109+7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Combinatorics"
        ],
        "examples": [
            {
                "Input": "** n = 5, sick = [0,4]",
                "Output": "** 4",
                "Explanation": "**\n\n\nThere is a total of 6 different sequences overall.\n\n\n* Valid infection sequences are `[1,2,3]`, `[1,3,2]`, `[3,2,1]` and `[3,1,2]`.\n* `[2,3,1]` and `[2,1,3]` are not valid infection sequences because the person at index 2 cannot be infected at the first step."
            },
            {
                "Input": "** n = 4, sick = [1]",
                "Output": "** 3",
                "Explanation": "**\n\n\nThere is a total of 6 different sequences overall.\n\n\n* Valid infection sequences are `[0,2,3]`, `[2,0,3]` and `[2,3,0]`.\n* `[3,2,0]`, `[3,0,2]`, and `[0,3,2]` are not valid infection sequences because the infection starts at the person at index 1, then the order of infection is 2, then 3, and hence 3 cannot be infected earlier than 2.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= n <= 105`\n* `1 <= sick.length <= n - 1`\n* `0 <= sick[i] <= n - 1`\n* `sick` is sorted in increasing order.\n\n\nHints:\n    0. Consider infected children as <code>0</code> and non-infected as <code>1</code>, then divide the array into segments with the same value.\n    1. For each segment of non-infected children whose indices are <code>[i, j]</code> and indices <code>(i - 1)</code> and <code>(j + 1)</code>, if they exist, are already infected. Then if <code>i == 0</code> or <code>j == n - 1</code>, each second there is only one kid that can be infected (which is at the other endpoint).\n    2. If <code>i > 0</code> and <code>j < n - 1</code>, we have two choices per second since the children at the two endpoints can both be the infect candidates. So there are <code>2<sup>j - i</sup></code> orders to infect all children in the segment.\n    3. Each second we can select a segment and select one endpoint from it.\n    4. The answer is: \r\n<code>S! / (len[1]! * len[2]! * ... * len[m]!) * 2<sup>k</sup></code> \r\nwhere <code>len[1], len[2], ..., len[m]</code> are the lengths of each segment of non-infected children that have an infected child at both endpoints, <code>S</code> is the total length of all segments of non-infected children, and <code>k = (len[1] - 1) + (len[2] - 1) + ... + (len[m] - 1)</code>.\nSimilarQuestions: [749, 2385]"
            }
        ]
    },
    {
        "Title": "Find Common Elements Between Two Arrays",
        "slug": "find-common-elements-between-two-arrays",
        "description": "You are given two integer arrays `nums1` and `nums2` of sizes `n` and `m`, respectively. Calculate the following values:\n\n\n `answer1` : the number of indices `i` such that `nums1[i]` exists in `nums2`.\n `answer2` : the number of indices `i` such that `nums2[i]` exists in `nums1`.\n\n\nReturn `[answer1,answer2]`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** nums1 = [2,3,2], nums2 = [1,2]",
                "Output": "** [2,1]",
                "Explanation": "**\n\n\n![](https://assets.leetcode.com/uploads/2024/05/26/3488_find_common_elements_between_two_arrays-t1.gif)"
            },
            {
                "Input": "** nums1 = [4,3,2,3,1], nums2 = [2,2,5,2,3,6]",
                "Output": "** [3,4]",
                "Explanation": "**\n\n\nThe elements at indices 1, 2, and 3 in `nums1` exist in `nums2` as well. So `answer1` is 3.\n\n\nThe elements at indices 0, 1, 3, and 4 in `nums2` exist in `nums1`. So `answer2` is 4."
            },
            {
                "Input": "** nums1 = [3,4,2,3], nums2 = [1,5]",
                "Output": "** [0,0]",
                "Explanation": "**\n\n\nNo numbers are common between `nums1` and `nums2`, so answer is [0,0].\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums1.length`\n* `m == nums2.length`\n* `1 <= n, m <= 100`\n* `1 <= nums1[i], nums2[i] <= 100`\n\n\nHints:\n    0. Since the constraints are small, you can use brute force to solve the problem.\n    1. For each element <code>i</code> in <code>nums1</code>, iterate over all elements of <code>nums2</code> to find if it occurs."
            }
        ]
    },
    {
        "Title": "Remove Adjacent Almost-Equal Characters",
        "slug": "remove-adjacent-almost-equal-characters",
        "description": "You are given a **0-indexed** string `word`.\n\n\nIn one operation, you can pick any index `i` of `word` and change `word[i]` to any lowercase English letter.\n\n\nReturn *the **minimum** number of operations needed to remove all adjacent **almost-equal** characters from* `word`.\n\n\nTwo characters `a` and `b` are **almost-equal** if `a == b` or `a` and `b` are adjacent in the alphabet.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** word = \"aaaaa\"",
                "Output": "** 2",
                "Explanation": "** We can change word into \"a**c**a**c**a\" which does not have any adjacent almost-equal characters.\nIt can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 2."
            },
            {
                "Input": "** word = \"abddez\"",
                "Output": "** 2",
                "Explanation": "** We can change word into \"**y**bd**o**ez\" which does not have any adjacent almost-equal characters.\nIt can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 2."
            },
            {
                "Input": "** word = \"zyxyxyz\"",
                "Output": "** 3",
                "Explanation": "** We can change word into \"z**a**x**a**x**a**z\" which does not have any adjacent almost-equal characters. \nIt can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 3."
            }
        ]
    },
    {
        "Title": "Length of Longest Subarray With at Most K Frequency",
        "slug": "length-of-longest-subarray-with-at-most-k-frequency",
        "description": "You are given an integer array `nums` and an integer `k`.\n\n\nThe **frequency** of an element `x` is the number of times it occurs in an array.\n\n\nAn array is called **good** if the frequency of each element in this array is **less than or equal** to `k`.\n\n\nReturn *the length of the **longest** **good** subarray of* `nums`*.\n\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,1,2,3,1,2], k = 2",
                "Output": "** 6",
                "Explanation": "** The longest possible good subarray is [1,2,3,1,2,3] since the values 1, 2, and 3 occur at most twice in this subarray. Note that the subarrays [2,3,1,2,3,1] and [3,1,2,3,1,2] are also good.\nIt can be shown that there are no good subarrays with length more than 6."
            },
            {
                "Input": "** nums = [1,2,1,2,1,2,1,2], k = 1",
                "Output": "** 2",
                "Explanation": "** The longest possible good subarray is [1,2] since the values 1 and 2 occur at most once in this subarray. Note that the subarray [2,1] is also good.\nIt can be shown that there are no good subarrays with length more than 2."
            },
            {
                "Input": "** nums = [5,5,5,5,5,5,5], k = 4",
                "Output": "** 4",
                "Explanation": "** The longest possible good subarray is [5,5,5,5] since the value 5 occurs 4 times in this subarray.\nIt can be shown that there are no good subarrays with length more than 4."
            }
        ]
    },
    {
        "Title": "Number of Possible Sets of Closing Branches",
        "slug": "number-of-possible-sets-of-closing-branches",
        "description": "There is a company with `n` branches across the country, some of which are connected by roads. Initially, all branches are reachable from each other by traveling some roads.\n\n\nThe company has realized that they are spending an excessive amount of time traveling between their branches. As a result, they have decided to close down some of these branches (**possibly none**). However, they want to ensure that the remaining branches have a distance of at most `maxDistance` from each other.\n\n\nThe **distance** between two branches is the **minimum** total traveled length needed to reach one branch from another.\n\n\nYou are given integers `n`, `maxDistance`, and a **0-indexed** 2D array `roads`, where `roads[i] = [ui, vi, wi]` represents the **undirected** road between branches `ui` and `vi` with length `wi`.\n\n\nReturn *the number of possible sets of closing branches, so that any branch has a distance of at most* `maxDistance` *from any other*.\n\n\nNote** that, after closing a branch, the company will no longer have access to any roads connected to it.\n\n\nNote** that, multiple roads are allowed.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Bit Manipulation",
            "Graph",
            "Heap (Priority Queue)",
            "Enumeration",
            "Shortest Path"
        ],
        "examples": [
            {
                "Input": "** n = 3, maxDistance = 5, roads = [[0,1,2],[1,2,10],[0,2,10]]",
                "Output": "** 5",
                "Explanation": "** The possible sets of closing branches are:\n- The set [2], after closing, active branches are [0,1] and they are reachable to each other within distance 2.\n- The set [0,1], after closing, the active branch is [2].\n- The set [1,2], after closing, the active branch is [0].\n- The set [0,2], after closing, the active branch is [1].\n- The set [0,1,2], after closing, there are no active branches.\nIt can be proven, that there are only 5 possible sets of closing branches."
            },
            {
                "Input": "** n = 3, maxDistance = 5, roads = [[0,1,20],[0,1,10],[1,2,2],[0,2,2]]",
                "Output": "** 7",
                "Explanation": "** The possible sets of closing branches are:\n- The set [], after closing, active branches are [0,1,2] and they are reachable to each other within distance 4.\n- The set [0], after closing, active branches are [1,2] and they are reachable to each other within distance 2.\n- The set [1], after closing, active branches are [0,2] and they are reachable to each other within distance 2.\n- The set [0,1], after closing, the active branch is [2].\n- The set [1,2], after closing, the active branch is [0].\n- The set [0,2], after closing, the active branch is [1].\n- The set [0,1,2], after closing, there are no active branches.\nIt can be proven, that there are only 7 possible sets of closing branches."
            }
        ]
    },
    {
        "Title": "Count Tested Devices After Test Operations",
        "slug": "count-tested-devices-after-test-operations",
        "description": "You are given a **0-indexed** integer array `batteryPercentages` having length `n`, denoting the battery percentages of `n` **0-indexed** devices.\n\n\nYour task is to test each device `i` **in order** from `0` to `n - 1`, by performing the following test operations:\n\n\n If `batteryPercentages[i]` is **greater** than `0`:\n\t+ **Increment** the count of tested devices.\n\t+ **Decrease** the battery percentage of all devices with indices `j` in the range `[i + 1, n - 1]` by `1`, ensuring their battery percentage **never goes below** `0`, i.e, `batteryPercentages[j] = max(0, batteryPercentages[j] - 1)`.\n\t+ Move to the next device.\n Otherwise, move to the next device without performing any test.\n\n\nReturn *an integer denoting the number of devices that will be tested after performing the test operations in order.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** batteryPercentages = [1,1,2,1,3]",
                "Output": "** 3",
                "Explanation": "** Performing the test operations in order starting from device 0:\nAt device 0, batteryPercentages[0] > 0, so there is now 1 tested device, and batteryPercentages becomes [1,0,1,0,2].\nAt device 1, batteryPercentages[1] == 0, so we move to the next device without testing.\nAt device 2, batteryPercentages[2] > 0, so there are now 2 tested devices, and batteryPercentages becomes [1,0,1,0,1].\nAt device 3, batteryPercentages[3] == 0, so we move to the next device without testing.\nAt device 4, batteryPercentages[4] > 0, so there are now 3 tested devices, and batteryPercentages stays the same.\nSo, the answer is 3."
            },
            {
                "Input": "** batteryPercentages = [0,1,2]",
                "Output": "** 2",
                "Explanation": "** Performing the test operations in order starting from device 0:\nAt device 0, batteryPercentages[0] == 0, so we move to the next device without testing.\nAt device 1, batteryPercentages[1] > 0, so there is now 1 tested device, and batteryPercentages becomes [0,1,1].\nAt device 2, batteryPercentages[2] > 0, so there are now 2 tested devices, and batteryPercentages stays the same.\nSo, the answer is 2."
            }
        ]
    },
    {
        "Title": "Double Modular Exponentiation",
        "slug": "double-modular-exponentiation",
        "description": "You are given a **0-indexed** 2D array `variables` where `variables[i] = [ai, bi, ci, mi]`, and an integer `target`.\n\n\nAn index `i` is **good** if the following formula holds:\n\n\n `0 <= i < variables.length`\n `((aibi % 10)ci) % mi == target`\n\n\nReturn *an array consisting of **good** indices in **any order***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** variables = [[2,3,3,10],[3,3,3,1],[6,1,1,4]], target = 2",
                "Output": "** [0,2]",
                "Explanation": "** For each index i in the variables array:\n1) For the index 0, variables[0] = [2,3,3,10], (23 % 10)3 % 10 = 2.\n2) For the index 1, variables[1] = [3,3,3,1], (33 % 10)3 % 1 = 0.\n3) For the index 2, variables[2] = [6,1,1,4], (61 % 10)1 % 4 = 2.\nTherefore we return [0,2] as the answer."
            },
            {
                "Input": "** variables = [[39,3,1000,1000]], target = 17",
                "Output": "** []",
                "Explanation": "** For each index i in the variables array:\n1) For the index 0, variables[0] = [39,3,1000,1000], (393 % 10)1000 % 1000 = 1.\nTherefore we return [] as the answer."
            }
        ]
    },
    {
        "Title": "Count Subarrays Where Max Element Appears at Least K Times",
        "slug": "count-subarrays-where-max-element-appears-at-least-k-times",
        "description": "You are given an integer array `nums` and a **positive** integer `k`.\n\n\nReturn *the number of subarrays where the **maximum** element of* `nums` *appears **at least*** `k` *times in that subarray.\n\n\nA **subarray** is a contiguous sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,2,3,3], k = 2",
                "Output": "** 6",
                "Explanation": "** The subarrays that contain the element 3 at least 2 times are: [1,3,2,3], [1,3,2,3,3], [3,2,3], [3,2,3,3], [2,3,3] and [3,3]."
            },
            {
                "Input": "** nums = [1,4,2,1], k = 3",
                "Output": "** 0",
                "Explanation": "** No subarray contains the element 4 at least 3 times."
            }
        ]
    },
    {
        "Title": "Count the Number of Good Partitions",
        "slug": "count-the-number-of-good-partitions",
        "description": "You are given a **0-indexed** array `nums` consisting of **positive** integers.\n\n\nA partition of an array into one or more **contiguous** subarrays is called **good** if no two subarrays contain the same number.\n\n\nReturn *the **total number** of good partitions of* `nums`.\n\n\nSince the answer may be large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Combinatorics"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 8",
                "Explanation": "** The 8 possible good partitions are: ([1], [2], [3], [4]), ([1], [2], [3,4]), ([1], [2,3], [4]), ([1], [2,3,4]), ([1,2], [3], [4]), ([1,2], [3,4]), ([1,2,3], [4]), and ([1,2,3,4])."
            },
            {
                "Input": "** nums = [1,1,1,1]",
                "Output": "** 1",
                "Explanation": "** The only possible good partition is: ([1,1,1,1])."
            },
            {
                "Input": "** nums = [1,2,1,3]",
                "Output": "** 2",
                "Explanation": "** The 2 possible good partitions are: ([1,2,1], [3]) and ([1,2,1,3])."
            }
        ]
    },
    {
        "Title": "Find Missing and Repeated Values",
        "slug": "find-missing-and-repeated-values",
        "description": "You are given a **0-indexed** 2D integer matrix `grid` of size `n * n` with values in the range `[1, n2]`. Each integer appears **exactly once** except `a` which appears **twice** and `b` which is **missing**. The task is to find the repeating and missing numbers `a` and `b`.\n\n\nReturn *a **0-indexed** integer array* `ans` *of size* `2` *where* `ans[0]` *equals to* `a` *and* `ans[1]` *equals to* `b`*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,3],[2,2]]",
                "Output": "** [2,4]",
                "Explanation": "** Number 2 is repeated and number 4 is missing so the answer is [2,4]."
            },
            {
                "Input": "** grid = [[9,1,7],[8,9,2],[3,4,6]]",
                "Output": "** [9,5]",
                "Explanation": "** Number 9 is repeated and number 5 is missing so the answer is [9,5]."
            }
        ]
    },
    {
        "Title": "Divide Array Into Arrays With Max Difference",
        "slug": "divide-array-into-arrays-with-max-difference",
        "description": "You are given an integer array `nums` of size `n` and a positive integer `k`.\n\n\nDivide the array into one or more arrays of size `3` satisfying the following conditions:\n\n\n **Each** element of `nums` should be in **exactly** one array.\n The difference between **any** two elements in one array is less than or equal to `k`.\n\n\nReturn *a* **2D** *array containing all the arrays. If it is impossible to satisfy the conditions, return an empty array. And if there are multiple answers, return **any** of them.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,4,8,7,9,3,5,1], k = 2",
                "Output": "** [[1,1,3],[3,4,5],[7,8,9]]",
                "Explanation": "** We can divide the array into the following arrays: [1,1,3], [3,4,5] and [7,8,9].\nThe difference between any two elements in each array is less than or equal to 2.\nNote that the order of elements is not important."
            },
            {
                "Input": "** nums = [1,3,3,2,7,3], k = 3",
                "Output": "** []",
                "Explanation": "** It is not possible to divide the array satisfying all the conditions."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Make Array Equalindromic",
        "slug": "minimum-cost-to-make-array-equalindromic",
        "description": "You are given a **0-indexed** integer array `nums` having length `n`.\n\n\nYou are allowed to perform a special move **any** number of times (**including zero**) on `nums`. In one **special** **move** you perform the following steps **in order**:\n\n\n Choose an index `i` in the range `[0, n - 1]`, and a **positive** integer `x`.\n Add `|nums[i] - x|` to the total cost.\n Change the value of `nums[i]` to `x`.\n\n\nA **palindromic number** is a positive integer that remains the same when its digits are reversed. For example, `121`, `2552` and `65756` are palindromic numbers whereas `24`, `46`, `235` are not palindromic numbers.\n\n\nAn array is considered **equalindromic** if all the elements in the array are equal to an integer `y`, where `y` is a **palindromic number** less than `109`.\n\n\nReturn *an integer denoting the **minimum** possible total cost to make* `nums` ***equalindromic** by performing any number of special moves.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** 6",
                "Explanation": "** We can make the array equalindromic by changing all elements to 3 which is a palindromic number. The cost of changing the array to [3,3,3,3,3] using 4 special moves is given by |1 - 3| + |2 - 3| + |4 - 3| + |5 - 3| = 6.\nIt can be shown that changing all elements to any palindromic number other than 3 cannot be achieved at a lower cost."
            },
            {
                "Input": "** nums = [10,12,13,14,15]",
                "Output": "** 11",
                "Explanation": "** We can make the array equalindromic by changing all elements to 11 which is a palindromic number. The cost of changing the array to [11,11,11,11,11] using 5 special moves is given by |10 - 11| + |12 - 11| + |13 - 11| + |14 - 11| + |15 - 11| = 11.\nIt can be shown that changing all elements to any palindromic number other than 11 cannot be achieved at a lower cost."
            },
            {
                "Input": "** nums = [22,33,22,33,22]",
                "Output": "** 22",
                "Explanation": "** We can make the array equalindromic by changing all elements to 22 which is a palindromic number. The cost of changing the array to [22,22,22,22,22] using 2 special moves is given by |33 - 22| + |33 - 22| = 22.\nIt can be shown that changing all elements to any palindromic number other than 22 cannot be achieved at a lower cost."
            }
        ]
    },
    {
        "Title": "Apply Operations to Maximize Frequency Score",
        "slug": "apply-operations-to-maximize-frequency-score",
        "description": "You are given a **0-indexed** integer array `nums` and an integer `k`.\n\n\nYou can perform the following operation on the array **at most** `k` times:\n\n\n Choose any index `i` from the array and **increase** or **decrease** `nums[i]` by `1`.\n\n\nThe score of the final array is the **frequency** of the most frequent element in the array.\n\n\nReturn *the **maximum** score you can achieve*.\n\n\nThe frequency of an element is the number of occurences of that element in the array.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Sliding Window",
            "Sorting",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,6,4], k = 3",
                "Output": "** 3",
                "Explanation": "** We can do the following operations on the array:\n- Choose i = 0, and increase the value of nums[0] by 1. The resulting array is [2,2,6,4].\n- Choose i = 3, and decrease the value of nums[3] by 1. The resulting array is [2,2,6,3].\n- Choose i = 3, and decrease the value of nums[3] by 1. The resulting array is [2,2,6,2].\nThe element 2 is the most frequent in the final array so our score is 3.\nIt can be shown that we cannot achieve a better score."
            },
            {
                "Input": "** nums = [1,4,4,2,4], k = 0",
                "Output": "** 3",
                "Explanation": "** We cannot apply any operations so our score will be the frequency of the most frequent element in the original array, which is 3."
            }
        ]
    },
    {
        "Title": "Count the Number of Incremovable Subarrays I",
        "slug": "count-the-number-of-incremovable-subarrays-i",
        "description": "You are given a **0-indexed** array of **positive** integers `nums`.\n\n\nA subarray of `nums` is called **incremovable** if `nums` becomes **strictly increasing** on removing the subarray. For example, the subarray `[3, 4]` is an incremovable subarray of `[5, 3, 4, 6, 7]` because removing this subarray changes the array `[5, 3, 4, 6, 7]` to `[5, 6, 7]` which is strictly increasing.\n\n\nReturn *the total number of **incremovable** subarrays of* `nums`.\n\n\nNote** that an empty array is considered strictly increasing.\n\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 10",
                "Explanation": "** The 10 incremovable subarrays are: [1], [2], [3], [4], [1,2], [2,3], [3,4], [1,2,3], [2,3,4], and [1,2,3,4], because on removing any one of these subarrays nums becomes strictly increasing. Note that you cannot select an empty subarray."
            },
            {
                "Input": "** nums = [6,5,7,8]",
                "Output": "** 7",
                "Explanation": "** The 7 incremovable subarrays are: [5], [6], [5,7], [6,5], [5,7,8], [6,5,7] and [6,5,7,8].\nIt can be shown that there are only 7 incremovable subarrays in nums."
            },
            {
                "Input": "** nums = [8,7,6,6]",
                "Output": "** 3",
                "Explanation": "** The 3 incremovable subarrays are: [8,7,6], [7,6,6], and [8,7,6,6]. Note that [8,7] is not an incremovable subarray because after removing [8,7] nums becomes [6,6], which is sorted in ascending order but not strictly increasing."
            }
        ]
    },
    {
        "Title": "Find Polygon With the Largest Perimeter",
        "slug": "find-polygon-with-the-largest-perimeter",
        "description": "You are given an array of **positive** integers `nums` of length `n`.\n\n\nA **polygon** is a closed plane figure that has at least `3` sides. The **longest side** of a polygon is **smaller** than the sum of its other sides.\n\n\nConversely, if you have `k` (`k >= 3`) **positive** real numbers `a1`, `a2`, `a3`, ..., `ak` where `a1 <= a2 <= a3 <= ... <= ak` **and** `a1 + a2 + a3 + ... + ak-1 > ak`, then there **always** exists a polygon with `k` sides whose lengths are `a1`, `a2`, `a3`, ..., `ak`.\n\n\nThe **perimeter** of a polygon is the sum of lengths of its sides.\n\n\nReturn *the **largest** possible **perimeter** of a **polygon** whose sides can be formed from* `nums`, *or* `-1` *if it is not possible to create a polygon*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [5,5,5]",
                "Output": "** 15",
                "Explanation": "** The only possible polygon that can be made from nums has 3 sides: 5, 5, and 5. The perimeter is 5 + 5 + 5 = 15."
            },
            {
                "Input": "** nums = [1,12,1,2,5,50,3]",
                "Output": "** 12",
                "Explanation": "** The polygon with the largest perimeter which can be made from nums has 5 sides: 1, 1, 2, 3, and 5. The perimeter is 1 + 1 + 2 + 3 + 5 = 12.\nWe cannot have a polygon with either 12 or 50 as the longest side because it is not possible to include 2 or more smaller sides that have a greater sum than either of them.\nIt can be shown that the largest possible perimeter is 12."
            },
            {
                "Input": "** nums = [5,5,50]",
                "Output": "** -1",
                "Explanation": "** There is no possible way to form a polygon from nums, as a polygon has at least 3 sides and 50 > 5 + 5."
            }
        ]
    },
    {
        "Title": "Count the Number of Incremovable Subarrays II",
        "slug": "count-the-number-of-incremovable-subarrays-ii",
        "description": "You are given a **0-indexed** array of **positive** integers `nums`.\n\n\nA subarray of `nums` is called **incremovable** if `nums` becomes **strictly increasing** on removing the subarray. For example, the subarray `[3, 4]` is an incremovable subarray of `[5, 3, 4, 6, 7]` because removing this subarray changes the array `[5, 3, 4, 6, 7]` to `[5, 6, 7]` which is strictly increasing.\n\n\nReturn *the total number of **incremovable** subarrays of* `nums`.\n\n\nNote** that an empty array is considered strictly increasing.\n\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 10",
                "Explanation": "** The 10 incremovable subarrays are: [1], [2], [3], [4], [1,2], [2,3], [3,4], [1,2,3], [2,3,4], and [1,2,3,4], because on removing any one of these subarrays nums becomes strictly increasing. Note that you cannot select an empty subarray."
            },
            {
                "Input": "** nums = [6,5,7,8]",
                "Output": "** 7",
                "Explanation": "** The 7 incremovable subarrays are: [5], [6], [5,7], [6,5], [5,7,8], [6,5,7] and [6,5,7,8].\nIt can be shown that there are only 7 incremovable subarrays in nums."
            },
            {
                "Input": "** nums = [8,7,6,6]",
                "Output": "** 3",
                "Explanation": "** The 3 incremovable subarrays are: [8,7,6], [7,6,6], and [8,7,6,6]. Note that [8,7] is not an incremovable subarray because after removing [8,7] nums becomes [6,6], which is sorted in ascending order but not strictly increasing."
            }
        ]
    },
    {
        "Title": "Find Number of Coins to Place in Tree Nodes",
        "slug": "find-number-of-coins-to-place-in-tree-nodes",
        "description": "You are given an **undirected** tree with `n` nodes labeled from `0` to `n - 1`, and rooted at node `0`. You are given a 2D integer array `edges` of length `n - 1`, where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree.\n\n\nYou are also given a **0-indexed** integer array `cost` of length `n`, where `cost[i]` is the **cost** assigned to the `ith` node.\n\n\nYou need to place some coins on every node of the tree. The number of coins to be placed at node `i` can be calculated as:\n\n\n If size of the subtree of node `i` is less than `3`, place `1` coin.\n Otherwise, place an amount of coins equal to the **maximum** product of cost values assigned to `3` distinct nodes in the subtree of node `i`. If this product is **negative**, place `0` coins.\n\n\nReturn *an array* `coin` *of size* `n` *such that* `coin[i]` *is the number of coins placed at node* `i`*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Tree",
            "Depth-First Search",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** edges = [[0,1],[0,2],[0,3],[0,4],[0,5]], cost = [1,2,3,4,5,6]",
                "Output": "** [120,1,1,1,1,1]",
                "Explanation": "** For node 0 place 6 * 5 * 4 = 120 coins. All other nodes are leaves with subtree of size 1, place 1 coin on each of them."
            },
            {
                "Input": "** edges = [[0,1],[0,2],[1,3],[1,4],[1,5],[2,6],[2,7],[2,8]], cost = [1,4,2,3,5,7,8,-4,2]",
                "Output": "** [280,140,32,1,1,1,1,1,1]",
                "Explanation": "** The coins placed on each node are:\n- Place 8 * 7 * 5 = 280 coins on node 0.\n- Place 7 * 5 * 4 = 140 coins on node 1.\n- Place 8 * 2 * 2 = 32 coins on node 2.\n- All other nodes are leaves with subtree of size 1, place 1 coin on each of them."
            },
            {
                "Input": "** edges = [[0,1],[0,2]], cost = [1,2,-2]",
                "Output": "** [0,1,1]",
                "Explanation": "** Node 1 and 2 are leaves with subtree of size 1, place 1 coin on each of them. For node 0 the only possible product of cost is 2 * 1 * -2 = -4. Hence place 0 coins on node 0."
            }
        ]
    },
    {
        "Title": "Minimum Number Game",
        "slug": "minimum-number-game",
        "description": "You are given a **0-indexed** integer array `nums` of **even** length and there is also an empty array `arr`. Alice and Bob decided to play a game where in every round Alice and Bob will do one move. The rules of the game are as follows:\n\n\n Every round, first Alice will remove the **minimum** element from `nums`, and then Bob does the same.\n Now, first Bob will append the removed element in the array `arr`, and then Alice does the same.\n The game continues until `nums` becomes empty.\n\n\nReturn *the resulting array* `arr`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting",
            "Heap (Priority Queue)",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [5,4,2,3]",
                "Output": "** [3,2,5,4]",
                "Explanation": "** In round one, first Alice removes 2 and then Bob removes 3. Then in arr firstly Bob appends 3 and then Alice appends 2. So arr = [3,2].\nAt the begining of round two, nums = [5,4]. Now, first Alice removes 4 and then Bob removes 5. Then both append in arr which becomes [3,2,5,4]."
            },
            {
                "Input": "** nums = [2,5]",
                "Output": "** [5,2]",
                "Explanation": "** In round one, first Alice removes 2 and then Bob removes 5. Then in arr firstly Bob appends and then Alice appends. So arr = [5,2]."
            }
        ]
    },
    {
        "Title": "Maximum Square Area by Removing Fences From a Field",
        "slug": "maximum-square-area-by-removing-fences-from-a-field",
        "description": "There is a large `(m - 1) x (n - 1)` rectangular field with corners at `(1, 1)` and `(m, n)` containing some horizontal and vertical fences given in arrays `hFences` and `vFences` respectively.\n\n\nHorizontal fences are from the coordinates `(hFences[i], 1)` to `(hFences[i], n)` and vertical fences are from the coordinates `(1, vFences[i])` to `(m, vFences[i])`.\n\n\nReturn *the **maximum** area of a **square** field that can be formed by **removing** some fences (**possibly none**) or* `-1` *if it is impossible to make a square field*.\n\n\nSince the answer may be large, return it **modulo** `109 + 7`.\n\n\nNote:** The field is surrounded by two horizontal fences from the coordinates `(1, 1)` to `(1, n)` and `(m, 1)` to `(m, n)` and two vertical fences from the coordinates `(1, 1)` to `(m, 1)` and `(1, n)` to `(m, n)`. These fences **cannot** be removed.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** m = 4, n = 3, hFences = [2,3], vFences = [2]",
                "Output": "** 4",
                "Explanation": "** Removing the horizontal fence at 2 and the vertical fence at 2 will give a square field of area 4."
            },
            {
                "Input": "** m = 6, n = 7, hFences = [2], vFences = [4]",
                "Output": "** -1",
                "Explanation": "** It can be proved that there is no way to create a square field by removing fences."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Convert String I",
        "slug": "minimum-cost-to-convert-string-i",
        "description": "You are given two **0-indexed** strings `source` and `target`, both of length `n` and consisting of **lowercase** English letters. You are also given two **0-indexed** character arrays `original` and `changed`, and an integer array `cost`, where `cost[i]` represents the cost of changing the character `original[i]` to the character `changed[i]`.\n\n\nYou start with the string `source`. In one operation, you can pick a character `x` from the string and change it to the character `y` at a cost of `z` **if** there exists **any** index `j` such that `cost[j] == z`, `original[j] == x`, and `changed[j] == y`.\n\n\nReturn *the **minimum** cost to convert the string* `source` *to the string* `target` *using **any** number of operations. If it is impossible to convert* `source` *to* `target`, *return* `-1`.\n\n\nNote** that there may exist indices `i`, `j` such that `original[j] == original[i]` and `changed[j] == changed[i]`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Graph",
            "Shortest Path"
        ],
        "examples": [
            {
                "Input": "** source = \"abcd\", target = \"acbe\", original = [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], changed = [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], cost = [2,5,5,1,2,20]",
                "Output": "** 28",
                "Explanation": "** To convert the string \"abcd\" to string \"acbe\":\n- Change value at index 1 from 'b' to 'c' at a cost of 5.\n- Change value at index 2 from 'c' to 'e' at a cost of 1.\n- Change value at index 2 from 'e' to 'b' at a cost of 2.\n- Change value at index 3 from 'd' to 'e' at a cost of 20.\nThe total cost incurred is 5 + 1 + 2 + 20 = 28.\nIt can be shown that this is the minimum possible cost."
            },
            {
                "Input": "** source = \"aaaa\", target = \"bbbb\", original = [\"a\",\"c\"], changed = [\"c\",\"b\"], cost = [1,2]",
                "Output": "** 12",
                "Explanation": "** To change the character 'a' to 'b' change the character 'a' to 'c' at a cost of 1, followed by changing the character 'c' to 'b' at a cost of 2, for a total cost of 1 + 2 = 3. To change all occurrences of 'a' to 'b', a total cost of 3 * 4 = 12 is incurred."
            },
            {
                "Input": "** source = \"abcd\", target = \"abce\", original = [\"a\"], changed = [\"e\"], cost = [10000]",
                "Output": "** -1",
                "Explanation": "** It is impossible to convert source to target because the value at index 3 cannot be changed from 'd' to 'e'."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Convert String II",
        "slug": "minimum-cost-to-convert-string-ii",
        "description": "You are given two **0-indexed** strings `source` and `target`, both of length `n` and consisting of **lowercase** English characters. You are also given two **0-indexed** string arrays `original` and `changed`, and an integer array `cost`, where `cost[i]` represents the cost of converting the string `original[i]` to the string `changed[i]`.\n\n\nYou start with the string `source`. In one operation, you can pick a **substring** `x` from the string, and change it to `y` at a cost of `z` **if** there exists **any** index `j` such that `cost[j] == z`, `original[j] == x`, and `changed[j] == y`. You are allowed to do **any** number of operations, but any pair of operations must satisfy **either** of these two conditions:\n\n\n The substrings picked in the operations are `source[a..b]` and `source[c..d]` with either `b < c` **or** `d < a`. In other words, the indices picked in both operations are **disjoint**.\n The substrings picked in the operations are `source[a..b]` and `source[c..d]` with `a == c` **and** `b == d`. In other words, the indices picked in both operations are **identical**.\n\n\nReturn *the **minimum** cost to convert the string* `source` *to the string* `target` *using **any** number of operations*. *If it is impossible to convert* `source` *to* `target`, *return* `-1`.\n\n\nNote** that there may exist indices `i`, `j` such that `original[j] == original[i]` and `changed[j] == changed[i]`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "String",
            "Dynamic Programming",
            "Graph",
            "Trie",
            "Shortest Path"
        ],
        "examples": [
            {
                "Input": "** source = \"abcd\", target = \"acbe\", original = [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], changed = [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], cost = [2,5,5,1,2,20]",
                "Output": "** 28",
                "Explanation": "** To convert \"abcd\" to \"acbe\", do the following operations:\n- Change substring source[1..1] from \"b\" to \"c\" at a cost of 5.\n- Change substring source[2..2] from \"c\" to \"e\" at a cost of 1.\n- Change substring source[2..2] from \"e\" to \"b\" at a cost of 2.\n- Change substring source[3..3] from \"d\" to \"e\" at a cost of 20.\nThe total cost incurred is 5 + 1 + 2 + 20 = 28. \nIt can be shown that this is the minimum possible cost."
            },
            {
                "Input": "** source = \"abcdefgh\", target = \"acdeeghh\", original = [\"bcd\",\"fgh\",\"thh\"], changed = [\"cde\",\"thh\",\"ghh\"], cost = [1,3,5]",
                "Output": "** 9",
                "Explanation": "** To convert \"abcdefgh\" to \"acdeeghh\", do the following operations:\n- Change substring source[1..3] from \"bcd\" to \"cde\" at a cost of 1.\n- Change substring source[5..7] from \"fgh\" to \"thh\" at a cost of 3. We can do this operation because indices [5,7] are disjoint with indices picked in the first operation.\n- Change substring source[5..7] from \"thh\" to \"ghh\" at a cost of 5. We can do this operation because indices [5,7] are disjoint with indices picked in the first operation, and identical with indices picked in the second operation.\nThe total cost incurred is 1 + 3 + 5 = 9.\nIt can be shown that this is the minimum possible cost."
            },
            {
                "Input": "** source = \"abcdefgh\", target = \"addddddd\", original = [\"bcd\",\"defgh\"], changed = [\"ddd\",\"ddddd\"], cost = [100,1578]",
                "Output": "** -1",
                "Explanation": "** It is impossible to convert \"abcdefgh\" to \"addddddd\".\nIf you select substring source[1..3] as the first operation to change \"abcdefgh\" to \"adddefgh\", you cannot select substring source[3..7] as the second operation because it has a common index, 3, with the first operation.\nIf you select substring source[3..7] as the first operation to change \"abcdefgh\" to \"abcddddd\", you cannot select substring source[1..3] as the second operation because it has a common index, 3, with the first operation."
            }
        ]
    },
    {
        "Title": "Check if Bitwise OR Has Trailing Zeros",
        "slug": "check-if-bitwise-or-has-trailing-zeros",
        "description": "You are given an array of **positive** integers `nums`.\n\n\nYou have to check if it is possible to select **two or more** elements in the array such that the bitwise `OR` of the selected elements has **at least** one trailing zero in its binary representation.\n\n\nFor example, the binary representation of `5`, which is `\"101\"`, does not have any trailing zeros, whereas the binary representation of `4`, which is `\"100\"`, has two trailing zeros.\n\n\nReturn `true` *if it is possible to select two or more elements whose bitwise* `OR` *has trailing zeros, return* `false` *otherwise*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** true",
                "Explanation": "** If we select the elements 2 and 4, their bitwise OR is 6, which has the binary representation \"110\" with one trailing zero."
            },
            {
                "Input": "** nums = [2,4,8,16]",
                "Output": "** true",
                "Explanation": "** If we select the elements 2 and 4, their bitwise OR is 6, which has the binary representation \"110\" with one trailing zero.\nOther possible ways to select elements to have trailing zeroes in the binary representation of their bitwise OR are: (2, 8), (2, 16), (4, 8), (4, 16), (8, 16), (2, 4, 8), (2, 4, 16), (2, 8, 16), (4, 8, 16), and (2, 4, 8, 16)."
            },
            {
                "Input": "** nums = [1,3,5,7,9]",
                "Output": "** false",
                "Explanation": "** There is no possible way to select two or more elements to have trailing zeros in the binary representation of their bitwise OR."
            }
        ]
    },
    {
        "Title": "Find Longest Special Substring That Occurs Thrice I",
        "slug": "find-longest-special-substring-that-occurs-thrice-i",
        "description": "You are given a string `s` that consists of lowercase English letters.\n\n\nA string is called **special** if it is made up of only a single character. For example, the string `\"abc\"` is not special, whereas the strings `\"ddd\"`, `\"zz\"`, and `\"f\"` are special.\n\n\nReturn *the length of the **longest special substring** of* `s` *which occurs **at least thrice***, *or* `-1` *if no special substring occurs at least thrice*.\n\n\nA **substring** is a contiguous **non-empty** sequence of characters within a string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Binary Search",
            "Sliding Window",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** s = \"aaaa\"",
                "Output": "** 2",
                "Explanation": "** The longest special substring which occurs thrice is \"aa\": substrings \"**aa**aa\", \"a**aa**a\", and \"aa**aa**\".\nIt can be shown that the maximum length achievable is 2."
            },
            {
                "Input": "** s = \"abcdef\"",
                "Output": "** -1",
                "Explanation": "** There exists no special substring which occurs at least thrice. Hence return -1."
            },
            {
                "Input": "** s = \"abcaba\"",
                "Output": "** 1",
                "Explanation": "** The longest special substring which occurs thrice is \"a\": substrings \"**a**bcaba\", \"abc**a**ba\", and \"abcab**a**\".\nIt can be shown that the maximum length achievable is 1."
            }
        ]
    },
    {
        "Title": "Find Longest Special Substring That Occurs Thrice II",
        "slug": "find-longest-special-substring-that-occurs-thrice-ii",
        "description": "You are given a string `s` that consists of lowercase English letters.\n\n\nA string is called **special** if it is made up of only a single character. For example, the string `\"abc\"` is not special, whereas the strings `\"ddd\"`, `\"zz\"`, and `\"f\"` are special.\n\n\nReturn *the length of the **longest special substring** of* `s` *which occurs **at least thrice***, *or* `-1` *if no special substring occurs at least thrice*.\n\n\nA **substring** is a contiguous **non-empty** sequence of characters within a string.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Binary Search",
            "Sliding Window",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** s = \"aaaa\"",
                "Output": "** 2",
                "Explanation": "** The longest special substring which occurs thrice is \"aa\": substrings \"**aa**aa\", \"a**aa**a\", and \"aa**aa**\".\nIt can be shown that the maximum length achievable is 2."
            },
            {
                "Input": "** s = \"abcdef\"",
                "Output": "** -1",
                "Explanation": "** There exists no special substring which occurs at least thrice. Hence return -1."
            },
            {
                "Input": "** s = \"abcaba\"",
                "Output": "** 1",
                "Explanation": "** The longest special substring which occurs thrice is \"a\": substrings \"**a**bcaba\", \"abc**a**ba\", and \"abcab**a**\".\nIt can be shown that the maximum length achievable is 1."
            }
        ]
    },
    {
        "Title": "Palindrome Rearrangement Queries",
        "slug": "palindrome-rearrangement-queries",
        "description": "You are given a **0-indexed** string `s` having an **even** length `n`.\n\n\nYou are also given a **0-indexed** 2D integer array, `queries`, where `queries[i] = [ai, bi, ci, di]`.\n\n\nFor each query `i`, you are allowed to perform the following operations:\n\n\n Rearrange the characters within the **substring** `s[ai:bi]`, where `0 <= ai <= bi < n / 2`.\n Rearrange the characters within the **substring** `s[ci:di]`, where `n / 2 <= ci <= di < n`.\n\n\nFor each query, your task is to determine whether it is possible to make `s` a **palindrome** by performing the operations.\n\n\nEach query is answered **independently** of the others.\n\n\nReturn *a **0-indexed** array* `answer`*, where* `answer[i] == true` *if it is possible to make* `s` *a palindrome by performing operations specified by the* `ith` *query, and* `false` *otherwise.\n\n\n A **substring** is a contiguous sequence of characters within a string.\n `s[x:y]` represents the substring consisting of characters from the index `x` to index `y` in `s`, **both inclusive**.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "String",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** s = \"abcabc\", queries = [[1,1,3,5],[0,2,5,5]]",
                "Output": "** [true,true]",
                "Explanation": "** In this example, there are two queries:\nIn the first query:\n- a0 = 1, b0 = 1, c0 = 3, d0 = 5.\n- So, you are allowed to rearrange s[1:1] => abcabc and s[3:5] => abcabc.\n- To make s a palindrome, s[3:5] can be rearranged to become => abccba.\n- Now, s is a palindrome. So, answer[0] = true.\nIn the second query:\n- a1 = 0, b1 = 2, c1 = 5, d1 = 5.\n- So, you are allowed to rearrange s[0:2] => abcabc and s[5:5] => abcabc.\n- To make s a palindrome, s[0:2] can be rearranged to become => cbaabc.\n- Now, s is a palindrome. So, answer[1] = true."
            },
            {
                "Input": "** s = \"abbcdecbba\", queries = [[0,2,7,9]]",
                "Output": "** [false]",
                "Explanation": "** In this example, there is only one query.\na0 = 0, b0 = 2, c0 = 7, d0 = 9.\nSo, you are allowed to rearrange s[0:2] => abbcdecbba and s[7:9] => abbcdecbba.\nIt is not possible to make s a palindrome by rearranging these substrings because s[3:6] is not a palindrome.\nSo, answer[0] = false."
            },
            {
                "Input": "** s = \"acbcab\", queries = [[1,2,4,5]]",
                "Output": "** [true]",
                "Explanation": "** In this example, there is only one query.\na0 = 1, b0 = 2, c0 = 4, d0 = 5.\nSo, you are allowed to rearrange s[1:2] => acbcab and s[4:5] => acbcab.\nTo make s a palindrome s[1:2] can be rearranged to become abccab.\nThen, s[4:5] can be rearranged to become abccba.\nNow, s is a palindrome. So, answer[0] = true."
            }
        ]
    },
    {
        "Title": "Smallest Missing Integer Greater Than Sequential Prefix Sum",
        "slug": "smallest-missing-integer-greater-than-sequential-prefix-sum",
        "description": "You are given a **0-indexed** array of integers `nums`.\n\n\nA prefix `nums[0..i]` is **sequential** if, for all `1 <= j <= i`, `nums[j] = nums[j - 1] + 1`. In particular, the prefix consisting only of `nums[0]` is **sequential**.\n\n\nReturn *the **smallest** integer* `x` *missing from* `nums` *such that* `x` *is greater than or equal to the sum of the **longest** sequential prefix.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,2,5]",
                "Output": "** 6",
                "Explanation": "** The longest sequential prefix of nums is [1,2,3] with a sum of 6. 6 is not in the array, therefore 6 is the smallest missing integer greater than or equal to the sum of the longest sequential prefix."
            },
            {
                "Input": "** nums = [3,4,5,1,12,14,13]",
                "Output": "** 15",
                "Explanation": "** The longest sequential prefix of nums is [3,4,5] with a sum of 12. 12, 13, and 14 belong to the array while 15 does not. Therefore 15 is the smallest missing integer greater than or equal to the sum of the longest sequential prefix."
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Make Array XOR Equal to K",
        "slug": "minimum-number-of-operations-to-make-array-xor-equal-to-k",
        "description": "You are given a **0-indexed** integer array `nums` and a positive integer `k`.\n\n\nYou can apply the following operation on the array **any** number of times:\n\n\n Choose **any** element of the array and **flip** a bit in its **binary** representation. Flipping a bit means changing a `0` to `1` or vice versa.\n\n\nReturn *the **minimum** number of operations required to make the bitwise* `XOR` *of **all** elements of the final array equal to* `k`.\n\n\nNote** that you can flip leading zero bits in the binary representation of elements. For example, for the number `(101)2` you can flip the fourth bit and obtain `(1101)2`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [2,1,3,4], k = 1",
                "Output": "** 2",
                "Explanation": "** We can do the following operations:\n- Choose element 2 which is 3 == (011)2, we flip the first bit and we obtain (010)2 == 2. nums becomes [2,1,2,4].\n- Choose element 0 which is 2 == (010)2, we flip the third bit and we obtain (110)2 = 6. nums becomes [6,1,2,4].\nThe XOR of elements of the final array is (6 XOR 1 XOR 2 XOR 4) == 1 == k.\nIt can be shown that we cannot make the XOR equal to k in less than 2 operations."
            },
            {
                "Input": "** nums = [2,0,2,0], k = 0",
                "Output": "** 0",
                "Explanation": "** The XOR of elements of the array is (2 XOR 0 XOR 2 XOR 0) == 0 == k. So no operation is needed."
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Make X and Y Equal",
        "slug": "minimum-number-of-operations-to-make-x-and-y-equal",
        "description": "You are given two positive integers `x` and `y`.\n\n\nIn one operation, you can do one of the four following operations:\n\n\n1. Divide `x` by `11` if `x` is a multiple of `11`.\n2. Divide `x` by `5` if `x` is a multiple of `5`.\n3. Decrement `x` by `1`.\n4. Increment `x` by `1`.\n\n\nReturn *the **minimum** number of operations required to make*  `x` *and* `y` equal.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming",
            "Breadth-First Search",
            "Memoization"
        ],
        "examples": [
            {
                "Input": "** x = 26, y = 1",
                "Output": "** 3",
                "Explanation": "** We can make 26 equal to 1 by applying the following operations: \n1. Decrement x by 1\n2. Divide x by 5\n3. Divide x by 5\nIt can be shown that 3 is the minimum number of operations required to make 26 equal to 1."
            },
            {
                "Input": "** x = 54, y = 2",
                "Output": "** 4",
                "Explanation": "** We can make 54 equal to 2 by applying the following operations: \n1. Increment x by 1\n2. Divide x by 11 \n3. Divide x by 5\n4. Increment x by 1\nIt can be shown that 4 is the minimum number of operations required to make 54 equal to 2."
            },
            {
                "Input": "** x = 25, y = 30",
                "Output": "** 5",
                "Explanation": "** We can make 25 equal to 30 by applying the following operations: \n1. Increment x by 1\n2. Increment x by 1\n3. Increment x by 1\n4. Increment x by 1\n5. Increment x by 1\nIt can be shown that 5 is the minimum number of operations required to make 25 equal to 30."
            }
        ]
    },
    {
        "Title": "Count the Number of Powerful Integers",
        "slug": "count-the-number-of-powerful-integers",
        "description": "You are given three integers `start`, `finish`, and `limit`. You are also given a **0-indexed** string `s` representing a **positive** integer.\n\n\nA **positive** integer `x` is called **powerful** if it ends with `s` (in other words, `s` is a **suffix** of `x`) and each digit in `x` is at most `limit`.\n\n\nReturn *the **total** number of powerful integers in the range* `[start..finish]`.\n\n\nA string `x` is a suffix of a string `y` if and only if `x` is a substring of `y` that starts from some index (**including** `0`) in `y` and extends to the index `y.length - 1`. For example, `25` is a suffix of `5125` whereas `512` is not.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "String",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "** start = 1, finish = 6000, limit = 4, s = \"124\"",
                "Output": "** 5",
                "Explanation": "** The powerful integers in the range [1..6000] are 124, 1124, 2124, 3124, and, 4124. All these integers have each digit <= 4, and \"124\" as a suffix. Note that 5124 is not a powerful integer because the first digit is 5 which is greater than 4.\nIt can be shown that there are only 5 powerful integers in this range."
            },
            {
                "Input": "** start = 15, finish = 215, limit = 6, s = \"10\"",
                "Output": "** 2",
                "Explanation": "** The powerful integers in the range [15..215] are 110 and 210. All these integers have each digit <= 6, and \"10\" as a suffix.\nIt can be shown that there are only 2 powerful integers in this range."
            },
            {
                "Input": "** start = 1000, finish = 2000, limit = 4, s = \"3000\"",
                "Output": "** 0",
                "Explanation": "** All integers in the range [1000..2000] are smaller than 3000, hence \"3000\" cannot be a suffix of any integer in this range."
            }
        ]
    },
    {
        "Title": "Maximum Area of Longest Diagonal Rectangle",
        "slug": "maximum-area-of-longest-diagonal-rectangle",
        "description": "You are given a 2D **0-indexed** integer array `dimensions`.\n\n\nFor all indices `i`, `0 <= i < dimensions.length`, `dimensions[i][0]` represents the length and `dimensions[i][1]` represents the width of the rectangle `i`.\n\n\nReturn *the **area** of the rectangle having the **longest** diagonal. If there are multiple rectangles with the longest diagonal, return the area of the rectangle having the **maximum** area.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** dimensions = [[9,3],[8,6]]",
                "Output": "** 48",
                "Explanation": "** \nFor index = 0, length = 9 and width = 3. Diagonal length = sqrt(9 * 9 + 3 * 3) = sqrt(90) \u2248 9.487.\nFor index = 1, length = 8 and width = 6. Diagonal length = sqrt(8 * 8 + 6 * 6) = sqrt(100) = 10.\nSo, the rectangle at index 1 has a greater diagonal length therefore we return area = 8 * 6 = 48."
            },
            {
                "Input": "** dimensions = [[3,4],[4,3]]",
                "Output": "** 12",
                "Explanation": "** Length of diagonal is the same for both which is 5, so maximum area = 12."
            }
        ]
    },
    {
        "Title": "Minimum Moves to Capture The Queen",
        "slug": "minimum-moves-to-capture-the-queen",
        "description": "There is a **1-indexed** `8 x 8` chessboard containing `3` pieces.\n\n\nYou are given `6` integers `a`, `b`, `c`, `d`, `e`, and `f` where:\n\n\n `(a, b)` denotes the position of the white rook.\n `(c, d)` denotes the position of the white bishop.\n `(e, f)` denotes the position of the black queen.\n\n\nGiven that you can only move the white pieces, return *the **minimum** number of moves required to capture the black queen*.\n\n\nNote** that:\n\n\n Rooks can move any number of squares either vertically or horizontally, but cannot jump over other pieces.\n Bishops can move any number of squares diagonally, but cannot jump over other pieces.\n A rook or a bishop can capture the queen if it is located in a square that they can move to.\n The queen does not move.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** a = 1, b = 1, c = 8, d = 8, e = 2, f = 3",
                "Output": "** 2",
                "Explanation": "** We can capture the black queen in two moves by moving the white rook to (1, 3) then to (2, 3).\nIt is impossible to capture the black queen in less than two moves since it is not being attacked by any of the pieces at the beginning."
            },
            {
                "Input": "** a = 5, b = 3, c = 3, d = 4, e = 5, f = 2",
                "Output": "** 1",
                "Explanation": "** We can capture the black queen in a single move by doing one of the following: \n- Move the white rook to (5, 2).\n- Move the white bishop to (5, 2)."
            }
        ]
    },
    {
        "Title": "Maximum Size of a Set After Removals",
        "slug": "maximum-size-of-a-set-after-removals",
        "description": "You are given two **0-indexed** integer arrays `nums1` and `nums2` of even length `n`.\n\n\nYou must remove `n / 2` elements from `nums1` and `n / 2` elements from `nums2`. After the removals, you insert the remaining elements of `nums1` and `nums2` into a set `s`.\n\n\nReturn *the **maximum** possible size of the set* `s`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** nums1 = [1,2,1,2], nums2 = [1,1,1,1]",
                "Output": "** 2",
                "Explanation": "** We remove two occurences of 1 from nums1 and nums2. After the removals, the arrays become equal to nums1 = [2,2] and nums2 = [1,1]. Therefore, s = {1,2}.\nIt can be shown that 2 is the maximum possible size of the set s after the removals."
            },
            {
                "Input": "** nums1 = [1,2,3,4,5,6], nums2 = [2,3,2,3,2,3]",
                "Output": "** 5",
                "Explanation": "** We remove 2, 3, and 6 from nums1, as well as 2 and two occurrences of 3 from nums2. After the removals, the arrays become equal to nums1 = [1,4,5] and nums2 = [2,3,2]. Therefore, s = {1,2,3,4,5}.\nIt can be shown that 5 is the maximum possible size of the set s after the removals."
            },
            {
                "Input": "** nums1 = [1,1,2,2,3,3], nums2 = [4,4,5,5,6,6]",
                "Output": "** 6",
                "Explanation": "** We remove 1, 2, and 3 from nums1, as well as 4, 5, and 6 from nums2. After the removals, the arrays become equal to nums1 = [1,2,3] and nums2 = [4,5,6]. Therefore, s = {1,2,3,4,5,6}.\nIt can be shown that 6 is the maximum possible size of the set s after the removals."
            }
        ]
    },
    {
        "Title": "Maximize the Number of Partitions After Operations",
        "slug": "maximize-the-number-of-partitions-after-operations",
        "description": "You are given a **0-indexed** string `s` and an integer `k`.\n\n\nYou are to perform the following partitioning operations until `s` is **empty**:\n\n\n Choose the **longest** **prefix** of `s` containing at most `k` **distinct** characters.\n **Delete** the prefix from `s` and increase the number of partitions by one. The remaining characters (if any) in `s` maintain their initial order.\n\n\nBefore** the operations, you are allowed to change **at most** **one** index in `s` to another lowercase English letter.\n\n\nReturn *an integer denoting the **maximum** number of resulting partitions after the operations by optimally choosing at most one index to change.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** s = \"accca\", k = 2",
                "Output": "** 3",
                "Explanation": "** In this example, to maximize the number of resulting partitions, s[2] can be changed to 'b'.\ns becomes \"acbca\".\nThe operations can now be performed as follows until s becomes empty:\n- Choose the longest prefix containing at most 2 distinct characters, \"acbca\".\n- Delete the prefix, and s becomes \"bca\". The number of partitions is now 1.\n- Choose the longest prefix containing at most 2 distinct characters, \"bca\".\n- Delete the prefix, and s becomes \"a\". The number of partitions is now 2.\n- Choose the longest prefix containing at most 2 distinct characters, \"a\".\n- Delete the prefix, and s becomes empty. The number of partitions is now 3.\nHence, the answer is 3.\nIt can be shown that it is not possible to obtain more than 3 partitions."
            },
            {
                "Input": "** s = \"aabaab\", k = 3",
                "Output": "** 1",
                "Explanation": "** In this example, to maximize the number of resulting partitions we can leave s as it is.\nThe operations can now be performed as follows until s becomes empty: \n- Choose the longest prefix containing at most 3 distinct characters, \"aabaab\".\n- Delete the prefix, and s becomes empty. The number of partitions becomes 1. \nHence, the answer is 1. \nIt can be shown that it is not possible to obtain more than 1 partition."
            },
            {
                "Input": "** s = \"xxyz\", k = 1",
                "Output": "** 4",
                "Explanation": "** In this example, to maximize the number of resulting partitions, s[1] can be changed to 'a'.\ns becomes \"xayz\".\nThe operations can now be performed as follows until s becomes empty:\n- Choose the longest prefix containing at most 1 distinct character, \"xayz\".\n- Delete the prefix, and s becomes \"ayz\". The number of partitions is now 1.\n- Choose the longest prefix containing at most 1 distinct character, \"ayz\".\n- Delete the prefix, and s becomes \"yz\". The number of partitions is now 2.\n- Choose the longest prefix containing at most 1 distinct character, \"yz\".\n- Delete the prefix, and s becomes \"z\". The number of partitions is now 3.\n- Choose the longest prefix containing at most 1 distinct character, \"z\".\n- Delete the prefix, and s becomes empty. The number of partitions is now 4.\nHence, the answer is 4.\nIt can be shown that it is not possible to obtain more than 4 partitions."
            }
        ]
    },
    {
        "Title": "Count Elements With Maximum Frequency",
        "slug": "count-elements-with-maximum-frequency",
        "description": "You are given an array `nums` consisting of **positive** integers.\n\n\nReturn *the **total frequencies** of elements in*`nums`\u00a0*such that those elements all have the **maximum** frequency*.\n\n\nThe **frequency** of an element is the number of occurrences of that element in the array.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,2,3,1,4]",
                "Output": "** 4",
                "Explanation": "** The elements 1 and 2 have a frequency of 2 which is the maximum frequency in the array.\nSo the number of elements in the array with maximum frequency is 4."
            },
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** 5",
                "Explanation": "** All elements of the array have a frequency of 1 which is the maximum.\nSo the number of elements in the array with maximum frequency is 5."
            }
        ]
    },
    {
        "Title": "Find Beautiful Indices in the Given Array I",
        "slug": "find-beautiful-indices-in-the-given-array-i",
        "description": "You are given a **0-indexed** string `s`, a string `a`, a string `b`, and an integer `k`.\n\n\nAn index `i` is **beautiful** if:\n\n\n `0 <= i <= s.length - a.length`\n `s[i..(i + a.length - 1)] == a`\n There exists an index `j` such that:\n\t+ `0 <= j <= s.length - b.length`\n\t+ `s[j..(j + b.length - 1)] == b`\n\t+ `|j - i| <= k`\n\n\nReturn *the array that contains beautiful indices in **sorted order from smallest to largest***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Two Pointers",
            "String",
            "Binary Search",
            "Rolling Hash",
            "String Matching",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "** s = \"isawsquirrelnearmysquirrelhouseohmy\", a = \"my\", b = \"squirrel\", k = 15",
                "Output": "** [16,33]",
                "Explanation": "** There are 2 beautiful indices: [16,33].\n- The index 16 is beautiful as s[16..17] == \"my\" and there exists an index 4 with s[4..11] == \"squirrel\" and |16 - 4| <= 15.\n- The index 33 is beautiful as s[33..34] == \"my\" and there exists an index 18 with s[18..25] == \"squirrel\" and |33 - 18| <= 15.\nThus we return [16,33] as the result."
            },
            {
                "Input": "** s = \"abcd\", a = \"a\", b = \"a\", k = 4",
                "Output": "** [0]",
                "Explanation": "** There is 1 beautiful index: [0].\n- The index 0 is beautiful as s[0..0] == \"a\" and there exists an index 0 with s[0..0] == \"a\" and |0 - 0| <= 4.\nThus we return [0] as the result."
            }
        ]
    },
    {
        "Title": "Maximum Number That Sum of the Prices Is Less Than or Equal to K",
        "slug": "maximum-number-that-sum-of-the-prices-is-less-than-or-equal-to-k",
        "description": "You are given an integer `k` and an integer `x`. The price of a number\u00a0`num` is calculated by the count of set bits at positions `x`, `2x`, `3x`, etc., in its binary representation, starting from the least significant bit. The following table contains examples of how price is calculated.\n\n\n\n\n| x | num | Binary Representation | Price |\n| --- | --- | --- | --- |\n| 1 | 13 | 00000**1****1**0**1** | 3 |\n| 2 | 13 | 00000**1**101 | 1 |\n| 2 | 233 | 0**1**1**1**0**1**001 | 3 |\n| 3 | 13 | 000001**1**01 | 1 |\n| 3 | 362 | **1**01**1**01010 | 2 |\n\n\nThe\u00a0**accumulated price**\u00a0of\u00a0`num`\u00a0is the **total**\u00a0price of\u00a0numbers from `1` to `num`. `num`\u00a0is considered\u00a0**cheap**\u00a0if its accumulated price\u00a0is less than or equal to `k`.\n\n\nReturn the **greatest**\u00a0cheap number.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Binary Search",
            "Dynamic Programming",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** k = 9, x = 1",
                "Output": "** 6",
                "Explanation": "**\n\n\nAs shown in the table below, `6` is the greatest cheap number.\n\n\n\n\n| x | num | Binary Representation | Price | Accumulated Price |\n| --- | --- | --- | --- | --- |\n| 1 | 1 | 00**1** | 1 | 1 |\n| 1 | 2 | 0**1**0 | 1 | 2 |\n| 1 | 3 | 0**1****1** | 2 | 4 |\n| 1 | 4 | **1**00 | 1 | 5 |\n| 1 | 5 | **1**0**1** | 2 | 7 |\n| 1 | 6 | **1****1**0 | 2 | 9 |\n| 1 | 7 | **1****1****1** | 3 | 12 |"
            },
            {
                "Input": "** k = 7, x = 2",
                "Output": "** 9",
                "Explanation": "**\n\n\nAs shown in the table below, `9` is the greatest cheap number.\n\n\n\n\n| x | num | Binary Representation | Price | Accumulated Price |\n| --- | --- | --- | --- | --- |\n| 2 | 1 | 0001 | 0 | 0 |\n| 2 | 2 | 00**1**0 | 1 | 1 |\n| 2 | 3 | 00**1**1 | 1 | 2 |\n| 2 | 4 | 0100 | 0 | 2 |\n| 2 | 5 | 0101 | 0 | 2 |\n| 2 | 6 | 01**1**0 | 1 | 3 |\n| 2 | 7 | 01**1**1 | 1 | 4 |\n| 2 | 8 | **1**000 | 1 | 5 |\n| 2 | 9 | **1**001 | 1 | 6 |\n| 2 | 10 | **1**0**1**0 | 2 | 8 |\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= 1015`\n* `1 <= x <= 8`\n\n\nHints:\n    0. Binary search the answer.\n    1. In each step of the binary search you should calculate the number of the set bits in the <code>i<sup>th</sup></code> position. Then calculate the sum of them."
            }
        ]
    },
    {
        "Title": "Find Beautiful Indices in the Given Array II",
        "slug": "find-beautiful-indices-in-the-given-array-ii",
        "description": "You are given a **0-indexed** string `s`, a string `a`, a string `b`, and an integer `k`.\n\n\nAn index `i` is **beautiful** if:\n\n\n `0 <= i <= s.length - a.length`\n `s[i..(i + a.length - 1)] == a`\n There exists an index `j` such that:\n\t+ `0 <= j <= s.length - b.length`\n\t+ `s[j..(j + b.length - 1)] == b`\n\t+ `|j - i| <= k`\n\n\nReturn *the array that contains beautiful indices in **sorted order from smallest to largest***.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Two Pointers",
            "String",
            "Binary Search",
            "Rolling Hash",
            "String Matching",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "** s = \"isawsquirrelnearmysquirrelhouseohmy\", a = \"my\", b = \"squirrel\", k = 15",
                "Output": "** [16,33]",
                "Explanation": "** There are 2 beautiful indices: [16,33].\n- The index 16 is beautiful as s[16..17] == \"my\" and there exists an index 4 with s[4..11] == \"squirrel\" and |16 - 4| <= 15.\n- The index 33 is beautiful as s[33..34] == \"my\" and there exists an index 18 with s[18..25] == \"squirrel\" and |33 - 18| <= 15.\nThus we return [16,33] as the result."
            },
            {
                "Input": "** s = \"abcd\", a = \"a\", b = \"a\", k = 4",
                "Output": "** [0]",
                "Explanation": "** There is 1 beautiful index: [0].\n- The index 0 is beautiful as s[0..0] == \"a\" and there exists an index 0 with s[0..0] == \"a\" and |0 - 0| <= 4.\nThus we return [0] as the result."
            }
        ]
    },
    {
        "Title": "Divide an Array Into Subarrays With Minimum Cost I",
        "slug": "divide-an-array-into-subarrays-with-minimum-cost-i",
        "description": "You are given an array of integers `nums` of length `n`.\n\n\nThe **cost** of an array is the value of its **first** element. For example, the cost of `[1,2,3]` is `1` while the cost of `[3,4,1]` is `3`.\n\n\nYou need to divide `nums` into `3` **disjoint contiguous** subarrays.\n\n\nReturn *the **minimum** possible **sum** of the cost of these subarrays*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,12]",
                "Output": "** 6",
                "Explanation": "** The best possible way to form 3 subarrays is: [1], [2], and [3,12] at a total cost of 1 + 2 + 3 = 6.\nThe other possible ways to form 3 subarrays are:\n- [1], [2,3], and [12] at a total cost of 1 + 2 + 12 = 15.\n- [1,2], [3], and [12] at a total cost of 1 + 3 + 12 = 16."
            },
            {
                "Input": "** nums = [5,4,3]",
                "Output": "** 12",
                "Explanation": "** The best possible way to form 3 subarrays is: [5], [4], and [3] at a total cost of 5 + 4 + 3 = 12.\nIt can be shown that 12 is the minimum cost achievable."
            },
            {
                "Input": "** nums = [10,3,1,1]",
                "Output": "** 12",
                "Explanation": "** The best possible way to form 3 subarrays is: [10,3], [1], and [1] at a total cost of 10 + 1 + 1 = 12.\nIt can be shown that 12 is the minimum cost achievable."
            }
        ]
    },
    {
        "Title": "Find if Array Can Be Sorted",
        "slug": "find-if-array-can-be-sorted",
        "description": "You are given a **0-indexed** array of **positive** integers `nums`.\n\n\nIn one **operation**, you can swap any two **adjacent** elements if they have the **same** number of set bits. You are allowed to do this operation **any** number of times (**including zero**).\n\n\nReturn `true` *if you can sort the array, else return* `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Bit Manipulation",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [8,4,2,30,15]",
                "Output": "** true",
                "Explanation": "** Let's look at the binary representation of every element. The numbers 2, 4, and 8 have one set bit each with binary representation \"10\", \"100\", and \"1000\" respectively. The numbers 15 and 30 have four set bits each with binary representation \"1111\" and \"11110\".\nWe can sort the array using 4 operations:\n- Swap nums[0] with nums[1]. This operation is valid because 8 and 4 have one set bit each. The array becomes [4,8,2,30,15].\n- Swap nums[1] with nums[2]. This operation is valid because 8 and 2 have one set bit each. The array becomes [4,2,8,30,15].\n- Swap nums[0] with nums[1]. This operation is valid because 4 and 2 have one set bit each. The array becomes [2,4,8,30,15].\n- Swap nums[3] with nums[4]. This operation is valid because 30 and 15 have four set bits each. The array becomes [2,4,8,15,30].\nThe array has become sorted, hence we return true.\nNote that there may be other sequences of operations which also sort the array."
            },
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** true",
                "Explanation": "** The array is already sorted, hence we return true."
            },
            {
                "Input": "** nums = [3,16,8,4,2]",
                "Output": "** false",
                "Explanation": "** It can be shown that it is not possible to sort the input array using any number of operations."
            }
        ]
    },
    {
        "Title": "Minimize Length of Array Using Operations",
        "slug": "minimize-length-of-array-using-operations",
        "description": "You are given a **0-indexed** integer array `nums` containing **positive** integers.\n\n\nYour task is to **minimize** the length of `nums` by performing the following operations **any** number of times (including zero):\n\n\n Select **two** **distinct** indices `i` and `j` from `nums`, such that `nums[i] > 0` and `nums[j] > 0`.\n Insert the result of `nums[i] % nums[j]` at the end of `nums`.\n Delete the elements at indices `i` and `j` from `nums`.\n\n\nReturn *an integer denoting the **minimum** **length** of* `nums` *after performing the operation any number of times.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Greedy",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [1,4,3,1]",
                "Output": "** 1",
                "Explanation": "** One way to minimize the length of the array is as follows:\nOperation 1: Select indices 2 and 1, insert nums[2] % nums[1] at the end and it becomes [1,4,3,1,3], then delete elements at indices 2 and 1.\nnums becomes [1,1,3].\nOperation 2: Select indices 1 and 2, insert nums[1] % nums[2] at the end and it becomes [1,1,3,1], then delete elements at indices 1 and 2.\nnums becomes [1,1].\nOperation 3: Select indices 1 and 0, insert nums[1] % nums[0] at the end and it becomes [1,1,0], then delete elements at indices 1 and 0.\nnums becomes [0].\nThe length of nums cannot be reduced further. Hence, the answer is 1.\nIt can be shown that 1 is the minimum achievable length."
            },
            {
                "Input": "** nums = [5,5,5,10,5]",
                "Output": "** 2",
                "Explanation": "** One way to minimize the length of the array is as follows:\nOperation 1: Select indices 0 and 3, insert nums[0] % nums[3] at the end and it becomes [5,5,5,10,5,5], then delete elements at indices 0 and 3.\nnums becomes [5,5,5,5]. \nOperation 2: Select indices 2 and 3, insert nums[2] % nums[3] at the end and it becomes [5,5,5,5,0], then delete elements at indices 2 and 3. \nnums becomes [5,5,0]. \nOperation 3: Select indices 0 and 1, insert nums[0] % nums[1] at the end and it becomes [5,5,0,0], then delete elements at indices 0 and 1.\nnums becomes [0,0].\nThe length of nums cannot be reduced further. Hence, the answer is 2.\nIt can be shown that 2 is the minimum achievable length."
            },
            {
                "Input": "** nums = [2,3,4]",
                "Output": "** 1",
                "Explanation": "** One way to minimize the length of the array is as follows: \nOperation 1: Select indices 1 and 2, insert nums[1] % nums[2] at the end and it becomes [2,3,4,3], then delete elements at indices 1 and 2.\nnums becomes [2,3].\nOperation 2: Select indices 1 and 0, insert nums[1] % nums[0] at the end and it becomes [2,3,1], then delete elements at indices 1 and 0.\nnums becomes [1].\nThe length of nums cannot be reduced further. Hence, the answer is 1.\nIt can be shown that 1 is the minimum achievable length."
            }
        ]
    },
    {
        "Title": "Divide an Array Into Subarrays With Minimum Cost II",
        "slug": "divide-an-array-into-subarrays-with-minimum-cost-ii",
        "description": "You are given a **0-indexed** array of integers `nums` of length `n`, and two **positive** integers `k` and `dist`.\n\n\nThe **cost** of an array is the value of its **first** element. For example, the cost of `[1,2,3]` is `1` while the cost of `[3,4,1]` is `3`.\n\n\nYou need to divide `nums` into `k` **disjoint contiguous** subarrays, such that the difference between the starting index of the **second** subarray and the starting index of the `kth` subarray should be **less than or equal to** `dist`. In other words, if you divide `nums` into the subarrays `nums[0..(i1 - 1)], nums[i1..(i2 - 1)], ..., nums[ik-1..(n - 1)]`, then `ik-1 - i1 <= dist`.\n\n\nReturn *the **minimum** possible sum of the cost of these* *subarrays*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Sliding Window",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,2,6,4,2], k = 3, dist = 3",
                "Output": "** 5",
                "Explanation": "** The best possible way to divide nums into 3 subarrays is: [1,3], [2,6,4], and [2]. This choice is valid because ik-1 - i1 is 5 - 2 = 3 which is equal to dist. The total cost is nums[0] + nums[2] + nums[5] which is 1 + 2 + 2 = 5.\nIt can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 5."
            },
            {
                "Input": "** nums = [10,1,2,2,2,1], k = 4, dist = 3",
                "Output": "** 15",
                "Explanation": "** The best possible way to divide nums into 4 subarrays is: [10], [1], [2], and [2,2,1]. This choice is valid because ik-1 - i1 is 3 - 1 = 2 which is less than dist. The total cost is nums[0] + nums[1] + nums[2] + nums[3] which is 10 + 1 + 2 + 2 = 15.\nThe division [10], [1], [2,2,2], and [1] is not valid, because the difference between ik-1 and i1 is 5 - 1 = 4, which is greater than dist.\nIt can be shown that there is no possible way to divide nums into 4 subarrays at a cost lower than 15."
            },
            {
                "Input": "** nums = [10,8,18,9], k = 3, dist = 1",
                "Output": "** 36",
                "Explanation": "** The best possible way to divide nums into 4 subarrays is: [10], [8], and [18,9]. This choice is valid because ik-1 - i1 is 2 - 1 = 1 which is equal to dist.The total cost is nums[0] + nums[1] + nums[2] which is 10 + 8 + 18 = 36.\nThe division [10], [8,18], and [9] is not valid, because the difference between ik-1 and i1 is 3 - 1 = 2, which is greater than dist.\nIt can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 36."
            }
        ]
    },
    {
        "Title": "Minimum Number of Pushes to Type Word I",
        "slug": "minimum-number-of-pushes-to-type-word-i",
        "description": "You are given a string `word` containing **distinct** lowercase English letters.\n\n\nTelephone keypads have keys mapped with **distinct** collections of lowercase English letters, which can be used to form words by pushing them. For example, the key `2` is mapped with `[\"a\",\"b\",\"c\"]`, we need to push the key one time to type `\"a\"`, two times to type `\"b\"`, and three times to type `\"c\"` *.\n\n\nIt is allowed to remap the keys numbered `2` to `9` to **distinct** collections of letters. The keys can be remapped to **any** amount of letters, but each letter **must** be mapped to **exactly** one key. You need to find the **minimum** number of times the keys will be pushed to type the string `word`.\n\n\nReturn *the **minimum** number of pushes needed to type* `word` *after remapping the keys*.\n\n\nAn example mapping of letters to keys on a telephone keypad is given below. Note that `1`, `*`, `#`, and `0` do **not** map to any letters.\n\n\n![](https://assets.leetcode.com/uploads/2023/12/26/keypaddesc.png)\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math",
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** word = \"abcde\"",
                "Output": "** 5",
                "Explanation": "** The remapped keypad given in the image provides the minimum cost.\n\"a\" -> one push on key 2\n\"b\" -> one push on key 3\n\"c\" -> one push on key 4\n\"d\" -> one push on key 5\n\"e\" -> one push on key 6\nTotal cost is 1 + 1 + 1 + 1 + 1 = 5.\nIt can be shown that no other mapping can provide a lower cost."
            },
            {
                "Input": "** word = \"xycdefghij\"",
                "Output": "** 12",
                "Explanation": "** The remapped keypad given in the image provides the minimum cost.\n\"x\" -> one push on key 2\n\"y\" -> two pushes on key 2\n\"c\" -> one push on key 3\n\"d\" -> two pushes on key 3\n\"e\" -> one push on key 4\n\"f\" -> one push on key 5\n\"g\" -> one push on key 6\n\"h\" -> one push on key 7\n\"i\" -> one push on key 8\n\"j\" -> one push on key 9\nTotal cost is 1 + 2 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 = 12.\nIt can be shown that no other mapping can provide a lower cost."
            }
        ]
    },
    {
        "Title": "Count the Number of Houses at a Certain Distance I",
        "slug": "count-the-number-of-houses-at-a-certain-distance-i",
        "description": "You are given three **positive** integers `n`, `x`, and `y`.\n\n\nIn a city, there exist houses numbered `1` to `n` connected by `n` streets. There is a street connecting the house numbered `i` with the house numbered `i + 1` for all `1 <= i <= n - 1` . An additional street connects the house numbered `x` with the house numbered `y`.\n\n\nFor each `k`, such that `1 <= k <= n`, you need to find the number of **pairs of houses** `(house1, house2)` such that the **minimum** number of streets that need to be traveled to reach `house2` from `house1` is `k`.\n\n\nReturn *a **1-indexed** array* `result` *of length* `n` *where* `result[k]` *represents the **total** number of pairs of houses such that the **minimum** streets required to reach one house from the other is* `k`.\n\n\nNote** that `x` and `y` can be **equal**.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Breadth-First Search",
            "Graph",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** n = 3, x = 1, y = 3",
                "Output": "** [6,0,0]",
                "Explanation": "** Let's look at each pair of houses:\n- For the pair (1, 2), we can go from house 1 to house 2 directly.\n- For the pair (2, 1), we can go from house 2 to house 1 directly.\n- For the pair (1, 3), we can go from house 1 to house 3 directly.\n- For the pair (3, 1), we can go from house 3 to house 1 directly.\n- For the pair (2, 3), we can go from house 2 to house 3 directly.\n- For the pair (3, 2), we can go from house 3 to house 2 directly."
            },
            {
                "Input": "** n = 5, x = 2, y = 4",
                "Output": "** [10,8,2,0,0]",
                "Explanation": "** For each distance k the pairs are:\n- For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (2, 4), (4, 2), (3, 4), (4, 3), (4, 5), and (5, 4).\n- For k == 2, the pairs are (1, 3), (3, 1), (1, 4), (4, 1), (2, 5), (5, 2), (3, 5), and (5, 3).\n- For k == 3, the pairs are (1, 5), and (5, 1).\n- For k == 4 and k == 5, there are no pairs."
            },
            {
                "Input": "** n = 4, x = 1, y = 1",
                "Output": "** [6,4,2,0]",
                "Explanation": "** For each distance k the pairs are:\n- For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (3, 4), and (4, 3).\n- For k == 2, the pairs are (1, 3), (3, 1), (2, 4), and (4, 2).\n- For k == 3, the pairs are (1, 4), and (4, 1).\n- For k == 4, there are no pairs."
            }
        ]
    },
    {
        "Title": "Minimum Number of Pushes to Type Word II",
        "slug": "minimum-number-of-pushes-to-type-word-ii",
        "description": "You are given a string `word` containing lowercase English letters.\n\n\nTelephone keypads have keys mapped with **distinct** collections of lowercase English letters, which can be used to form words by pushing them. For example, the key `2` is mapped with `[\"a\",\"b\",\"c\"]`, we need to push the key one time to type `\"a\"`, two times to type `\"b\"`, and three times to type `\"c\"` *.\n\n\nIt is allowed to remap the keys numbered `2` to `9` to **distinct** collections of letters. The keys can be remapped to **any** amount of letters, but each letter **must** be mapped to **exactly** one key. You need to find the **minimum** number of times the keys will be pushed to type the string `word`.\n\n\nReturn *the **minimum** number of pushes needed to type* `word` *after remapping the keys*.\n\n\nAn example mapping of letters to keys on a telephone keypad is given below. Note that `1`, `*`, `#`, and `0` do **not** map to any letters.\n\n\n![](https://assets.leetcode.com/uploads/2023/12/26/keypaddesc.png)\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Greedy",
            "Sorting",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** word = \"abcde\"",
                "Output": "** 5",
                "Explanation": "** The remapped keypad given in the image provides the minimum cost.\n\"a\" -> one push on key 2\n\"b\" -> one push on key 3\n\"c\" -> one push on key 4\n\"d\" -> one push on key 5\n\"e\" -> one push on key 6\nTotal cost is 1 + 1 + 1 + 1 + 1 = 5.\nIt can be shown that no other mapping can provide a lower cost."
            },
            {
                "Input": "** word = \"xyzxyzxyzxyz\"",
                "Output": "** 12",
                "Explanation": "** The remapped keypad given in the image provides the minimum cost.\n\"x\" -> one push on key 2\n\"y\" -> one push on key 3\n\"z\" -> one push on key 4\nTotal cost is 1 * 4 + 1 * 4 + 1 * 4 = 12\nIt can be shown that no other mapping can provide a lower cost.\nNote that the key 9 is not mapped to any letter: it is not necessary to map letters to every key, but to map all the letters."
            },
            {
                "Input": "** word = \"aabbccddeeffgghhiiiiii\"",
                "Output": "** 24",
                "Explanation": "** The remapped keypad given in the image provides the minimum cost.\n\"a\" -> one push on key 2\n\"b\" -> one push on key 3\n\"c\" -> one push on key 4\n\"d\" -> one push on key 5\n\"e\" -> one push on key 6\n\"f\" -> one push on key 7\n\"g\" -> one push on key 8\n\"h\" -> two pushes on key 9\n\"i\" -> one push on key 9\nTotal cost is 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 2 * 2 + 6 * 1 = 24.\nIt can be shown that no other mapping can provide a lower cost."
            }
        ]
    },
    {
        "Title": "Count the Number of Houses at a Certain Distance II",
        "slug": "count-the-number-of-houses-at-a-certain-distance-ii",
        "description": "You are given three **positive** integers `n`, `x`, and `y`.\n\n\nIn a city, there exist houses numbered `1` to `n` connected by `n` streets. There is a street connecting the house numbered `i` with the house numbered `i + 1` for all `1 <= i <= n - 1` . An additional street connects the house numbered `x` with the house numbered `y`.\n\n\nFor each `k`, such that `1 <= k <= n`, you need to find the number of **pairs of houses** `(house1, house2)` such that the **minimum** number of streets that need to be traveled to reach `house2` from `house1` is `k`.\n\n\nReturn *a **1-indexed** array* `result` *of length* `n` *where* `result[k]` *represents the **total** number of pairs of houses such that the **minimum** streets required to reach one house from the other is* `k`.\n\n\nNote** that `x` and `y` can be **equal**.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Graph",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** n = 3, x = 1, y = 3",
                "Output": "** [6,0,0]",
                "Explanation": "** Let's look at each pair of houses:\n- For the pair (1, 2), we can go from house 1 to house 2 directly.\n- For the pair (2, 1), we can go from house 2 to house 1 directly.\n- For the pair (1, 3), we can go from house 1 to house 3 directly.\n- For the pair (3, 1), we can go from house 3 to house 1 directly.\n- For the pair (2, 3), we can go from house 2 to house 3 directly.\n- For the pair (3, 2), we can go from house 3 to house 2 directly."
            },
            {
                "Input": "** n = 5, x = 2, y = 4",
                "Output": "** [10,8,2,0,0]",
                "Explanation": "** For each distance k the pairs are:\n- For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (2, 4), (4, 2), (3, 4), (4, 3), (4, 5), and (5, 4).\n- For k == 2, the pairs are (1, 3), (3, 1), (1, 4), (4, 1), (2, 5), (5, 2), (3, 5), and (5, 3).\n- For k == 3, the pairs are (1, 5), and (5, 1).\n- For k == 4 and k == 5, there are no pairs."
            },
            {
                "Input": "** n = 4, x = 1, y = 1",
                "Output": "** [6,4,2,0]",
                "Explanation": "** For each distance k the pairs are:\n- For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (3, 4), and (4, 3).\n- For k == 2, the pairs are (1, 3), (3, 1), (2, 4), and (4, 2).\n- For k == 3, the pairs are (1, 4), and (4, 1).\n- For k == 4, there are no pairs."
            }
        ]
    },
    {
        "Title": "Number of Changing Keys",
        "slug": "number-of-changing-keys",
        "description": "You are given a **0-indexed** string `s` typed by a user. Changing a key is defined as using a key different from the last used key. For example, `s = \"ab\"` has a change of a key while `s = \"bBBb\"` does not have any.\n\n\nReturn *the number of times the user had to change the key.* \n\n\nNote:** Modifiers like `shift` or `caps lock` won't be counted in changing the key that is if a user typed the letter `'a'` and then the letter `'A'` then it will not be considered as a changing of key.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"aAbBcC\"",
                "Output": "** 2",
                "Explanation": "** \nFrom s[0] = 'a' to s[1] = 'A', there is no change of key as caps lock or shift is not counted.\nFrom s[1] = 'A' to s[2] = 'b', there is a change of key.\nFrom s[2] = 'b' to s[3] = 'B', there is no change of key as caps lock or shift is not counted.\nFrom s[3] = 'B' to s[4] = 'c', there is a change of key.\nFrom s[4] = 'c' to s[5] = 'C', there is no change of key as caps lock or shift is not counted."
            },
            {
                "Input": "** s = \"AaAaAaaA\"",
                "Output": "** 0",
                "Explanation": "** There is no change of key since only the letters 'a' and 'A' are pressed which does not require change of key."
            }
        ]
    },
    {
        "Title": "Find the Maximum Number of Elements in Subset",
        "slug": "find-the-maximum-number-of-elements-in-subset",
        "description": "You are given an array of **positive** integers `nums`.\n\n\nYou need to select a subset of `nums` which satisfies the following condition:\n\n\n You can place the selected elements in a **0-indexed** array such that it follows the pattern: `[x, x2, x4, ..., xk/2, xk, xk/2, ..., x4, x2, x]` (**Note** that `k` can be be any **non-negative** power of `2`). For example, `[2, 4, 16, 4, 2]` and `[3, 9, 3]` follow the pattern while `[2, 4, 8, 4, 2]` does not.\n\n\nReturn *the **maximum** number of elements in a subset that satisfies these conditions.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** nums = [5,4,1,2,2]",
                "Output": "** 3",
                "Explanation": "** We can select the subset {4,2,2}, which can be placed in the array as [2,4,2] which follows the pattern and 22 == 4. Hence the answer is 3."
            },
            {
                "Input": "** nums = [1,3,2,4]",
                "Output": "** 1",
                "Explanation": "** We can select the subset {1}, which can be placed in the array as [1] which follows the pattern. Hence the answer is 1. Note that we could have also selected the subsets {2}, {3}, or {4}, there may be multiple subsets which provide the same answer."
            }
        ]
    },
    {
        "Title": "Alice and Bob Playing Flower Game",
        "slug": "alice-and-bob-playing-flower-game",
        "description": "Alice and Bob are playing a turn-based game on a circular field surrounded by flowers. The circle represents the field, and there are `x` flowers in the clockwise direction between Alice and Bob, and `y` flowers in the anti-clockwise direction between them.\n\n\nThe game proceeds as follows:\n\n\n1. Alice takes the first turn.\n2. In each turn, a player must choose either the clockwise or anti-clockwise direction and pick one flower from that side.\n3. At the end of the turn, if there are no flowers left at all, the **current** player captures their opponent and wins the game.\n\n\nGiven two integers, `n` and `m`, the task is to compute the number of possible pairs `(x, y)` that satisfy the conditions:\n\n\n Alice must win the game according to the described rules.\n The number of flowers `x` in the clockwise direction must be in the range `[1,n]`.\n The number of flowers `y` in the anti-clockwise direction must be in the range `[1,m]`.\n\n\nReturn *the number of possible pairs* `(x, y)` *that satisfy the conditions mentioned in the statement*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** n = 3, m = 2",
                "Output": "** 3",
                "Explanation": "** The following pairs satisfy conditions described in the statement: (1,2), (3,2), (2,1)."
            },
            {
                "Input": "** n = 1, m = 1",
                "Output": "** 0",
                "Explanation": "** No pairs satisfy the conditions described in the statement."
            }
        ]
    },
    {
        "Title": "Minimize OR of Remaining Elements Using Operations",
        "slug": "minimize-or-of-remaining-elements-using-operations",
        "description": "You are given a **0-indexed** integer array `nums` and an integer `k`.\n\n\nIn one operation, you can pick any index `i` of `nums` such that `0 <= i < nums.length - 1` and replace `nums[i]` and `nums[i + 1]` with a single occurrence of `nums[i] & nums[i + 1]`, where `&` represents the bitwise `AND` operator.\n\n\nReturn *the **minimum** possible value of the bitwise* `OR` *of the remaining elements of* `nums` *after applying **at most*** `k` *operations*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [3,5,3,2,7], k = 2",
                "Output": "** 3",
                "Explanation": "** Let's do the following operations:\n1. Replace nums[0] and nums[1] with (nums[0] & nums[1]) so that nums becomes equal to [1,3,2,7].\n2. Replace nums[2] and nums[3] with (nums[2] & nums[3]) so that nums becomes equal to [1,3,2].\nThe bitwise-or of the final array is 3.\nIt can be shown that 3 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations."
            },
            {
                "Input": "** nums = [7,3,15,14,2,8], k = 4",
                "Output": "** 2",
                "Explanation": "** Let's do the following operations:\n1. Replace nums[0] and nums[1] with (nums[0] & nums[1]) so that nums becomes equal to [3,15,14,2,8]. \n2. Replace nums[0] and nums[1] with (nums[0] & nums[1]) so that nums becomes equal to [3,14,2,8].\n3. Replace nums[0] and nums[1] with (nums[0] & nums[1]) so that nums becomes equal to [2,2,8].\n4. Replace nums[1] and nums[2] with (nums[1] & nums[2]) so that nums becomes equal to [2,0].\nThe bitwise-or of the final array is 2.\nIt can be shown that 2 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations."
            },
            {
                "Input": "** nums = [10,7,10,3,9,14,9,4], k = 1",
                "Output": "** 15",
                "Explanation": "** Without applying any operations, the bitwise-or of nums is 15.\nIt can be shown that 15 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations."
            }
        ]
    },
    {
        "Title": "Type of Triangle",
        "slug": "type-of-triangle",
        "description": "You are given a **0-indexed** integer array `nums` of size `3` which can form the sides of a triangle.\n\n\n A triangle is called **equilateral** if it has all sides of equal length.\n A triangle is called **isosceles** if it has exactly two sides of equal length.\n A triangle is called **scalene** if all its sides are of different lengths.\n\n\nReturn *a string representing* *the type of triangle that can be formed* *or* `\"none\"` *if it **cannot** form a triangle.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [3,3,3]",
                "Output": "** \"equilateral\"",
                "Explanation": "** Since all the sides are of equal length, therefore, it will form an equilateral triangle."
            },
            {
                "Input": "** nums = [3,4,5]",
                "Output": "** \"scalene\"",
                "Explanation": "** \nnums[0] + nums[1] = 3 + 4 = 7, which is greater than nums[2] = 5.\nnums[0] + nums[2] = 3 + 5 = 8, which is greater than nums[1] = 4.\nnums[1] + nums[2] = 4 + 5 = 9, which is greater than nums[0] = 3. \nSince the sum of the two sides is greater than the third side for all three cases, therefore, it can form a triangle.\nAs all the sides are of different lengths, it will form a scalene triangle."
            }
        ]
    },
    {
        "Title": "Find the Number of Ways to Place People I",
        "slug": "find-the-number-of-ways-to-place-people-i",
        "description": "You are given a 2D array `points` of size `n x 2` representing integer coordinates of some points on a 2D-plane, where `points[i] = [xi, yi]`.\n\n\nWe define the **right** direction as positive x-axis (**increasing x-coordinate**) and the **left** direction as negative x-axis (**decreasing x-coordinate**). Similarly, we define the **up** direction as positive y-axis (**increasing y-coordinate**) and the **down** direction as negative y-axis (**decreasing y-coordinate**)\n\n\nYou have to place `n` people, including Alice and Bob, at these points such that there is **exactly one** person at every point. Alice wants to be alone with Bob, so Alice will build a rectangular fence with Alice's position as the **upper left corner** and Bob's position as the **lower right corner** of the fence (**Note** that the fence **might not** enclose any area, i.e. it can be a line). If any person other than Alice and Bob is either **inside** the fence or **on** the fence, Alice will be sad.\n\n\nReturn *the number of **pairs of points** where you can place Alice and Bob, such that Alice **does not** become sad on building the fence*.\n\n\nNote** that Alice can only build a fence with Alice's position as the upper left corner, and Bob's position as the lower right corner. For example, Alice cannot build either of the fences in the picture below with four corners `(1, 1)`, `(1, 3)`, `(3, 1)`, and `(3, 3)`, because:\n\n\n With Alice at `(3, 3)` and Bob at `(1, 1)`, Alice's position is not the upper left corner and Bob's position is not the lower right corner of the fence.\n With Alice at `(1, 3)` and Bob at `(1, 1)`, Bob's position is not the lower right corner of the fence.\n\n\n![](https://assets.leetcode.com/uploads/2024/01/04/example0alicebob-1.png)\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Geometry",
            "Sorting",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** points = [[1,1],[2,2],[3,3]]",
                "Output": "** 0",
                "Explanation": "** There is no way to place Alice and Bob such that Alice can build a fence with Alice's position as the upper left corner and Bob's position as the lower right corner. Hence we return 0."
            },
            {
                "Input": "** points = [[6,2],[4,4],[2,6]]",
                "Output": "** 2",
                "Explanation": "** There are two ways to place Alice and Bob such that Alice will not be sad:\n- Place Alice at (4, 4) and Bob at (6, 2).\n- Place Alice at (2, 6) and Bob at (4, 4).\nYou cannot place Alice at (2, 6) and Bob at (6, 2) because the person at (4, 4) will be inside the fence."
            },
            {
                "Input": "** points = [[3,1],[1,3],[1,1]]",
                "Output": "** 2",
                "Explanation": "** There are two ways to place Alice and Bob such that Alice will not be sad:\n- Place Alice at (1, 1) and Bob at (3, 1).\n- Place Alice at (1, 3) and Bob at (1, 1).\nYou cannot place Alice at (1, 3) and Bob at (3, 1) because the person at (1, 1) will be on the fence.\nNote that it does not matter if the fence encloses any area, the first and second fences in the image are valid."
            }
        ]
    },
    {
        "Title": "Maximum Good Subarray Sum",
        "slug": "maximum-good-subarray-sum",
        "description": "You are given an array `nums` of length `n` and a **positive** integer `k`.\n\n\nA subarray of `nums` is called **good** if the **absolute difference** between its first and last element is **exactly** `k`, in other words, the subarray `nums[i..j]` is good if `|nums[i] - nums[j]| == k`.\n\n\nReturn *the **maximum** sum of a **good** subarray of* `nums`. *If there are no good subarrays**, return* `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5,6], k = 1",
                "Output": "** 11",
                "Explanation": "** The absolute difference between the first and last element must be 1 for a good subarray. All the good subarrays are: [1,2], [2,3], [3,4], [4,5], and [5,6]. The maximum subarray sum is 11 for the subarray [5,6]."
            },
            {
                "Input": "** nums = [-1,3,2,4,5], k = 3",
                "Output": "** 11",
                "Explanation": "** The absolute difference between the first and last element must be 3 for a good subarray. All the good subarrays are: [-1,3,2], and [2,4,5]. The maximum subarray sum is 11 for the subarray [2,4,5]."
            },
            {
                "Input": "** nums = [-1,-2,-3,-4], k = 2",
                "Output": "** -6",
                "Explanation": "** The absolute difference between the first and last element must be 2 for a good subarray. All the good subarrays are: [-1,-2,-3], and [-2,-3,-4]. The maximum subarray sum is -6 for the subarray [-1,-2,-3]."
            }
        ]
    },
    {
        "Title": "Find the Number of Ways to Place People II",
        "slug": "find-the-number-of-ways-to-place-people-ii",
        "description": "You are given a 2D array `points` of size `n x 2` representing integer coordinates of some points on a 2D-plane, where `points[i] = [xi, yi]`.\n\n\nWe define the **right** direction as positive x-axis (**increasing x-coordinate**) and the **left** direction as negative x-axis (**decreasing x-coordinate**). Similarly, we define the **up** direction as positive y-axis (**increasing y-coordinate**) and the **down** direction as negative y-axis (**decreasing y-coordinate**)\n\n\nYou have to place `n` people, including Alice and Bob, at these points such that there is **exactly one** person at every point. Alice wants to be alone with Bob, so Alice will build a rectangular fence with Alice's position as the **upper left corner** and Bob's position as the **lower right corner** of the fence (**Note** that the fence **might not** enclose any area, i.e. it can be a line). If any person other than Alice and Bob is either **inside** the fence or **on** the fence, Alice will be sad.\n\n\nReturn *the number of **pairs of points** where you can place Alice and Bob, such that Alice **does not** become sad on building the fence*.\n\n\nNote** that Alice can only build a fence with Alice's position as the upper left corner, and Bob's position as the lower right corner. For example, Alice cannot build either of the fences in the picture below with four corners `(1, 1)`, `(1, 3)`, `(3, 1)`, and `(3, 3)`, because:\n\n\n With Alice at `(3, 3)` and Bob at `(1, 1)`, Alice's position is not the upper left corner and Bob's position is not the lower right corner of the fence.\n With Alice at `(1, 3)` and Bob at `(1, 1)`, Bob's position is not the lower right corner of the fence.\n\n\n![](https://assets.leetcode.com/uploads/2024/01/04/example0alicebob-1.png)\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Geometry",
            "Sorting",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** points = [[1,1],[2,2],[3,3]]",
                "Output": "** 0",
                "Explanation": "** There is no way to place Alice and Bob such that Alice can build a fence with Alice's position as the upper left corner and Bob's position as the lower right corner. Hence we return 0."
            },
            {
                "Input": "** points = [[6,2],[4,4],[2,6]]",
                "Output": "** 2",
                "Explanation": "** There are two ways to place Alice and Bob such that Alice will not be sad:\n- Place Alice at (4, 4) and Bob at (6, 2).\n- Place Alice at (2, 6) and Bob at (4, 4).\nYou cannot place Alice at (2, 6) and Bob at (6, 2) because the person at (4, 4) will be inside the fence."
            },
            {
                "Input": "** points = [[3,1],[1,3],[1,1]]",
                "Output": "** 2",
                "Explanation": "** There are two ways to place Alice and Bob such that Alice will not be sad:\n- Place Alice at (1, 1) and Bob at (3, 1).\n- Place Alice at (1, 3) and Bob at (1, 1).\nYou cannot place Alice at (1, 3) and Bob at (3, 1) because the person at (1, 1) will be on the fence.\nNote that it does not matter if the fence encloses any area, the first and second fences in the image are valid."
            }
        ]
    },
    {
        "Title": "Ant on the Boundary",
        "slug": "ant-on-the-boundary",
        "description": "An ant is on a boundary. It sometimes goes **left** and sometimes **right**.\n\n\nYou are given an array of **non-zero** integers `nums`. The ant starts reading `nums` from the first element of it to its end. At each step, it moves according to the value of the current element:\n\n\n If `nums[i] < 0`, it moves **left** by `-nums[i]` units.\n If `nums[i] > 0`, it moves **right** by `nums[i]` units.\n\n\nReturn *the number of times the ant **returns** to the boundary.\n\n\nNotes:\n\n\n There is an infinite space on both sides of the boundary.\n We check whether the ant is on the boundary only after it has moved `|nums[i]|` units. In other words, if the ant crosses the boundary during its movement, it does not count.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [2,3,-5]",
                "Output": "** 1",
                "Explanation": "** After the first step, the ant is 2 steps to the right of the boundary.\nAfter the second step, the ant is 5 steps to the right of the boundary.\nAfter the third step, the ant is on the boundary.\nSo the answer is 1."
            },
            {
                "Input": "** nums = [3,2,-3,-4]",
                "Output": "** 0",
                "Explanation": "** After the first step, the ant is 3 steps to the right of the boundary.\nAfter the second step, the ant is 5 steps to the right of the boundary.\nAfter the third step, the ant is 2 steps to the right of the boundary.\nAfter the fourth step, the ant is 2 steps to the left of the boundary.\nThe ant never returned to the boundary, so the answer is 0."
            }
        ]
    },
    {
        "Title": "Minimum Time to Revert Word to Initial State I",
        "slug": "minimum-time-to-revert-word-to-initial-state-i",
        "description": "You are given a **0-indexed** string `word` and an integer `k`.\n\n\nAt every second, you must perform the following operations:\n\n\n Remove the first `k` characters of `word`.\n Add any `k` characters to the end of `word`.\n\n\nNote** that you do not necessarily need to add the same characters that you removed. However, you must perform **both** operations at every second.\n\n\nReturn *the **minimum** time greater than zero required for* `word` *to revert to its **initial** state*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Rolling Hash",
            "String Matching",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "** word = \"abacaba\", k = 3",
                "Output": "** 2",
                "Explanation": "** At the 1st second, we remove characters \"aba\" from the prefix of word, and add characters \"bac\" to the end of word. Thus, word becomes equal to \"cababac\".\nAt the 2nd second, we remove characters \"cab\" from the prefix of word, and add \"aba\" to the end of word. Thus, word becomes equal to \"abacaba\" and reverts to its initial state.\nIt can be shown that 2 seconds is the minimum time greater than zero required for word to revert to its initial state."
            },
            {
                "Input": "** word = \"abacaba\", k = 4",
                "Output": "** 1",
                "Explanation": "** At the 1st second, we remove characters \"abac\" from the prefix of word, and add characters \"caba\" to the end of word. Thus, word becomes equal to \"abacaba\" and reverts to its initial state.\nIt can be shown that 1 second is the minimum time greater than zero required for word to revert to its initial state."
            },
            {
                "Input": "** word = \"abcbabcd\", k = 2",
                "Output": "** 4",
                "Explanation": "** At every second, we will remove the first 2 characters of word, and add the same characters to the end of word.\nAfter 4 seconds, word becomes equal to \"abcbabcd\" and reverts to its initial state.\nIt can be shown that 4 seconds is the minimum time greater than zero required for word to revert to its initial state."
            }
        ]
    },
    {
        "Title": "Find the Grid of Region Average",
        "slug": "find-the-grid-of-region-average",
        "description": "You are given a **0-indexed** `m x n` grid `image` which represents a grayscale image, where `image[i][j]` represents a pixel with intensity in the range`[0..255]`. You are also given a **non-negative** integer `threshold`.\n\n\nTwo pixels `image[a][b]` and `image[c][d]` are said to be **adjacent** if `|a - c| + |b - d| == 1`.\n\n\nA **region** is a `3 x 3` subgrid where the **absolute difference** in intensity between any two **adjacent** pixels is **less than or equal to** `threshold`.\n\n\nAll pixels in a **region** belong to that region, note that a pixel **can** belong to **multiple** regions.\n\n\nYou need to calculate a **0-indexed** `m x n` grid `result`, where `result[i][j]` is the **average** intensity of the region to which `image[i][j]` belongs, **rounded down** to the nearest integer. If `image[i][j]` belongs to multiple regions, `result[i][j]` is the **average** of the **rounded down average** intensities of these regions, **rounded down** to the nearest integer. If `image[i][j]` does **not** belong to any region, `result[i][j]` is **equal to** `image[i][j]`.\n\n\nReturn *the grid* `result`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** image = [[5,6,7,10],[8,9,10,10],[11,12,13,10]], threshold = 3",
                "Output": "** [[9,9,9,9],[9,9,9,9],[9,9,9,9]]",
                "Explanation": "** There exist two regions in the image, which are shown as the shaded areas in the picture. The average intensity of the first region is 9, while the average intensity of the second region is 9.67 which is rounded down to 9. The average intensity of both of the regions is (9 + 9) / 2 = 9. As all the pixels belong to either region 1, region 2, or both of them, the intensity of every pixel in the result is 9. \nPlease note that the rounded-down values are used when calculating the average of multiple regions, hence the calculation is done using 9 as the average intensity of region 2, not 9.67."
            },
            {
                "Input": "** image = [[10,20,30],[15,25,35],[20,30,40],[25,35,45]], threshold = 12",
                "Output": "** [[25,25,25],[27,27,27],[27,27,27],[30,30,30]]",
                "Explanation": "** There exist two regions in the image, which are shown as the shaded areas in the picture. The average intensity of the first region is 25, while the average intensity of the second region is 30. The average intensity of both of the regions is (25 + 30) / 2 = 27.5 which is rounded down to 27. All the pixels in row 0 of the image belong to region 1, hence all the pixels in row 0 in the result are 25. Similarly, all the pixels in row 3 in the result are 30. The pixels in rows 1 and 2 of the image belong to region 1 and region 2, hence their assigned value is 27 in the result."
            }
        ]
    },
    {
        "Title": "Minimum Time to Revert Word to Initial State II",
        "slug": "minimum-time-to-revert-word-to-initial-state-ii",
        "description": "You are given a **0-indexed** string `word` and an integer `k`.\n\n\nAt every second, you must perform the following operations:\n\n\n Remove the first `k` characters of `word`.\n Add any `k` characters to the end of `word`.\n\n\nNote** that you do not necessarily need to add the same characters that you removed. However, you must perform **both** operations at every second.\n\n\nReturn *the **minimum** time greater than zero required for* `word` *to revert to its **initial** state*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "String",
            "Rolling Hash",
            "String Matching",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "** word = \"abacaba\", k = 3",
                "Output": "** 2",
                "Explanation": "** At the 1st second, we remove characters \"aba\" from the prefix of word, and add characters \"bac\" to the end of word. Thus, word becomes equal to \"cababac\".\nAt the 2nd second, we remove characters \"cab\" from the prefix of word, and add \"aba\" to the end of word. Thus, word becomes equal to \"abacaba\" and reverts to its initial state.\nIt can be shown that 2 seconds is the minimum time greater than zero required for word to revert to its initial state."
            },
            {
                "Input": "** word = \"abacaba\", k = 4",
                "Output": "** 1",
                "Explanation": "** At the 1st second, we remove characters \"abac\" from the prefix of word, and add characters \"caba\" to the end of word. Thus, word becomes equal to \"abacaba\" and reverts to its initial state.\nIt can be shown that 1 second is the minimum time greater than zero required for word to revert to its initial state."
            },
            {
                "Input": "** word = \"abcbabcd\", k = 2",
                "Output": "** 4",
                "Explanation": "** At every second, we will remove the first 2 characters of word, and add the same characters to the end of word.\nAfter 4 seconds, word becomes equal to \"abcbabcd\" and reverts to its initial state.\nIt can be shown that 4 seconds is the minimum time greater than zero required for word to revert to its initial state."
            }
        ]
    },
    {
        "Title": "Modify the Matrix",
        "slug": "modify-the-matrix",
        "description": "Given a **0-indexed** `m x n` integer matrix `matrix`, create a new **0-indexed** matrix called `answer`. Make `answer` equal to `matrix`, then replace each element with the value `-1` with the **maximum** element in its respective column.\n\n\nReturn *the matrix* `answer`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** matrix = [[1,2,-1],[4,-1,6],[7,8,9]]",
                "Output": "** [[1,2,9],[4,8,6],[7,8,9]]",
                "Explanation": "** The diagram above shows the elements that are changed (in blue).\n- We replace the value in the cell [1][1] with the maximum value in the column 1, that is 8.\n- We replace the value in the cell [0][2] with the maximum value in the column 2, that is 9."
            },
            {
                "Input": "** matrix = [[3,-1],[5,2]]",
                "Output": "** [[3,2],[5,2]]",
                "Explanation": "** The diagram above shows the elements that are changed (in blue)."
            }
        ]
    },
    {
        "Title": "Number of Subarrays That Match a Pattern I",
        "slug": "number-of-subarrays-that-match-a-pattern-i",
        "description": "You are given a **0-indexed** integer array `nums` of size `n`, and a **0-indexed** integer array `pattern` of size `m` consisting of integers `-1`, `0`, and `1`.\n\n\nA subarray `nums[i..j]` of size `m + 1` is said to match the `pattern` if the following conditions hold for each element `pattern[k]`:\n\n\n `nums[i + k + 1] > nums[i + k]` if `pattern[k] == 1`.\n `nums[i + k + 1] == nums[i + k]` if `pattern[k] == 0`.\n `nums[i + k + 1] < nums[i + k]` if `pattern[k] == -1`.\n\n\nReturn *the **count** of subarrays in* `nums` *that match the* `pattern`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Rolling Hash",
            "String Matching",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5,6], pattern = [1,1]",
                "Output": "** 4",
                "Explanation": "** The pattern [1,1] indicates that we are looking for strictly increasing subarrays of size 3. In the array nums, the subarrays [1,2,3], [2,3,4], [3,4,5], and [4,5,6] match this pattern.\nHence, there are 4 subarrays in nums that match the pattern."
            },
            {
                "Input": "** nums = [1,4,4,1,3,5,5,3], pattern = [1,0,-1]",
                "Output": "** 2",
                "Explanation": "** Here, the pattern [1,0,-1] indicates that we are looking for a sequence where the first number is smaller than the second, the second is equal to the third, and the third is greater than the fourth. In the array nums, the subarrays [1,4,4,1], and [3,5,5,3] match this pattern.\nHence, there are 2 subarrays in nums that match the pattern."
            }
        ]
    },
    {
        "Title": "Maximum Palindromes After Operations",
        "slug": "maximum-palindromes-after-operations",
        "description": "You are given a **0-indexed** string array `words` having length `n` and containing **0-indexed** strings.\n\n\nYou are allowed to perform the following operation **any** number of times (**including** **zero**):\n\n\n Choose integers `i`, `j`, `x`, and `y` such that `0 <= i, j < n`, `0 <= x < words[i].length`, `0 <= y < words[j].length`, and **swap** the characters `words[i][x]` and `words[j][y]`.\n\n\nReturn *an integer denoting the **maximum** number of palindromes* `words` *can contain, after performing some operations.\n\n\nNote:** `i` and `j` may be equal during an operation.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Greedy",
            "Sorting",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** words = [\"abbb\",\"ba\",\"aa\"]",
                "Output": "** 3",
                "Explanation": "** In this example, one way to get the maximum number of palindromes is:\nChoose i = 0, j = 1, x = 0, y = 0, so we swap words[0][0] and words[1][0]. words becomes [\"bbbb\",\"aa\",\"aa\"].\nAll strings in words are now palindromes.\nHence, the maximum number of palindromes achievable is 3."
            },
            {
                "Input": "** words = [\"abc\",\"ab\"]",
                "Output": "** 2",
                "Explanation": "** In this example, one way to get the maximum number of palindromes is: \nChoose i = 0, j = 1, x = 1, y = 0, so we swap words[0][1] and words[1][0]. words becomes [\"aac\",\"bb\"].\nChoose i = 0, j = 0, x = 1, y = 2, so we swap words[0][1] and words[0][2]. words becomes [\"aca\",\"bb\"].\nBoth strings are now palindromes.\nHence, the maximum number of palindromes achievable is 2."
            },
            {
                "Input": "** words = [\"cd\",\"ef\",\"a\"]",
                "Output": "** 1",
                "Explanation": "** In this example, there is no need to perform any operation.\nThere is one palindrome in words \"a\".\nIt can be shown that it is not possible to get more than one palindrome after any number of operations.\nHence, the answer is 1."
            }
        ]
    },
    {
        "Title": "Number of Subarrays That Match a Pattern II",
        "slug": "number-of-subarrays-that-match-a-pattern-ii",
        "description": "You are given a **0-indexed** integer array `nums` of size `n`, and a **0-indexed** integer array `pattern` of size `m` consisting of integers `-1`, `0`, and `1`.\n\n\nA subarray `nums[i..j]` of size `m + 1` is said to match the `pattern` if the following conditions hold for each element `pattern[k]`:\n\n\n `nums[i + k + 1] > nums[i + k]` if `pattern[k] == 1`.\n `nums[i + k + 1] == nums[i + k]` if `pattern[k] == 0`.\n `nums[i + k + 1] < nums[i + k]` if `pattern[k] == -1`.\n\n\nReturn *the **count** of subarrays in* `nums` *that match the* `pattern`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Rolling Hash",
            "String Matching",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5,6], pattern = [1,1]",
                "Output": "** 4",
                "Explanation": "** The pattern [1,1] indicates that we are looking for strictly increasing subarrays of size 3. In the array nums, the subarrays [1,2,3], [2,3,4], [3,4,5], and [4,5,6] match this pattern.\nHence, there are 4 subarrays in nums that match the pattern."
            },
            {
                "Input": "** nums = [1,4,4,1,3,5,5,3], pattern = [1,0,-1]",
                "Output": "** 2",
                "Explanation": "** Here, the pattern [1,0,-1] indicates that we are looking for a sequence where the first number is smaller than the second, the second is equal to the third, and the third is greater than the fourth. In the array nums, the subarrays [1,4,4,1], and [3,5,5,3] match this pattern.\nHence, there are 2 subarrays in nums that match the pattern."
            }
        ]
    },
    {
        "Title": "Maximum Number of Operations With the Same Score I",
        "slug": "maximum-number-of-operations-with-the-same-score-i",
        "description": "Given an array of integers called `nums`, you can perform the following operation while `nums` contains **at least** `2` elements:\n\n\n Choose the first two elements of `nums` and delete them.\n\n\nThe **score** of the operation is the sum of the deleted elements.\n\n\nYour task is to find the **maximum** number of operations that can be performed, such that **all operations have the same score**.\n\n\nReturn *the **maximum** number of operations possible that satisfy the condition mentioned above*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [3,2,1,4,5]",
                "Output": "** 2",
                "Explanation": "** We perform the following operations:\n- Delete the first two elements, with score 3 + 2 = 5, nums = [1,4,5].\n- Delete the first two elements, with score 1 + 4 = 5, nums = [5].\nWe are unable to perform any more operations as nums contain only 1 element."
            },
            {
                "Input": "** nums = [3,2,6,1,4]",
                "Output": "** 1",
                "Explanation": "** We perform the following operations:\n- Delete the first two elements, with score 3 + 2 = 5, nums = [6,1,4].\nWe are unable to perform any more operations as the score of the next operation isn't the same as the previous one."
            }
        ]
    },
    {
        "Title": "Apply Operations to Make String Empty",
        "slug": "apply-operations-to-make-string-empty",
        "description": "You are given a string `s`.\n\n\nConsider performing the following operation until `s` becomes **empty**:\n\n\n For **every** alphabet character from `'a'` to `'z'`, remove the **first** occurrence of that character in `s` (if it exists).\n\n\nFor example, let initially `s = \"aabcbbca\"`. We do the following operations:\n\n\n Remove the underlined characters `s = \"**a**a**bc**bbca\"`. The resulting string is `s = \"abbca\"`.\n Remove the underlined characters `s = \"**ab**b**c**a\"`. The resulting string is `s = \"ba\"`.\n Remove the underlined characters `s = \"**ba**\"`. The resulting string is `s = \"\"`.\n\n\nReturn *the value of the string* `s` *right **before** applying the **last** operation*. In the example above, answer is `\"ba\"`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** s = \"aabcbbca\"",
                "Output": "** \"ba\"",
                "Explanation": "** Explained in the statement."
            },
            {
                "Input": "** s = \"abcd\"",
                "Output": "** \"abcd\"",
                "Explanation": "** We do the following operation:\n- Remove the underlined characters s = \"**abcd**\". The resulting string is s = \"\".\nThe string just before the last operation is \"abcd\"."
            }
        ]
    },
    {
        "Title": "Maximum Number of Operations With the Same Score II",
        "slug": "maximum-number-of-operations-with-the-same-score-ii",
        "description": "Given an array of integers called `nums`, you can perform **any** of the following operation while `nums` contains **at least** `2` elements:\n\n\n Choose the first two elements of `nums` and delete them.\n Choose the last two elements of `nums` and delete them.\n Choose the first and the last elements of `nums` and delete them.\n\n\nThe **score** of the operation is the sum of the deleted elements.\n\n\nYour task is to find the **maximum** number of operations that can be performed, such that **all operations have the same score**.\n\n\nReturn *the **maximum** number of operations possible that satisfy the condition mentioned above*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Memoization"
        ],
        "examples": [
            {
                "Input": "** nums = [3,2,1,2,3,4]",
                "Output": "** 3",
                "Explanation": "** We perform the following operations:\n- Delete the first two elements, with score 3 + 2 = 5, nums = [1,2,3,4].\n- Delete the first and the last elements, with score 1 + 4 = 5, nums = [2,3].\n- Delete the first and the last elements, with score 2 + 3 = 5, nums = [].\nWe are unable to perform any more operations as nums is empty."
            },
            {
                "Input": "** nums = [3,2,6,1,4]",
                "Output": "** 2",
                "Explanation": "** We perform the following operations:\n- Delete the first two elements, with score 3 + 2 = 5, nums = [6,1,4].\n- Delete the last two elements, with score 1 + 4 = 5, nums = [6].\nIt can be proven that we can perform at most 2 operations."
            }
        ]
    },
    {
        "Title": "Maximize Consecutive Elements in an Array After Modification",
        "slug": "maximize-consecutive-elements-in-an-array-after-modification",
        "description": "You are given a **0-indexed** array `nums` consisting of **positive** integers.\n\n\nInitially, you can increase the value of **any** element in the array by **at most** `1`.\n\n\nAfter that, you need to select **one or more** elements from the final array such that those elements are **consecutive** when sorted in increasing order. For example, the elements `[3, 4, 5]` are consecutive while `[3, 4, 6]` and `[1, 1, 2, 3]` are not.\n\n\nReturn *the **maximum** number of elements that you can select*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [2,1,5,1,1]",
                "Output": "** 3",
                "Explanation": "** We can increase the elements at indices 0 and 3. The resulting array is nums = [3,1,5,2,1].\nWe select the elements [**3**,**1**,5,**2**,1] and we sort them to obtain [1,2,3], which are consecutive.\nIt can be shown that we cannot select more than 3 consecutive elements."
            },
            {
                "Input": "** nums = [1,4,7,10]",
                "Output": "** 1",
                "Explanation": "** The maximum consecutive elements that we can select is 1."
            }
        ]
    },
    {
        "Title": "Count Prefix and Suffix Pairs I",
        "slug": "count-prefix-and-suffix-pairs-i",
        "description": "You are given a **0-indexed** string array `words`.\n\n\nLet's define a **boolean** function `isPrefixAndSuffix` that takes two strings, `str1` and `str2`:\n\n\n `isPrefixAndSuffix(str1, str2)` returns `true` if `str1` is **both** a prefix and a suffix of `str2`, and `false` otherwise.\n\n\nFor example, `isPrefixAndSuffix(\"aba\", \"ababa\")` is `true` because `\"aba\"` is a prefix of `\"ababa\"` and also a suffix, but `isPrefixAndSuffix(\"abc\", \"abcd\")` is `false`.\n\n\nReturn *an integer denoting the **number** of index pairs* `(i, j)` *such that* `i < j`*, and* `isPrefixAndSuffix(words[i], words[j])` *is* `true`*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "String",
            "Trie",
            "Rolling Hash",
            "String Matching",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "** words = [\"a\",\"aba\",\"ababa\",\"aa\"]",
                "Output": "** 4",
                "Explanation": "** In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(\"a\", \"aba\") is true.\ni = 0 and j = 2 because isPrefixAndSuffix(\"a\", \"ababa\") is true.\ni = 0 and j = 3 because isPrefixAndSuffix(\"a\", \"aa\") is true.\ni = 1 and j = 2 because isPrefixAndSuffix(\"aba\", \"ababa\") is true.\nTherefore, the answer is 4."
            },
            {
                "Input": "** words = [\"pa\",\"papa\",\"ma\",\"mama\"]",
                "Output": "** 2",
                "Explanation": "** In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(\"pa\", \"papa\") is true.\ni = 2 and j = 3 because isPrefixAndSuffix(\"ma\", \"mama\") is true.\nTherefore, the answer is 2."
            },
            {
                "Input": "** words = [\"abab\",\"ab\"]",
                "Output": "** 0",
                "Explanation": "** In this example, the only valid index pair is i = 0 and j = 1, and isPrefixAndSuffix(\"abab\", \"ab\") is false.\nTherefore, the answer is 0."
            }
        ]
    },
    {
        "Title": "Find the Length of the Longest Common Prefix",
        "slug": "find-the-length-of-the-longest-common-prefix",
        "description": "You are given two arrays with **positive** integers `arr1` and `arr2`.\n\n\nA **prefix** of a positive integer is an integer formed by one or more of its digits, starting from its **leftmost** digit. For example, `123` is a prefix of the integer `12345`, while `234` is **not**.\n\n\nA **common prefix** of two integers `a` and `b` is an integer `c`, such that `c` is a prefix of both `a` and `b`. For example, `5655359` and `56554` have a common prefix `565` while `1223` and `43456` **do not** have a common prefix.\n\n\nYou need to find the length of the **longest common prefix** between all pairs of integers `(x, y)` such that `x` belongs to `arr1` and `y` belongs to `arr2`.\n\n\nReturn *the length of the **longest** common prefix among all pairs*. *If no common prefix exists among them*, *return* `0`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Trie"
        ],
        "examples": [
            {
                "Input": "** arr1 = [1,10,100], arr2 = [1000]",
                "Output": "** 3",
                "Explanation": "** There are 3 pairs (arr1[i], arr2[j]):\n- The longest common prefix of (1, 1000) is 1.\n- The longest common prefix of (10, 1000) is 10.\n- The longest common prefix of (100, 1000) is 100.\nThe longest common prefix is 100 with a length of 3."
            },
            {
                "Input": "** arr1 = [1,2,3], arr2 = [4,4,4]",
                "Output": "** 0",
                "Explanation": "** There exists no common prefix for any pair (arr1[i], arr2[j]), hence we return 0.\nNote that common prefixes between elements of the same array do not count."
            }
        ]
    },
    {
        "Title": "Most Frequent Prime",
        "slug": "most-frequent-prime",
        "description": "You are given a `m x n` **0-indexed** 2Dmatrix `mat`. From every cell, you can create numbers in the following way:\n\n\n There could be at most `8` paths from the cells namely: east, south-east, south, south-west, west, north-west, north, and north-east.\n Select a path from them and append digits in this path to the number being formed by traveling in this direction.\n Note that numbers are generated at every step, for example, if the digits along the path are `1, 9, 1`, then there will be three numbers generated along the way: `1, 19, 191`.\n\n\nReturn *the most frequent prime number **greater** than* `10` *out of all the numbers created by traversing the matrix or* `-1` *if no such prime number exists. If there are multiple prime numbers with the highest frequency, then return the **largest** among them.\n\n\nNote:** It is invalid to change the direction during the move.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Matrix",
            "Counting",
            "Enumeration",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** mat = [[7]]",
                "Output": "** -1",
                "Explanation": "** The only number which can be formed is 7. It is a prime number however it is not greater than 10, so return -1."
            },
            {
                "Input": "** mat = [[9,7,8],[4,6,5],[2,8,6]]",
                "Output": "** 97",
                "Explanation": "** \nNumbers greater than 10 created from the cell (0,0) in all possible directions are: [97,978,96,966,94,942].\nNumbers greater than 10 created from the cell (0,1) in all possible directions are: [78,75,76,768,74,79].\nNumbers greater than 10 created from the cell (0,2) in all possible directions are: [85,856,86,862,87,879].\nNumbers greater than 10 created from the cell (1,0) in all possible directions are: [46,465,48,42,49,47].\nNumbers greater than 10 created from the cell (1,1) in all possible directions are: [65,66,68,62,64,69,67,68].\nNumbers greater than 10 created from the cell (1,2) in all possible directions are: [56,58,56,564,57,58].\nNumbers greater than 10 created from the cell (2,0) in all possible directions are: [28,286,24,249,26,268].\nNumbers greater than 10 created from the cell (2,1) in all possible directions are: [86,82,84,86,867,85].\nNumbers greater than 10 created from the cell (2,2) in all possible directions are: [68,682,66,669,65,658].\nThe most frequent prime number among all the created numbers is 97."
            }
        ]
    },
    {
        "Title": "Count Prefix and Suffix Pairs II",
        "slug": "count-prefix-and-suffix-pairs-ii",
        "description": "You are given a **0-indexed** string array `words`.\n\n\nLet's define a **boolean** function `isPrefixAndSuffix` that takes two strings, `str1` and `str2`:\n\n\n `isPrefixAndSuffix(str1, str2)` returns `true` if `str1` is **both** a prefix and a suffix of `str2`, and `false` otherwise.\n\n\nFor example, `isPrefixAndSuffix(\"aba\", \"ababa\")` is `true` because `\"aba\"` is a prefix of `\"ababa\"` and also a suffix, but `isPrefixAndSuffix(\"abc\", \"abcd\")` is `false`.\n\n\nReturn *an integer denoting the **number** of index pairs* `(i*,* j)` *such that* `i < j`*, and* `isPrefixAndSuffix(words[i], words[j])` *is* `true`*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "String",
            "Trie",
            "Rolling Hash",
            "String Matching",
            "Hash Function"
        ],
        "examples": [
            {
                "Input": "** words = [\"a\",\"aba\",\"ababa\",\"aa\"]",
                "Output": "** 4",
                "Explanation": "** In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(\"a\", \"aba\") is true.\ni = 0 and j = 2 because isPrefixAndSuffix(\"a\", \"ababa\") is true.\ni = 0 and j = 3 because isPrefixAndSuffix(\"a\", \"aa\") is true.\ni = 1 and j = 2 because isPrefixAndSuffix(\"aba\", \"ababa\") is true.\nTherefore, the answer is 4."
            },
            {
                "Input": "** words = [\"pa\",\"papa\",\"ma\",\"mama\"]",
                "Output": "** 2",
                "Explanation": "** In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(\"pa\", \"papa\") is true.\ni = 2 and j = 3 because isPrefixAndSuffix(\"ma\", \"mama\") is true.\nTherefore, the answer is 2."
            },
            {
                "Input": "** words = [\"abab\",\"ab\"]",
                "Output": "** 0",
                "Explanation": "** In this example, the only valid index pair is i = 0 and j = 1, and isPrefixAndSuffix(\"abab\", \"ab\") is false.\nTherefore, the answer is 0."
            }
        ]
    },
    {
        "Title": "Split the Array",
        "slug": "split-the-array",
        "description": "You are given an integer array `nums` of **even** length. You have to split the array into two parts `nums1` and `nums2` such that:\n\n\n `nums1.length == nums2.length == nums.length / 2`.\n `nums1` should contain **distinct** elements.\n `nums2` should also contain **distinct** elements.\n\n\nReturn `true` *if it is possible to split the array, and* `false` *otherwise**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,1,2,2,3,4]",
                "Output": "** true",
                "Explanation": "** One of the possible ways to split nums is nums1 = [1,2,3] and nums2 = [1,2,4]."
            },
            {
                "Input": "** nums = [1,1,1,1]",
                "Output": "** false",
                "Explanation": "** The only possible way to split nums is nums1 = [1,1] and nums2 = [1,1]. Both nums1 and nums2 do not contain distinct elements. Therefore, we return false."
            }
        ]
    },
    {
        "Title": "Find the Largest Area of Square Inside Two Rectangles",
        "slug": "find-the-largest-area-of-square-inside-two-rectangles",
        "description": "There exist `n` rectangles in a 2D plane. You are given two **0-indexed** 2D integer arrays `bottomLeft` and `topRight`, both of size `n x 2`, where `bottomLeft[i]` and `topRight[i]` represent the **bottom-left** and **top-right** coordinates of the `ith` rectangle respectively.\n\n\nYou can select a region formed from the **intersection** of\u00a0two of the given rectangles. You need to find the **largest** area of a **square** that can fit **inside** this region if you select the region optimally.\n\n\nReturn *the **largest** possible area of a square, or* `0` *if there **do not** exist any intersecting regions between the rectangles*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Geometry"
        ],
        "examples": [
            {
                "Input": "** bottomLeft = [[1,1],[2,2],[3,1]], topRight = [[3,3],[4,4],[6,6]]",
                "Output": "** 1",
                "Explanation": "** A square with side length 1 can fit inside either the intersecting region of rectangle 0 and rectangle 1, or the intersecting region of rectangle 1 and rectangle 2. Hence the largest area is side * side which is 1 * 1 == 1.\nIt can be shown that a square with a greater side length can not fit inside any intersecting region."
            },
            {
                "Input": "** bottomLeft = [[1,1],[2,2],[1,2]], topRight = [[3,3],[4,4],[3,4]]",
                "Output": "** 1",
                "Explanation": "** A square with side length 1 can fit inside either the intersecting region of rectangle 0 and rectangle 1, the intersecting region of rectangle 1 and rectangle 2, or the intersection region of all 3 rectangles. Hence the largest area is side * side which is 1 * 1 == 1.\nIt can be shown that a square with a greater side length can not fit inside any intersecting region.\nNote that the region can be formed by the intersection of more than 2 rectangles."
            },
            {
                "Input": "** bottomLeft = [[1,1],[3,3],[3,1]], topRight = [[2,2],[4,4],[4,2]]",
                "Output": "** 0",
                "Explanation": "** No pair of rectangles intersect, hence, we return 0."
            }
        ]
    },
    {
        "Title": "Earliest Second to Mark Indices I",
        "slug": "earliest-second-to-mark-indices-i",
        "description": "You are given two **1-indexed** integer arrays, `nums` and, `changeIndices`, having lengths `n` and `m`, respectively.\n\n\nInitially, all indices in `nums` are unmarked. Your task is to mark **all** indices in `nums`.\n\n\nIn each second, `s`, in order from `1` to `m` (**inclusive**), you can perform **one** of the following operations:\n\n\n Choose an index `i` in the range `[1, n]` and **decrement** `nums[i]` by `1`.\n If `nums[changeIndices[s]]` is **equal** to `0`, **mark** the index `changeIndices[s]`.\n Do nothing.\n\n\nReturn *an integer denoting the **earliest second** in the range* `[1, m]` *when **all** indices in* `nums` *can be marked by choosing operations optimally, or* `-1` *if it is impossible.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "examples": [
            {
                "Input": "** nums = [2,2,0], changeIndices = [2,2,2,2,3,2,2,1]",
                "Output": "** 8",
                "Explanation": "** In this example, we have 8 seconds. The following operations can be performed to mark all indices:\nSecond 1: Choose index 1 and decrement nums[1] by one. nums becomes [1,2,0].\nSecond 2: Choose index 1 and decrement nums[1] by one. nums becomes [0,2,0].\nSecond 3: Choose index 2 and decrement nums[2] by one. nums becomes [0,1,0].\nSecond 4: Choose index 2 and decrement nums[2] by one. nums becomes [0,0,0].\nSecond 5: Mark the index changeIndices[5], which is marking index 3, since nums[3] is equal to 0.\nSecond 6: Mark the index changeIndices[6], which is marking index 2, since nums[2] is equal to 0.\nSecond 7: Do nothing.\nSecond 8: Mark the index changeIndices[8], which is marking index 1, since nums[1] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 8th second.\nHence, the answer is 8."
            },
            {
                "Input": "** nums = [1,3], changeIndices = [1,1,1,2,1,1,1]",
                "Output": "** 6",
                "Explanation": "** In this example, we have 7 seconds. The following operations can be performed to mark all indices:\nSecond 1: Choose index 2 and decrement nums[2] by one. nums becomes [1,2].\nSecond 2: Choose index 2 and decrement nums[2] by one. nums becomes [1,1].\nSecond 3: Choose index 2 and decrement nums[2] by one. nums becomes [1,0].\nSecond 4: Mark the index changeIndices[4], which is marking index 2, since nums[2] is equal to 0.\nSecond 5: Choose index 1 and decrement nums[1] by one. nums becomes [0,0].\nSecond 6: Mark the index changeIndices[6], which is marking index 1, since nums[1] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 6th second.\nHence, the answer is 6."
            },
            {
                "Input": "** nums = [0,1], changeIndices = [2,2,2]",
                "Output": "** -1",
                "Explanation": "** In this example, it is impossible to mark all indices because index 1 isn't in changeIndices.\nHence, the answer is -1."
            }
        ]
    },
    {
        "Title": "Earliest Second to Mark Indices II",
        "slug": "earliest-second-to-mark-indices-ii",
        "description": "You are given two **1-indexed** integer arrays, `nums` and, `changeIndices`, having lengths `n` and `m`, respectively.\n\n\nInitially, all indices in `nums` are unmarked. Your task is to mark **all** indices in `nums`.\n\n\nIn each second, `s`, in order from `1` to `m` (**inclusive**), you can perform **one** of the following operations:\n\n\n Choose an index `i` in the range `[1, n]` and **decrement** `nums[i]` by `1`.\n Set `nums[changeIndices[s]]` to any **non-negative** value.\n Choose an index `i` in the range `[1, n]`, where `nums[i]` is **equal** to `0`, and **mark** index `i`.\n Do nothing.\n\n\nReturn *an integer denoting the **earliest second** in the range* `[1, m]` *when **all** indices in* `nums` *can be marked by choosing operations optimally, or* `-1` *if it is impossible.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Greedy",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** nums = [3,2,3], changeIndices = [1,3,2,2,2,2,3]",
                "Output": "** 6",
                "Explanation": "** In this example, we have 7 seconds. The following operations can be performed to mark all indices:\nSecond 1: Set nums[changeIndices[1]] to 0. nums becomes [0,2,3].\nSecond 2: Set nums[changeIndices[2]] to 0. nums becomes [0,2,0].\nSecond 3: Set nums[changeIndices[3]] to 0. nums becomes [0,0,0].\nSecond 4: Mark index 1, since nums[1] is equal to 0.\nSecond 5: Mark index 2, since nums[2] is equal to 0.\nSecond 6: Mark index 3, since nums[3] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 6th second.\nHence, the answer is 6."
            },
            {
                "Input": "** nums = [0,0,1,2], changeIndices = [1,2,1,2,1,2,1,2]",
                "Output": "** 7",
                "Explanation": "** In this example, we have 8 seconds. The following operations can be performed to mark all indices:\nSecond 1: Mark index 1, since nums[1] is equal to 0.\nSecond 2: Mark index 2, since nums[2] is equal to 0.\nSecond 3: Decrement index 4 by one. nums becomes [0,0,1,1].\nSecond 4: Decrement index 4 by one. nums becomes [0,0,1,0].\nSecond 5: Decrement index 3 by one. nums becomes [0,0,0,0].\nSecond 6: Mark index 3, since nums[3] is equal to 0.\nSecond 7: Mark index 4, since nums[4] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 7th second.\nHence, the answer is 7."
            },
            {
                "Input": "** nums = [1,2,3], changeIndices = [1,2,3]",
                "Output": "** -1",
                "Explanation": "** In this example, it can be shown that it is impossible to mark all indices, as we don't have enough seconds. \nHence, the answer is -1."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Exceed Threshold Value I",
        "slug": "minimum-operations-to-exceed-threshold-value-i",
        "description": "You are given a **0-indexed** integer array `nums`, and an integer `k`.\n\n\nIn one operation, you can remove one occurrence of the smallest element of `nums`.\n\n\nReturn *the **minimum** number of operations needed so that all elements of the array are greater than or equal to* `k`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [2,11,10,1,3], k = 10",
                "Output": "** 3",
                "Explanation": "** After one operation, nums becomes equal to [2, 11, 10, 3].\nAfter two operations, nums becomes equal to [11, 10, 3].\nAfter three operations, nums becomes equal to [11, 10].\nAt this stage, all the elements of nums are greater than or equal to 10 so we can stop.\nIt can be shown that 3 is the minimum number of operations needed so that all elements of the array are greater than or equal to 10."
            },
            {
                "Input": "** nums = [1,1,2,4,9], k = 1",
                "Output": "** 0",
                "Explanation": "** All elements of the array are greater than or equal to 1 so we do not need to apply any operations on nums."
            },
            {
                "Input": "** nums = [1,1,2,4,9], k = 9",
                "Output": "** 4",
                "Explanation": "** only a single element of nums is greater than or equal to 9 so we need to apply the operations 4 times on nums."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Exceed Threshold Value II",
        "slug": "minimum-operations-to-exceed-threshold-value-ii",
        "description": "You are given a **0-indexed** integer array `nums`, and an integer `k`.\n\n\nIn one operation, you will:\n\n\n Take the two smallest integers `x` and `y` in `nums`.\n Remove `x` and `y` from `nums`.\n Add `min(x, y) * 2 + max(x, y)` anywhere in the array.\n\n\nNote** that you can only apply the described operation if `nums` contains at least two elements.\n\n\nReturn *the **minimum** number of operations needed so that all elements of the array are greater than or equal to* `k`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Heap (Priority Queue)",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [2,11,10,1,3], k = 10",
                "Output": "** 2",
                "Explanation": "** In the first operation, we remove elements 1 and 2, then add 1 * 2 + 2 to nums. nums becomes equal to [4, 11, 10, 3].\nIn the second operation, we remove elements 3 and 4, then add 3 * 2 + 4 to nums. nums becomes equal to [10, 11, 10].\nAt this stage, all the elements of nums are greater than or equal to 10 so we can stop.\nIt can be shown that 2 is the minimum number of operations needed so that all elements of the array are greater than or equal to 10."
            },
            {
                "Input": "** nums = [1,1,2,4,9], k = 20",
                "Output": "** 4",
                "Explanation": "** After one operation, nums becomes equal to [2, 4, 9, 3].\nAfter two operations, nums becomes equal to [7, 4, 9].\nAfter three operations, nums becomes equal to [15, 9].\nAfter four operations, nums becomes equal to [33].\nAt this stage, all the elements of nums are greater than 20 so we can stop.\nIt can be shown that 4 is the minimum number of operations needed so that all elements of the array are greater than or equal to 20."
            }
        ]
    },
    {
        "Title": "Count Pairs of Connectable Servers in a Weighted Tree Network",
        "slug": "count-pairs-of-connectable-servers-in-a-weighted-tree-network",
        "description": "You are given an unrooted weighted tree with `n` vertices representing servers numbered from `0` to `n - 1`, an array `edges` where `edges[i] = [ai, bi, weighti]` represents a bidirectional edge between vertices `ai` and `bi` of weight `weighti`. You are also given an integer `signalSpeed`.\n\n\nTwo servers `a` and `b` are **connectable** through a server `c` if:\n\n\n `a < b`, `a != c` and `b != c`.\n The distance from `c` to `a` is divisible by `signalSpeed`.\n The distance from `c` to `b` is divisible by `signalSpeed`.\n The path from `c` to `b` and the path from `c` to `a` do not share any edges.\n\n\nReturn *an integer array* `count` *of length* `n` *where* `count[i]` *is the **number** of server pairs that are **connectable** through* *the server* `i`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Tree",
            "Depth-First Search"
        ],
        "examples": [
            {
                "Input": "** edges = [[0,1,1],[1,2,5],[2,3,13],[3,4,9],[4,5,2]], signalSpeed = 1",
                "Output": "** [0,4,6,6,4,0]",
                "Explanation": "** Since signalSpeed is 1, count[c] is equal to the number of pairs of paths that start at c and do not share any edges.\nIn the case of the given path graph, count[c] is equal to the number of servers to the left of c multiplied by the servers to the right of c."
            },
            {
                "Input": "** edges = [[0,6,3],[6,5,3],[0,3,1],[3,2,7],[3,1,6],[3,4,2]], signalSpeed = 3",
                "Output": "** [2,0,0,0,0,0,2]",
                "Explanation": "** Through server 0, there are 2 pairs of connectable servers: (4, 5) and (4, 6).\nThrough server 6, there are 2 pairs of connectable servers: (4, 5) and (0, 5).\nIt can be shown that no two servers are connectable through servers other than 0 and 6."
            }
        ]
    },
    {
        "Title": "Find the Maximum Sum of Node Values",
        "slug": "find-the-maximum-sum-of-node-values",
        "description": "There exists an **undirected** tree with `n` nodes numbered `0` to `n - 1`. You are given a **0-indexed** 2D integer array `edges` of length `n - 1`, where `edges[i] = [ui, vi]` indicates that there is an edge between nodes `ui` and `vi` in the tree. You are also given a **positive** integer `k`, and a **0-indexed** array of **non-negative** integers `nums` of length `n`, where `nums[i]` represents the **value** of the node numbered `i`.\n\n\nAlice wants the sum of values of tree nodes to be **maximum**, for which Alice can perform the following operation **any** number of times (**including zero**) on the tree:\n\n\n Choose any edge `[u, v]` connecting the nodes `u` and `v`, and update their values as follows:\n\t+ `nums[u] = nums[u] XOR k`\n\t+ `nums[v] = nums[v] XOR k`\n\n\nReturn *the **maximum** possible **sum** of the **values** Alice can achieve by performing the operation **any** number of times*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy",
            "Bit Manipulation",
            "Tree",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,1], k = 3, edges = [[0,1],[0,2]]",
                "Output": "** 6",
                "Explanation": "** Alice can achieve the maximum sum of 6 using a single operation:\n- Choose the edge [0,2]. nums[0] and nums[2] become: 1 XOR 3 = 2, and the array nums becomes: [1,2,1] -> [2,2,2].\nThe total sum of values is 2 + 2 + 2 = 6.\nIt can be shown that 6 is the maximum achievable sum of values."
            },
            {
                "Input": "** nums = [2,3], k = 7, edges = [[0,1]]",
                "Output": "** 9",
                "Explanation": "** Alice can achieve the maximum sum of 9 using a single operation:\n- Choose the edge [0,1]. nums[0] becomes: 2 XOR 7 = 5 and nums[1] become: 3 XOR 7 = 4, and the array nums becomes: [2,3] -> [5,4].\nThe total sum of values is 5 + 4 = 9.\nIt can be shown that 9 is the maximum achievable sum of values."
            },
            {
                "Input": "** nums = [7,7,7,7,7,7], k = 3, edges = [[0,1],[0,2],[0,3],[0,4],[0,5]]",
                "Output": "** 42",
                "Explanation": "** The maximum achievable sum is 42 which can be achieved by Alice performing no operations."
            }
        ]
    },
    {
        "Title": "Distribute Elements Into Two Arrays I",
        "slug": "distribute-elements-into-two-arrays-i",
        "description": "You are given a **1-indexed** array of **distinct** integers `nums` of length `n`.\n\n\nYou need to distribute all the elements of `nums` between two arrays `arr1` and `arr2` using `n` operations. In the first operation, append `nums[1]` to `arr1`. In the second operation, append `nums[2]` to `arr2`. Afterwards, in the `ith` operation:\n\n\n If the last element of `arr1` is **greater** than the last element of `arr2`, append `nums[i]` to `arr1`. Otherwise, append `nums[i]` to `arr2`.\n\n\nThe array `result` is formed by concatenating the arrays `arr1` and `arr2`. For example, if `arr1 == [1,2,3]` and `arr2 == [4,5,6]`, then `result = [1,2,3,4,5,6]`.\n\n\nReturn *the array* `result`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [2,1,3]",
                "Output": "** [2,3,1]",
                "Explanation": "** After the first 2 operations, arr1 = [2] and arr2 = [1].\nIn the 3rd operation, as the last element of arr1 is greater than the last element of arr2 (2 > 1), append nums[3] to arr1.\nAfter 3 operations, arr1 = [2,3] and arr2 = [1].\nHence, the array result formed by concatenation is [2,3,1]."
            },
            {
                "Input": "** nums = [5,4,3,8]",
                "Output": "** [5,3,4,8]",
                "Explanation": "** After the first 2 operations, arr1 = [5] and arr2 = [4].\nIn the 3rd operation, as the last element of arr1 is greater than the last element of arr2 (5 > 4), append nums[3] to arr1, hence arr1 becomes [5,3].\nIn the 4th operation, as the last element of arr2 is greater than the last element of arr1 (4 > 3), append nums[4] to arr2, hence arr2 becomes [4,8].\nAfter 4 operations, arr1 = [5,3] and arr2 = [4,8].\nHence, the array result formed by concatenation is [5,3,4,8]."
            }
        ]
    },
    {
        "Title": "Count Submatrices with Top-Left Element and Sum Less Than k",
        "slug": "count-submatrices-with-top-left-element-and-sum-less-than-k",
        "description": "You are given a **0-indexed** integer matrix `grid` and an integer `k`.\n\n\nReturn *the **number** of submatrices that contain the top-left element of the* `grid`, *and have a sum less than or equal to* `k`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** grid = [[7,6,3],[6,6,1]], k = 18",
                "Output": "** 4",
                "Explanation": "** There are only 4 submatrices, shown in the image above, that contain the top-left element of grid, and have a sum less than or equal to 18."
            },
            {
                "Input": "** grid = [[7,2,9],[1,5,0],[2,6,6]], k = 20",
                "Output": "** 6",
                "Explanation": "** There are only 6 submatrices, shown in the image above, that contain the top-left element of grid, and have a sum less than or equal to 20."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Write the Letter Y on a Grid",
        "slug": "minimum-operations-to-write-the-letter-y-on-a-grid",
        "description": "You are given a **0-indexed** `n x n` grid where `n` is odd, and `grid[r][c]` is `0`, `1`, or `2`.\n\n\nWe say that a cell belongs to the Letter **Y** if it belongs to one of the following:\n\n\n The diagonal starting at the top-left cell and ending at the center cell of the grid.\n The diagonal starting at the top-right cell and ending at the center cell of the grid.\n The vertical line starting at the center cell and ending at the bottom border of the grid.\n\n\nThe Letter **Y** is written on the grid if and only if:\n\n\n All values at cells belonging to the Y are equal.\n All values at cells not belonging to the Y are equal.\n The values at cells belonging to the Y are different from the values at cells not belonging to the Y.\n\n\nReturn *the **minimum** number of operations needed to write the letter Y on the grid given that in one operation you can change the value at any cell to* `0`*,* `1`*,* *or* `2`*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Matrix",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,2,2],[1,1,0],[0,1,0]]",
                "Output": "** 3",
                "Explanation": "** We can write Y on the grid by applying the changes highlighted in blue in the image above. After the operations, all cells that belong to Y, denoted in bold, have the same value of 1 while those that do not belong to Y are equal to 0.\nIt can be shown that 3 is the minimum number of operations needed to write Y on the grid."
            },
            {
                "Input": "** grid = [[0,1,0,1,0],[2,1,0,1,2],[2,2,2,0,1],[2,2,2,2,2],[2,1,2,2,2]]",
                "Output": "** 12",
                "Explanation": "** We can write Y on the grid by applying the changes highlighted in blue in the image above. After the operations, all cells that belong to Y, denoted in bold, have the same value of 0 while those that do not belong to Y are equal to 2. \nIt can be shown that 12 is the minimum number of operations needed to write Y on the grid."
            }
        ]
    },
    {
        "Title": "Distribute Elements Into Two Arrays II",
        "slug": "distribute-elements-into-two-arrays-ii",
        "description": "You are given a **1-indexed** array of integers `nums` of length `n`.\n\n\nWe define a function `greaterCount` such that `greaterCount(arr, val)` returns the number of elements in `arr` that are **strictly greater** than `val`.\n\n\nYou need to distribute all the elements of `nums` between two arrays `arr1` and `arr2` using `n` operations. In the first operation, append `nums[1]` to `arr1`. In the second operation, append `nums[2]` to `arr2`. Afterwards, in the `ith` operation:\n\n\n If `greaterCount(arr1, nums[i]) > greaterCount(arr2, nums[i])`, append `nums[i]` to `arr1`.\n If `greaterCount(arr1, nums[i]) < greaterCount(arr2, nums[i])`, append `nums[i]` to `arr2`.\n If `greaterCount(arr1, nums[i]) == greaterCount(arr2, nums[i])`, append `nums[i]` to the array with a **lesser** number of elements.\n If there is still a tie, append `nums[i]` to `arr1`.\n\n\nThe array `result` is formed by concatenating the arrays `arr1` and `arr2`. For example, if `arr1 == [1,2,3]` and `arr2 == [4,5,6]`, then `result = [1,2,3,4,5,6]`.\n\n\nReturn *the integer array* `result`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Indexed Tree",
            "Segment Tree",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [2,1,3,3]",
                "Output": "** [2,3,1,3]",
                "Explanation": "** After the first 2 operations, arr1 = [2] and arr2 = [1].\nIn the 3rd operation, the number of elements greater than 3 is zero in both arrays. Also, the lengths are equal, hence, append nums[3] to arr1.\nIn the 4th operation, the number of elements greater than 3 is zero in both arrays. As the length of arr2 is lesser, hence, append nums[4] to arr2.\nAfter 4 operations, arr1 = [2,3] and arr2 = [1,3].\nHence, the array result formed by concatenation is [2,3,1,3]."
            },
            {
                "Input": "** nums = [5,14,3,1,2]",
                "Output": "** [5,3,1,2,14]",
                "Explanation": "** After the first 2 operations, arr1 = [5] and arr2 = [14].\nIn the 3rd operation, the number of elements greater than 3 is one in both arrays. Also, the lengths are equal, hence, append nums[3] to arr1.\nIn the 4th operation, the number of elements greater than 1 is greater in arr1 than arr2 (2 > 1). Hence, append nums[4] to arr1.\nIn the 5th operation, the number of elements greater than 2 is greater in arr1 than arr2 (2 > 1). Hence, append nums[5] to arr1.\nAfter 5 operations, arr1 = [5,3,1,2] and arr2 = [14].\nHence, the array result formed by concatenation is [5,3,1,2,14]."
            },
            {
                "Input": "** nums = [3,3,3,3]",
                "Output": "** [3,3,3,3]",
                "Explanation": "** At the end of 4 operations, arr1 = [3,3] and arr2 = [3,3].\nHence, the array result formed by concatenation is [3,3,3,3]."
            }
        ]
    },
    {
        "Title": "Apple Redistribution into Boxes",
        "slug": "apple-redistribution-into-boxes",
        "description": "You are given an array `apple` of size `n` and an array `capacity` of size `m`.\n\n\nThere are `n` packs where the `ith` pack contains `apple[i]` apples. There are `m` boxes as well, and the `ith` box has a capacity of `capacity[i]` apples.\n\n\nReturn *the **minimum** number of boxes you need to select to redistribute these* `n` *packs of apples into boxes*.\n\n\nNote** that, apples from the same pack can be distributed into different boxes.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** apple = [1,3,2], capacity = [4,3,1,5,2]",
                "Output": "** 2",
                "Explanation": "** We will use boxes with capacities 4 and 5.\nIt is possible to distribute the apples as the total capacity is greater than or equal to the total number of apples."
            },
            {
                "Input": "** apple = [5,5,5], capacity = [2,4,2,7]",
                "Output": "** 4",
                "Explanation": "** We will need to use all the boxes."
            }
        ]
    },
    {
        "Title": "Maximize Happiness of Selected Children",
        "slug": "maximize-happiness-of-selected-children",
        "description": "You are given an array `happiness` of length `n`, and a **positive** integer `k`.\n\n\nThere are `n` children standing in a queue, where the `ith` child has **happiness value** `happiness[i]`. You want to select `k` children from these `n` children in `k` turns.\n\n\nIn each turn, when you select a child, the **happiness value** of all the children that have **not** been selected till now decreases by `1`. Note that the happiness value **cannot** become negative and gets decremented **only** if it is positive.\n\n\nReturn *the **maximum** sum of the happiness values of the selected children you can achieve by selecting* `k` *children*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** happiness = [1,2,3], k = 2",
                "Output": "** 4",
                "Explanation": "** We can pick 2 children in the following way:\n- Pick the child with the happiness value == 3. The happiness value of the remaining children becomes [0,1].\n- Pick the child with the happiness value == 1. The happiness value of the remaining child becomes [0]. Note that the happiness value cannot become less than 0.\nThe sum of the happiness values of the selected children is 3 + 1 = 4."
            },
            {
                "Input": "** happiness = [1,1,1,1], k = 2",
                "Output": "** 1",
                "Explanation": "** We can pick 2 children in the following way:\n- Pick any child with the happiness value == 1. The happiness value of the remaining children becomes [0,0,0].\n- Pick the child with the happiness value == 0. The happiness value of the remaining child becomes [0,0].\nThe sum of the happiness values of the selected children is 1 + 0 = 1."
            },
            {
                "Input": "** happiness = [2,3,4,5], k = 1",
                "Output": "** 5",
                "Explanation": "** We can pick 1 child in the following way:\n- Pick the child with the happiness value == 5. The happiness value of the remaining children becomes [1,2,3].\nThe sum of the happiness values of the selected children is 5."
            }
        ]
    },
    {
        "Title": "Shortest Uncommon Substring in an Array",
        "slug": "shortest-uncommon-substring-in-an-array",
        "description": "You are given an array `arr` of size `n` consisting of **non-empty** strings.\n\n\nFind a string array `answer` of size `n` such that:\n\n\n `answer[i]` is the **shortest** substring of `arr[i]` that does **not** occur as a substring in any other string in `arr`. If multiple such substrings exist, `answer[i]` should be the lexicographically smallest. And if no such substring exists, `answer[i]` should be an empty string.\n\n\nReturn *the array* `answer`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Trie"
        ],
        "examples": [
            {
                "Input": "** arr = [\"cab\",\"ad\",\"bad\",\"c\"]",
                "Output": "** [\"ab\",\"\",\"ba\",\"\"]",
                "Explanation": "** We have the following:\n- For the string \"cab\", the shortest substring that does not occur in any other string is either \"ca\" or \"ab\", we choose the lexicographically smaller substring, which is \"ab\".\n- For the string \"ad\", there is no substring that does not occur in any other string.\n- For the string \"bad\", the shortest substring that does not occur in any other string is \"ba\".\n- For the string \"c\", there is no substring that does not occur in any other string."
            },
            {
                "Input": "** arr = [\"abc\",\"bcd\",\"abcd\"]",
                "Output": "** [\"\",\"\",\"abcd\"]",
                "Explanation": "** We have the following:\n- For the string \"abc\", there is no substring that does not occur in any other string.\n- For the string \"bcd\", there is no substring that does not occur in any other string.\n- For the string \"abcd\", the shortest substring that does not occur in any other string is \"abcd\"."
            }
        ]
    },
    {
        "Title": "Maximum Strength of K Disjoint Subarrays",
        "slug": "maximum-strength-of-k-disjoint-subarrays",
        "description": "You are given a **0-indexed** array of integers `nums` of length `n`, and a **positive** **odd** integer `k`.\n\n\nThe strength of `x` subarrays is defined as `strength = sum[1] * x - sum[2] * (x - 1) + sum[3] * (x - 2) - sum[4] * (x - 3) + ... + sum[x] * 1` where `sum[i]` is the sum of the elements in the `ith` subarray. Formally, strength is sum of `(-1)i+1 * sum[i] * (x - i + 1)` over all `i`'s such that `1 <= i <= x`.\n\n\nYou need to select `k` **disjoint subarrays** from `nums`, such that their **strength** is **maximum**.\n\n\nReturn *the **maximum** possible **strength** that can be obtained*.\n\n\nNote** that the selected subarrays **don't** need to cover the entire array.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,-1,2], k = 3",
                "Output": "** 22",
                "Explanation": "** The best possible way to select 3 subarrays is: nums[0..2], nums[3..3], and nums[4..4]. The strength is (1 + 2 + 3) * 3 - (-1) * 2 + 2 * 1 = 22."
            },
            {
                "Input": "** nums = [12,-2,-2,-2,-2], k = 5",
                "Output": "** 64",
                "Explanation": "** The only possible way to select 5 disjoint subarrays is: nums[0..0], nums[1..1], nums[2..2], nums[3..3], and nums[4..4]. The strength is 12 * 5 - (-2) * 4 + (-2) * 3 - (-2) * 2 + (-2) * 1 = 64."
            },
            {
                "Input": "** nums = [-1,-2,-3], k = 1",
                "Output": "** -1",
                "Explanation": "** The best possible way to select 1 subarray is: nums[0..0]. The strength is -1."
            }
        ]
    },
    {
        "Title": "Find the Sum of Encrypted Integers",
        "slug": "find-the-sum-of-encrypted-integers",
        "description": "You are given an integer array `nums` containing **positive** integers. We define a function `encrypt` such that `encrypt(x)` replaces **every** digit in `x` with the **largest** digit in `x`. For example, `encrypt(523) = 555` and `encrypt(213) = 333`.\n\n\nReturn *the **sum** of encrypted elements*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Math"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 6",
                "Explanation": "** The encrypted elements are\u00a0`[1,2,3]`. The sum of encrypted elements is `1 + 2 + 3 == 6`."
            },
            {
                "Input": "** nums = [10,21,31]",
                "Output": "** 66",
                "Explanation": "** The encrypted elements are `[11,22,33]`. The sum of encrypted elements is `11 + 22 + 33 == 66`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 50`\n* `1 <= nums[i] <= 1000`\n\n\nSimilarQuestions: [2227]"
            }
        ]
    },
    {
        "Title": "Mark Elements on Array by Performing Queries",
        "slug": "mark-elements-on-array-by-performing-queries",
        "description": "You are given a **0-indexed** array `nums` of size `n` consisting of positive integers.\n\n\nYou are also given a 2D array `queries` of size `m` where `queries[i] = [indexi, ki]`.\n\n\nInitially all elements of the array are **unmarked**.\n\n\nYou need to apply `m` queries on the array in order, where on the `ith` query you do the following:\n\n\n Mark the element at index `indexi` if it is not already marked.\n Then mark `ki` unmarked elements in the array with the **smallest** values. If multiple such elements exist, mark the ones with the smallest indices. And if less than `ki` unmarked elements exist, then mark all of them.\n\n\nReturn *an array answer of size* `m` *where* `answer[i]` *is the **sum** of unmarked elements in the array after the* `ith` *query*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Heap (Priority Queue)",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,2,1,2,3,1], queries = [[1,2],[3,3],[4,2]]",
                "Output": "** [8,3,0]",
                "Explanation": "**\n\n\nWe do the following queries on the array:\n\n\n* Mark the element at index `1`, and `2` of the smallest unmarked elements with the smallest indices if they exist, the marked elements now are `nums = [**1**,**2**,2,**1**,2,3,1]`. The sum of unmarked elements is `2 + 2 + 3 + 1 = 8`.\n* Mark the element at index `3`, since it is already marked we skip it. Then we mark `3` of the smallest unmarked elements with the smallest indices, the marked elements now are `nums = [**1**,**2**,**2**,**1**,**2**,3,**1**]`. The sum of unmarked elements is `3`.\n* Mark the element at index `4`, since it is already marked we skip it. Then we mark `2` of the smallest unmarked elements with the smallest indices if they exist, the marked elements now are `nums = [**1**,**2**,**2**,**1**,**2**,**3**,**1**]`. The sum of unmarked elements is `0`."
            },
            {
                "Input": "** nums = [1,4,2,3], queries = [[0,1]]",
                "Output": "** [7]",
                "Explanation": "**  We do one query which is mark the element at index `0` and mark the smallest element among unmarked elements. The marked elements will be `nums = [**1**,4,**2**,3]`, and the sum of unmarked elements is `4 + 3 = 7`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `m == queries.length`\n* `1 <= m <= n <= 105`\n* `1 <= nums[i] <= 105`\n* `queries[i].length == 2`\n* `0 <= indexi, ki <= n - 1`\n\n\nHints:\n    0. Use another array to keep track of marked indices.\n    1. Sort the array <code>nums</code> to be able to find the smallest unmarked elements quickly in each query."
            }
        ]
    },
    {
        "Title": "Replace Question Marks in String to Minimize Its Value",
        "slug": "replace-question-marks-in-string-to-minimize-its-value",
        "description": "You are given a string `s`. `s[i]` is either a lowercase English letter or `'?'`.\n\n\nFor a string `t` having length `m` containing **only** lowercase English letters, we define the function `cost(i)` for an index `i`\u00a0as the number of characters **equal** to `t[i]`\u00a0that appeared before it, i.e. in the range `[0, i - 1]`.\n\n\nThe **value** of `t` is the **sum** of `cost(i)` for all indices `i`.\n\n\nFor example, for the string `t = \"aab\"`:\n\n\n `cost(0) = 0`\n `cost(1) = 1`\n `cost(2) = 0`\n Hence, the value of `\"aab\"` is `0 + 1 + 0 = 1`.\n\n\nYour task is to **replace all** occurrences of `'?'` in `s` with any lowercase English letter so that the **value** of `s` is **minimized**.\n\n\nReturn *a string denoting the modified string with replaced occurrences of* `'?'`*. If there are multiple strings resulting in the **minimum value**, return the lexicographically smallest one.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)",
            "Counting"
        ],
        "examples": [
            {
                "Input": "**   s = \"???\"",
                "Output": "**   \"abc\"",
                "Explanation": "**  In this example, we can replace the occurrences of `'?'` to make `s` equal to `\"abc\"`.\n\n\nFor `\"abc\"`, `cost(0) = 0`, `cost(1) = 0`, and `cost(2) = 0`.\n\n\nThe value of `\"abc\"` is `0`.\n\n\nSome other modifications of `s` that have a value of `0` are `\"cba\"`, `\"abz\"`, and, `\"hey\"`.\n\n\nAmong all of them, we choose the lexicographically smallest."
            },
            {
                "Input": "**  s = \"a?a?\"",
                "Output": "**  \"abac\"",
                "Explanation": "**  In this example, the occurrences of `'?'` can be replaced to make `s` equal to `\"abac\"`.\n\n\nFor `\"abac\"`, `cost(0) = 0`, `cost(1) = 0`, `cost(2) = 1`, and `cost(3) = 0`.\n\n\nThe value of `\"abac\"` is\u00a0`1`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s[i]` is either a lowercase English letter or `'?'`.\n\n\nHints:\n    0. <p>The cost does not depend on the order of characters. If a character <code>c</code> appears <code>x</code> times, the cost is exactly <code>0 + 1 + 2 + \u2026 + (x \u2212 1) = x * (x \u2212 1) / 2</code>.</p>\n    1. <p>We know the total number of question marks; for each one, we should select the letter with the minimum frequency to replace it.</p>\n    2. <p>The letter selection can be achieved by a min-heap (or even by brute-forcing the <code>26</code> possibilities).</p>\n    3. <p>So, we know the extra letters we need to replace finally. However, we must put those letters in order from left to right so that the resulting string is the lexicographically smallest one.</p>\nSimilarQuestions: [2734]"
            }
        ]
    },
    {
        "Title": "Find the Sum of the Power of All Subsequences",
        "slug": "find-the-sum-of-the-power-of-all-subsequences",
        "description": "You are given an integer array `nums` of length `n` and a **positive** integer `k`.\n\n\nThe **power** of an array of integers is defined as the number of subsequences with their sum **equal** to `k`.\n\n\nReturn *the **sum** of **power** of all subsequences of* `nums`*.\n\n\nSince the answer may be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "examples": [
            {
                "Input": "**   nums = [1,2,3], k = 3",
                "Output": "**   6",
                "Explanation": "**\n\n\nThere are `5` subsequences of nums with non-zero power:\n\n\n* The subsequence `[**1**,**2**,**3**]` has `2` subsequences with `sum == 3`: `[1,2,3]` and `[1,2,3]`.\n* The subsequence `[**1**,2,**3**]` has `1` subsequence with `sum == 3`: `[1,2,3]`.\n* The subsequence `[1,**2**,**3**]` has `1` subsequence with `sum == 3`: `[1,2,3]`.\n* The subsequence `[**1**,**2**,3]` has `1` subsequence with `sum == 3`: `[1,2,3]`.\n* The subsequence `[1,2,**3**]` has `1` subsequence with `sum == 3`: `[1,2,3]`.\n\n\nHence the answer is `2 + 1 + 1 + 1 + 1 = 6`."
            },
            {
                "Input": "**   nums = [2,3,3], k = 5",
                "Output": "**   4",
                "Explanation": "**\n\n\nThere are `3` subsequences of nums with non-zero power:\n\n\n* The subsequence `[**2**,**3**,**3**]` has 2 subsequences with `sum == 5`: `[2,3,3]` and `[2,3,3]`.\n* The subsequence `[**2**,3,**3**]` has 1 subsequence with `sum == 5`: `[2,3,3]`.\n* The subsequence `[**2**,**3**,3]` has 1 subsequence with `sum == 5`: `[2,3,3]`.\n\n\nHence the answer is `2 + 1 + 1 = 4`."
            },
            {
                "Input": "**   nums = [1,2,3], k = 7",
                "Output": "**   0",
                "Explanation": "**There exists no subsequence with sum `7`. Hence all subsequences of nums have `power = 0`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 100`\n* `1 <= nums[i] <= 104`\n* `1 <= k <= 100`\n\n\nHints:\n    0. If there is a subsequence of length <code>j</code> with the sum of elements <code>k</code>, it contributes <code>2<sup>n - j</sup></code> to the answer.\n    1. Let <code>dp[i][j]</code> represent the number of subsequences in the subarray <code>nums[0..i]</code> which have a sum of <code>j</code>.\n    2. We can find the <code>dp[i][k]</code> for all <code>0 <= i <= n-1</code> and multiply them with <code>2<sup>n - j</sup></code> to get final answer.\nSimilarQuestions: [1498]"
            }
        ]
    },
    {
        "Title": "Existence of a Substring in a String and Its Reverse",
        "slug": "existence-of-a-substring-in-a-string-and-its-reverse",
        "description": "Given astring `s`, find any substring of length `2` which is also present in the reverse of `s`.\n\n\nReturn `true` *if such a substring exists, and* `false` *otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"leetcode\"",
                "Output": "** true",
                "Explanation": "** Substring `\"ee\"` is of length `2` which is also present in `reverse(s) == \"edocteel\"`."
            },
            {
                "Input": "** s = \"abcba\"",
                "Output": "** true",
                "Explanation": "** All of the substrings of length `2` `\"ab\"`, `\"bc\"`, `\"cb\"`, `\"ba\"` are also present in `reverse(s) == \"abcba\"`."
            },
            {
                "Input": "** s = \"abcd\"",
                "Output": "** false",
                "Explanation": "** There is no substring of length `2` in `s`, which is also present in the reverse of `s`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 100`\n* `s` consists only of lowercase English letters.\n\n\nHints:\n    0. Make a new string by reversing the string <code>s</code>.\n    1. For every substring of length <code>2</code> in <code>s</code>, check if there is a corresponding substring in the reverse of <code>s</code>."
            }
        ]
    },
    {
        "Title": "Count Substrings Starting and Ending with Given Character",
        "slug": "count-substrings-starting-and-ending-with-given-character",
        "description": "You are given a string `s` and a character `c`. Return *the total number of substrings of* `s` *that start and end with* `c`*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** s = \"abada\", c = \"a\"",
                "Output": "** 6",
                "Explanation": "** Substrings starting and ending with `\"a\"` are: `\"**a**bada\"`, `\"**aba**da\"`, `\"**abada**\"`, `\"ab**a**da\"`, `\"ab**ada**\"`, `\"abad**a**\"`."
            },
            {
                "Input": "** s = \"zzz\", c = \"z\"",
                "Output": "** 6",
                "Explanation": "** There are a total of `6` substrings in `s` and all start and end with `\"z\"`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` and `c` consist\u00a0only of lowercase English letters.\n\n\nHints:\n    0. Count the number of characters <code>'c'</code> in string <code>s</code>, let\u2019s call it <code>m</code>.\n    1. We can select <code>2</code> numbers <code>i</code> and <code>j</code> such that <code>i <= j</code> are the start and end indices of substring. Note that <code>i</code> and <code>j</code> can be the same.\n    2. The answer is <code>m * (m + 1) / 2</code>."
            }
        ]
    },
    {
        "Title": "Minimum Deletions to Make String K-Special",
        "slug": "minimum-deletions-to-make-string-k-special",
        "description": "You are given a string `word` and an integer `k`.\n\n\nWe consider `word` to be **k-special** if `|freq(word[i]) - freq(word[j])| <= k` for all indices `i` and `j` in the string.\n\n\nHere, `freq(x)` denotes the frequency of the character `x` in `word`, and `|y|` denotes the absolute value of `y`.\n\n\nReturn *the **minimum** number of characters you need to delete to make* `word` ***k-special***.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Greedy",
            "Sorting",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** word = \"aabcaba\", k = 0",
                "Output": "** 3",
                "Explanation": "** We can make `word` `0`-special by deleting `2` occurrences of `\"a\"` and `1` occurrence of `\"c\"`. Therefore, `word` becomes equal to `\"baba\"` where `freq('a') == freq('b') == 2`."
            },
            {
                "Input": "** word = \"dabdcbdcdcd\", k = 2",
                "Output": "** 2",
                "Explanation": "** We can make `word` `2`-special by deleting `1` occurrence of `\"a\"` and `1` occurrence of `\"d\"`. Therefore, `word` becomes equal to \"bdcbdcdcd\" where `freq('b') == 2`, `freq('c') == 3`, and `freq('d') == 4`."
            },
            {
                "Input": "** word = \"aaabaaa\", k = 2",
                "Output": "** 1",
                "Explanation": "** We can make `word` `2`-special by deleting `1` occurrence of `\"b\"`. Therefore, `word` becomes equal to `\"aaaaaa\"` where each letter's frequency is now uniformly `6`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= word.length <= 105`\n* `0 <= k <= 105`\n* `word` consists only of lowercase English letters.\n\n\nHints:\n    0. Count the frequency of each letter.\n    1. Suppose we select several characters as the final answer, and let <code>x</code> be the character with the smallest frequency in the answer. It can be shown that out of the selected characters, the optimal solution will never delete an occurrence of character <code>x</code> to obtain the answer.\n    2. We will fix a character <code>c</code> and assume that it will be the character with the smallest frequency in the answer. Suppose its frequency is <code>x</code>.\n    3. Then, for every other character, we will count the number of occurrences that will be deleted. Suppose that the current character has <code>y</code> occurrences. <ol> <li>If y < x, we need to delete all of them.</li> <li> if y > x + k, we should delete y - x - k of such character.</li> <li> Otherwise we don\u2019t need to delete it.</li></ol>\nSimilarQuestions: [1647]"
            }
        ]
    },
    {
        "Title": "Minimum Moves to Pick K Ones",
        "slug": "minimum-moves-to-pick-k-ones",
        "description": "You are given a binary array `nums` of length `n`, a **positive** integer `k` and a **non-negative** integer `maxChanges`.\n\n\nAlice plays a game, where the goal is for Alice to pick up `k` ones from `nums` using the **minimum** number of **moves**. When the game starts, Alice picks up any index `aliceIndex` in the range `[0, n - 1]` and stands there. If `nums[aliceIndex] == 1` , Alice picks up the one and `nums[aliceIndex]` becomes `0`(this **does not** count as a move). After this, Alice can make **any** number of **moves** (**including** **zero**) where in each move Alice must perform **exactly** one of the following actions:\n\n\n Select any index `j != aliceIndex` such that `nums[j] == 0` and set `nums[j] = 1`. This action can be performed **at** **most** `maxChanges` times.\n Select any two adjacent indices `x` and `y` (`|x - y| == 1`) such that `nums[x] == 1`, `nums[y] == 0`, then swap their values (set `nums[y] = 1` and `nums[x] = 0`). If `y == aliceIndex`, Alice picks up the one after this move and `nums[y]` becomes `0`.\n\n\nReturn *the **minimum** number of moves required by Alice to pick **exactly*** `k` *ones*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Sliding Window",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [1,1,0,0,0,1,1,0,0,1], k = 3, maxChanges = 1",
                "Output": "** 3",
                "Explanation": "** Alice can pick up `3` ones in `3` moves, if Alice performs the following actions in each move when standing at `aliceIndex == 1`:\n\n\n* At the start of the game Alice picks up the one and `nums[1]` becomes `0`. `nums` becomes `[1,**1**,1,0,0,1,1,0,0,1]`.\n* Select `j == 2` and perform an action of the first type. `nums` becomes `[1,**0**,1,0,0,1,1,0,0,1]`\n* Select `x == 2` and `y == 1`, and perform an action of the second type. `nums` becomes `[1,**1**,0,0,0,1,1,0,0,1]`. As `y == aliceIndex`, Alice picks up the one and `nums` becomes\u00a0`[1,**0**,0,0,0,1,1,0,0,1]`.\n* Select `x == 0` and `y == 1`, and perform an action of the second type. `nums` becomes `[0,**1**,0,0,0,1,1,0,0,1]`. As `y == aliceIndex`, Alice picks up the one and `nums` becomes\u00a0`[0,**0**,0,0,0,1,1,0,0,1]`.\n\n\nNote that it may be possible for Alice to pick up `3` ones using some other sequence of `3` moves."
            },
            {
                "Input": "** nums = [0,0,0,0], k = 2, maxChanges = 3",
                "Output": "** 4",
                "Explanation": "** Alice can pick up `2` ones in `4` moves, if Alice performs the following actions in each move when standing at `aliceIndex == 0`:\n\n\n* Select `j == 1` and perform an action of the first type. `nums` becomes `[**0**,1,0,0]`.\n* Select `x == 1` and `y == 0`, and perform an action of the second type. `nums` becomes `[**1**,0,0,0]`. As `y == aliceIndex`, Alice picks up the one and `nums` becomes\u00a0`[**0**,0,0,0]`.\n* Select `j == 1` again and perform an action of the first type. `nums` becomes `[**0**,1,0,0]`.\n* Select `x == 1` and `y == 0` again, and perform an action of the second type. `nums` becomes `[**1**,0,0,0]`. As `y == aliceIndex`, Alice picks up the one and `nums` becomes\u00a0`[**0**,0,0,0]`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= n <= 105`\n* `0 <= nums[i] <= 1`\n* `1 <= k <= 105`\n* `0 <= maxChanges <= 105`\n* `maxChanges + sum(nums) >= k`\n\n\nHints:\n    0. Ones created using a change require <code>2</code> moves. Hence except for the immediate neighbors of the index where we move all the ones, we should try to use change operations.\n    1. For some subset of ones, it is always better to move the ones to the median position.\n    2. We only need to be concerned with the indices where <code>nums[i] == 1</code>.\nSimilarQuestions: [1151]"
            }
        ]
    },
    {
        "Title": "Maximum Length Substring With Two Occurrences",
        "slug": "maximum-length-substring-with-two-occurrences",
        "description": "Given a string `s`, return the **maximum** length of a substring\u00a0such that it contains *at most two occurrences* of each character.\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** s = \"bcbbbcba\"",
                "Output": "** 4",
                "Explanation": "**\n\n\nThe following substring has a length of 4 and contains at most two occurrences of each character: `\"bcbbbcba\"`."
            },
            {
                "Input": "** s = \"aaaa\"",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe following substring has a length of 2 and contains at most two occurrences of each character: `\"aaaa\"`.\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= s.length <= 100`\n* `s` consists only of lowercase English letters."
            }
        ]
    },
    {
        "Title": "Apply Operations to Make Sum of Array Greater Than or Equal to k",
        "slug": "apply-operations-to-make-sum-of-array-greater-than-or-equal-to-k",
        "description": "You are given a **positive** integer `k`. Initially, you have an array `nums = [1]`.\n\n\nYou can perform **any** of the following operations on the array **any** number of times (**possibly zero**):\n\n\n Choose any element in the array and **increase** its value by `1`.\n Duplicate any element in the array and add it to the end of the array.\n\n\nReturn *the **minimum** number of operations required to make the **sum** of elements of the final array greater than or equal to* `k`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Greedy",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** k = 11",
                "Output": "** 5",
                "Explanation": "**\n\n\nWe can do the following operations on the array `nums = [1]`:\n\n\n* Increase the element by `1` three times. The resulting array is `nums = [4]`.\n* Duplicate the element two times. The resulting array is `nums = [4,4,4]`.\n\n\nThe sum of the final array is `4 + 4 + 4 = 12` which is greater than or equal to `k = 11`.  \n\nThe total number of operations performed is `3 + 2 = 5`."
            },
            {
                "Input": "** k = 1",
                "Output": "** 0",
                "Explanation": "**\n\n\nThe sum of the original array is already greater than or equal to `1`, so no operations are needed.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= 105`\n\n\nHints:\n    0. It is optimal to make all the increase operations first and all the duplicate operations last.\n    1. Iterate over all possible number of increase operations that can be done and find the corresponding number of duplicate operations."
            }
        ]
    },
    {
        "Title": "Most Frequent IDs",
        "slug": "most-frequent-ids",
        "description": "The problem involves tracking the frequency of IDs in a collection that changes over time. You have two integer arrays, `nums` and `freq`, of equal length `n`. Each element in `nums` represents an ID, and the corresponding element in `freq` indicates how many times that ID should be added to or removed from the collection at each step.\n\n\n **Addition of IDs:** If `freq[i]` is positive, it means `freq[i]` IDs with the value `nums[i]` are added to the collection at step `i`.\n **Removal of IDs:** If `freq[i]` is negative, it means `-freq[i]` IDs with the value `nums[i]` are removed from the collection at step `i`.\n\n\nReturn an array `ans` of length `n`, where `ans[i]` represents the **count** of the *most frequent ID* in the collection after the `ith`\u00a0step. If the collection is empty at any step, `ans[i]` should be 0 for that step.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Heap (Priority Queue)",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** nums = [2,3,2,1], freq = [3,2,-3,1]",
                "Output": "** [3,3,2,2]",
                "Explanation": "**\n\n\nAfter step 0, we have 3 IDs with the value of 2. So `ans[0] = 3`.  \n\nAfter step 1, we have 3 IDs with the value of 2 and 2 IDs with the value of 3. So `ans[1] = 3`.  \n\nAfter step 2, we have 2 IDs with the value of 3. So `ans[2] = 2`.  \n\nAfter step 3, we have 2 IDs with the value of 3 and 1 ID with the value of 1. So `ans[3] = 2`."
            },
            {
                "Input": "** nums = [5,5,3], freq = [2,-2,1]",
                "Output": "** [2,0,1]",
                "Explanation": "**\n\n\nAfter step 0, we have 2 IDs with the value of 5. So `ans[0] = 2`.  \n\nAfter step 1, there are no IDs. So `ans[1] = 0`.  \n\nAfter step 2, we have 1 ID with the value of 3. So `ans[2] = 1`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length == freq.length <= 105`\n* `1 <= nums[i] <= 105`\n* `-105 <= freq[i] <= 105`\n* `freq[i] != 0`\n* The input is generated such that the occurrences of an ID will not be negative in any step.\n\n\nHints:\n    0. Use an ordered set for maintaining the occurrences of each ID.\n    1. After step <code>i</code> find the occurrences of <code>nums[i]</code>.\n    2. Change the occurrences of <code>nums[i]</code> in the ordered set."
            }
        ]
    },
    {
        "Title": "Longest Common Suffix Queries",
        "slug": "longest-common-suffix-queries",
        "description": "You are given two arrays of strings `wordsContainer` and `wordsQuery`.\n\n\nFor each `wordsQuery[i]`, you need to find a string from `wordsContainer` that has the **longest common suffix** with `wordsQuery[i]`. If there are two or more strings in `wordsContainer` that share the longest common suffix, find the string that is the **smallest** in length. If there are two or more such strings that have the **same** smallest length, find the one that occurred **earlier** in `wordsContainer`.\n\n\nReturn *an array of integers* `ans`*, where* `ans[i]` *is the index of the string in* `wordsContainer` *that has the **longest common suffix** with* `wordsQuery[i]`*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "String",
            "Trie"
        ],
        "examples": [
            {
                "Input": "** wordsContainer = [\"abcd\",\"bcd\",\"xbcd\"], wordsQuery = [\"cd\",\"bcd\",\"xyz\"]",
                "Output": "** [1,1,1]",
                "Explanation": "**\n\n\nLet's look at each `wordsQuery[i]` separately:\n\n\n* For `wordsQuery[0] = \"cd\"`, strings from `wordsContainer` that share the longest common suffix `\"cd\"` are at indices 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3.\n* For `wordsQuery[1] = \"bcd\"`, strings from `wordsContainer` that share the longest common suffix `\"bcd\"` are at indices 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3.\n* For `wordsQuery[2] = \"xyz\"`, there is no string from `wordsContainer` that shares a common suffix. Hence the longest common suffix is `\"\"`, that is shared with strings at index 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3."
            },
            {
                "Input": "** wordsContainer = [\"abcdefgh\",\"poiuygh\",\"ghghgh\"], wordsQuery = [\"gh\",\"acbfgh\",\"acbfegh\"]",
                "Output": "** [2,0,2]",
                "Explanation": "**\n\n\nLet's look at each `wordsQuery[i]` separately:\n\n\n* For `wordsQuery[0] = \"gh\"`, strings from `wordsContainer` that share the longest common suffix `\"gh\"` are at indices 0, 1, and 2. Among these, the answer is the string at index 2 because it has the shortest length of 6.\n* For `wordsQuery[1] = \"acbfgh\"`, only the string at index 0 shares the longest common suffix `\"fgh\"`. Hence it is the answer, even though the string at index 2 is shorter.\n* For `wordsQuery[2] = \"acbfegh\"`, strings from `wordsContainer` that share the longest common suffix `\"gh\"` are at indices 0, 1, and 2. Among these, the answer is the string at index 2 because it has the shortest length of 6.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= wordsContainer.length, wordsQuery.length <= 104`\n* `1 <= wordsContainer[i].length <= 5 * 103`\n* `1 <= wordsQuery[i].length <= 5 * 103`\n* `wordsContainer[i]` consists only of lowercase English letters.\n* `wordsQuery[i]` consists only of lowercase English letters.\n* Sum of `wordsContainer[i].length` is at most `5 * 105`.\n* Sum of `wordsQuery[i].length` is at most `5 * 105`.\n\n\nHints:\n    0. If we reverse the strings, the problem changes to finding the longest common prefix.\n    1. Build a Trie, each node is a letter and only saves the best word\u2019s index in each node, based on the criteria.\nSimilarQuestions: [14, 3043]"
            }
        ]
    },
    {
        "Title": "Shortest Subarray With OR at Least K I",
        "slug": "shortest-subarray-with-or-at-least-k-i",
        "description": "You are given an array `nums` of **non-negative** integers and an integer `k`.\n\n\nAn array is called **special** if the bitwise `OR` of all of its elements is **at least** `k`.\n\n\nReturn *the length of the **shortest** **special** **non-empty** subarray of* `nums`, *or return* `-1` *if no special subarray exists*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Bit Manipulation",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3], k = 2",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe subarray `[3]` has `OR` value of `3`. Hence, we return `1`."
            },
            {
                "Input": "** nums = [2,1,8], k = 10",
                "Output": "** 3",
                "Explanation": "**\n\n\nThe subarray `[2,1,8]` has `OR` value of `11`. Hence, we return `3`."
            },
            {
                "Input": "** nums = [1,2], k = 0",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe subarray `[1]` has `OR` value of `1`. Hence, we return `1`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 50`\n* `0 <= nums[i] <= 50`\n* `0 <= k < 64`\n\n\nSimilarQuestions: [209, 862]"
            }
        ]
    },
    {
        "Title": "Minimum Levels to Gain More Points",
        "slug": "minimum-levels-to-gain-more-points",
        "description": "You are given a binary array `possible` of length `n`.\n\n\nAlice and Bob are playing a game that consists of `n` levels. Some of the levels in the game are **impossible** to clear while others can **always** be cleared. In particular, if `possible[i] == 0`, then the `ith` level is **impossible** to clear for **both** the players. A player gains `1` point on clearing a level and loses `1` point if the player fails to clear it.\n\n\nAt the start of the game, Alice will play some levels in the **given order** starting from the `0th` level, after which Bob will play for the rest of the levels.\n\n\nAlice wants to know the **minimum** number of levels she should play to gain more points than Bob, if both players play optimally to **maximize** their points.\n\n\nReturn *the **minimum** number of levels Alice should play to gain more points*. *If this is **not** possible, return* `-1`.\n\n\nNote** that each player must play at least `1` level.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** possible = [1,0,1,0]",
                "Output": "** 1",
                "Explanation": "**\n\n\nLet's look at all the levels that Alice can play up to:\n\n\n* If Alice plays only level 0 and Bob plays the rest of the levels, Alice has 1 point, while Bob has -1 + 1 - 1 = -1 point.\n* If Alice plays till level 1 and Bob plays the rest of the levels, Alice has 1 - 1 = 0 points, while Bob has 1 - 1 = 0 points.\n* If Alice plays till level 2 and Bob plays the rest of the levels, Alice has 1 - 1 + 1 = 1 point, while Bob has -1 point.\n\n\nAlice must play a minimum of 1 level to gain more points."
            },
            {
                "Input": "** possible = [1,1,1,1,1]",
                "Output": "** 3",
                "Explanation": "**\n\n\nLet's look at all the levels that Alice can play up to:\n\n\n* If Alice plays only level 0 and Bob plays the rest of the levels, Alice has 1 point, while Bob has 4 points.\n* If Alice plays till level 1 and Bob plays the rest of the levels, Alice has 2 points, while Bob has 3 points.\n* If Alice plays till level 2 and Bob plays the rest of the levels, Alice has 3 points, while Bob has 2 points.\n* If Alice plays till level 3 and Bob plays the rest of the levels, Alice has 4 points, while Bob has 1 point.\n\n\nAlice must play a minimum of 3 levels to gain more points."
            },
            {
                "Input": "** possible = [0,0]",
                "Output": "** -1",
                "Explanation": "**\n\n\nThe only possible way is for both players to play 1 level each. Alice plays level 0 and loses 1 point. Bob plays level 1 and loses 1 point. As both players have equal points, Alice can't gain more points than Bob.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= n == possible.length <= 105`\n* `possible[i]` is either `0` or `1`.\n\n\nHints:\n    0. Change all <code>0</code> in possible array into <code>-1</code>.\n    1. We need to find the shortest non-empty prefix of the new possible array such that the sum of elements in it is strictly larger than the remaining part.\nSimilarQuestions: [2244]"
            }
        ]
    },
    {
        "Title": "Shortest Subarray With OR at Least K II",
        "slug": "shortest-subarray-with-or-at-least-k-ii",
        "description": "You are given an array `nums` of **non-negative** integers and an integer `k`.\n\n\nAn array is called **special** if the bitwise `OR` of all of its elements is **at least** `k`.\n\n\nReturn *the length of the **shortest** **special** **non-empty** subarray of* `nums`, *or return* `-1` *if no special subarray exists*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Bit Manipulation",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3], k = 2",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe subarray `[3]` has `OR` value of `3`. Hence, we return `1`."
            },
            {
                "Input": "** nums = [2,1,8], k = 10",
                "Output": "** 3",
                "Explanation": "**\n\n\nThe subarray `[2,1,8]` has `OR` value of `11`. Hence, we return `3`."
            },
            {
                "Input": "** nums = [1,2], k = 0",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe subarray `[1]` has `OR` value of `1`. Hence, we return `1`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 2 * 105`\n* `0 <= nums[i] <= 109`\n* `0 <= k <= 109`\n\n\nHints:\n    0. For each <code>nums[i]</code>, we can maintain each subarray\u2019s bitwise <code>OR</code> result ending with it.\n    1. The property of bitwise <code>OR</code> is that it never unsets any bits and only sets new bits\n    2. So the number of different results for each <code>nums[i]</code> is at most the number of bits 32.\nSimilarQuestions: [325, 862]"
            }
        ]
    },
    {
        "Title": "Find the Sum of Subsequence Powers",
        "slug": "find-the-sum-of-subsequence-powers",
        "description": "You are given an integer array `nums` of length `n`, and a **positive** integer `k`.\n\n\nThe **power** of a subsequence is defined as the **minimum** absolute difference between **any** two elements in the subsequence.\n\n\nReturn *the **sum** of **powers** of **all** subsequences of* `nums` *which have length* ***equal to*** `k`.\n\n\nSince the answer may be large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3,4], k = 3",
                "Output": "** 4",
                "Explanation": "**\n\n\nThere are 4 subsequences in `nums` which have length 3: `[1,2,3]`, `[1,3,4]`, `[1,2,4]`, and `[2,3,4]`. The sum of powers is `|2 - 3| + |3 - 4| + |2 - 1| + |3 - 4| = 4`."
            },
            {
                "Input": "** nums = [2,2], k = 2",
                "Output": "** 0",
                "Explanation": "**\n\n\nThe only subsequence in `nums` which has length 2 is\u00a0`[2,2]`. The sum of powers is `|2 - 2| = 0`."
            },
            {
                "Input": "** nums = [4,3,-1], k = 2",
                "Output": "** 10",
                "Explanation": "**\n\n\nThere are 3 subsequences in `nums` which have length 2: `[4,3]`, `[4,-1]`, and `[3,-1]`. The sum of powers is `|4 - 3| + |4 - (-1)| + |3 - (-1)| = 10`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= n == nums.length <= 50`\n* `-108 <= nums[i] <= 108`\n* `2 <= k <= n`\n\n\nHints:\n    0. Sort <code>nums</code>.\n    1. There are at most <code>n<sup>2</sup></code> distinct differences.\n    2. For a particular difference <code>d</code>, let <code>dp[len][i][j]</code> be the number of subsequences of length <code>len</code> in the subarray <code>nums[0..i]</code> where the last element picked was at index <code>j</code>.\n    3. For each index, we can check if it can be picked if <code>nums[i] - nums[j] <= d</code>.\nSimilarQuestions: [1498, 1755]"
            }
        ]
    },
    {
        "Title": "Harshad Number",
        "slug": "harshad-number",
        "description": "An integer divisible by the **sum** of its digits is said to be a **Harshad** number. You are given an integer `x`. Return *the sum of the digits* of`x`if`x`is a **Harshad** number, otherwise, return`-1`*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "examples": [
            {
                "Input": "** x = 18",
                "Output": "** 9",
                "Explanation": "**\n\n\nThe sum of digits of `x` is `9`. `18` is divisible by `9`. So `18` is a Harshad number and the answer is `9`."
            },
            {
                "Input": "** x = 23",
                "Output": "** -1",
                "Explanation": "**\n\n\nThe sum of digits of `x` is `5`. `23` is not divisible by `5`. So `23` is not a Harshad number and the answer is `-1`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= x <= 100`"
            }
        ]
    },
    {
        "Title": "Water Bottles II",
        "slug": "water-bottles-ii",
        "description": "You are given two integers `numBottles` and `numExchange`.\n\n\n`numBottles` represents the number of full water bottles that you initially have. In one operation, you can perform one of the following operations:\n\n\n Drink any number of full water bottles turning them into empty bottles.\n Exchange `numExchange` empty bottles with one full water bottle. Then, increase `numExchange` by one.\n\n\nNote that you cannot exchange multiple batches of empty bottles for the same value of `numExchange`. For example, if `numBottles == 3` and `numExchange == 1`, you cannot exchange `3` empty water bottles for `3` full bottles.\n\n\nReturn *the **maximum** number of water bottles you can drink*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Math",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** numBottles = 13, numExchange = 6",
                "Output": "** 15",
                "Explanation": "** The table above shows the number of full water bottles, empty water bottles, the value of numExchange, and the number of bottles drunk."
            },
            {
                "Input": "** numBottles = 10, numExchange = 3",
                "Output": "** 13",
                "Explanation": "** The table above shows the number of full water bottles, empty water bottles, the value of numExchange, and the number of bottles drunk."
            }
        ]
    },
    {
        "Title": "Count Alternating Subarrays",
        "slug": "count-alternating-subarrays",
        "description": "You are given a binary array `nums`.\n\n\nWe call a subarray **alternating** if **no** two **adjacent** elements in the subarray have the **same** value.\n\n\nReturn *the number of alternating subarrays in* `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math"
        ],
        "examples": [
            {
                "Input": "** nums = [0,1,1,1]",
                "Output": "** 5",
                "Explanation": "**\n\n\nThe following subarrays are alternating: `[0]`, `[1]`, `[1]`, `[1]`, and `[0,1]`."
            },
            {
                "Input": "** nums = [1,0,1,0]",
                "Output": "** 10",
                "Explanation": "**\n\n\nEvery subarray of the array is alternating. There are 10 possible subarrays that we can choose.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `nums[i]` is either `0` or `1`.\n\n\nHints:\n    0. Try using dynamic programming.\n    1. Let <code>dp[i]</code> be the number of alternating subarrays ending at index <code>i</code>.\n    2. The final answer is the sum of <code>dp[i]</code> over all  indices <code>i</code> from <code>0</code> to <code>n - 1</code>."
            }
        ]
    },
    {
        "Title": "Minimize Manhattan Distances",
        "slug": "minimize-manhattan-distances",
        "description": "You are given a array `points` representing integer coordinates of some points on a 2D plane, where `points[i] = [xi, yi]`.\n\n\nThe distance between two points is defined as their Manhattan distance.\n\n\nReturn *the **minimum** possible value for **maximum** distance between any two points by removing exactly one point*.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Geometry",
            "Sorting",
            "Ordered Set"
        ],
        "examples": [
            {
                "Input": "** points = [[3,10],[5,15],[10,2],[4,4]]",
                "Output": "** 12",
                "Explanation": "**\n\n\nThe maximum distance after removing each point is the following:\n\n\n* After removing the 0th point the maximum distance is between points (5, 15) and (10, 2), which is `|5 - 10| + |15 - 2| = 18`.\n* After removing the 1st point the maximum distance is between points (3, 10) and (10, 2), which is `|3 - 10| + |10 - 2| = 15`.\n* After removing the 2nd point the maximum distance is between points (5, 15) and (4, 4), which is `|5 - 4| + |15 - 4| = 12`.\n* After removing the 3rd point the maximum distance is between points (5, 15) and (10, 2), which is `|5 - 10| + |15 - 2| = 18`.\n\n\n12 is the minimum possible maximum distance between any two points after removing exactly one point."
            },
            {
                "Input": "** points = [[1,1],[1,1],[1,1]]",
                "Output": "** 0",
                "Explanation": "**\n\n\nRemoving any of the points results in the maximum distance between any two points of 0.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `3 <= points.length <= 105`\n* `points[i].length == 2`\n* `1 <= points[i][0], points[i][1] <= 108`\n\n\nHints:\n    0. Notice that the Manhattan distance between two points <code>[x<sub>i</sub>, y<sub>i</sub>]</code> and <code>[x<sub>j</sub>, y<sub>j</sub>] is <code> max({x<sub>i</sub> - x<sub>j</sub> + y<sub>i</sub> - y<sub>j</sub>, x<sub>i</sub> - x<sub>j</sub> - y<sub>i</sub> + y<sub>j</sub>, - x<sub>i</sub> + x<sub>j</sub> + y<sub>i</sub> - y<sub>j</sub>, - x<sub>i</sub> + x<sub>j</sub> - y<sub>i</sub> + y<sub>j</sub>})</code></code>.\n    1. If you replace points as <code>[x<sub>i</sub> - y<sub>i</sub>, x<sub>i</sub> + y<sub>i</sub>]</code> then the Manhattan distance is <code>max(max(x<sub>i</sub>) - min(x<sub>i</sub>), max(y<sub>i</sub>) - min(y<sub>i</sub>))</code> over all <code>i</code>.\n    2. After those observations, the problem just becomes a simulation. Create multiset of points <code>[x<sub>i</sub> - y<sub>i</sub>, x<sub>i</sub> + y<sub>i</sub>]</code>, you can iterate on a point you might remove and get the maximum Manhattan distance over all other points."
            }
        ]
    },
    {
        "Title": "Longest Strictly Increasing or Strictly Decreasing Subarray",
        "slug": "longest-strictly-increasing-or-strictly-decreasing-subarray",
        "description": "You are given an array of integers `nums`. Return *the length of the **longest** subarray of* `nums` *which is either **strictly increasing** or **strictly decreasing***.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [1,4,3,3,2]",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe strictly increasing subarrays of `nums` are `[1]`, `[2]`, `[3]`, `[3]`, `[4]`, and `[1,4]`.\n\n\nThe strictly decreasing subarrays of `nums` are `[1]`, `[2]`, `[3]`, `[3]`, `[4]`, `[3,2]`, and `[4,3]`.\n\n\nHence, we return `2`."
            },
            {
                "Input": "** nums = [3,3,3,3]",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe strictly increasing subarrays of `nums` are `[3]`, `[3]`, `[3]`, and `[3]`.\n\n\nThe strictly decreasing subarrays of `nums` are `[3]`, `[3]`, `[3]`, and `[3]`.\n\n\nHence, we return `1`."
            },
            {
                "Input": "** nums = [3,2,1]",
                "Output": "** 3",
                "Explanation": "**\n\n\nThe strictly increasing subarrays of `nums` are `[3]`, `[2]`, and `[1]`.\n\n\nThe strictly decreasing subarrays of `nums` are `[3]`, `[2]`, `[1]`, `[3,2]`, `[2,1]`, and `[3,2,1]`.\n\n\nHence, we return `3`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 50`\n* `1 <= nums[i] <= 50`"
            }
        ]
    },
    {
        "Title": "Lexicographically Smallest String After Operations With Constraint",
        "slug": "lexicographically-smallest-string-after-operations-with-constraint",
        "description": "You are given a string `s` and an integer `k`.\n\n\nDefine a function `distance(s1, s2)` between two strings `s1` and `s2` of the same length `n` as:\n\n\n The **sum** of the **minimum distance** between `s1[i]` and `s2[i]` when the characters from `'a'` to `'z'` are placed in a **cyclic** order, for all `i` in the range `[0, n - 1]`.\n\n\nFor example, `distance(\"ab\", \"cd\") == 4`, and `distance(\"a\", \"z\") == 1`.\n\n\nYou can **change** any letter of `s` to **any** other lowercase English letter, **any** number of times.\n\n\nReturn a string denoting the **lexicographically smallest** string `t` you can get after some changes, such that `distance(s, t) <= k`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String",
            "Greedy"
        ],
        "examples": [
            {
                "Input": "** s = \"zbbz\", k = 3",
                "Output": "** \"aaaz\"",
                "Explanation": "**\n\n\nChange `s` to `\"aaaz\"`. The distance between `\"zbbz\"` and `\"aaaz\"` is equal to `k = 3`."
            },
            {
                "Input": "** s = \"xaxcd\", k = 4",
                "Output": "** \"aawcd\"",
                "Explanation": "**\n\n\nThe distance between \"xaxcd\" and \"aawcd\" is equal to k = 4."
            },
            {
                "Input": "** s = \"lol\", k = 0",
                "Output": "** \"lol\"",
                "Explanation": "**\n\n\nIt's impossible to change any character as `k = 0`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 100`\n* `0 <= k <= 2000`\n* `s` consists only of lowercase English letters.\n\n\nHints:\n    0. The problem can be approached greedily.\n    1. For each index in order from <code>0</code> to <code>n - 1</code>, we try all letters from <code>'a'</code> to <code>'z'</code>, selecting the first one as long as the current total distance accumulated is not larger than <code>k</code>.\nSimilarQuestions: [2734]"
            }
        ]
    },
    {
        "Title": "Minimum Operations to Make Median of Array Equal to K",
        "slug": "minimum-operations-to-make-median-of-array-equal-to-k",
        "description": "You are given an integer array `nums` and a **non-negative** integer `k`. In one operation, you can increase or decrease any element by 1.\n\n\nReturn the **minimum** number of operations needed to make the **median** of `nums` *equal* to `k`.\n\n\nThe median of an array is defined as the middle element of the array when it is sorted in non-decreasing order. If there are two choices for a median, the larger of the two values is taken.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** nums = [2,5,6,8,5], k = 4",
                "Output": "** 2",
                "Explanation": "**\n\n\nWe can subtract one from `nums[1]` and `nums[4]` to obtain `[2, 4, 6, 8, 4]`. The median of the resulting array is equal to `k`."
            },
            {
                "Input": "** nums = [2,5,6,8,5], k = 7",
                "Output": "** 3",
                "Explanation": "**\n\n\nWe can add one to `nums[1]` twice and add one to `nums[2]` once to obtain `[2, 7, 7, 8, 5]`."
            },
            {
                "Input": "** nums = [1,2,3,4,5,6], k = 4",
                "Output": "** 0",
                "Explanation": "**\n\n\nThe median of the array is already equal to `k`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 2 * 105`\n* `1 <= nums[i] <= 109`\n* `1 <= k <= 109`\n\n\nHints:\n    0. Sort <code>nums</code> in non-descending order.\n    1. For all the smaller values on the left side of the median, change them to <code>k</code> if they are larger than <code>k</code>.\n    2. For all the larger values on the right side of the median, change them to <code>k</code> if they are smaller than <code>k</code>.\nSimilarQuestions: [295, 480]"
            }
        ]
    },
    {
        "Title": "Minimum Cost Walk in Weighted Graph",
        "slug": "minimum-cost-walk-in-weighted-graph",
        "description": "There is an undirected weighted graph with `n` vertices labeled from `0` to `n - 1`.\n\n\nYou are given the integer `n` and an array `edges`, where `edges[i] = [ui, vi, wi]` indicates that there is an edge between vertices `ui` and `vi` with a weight of `wi`.\n\n\nA walk on a graph is a sequence of vertices and edges. The walk starts and ends with a vertex, and each edge connects the vertex that comes before it and the vertex that comes after it. It's important to note that a walk may visit the same edge or vertex more than once.\n\n\nThe **cost** of a walk starting at node `u` and ending at node `v` is defined as the bitwise `AND` of the weights of the edges traversed during the walk. In other words, if the sequence of edge weights encountered during the walk is `w0, w1, w2, ..., wk`, then the cost is calculated as `w0 & w1 & w2 & ... & wk`, where `&` denotes the bitwise `AND` operator.\n\n\nYou are also given a 2D array `query`, where `query[i] = [si, ti]`. For each query, you need to find the minimum cost of the walk starting at vertex `si` and ending at vertex `ti`. If there exists no such walk, the answer is `-1`.\n\n\nReturn *the array* `answer`*, where* `answer[i]` *denotes the **minimum** cost of a walk for query* `i`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Bit Manipulation",
            "Union Find",
            "Graph"
        ],
        "examples": [
            {
                "Input": "** n = 5, edges = [[0,1,7],[1,3,7],[1,2,1]], query = [[0,3],[3,4]]",
                "Output": "** [1,-1]",
                "Explanation": "**\n\n\n![](https://assets.leetcode.com/uploads/2024/01/31/q4_example1-1.png)\nTo achieve the cost of 1 in the first query, we need to move on the following edges: `0->1` (weight 7), `1->2` (weight 1), `2->1` (weight 1), `1->3` (weight 7).\n\n\nIn the second query, there is no walk between nodes 3 and 4, so the answer is -1."
            },
            {
                "Input": "** n = 3, edges = [[0,2,7],[0,1,15],[1,2,6],[1,2,1]], query = [[1,2]]",
                "Output": "** [0]",
                "Explanation": "**\n\n\n![](https://assets.leetcode.com/uploads/2024/01/31/q4_example2e.png)\nTo achieve the cost of 0 in the first query, we need to move on the following edges: `1->2` (weight 1), `2->1` (weight 6), `1->2` (weight 1).\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= n <= 105`\n* `0 <= edges.length <= 105`\n* `edges[i].length == 3`\n* `0 <= ui, vi <= n - 1`\n* `ui != vi`\n* `0 <= wi <= 105`\n* `1 <= query.length <= 105`\n* `query[i].length == 2`\n* `0 <= si, ti <= n - 1`\n* `si !=\u00a0ti`\n\n\nHints:\n    0. The intended solution uses Disjoint Set Union.\n    1. Notice that, if <code>u</code> and <code>v</code> are not connected then the answer is <code>-1</code>, otherwise we can use all the edges from the connected component where both belong to."
            }
        ]
    },
    {
        "Title": "Score of a String",
        "slug": "score-of-a-string",
        "description": "You are given a string `s`. The **score** of a string is defined as the sum of the absolute difference between the **ASCII** values of adjacent characters.\n\n\nReturn the **score** of`s`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"hello\"",
                "Output": "** 13",
                "Explanation": "**\n\n\nThe **ASCII** values of the characters in `s` are: `'h' = 104`, `'e' = 101`, `'l' = 108`, `'o' = 111`. So, the score of `s` would be `|104 - 101| + |101 - 108| + |108 - 108| + |108 - 111| = 3 + 7 + 0 + 3 = 13`."
            },
            {
                "Input": "** s = \"zaz\"",
                "Output": "** 50",
                "Explanation": "**\n\n\nThe **ASCII** values of the characters in `s` are: `'z' = 122`, `'a' = 97`. So, the score of `s` would be `|122 - 97| + |97 - 122| = 25 + 25 = 50`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= s.length <= 100`\n* `s` consists only of lowercase English letters."
            }
        ]
    },
    {
        "Title": "Minimum Time to Visit Disappearing Nodes",
        "slug": "minimum-time-to-visit-disappearing-nodes",
        "description": "There is an undirected graph of `n` nodes. You are given a 2D array `edges`, where `edges[i] = [ui, vi, lengthi]` describes an edge between node `ui` and node `vi` with a traversal time of `lengthi` units.\n\n\nAdditionally, you are given an array `disappear`, where `disappear[i]` denotes the time when the node `i` disappears from the graph and you won't be able to visit it.\n\n\nNotice** that the graph might be disconnected and might contain multiple edges.\n\n\nReturn the array `answer`, with `answer[i]` denoting the **minimum** units of time required to reach node `i` from node 0. If node `i` is **unreachable** from node 0 then `answer[i]` is `-1`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Graph",
            "Heap (Priority Queue)",
            "Shortest Path"
        ],
        "examples": [
            {
                "Input": "** n = 2, edges = [[0,1,1]], disappear = [1,1]",
                "Output": "** [0,-1]",
                "Explanation": "**\n\n\nExactly when we reach node 1, it disappears.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 5 * 104`\n* `0 <= edges.length <= 105`\n* `edges[i] == [ui, vi, lengthi]`\n* `0 <= ui, vi <= n - 1`\n* `1 <= lengthi <= 105`\n* `disappear.length == n`\n* `1 <= disappear[i] <= 105`"
            }
        ]
    },
    {
        "Title": "Find the Number of Subarrays Where Boundary Elements Are Maximum",
        "slug": "find-the-number-of-subarrays-where-boundary-elements-are-maximum",
        "description": "You are given an array of **positive** integers `nums`.\n\n\nReturn the number of subarrays of `nums`, where the **first** and the **last** elements of the subarray are *equal* to the **largest** element in the subarray.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Stack",
            "Monotonic Stack"
        ],
        "examples": [
            {
                "Input": "** nums = [1,4,3,3,2]",
                "Output": "** 6",
                "Explanation": "**\n\n\nThere are 6 subarrays which have the first and the last elements equal to the largest element of the subarray:\n\n\n* subarray `[**1**,4,3,3,2]`, with its largest element 1. The first element is 1 and the last element is also 1.\n* subarray `[1,**4**,3,3,2]`, with its largest element 4. The first element is 4 and the last element is also 4.\n* subarray `[1,4,**3**,3,2]`, with its largest element 3. The first element is 3 and the last element is also 3.\n* subarray `[1,4,3,**3**,2]`, with its largest element 3. The first element is 3 and the last element is also 3.\n* subarray `[1,4,3,3,**2**]`, with its largest element 2. The first element is 2 and the last element is also 2.\n* subarray `[1,4,**3,3**,2]`, with its largest element 3. The first element is 3 and the last element is also 3.\n\n\nHence, we return 6."
            },
            {
                "Input": "** nums = [3,3,3]",
                "Output": "** 6",
                "Explanation": "**\n\n\nThere are 6 subarrays which have the first and the last elements equal to the largest element of the subarray:\n\n\n* subarray `[**3**,3,3]`, with its largest element 3. The first element is 3 and the last element is also 3.\n* subarray `[3,**3**,3]`, with its largest element 3. The first element is 3 and the last element is also 3.\n* subarray `[3,3,**3**]`, with its largest element 3. The first element is 3 and the last element is also 3.\n* subarray `[**3,3**,3]`, with its largest element 3. The first element is 3 and the last element is also 3.\n* subarray `[3,**3,3**]`, with its largest element 3. The first element is 3 and the last element is also 3.\n* subarray `[**3,3,3**]`, with its largest element 3. The first element is 3 and the last element is also 3.\n\n\nHence, we return 6."
            },
            {
                "Input": "** nums = [1]",
                "Output": "** 1",
                "Explanation": "**\n\n\nThere is a single subarray of `nums` which is `[**1**]`, with its largest element 1. The first element is 1 and the last element is also 1.\n\n\nHence, we return 1.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\nHints:\n    0. For each element <code>nums[i]</code>, we can count the number of valid subarrays ending with it.\n    1. For each index <code>i</code>, find the nearest index <code>j</code> on its left <code>(j < i)</code> such that <code>nums[j] < nums[i]</code>. This can be done via a monotonic stack.\n    2. For each index <code>i</code>, find the number of indices <code>k</code> in the window <code>[j + 1, i]</code> such that <code>nums[k] == nums[i]</code>, this is the number of the valid subarrays ending with <code>nums[i]</code>. This can be done by sliding window.\n    3. Sum the answer of all the indices <code>i</code> to get the final result.\n    4. Is it possible to use DSU as an alternate solution?\nSimilarQuestions: [795, 2444, 2962]"
            }
        ]
    },
    {
        "Title": "Latest Time You Can Obtain After Replacing Characters",
        "slug": "latest-time-you-can-obtain-after-replacing-characters",
        "description": "You are given a string `s` representing a 12-hour format time where some of the digits (possibly none) are replaced with a `\"?\"`.\n\n\n12-hour times are formatted as `\"HH:MM\"`, where `HH` is between `00` and `11`, and `MM` is between `00` and `59`. The earliest 12-hour time is `00:00`, and the latest is `11:59`.\n\n\nYou have to replace **all** the `\"?\"` characters in `s` with digits such that the time we obtain by the resulting string is a **valid** 12-hour format time and is the **latest** possible.\n\n\nReturn *the resulting string*.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** s = \"1?:?4\"",
                "Output": "** \"11:54\"",
                "Explanation": "** The latest 12-hour format time we can achieve by replacing `\"?\"` characters is `\"11:54\"`."
            },
            {
                "Input": "** s = \"0?:5?\"",
                "Output": "** \"09:59\"",
                "Explanation": "** The latest 12-hour format time we can achieve by replacing `\"?\"` characters is `\"09:59\"`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `s.length == 5`\n* `s[2]` is equal to the character `\":\"`.\n* All characters except `s[2]` are digits or `\"?\"` characters.\n* The input is generated such that there is **at least** one time between `\"00:00\"` and `\"11:59\"` that you can obtain after replacing the `\"?\"` characters.\n\n\nHints:\n    0. Try using a brute force approach.\n    1. Iterate over all possible times that can be generated from the string and find the latest one.\nSimilarQuestions: [1736]"
            }
        ]
    },
    {
        "Title": "Maximum Prime Difference",
        "slug": "maximum-prime-difference",
        "description": "You are given an integer array `nums`.\n\n\nReturn an integer that is the **maximum** distance between the **indices** of two (not necessarily different) prime numbers in `nums`*.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** nums = [4,2,9,5,3]",
                "Output": "** 3",
                "Explanation": "** `nums[1]`, `nums[3]`, and `nums[4]` are prime. So the answer is `|4 - 1| = 3`."
            },
            {
                "Input": "** nums = [4,8,2,8]",
                "Output": "** 0",
                "Explanation": "** `nums[2]` is prime. Because there is just one prime number, the answer is `|2 - 2| = 0`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 3 * 105`\n* `1 <= nums[i] <= 100`\n* The input is generated such that the number of prime numbers in the `nums` is at least one.\n\n\nHints:\n    0. Find all prime numbers in the <code>nums</code>.\n    1. Find the first and the last prime number in the <code>nums</code>."
            }
        ]
    },
    {
        "Title": "Kth Smallest Amount With Single Denomination Combination",
        "slug": "kth-smallest-amount-with-single-denomination-combination",
        "description": "You are given an integer array `coins` representing coins of different denominations and an integer `k`.\n\n\nYou have an infinite number of coins of each denomination. However, you are **not allowed** to combine coins of different denominations.\n\n\nReturn the `kth` **smallest** amount that can be made using these coins.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Binary Search",
            "Bit Manipulation",
            "Combinatorics",
            "Number Theory"
        ],
        "examples": [
            {
                "Input": "** coins = [3,6,9], k = 3",
                "Output": "**  9",
                "Explanation": "** The given coins can make the following amounts:  \n\nCoin 3 produces multiples of 3: 3, 6, 9, 12, 15, etc.  \n\nCoin 6 produces multiples of 6: 6, 12, 18, 24, etc.  \n\nCoin 9 produces multiples of 9: 9, 18, 27, 36, etc.  \n\nAll of the coins combined produce: 3, 6, **9**, 12, 15, etc."
            },
            {
                "Input": "** coins = [5,2], k = 7",
                "Output": "** 12",
                "Explanation": "** The given coins can make the following amounts:  \n\nCoin 5 produces multiples of 5: 5, 10, 15, 20, etc.  \n\nCoin 2 produces multiples of 2: 2, 4, 6, 8, 10, 12, etc.  \n\nAll of the coins combined produce: 2, 4, 5, 6, 8, 10, **12**, 14, 15, etc.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= coins.length <= 15`\n* `1 <= coins[i] <= 25`\n* `1 <= k <= 2 * 109`\n* `coins` contains pairwise distinct integers.\n\n\nHints:\n    0. Binary search the answer <code>x</code>.\n    1. Use the inclusion-exclusion principle to count the number of distinct amounts that can be made up to <code>x</code>.\nSimilarQuestions: [668]"
            }
        ]
    },
    {
        "Title": "Count the Number of Special Characters I",
        "slug": "count-the-number-of-special-characters-i",
        "description": "You are given a string `word`. A letter is called **special** if it appears **both** in lowercase and uppercase in `word`.\n\n\nReturn the number of**special** letters in`word`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** word = \"aaAbcBC\"",
                "Output": "** 3",
                "Explanation": "**\n\n\nThe special characters in `word` are `'a'`, `'b'`, and `'c'`."
            },
            {
                "Input": "** word = \"abc\"",
                "Output": "** 0",
                "Explanation": "**\n\n\nNo character in `word` appears in uppercase."
            },
            {
                "Input": "** word = \"abBCab\"",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe only special character in `word` is `'b'`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= word.length <= 50`\n* `word` consists of only lowercase and uppercase English letters.\n\n\nSimilarQuestions: [520]"
            }
        ]
    },
    {
        "Title": "Count the Number of Special Characters II",
        "slug": "count-the-number-of-special-characters-ii",
        "description": "You are given a string `word`. A letter\u00a0`c` is called **special** if it appears **both** in lowercase and uppercase in `word`, and **every** lowercase occurrence of `c` appears before the **first** uppercase occurrence of `c`.\n\n\nReturn the number of**special** lettersin`word`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** word = \"aaAbcBC\"",
                "Output": "** 3",
                "Explanation": "**\n\n\nThe special characters are `'a'`, `'b'`, and `'c'`."
            },
            {
                "Input": "** word = \"abc\"",
                "Output": "** 0",
                "Explanation": "**\n\n\nThere are no special characters in `word`."
            },
            {
                "Input": "** word = \"AbBCab\"",
                "Output": "** 0",
                "Explanation": "**\n\n\nThere are no special characters in `word`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= word.length <= 2 * 105`\n* `word` consists of only lowercase and uppercase English letters.\n\n\nSimilarQuestions: [520]"
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Satisfy Conditions",
        "slug": "minimum-number-of-operations-to-satisfy-conditions",
        "description": "You are given a 2D matrix `grid` of size `m x n`. In one **operation**, you can change the value of **any** cell to **any** non-negative number. You need to perform some **operations** such that each cell `grid[i][j]` is:\n\n\n Equal to the cell below it, i.e. `grid[i][j] == grid[i + 1][j]` (if it exists).\n Different from the cell to its right, i.e. `grid[i][j] != grid[i][j + 1]` (if it exists).\n\n\nReturn the **minimum** number of operations needed.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,0,2],[1,0,2]]",
                "Output": "** 0",
                "Explanation": "**\n\n\n**![](https://assets.leetcode.com/uploads/2024/04/15/examplechanged.png)**\n\n\nAll the cells in the matrix already satisfy the properties."
            },
            {
                "Input": "** grid = [[1,1,1],[0,0,0]]",
                "Output": "** 3",
                "Explanation": "**\n\n\n**![](https://assets.leetcode.com/uploads/2024/03/27/example21.png)**\n\n\nThe matrix becomes `[[1,0,1],[1,0,1]]` which satisfies the properties, by doing these 3 operations:\n\n\n* Change `grid[1][0]` to 1.\n* Change `grid[0][1]` to 0.\n* Change `grid[1][2]` to 1."
            },
            {
                "Input": "** grid = [[1],[2],[3]]",
                "Output": "** 2",
                "Explanation": "**\n\n\n![](https://assets.leetcode.com/uploads/2024/03/31/changed.png)\n\n\nThere is a single column. We can change the value to 1 in each cell using 2 operations.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n, m <= 1000`\n* `0 <= grid[i][j] <= 9`\n\n\nSimilarQuestions: [135, 575, 2144]"
            }
        ]
    },
    {
        "Title": "Make a Square with the Same Color",
        "slug": "make-a-square-with-the-same-color",
        "description": "You are given a 2D matrix `grid` of size `3 x 3` consisting only of characters `'B'` and `'W'`. Character `'W'` represents the white color, and character `'B'` represents the black color.\n\n\nYour task is to change the color of **at most one** cell so that the matrix has a `2 x 2` square where all cells are of the same color.\n\n\nReturn `true` if it is possible to create a `2 x 2` square of the same color, otherwise, return `false`.\n\n\n\u00a0\n\n\n.grid-container {\n display: grid;\n grid-template-columns: 30px 30px 30px;\n padding: 10px;\n}\n.grid-item {\n background-color: black;\n border: 1px solid gray;\n height: 30px;\n font-size: 30px;\n text-align: center;\n}\n.grid-item-white {\n background-color: white;\n}\n\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** grid = [[\"B\",\"W\",\"B\"],[\"B\",\"W\",\"W\"],[\"B\",\"W\",\"B\"]]",
                "Output": "** true",
                "Explanation": "**\n\n\nIt can be done by changing the color of the `grid[0][2]`."
            },
            {
                "Input": "** grid = [[\"B\",\"W\",\"B\"],[\"W\",\"B\",\"W\"],[\"B\",\"W\",\"B\"]]",
                "Output": "** false",
                "Explanation": "**\n\n\nIt cannot be done by changing at most one cell."
            },
            {
                "Input": "** grid = [[\"B\",\"W\",\"B\"],[\"B\",\"W\",\"W\"],[\"B\",\"W\",\"W\"]]",
                "Output": "** true",
                "Explanation": "**\n\n\nThe `grid` already contains a `2 x 2` square of the same color.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `grid.length == 3`\n* `grid[i].length == 3`\n* `grid[i][j]` is either `'W'` or `'B'`."
            }
        ]
    },
    {
        "Title": "Find All Possible Stable Binary Arrays I",
        "slug": "find-all-possible-stable-binary-arrays-i",
        "description": "You are given 3 positive integers `zero`, `one`, and `limit`.\n\n\nA binary array `arr` is called **stable** if:\n\n\n The number of occurrences of 0 in `arr` is **exactly** `zero`.\n The number of occurrences of 1 in `arr` is **exactly** `one`.\n Each subarray of `arr` with a size greater than `limit` must contain **both** 0 and 1.\n\n\nReturn the *total* number of **stable** binary arrays.\n\n\nSince the answer may be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Dynamic Programming",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** zero = 1, one = 1, limit = 2",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe two possible stable binary arrays are `[1,0]` and `[0,1]`, as both arrays have a single 0 and a single 1, and no subarray has a length greater than 2."
            },
            {
                "Input": "** zero = 1, one = 2, limit = 1",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe only possible stable binary array is `[1,0,1]`.\n\n\nNote that the binary arrays `[1,1,0]` and `[0,1,1]` have subarrays of length 2 with identical elements, hence, they are not stable."
            },
            {
                "Input": "** zero = 3, one = 3, limit = 2",
                "Output": "** 14",
                "Explanation": "**\n\n\nAll the possible stable binary arrays are `[0,0,1,0,1,1]`, `[0,0,1,1,0,1]`, `[0,1,0,0,1,1]`, `[0,1,0,1,0,1]`, `[0,1,0,1,1,0]`, `[0,1,1,0,0,1]`, `[0,1,1,0,1,0]`, `[1,0,0,1,0,1]`, `[1,0,0,1,1,0]`, `[1,0,1,0,0,1]`, `[1,0,1,0,1,0]`, `[1,0,1,1,0,0]`, `[1,1,0,0,1,0]`, and `[1,1,0,1,0,0]`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= zero, one, limit <= 200`\n\n\nHints:\n    0. Let <code>dp[a][b][c = 0/1][d]</code> be the number of stable arrays with exactly <code>a</code> 0s, <code>b</code> 1s and consecutive <code>d</code> value of <code>c</code>\u2019s at the end.\n    1. Try each case by appending a 0/1 at last to get the inductions.\nSimilarQuestions: [525, 930]"
            }
        ]
    },
    {
        "Title": "Find All Possible Stable Binary Arrays II",
        "slug": "find-all-possible-stable-binary-arrays-ii",
        "description": "You are given 3 positive integers `zero`, `one`, and `limit`.\n\n\nA binary array `arr` is called **stable** if:\n\n\n The number of occurrences of 0 in `arr` is **exactly** `zero`.\n The number of occurrences of 1 in `arr` is **exactly** `one`.\n Each subarray of `arr` with a size greater than `limit` must contain **both** 0 and 1.\n\n\nReturn the *total* number of **stable** binary arrays.\n\n\nSince the answer may be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** zero = 1, one = 1, limit = 2",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe two possible stable binary arrays are `[1,0]` and `[0,1]`."
            },
            {
                "Input": "** zero = 1, one = 2, limit = 1",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe only possible stable binary array is `[1,0,1]`."
            },
            {
                "Input": "** zero = 3, one = 3, limit = 2",
                "Output": "** 14",
                "Explanation": "**\n\n\nAll the possible stable binary arrays are `[0,0,1,0,1,1]`, `[0,0,1,1,0,1]`, `[0,1,0,0,1,1]`, `[0,1,0,1,0,1]`, `[0,1,0,1,1,0]`, `[0,1,1,0,0,1]`, `[0,1,1,0,1,0]`, `[1,0,0,1,0,1]`, `[1,0,0,1,1,0]`, `[1,0,1,0,0,1]`, `[1,0,1,0,1,0]`, `[1,0,1,1,0,0]`, `[1,1,0,0,1,0]`, and `[1,1,0,1,0,0]`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= zero, one, limit <= 1000`\n\n\nHints:\n    0. Let <code>dp[x][y][z = 0/1]</code> be the number of stable arrays with exactly <code>x</code> zeros, <code>y</code> ones, and the last element is <code>z</code>. (0 or 1).\r\n<code>dp[x][y][0] + dp[x][y][1]</code> is the answer for given <code>(x, y)</code>.\n    1. If we have already placed <code>x</code> 1 and <code>y</code> 0, if we place a group of <code>k</code> 0, the number of ways is <code>dp[x-k][y][1]</code>. We can place a group with size <code>i</code>, where <code>i</code> varies from 1 to <code>min(limit, zero - x)</code>.\r\nSimilarly, we can solve by placing a group of ones.\n    2. Speed up the calculation using prefix arrays to store the sum of <code>dp</code> states.\nSimilarQuestions: [525, 930]"
            }
        ]
    },
    {
        "Title": "Find the Integer Added to Array I",
        "slug": "find-the-integer-added-to-array-i",
        "description": "You are given two arrays of equal length, `nums1` and `nums2`.\n\n\nEach element in `nums1` has been increased (or decreased in the case of negative) by an integer, represented by the variable `x`.\n\n\nAs a result, `nums1` becomes **equal** to `nums2`. Two arrays are considered **equal** when they contain the same integers with the same frequencies.\n\n\nReturn the integer `x`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums1 = [2,6,4], nums2 = [9,7,5]",
                "Output": "** 3",
                "Explanation": "**\n\n\nThe integer added to each element of `nums1` is 3."
            },
            {
                "Input": "** nums1 = [10], nums2 = [5]",
                "Output": "** -5",
                "Explanation": "**\n\n\nThe integer added to each element of `nums1` is -5."
            },
            {
                "Input": "** nums1 = [1,1,1,1], nums2 = [1,1,1,1]",
                "Output": "** 0",
                "Explanation": "**\n\n\nThe integer added to each element of `nums1` is 0.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums1.length == nums2.length <= 100`\n* `0 <= nums1[i], nums2[i] <= 1000`\n* The test cases are generated in a way that there is an integer `x` such that `nums1` can become equal to `nums2` by adding `x` to each element of `nums1`.\n\n\nHints:\n    0. Notice that, after sorting both arrays, there should be a one-to-one correspondence between every element.\n    1. Thus <code>x = min(nums2) - min(nums1)</code>."
            }
        ]
    },
    {
        "Title": "Find the Integer Added to Array II",
        "slug": "find-the-integer-added-to-array-ii",
        "description": "You are given two integer arrays `nums1` and `nums2`.\n\n\nFrom `nums1` two elements have been removed, and all other elements have been increased (or decreased in the case of negative) by an integer, represented by the variable `x`.\n\n\nAs a result, `nums1` becomes **equal** to `nums2`. Two arrays are considered **equal** when they contain the same integers with the same frequencies.\n\n\nReturn the **minimum** possible integer`x`that achieves this equivalence.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Sorting",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** nums1 = [4,20,16,12,8], nums2 = [14,18,10]",
                "Output": "** -2",
                "Explanation": "**\n\n\nAfter removing elements at indices `[0,4]` and adding -2, `nums1` becomes `[18,14,10]`."
            },
            {
                "Input": "** nums1 = [3,5,5,3], nums2 = [7,7]",
                "Output": "** 2",
                "Explanation": "**\n\n\nAfter removing elements at indices `[0,3]` and adding 2, `nums1` becomes `[7,7]`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `3 <= nums1.length <= 200`\n* `nums2.length == nums1.length - 2`\n* `0 <= nums1[i], nums2[i] <= 1000`\n* The test cases are generated in a way that there is an integer `x` such that `nums1` can become equal to `nums2` by removing two elements and adding `x` to each element of `nums1`.\n\n\nHints:\n    0. Try all possibilities to remove 2 elements from <code>nums1</code>.\n    1. <code>x</code> should be equal to <code>min(nums2) - min(nums1)</code>, check it naively."
            }
        ]
    },
    {
        "Title": "Minimum Array End",
        "slug": "minimum-array-end",
        "description": "You are given two integers `n` and `x`. You have to construct an array of **positive** integers `nums` of size `n` where for every `0 <= i < n - 1`, `nums[i + 1]` is **greater than** `nums[i]`, and the result of the bitwise `AND` operation between all elements of `nums` is `x`.\n\n\nReturn the **minimum** possible value of `nums[n - 1]`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** n = 3, x = 4",
                "Output": "** 6",
                "Explanation": "**\n\n\n`nums` can be `[4,5,6]` and its last element is 6."
            },
            {
                "Input": "** n = 2, x = 7",
                "Output": "** 15",
                "Explanation": "**\n\n\n`nums` can be `[7,15]` and its last element is 15.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n, x <= 108`\n\n\nHints:\n    0. Each element of the array should be obtained by \u201cmerging\u201d <code>x</code> and <code>v</code> where <code>v = 0, 1, 2, \u2026(n - 1)</code>.\n    1. To merge <code>x</code> with another number <code>v</code>, keep the set bits of <code>x</code> untouched, for all the other bits, fill the set bits of <code>v</code> from right to left in order one by one.\n    2. So the final answer is the \u201cmerge\u201d of <code>x</code> and <code>n - 1</code>."
            }
        ]
    },
    {
        "Title": "Find the Median of the Uniqueness Array",
        "slug": "find-the-median-of-the-uniqueness-array",
        "description": "You are given an integer array `nums`. The **uniqueness array** of `nums` is the sorted array that contains the number of distinct elements of all the subarrays of `nums`. In other words, it is a sorted array consisting of `distinct(nums[i..j])`, for all `0 <= i <= j < nums.length`.\n\n\nHere, `distinct(nums[i..j])` denotes the number of distinct elements in the subarray that starts at index `i` and ends at index `j`.\n\n\nReturn the **median** of the **uniqueness array** of `nums`.\n\n\nNote** that the **median** of an array is defined as the middle element of the array when it is sorted in non-decreasing order. If there are two choices for a median, the **smaller** of the two values is taken.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Sliding Window"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe uniqueness array of `nums` is `[distinct(nums[0..0]), distinct(nums[1..1]), distinct(nums[2..2]), distinct(nums[0..1]), distinct(nums[1..2]), distinct(nums[0..2])]` which is equal to `[1, 1, 1, 2, 2, 3]`. The uniqueness array has a median of 1. Therefore, the answer is 1."
            },
            {
                "Input": "** nums = [3,4,3,4,5]",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe uniqueness array of `nums` is `[1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3]`. The uniqueness array has a median of 2. Therefore, the answer is 2."
            },
            {
                "Input": "** nums = [4,3,5,4]",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe uniqueness array of `nums` is `[1, 1, 1, 1, 2, 2, 2, 3, 3, 3]`. The uniqueness array has a median of 2. Therefore, the answer is 2.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n\n\nHints:\n    0. Binary search over the answer.\n    1. For a given <code>x</code>, you need to check if <code>x</code> is the median, to the left of the median, or to the right of the median. You can do that by counting the number of sub-arrays <code>nums[i\u2026j]</code> such that <code>distinct(num[i\u2026j]) <= x</code>.\n    2. Use the sliding window to solve the counting problem in the hint above.\nSimilarQuestions: [719, 2262]"
            }
        ]
    },
    {
        "Title": "Valid Word",
        "slug": "valid-word",
        "description": "A word is considered **valid** if:\n\n\n It contains a **minimum** of 3 characters.\n It contains only digits (0-9), and English letters (uppercase and lowercase).\n It includes **at least** one **vowel**.\n It includes **at least** one **consonant**.\n\n\nYou are given a string `word`.\n\n\nReturn `true` if `word` is valid, otherwise, return `false`.\n\n\nNotes:\n\n\n `'a'`, `'e'`, `'i'`, `'o'`, `'u'`, and their uppercases are **vowels**.\n A **consonant** is an English letter that is not a vowel.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** word = \"234Adas\"",
                "Output": "** true",
                "Explanation": "**\n\n\nThis word satisfies the conditions."
            },
            {
                "Input": "** word = \"b3\"",
                "Output": "** false",
                "Explanation": "**\n\n\nThe length of this word is fewer than 3, and does not have a vowel."
            },
            {
                "Input": "** word = \"a3$e\"",
                "Output": "** false",
                "Explanation": "**\n\n\nThis word contains a `'$'` character and does not have a consonant.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= word.length <= 20`\n* `word` consists of English uppercase and lowercase letters, digits, `'@'`, `'#'`, and `'$'`."
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Make Word K-Periodic",
        "slug": "minimum-number-of-operations-to-make-word-k-periodic",
        "description": "You are given a string `word` of size `n`, and an integer `k` such that `k` divides `n`.\n\n\nIn one operation, you can pick any two indices `i` and `j`, that are divisible by `k`, then replace the substring of length `k` starting at `i` with the substring of length `k` starting at `j`. That is, replace the substring `word[i..i + k - 1]` with the substring `word[j..j + k - 1]`.\n\n\nReturn *the **minimum** number of operations required to make* `word` ***k-periodic***.\n\n\nWe say that `word` is **k-periodic** if there is some string `s` of length `k` such that `word` can be obtained by concatenating `s` an arbitrary number of times. For example, if `word == \u201cababab\u201d`, then `word` is 2-periodic for `s = \"ab\"`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** word = \"leetcodeleet\", k = 4",
                "Output": "** 1",
                "Explanation": "**\n\n\nWe can obtain a 4-periodic string by picking i = 4 and j = 0. After this operation, word becomes equal to \"leetleetleet\"."
            },
            {
                "Input": "** word = \"leetcoleet\", k = 2",
                "Output": "** 3",
                "Explanation": "**\n\n\nWe can obtain a 2-periodic string by applying the operations in the table below.\n\n\n\n\n| i | j | word |\n| --- | --- | --- |\n| 0 | 2 | etetcoleet |\n| 4 | 0 | etetetleet |\n| 6 | 0 | etetetetet |\n\n\n\n\n\u00a0\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == word.length <= 105`\n* `1 <= k <= word.length`\n* `k` divides `word.length`.\n* `word` consists only of lowercase English letters.\n\n\nHints:\n    0. Calculate the frequency of each substring of length <code>k</code> that starts at an index that is divisible by <code>k</code>.\n    1. The period of the final string will be the substring with the highest frequency.\nSimilarQuestions: [1668]"
            }
        ]
    },
    {
        "Title": "Minimum Length of Anagram Concatenation",
        "slug": "minimum-length-of-anagram-concatenation",
        "description": "You are given a string `s`, which is known to be a concatenation of **anagrams** of some string `t`.\n\n\nReturn the **minimum** possible length of the string `t`.\n\n\nAn **anagram** is formed by rearranging the letters of a string. For example, \"aab\", \"aba\", and, \"baa\" are anagrams of \"aab\".\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** s = \"abba\"",
                "Output": "** 2",
                "Explanation": "**\n\n\nOne possible string `t` could be `\"ba\"`."
            },
            {
                "Input": "** s = \"cdef\"",
                "Output": "** 4",
                "Explanation": "**\n\n\nOne possible string `t` could be `\"cdef\"`, notice that `t` can be equal to `s`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` consist only of lowercase English letters.\n\n\nHints:\n    0. The answer should be a divisor of <code>s.length</code>.\n    1. Check each candidate naively."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Equalize Array",
        "slug": "minimum-cost-to-equalize-array",
        "description": "You are given an integer array `nums` and two integers `cost1` and `cost2`. You are allowed to perform **either** of the following operations **any** number of times:\n\n\n Choose an index `i` from `nums` and **increase** `nums[i]` by `1` for a cost of `cost1`.\n Choose two **different** indices `i`, `j`, from `nums` and **increase** `nums[i]` and `nums[j]` by `1` for a cost of `cost2`.\n\n\nReturn the **minimum** **cost** required to make all elements in the array **equal***.* \n\n\nSince the answer may be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Enumeration"
        ],
        "examples": [
            {
                "Input": "** nums = [4,1], cost1 = 5, cost2 = 2",
                "Output": "** 15",
                "Explanation": "** \n\n\nThe following operations can be performed to make the values equal:\n\n\n* Increase `nums[1]` by 1 for a cost of 5. `nums` becomes `[4,2]`.\n* Increase `nums[1]` by 1 for a cost of 5. `nums` becomes `[4,3]`.\n* Increase `nums[1]` by 1 for a cost of 5. `nums` becomes `[4,4]`.\n\n\nThe total cost is 15."
            },
            {
                "Input": "** nums = [2,3,3,3,5], cost1 = 2, cost2 = 1",
                "Output": "** 6",
                "Explanation": "** \n\n\nThe following operations can be performed to make the values equal:\n\n\n* Increase `nums[0]` and `nums[1]` by 1 for a cost of 1. `nums` becomes `[3,4,3,3,5]`.\n* Increase `nums[0]` and `nums[2]` by 1 for a cost of 1. `nums` becomes `[4,4,4,3,5]`.\n* Increase `nums[0]` and `nums[3]` by 1 for a cost of 1. `nums` becomes `[5,4,4,4,5]`.\n* Increase `nums[1]` and `nums[2]` by 1 for a cost of 1. `nums` becomes `[5,5,5,4,5]`.\n* Increase `nums[3]` by 1 for a cost of 2. `nums` becomes `[5,5,5,5,5]`.\n\n\nThe total cost is 6."
            },
            {
                "Input": "** nums = [3,5,3], cost1 = 1, cost2 = 3",
                "Output": "** 4",
                "Explanation": "**\n\n\nThe following operations can be performed to make the values equal:\n\n\n* Increase `nums[0]` by 1 for a cost of 1. `nums` becomes `[4,5,3]`.\n* Increase `nums[0]` by 1 for a cost of 1. `nums` becomes `[5,5,3]`.\n* Increase `nums[2]` by 1 for a cost of 1. `nums` becomes `[5,5,4]`.\n* Increase `nums[2]` by 1 for a cost of 1. `nums` becomes `[5,5,5]`.\n\n\nThe total cost is 4.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 106`\n* `1 <= cost1 <= 106`\n* `1 <= cost2 <= 106`\n\n\nHints:\n    0. How can you determine the minimum cost if you know the maximum value in the array once all values are made equal?\n    1. If <code>cost2 > cost1 * 2</code>, we should just use <code>cost1</code> to change all the values to the maximum one.\n    2. Otherwise, it's optimal to choose the smallest two values and use <code>cost2</code> to increase both of them.\n    3. Since the maximum value is known, calculate the required increases to equalize all values, instead of naively simulating the operations.\n    4. There are not a lot of candidates for the maximum; we can try all of them and choose which uses the minimum number of operations."
            }
        ]
    },
    {
        "Title": "Check if Grid Satisfies Conditions",
        "slug": "check-if-grid-satisfies-conditions",
        "description": "You are given a 2D matrix `grid` of size `m x n`. You need to check if each cell `grid[i][j]` is:\n\n\n Equal to the cell below it, i.e. `grid[i][j] == grid[i + 1][j]` (if it exists).\n Different from the cell to its right, i.e. `grid[i][j] != grid[i][j + 1]` (if it exists).\n\n\nReturn `true` if **all** the cells satisfy these conditions, otherwise, return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "examples": [
            {
                "Input": "** grid = [[1,0,2],[1,0,2]]",
                "Output": "** true",
                "Explanation": "**\n\n\n**![](https://assets.leetcode.com/uploads/2024/04/15/examplechanged.png)**\n\n\nAll the cells in the grid satisfy the conditions."
            },
            {
                "Input": "** grid = [[1,1,1],[0,0,0]]",
                "Output": "** false",
                "Explanation": "**\n\n\n**![](https://assets.leetcode.com/uploads/2024/03/27/example21.png)**\n\n\nAll cells in the first row are equal."
            },
            {
                "Input": "** grid = [[1],[2],[3]]",
                "Output": "** false",
                "Explanation": "**\n\n\n![](https://assets.leetcode.com/uploads/2024/03/31/changed.png)\n\n\nCells in the first column have different values.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n, m <= 10`\n* `0 <= grid[i][j] <= 9`\n\n\nHints:\n    0. Check if each column has same value in each cell.\n    1. If the previous condition is satisfied, we can simply check the first cells in adjacent columns.\nSimilarQuestions: [135, 575, 2144]"
            }
        ]
    },
    {
        "Title": "Maximum Points Inside the Square",
        "slug": "maximum-points-inside-the-square",
        "description": "You are given a 2Darray `points` and a string `s` where, `points[i]` represents the coordinates of point `i`, and `s[i]` represents the **tag** of point `i`.\n\n\nA **valid** square is a square centered at the origin `(0, 0)`, has edges parallel to the axes, and **does not** contain two points with the same tag.\n\n\nReturn the **maximum** number of points contained in a **valid** square.\n\n\nNote:\n\n\n A point is considered to be inside the square if it lies on or within the square's boundaries.\n The side length of the square can be zero.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Binary Search",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** points = [[1,1],[-1,-1],[2,-2]], s = \"ccd\"",
                "Output": "** 0",
                "Explanation": "**\n\n\nIt's impossible to make any valid squares centered at the origin such that it covers only one point among `points[0]` and `points[1]`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length, points.length <= 105`\n* `points[i].length == 2`\n* `-109 <= points[i][0], points[i][1] <= 109`\n* `s.length == points.length`\n* `points` consists of distinct coordinates.\n* `s` consists only of lowercase English letters.\n\n\nHints:\n    0. The smallest edge length of a square to include point <code>(x, y)</code> is <code>max(abs(x), abs(y)) * 2</code>.\n    1. Sort the points by <code>max(abs(x), abs(y))</code> and try each edge length, check the included point tags."
            }
        ]
    },
    {
        "Title": "Minimum Substring Partition of Equal Character Frequency",
        "slug": "minimum-substring-partition-of-equal-character-frequency",
        "description": "Given a string `s`, you need to partition it into one or more **balanced** substrings. For example, if `s == \"ababcc\"` then `(\"abab\", \"c\", \"c\")`, `(\"ab\", \"abc\", \"c\")`, and `(\"ababcc\")` are all valid partitions, but `(\"a\", **\"bab\"**, \"cc\")`, `(**\"aba\"**, \"bc\", \"c\")`, and `(\"ab\", **\"abcc\"**)` are not. The unbalanced substrings are bolded.\n\n\nReturn the **minimum** number of substrings that you can partition `s` into.\n\n\nNote:** A **balanced** string is a string where each character in the string occurs the same number of times.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Dynamic Programming",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** s = \"fabccddg\"",
                "Output": "** 3",
                "Explanation": "**\n\n\nWe can partition the string `s` into 3 substrings in one of the following ways: `(\"fab, \"ccdd\", \"g\")`, or `(\"fabc\", \"cd\", \"dg\")`."
            },
            {
                "Input": "** s = \"abababaccddb\"",
                "Output": "** 2",
                "Explanation": "**\n\n\nWe can partition the string `s` into 2 substrings like so: `(\"abab\", \"abaccddb\")`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 1000`\n* `s` consists only of English lowercase letters.\n\n\nHints:\n    0. Let <code>dp[i]</code> be the minimum number of partitions for the prefix ending at index <code>i + 1</code>.\n    1. <code>dp[i]</code> can be calculated as the <code>min(dp[j])</code> over all <code>j</code> such that <code>j < i</code> and <code>word[j+1\u2026i]</code> is valid.\nSimilarQuestions: [1043, 2767]"
            }
        ]
    },
    {
        "Title": "Find Products of Elements of Big Array",
        "slug": "find-products-of-elements-of-big-array",
        "description": "A **powerful array** for an integer `x` is the shortest sorted array of powers of two that sum up to `x`. For example, the powerful array for 11 is `[1, 2, 8]`.\n\n\nThe array `big_nums` is created by concatenating the **powerful** arrays for every positive integer `i` in ascending order: 1, 2, 3, and so forth. Thus, `big_nums` starts as `[1, 2, 1, 2, 4, 1, 4, 2, 4, 1, 2, 4, 8, ...]`.\n\n\nYou are given a 2D integer matrix `queries`, where for `queries[i] = [fromi, toi, modi]` you should calculate `(big_nums[fromi] * big_nums[fromi + 1] * ... * big_nums[toi]) % modi`.\n\n\nReturn an integer array `answer` such that `answer[i]` is the answer to the `ith` query.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** queries = [[1,3,7]]",
                "Output": "** [4]",
                "Explanation": "**\n\n\nThere is one query.\n\n\n`big_nums[1..3] = [2,1,2]`. The product of them is 4. The remainder of 4 under 7 is 4."
            },
            {
                "Input": "** queries = [[2,5,3],[7,7,4]]",
                "Output": "** [2,2]",
                "Explanation": "**\n\n\nThere are two queries.\n\n\nFirst query: `big_nums[2..5] = [1,2,4,1]`. The product of them is 8. The remainder of 8 under 3 is 2.\n\n\nSecond query: `big_nums[7] = 2`. The remainder of 2 under 4 is 2.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= queries.length <= 500`\n* `queries[i].length == 3`\n* `0 <= queries[i][0] <= queries[i][1] <= 1015`\n* `1 <= queries[i][2] <= 105`\n\n\nHints:\n    0. Find a way to calculate <code>f(n, i)</code> which is the total number of numbers in <code>[1, n]</code> when the <code>i<sup>th</sup></code> bit is set in <code>O(log(n))</code> time.\n    1. Use binary search to find the last number for each query (and there might be one \u201cincomplete\u201d number for the query).\n    2. Use a similar way to find the product (we only need to save the sum of exponents of power of <code>2</code>)."
            }
        ]
    },
    {
        "Title": "Permutation Difference between Two Strings",
        "slug": "permutation-difference-between-two-strings",
        "description": "You are given two strings `s` and `t` such that every character occurs at most once in `s` and `t` is a permutation of `s`.\n\n\nThe **permutation difference** between `s` and `t` is defined as the **sum** of the absolute difference between the index of the occurrence of each character in `s` and the index of the occurrence of the same character in `t`.\n\n\nReturn the **permutation difference** between `s` and `t`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "examples": [
            {
                "Input": "** s = \"abc\", t = \"bac\"",
                "Output": "** 2",
                "Explanation": "**\n\n\nFor `s = \"abc\"` and `t = \"bac\"`, the permutation difference of `s` and `t` is equal to the sum of:\n\n\n* The absolute difference between the index of the occurrence of `\"a\"` in `s` and the index of the occurrence of `\"a\"` in `t`.\n* The absolute difference between the index of the occurrence of `\"b\"` in `s` and the index of the occurrence of `\"b\"` in `t`.\n* The absolute difference between the index of the occurrence of `\"c\"` in `s` and the index of the occurrence of `\"c\"` in `t`.\n\n\nThat is, the permutation difference between `s` and `t` is equal to `|0 - 1| + |2 - 2| + |1 - 0| = 2`."
            },
            {
                "Input": "** s = \"abcde\", t = \"edbac\"",
                "Output": "** 12",
                "Explanation": "** The permutation difference between `s` and `t` is equal to `|0 - 3| + |1 - 2| + |2 - 4| + |3 - 1| + |4 - 0| = 12`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 26`\n* Each character occurs at most once in `s`.\n* `t` is a permutation of `s`.\n* `s` consists only of lowercase English letters.\n\n\nSimilarQuestions: [389]"
            }
        ]
    },
    {
        "Title": "Taking Maximum Energy From the Mystic Dungeon",
        "slug": "taking-maximum-energy-from-the-mystic-dungeon",
        "description": "In a mystic dungeon, `n` magicians are standing in a line. Each magician has an attribute that gives you energy. Some magicians can give you negative energy, which means taking energy from you.\n\n\nYou have been cursed in such a way that after absorbing energy from magician `i`, you will be instantly transported to magician `(i + k)`. This process will be repeated until you reach the magician where `(i + k)` does not exist.\n\n\nIn other words, you will choose a starting point and then teleport with `k` jumps until you reach the end of the magicians' sequence, **absorbing all the energy** during the journey.\n\n\nYou are given an array `energy` and an integer `k`. Return the **maximum** possible energy you can gain.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "**  energy = [5,2,-10,-5,1], k = 3",
                "Output": "** 3",
                "Explanation": "** We can gain a total energy of 3 by starting from magician 1 absorbing 2 + 1 = 3."
            },
            {
                "Input": "** energy = [-2,-3,-1], k = 2",
                "Output": "** -1",
                "Explanation": "** We can gain a total energy of -1 by starting from magician 2.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= energy.length <= 105`\n* `-1000 <= energy[i] <= 1000`\n* `1 <= k <= energy.length - 1`\n\n\n\u00a0\n\n\n\u200b\u200b\u200b\u200b\u200b\u200bHints:\n    0. Let <code>dp[i]</code> denote the energy we gain starting from index <code>i</code>.\n    1. We can notice, that <code> dp[i] = dp[i + k] + energy[i]</code>."
            }
        ]
    },
    {
        "Title": "Find the Minimum Cost Array Permutation",
        "slug": "find-the-minimum-cost-array-permutation",
        "description": "You are given an array `nums` which is a permutation of `[0, 1, 2, ..., n - 1]`. The **score** of any permutation of `[0, 1, 2, ..., n - 1]` named `perm` is defined as:\n\n\n`score(perm) = |perm[0] - nums[perm[1]]| + |perm[1] - nums[perm[2]]| + ... + |perm[n - 1] - nums[perm[0]]|`\n\n\nReturn the permutation `perm` which has the **minimum** possible score. If *multiple* permutations exist with this score, return the one that is lexicographically smallest among them.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Bit Manipulation",
            "Bitmask"
        ],
        "examples": [
            {
                "Input": "** nums = [1,0,2]",
                "Output": "** [0,1,2]",
                "Explanation": "**\n\n\n**![](https://assets.leetcode.com/uploads/2024/04/04/example0gif.gif)**\n\n\nThe lexicographically smallest permutation with minimum cost is `[0,1,2]`. The cost of this permutation is `|0 - 0| + |1 - 2| + |2 - 1| = 2`."
            },
            {
                "Input": "** nums = [0,2,1]",
                "Output": "** [0,2,1]",
                "Explanation": "**\n\n\n**![](https://assets.leetcode.com/uploads/2024/04/04/example1gif.gif)**\n\n\nThe lexicographically smallest permutation with minimum cost is `[0,2,1]`. The cost of this permutation is `|0 - 1| + |2 - 2| + |1 - 0| = 2`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= n == nums.length <= 14`\n* `nums` is a permutation of `[0, 1, 2, ..., n - 1]`.\n\n\nHints:\n    0. The score function is cyclic, so we can always set <code>perm[0] = 0</code> for the smallest lexical order.\n    1. It\u2019s similar to the Traveling Salesman Problem. Use Dynamic Programming.\n    2. Use a bitmask to track which elements have been assigned to <code>perm</code>.\nSimilarQuestions: [847, 943]"
            }
        ]
    },
    {
        "Title": "Special Array I",
        "slug": "special-array-i",
        "description": "An array is considered **special** if every pair of its adjacent elements contains two numbers with different parity.\n\n\nYou are given an array of integers `nums`. Return `true` if `nums` is a **special** array, otherwise, return `false`.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "examples": [
            {
                "Input": "** nums = [1]",
                "Output": "** true",
                "Explanation": "**\n\n\nThere is only one element. So the answer is `true`."
            },
            {
                "Input": "** nums = [2,1,4]",
                "Output": "** true",
                "Explanation": "**\n\n\nThere is only two pairs: `(2,1)` and `(1,4)`, and both of them contain numbers with different parity. So the answer is `true`."
            },
            {
                "Input": "** nums = [4,3,1,6]",
                "Output": "** false",
                "Explanation": "**\n\n\n`nums[1]` and `nums[2]` are both odd. So the answer is `false`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 100`"
            }
        ]
    },
    {
        "Title": "Special Array II",
        "slug": "special-array-ii",
        "description": "An array is considered **special** if every pair of its adjacent elements contains two numbers with different parity.\n\n\nYou are given an array of integer `nums` and a 2D integer matrix `queries`, where for `queries[i] = [fromi, toi]` your task is to check that subarray `nums[fromi..toi]` is **special** or not.\n\n\nReturn an array of booleans `answer` such that `answer[i]` is `true` if `nums[fromi..toi]` is special.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Prefix Sum"
        ],
        "examples": [
            {
                "Input": "** nums = [3,4,1,2,6], queries = [[0,4]]",
                "Output": "** [false]",
                "Explanation": "**\n\n\nThe subarray is `[3,4,1,2,6]`. 2 and 6 are both even."
            },
            {
                "Input": "** nums = [4,3,1,6], queries = [[0,2],[2,3]]",
                "Output": "** [false,true]",
                "Explanation": "**\n\n\n1. The subarray is `[4,3,1]`. 3 and 1 are both odd. So the answer to this query is `false`.\n2. The subarray is `[1,6]`. There is only one pair: `(1,6)` and it contains numbers with different parity. So the answer to this query is `true`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n* `1 <= queries.length <= 105`\n* `queries[i].length == 2`\n* `0 <= queries[i][0] <= queries[i][1] <= nums.length - 1`\n\n\nHints:\n    0. Try to split the array into some non-intersected continuous special subarrays.\n    1. For each query check that the first and the last elements of that query are in the same subarray or not."
            }
        ]
    },
    {
        "Title": "Sum of Digit Differences of All Pairs",
        "slug": "sum-of-digit-differences-of-all-pairs",
        "description": "You are given an array `nums` consisting of **positive** integers where all integers have the **same** number of digits.\n\n\nThe **digit difference** between two integers is the *count* of different digits that are in the **same** position in the two integers.\n\n\nReturn the **sum** of the **digit differences** between **all** pairs of integers in `nums`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Counting"
        ],
        "examples": [
            {
                "Input": "** nums = [13,23,12]",
                "Output": "** 4",
                "Explanation": "**  \n\nWe have the following:  \n\n- The digit difference between **1**3 and **2**3 is 1.  \n\n- The digit difference between 1**3** and 1**2** is 1.  \n\n- The digit difference between **23** and **12** is 2.  \n\nSo the total sum of digit differences between all pairs of integers is `1 + 1 + 2 = 4`."
            },
            {
                "Input": "** nums = [10,10,10,10]",
                "Output": "** 0",
                "Explanation": "**  \n\nAll the integers in the array are the same. So the total sum of digit differences between all pairs of integers will be 0.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 105`\n* `1 <= nums[i] < 109`\n* All integers in `nums` have the same number of digits.\n\n\nHints:\n    0. You can solve the problem for digits that are on the same position separately, and then sum up all the answers.\n    1. For each position, count the number of occurences of each digit from 0 to 9 that appear on that position.\n    2. Let <code>c</code> be the number of occurences of a digit on a position, that will contribute with <code>c * (n - c)</code> to the final answer, where <code>n</code> is the number of integers in <code>nums</code>.\nSimilarQuestions: [477]"
            }
        ]
    },
    {
        "Title": "Find Number of Ways to Reach the K-th Stair",
        "slug": "find-number-of-ways-to-reach-the-k-th-stair",
        "description": "You are given a **non-negative** integer `k`. There exists a staircase with an infinite number of stairs, with the **lowest** stair numbered 0.\n\n\nAlice has an integer `jump`, with an initial value of 0. She starts on stair 1 and wants to reach stair `k` using **any** number of **operations**. If she is on stair `i`, in one **operation** she can:\n\n\n Go down to stair `i - 1`. This operation **cannot** be used consecutively or on stair 0.\n Go up to stair `i + 2jump`. And then, `jump` becomes `jump + 1`.\n\n\nReturn the *total* number of ways Alice can reach stair `k`.\n\n\nNote** that it is possible that Alice reaches the stair `k`, and performs some operations to reach the stair `k` again.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Bit Manipulation",
            "Memoization",
            "Combinatorics"
        ],
        "examples": [
            {
                "Input": "** k = 0",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe 2 possible ways of reaching stair 0 are:\n\n\n* Alice starts at stair 1.\n\t+ Using an operation of the first type, she goes down 1 stair to reach stair 0.\n* Alice starts at stair 1.\n\t+ Using an operation of the first type, she goes down 1 stair to reach stair 0.\n\t+ Using an operation of the second type, she goes up 20 stairs to reach stair 1.\n\t+ Using an operation of the first type, she goes down 1 stair to reach stair 0."
            },
            {
                "Input": "** k = 1",
                "Output": "** 4",
                "Explanation": "**\n\n\nThe 4 possible ways of reaching stair 1 are:\n\n\n* Alice starts at stair 1. Alice is at stair 1.\n* Alice starts at stair 1.\n\t+ Using an operation of the first type, she goes down 1 stair to reach stair 0.\n\t+ Using an operation of the second type, she goes up 20 stairs to reach stair 1.\n* Alice starts at stair 1.\n\t+ Using an operation of the second type, she goes up 20 stairs to reach stair 2.\n\t+ Using an operation of the first type, she goes down 1 stair to reach stair 1.\n* Alice starts at stair 1.\n\t+ Using an operation of the first type, she goes down 1 stair to reach stair 0.\n\t+ Using an operation of the second type, she goes up 20 stairs to reach stair 1.\n\t+ Using an operation of the first type, she goes down 1 stair to reach stair 0.\n\t+ Using an operation of the second type, she goes up 21 stairs to reach stair 2.\n\t+ Using an operation of the first type, she goes down 1 stair to reach stair 1.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= k <= 109`\n\n\nHints:\n    0. On using <code>x</code> operations of the second type and <code>y</code> operations of the first type, the stair <code>2<sup>x + 1</sup> - y</code> is reached.\n    1. Since first operations cannot be consecutive, there are exactly <code>x + 1</code> positions (before and after each power of 2) to perform the second operation.\n    2. Using combinatorics, we have <sup>x + 1</sup>C<sub>y</sub> number of ways to select the positions of second operations.\nSimilarQuestions: [70, 746]"
            }
        ]
    },
    {
        "Title": "Find the XOR of Numbers Which Appear Twice",
        "slug": "find-the-xor-of-numbers-which-appear-twice",
        "description": "You are given an array `nums`, where each number in the array appears **either**onceortwice.\n\n\nReturn the bitwise`XOR` of all the numbers that appear twice in the array, or 0 if no number appears twice.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Bit Manipulation"
        ],
        "examples": [
            {
                "Input": "** nums = [1,2,1,3]",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe only number that appears twice in\u00a0`nums`\u00a0is 1."
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 0",
                "Explanation": "**\n\n\nNo number appears twice in\u00a0`nums`."
            },
            {
                "Input": "** nums = [1,2,2,1]",
                "Output": "** 3",
                "Explanation": "**\n\n\nNumbers 1 and 2 appeared twice. `1 XOR 2 == 3`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 50`\n* `1 <= nums[i] <= 50`\n* Each number in `nums` appears either once or twice.\n\n\nSimilarQuestions: [136, 137, 260]"
            }
        ]
    },
    {
        "Title": "Find Occurrences of an Element in an Array",
        "slug": "find-occurrences-of-an-element-in-an-array",
        "description": "You are given an integer array `nums`, an integer array `queries`, and an integer `x`.\n\n\nFor each `queries[i]`, you need to find the index of the `queries[i]th` occurrence of `x` in the `nums` array. If there are fewer than `queries[i]` occurrences of `x`, the answer should be -1 for that query.\n\n\nReturn an integer array `answer` containing the answers to all queries.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** nums = [1,3,1,7], queries = [1,3,2,4], x = 1",
                "Output": "** [0,-1,2,-1]",
                "Explanation": "**\n\n\n* For the 1st query, the first occurrence of 1 is at index 0.\n* For the 2nd query, there are only two occurrences of 1 in `nums`, so the answer is -1.\n* For the 3rd query, the second occurrence of 1 is at index 2.\n* For the 4th query, there are only two occurrences of 1 in `nums`, so the answer is -1."
            },
            {
                "Input": "** nums = [1,2,3], queries = [10], x = 5",
                "Output": "** [-1]",
                "Explanation": "**\n\n\n* For the 1st query, 5 doesn't exist in `nums`, so the answer is -1.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length, queries.length <= 105`\n* `1 <= queries[i] <= 105`\n* `1 <= nums[i], x <= 104`"
            }
        ]
    },
    {
        "Title": "Find the Number of Distinct Colors Among the Balls",
        "slug": "find-the-number-of-distinct-colors-among-the-balls",
        "description": "You are given an integer `limit` and a 2D array `queries` of size `n x 2`.\n\n\nThere are `limit + 1` balls with **distinct** labels in the range `[0, limit]`. Initially, all balls are uncolored. For every query in `queries` that is of the form `[x, y]`, you mark ball `x` with the color `y`. After each query, you need to find the number of **distinct** colors among the balls.\n\n\nReturn an array `result` of length `n`, where `result[i]` denotes the number of distinct colors *after* `ith` query.\n\n\nNote** that when answering a query, lack of a color *will not* be considered as a color.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** limit = 4, queries = [[1,4],[2,5],[1,3],[3,4]]",
                "Output": "** [1,2,2,3]",
                "Explanation": "**\n\n\n![](https://assets.leetcode.com/uploads/2024/04/17/ezgifcom-crop.gif)\n\n\n* After query 0, ball 1 has color 4.\n* After query 1, ball 1 has color 4, and ball 2 has color 5.\n* After query 2, ball 1 has color 3, and ball 2 has color 5.\n* After query 3, ball 1 has color 3, ball 2 has color 5, and ball 3 has color 4."
            },
            {
                "Input": "** limit = 4, queries = [[0,1],[1,2],[2,2],[3,4],[4,5]]",
                "Output": "** [1,2,2,3,4]",
                "Explanation": "**\n\n\n**![](https://assets.leetcode.com/uploads/2024/04/17/ezgifcom-crop2.gif)**\n\n\n* After query 0, ball 0 has color 1.\n* After query 1, ball 0 has color 1, and ball 1 has color 2.\n* After query 2, ball 0 has color 1, and balls 1 and 2 have color 2.\n* After query 3, ball 0 has color 1, balls 1 and 2 have color 2, and ball 3 has color 4.\n* After query 4, ball 0 has color 1, balls 1 and 2 have color 2, ball 3 has color 4, and ball 4 has color 5.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= limit <= 109`\n* `1 <= n == queries.length <= 105`\n* `queries[i].length == 2`\n* `0 <= queries[i][0] <= limit`\n* `1 <= queries[i][1] <= 109`\n\n\nSimilarQuestions: [1742]"
            }
        ]
    },
    {
        "Title": "Block Placement Queries",
        "slug": "block-placement-queries",
        "description": "There exists an infinite number line, with its origin at 0 and extending towards the **positive** x-axis.\n\n\nYou are given a 2D array `queries`, which contains two types of queries:\n\n\n1. For a query of type 1, `queries[i] = [1, x]`. Build an obstacle at distance `x` from the origin. It is guaranteed that there is **no** obstacle at distance `x` when the query is asked.\n2. For a query of type 2, `queries[i] = [2, x, sz]`. Check if it is possible to place a block of size `sz` *anywhere* in the range `[0, x]` on the line, such that the block **entirely** lies in the range `[0, x]`. A block **cannot** be placed if it intersects with any obstacle, but it may touch it. Note that you do **not** actually place the block. Queries are separate.\n\n\nReturn a boolean array `results`, where `results[i]` is `true` if you can place the block specified in the `ith` query of type 2, and `false` otherwise.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Binary Indexed Tree",
            "Segment Tree"
        ],
        "examples": [
            {
                "Input": "** queries = [[1,2],[2,3,3],[2,3,1],[2,2,2]]",
                "Output": "** [false,true,true]",
                "Explanation": "**\n\n\n**![](https://assets.leetcode.com/uploads/2024/04/22/example0block.png)**\n\n\nFor query 0, place an obstacle at `x = 2`. A block of size at most 2 can be placed before `x = 3`."
            },
            {
                "Input": "** queries = [[1,7],[2,7,6],[1,2],[2,7,5],[2,7,6]]",
                "Output": "** [true,true,false]",
                "Explanation": "**\n\n\n**![](https://assets.leetcode.com/uploads/2024/04/22/example1block.png)**\n\n\n* Place an obstacle at `x = 7` for query 0. A block of size at most 7 can be placed before `x = 7`.\n* Place an obstacle at `x = 2` for query 2. Now, a block of size at most 5 can be placed before `x = 7`, and a block of size at most 2 before `x = 2`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= queries.length <= 15 * 104`\n* `2 <= queries[i].length <= 3`\n* `1 <= queries[i][0] <= 2`\n* `1 <= x, sz <= min(5 * 104, 3 * queries.length)`\n* The input is generated such that for queries of type 1, no obstacle exists at distance `x` when the query is asked.\n* The input is generated such that there is at least one query of type 2.\n\n\nHints:\n    0. Let <code>d[x]</code> be the distance of the next obstacle after <code>x</code>.\n    1. For each query of type 2, we just need to check if <code>max(d[0], d[1], d[2], \u2026d[x - sz]) > sz</code>.\n    2. Use segment tree to maintain <code>d[x]</code>.\nSimilarQuestions: [1739]"
            }
        ]
    },
    {
        "Title": "Find the Number of Good Pairs I",
        "slug": "find-the-number-of-good-pairs-i",
        "description": "You are given 2 integer arrays `nums1` and `nums2` of lengths `n` and `m` respectively. You are also given a **positive** integer `k`.\n\n\nA pair `(i, j)` is called **good** if `nums1[i]` is divisible by `nums2[j] * k` (`0 <= i <= n - 1`, `0 <= j <= m - 1`).\n\n\nReturn the total number of **good** pairs.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** nums1 = [1,3,4], nums2 = [1,3,4], k = 1",
                "Output": "** 5",
                "Explanation": "**\n\n\nThe 5 good pairs are `(0, 0)`, `(1, 0)`, `(1, 1)`, `(2, 0)`, and `(2, 2)`."
            },
            {
                "Input": "** nums1 = [1,2,4,12], nums2 = [2,4], k = 3",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe 2 good pairs are `(3, 0)` and `(3, 1)`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n, m <= 50`\n* `1 <= nums1[i], nums2[j] <= 50`\n* `1 <= k <= 50`\n\n\nSimilarQuestions: [2183]"
            }
        ]
    },
    {
        "Title": "String Compression III",
        "slug": "string-compression-iii",
        "description": "Given a string `word`, compress it using the following algorithm:\n\n\n Begin with an empty string `comp`. While `word` is **not** empty, use the following operation:\n\t+ Remove a maximum length prefix of `word` made of a *single character* `c` repeating **at most** 9 times.\n\t+ Append the length of the prefix followed by `c` to `comp`.\n\n\nReturn the string `comp`.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "String"
        ],
        "examples": [
            {
                "Input": "** word = \"abcde\"",
                "Output": "** \"1a1b1c1d1e\"",
                "Explanation": "**\n\n\nInitially, `comp = \"\"`. Apply the operation 5 times, choosing `\"a\"`, `\"b\"`, `\"c\"`, `\"d\"`, and `\"e\"` as the prefix in each operation.\n\n\nFor each prefix, append `\"1\"` followed by the character to `comp`."
            },
            {
                "Input": "** word = \"aaaaaaaaaaaaaabb\"",
                "Output": "** \"9a5a2b\"",
                "Explanation": "**\n\n\nInitially, `comp = \"\"`. Apply the operation 3 times, choosing `\"aaaaaaaaa\"`, `\"aaaaa\"`, and `\"bb\"` as the prefix in each operation.\n\n\n* For prefix `\"aaaaaaaaa\"`, append `\"9\"` followed by `\"a\"` to `comp`.\n* For prefix `\"aaaaa\"`, append `\"5\"` followed by `\"a\"` to `comp`.\n* For prefix `\"bb\"`, append `\"2\"` followed by `\"b\"` to `comp`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= word.length <= 2 * 105`\n* `word` consists only of lowercase English letters.\n\n\nSimilarQuestions: [443, 1531]"
            }
        ]
    },
    {
        "Title": "Find the Number of Good Pairs II",
        "slug": "find-the-number-of-good-pairs-ii",
        "description": "You are given 2 integer arrays `nums1` and `nums2` of lengths `n` and `m` respectively. You are also given a **positive** integer `k`.\n\n\nA pair `(i, j)` is called **good** if `nums1[i]` is divisible by `nums2[j] * k` (`0 <= i <= n - 1`, `0 <= j <= m - 1`).\n\n\nReturn the total number of **good** pairs.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "examples": [
            {
                "Input": "** nums1 = [1,3,4], nums2 = [1,3,4], k = 1",
                "Output": "** 5",
                "Explanation": "**\n\n\nThe 5 good pairs are `(0, 0)`, `(1, 0)`, `(1, 1)`, `(2, 0)`, and `(2, 2)`."
            },
            {
                "Input": "** nums1 = [1,2,4,12], nums2 = [2,4], k = 3",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe 2 good pairs are `(3, 0)` and `(3, 1)`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n, m <= 105`\n* `1 <= nums1[i], nums2[j] <= 106`\n* `1 <= k <= 103`\n\n\nHints:\n    0. Let <code>f[v]</code> be the number of occurrences of <code>v/k</code> in nums2.\n    1. For each value <code>v</code> in nums1, enumerating all its factors <code>d</code> (in <code>sqrt(v)</code> time) and sum up all the <code>f[d]</code> to get the final answer.\n    2. It is also possible to improve the complexity from <code>v * sqrt(v)</code> to <code>v * log(v)</code> - How?\nSimilarQuestions: [2183]"
            }
        ]
    },
    {
        "Title": "Maximum Sum of Subsequence With Non-adjacent Elements",
        "slug": "maximum-sum-of-subsequence-with-non-adjacent-elements",
        "description": "You are given an array `nums` consisting of integers. You are also given a 2D array `queries`, where `queries[i] = [posi, xi]`.\n\n\nFor query `i`, we first set `nums[posi]` equal to `xi`, then we calculate the answer to query `i` which is the **maximum** sum of a subsequence of `nums` where **no two adjacent elements are selected**.\n\n\nReturn the *sum* of the answers to all queries.\n\n\nSince the final answer may be very large, return it **modulo** `109 + 7`.\n\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n",
        "difficulty": "Hard",
        "Tags": [
            "Array",
            "Divide and Conquer",
            "Dynamic Programming",
            "Segment Tree"
        ],
        "examples": [
            {
                "Input": "** nums = [3,5,9], queries = [[1,-2],[0,-3]]",
                "Output": "** 21",
                "Explanation": "**  \n\nAfter the 1st query, `nums = [3,-2,9]` and the maximum sum of a subsequence with non-adjacent elements is `3 + 9 = 12`.  \n\nAfter the 2nd query, `nums = [-3,-2,9]` and the maximum sum of a subsequence with non-adjacent elements is 9."
            },
            {
                "Input": "** nums = [0,-1], queries = [[0,-5]]",
                "Output": "** 0",
                "Explanation": "**  \n\nAfter the 1st query, `nums = [-5,-1]` and the maximum sum of a subsequence with non-adjacent elements is 0 (choosing an empty subsequence).\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 5 * 104`\n* `-105 <= nums[i] <= 105`\n* `1 <= queries.length <= 5 * 104`\n* `queries[i] == [posi, xi]`\n* `0 <= posi <= nums.length - 1`\n* `-105 <= xi <= 105`\n\n\nHints:\n    0. Can you solve each query in <code>O(nums.length)</code> with dynamic programming?\n    1. In order to optimize, we will use segment tree where each node contains the maximum value of (front element has been chosen or not, back element has been chosen or not)."
            }
        ]
    },
    {
        "Title": "Minimum Number of Chairs in a Waiting Room",
        "slug": "minimum-number-of-chairs-in-a-waiting-room",
        "description": "You are given a string `s`. Simulate events at each second `i`:\n\n\n If `s[i] == 'E'`, a person enters the waiting room and takes one of the chairs in it.\n If `s[i] == 'L'`, a person leaves the waiting room, freeing up a chair.\n\n\nReturn the **minimum** number of chairs needed so that a chair is available for every person who enters the waiting room given that it is initially **empty**.\n\n\n\u00a0\n\n",
        "difficulty": "Easy",
        "Tags": [
            "String",
            "Simulation"
        ],
        "examples": [
            {
                "Input": "** s = \"EEEEEEE\"",
                "Output": "** 7",
                "Explanation": "**\n\n\nAfter each second, a person enters the waiting room and no person leaves it. Therefore, a minimum of 7 chairs is needed."
            },
            {
                "Input": "** s = \"ELELEEL\"",
                "Output": "** 2",
                "Explanation": "**\n\n\nLet's consider that there are 2 chairs in the waiting room. The table below shows the state of the waiting room at each second.\n\n\n\n\n\n| Second | Event | People in the Waiting Room | Available Chairs |\n| --- | --- | --- | --- |\n| 0 | Enter | 1 | 1 |\n| 1 | Leave | 0 | 2 |\n| 2 | Enter | 1 | 1 |\n| 3 | Leave | 0 | 2 |\n| 4 | Enter | 1 | 1 |\n| 5 | Enter | 2 | 0 |\n| 6 | Leave | 1 | 1 |"
            },
            {
                "Input": "** s = \"ELEELEELLL\"",
                "Output": "** 3",
                "Explanation": "**\n\n\nLet's consider that there are 3 chairs in the waiting room. The table below shows the state of the waiting room at each second.\n\n\n\n\n\n| Second | Event | People in the Waiting Room | Available Chairs |\n| --- | --- | --- | --- |\n| 0 | Enter | 1 | 2 |\n| 1 | Leave | 0 | 3 |\n| 2 | Enter | 1 | 2 |\n| 3 | Enter | 2 | 1 |\n| 4 | Leave | 1 | 2 |\n| 5 | Enter | 2 | 1 |\n| 6 | Enter | 3 | 0 |\n| 7 | Leave | 2 | 1 |\n| 8 | Leave | 1 | 2 |\n| 9 | Leave | 0 | 3 |\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 50`\n* `s` consists only of the letters `'E'` and `'L'`.\n* `s` represents a valid sequence of entries and exits.\n\n\nHints:\n    0. Iterate from left to right over the string and keep track of the number of people in the waiting room using a variable that you will increment on every occurrence of \u2018E\u2019 and decrement on every occurrence of \u2018L\u2019.\n    1. The answer is the maximum number of people in the waiting room at any instance.\nSimilarQuestions: [1446]"
            }
        ]
    },
    {
        "Title": "Count Days Without Meetings",
        "slug": "count-days-without-meetings",
        "description": "You are given a positive integer `days` representing the total number of days an employee is available for work (starting from day 1). You are also given a 2D array `meetings` of size `n` where, `meetings[i] = [start_i, end_i]` represents the starting and ending days of meeting `i` (inclusive).\n\n\nReturn the count of days when the employee is available for work but no meetings are scheduled.\n\n\nNote:** The meetings may overlap.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "examples": [
            {
                "Input": "** days = 10, meetings = [[5,7],[1,3],[9,10]]",
                "Output": "** 2",
                "Explanation": "**\n\n\nThere is no meeting scheduled on the 4th and 8th days."
            },
            {
                "Input": "** days = 5, meetings = [[2,4],[1,3]]",
                "Output": "** 1",
                "Explanation": "**\n\n\nThere is no meeting scheduled on the 5th day."
            },
            {
                "Input": "** days = 6, meetings = [[1,6]]",
                "Output": "** 0",
                "Explanation": "**\n\n\nMeetings are scheduled for all working days.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= days <= 109`\n* `1 <= meetings.length <= 105`\n* `meetings[i].length == 2`\n* `1 <= meetings[i][0] <= meetings[i][1] <= days`\n\n\nHints:\n    0. Merge the overlapping meetings and sort the new meetings timings.\n    1. Return the sum of difference between the end time of a meeting and the start time of the next meeting for all adjacent pairs.\nSimilarQuestions: [56]"
            }
        ]
    },
    {
        "Title": "Lexicographically Minimum String After Removing Stars",
        "slug": "lexicographically-minimum-string-after-removing-stars",
        "description": "You are given a string `s`. It may contain any number of `'*'` characters. Your task is to remove all `'*'` characters.\n\n\nWhile there is a `'*'`, do the following operation:\n\n\n Delete the leftmost `'*'` and the **smallest** non-`'*'` character to its *left*. If there are several smallest characters, you can delete any of them.\n\n\nReturn the lexicographically smallest resulting string after removing all `'*'` characters.\n\n\n\u00a0\n\n",
        "difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Stack",
            "Greedy",
            "Heap (Priority Queue)"
        ],
        "examples": [
            {
                "Input": "** s = \"aaba\\*\"",
                "Output": "** \"aab\"",
                "Explanation": "**\n\n\nWe should delete one of the `'a'` characters with `'*'`. If we choose `s[3]`, `s` becomes the lexicographically smallest."
            },
            {
                "Input": "** s = \"abc\"",
                "Output": "** \"abc\"",
                "Explanation": "**\n\n\nThere is no `'*'` in the string.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` consists only of lowercase English letters and `'*'`.\n* The input is generated such that it is possible to delete all `'*'` characters."
            }
        ]
    }
]