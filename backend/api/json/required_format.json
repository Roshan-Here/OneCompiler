[
    {
        "Title": "Two Sum",
        "slug": "two-sum",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [2,7,11,15], target = 9",
                "Output": "** [0,1]",
                "Explanation": "** Because nums[0] + nums[1] == 9, we return [0, 1]."
            },
            {
                "Input": "** nums = [3,2,4], target = 6",
                "Output": "** [1,2]",
                "Explanation": null
            },
            {
                "Input": "** nums = [3,3], target = 6",
                "Output": "** [0,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Add Two Numbers",
        "slug": "add-two-numbers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** l1 = [2,4,3], l2 = [5,6,4]",
                "Output": "** [7,0,8]",
                "Explanation": "** 342 + 465 = 807."
            }
        ]
    },
    {
        "Title": "Longest Substring Without Repeating Characters",
        "slug": "longest-substring-without-repeating-characters",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"abcabcbb\"",
                "Output": "** 3",
                "Explanation": "** The answer is \"abc\", with the length of 3."
            },
            {
                "Input": "** s = \"bbbbb\"",
                "Output": "** 1",
                "Explanation": "** The answer is \"b\", with the length of 1."
            },
            {
                "Input": "** s = \"pwwkew\"",
                "Output": "** 3",
                "Explanation": "** The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring."
            }
        ]
    },
    {
        "Title": "Median of Two Sorted Arrays",
        "slug": "median-of-two-sorted-arrays",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums1 = [1,3], nums2 = [2]",
                "Output": "** 2.00000",
                "Explanation": "** merged array = [1,2,3] and median is 2."
            },
            {
                "Input": "** nums1 = [1,2], nums2 = [3,4]",
                "Output": "** 2.50000",
                "Explanation": "** merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5."
            }
        ]
    },
    {
        "Title": "Longest Palindromic Substring",
        "slug": "longest-palindromic-substring",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"babad\"",
                "Output": "** \"bab\"",
                "Explanation": "** \"aba\" is also a valid answer."
            },
            {
                "Input": "** s = \"cbbd\"",
                "Output": "** \"bb\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Zigzag Conversion",
        "slug": "zigzag-conversion",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"PAYPALISHIRING\", numRows = 3",
                "Output": "** \"PAHNAPLSIIGYIR\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"PAYPALISHIRING\", numRows = 4",
                "Output": "** \"PINALSIGYAHRPI\"",
                "Explanation": "**\nP     I    N\nA   L S  I G\nY A   H R\nP     I"
            },
            {
                "Input": "** s = \"A\", numRows = 1",
                "Output": "** \"A\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reverse Integer",
        "slug": "reverse-integer",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** x = 123",
                "Output": "** 321",
                "Explanation": null
            },
            {
                "Input": "** x = -123",
                "Output": "** -321",
                "Explanation": null
            },
            {
                "Input": "** x = 120",
                "Output": "** 21",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "String to Integer (atoi)",
        "slug": "string-to-integer-atoi",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"42\"",
                "Output": "** 42",
                "Explanation": "**\n\n\n\n```\n\nThe underlined characters are what is read in and the caret is the current reader position.\nStep 1: \"42\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"42\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"42\" (\"42\" is read in)\n           ^\n\n```"
            },
            {
                "Input": "** s = \" -042\"",
                "Output": "** -42",
                "Explanation": "**\n\n\n\n```\n\nStep 1: \" -042\" (leading whitespace is read and ignored)\n            ^\nStep 2: \"   -042\" ('-' is read, so the result should be negative)\n             ^\nStep 3: \"   -042\" (\"042\" is read in, leading zeros ignored in the result)\n               ^\n\n```"
            },
            {
                "Input": "** s = \"1337c0d3\"",
                "Output": "** 1337",
                "Explanation": "**\n\n\n\n```\n\nStep 1: \"1337c0d3\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"1337c0d3\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"1337c0d3\" (\"1337\" is read in; reading stops because the next character is a non-digit)\n             ^\n\n```"
            },
            {
                "Input": "** s = \"0-1\"",
                "Output": "** 0",
                "Explanation": "**\n\n\n\n```\n\nStep 1: \"0-1\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"0-1\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"0-1\" (\"0\" is read in; reading stops because the next character is a non-digit)\n          ^\n\n```"
            },
            {
                "Input": "** s = \"words and 987\"",
                "Output": "** 0",
                "Explanation": "**\n\n\nReading stops at the first non-digit character 'w'.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= s.length <= 200`\n* `s` consists of English letters (lower-case and upper-case), digits (`0-9`), `' '`, `'+'`, `'-'`, and `'.'`.\n\n\nSimilarQuestions: [7, 65, 2042]"
            }
        ]
    },
    {
        "Title": "Palindrome Number",
        "slug": "palindrome-number",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** x = 121",
                "Output": "** true",
                "Explanation": "** 121 reads as 121 from left to right and from right to left."
            },
            {
                "Input": "** x = -121",
                "Output": "** false",
                "Explanation": "** From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome."
            },
            {
                "Input": "** x = 10",
                "Output": "** false",
                "Explanation": "** Reads 01 from right to left. Therefore it is not a palindrome."
            }
        ]
    },
    {
        "Title": "Regular Expression Matching",
        "slug": "regular-expression-matching",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"aa\", p = \"a\"",
                "Output": "** false",
                "Explanation": "** \"a\" does not match the entire string \"aa\"."
            },
            {
                "Input": "** s = \"aa\", p = \"a*\"",
                "Output": "** true",
                "Explanation": "** '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\"."
            },
            {
                "Input": "** s = \"ab\", p = \".*\"",
                "Output": "** true",
                "Explanation": "** \".*\" means \"zero or more (*) of any character (.)\"."
            }
        ]
    },
    {
        "Title": "Container With Most Water",
        "slug": "container-with-most-water",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** height = [1,8,6,2,5,4,8,3,7]",
                "Output": "** 49",
                "Explanation": "** The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49."
            }
        ]
    },
    {
        "Title": "Integer to Roman",
        "slug": "integer-to-roman",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** num = 3749",
                "Output": "** \"MMMDCCXLIX\"",
                "Explanation": "**\n\n\n\n```\n\n3000 = MMM as 1000 (M) + 1000 (M) + 1000 (M)\n 700 = DCC as 500 (D) + 100 (C) + 100 (C)\n  40 = XL as 10 (X) less of 50 (L)\n   9 = IX as 1 (I) less of 10 (X)\nNote: 49 is not 1 (I) less of 50 (L) because the conversion is based on decimal places\n\n```"
            },
            {
                "Input": "** num = 58",
                "Output": "** \"LVIII\"",
                "Explanation": "**\n\n\n\n```\n\n50 = L\n 8 = VIII\n\n```"
            },
            {
                "Input": "** num = 1994",
                "Output": "** \"MCMXCIV\"",
                "Explanation": "**\n\n\n\n```\n\n1000 = M\n 900 = CM\n  90 = XC\n   4 = IV\n\n```\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num <= 3999`\n\n\nSimilarQuestions: [13, 273]"
            }
        ]
    },
    {
        "Title": "Roman to Integer",
        "slug": "roman-to-integer",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"III\"",
                "Output": "** 3",
                "Explanation": "** III = 3."
            },
            {
                "Input": "** s = \"LVIII\"",
                "Output": "** 58",
                "Explanation": "** L = 50, V= 5, III = 3."
            },
            {
                "Input": "** s = \"MCMXCIV\"",
                "Output": "** 1994",
                "Explanation": "** M = 1000, CM = 900, XC = 90 and IV = 4."
            }
        ]
    },
    {
        "Title": "Longest Common Prefix",
        "slug": "longest-common-prefix",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** strs = [\"flower\",\"flow\",\"flight\"]",
                "Output": "** \"fl\"",
                "Explanation": null
            },
            {
                "Input": "** strs = [\"dog\",\"racecar\",\"car\"]",
                "Output": "** \"\"",
                "Explanation": "** There is no common prefix among the input strings."
            }
        ]
    },
    {
        "Title": "3Sum",
        "slug": "3sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [-1,0,1,2,-1,-4]",
                "Output": "** [[-1,-1,2],[-1,0,1]]",
                "Explanation": "** \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter."
            },
            {
                "Input": "** nums = [0,1,1]",
                "Output": "** []",
                "Explanation": "** The only possible triplet does not sum up to 0."
            },
            {
                "Input": "** nums = [0,0,0]",
                "Output": "** [[0,0,0]]",
                "Explanation": "** The only possible triplet sums up to 0."
            }
        ]
    },
    {
        "Title": "3Sum Closest",
        "slug": "3sum-closest",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [-1,2,1,-4], target = 1",
                "Output": "** 2",
                "Explanation": "** The sum that is closest to the target is 2. (-1 + 2 + 1 = 2)."
            },
            {
                "Input": "** nums = [0,0,0], target = 1",
                "Output": "** 0",
                "Explanation": "** The sum that is closest to the target is 0. (0 + 0 + 0 = 0)."
            }
        ]
    },
    {
        "Title": "Letter Combinations of a Phone Number",
        "slug": "letter-combinations-of-a-phone-number",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** digits = \"23\"",
                "Output": "** [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]",
                "Explanation": null
            },
            {
                "Input": "** digits = \"\"",
                "Output": "** []",
                "Explanation": null
            },
            {
                "Input": "** digits = \"2\"",
                "Output": "** [\"a\",\"b\",\"c\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "4Sum",
        "slug": "4sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,0,-1,0,-2,2], target = 0",
                "Output": "** [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]",
                "Explanation": null
            },
            {
                "Input": "** nums = [2,2,2,2,2], target = 8",
                "Output": "** [[2,2,2,2]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove Nth Node From End of List",
        "slug": "remove-nth-node-from-end-of-list",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [1,2,3,4,5], n = 2",
                "Output": "** [1,2,3,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Valid Parentheses",
        "slug": "valid-parentheses",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"()\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"()[]{}\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"(]\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Merge Two Sorted Lists",
        "slug": "merge-two-sorted-lists",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** list1 = [1,2,4], list2 = [1,3,4]",
                "Output": "** [1,1,2,3,4,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Generate Parentheses",
        "slug": "generate-parentheses",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]",
                "Explanation": null
            },
            {
                "Input": "** n = 1",
                "Output": "** [\"()\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Merge k Sorted Lists",
        "slug": "merge-k-sorted-lists",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** lists = [[1,4,5],[1,3,4],[2,6]]",
                "Output": "** [1,1,2,3,4,4,5,6]",
                "Explanation": "** The linked-lists are:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\nmerging them into one sorted list:\n1->1->2->3->4->4->5->6"
            },
            {
                "Input": "** lists = []",
                "Output": "** []",
                "Explanation": null
            },
            {
                "Input": "** lists = [[]]",
                "Output": "** []",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Swap Nodes in Pairs",
        "slug": "swap-nodes-in-pairs",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [1,2,3,4]",
                "Output": "** [2,1,4,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reverse Nodes in k-Group",
        "slug": "reverse-nodes-in-k-group",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** head = [1,2,3,4,5], k = 2",
                "Output": "** [2,1,4,3,5]",
                "Explanation": null
            },
            {
                "Input": "** head = [1,2,3,4,5], k = 3",
                "Output": "** [3,2,1,4,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove Duplicates from Sorted Array",
        "slug": "remove-duplicates-from-sorted-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,1,2]",
                "Output": "** 2, nums = [1,2,_]",
                "Explanation": "** Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
            },
            {
                "Input": "** nums = [0,0,1,1,1,2,2,3,3,4]",
                "Output": "** 5, nums = [0,1,2,3,4,_,_,_,_,_]",
                "Explanation": "** Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
            }
        ]
    },
    {
        "Title": "Remove Element",
        "slug": "remove-element",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [3,2,2,3], val = 3",
                "Output": "** 2, nums = [2,2,_,_]",
                "Explanation": "** Your function should return k = 2, with the first two elements of nums being 2.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
            },
            {
                "Input": "** nums = [0,1,2,2,3,0,4,2], val = 2",
                "Output": "** 5, nums = [0,1,4,0,3,_,_,_]",
                "Explanation": "** Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\nNote that the five elements can be returned in any order.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
            }
        ]
    },
    {
        "Title": "Find the Index of the First Occurrence in a String",
        "slug": "find-the-index-of-the-first-occurrence-in-a-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** haystack = \"sadbutsad\", needle = \"sad\"",
                "Output": "** 0",
                "Explanation": "** \"sad\" occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0."
            },
            {
                "Input": "** haystack = \"leetcode\", needle = \"leeto\"",
                "Output": "** -1",
                "Explanation": "** \"leeto\" did not occur in \"leetcode\", so we return -1."
            }
        ]
    },
    {
        "Title": "Divide Two Integers",
        "slug": "divide-two-integers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** dividend = 10, divisor = 3",
                "Output": "** 3",
                "Explanation": "** 10/3 = 3.33333.. which is truncated to 3."
            },
            {
                "Input": "** dividend = 7, divisor = -3",
                "Output": "** -2",
                "Explanation": "** 7/-3 = -2.33333.. which is truncated to -2."
            }
        ]
    },
    {
        "Title": "Substring with Concatenation of All Words",
        "slug": "substring-with-concatenation-of-all-words",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]",
                "Output": "** [0,9]",
                "Explanation": "**\n\n\nThe substring starting at 0 is `\"barfoo\"`. It is the concatenation of `[\"bar\",\"foo\"]` which is a permutation of `words`.  \n\nThe substring starting at 9 is `\"foobar\"`. It is the concatenation of `[\"foo\",\"bar\"]` which is a permutation of `words`."
            },
            {
                "Input": "** s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]",
                "Output": "** []",
                "Explanation": "**\n\n\nThere is no concatenated substring."
            },
            {
                "Input": "** s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]",
                "Output": "** [6,9,12]",
                "Explanation": "**\n\n\nThe substring starting at 6 is `\"foobarthe\"`. It is the concatenation of `[\"foo\",\"bar\",\"the\"]`.  \n\nThe substring starting at 9 is `\"barthefoo\"`. It is the concatenation of `[\"bar\",\"the\",\"foo\"]`.  \n\nThe substring starting at 12 is `\"thefoobar\"`. It is the concatenation of `[\"the\",\"foo\",\"bar\"]`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 104`\n* `1 <= words.length <= 5000`\n* `1 <= words[i].length <= 30`\n* `s` and `words[i]` consist of lowercase English letters.\n\n\nSimilarQuestions: [76]"
            }
        ]
    },
    {
        "Title": "Next Permutation",
        "slug": "next-permutation",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** [1,3,2]",
                "Explanation": null
            },
            {
                "Input": "** nums = [3,2,1]",
                "Output": "** [1,2,3]",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,1,5]",
                "Output": "** [1,5,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Valid Parentheses",
        "slug": "longest-valid-parentheses",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"(()\"",
                "Output": "** 2",
                "Explanation": "** The longest valid parentheses substring is \"()\"."
            },
            {
                "Input": "** s = \")()())\"",
                "Output": "** 4",
                "Explanation": "** The longest valid parentheses substring is \"()()\"."
            },
            {
                "Input": "** s = \"\"",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Search in Rotated Sorted Array",
        "slug": "search-in-rotated-sorted-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [4,5,6,7,0,1,2], target = 0",
                "Output": "** 4",
                "Explanation": null
            },
            {
                "Input": "** nums = [4,5,6,7,0,1,2], target = 3",
                "Output": "** -1",
                "Explanation": null
            },
            {
                "Input": "** nums = [1], target = 0",
                "Output": "** -1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find First and Last Position of Element in Sorted Array",
        "slug": "find-first-and-last-position-of-element-in-sorted-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [5,7,7,8,8,10], target = 8",
                "Output": "** [3,4]",
                "Explanation": null
            },
            {
                "Input": "** nums = [5,7,7,8,8,10], target = 6",
                "Output": "** [-1,-1]",
                "Explanation": null
            },
            {
                "Input": "** nums = [], target = 0",
                "Output": "** [-1,-1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Search Insert Position",
        "slug": "search-insert-position",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,3,5,6], target = 5",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,3,5,6], target = 2",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,3,5,6], target = 7",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Valid Sudoku",
        "slug": "valid-sudoku",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** board = \n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sudoku Solver",
        "slug": "sudoku-solver",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
                "Output": "** [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]",
                "Explanation": "**\u00a0The input board is shown above and the only valid solution is shown below:\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png)"
            }
        ]
    },
    {
        "Title": "Count and Say",
        "slug": "count-and-say",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** \"1211\"",
                "Explanation": "**\n\n\n\n```\n\ncountAndSay(1) = \"1\"\ncountAndSay(2) = RLE of \"1\" = \"11\"\ncountAndSay(3) = RLE of \"11\" = \"21\"\ncountAndSay(4) = RLE of \"21\" = \"1211\"\n\n```"
            },
            {
                "Input": "** n = 1",
                "Output": "** \"1\"",
                "Explanation": "**\n\n\nThis is the base case.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 30`\n\n\n\u00a0\n\n\n**Follow up:** Could you solve it iteratively?Hints:\n    0. Create a helper function that maps an integer to pairs of its digits and their frequencies. For example, if you call this function with \"223314444411\", then it maps it to an array of pairs [[2,2], [3,2], [1,1], [4,5], [1, 2]].\n    1. Create another helper function that takes the array of pairs and creates a new integer. For example, if you call this function with [[2,2], [3,2], [1,1], [4,5], [1, 2]], it should create \"22\"+\"23\"+\"11\"+\"54\"+\"21\" = \"2223115421\".\n    2. Now, with the two helper functions, you can start with \"1\" and call the two functions alternatively n-1 times. The answer is the last integer you will obtain.\nSimilarQuestions: [271, 443]"
            }
        ]
    },
    {
        "Title": "Combination Sum",
        "slug": "combination-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** candidates = [2,3,6,7], target = 7",
                "Output": "** [[2,2,3],[7]]",
                "Explanation": "**\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations."
            },
            {
                "Input": "** candidates = [2,3,5], target = 8",
                "Output": "** [[2,2,2,2],[2,3,3],[3,5]]",
                "Explanation": null
            },
            {
                "Input": "** candidates = [2], target = 1",
                "Output": "** []",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Combination Sum II",
        "slug": "combination-sum-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** candidates = [10,1,2,7,6,1,5], target = 8",
                "Output": "** \n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]",
                "Explanation": null
            },
            {
                "Input": "** candidates = [2,5,2,1,2], target = 5",
                "Output": "** \n[\n[1,2,2],\n[5]\n]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "First Missing Positive",
        "slug": "first-missing-positive",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,0]",
                "Output": "** 3",
                "Explanation": "** The numbers in the range [1,2] are all in the array."
            },
            {
                "Input": "** nums = [3,4,-1,1]",
                "Output": "** 2",
                "Explanation": "** 1 is in the array but 2 is missing."
            },
            {
                "Input": "** nums = [7,8,9,11,12]",
                "Output": "** 1",
                "Explanation": "** The smallest positive integer 1 is missing."
            }
        ]
    },
    {
        "Title": "Trapping Rain Water",
        "slug": "trapping-rain-water",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** height = [0,1,0,2,1,0,1,3,2,1,2,1]",
                "Output": "** 6",
                "Explanation": "** The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped."
            }
        ]
    },
    {
        "Title": "Multiply Strings",
        "slug": "multiply-strings",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** num1 = \"2\", num2 = \"3\"",
                "Output": "** \"6\"",
                "Explanation": null
            },
            {
                "Input": "** num1 = \"123\", num2 = \"456\"",
                "Output": "** \"56088\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Wildcard Matching",
        "slug": "wildcard-matching",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"aa\", p = \"a\"",
                "Output": "** false",
                "Explanation": "** \"a\" does not match the entire string \"aa\"."
            },
            {
                "Input": "** s = \"aa\", p = \"*\"",
                "Output": "** true",
                "Explanation": "**\u00a0'*' matches any sequence."
            },
            {
                "Input": "** s = \"cb\", p = \"?a\"",
                "Output": "** false",
                "Explanation": "**\u00a0'?' matches 'c', but the second letter is 'a', which does not match 'b'."
            }
        ]
    },
    {
        "Title": "Jump Game II",
        "slug": "jump-game-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,3,1,1,4]",
                "Output": "** 2",
                "Explanation": "** The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index."
            },
            {
                "Input": "** nums = [2,3,0,1,4]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Permutations",
        "slug": "permutations",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
                "Explanation": null
            },
            {
                "Input": "** nums = [0,1]",
                "Output": "** [[0,1],[1,0]]",
                "Explanation": null
            },
            {
                "Input": "** nums = [1]",
                "Output": "** [[1]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Permutations II",
        "slug": "permutations-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,1,2]",
                "Output": "**\n[[1,1,2],\n [1,2,1],\n [2,1,1]]",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Rotate Image",
        "slug": "rotate-image",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** matrix = [[1,2,3],[4,5,6],[7,8,9]]",
                "Output": "** [[7,4,1],[8,5,2],[9,6,3]]",
                "Explanation": null
            },
            {
                "Input": "** matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]",
                "Output": "** [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Group Anagrams",
        "slug": "group-anagrams",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]",
                "Output": "** [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
                "Explanation": null
            },
            {
                "Input": "** strs = [\"\"]",
                "Output": "** [[\"\"]]",
                "Explanation": null
            },
            {
                "Input": "** strs = [\"a\"]",
                "Output": "** [[\"a\"]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Pow(x, n)",
        "slug": "powx-n",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** x = 2.00000, n = 10",
                "Output": "** 1024.00000",
                "Explanation": null
            },
            {
                "Input": "** x = 2.10000, n = 3",
                "Output": "** 9.26100",
                "Explanation": null
            },
            {
                "Input": "** x = 2.00000, n = -2",
                "Output": "** 0.25000",
                "Explanation": "** 2-2 = 1/22 = 1/4 = 0.25"
            }
        ]
    },
    {
        "Title": "N-Queens",
        "slug": "n-queens",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]",
                "Explanation": "** There exist two distinct solutions to the 4-queens puzzle as shown above"
            }
        ]
    },
    {
        "Title": "N-Queens II",
        "slug": "n-queens-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** 2",
                "Explanation": "** There are two distinct solutions to the 4-queens puzzle as shown."
            }
        ]
    },
    {
        "Title": "Maximum Subarray",
        "slug": "maximum-subarray",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [-2,1,-3,4,-1,2,1,-5,4]",
                "Output": "** 6",
                "Explanation": "** The subarray [4,-1,2,1] has the largest sum 6."
            },
            {
                "Input": "** nums = [1]",
                "Output": "** 1",
                "Explanation": "** The subarray [1] has the largest sum 1."
            },
            {
                "Input": "** nums = [5,4,-1,7,8]",
                "Output": "** 23",
                "Explanation": "** The subarray [5,4,-1,7,8] has the largest sum 23."
            }
        ]
    },
    {
        "Title": "Spiral Matrix",
        "slug": "spiral-matrix",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** matrix = [[1,2,3],[4,5,6],[7,8,9]]",
                "Output": "** [1,2,3,6,9,8,7,4,5]",
                "Explanation": null
            },
            {
                "Input": "** matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
                "Output": "** [1,2,3,4,8,12,11,10,9,5,6,7]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Jump Game",
        "slug": "jump-game",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,3,1,1,4]",
                "Output": "** true",
                "Explanation": "** Jump 1 step from index 0 to 1, then 3 steps to the last index."
            },
            {
                "Input": "** nums = [3,2,1,0,4]",
                "Output": "** false",
                "Explanation": "** You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index."
            }
        ]
    },
    {
        "Title": "Insert Interval",
        "slug": "insert-interval",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** intervals = [[1,3],[6,9]], newInterval = [2,5]",
                "Output": "** [[1,5],[6,9]]",
                "Explanation": null
            },
            {
                "Input": "** intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]",
                "Output": "** [[1,2],[3,10],[12,16]]",
                "Explanation": "** Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10]."
            }
        ]
    },
    {
        "Title": "Length of Last Word",
        "slug": "length-of-last-word",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"Hello World\"",
                "Output": "** 5",
                "Explanation": "** The last word is \"World\" with length 5."
            },
            {
                "Input": "** s = \"   fly me   to   the moon  \"",
                "Output": "** 4",
                "Explanation": "** The last word is \"moon\" with length 4."
            },
            {
                "Input": "** s = \"luffy is still joyboy\"",
                "Output": "** 6",
                "Explanation": "** The last word is \"joyboy\" with length 6."
            }
        ]
    },
    {
        "Title": "Spiral Matrix II",
        "slug": "spiral-matrix-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** [[1,2,3],[8,9,4],[7,6,5]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Permutation Sequence",
        "slug": "permutation-sequence",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 3, k = 3",
                "Output": "** \"213\"",
                "Explanation": null
            },
            {
                "Input": "** n = 4, k = 9",
                "Output": "** \"2314\"",
                "Explanation": null
            },
            {
                "Input": "** n = 3, k = 1",
                "Output": "** \"123\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Rotate List",
        "slug": "rotate-list",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [1,2,3,4,5], k = 2",
                "Output": "** [4,5,1,2,3]",
                "Explanation": null
            },
            {
                "Input": "** head = [0,1,2], k = 4",
                "Output": "** [2,0,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Unique Paths",
        "slug": "unique-paths",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** m = 3, n = 7",
                "Output": "** 28",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Unique Paths II",
        "slug": "unique-paths-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]",
                "Output": "** 2",
                "Explanation": "** There is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -> Right -> Down -> Down\n2. Down -> Down -> Right -> Right"
            },
            {
                "Input": "** obstacleGrid = [[0,1],[0,0]]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Path Sum",
        "slug": "minimum-path-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[1,3,1],[1,5,1],[4,2,1]]",
                "Output": "** 7",
                "Explanation": "** Because the path 1 \u2192 3 \u2192 1 \u2192 1 \u2192 1 minimizes the sum."
            }
        ]
    },
    {
        "Title": "Valid Number",
        "slug": "valid-number",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"0\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"e\"",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** s = \".\"",
                "Output": "** false\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 20`\n* `s` consists of only English letters (both uppercase and lowercase), digits (`0-9`), plus `'+'`, minus `'-'`, or dot `'.'`.\n\n\nSimilarQuestions: [8]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Plus One",
        "slug": "plus-one",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** digits = [1,2,3]",
                "Output": "** [1,2,4]",
                "Explanation": "** The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\nThus, the result should be [1,2,4]."
            },
            {
                "Input": "** digits = [4,3,2,1]",
                "Output": "** [4,3,2,2]",
                "Explanation": "** The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\nThus, the result should be [4,3,2,2]."
            },
            {
                "Input": "** digits = [9]",
                "Output": "** [1,0]",
                "Explanation": "** The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be [1,0]."
            }
        ]
    },
    {
        "Title": "Add Binary",
        "slug": "add-binary",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** a = \"11\", b = \"1\"",
                "Output": "** \"100\"",
                "Explanation": null
            },
            {
                "Input": "** a = \"1010\", b = \"1011\"",
                "Output": "** \"10101\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Text Justification",
        "slug": "text-justification",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16",
                "Output": "**\n[\n\u00a0 \u00a0\"This \u00a0 \u00a0is \u00a0 \u00a0an\",\n\u00a0 \u00a0\"example \u00a0of text\",\n\u00a0 \u00a0\"justification. \u00a0\"\n]",
                "Explanation": null
            },
            {
                "Input": "** words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16",
                "Output": "**\n[\n\u00a0 \"What \u00a0 must \u00a0 be\",\n\u00a0 \"acknowledgment \u00a0\",\n\u00a0 \"shall be \u00a0 \u00a0 \u00a0 \u00a0\"\n]",
                "Explanation": "** Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.\nNote that the second line is also left-justified because it contains only one word."
            },
            {
                "Input": "** words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20",
                "Output": "**\n[\n\u00a0 \"Science \u00a0is \u00a0what we\",\n  \"understand \u00a0 \u00a0 \u00a0well\",\n\u00a0 \"enough to explain to\",\n\u00a0 \"a \u00a0computer. \u00a0Art is\",\n\u00a0 \"everything \u00a0else \u00a0we\",\n\u00a0 \"do \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"\n]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sqrt(x)",
        "slug": "sqrtx",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** x = 4",
                "Output": "** 2",
                "Explanation": "** The square root of 4 is 2, so we return 2."
            },
            {
                "Input": "** x = 8",
                "Output": "** 2",
                "Explanation": "** The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned."
            }
        ]
    },
    {
        "Title": "Climbing Stairs",
        "slug": "climbing-stairs",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** 2",
                "Explanation": "** There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps"
            },
            {
                "Input": "** n = 3",
                "Output": "** 3",
                "Explanation": "** There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step"
            }
        ]
    },
    {
        "Title": "Simplify Path",
        "slug": "simplify-path",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** path = \"/home/\"",
                "Output": "** \"/home\"",
                "Explanation": "**\n\n\nThe trailing slash should be removed."
            },
            {
                "Input": "** path = \"/home//foo/\"",
                "Output": "** \"/home/foo\"",
                "Explanation": "**\n\n\nMultiple consecutive slashes are replaced by a single one."
            },
            {
                "Input": "** path = \"/home/user/Documents/../Pictures\"",
                "Output": "** \"/home/user/Pictures\"",
                "Explanation": "**\n\n\nA double period `\"..\"` refers to the directory up a level."
            },
            {
                "Input": "** path = \"/../\"",
                "Output": "** \"/\"",
                "Explanation": "**\n\n\nGoing one level up from the root directory is not possible."
            },
            {
                "Input": "** path = \"/.../a/../b/c/../d/./\"",
                "Output": "** \"/.../b/d\"",
                "Explanation": "**\n\n\n`\"...\"` is a valid name for a directory in this problem.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= path.length <= 3000`\n* `path` consists of English letters, digits, period `'.'`, slash `'/'` or `'_'`.\n* `path` is a valid absolute Unix path."
            }
        ]
    },
    {
        "Title": "Edit Distance",
        "slug": "edit-distance",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** word1 = \"horse\", word2 = \"ros\"",
                "Output": "** 3",
                "Explanation": "** \nhorse -> rorse (replace 'h' with 'r')\nrorse -> rose (remove 'r')\nrose -> ros (remove 'e')"
            },
            {
                "Input": "** word1 = \"intention\", word2 = \"execution\"",
                "Output": "** 5",
                "Explanation": "** \nintention -> inention (remove 't')\ninention -> enention (replace 'i' with 'e')\nenention -> exention (replace 'n' with 'x')\nexention -> exection (replace 'n' with 'c')\nexection -> execution (insert 'u')"
            }
        ]
    },
    {
        "Title": "Set Matrix Zeroes",
        "slug": "set-matrix-zeroes",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** matrix = [[1,1,1],[1,0,1],[1,1,1]]",
                "Output": "** [[1,0,1],[0,0,0],[1,0,1]]",
                "Explanation": null
            },
            {
                "Input": "** matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]",
                "Output": "** [[0,0,0,0],[0,4,5,0],[0,3,1,0]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Search a 2D Matrix",
        "slug": "search-a-2d-matrix",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sort Colors",
        "slug": "sort-colors",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,0,2,1,1,0]",
                "Output": "** [0,0,1,1,2,2]",
                "Explanation": null
            },
            {
                "Input": "** nums = [2,0,1]",
                "Output": "** [0,1,2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Window Substring",
        "slug": "minimum-window-substring",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"ADOBECODEBANC\", t = \"ABC\"",
                "Output": "** \"BANC\"",
                "Explanation": "** The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t."
            },
            {
                "Input": "** s = \"a\", t = \"a\"",
                "Output": "** \"a\"",
                "Explanation": "** The entire string s is the minimum window."
            },
            {
                "Input": "** s = \"a\", t = \"aa\"",
                "Output": "** \"\"",
                "Explanation": "** Both 'a's from t must be included in the window.\nSince the largest window of s only has one 'a', return empty string."
            }
        ]
    },
    {
        "Title": "Combinations",
        "slug": "combinations",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 4, k = 2",
                "Output": "** [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]",
                "Explanation": "** There are 4 choose 2 = 6 total combinations.\nNote that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination."
            },
            {
                "Input": "** n = 1, k = 1",
                "Output": "** [[1]]",
                "Explanation": "** There is 1 choose 1 = 1 total combination."
            }
        ]
    },
    {
        "Title": "Subsets",
        "slug": "subsets",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]",
                "Explanation": null
            },
            {
                "Input": "** nums = [0]",
                "Output": "** [[],[0]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Word Search",
        "slug": "word-search",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove Duplicates from Sorted Array II",
        "slug": "remove-duplicates-from-sorted-array-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,1,1,2,2,3]",
                "Output": "** 5, nums = [1,1,2,2,3,_]",
                "Explanation": "** Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
            },
            {
                "Input": "** nums = [0,0,1,1,1,1,2,3,3]",
                "Output": "** 7, nums = [0,0,1,1,2,3,3,_,_]",
                "Explanation": "** Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
            }
        ]
    },
    {
        "Title": "Search in Rotated Sorted Array II",
        "slug": "search-in-rotated-sorted-array-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,5,6,0,0,1,2], target = 0",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** nums = [2,5,6,0,0,1,2], target = 3",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove Duplicates from Sorted List II",
        "slug": "remove-duplicates-from-sorted-list-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [1,2,3,3,4,4,5]",
                "Output": "** [1,2,5]",
                "Explanation": null
            },
            {
                "Input": "** head = [1,1,1,2,3]",
                "Output": "** [2,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove Duplicates from Sorted List",
        "slug": "remove-duplicates-from-sorted-list",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** head = [1,1,2]",
                "Output": "** [1,2]",
                "Explanation": null
            },
            {
                "Input": "** head = [1,1,2,3,3]",
                "Output": "** [1,2,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Largest Rectangle in Histogram",
        "slug": "largest-rectangle-in-histogram",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** heights = [2,1,5,6,2,3]",
                "Output": "** 10",
                "Explanation": "** The above is a histogram where width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units."
            },
            {
                "Input": "** heights = [2,4]",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximal Rectangle",
        "slug": "maximal-rectangle",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]",
                "Output": "** 6",
                "Explanation": "** The maximal rectangle is shown in the above picture."
            }
        ]
    },
    {
        "Title": "Partition List",
        "slug": "partition-list",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [1,4,3,2,5,2], x = 3",
                "Output": "** [1,2,2,4,3,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Scramble String",
        "slug": "scramble-string",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s1 = \"great\", s2 = \"rgeat\"",
                "Output": "** true",
                "Explanation": "** One possible scenario applied on s1 is:\n\"great\" --> \"gr/eat\" // divide at random index.\n\"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\n\"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at random index each of them.\n\"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\n\"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\n\"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\nThe algorithm stops now, and the result string is \"rgeat\" which is s2.\nAs one possible scenario led s1 to be scrambled to s2, we return true."
            },
            {
                "Input": "** s1 = \"abcde\", s2 = \"caebd\"",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** s1 = \"a\", s2 = \"a\"",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Merge Sorted Array",
        "slug": "merge-sorted-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3",
                "Output": "** [1,2,2,3,5,6]",
                "Explanation": "** The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1."
            },
            {
                "Input": "** nums1 = [1], m = 1, nums2 = [], n = 0",
                "Output": "** [1]",
                "Explanation": "** The arrays we are merging are [1] and [].\nThe result of the merge is [1]."
            },
            {
                "Input": "** nums1 = [0], m = 0, nums2 = [1], n = 1",
                "Output": "** [1]",
                "Explanation": "** The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1."
            }
        ]
    },
    {
        "Title": "Gray Code",
        "slug": "gray-code",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** [0,1,3,2]",
                "Explanation": "**\nThe binary representation of [0,1,3,2] is [00,01,11,10].\n- 00 and 01 differ by one bit\n- 01 and 11 differ by one bit\n- 11 and 10 differ by one bit\n- 10 and 00 differ by one bit\n[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n- 00 and 10 differ by one bit\n- 10 and 11 differ by one bit\n- 11 and 01 differ by one bit\n- 01 and 00 differ by one bit"
            },
            {
                "Input": "** n = 1",
                "Output": "** [0,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Subsets II",
        "slug": "subsets-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,2]",
                "Output": "** [[],[1],[1,2],[1,2,2],[2],[2,2]]",
                "Explanation": null
            },
            {
                "Input": "** nums = [0]",
                "Output": "** [[],[0]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Decode Ways",
        "slug": "decode-ways",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"12\"",
                "Output": "** 2",
                "Explanation": "** \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12)."
            },
            {
                "Input": "** s = \"226\"",
                "Output": "** 3",
                "Explanation": "** \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6)."
            },
            {
                "Input": "** s = \"06\"",
                "Output": "** 0",
                "Explanation": "** \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\")."
            }
        ]
    },
    {
        "Title": "Reverse Linked List II",
        "slug": "reverse-linked-list-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [1,2,3,4,5], left = 2, right = 4",
                "Output": "** [1,4,3,2,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Restore IP Addresses",
        "slug": "restore-ip-addresses",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"25525511135\"",
                "Output": "** [\"255.255.11.135\",\"255.255.111.35\"]",
                "Explanation": null
            },
            {
                "Input": "** s = \"0000\"",
                "Output": "** [\"0.0.0.0\"]",
                "Explanation": null
            },
            {
                "Input": "** s = \"101023\"",
                "Output": "** [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Tree Inorder Traversal",
        "slug": "binary-tree-inorder-traversal",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [1,null,2,3]",
                "Output": "** [1,3,2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Unique Binary Search Trees II",
        "slug": "unique-binary-search-trees-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Unique Binary Search Trees",
        "slug": "unique-binary-search-trees",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** 5",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Interleaving String",
        "slug": "interleaving-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"",
                "Output": "** true",
                "Explanation": "** One way to obtain s3 is:\nSplit s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\".\nInterleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".\nSince s3 can be obtained by interleaving s1 and s2, we return true."
            }
        ]
    },
    {
        "Title": "Validate Binary Search Tree",
        "slug": "validate-binary-search-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [2,1,3]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** root = [5,1,4,null,null,3,6]",
                "Output": "** false",
                "Explanation": "** The root node's value is 5 but its right child's value is 4."
            }
        ]
    },
    {
        "Title": "Recover Binary Search Tree",
        "slug": "recover-binary-search-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,3,null,null,2]",
                "Output": "** [3,1,null,null,2]",
                "Explanation": "** 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid."
            },
            {
                "Input": "** root = [3,1,4,null,null,2]",
                "Output": "** [2,1,4,null,null,3]",
                "Explanation": "** 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid."
            }
        ]
    },
    {
        "Title": "Same Tree",
        "slug": "same-tree",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** p = [1,2,3], q = [1,2,3]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** p = [1,2], q = [1,null,2]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** p = [1,2,1], q = [1,1,2]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Symmetric Tree",
        "slug": "symmetric-tree",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [1,2,2,3,4,4,3]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** root = [1,2,2,null,3,null,3]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Tree Level Order Traversal",
        "slug": "binary-tree-level-order-traversal",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [3,9,20,null,null,15,7]",
                "Output": "** [[3],[9,20],[15,7]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Tree Zigzag Level Order Traversal",
        "slug": "binary-tree-zigzag-level-order-traversal",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [3,9,20,null,null,15,7]",
                "Output": "** [[3],[20,9],[15,7]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Depth of Binary Tree",
        "slug": "maximum-depth-of-binary-tree",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [3,9,20,null,null,15,7]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "slug": "construct-binary-tree-from-preorder-and-inorder-traversal",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]",
                "Output": "** [3,9,20,null,null,15,7]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "slug": "construct-binary-tree-from-inorder-and-postorder-traversal",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]",
                "Output": "** [3,9,20,null,null,15,7]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Tree Level Order Traversal II",
        "slug": "binary-tree-level-order-traversal-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [3,9,20,null,null,15,7]",
                "Output": "** [[15,7],[9,20],[3]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Convert Sorted Array to Binary Search Tree",
        "slug": "convert-sorted-array-to-binary-search-tree",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [-10,-3,0,5,9]",
                "Output": "** [0,-3,9,-10,null,5]",
                "Explanation": "** [0,-10,5,null,-3,null,9] is also accepted:\n![](https://assets.leetcode.com/uploads/2021/02/18/btree2.jpg)"
            },
            {
                "Input": "** nums = [1,3]",
                "Output": "** [3,1]",
                "Explanation": "** [1,null,3] and [3,1] are both height-balanced BSTs."
            }
        ]
    },
    {
        "Title": "Convert Sorted List to Binary Search Tree",
        "slug": "convert-sorted-list-to-binary-search-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [-10,-3,0,5,9]",
                "Output": "** [0,-3,9,-10,null,5]",
                "Explanation": "** One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST."
            }
        ]
    },
    {
        "Title": "Balanced Binary Tree",
        "slug": "balanced-binary-tree",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [3,9,20,null,null,15,7]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** root = [1,2,2,3,3,null,null,4,4]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Depth of Binary Tree",
        "slug": "minimum-depth-of-binary-tree",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [3,9,20,null,null,15,7]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Path Sum",
        "slug": "path-sum",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22",
                "Output": "** true",
                "Explanation": "** The root-to-leaf path with the target sum is shown."
            },
            {
                "Input": "** root = [1,2,3], targetSum = 5",
                "Output": "** false",
                "Explanation": "** There two root-to-leaf paths in the tree:\n(1 --> 2): The sum is 3.\n(1 --> 3): The sum is 4.\nThere is no root-to-leaf path with sum = 5."
            }
        ]
    },
    {
        "Title": "Path Sum II",
        "slug": "path-sum-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22",
                "Output": "** [[5,4,11,2],[5,8,4,5]]",
                "Explanation": "** There are two paths whose sum equals targetSum:\n5 + 4 + 11 + 2 = 22\n5 + 8 + 4 + 5 = 22"
            },
            {
                "Input": "** root = [1,2,3], targetSum = 5",
                "Output": "** []",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Flatten Binary Tree to Linked List",
        "slug": "flatten-binary-tree-to-linked-list",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,2,5,3,4,null,6]",
                "Output": "** [1,null,2,null,3,null,4,null,5,null,6]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Distinct Subsequences",
        "slug": "distinct-subsequences",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"rabbbit\", t = \"rabbit\"",
                "Output": "** 3",
                "Explanation": "**\nAs shown below, there are 3 ways you can generate \"rabbit\" from s.\n**rabb**b**it**\n**ra**b**bbit**\n**rab**b**bit**"
            },
            {
                "Input": "** s = \"babgbag\", t = \"bag\"",
                "Output": "** 5",
                "Explanation": "**\nAs shown below, there are 5 ways you can generate \"bag\" from s.\n**ba**b**g**bag\n**ba**bgba**g**\n**b**abgb**ag**\nba**b**gb**ag**\nbabg**bag**"
            }
        ]
    },
    {
        "Title": "Populating Next Right Pointers in Each Node",
        "slug": "populating-next-right-pointers-in-each-node",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,2,3,4,5,6,7]",
                "Output": "** [1,#,2,3,#,4,5,6,7,#]",
                "Explanation": "** Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level."
            }
        ]
    },
    {
        "Title": "Populating Next Right Pointers in Each Node II",
        "slug": "populating-next-right-pointers-in-each-node-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,2,3,4,5,null,7]",
                "Output": "** [1,#,2,3,#,4,5,7,#]",
                "Explanation": "** Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level."
            }
        ]
    },
    {
        "Title": "Pascal's Triangle",
        "slug": "pascals-triangle",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** numRows = 5",
                "Output": "** [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]",
                "Explanation": null
            },
            {
                "Input": "** numRows = 1",
                "Output": "** [[1]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Pascal's Triangle II",
        "slug": "pascals-triangle-ii",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** rowIndex = 3",
                "Output": "** [1,3,3,1]",
                "Explanation": null
            },
            {
                "Input": "** rowIndex = 0",
                "Output": "** [1]",
                "Explanation": null
            },
            {
                "Input": "** rowIndex = 1",
                "Output": "** [1,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Triangle",
        "slug": "triangle",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]",
                "Output": "** 11",
                "Explanation": "** The triangle looks like:\n   2\n  3 4\n 6 5 7\n4 1 8 3\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above)."
            },
            {
                "Input": "** triangle = [[-10]]",
                "Output": "** -10",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Best Time to Buy and Sell Stock",
        "slug": "best-time-to-buy-and-sell-stock",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** prices = [7,1,5,3,6,4]",
                "Output": "** 5",
                "Explanation": "** Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell."
            },
            {
                "Input": "** prices = [7,6,4,3,1]",
                "Output": "** 0",
                "Explanation": "** In this case, no transactions are done and the max profit = 0."
            }
        ]
    },
    {
        "Title": "Best Time to Buy and Sell Stock II",
        "slug": "best-time-to-buy-and-sell-stock-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** prices = [7,1,5,3,6,4]",
                "Output": "** 7",
                "Explanation": "** Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\nTotal profit is 4 + 3 = 7."
            },
            {
                "Input": "** prices = [1,2,3,4,5]",
                "Output": "** 4",
                "Explanation": "** Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nTotal profit is 4."
            },
            {
                "Input": "** prices = [7,6,4,3,1]",
                "Output": "** 0",
                "Explanation": "** There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0."
            }
        ]
    },
    {
        "Title": "Best Time to Buy and Sell Stock III",
        "slug": "best-time-to-buy-and-sell-stock-iii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** prices = [3,3,5,0,0,3,1,4]",
                "Output": "** 6",
                "Explanation": "** Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3."
            },
            {
                "Input": "** prices = [1,2,3,4,5]",
                "Output": "** 4",
                "Explanation": "** Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again."
            },
            {
                "Input": "** prices = [7,6,4,3,1]",
                "Output": "** 0",
                "Explanation": "** In this case, no transaction is done, i.e. max profit = 0."
            }
        ]
    },
    {
        "Title": "Binary Tree Maximum Path Sum",
        "slug": "binary-tree-maximum-path-sum",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** root = [1,2,3]",
                "Output": "** 6",
                "Explanation": "** The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6."
            },
            {
                "Input": "** root = [-10,9,20,null,null,15,7]",
                "Output": "** 42",
                "Explanation": "** The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42."
            }
        ]
    },
    {
        "Title": "Valid Palindrome",
        "slug": "valid-palindrome",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"A man, a plan, a canal: Panama\"",
                "Output": "** true",
                "Explanation": "** \"amanaplanacanalpanama\" is a palindrome."
            },
            {
                "Input": "** s = \"race a car\"",
                "Output": "** false",
                "Explanation": "** \"raceacar\" is not a palindrome."
            },
            {
                "Input": "** s = \" \"",
                "Output": "** true",
                "Explanation": "** s is an empty string \"\" after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome."
            }
        ]
    },
    {
        "Title": "Word Ladder II",
        "slug": "word-ladder-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]",
                "Output": "** [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]",
                "Explanation": "**\u00a0There are 2 shortest transformation sequences:\n\"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\n\"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\""
            },
            {
                "Input": "** beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]",
                "Output": "** []",
                "Explanation": "** The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence."
            }
        ]
    },
    {
        "Title": "Word Ladder",
        "slug": "word-ladder",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]",
                "Output": "** 5",
                "Explanation": "** One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long."
            },
            {
                "Input": "** beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]",
                "Output": "** 0",
                "Explanation": "** The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence."
            }
        ]
    },
    {
        "Title": "Longest Consecutive Sequence",
        "slug": "longest-consecutive-sequence",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [100,4,200,1,3,2]",
                "Output": "** 4",
                "Explanation": "** The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4."
            },
            {
                "Input": "** nums = [0,3,7,2,5,8,4,6,0,1]",
                "Output": "** 9",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sum Root to Leaf Numbers",
        "slug": "sum-root-to-leaf-numbers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,2,3]",
                "Output": "** 25",
                "Explanation": "**\nThe root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25."
            },
            {
                "Input": "** root = [4,9,0,5,1]",
                "Output": "** 1026",
                "Explanation": "**\nThe root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026."
            }
        ]
    },
    {
        "Title": "Surrounded Regions",
        "slug": "surrounded-regions",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]",
                "Output": "** [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]",
                "Explanation": "**\n\n\n![](https://assets.leetcode.com/uploads/2021/02/19/xogrid.jpg)\nIn the above diagram, the bottom region is not captured because it is on the edge of the board and cannot be surrounded."
            },
            {
                "Input": "** board = [[\"X\"]]",
                "Output": "** [[\"X\"]]\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == board.length`\n* `n == board[i].length`\n* `1 <= m, n <= 200`\n* `board[i][j]` is `'X'` or `'O'`.\n\n\nSimilarQuestions: [200, 286]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Palindrome Partitioning",
        "slug": "palindrome-partitioning",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"aab\"",
                "Output": "** [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]",
                "Explanation": null
            },
            {
                "Input": "** s = \"a\"",
                "Output": "** [[\"a\"]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Palindrome Partitioning II",
        "slug": "palindrome-partitioning-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"aab\"",
                "Output": "** 1",
                "Explanation": "** The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut."
            },
            {
                "Input": "** s = \"a\"",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** s = \"ab\"",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Clone Graph",
        "slug": "clone-graph",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** adjList = [[2,4],[1,3],[2,4],[1,3]]",
                "Output": "** [[2,4],[1,3],[2,4],[1,3]]",
                "Explanation": "** There are 4 nodes in the graph.\n1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3)."
            },
            {
                "Input": "** adjList = [[]]",
                "Output": "** [[]]",
                "Explanation": "** Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors."
            }
        ]
    },
    {
        "Title": "Gas Station",
        "slug": "gas-station",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** gas = [1,2,3,4,5], cost = [3,4,5,1,2]",
                "Output": "** 3",
                "Explanation": "**\nStart at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\nTherefore, return 3 as the starting index."
            },
            {
                "Input": "** gas = [2,3,4], cost = [3,4,3]",
                "Output": "** -1",
                "Explanation": "**\nYou can't start at station 0 or 1, as there is not enough gas to travel to the next station.\nLet's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\nTherefore, you can't travel around the circuit once no matter where you start."
            }
        ]
    },
    {
        "Title": "Candy",
        "slug": "candy",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** ratings = [1,0,2]",
                "Output": "** 5",
                "Explanation": "** You can allocate to the first, second and third child with 2, 1, 2 candies respectively."
            },
            {
                "Input": "** ratings = [1,2,2]",
                "Output": "** 4",
                "Explanation": "** You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions."
            }
        ]
    },
    {
        "Title": "Single Number",
        "slug": "single-number",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [2,2,1]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** nums = [4,1,2,1,2]",
                "Output": "** 4",
                "Explanation": null
            },
            {
                "Input": "** nums = [1]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Single Number II",
        "slug": "single-number-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,2,3,2]",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** nums = [0,1,0,1,0,1,99]",
                "Output": "** 99",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Copy List with Random Pointer",
        "slug": "copy-list-with-random-pointer",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [[7,null],[13,0],[11,4],[10,2],[1,0]]",
                "Output": "** [[7,null],[13,0],[11,4],[10,2],[1,0]]",
                "Explanation": null
            },
            {
                "Input": "** head = [[1,1],[2,1]]",
                "Output": "** [[1,1],[2,1]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Word Break",
        "slug": "word-break",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"leetcode\", wordDict = [\"leet\",\"code\"]",
                "Output": "** true",
                "Explanation": "** Return true because \"leetcode\" can be segmented as \"leet code\"."
            },
            {
                "Input": "** s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]",
                "Output": "** true",
                "Explanation": "** Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\nNote that you are allowed to reuse a dictionary word."
            },
            {
                "Input": "** s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Word Break II",
        "slug": "word-break-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]",
                "Output": "** [\"cats and dog\",\"cat sand dog\"]",
                "Explanation": null
            },
            {
                "Input": "** s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]",
                "Output": "** [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]",
                "Explanation": "** Note that you are allowed to reuse a dictionary word."
            },
            {
                "Input": "** s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]",
                "Output": "** []",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Linked List Cycle",
        "slug": "linked-list-cycle",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** head = [3,2,0,-4], pos = 1",
                "Output": "** true",
                "Explanation": "** There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed)."
            },
            {
                "Input": "** head = [1,2], pos = 0",
                "Output": "** true",
                "Explanation": "** There is a cycle in the linked list, where the tail connects to the 0th node."
            },
            {
                "Input": "** head = [1], pos = -1",
                "Output": "** false",
                "Explanation": "** There is no cycle in the linked list."
            }
        ]
    },
    {
        "Title": "Linked List Cycle II",
        "slug": "linked-list-cycle-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [3,2,0,-4], pos = 1",
                "Output": "** tail connects to node index 1",
                "Explanation": "** There is a cycle in the linked list, where tail connects to the second node."
            },
            {
                "Input": "** head = [1,2], pos = 0",
                "Output": "** tail connects to node index 0",
                "Explanation": "** There is a cycle in the linked list, where tail connects to the first node."
            },
            {
                "Input": "** head = [1], pos = -1",
                "Output": "** no cycle",
                "Explanation": "** There is no cycle in the linked list."
            }
        ]
    },
    {
        "Title": "Reorder List",
        "slug": "reorder-list",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [1,2,3,4]",
                "Output": "** [1,4,2,3]",
                "Explanation": null
            },
            {
                "Input": "** head = [1,2,3,4,5]",
                "Output": "** [1,5,2,4,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Tree Preorder Traversal",
        "slug": "binary-tree-preorder-traversal",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [1,null,2,3]",
                "Output": "** [1,2,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Tree Postorder Traversal",
        "slug": "binary-tree-postorder-traversal",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [1,null,2,3]",
                "Output": "** [3,2,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "LRU Cache",
        "slug": "lru-cache",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]",
                "Output": "[null, null, null, 1, null, -1, null, -1, 3, 4]",
                "Explanation": "LRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4"
            }
        ]
    },
    {
        "Title": "Insertion Sort List",
        "slug": "insertion-sort-list",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [4,2,1,3]",
                "Output": "** [1,2,3,4]",
                "Explanation": null
            },
            {
                "Input": "** head = [-1,5,3,4,0]",
                "Output": "** [-1,0,3,4,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sort List",
        "slug": "sort-list",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [4,2,1,3]",
                "Output": "** [1,2,3,4]",
                "Explanation": null
            },
            {
                "Input": "** head = [-1,5,3,4,0]",
                "Output": "** [-1,0,3,4,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Max Points on a Line",
        "slug": "max-points-on-a-line",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** points = [[1,1],[2,2],[3,3]]",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Evaluate Reverse Polish Notation",
        "slug": "evaluate-reverse-polish-notation",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]",
                "Output": "** 9",
                "Explanation": "** ((2 + 1) * 3) = 9"
            },
            {
                "Input": "** tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]",
                "Output": "** 6",
                "Explanation": "** (4 + (13 / 5)) = 6"
            },
            {
                "Input": "** tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]",
                "Output": "** 22",
                "Explanation": "** ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22"
            }
        ]
    },
    {
        "Title": "Reverse Words in a String",
        "slug": "reverse-words-in-a-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"the sky is blue\"",
                "Output": "** \"blue is sky the\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"  hello world  \"",
                "Output": "** \"world hello\"",
                "Explanation": "** Your reversed string should not contain leading or trailing spaces."
            },
            {
                "Input": "** s = \"a good   example\"",
                "Output": "** \"example good a\"",
                "Explanation": "** You need to reduce multiple spaces between two words to a single space in the reversed string."
            }
        ]
    },
    {
        "Title": "Maximum Product Subarray",
        "slug": "maximum-product-subarray",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,3,-2,4]",
                "Output": "** 6",
                "Explanation": "** [2,3] has the largest product 6."
            },
            {
                "Input": "** nums = [-2,0,-1]",
                "Output": "** 0",
                "Explanation": "** The result cannot be 2, because [-2,-1] is not a subarray."
            }
        ]
    },
    {
        "Title": "Find Minimum in Rotated Sorted Array",
        "slug": "find-minimum-in-rotated-sorted-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,4,5,1,2]",
                "Output": "** 1",
                "Explanation": "** The original array was [1,2,3,4,5] rotated 3 times."
            },
            {
                "Input": "** nums = [4,5,6,7,0,1,2]",
                "Output": "** 0",
                "Explanation": "** The original array was [0,1,2,4,5,6,7] and it was rotated 4 times."
            },
            {
                "Input": "** nums = [11,13,15,17]",
                "Output": "** 11",
                "Explanation": "** The original array was [11,13,15,17] and it was rotated 4 times."
            }
        ]
    },
    {
        "Title": "Find Minimum in Rotated Sorted Array II",
        "slug": "find-minimum-in-rotated-sorted-array-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,3,5]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** nums = [2,2,2,0,1]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Min Stack",
        "slug": "min-stack",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]",
                "Output": "[null,null,null,null,-3,null,0,-2]",
                "Explanation": "MinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2"
            }
        ]
    },
    {
        "Title": "Intersection of Two Linked Lists",
        "slug": "intersection-of-two-linked-lists",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3",
                "Output": "** Intersected at '8'",
                "Explanation": "** The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n- Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory."
            },
            {
                "Input": "** intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1",
                "Output": "** Intersected at '2'",
                "Explanation": "** The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B."
            },
            {
                "Input": "** intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2",
                "Output": "** No intersection",
                "Explanation": "** From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null."
            }
        ]
    },
    {
        "Title": "Find Peak Element",
        "slug": "find-peak-element",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3,1]",
                "Output": "** 2",
                "Explanation": "** 3 is a peak element and your function should return the index number 2."
            },
            {
                "Input": "** nums = [1,2,1,3,5,6,4]",
                "Output": "** 5",
                "Explanation": "** Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6."
            }
        ]
    },
    {
        "Title": "Maximum Gap",
        "slug": "maximum-gap",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,6,9,1]",
                "Output": "** 3",
                "Explanation": "** The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3."
            },
            {
                "Input": "** nums = [10]",
                "Output": "** 0",
                "Explanation": "** The array contains less than 2 elements, therefore return 0."
            }
        ]
    },
    {
        "Title": "Compare Version Numbers",
        "slug": "compare-version-numbers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** version1 = \"1.2\", version2 = \"1.10\"",
                "Output": "** -1",
                "Explanation": "**\n\n\nversion1's second revision is \"2\" and version2's second revision is \"10\": 2 < 10, so version1 < version2."
            },
            {
                "Input": "** version1 = \"1.01\", version2 = \"1.001\"",
                "Output": "** 0",
                "Explanation": "**\n\n\nIgnoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\"."
            },
            {
                "Input": "** version1 = \"1.0\", version2 = \"1.0.0.0\"",
                "Output": "** 0",
                "Explanation": "**\n\n\nversion1 has less revisions, which means every missing revision are treated as \"0\".\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= version1.length, version2.length <= 500`\n* `version1` and `version2`\u00a0only contain digits and `'.'`.\n* `version1` and `version2`\u00a0**are valid version numbers**.\n* All the given revisions in\u00a0`version1` and `version2`\u00a0can be stored in\u00a0a\u00a0**32-bit integer**.\n\n\nHints:\n    0. You can use two pointers for each version string to traverse them together while comparing the corresponding segments.\n    1. Utilize the substring method to extract each version segment delimited by '.'. Ensure you're extracting the segments correctly by adjusting the start and end indices accordingly."
            }
        ]
    },
    {
        "Title": "Fraction to Recurring Decimal",
        "slug": "fraction-to-recurring-decimal",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** numerator = 1, denominator = 2",
                "Output": "** \"0.5\"",
                "Explanation": null
            },
            {
                "Input": "** numerator = 2, denominator = 1",
                "Output": "** \"2\"",
                "Explanation": null
            },
            {
                "Input": "** numerator = 4, denominator = 333",
                "Output": "** \"0.(012)\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Two Sum II - Input Array Is Sorted",
        "slug": "two-sum-ii-input-array-is-sorted",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** numbers = [2,7,11,15], target = 9",
                "Output": "** [1,2]",
                "Explanation": "** The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2]."
            },
            {
                "Input": "** numbers = [2,3,4], target = 6",
                "Output": "** [1,3]",
                "Explanation": "** The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3]."
            },
            {
                "Input": "** numbers = [-1,0], target = -1",
                "Output": "** [1,2]",
                "Explanation": "** The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2]."
            }
        ]
    },
    {
        "Title": "Excel Sheet Column Title",
        "slug": "excel-sheet-column-title",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** columnNumber = 1",
                "Output": "** \"A\"",
                "Explanation": null
            },
            {
                "Input": "** columnNumber = 28",
                "Output": "** \"AB\"",
                "Explanation": null
            },
            {
                "Input": "** columnNumber = 701",
                "Output": "** \"ZY\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Majority Element",
        "slug": "majority-element",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [3,2,3]",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** nums = [2,2,1,1,1,2,2]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Excel Sheet Column Number",
        "slug": "excel-sheet-column-number",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** columnTitle = \"A\"",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** columnTitle = \"AB\"",
                "Output": "** 28",
                "Explanation": null
            },
            {
                "Input": "** columnTitle = \"ZY\"",
                "Output": "** 701",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Factorial Trailing Zeroes",
        "slug": "factorial-trailing-zeroes",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** 0",
                "Explanation": "** 3! = 6, no trailing zero."
            },
            {
                "Input": "** n = 5",
                "Output": "** 1",
                "Explanation": "** 5! = 120, one trailing zero."
            },
            {
                "Input": "** n = 0",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Search Tree Iterator",
        "slug": "binary-search-tree-iterator",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]",
                "Output": "[null, 3, 7, true, 9, true, 15, true, 20, false]",
                "Explanation": "BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\nbSTIterator.next();    // return 3\nbSTIterator.next();    // return 7\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 9\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 15\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 20\nbSTIterator.hasNext(); // return False"
            }
        ]
    },
    {
        "Title": "Dungeon Game",
        "slug": "dungeon-game",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]",
                "Output": "** 7",
                "Explanation": "** The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN."
            }
        ]
    },
    {
        "Title": "Combine Two Tables",
        "slug": "combine-two-tables",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nPerson table:\n+----------+----------+-----------+\n| personId | lastName | firstName |\n+----------+----------+-----------+\n| 1        | Wang     | Allen     |\n| 2        | Alice    | Bob       |\n+----------+----------+-----------+\nAddress table:\n+-----------+----------+---------------+------------+\n| addressId | personId | city          | state      |\n+-----------+----------+---------------+------------+\n| 1         | 2        | New York City | New York   |\n| 2         | 3        | Leetcode      | California |\n+-----------+----------+---------------+------------+",
                "Output": "** \n+-----------+----------+---------------+----------+\n| firstName | lastName | city          | state    |\n+-----------+----------+---------------+----------+\n| Allen     | Wang     | Null          | Null     |\n| Bob       | Alice    | New York City | New York |\n+-----------+----------+---------------+----------+",
                "Explanation": "** \nThere is no address in the address table for the personId = 1 so we return null in their city and state.\naddressId = 1 contains information about the address of personId = 2."
            }
        ]
    },
    {
        "Title": "Second Highest Salary",
        "slug": "second-highest-salary",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+",
                "Output": "** \n+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| 200                 |\n+---------------------+",
                "Explanation": null
            },
            {
                "Input": "** \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n+----+--------+",
                "Output": "** \n+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| null                |\n+---------------------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Nth Highest Salary",
        "slug": "nth-highest-salary",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\nn = 2",
                "Output": "** \n+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| 200                    |\n+------------------------+",
                "Explanation": null
            },
            {
                "Input": "** \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n+----+--------+\nn = 2",
                "Output": "** \n+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| null                   |\n+------------------------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Rank Scores",
        "slug": "rank-scores",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nScores table:\n+----+-------+\n| id | score |\n+----+-------+\n| 1  | 3.50  |\n| 2  | 3.65  |\n| 3  | 4.00  |\n| 4  | 3.85  |\n| 5  | 4.00  |\n| 6  | 3.65  |\n+----+-------+",
                "Output": "** \n+-------+------+\n| score | rank |\n+-------+------+\n| 4.00  | 1    |\n| 4.00  | 1    |\n| 3.85  | 2    |\n| 3.65  | 3    |\n| 3.65  | 3    |\n| 3.50  | 4    |\n+-------+------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Largest Number",
        "slug": "largest-number",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [10,2]",
                "Output": "** \"210\"",
                "Explanation": null
            },
            {
                "Input": "** nums = [3,30,34,5,9]",
                "Output": "** \"9534330\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Consecutive Numbers",
        "slug": "consecutive-numbers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nLogs table:\n+----+-----+\n| id | num |\n+----+-----+\n| 1  | 1   |\n| 2  | 1   |\n| 3  | 1   |\n| 4  | 2   |\n| 5  | 1   |\n| 6  | 2   |\n| 7  | 2   |\n+----+-----+",
                "Output": "** \n+-----------------+\n| ConsecutiveNums |\n+-----------------+\n| 1               |\n+-----------------+",
                "Explanation": "** 1 is the only number that appears consecutively for at least three times."
            }
        ]
    },
    {
        "Title": "Employees Earning More Than Their Managers",
        "slug": "employees-earning-more-than-their-managers",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nEmployee table:\n+----+-------+--------+-----------+\n| id | name  | salary | managerId |\n+----+-------+--------+-----------+\n| 1  | Joe   | 70000  | 3         |\n| 2  | Henry | 80000  | 4         |\n| 3  | Sam   | 60000  | Null      |\n| 4  | Max   | 90000  | Null      |\n+----+-------+--------+-----------+",
                "Output": "** \n+----------+\n| Employee |\n+----------+\n| Joe      |\n+----------+",
                "Explanation": "** Joe is the only employee who earns more than his manager."
            }
        ]
    },
    {
        "Title": "Duplicate Emails",
        "slug": "duplicate-emails",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nPerson table:\n+----+---------+\n| id | email   |\n+----+---------+\n| 1  | a@b.com |\n| 2  | c@d.com |\n| 3  | a@b.com |\n+----+---------+",
                "Output": "** \n+---------+\n| Email   |\n+---------+\n| a@b.com |\n+---------+",
                "Explanation": "** a@b.com is repeated two times."
            }
        ]
    },
    {
        "Title": "Customers Who Never Order",
        "slug": "customers-who-never-order",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nCustomers table:\n+----+-------+\n| id | name  |\n+----+-------+\n| 1  | Joe   |\n| 2  | Henry |\n| 3  | Sam   |\n| 4  | Max   |\n+----+-------+\nOrders table:\n+----+------------+\n| id | customerId |\n+----+------------+\n| 1  | 3          |\n| 2  | 1          |\n+----+------------+",
                "Output": "** \n+-----------+\n| Customers |\n+-----------+\n| Henry     |\n| Max       |\n+-----------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Department Highest Salary",
        "slug": "department-highest-salary",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nEmployee table:\n+----+-------+--------+--------------+\n| id | name  | salary | departmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 70000  | 1            |\n| 2  | Jim   | 90000  | 1            |\n| 3  | Henry | 80000  | 2            |\n| 4  | Sam   | 60000  | 2            |\n| 5  | Max   | 90000  | 1            |\n+----+-------+--------+--------------+\nDepartment table:\n+----+-------+\n| id | name  |\n+----+-------+\n| 1  | IT    |\n| 2  | Sales |\n+----+-------+",
                "Output": "** \n+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Jim      | 90000  |\n| Sales      | Henry    | 80000  |\n| IT         | Max      | 90000  |\n+------------+----------+--------+",
                "Explanation": "** Max and Jim both have the highest salary in the IT department and Henry has the highest salary in the Sales department."
            }
        ]
    },
    {
        "Title": "Department Top Three Salaries",
        "slug": "department-top-three-salaries",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** \nEmployee table:\n+----+-------+--------+--------------+\n| id | name  | salary | departmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 85000  | 1            |\n| 2  | Henry | 80000  | 2            |\n| 3  | Sam   | 60000  | 2            |\n| 4  | Max   | 90000  | 1            |\n| 5  | Janet | 69000  | 1            |\n| 6  | Randy | 85000  | 1            |\n| 7  | Will  | 70000  | 1            |\n+----+-------+--------+--------------+\nDepartment table:\n+----+-------+\n| id | name  |\n+----+-------+\n| 1  | IT    |\n| 2  | Sales |\n+----+-------+",
                "Output": "** \n+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Max      | 90000  |\n| IT         | Joe      | 85000  |\n| IT         | Randy    | 85000  |\n| IT         | Will     | 70000  |\n| Sales      | Henry    | 80000  |\n| Sales      | Sam      | 60000  |\n+------------+----------+--------+",
                "Explanation": "** \nIn the IT department:\n- Max earns the highest unique salary\n- Both Randy and Joe earn the second-highest unique salary\n- Will earns the third-highest unique salary\n\nIn the Sales department:\n- Henry earns the highest salary\n- Sam earns the second-highest salary\n- There is no third-highest salary as there are only two employees"
            }
        ]
    },
    {
        "Title": "Repeated DNA Sequences",
        "slug": "repeated-dna-sequences",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"",
                "Output": "** [\"AAAAACCCCC\",\"CCCCCAAAAA\"]",
                "Explanation": null
            },
            {
                "Input": "** s = \"AAAAAAAAAAAAA\"",
                "Output": "** [\"AAAAAAAAAA\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Best Time to Buy and Sell Stock IV",
        "slug": "best-time-to-buy-and-sell-stock-iv",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** k = 2, prices = [2,4,1]",
                "Output": "** 2",
                "Explanation": "** Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2."
            },
            {
                "Input": "** k = 2, prices = [3,2,6,5,0,3]",
                "Output": "** 7",
                "Explanation": "** Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3."
            }
        ]
    },
    {
        "Title": "Rotate Array",
        "slug": "rotate-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5,6,7], k = 3",
                "Output": "** [5,6,7,1,2,3,4]",
                "Explanation": "**\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]"
            },
            {
                "Input": "** nums = [-1,-100,3,99], k = 2",
                "Output": "** [3,99,-1,-100]",
                "Explanation": "** \nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]"
            }
        ]
    },
    {
        "Title": "Reverse Bits",
        "slug": "reverse-bits",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 00000010100101000001111010011100",
                "Output": "**    964176192 (00111001011110000010100101000000)",
                "Explanation": "** The input binary string **00000010100101000001111010011100** represents the unsigned integer 43261596, so return 964176192 which its binary representation is **00111001011110000010100101000000**."
            },
            {
                "Input": "** n = 11111111111111111111111111111101",
                "Output": "**   3221225471 (10111111111111111111111111111111)",
                "Explanation": "** The input binary string **11111111111111111111111111111101** represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is **10111111111111111111111111111111**."
            }
        ]
    },
    {
        "Title": "Number of 1 Bits",
        "slug": "number-of-1-bits",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 11",
                "Output": "** 3",
                "Explanation": "**\n\n\nThe input binary string **1011** has a total of three set bits."
            },
            {
                "Input": "** n = 128",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe input binary string **10000000** has a total of one set bit."
            },
            {
                "Input": "** n = 2147483645",
                "Output": "** 30",
                "Explanation": "**\n\n\nThe input binary string **1111111111111111111111111111101** has a total of thirty set bits.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n\u00a0<= 231\u00a0- 1`\n\n\n\u00a0\n\n\n**Follow up:** If this function is called many times, how would you optimize it?SimilarQuestions: [190, 231, 338, 401, 461, 693, 762]"
            }
        ]
    },
    {
        "Title": "Delete Duplicate Emails",
        "slug": "delete-duplicate-emails",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nPerson table:\n+----+------------------+\n| id | email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n| 3  | john@example.com |\n+----+------------------+",
                "Output": "** \n+----+------------------+\n| id | email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n+----+------------------+",
                "Explanation": "** john@example.com is repeated two times. We keep the row with the smallest Id = 1."
            }
        ]
    },
    {
        "Title": "Rising Temperature",
        "slug": "rising-temperature",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nWeather table:\n+----+------------+-------------+\n| id | recordDate | temperature |\n+----+------------+-------------+\n| 1  | 2015-01-01 | 10          |\n| 2  | 2015-01-02 | 25          |\n| 3  | 2015-01-03 | 20          |\n| 4  | 2015-01-04 | 30          |\n+----+------------+-------------+",
                "Output": "** \n+----+\n| id |\n+----+\n| 2  |\n| 4  |\n+----+",
                "Explanation": "** \nIn 2015-01-02, the temperature was higher than the previous day (10 -> 25).\nIn 2015-01-04, the temperature was higher than the previous day (20 -> 30)."
            }
        ]
    },
    {
        "Title": "House Robber",
        "slug": "house-robber",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3,1]",
                "Output": "** 4",
                "Explanation": "** Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4."
            },
            {
                "Input": "** nums = [2,7,9,3,1]",
                "Output": "** 12",
                "Explanation": "** Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12."
            }
        ]
    },
    {
        "Title": "Binary Tree Right Side View",
        "slug": "binary-tree-right-side-view",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,2,3,null,5,null,4]",
                "Output": "** [1,3,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Islands",
        "slug": "number-of-islands",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** grid = [\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\n]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Bitwise AND of Numbers Range",
        "slug": "bitwise-and-of-numbers-range",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** left = 5, right = 7",
                "Output": "** 4",
                "Explanation": null
            },
            {
                "Input": "** left = 0, right = 0",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** left = 1, right = 2147483647",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Happy Number",
        "slug": "happy-number",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 19",
                "Output": "** true",
                "Explanation": "**\n12 + 92 = 82\n82 + 22 = 68\n62 + 82 = 100\n12 + 02 + 02 = 1"
            },
            {
                "Input": "** n = 2",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove Linked List Elements",
        "slug": "remove-linked-list-elements",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** head = [1,2,6,3,4,5,6], val = 6",
                "Output": "** [1,2,3,4,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count Primes",
        "slug": "count-primes",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 10",
                "Output": "** 4",
                "Explanation": "** There are 4 prime numbers less than 10, they are 2, 3, 5, 7."
            },
            {
                "Input": "** n = 0",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** n = 1",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Isomorphic Strings",
        "slug": "isomorphic-strings",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"egg\", t = \"add\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"foo\", t = \"bar\"",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** s = \"paper\", t = \"title\"",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reverse Linked List",
        "slug": "reverse-linked-list",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** head = [1,2,3,4,5]",
                "Output": "** [5,4,3,2,1]",
                "Explanation": null
            },
            {
                "Input": "** head = [1,2]",
                "Output": "** [2,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Course Schedule",
        "slug": "course-schedule",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** numCourses = 2, prerequisites = [[1,0]]",
                "Output": "** true",
                "Explanation": "** There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0. So it is possible."
            },
            {
                "Input": "** numCourses = 2, prerequisites = [[1,0],[0,1]]",
                "Output": "** false",
                "Explanation": "** There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible."
            }
        ]
    },
    {
        "Title": "Implement Trie (Prefix Tree)",
        "slug": "implement-trie-prefix-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]",
                "Output": "[null, null, true, false, true, null, true]",
                "Explanation": "Trie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // return True\ntrie.search(\"app\");     // return False\ntrie.startsWith(\"app\"); // return True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // return True"
            }
        ]
    },
    {
        "Title": "Minimum Size Subarray Sum",
        "slug": "minimum-size-subarray-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** target = 7, nums = [2,3,1,2,4,3]",
                "Output": "** 2",
                "Explanation": "** The subarray [4,3] has the minimal length under the problem constraint."
            },
            {
                "Input": "** target = 4, nums = [1,4,4]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** target = 11, nums = [1,1,1,1,1,1,1,1]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Course Schedule II",
        "slug": "course-schedule-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** numCourses = 2, prerequisites = [[1,0]]",
                "Output": "** [0,1]",
                "Explanation": "** There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1]."
            },
            {
                "Input": "** numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]",
                "Output": "** [0,2,1,3]",
                "Explanation": "** There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\nSo one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3]."
            },
            {
                "Input": "** numCourses = 1, prerequisites = []",
                "Output": "** [0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Word Search II",
        "slug": "word-search-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]",
                "Output": "** [\"eat\",\"oath\"]",
                "Explanation": null
            },
            {
                "Input": "** board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]",
                "Output": "** []",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "House Robber II",
        "slug": "house-robber-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,3,2]",
                "Output": "** 3",
                "Explanation": "** You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses."
            },
            {
                "Input": "** nums = [1,2,3,1]",
                "Output": "** 4",
                "Explanation": "** Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4."
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Shortest Palindrome",
        "slug": "shortest-palindrome",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"aacecaaa\"",
                "Output": "** \"aaacecaaa\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"abcd\"",
                "Output": "** \"dcbabcd\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Kth Largest Element in an Array",
        "slug": "kth-largest-element-in-an-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,2,1,5,6,4], k = 2",
                "Output": "** 5",
                "Explanation": null
            },
            {
                "Input": "** nums = [3,2,3,1,2,4,5,5,6], k = 4",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Combination Sum III",
        "slug": "combination-sum-iii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** k = 3, n = 7",
                "Output": "** [[1,2,4]]",
                "Explanation": "**\n1 + 2 + 4 = 7\nThere are no other valid combinations."
            },
            {
                "Input": "** k = 3, n = 9",
                "Output": "** [[1,2,6],[1,3,5],[2,3,4]]",
                "Explanation": "**\n1 + 2 + 6 = 9\n1 + 3 + 5 = 9\n2 + 3 + 4 = 9\nThere are no other valid combinations."
            },
            {
                "Input": "** k = 4, n = 1",
                "Output": "** []",
                "Explanation": "** There are no valid combinations.\nUsing 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination."
            }
        ]
    },
    {
        "Title": "Contains Duplicate",
        "slug": "contains-duplicate",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,3,1]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,1,1,3,3,4,3,2,4,2]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "The Skyline Problem",
        "slug": "the-skyline-problem",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]",
                "Output": "** [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]",
                "Explanation": "**\nFigure A shows the buildings of the input.\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list."
            }
        ]
    },
    {
        "Title": "Contains Duplicate II",
        "slug": "contains-duplicate-ii",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,3,1], k = 3",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,0,1,1], k = 1",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2,3,1,2,3], k = 2",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Contains Duplicate III",
        "slug": "contains-duplicate-iii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,3,1], indexDiff = 3, valueDiff = 0",
                "Output": "** true",
                "Explanation": "** We can choose (i, j) = (0, 3).\nWe satisfy the three conditions:\ni != j --> 0 != 3\nabs(i - j) <= indexDiff --> abs(0 - 3) <= 3\nabs(nums[i] - nums[j]) <= valueDiff --> abs(1 - 1) <= 0"
            },
            {
                "Input": "** nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3",
                "Output": "** false",
                "Explanation": "** After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false."
            }
        ]
    },
    {
        "Title": "Maximal Square",
        "slug": "maximal-square",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]",
                "Output": "** 4",
                "Explanation": null
            },
            {
                "Input": "** matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count Complete Tree Nodes",
        "slug": "count-complete-tree-nodes",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [1,2,3,4,5,6]",
                "Output": "** 6",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Rectangle Area",
        "slug": "rectangle-area",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2",
                "Output": "** 45",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Basic Calculator",
        "slug": "basic-calculator",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"1 + 1\"",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** s = \" 2-1 + 2 \"",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** s = \"(1+(4+5+2)-3)+(6+8)\"",
                "Output": "** 23",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Implement Stack using Queues",
        "slug": "implement-stack-using-queues",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]",
                "Output": "[null, null, null, 2, 2, false]",
                "Explanation": "MyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False"
            }
        ]
    },
    {
        "Title": "Invert Binary Tree",
        "slug": "invert-binary-tree",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [4,2,7,1,3,6,9]",
                "Output": "** [4,7,2,9,6,3,1]",
                "Explanation": null
            },
            {
                "Input": "** root = [2,1,3]",
                "Output": "** [2,3,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Basic Calculator II",
        "slug": "basic-calculator-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"3+2*2\"",
                "Output": "** 7",
                "Explanation": null
            },
            {
                "Input": "** s = \" 3/2 \"",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** s = \" 3+5 / 2 \"",
                "Output": "** 5",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Summary Ranges",
        "slug": "summary-ranges",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [0,1,2,4,5,7]",
                "Output": "** [\"0->2\",\"4->5\",\"7\"]",
                "Explanation": "** The ranges are:\n[0,2] --> \"0->2\"\n[4,5] --> \"4->5\"\n[7,7] --> \"7\""
            },
            {
                "Input": "** nums = [0,2,3,4,6,8,9]",
                "Output": "** [\"0\",\"2->4\",\"6\",\"8->9\"]",
                "Explanation": "** The ranges are:\n[0,0] --> \"0\"\n[2,4] --> \"2->4\"\n[6,6] --> \"6\"\n[8,9] --> \"8->9\""
            }
        ]
    },
    {
        "Title": "Majority Element II",
        "slug": "majority-element-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,2,3]",
                "Output": "** [3]",
                "Explanation": null
            },
            {
                "Input": "** nums = [1]",
                "Output": "** [1]",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2]",
                "Output": "** [1,2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Kth Smallest Element in a BST",
        "slug": "kth-smallest-element-in-a-bst",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [3,1,4,null,2], k = 1",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** root = [5,3,6,2,4,null,null,1], k = 3",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Power of Two",
        "slug": "power-of-two",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** true",
                "Explanation": "** 20 = 1"
            },
            {
                "Input": "** n = 16",
                "Output": "** true",
                "Explanation": "** 24 = 16"
            },
            {
                "Input": "** n = 3",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Implement Queue using Stacks",
        "slug": "implement-queue-using-stacks",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]",
                "Output": "[null, null, null, 1, 1, false]",
                "Explanation": "MyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false"
            }
        ]
    },
    {
        "Title": "Number of Digit One",
        "slug": "number-of-digit-one",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 13",
                "Output": "** 6",
                "Explanation": null
            },
            {
                "Input": "** n = 0",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Palindrome Linked List",
        "slug": "palindrome-linked-list",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** head = [1,2,2,1]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** head = [1,2]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Lowest Common Ancestor of a Binary Search Tree",
        "slug": "lowest-common-ancestor-of-a-binary-search-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8",
                "Output": "** 6",
                "Explanation": "** The LCA of nodes 2 and 8 is 6."
            },
            {
                "Input": "** root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4",
                "Output": "** 2",
                "Explanation": "** The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition."
            }
        ]
    },
    {
        "Title": "Lowest Common Ancestor of a Binary Tree",
        "slug": "lowest-common-ancestor-of-a-binary-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1",
                "Output": "** 3",
                "Explanation": "** The LCA of nodes 5 and 1 is 3."
            },
            {
                "Input": "** root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4",
                "Output": "** 5",
                "Explanation": "** The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition."
            }
        ]
    },
    {
        "Title": "Delete Node in a Linked List",
        "slug": "delete-node-in-a-linked-list",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [4,5,1,9], node = 5",
                "Output": "** [4,1,9]",
                "Explanation": "** You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function."
            },
            {
                "Input": "** head = [4,5,1,9], node = 1",
                "Output": "** [4,5,9]",
                "Explanation": "** You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function."
            }
        ]
    },
    {
        "Title": "Product of Array Except Self",
        "slug": "product-of-array-except-self",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** [24,12,8,6]",
                "Explanation": null
            },
            {
                "Input": "** nums = [-1,1,0,-3,3]",
                "Output": "** [0,0,9,0,0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sliding Window Maximum",
        "slug": "sliding-window-maximum",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,3,-1,-3,5,3,6,7], k = 3",
                "Output": "** [3,3,5,5,6,7]",
                "Explanation": "** \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       **3**\n 1 [3  -1  -3] 5  3  6  7       **3**\n 1  3 [-1  -3  5] 3  6  7       **5**\n 1  3  -1 [-3  5  3] 6  7       **5**\n 1  3  -1  -3 [5  3  6] 7       **6**\n 1  3  -1  -3  5 [3  6  7]      **7**"
            },
            {
                "Input": "** nums = [1], k = 1",
                "Output": "** [1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Search a 2D Matrix II",
        "slug": "search-a-2d-matrix-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Different Ways to Add Parentheses",
        "slug": "different-ways-to-add-parentheses",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** expression = \"2-1-1\"",
                "Output": "** [0,2]",
                "Explanation": "**\n((2-1)-1) = 0 \n(2-(1-1)) = 2"
            },
            {
                "Input": "** expression = \"2*3-4*5\"",
                "Output": "** [-34,-14,-10,-10,10]",
                "Explanation": "**\n(2*(3-(4*5))) = -34 \n((2*3)-(4*5)) = -14 \n((2*(3-4))*5) = -10 \n(2*((3-4)*5)) = -10 \n(((2*3)-4)*5) = 10"
            }
        ]
    },
    {
        "Title": "Valid Anagram",
        "slug": "valid-anagram",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"anagram\", t = \"nagaram\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"rat\", t = \"car\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Tree Paths",
        "slug": "binary-tree-paths",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [1,2,3,null,5]",
                "Output": "** [\"1->2->5\",\"1->3\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Add Digits",
        "slug": "add-digits",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num = 38",
                "Output": "** 2",
                "Explanation": "** The process is\n38 --> 3 + 8 --> 11\n11 --> 1 + 1 --> 2 \nSince 2 has only one digit, return it."
            },
            {
                "Input": "** num = 0",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Single Number III",
        "slug": "single-number-iii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,1,3,2,5]",
                "Output": "** [3,5]",
                "Explanation": "**  [5, 3] is also a valid answer."
            },
            {
                "Input": "** nums = [-1,0]",
                "Output": "** [-1,0]",
                "Explanation": null
            },
            {
                "Input": "** nums = [0,1]",
                "Output": "** [1,0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Trips and Users",
        "slug": "trips-and-users",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** \nTrips table:\n+----+-----------+-----------+---------+---------------------+------------+\n| id | client_id | driver_id | city_id | status              | request_at |\n+----+-----------+-----------+---------+---------------------+------------+\n| 1  | 1         | 10        | 1       | completed           | 2013-10-01 |\n| 2  | 2         | 11        | 1       | cancelled_by_driver | 2013-10-01 |\n| 3  | 3         | 12        | 6       | completed           | 2013-10-01 |\n| 4  | 4         | 13        | 6       | cancelled_by_client | 2013-10-01 |\n| 5  | 1         | 10        | 1       | completed           | 2013-10-02 |\n| 6  | 2         | 11        | 6       | completed           | 2013-10-02 |\n| 7  | 3         | 12        | 6       | completed           | 2013-10-02 |\n| 8  | 2         | 12        | 12      | completed           | 2013-10-03 |\n| 9  | 3         | 10        | 12      | completed           | 2013-10-03 |\n| 10 | 4         | 13        | 12      | cancelled_by_driver | 2013-10-03 |\n+----+-----------+-----------+---------+---------------------+------------+\nUsers table:\n+----------+--------+--------+\n| users_id | banned | role   |\n+----------+--------+--------+\n| 1        | No     | client |\n| 2        | Yes    | client |\n| 3        | No     | client |\n| 4        | No     | client |\n| 10       | No     | driver |\n| 11       | No     | driver |\n| 12       | No     | driver |\n| 13       | No     | driver |\n+----------+--------+--------+",
                "Output": "** \n+------------+-------------------+\n| Day        | Cancellation Rate |\n+------------+-------------------+\n| 2013-10-01 | 0.33              |\n| 2013-10-02 | 0.00              |\n| 2013-10-03 | 0.50              |\n+------------+-------------------+",
                "Explanation": "** \nOn 2013-10-01:\n  - There were 4 requests in total, 2 of which were canceled.\n  - However, the request with Id=2 was made by a banned client (User_Id=2), so it is ignored in the calculation.\n  - Hence there are 3 unbanned requests in total, 1 of which was canceled.\n  - The Cancellation Rate is (1 / 3) = 0.33\nOn 2013-10-02:\n  - There were 3 requests in total, 0 of which were canceled.\n  - The request with Id=6 was made by a banned client, so it is ignored.\n  - Hence there are 2 unbanned requests in total, 0 of which were canceled.\n  - The Cancellation Rate is (0 / 2) = 0.00\nOn 2013-10-03:\n  - There were 3 requests in total, 1 of which was canceled.\n  - The request with Id=8 was made by a banned client, so it is ignored.\n  - Hence there are 2 unbanned request in total, 1 of which were canceled.\n  - The Cancellation Rate is (1 / 2) = 0.50"
            }
        ]
    },
    {
        "Title": "Ugly Number",
        "slug": "ugly-number",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 6",
                "Output": "** true",
                "Explanation": "** 6 = 2 \u00d7 3"
            },
            {
                "Input": "** n = 1",
                "Output": "** true",
                "Explanation": "** 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5."
            },
            {
                "Input": "** n = 14",
                "Output": "** false",
                "Explanation": "** 14 is not ugly since it includes the prime factor 7."
            }
        ]
    },
    {
        "Title": "Ugly Number II",
        "slug": "ugly-number-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 10",
                "Output": "** 12",
                "Explanation": "** [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers."
            },
            {
                "Input": "** n = 1",
                "Output": "** 1",
                "Explanation": "** 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5."
            }
        ]
    },
    {
        "Title": "Missing Number",
        "slug": "missing-number",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [3,0,1]",
                "Output": "** 2",
                "Explanation": "** n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums."
            },
            {
                "Input": "** nums = [0,1]",
                "Output": "** 2",
                "Explanation": "** n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums."
            },
            {
                "Input": "** nums = [9,6,4,2,3,5,7,0,1]",
                "Output": "** 8",
                "Explanation": "** n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums."
            }
        ]
    },
    {
        "Title": "Integer to English Words",
        "slug": "integer-to-english-words",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** num = 123",
                "Output": "** \"One Hundred Twenty Three\"",
                "Explanation": null
            },
            {
                "Input": "** num = 12345",
                "Output": "** \"Twelve Thousand Three Hundred Forty Five\"",
                "Explanation": null
            },
            {
                "Input": "** num = 1234567",
                "Output": "** \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "H-Index",
        "slug": "h-index",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** citations = [3,0,6,1,5]",
                "Output": "** 3",
                "Explanation": "** [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3."
            },
            {
                "Input": "** citations = [1,3,1]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "H-Index II",
        "slug": "h-index-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** citations = [0,1,3,5,6]",
                "Output": "** 3",
                "Explanation": "** [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3."
            },
            {
                "Input": "** citations = [1,2,100]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "First Bad Version",
        "slug": "first-bad-version",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 5, bad = 4",
                "Output": "** 4",
                "Explanation": "**\ncall isBadVersion(3) -> false\ncall isBadVersion(5)\u00a0-> true\ncall isBadVersion(4)\u00a0-> true\nThen 4 is the first bad version."
            },
            {
                "Input": "** n = 1, bad = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Perfect Squares",
        "slug": "perfect-squares",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 12",
                "Output": "** 3",
                "Explanation": "** 12 = 4 + 4 + 4."
            },
            {
                "Input": "** n = 13",
                "Output": "** 2",
                "Explanation": "** 13 = 4 + 9."
            }
        ]
    },
    {
        "Title": "Expression Add Operators",
        "slug": "expression-add-operators",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** num = \"123\", target = 6",
                "Output": "** [\"1*2*3\",\"1+2+3\"]",
                "Explanation": "** Both \"1*2*3\" and \"1+2+3\" evaluate to 6."
            },
            {
                "Input": "** num = \"232\", target = 8",
                "Output": "** [\"2*3+2\",\"2+3*2\"]",
                "Explanation": "** Both \"2*3+2\" and \"2+3*2\" evaluate to 8."
            },
            {
                "Input": "** num = \"3456237490\", target = 9191",
                "Output": "** []",
                "Explanation": "** There are no expressions that can be created from \"3456237490\" to evaluate to 9191."
            }
        ]
    },
    {
        "Title": "Move Zeroes",
        "slug": "move-zeroes",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [0,1,0,3,12]",
                "Output": "** [1,3,12,0,0]",
                "Explanation": null
            },
            {
                "Input": "** nums = [0]",
                "Output": "** [0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Peeking Iterator",
        "slug": "peeking-iterator",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"PeekingIterator\", \"next\", \"peek\", \"next\", \"next\", \"hasNext\"]\n[[[1, 2, 3]], [], [], [], [], []]",
                "Output": "[null, 1, 2, 2, 3, false]",
                "Explanation": "PeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [**1**,2,3]\npeekingIterator.next();    // return 1, the pointer moves to the next element [1,**2**,3].\npeekingIterator.peek();    // return 2, the pointer does not move [1,**2**,3].\npeekingIterator.next();    // return 2, the pointer moves to the next element [1,2,**3**]\npeekingIterator.next();    // return 3, the pointer moves to the next element [1,2,3]\npeekingIterator.hasNext(); // return False"
            }
        ]
    },
    {
        "Title": "Find the Duplicate Number",
        "slug": "find-the-duplicate-number",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,3,4,2,2]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** nums = [3,1,3,4,2]",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** nums = [3,3,3,3,3]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Game of Life",
        "slug": "game-of-life",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]",
                "Output": "** [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]",
                "Explanation": null
            },
            {
                "Input": "** board = [[1,1],[1,0]]",
                "Output": "** [[1,1],[1,1]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Word Pattern",
        "slug": "word-pattern",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** pattern = \"abba\", s = \"dog cat cat dog\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** pattern = \"abba\", s = \"dog cat cat fish\"",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** pattern = \"aaaa\", s = \"dog cat cat dog\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Nim Game",
        "slug": "nim-game",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** false",
                "Explanation": "** These are the possible outcomes:\n1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\n2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\n3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\nIn all outcomes, your friend wins."
            },
            {
                "Input": "** n = 1",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** n = 2",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Median from Data Stream",
        "slug": "find-median-from-data-stream",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\n[[], [1], [2], [], [3], []]",
                "Output": "[null, null, null, 1.5, null, 2.0]",
                "Explanation": "MedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0"
            }
        ]
    },
    {
        "Title": "Serialize and Deserialize Binary Tree",
        "slug": "serialize-and-deserialize-binary-tree",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** root = [1,2,3,null,null,4,5]",
                "Output": "** [1,2,3,null,null,4,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Bulls and Cows",
        "slug": "bulls-and-cows",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** secret = \"1807\", guess = \"7810\"",
                "Output": "** \"1A3B\"",
                "Explanation": "** Bulls are connected with a '|' and cows are underlined:\n\"1807\"\n  |\n\"7810\""
            },
            {
                "Input": "** secret = \"1123\", guess = \"0111\"",
                "Output": "** \"1A1B\"",
                "Explanation": "** Bulls are connected with a '|' and cows are underlined:\n\"1123\"        \"1123\"\n  |      or     |\n\"0111\"        \"0111\"\nNote that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull."
            }
        ]
    },
    {
        "Title": "Remove Invalid Parentheses",
        "slug": "remove-invalid-parentheses",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"()())()\"",
                "Output": "** [\"(())()\",\"()()()\"]",
                "Explanation": null
            },
            {
                "Input": "** s = \"(a)())()\"",
                "Output": "** [\"(a())()\",\"(a)()()\"]",
                "Explanation": null
            },
            {
                "Input": "** s = \")(\"",
                "Output": "** [\"\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Range Sum Query - Immutable",
        "slug": "range-sum-query-immutable",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "[\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]\n[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]",
                "Output": "[null, 1, -1, -3]",
                "Explanation": "NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\nnumArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\nnumArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\nnumArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3"
            }
        ]
    },
    {
        "Title": "Range Sum Query 2D - Immutable",
        "slug": "range-sum-query-2d-immutable",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"NumMatrix\", \"sumRegion\", \"sumRegion\", \"sumRegion\"]\n[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]",
                "Output": "[null, 8, 11, 12]",
                "Explanation": "NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\nnumMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)\nnumMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)\nnumMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)"
            }
        ]
    },
    {
        "Title": "Additive Number",
        "slug": "additive-number",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \"112358\"",
                "Output": "** true",
                "Explanation": "** \nThe digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \n1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8"
            },
            {
                "Input": "** \"199100199\"",
                "Output": "** true",
                "Explanation": "** \nThe additive sequence is: 1, 99, 100, 199.\u00a0\n1 + 99 = 100, 99 + 100 = 199"
            }
        ]
    },
    {
        "Title": "Range Sum Query - Mutable",
        "slug": "range-sum-query-mutable",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"NumArray\", \"sumRange\", \"update\", \"sumRange\"]\n[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]",
                "Output": "[null, 9, null, 8]",
                "Explanation": "NumArray numArray = new NumArray([1, 3, 5]);\nnumArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\nnumArray.update(1, 2);   // nums = [1, 2, 5]\nnumArray.sumRange(0, 2); // return 1 + 2 + 5 = 8"
            }
        ]
    },
    {
        "Title": "Best Time to Buy and Sell Stock with Cooldown",
        "slug": "best-time-to-buy-and-sell-stock-with-cooldown",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** prices = [1,2,3,0,2]",
                "Output": "** 3",
                "Explanation": "** transactions = [buy, sell, cooldown, buy, sell]"
            },
            {
                "Input": "** prices = [1]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Height Trees",
        "slug": "minimum-height-trees",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 4, edges = [[1,0],[1,2],[1,3]]",
                "Output": "** [1]",
                "Explanation": "** As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT."
            },
            {
                "Input": "** n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]",
                "Output": "** [3,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Burst Balloons",
        "slug": "burst-balloons",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [3,1,5,8]",
                "Output": "** 167",
                "Explanation": "**\nnums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []\ncoins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167"
            },
            {
                "Input": "** nums = [1,5]",
                "Output": "** 10",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Super Ugly Number",
        "slug": "super-ugly-number",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 12, primes = [2,7,13,19]",
                "Output": "** 32",
                "Explanation": "** [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19]."
            },
            {
                "Input": "** n = 1, primes = [2,3,5]",
                "Output": "** 1",
                "Explanation": "** 1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5]."
            }
        ]
    },
    {
        "Title": "Count of Smaller Numbers After Self",
        "slug": "count-of-smaller-numbers-after-self",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [5,2,6,1]",
                "Output": "** [2,1,1,0]",
                "Explanation": "**\nTo the right of 5 there are **2** smaller elements (2 and 1).\nTo the right of 2 there is only **1** smaller element (1).\nTo the right of 6 there is **1** smaller element (1).\nTo the right of 1 there is **0** smaller element."
            },
            {
                "Input": "** nums = [-1]",
                "Output": "** [0]",
                "Explanation": null
            },
            {
                "Input": "** nums = [-1,-1]",
                "Output": "** [0,0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove Duplicate Letters",
        "slug": "remove-duplicate-letters",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"bcabc\"",
                "Output": "** \"abc\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"cbacdcbc\"",
                "Output": "** \"acdb\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Product of Word Lengths",
        "slug": "maximum-product-of-word-lengths",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]",
                "Output": "** 16",
                "Explanation": "** The two words can be \"abcw\", \"xtfn\"."
            },
            {
                "Input": "** words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]",
                "Output": "** 4",
                "Explanation": "** The two words can be \"ab\", \"cd\"."
            },
            {
                "Input": "** words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]",
                "Output": "** 0",
                "Explanation": "** No such pair of words."
            }
        ]
    },
    {
        "Title": "Bulb Switcher",
        "slug": "bulb-switcher",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** 1",
                "Explanation": "** At first, the three bulbs are [off, off, off].\nAfter the first round, the three bulbs are [on, on, on].\nAfter the second round, the three bulbs are [on, off, on].\nAfter the third round, the three bulbs are [on, off, off]. \nSo you should return 1 because there is only one bulb is on."
            }
        ]
    },
    {
        "Title": "Create Maximum Number",
        "slug": "create-maximum-number",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5",
                "Output": "** [9,8,6,5,3]",
                "Explanation": null
            },
            {
                "Input": "** nums1 = [6,7], nums2 = [6,0,4], k = 5",
                "Output": "** [6,7,6,0,4]",
                "Explanation": null
            },
            {
                "Input": "** nums1 = [3,9], nums2 = [8,9], k = 3",
                "Output": "** [9,8,9]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Coin Change",
        "slug": "coin-change",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** coins = [1,2,5], amount = 11",
                "Output": "** 3",
                "Explanation": "** 11 = 5 + 5 + 1"
            },
            {
                "Input": "** coins = [2], amount = 3",
                "Output": "** -1",
                "Explanation": null
            },
            {
                "Input": "** coins = [1], amount = 0",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Wiggle Sort II",
        "slug": "wiggle-sort-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,5,1,1,6,4]",
                "Output": "** [1,6,1,5,1,4]",
                "Explanation": "** [1,4,1,5,1,6] is also accepted."
            },
            {
                "Input": "** nums = [1,3,2,2,3,1]",
                "Output": "** [2,3,1,3,1,2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Power of Three",
        "slug": "power-of-three",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 27",
                "Output": "** true",
                "Explanation": "** 27 = 33"
            },
            {
                "Input": "** n = 0",
                "Output": "** false",
                "Explanation": "** There is no x where 3x = 0."
            },
            {
                "Input": "** n = -1",
                "Output": "** false",
                "Explanation": "** There is no x where 3x = (-1)."
            }
        ]
    },
    {
        "Title": "Count of Range Sum",
        "slug": "count-of-range-sum",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [-2,5,-1], lower = -2, upper = 2",
                "Output": "** 3",
                "Explanation": "** The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2."
            },
            {
                "Input": "** nums = [0], lower = 0, upper = 0",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Odd Even Linked List",
        "slug": "odd-even-linked-list",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [1,2,3,4,5]",
                "Output": "** [1,3,5,2,4]",
                "Explanation": null
            },
            {
                "Input": "** head = [2,1,3,5,6,4,7]",
                "Output": "** [2,3,6,7,1,5,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Increasing Path in a Matrix",
        "slug": "longest-increasing-path-in-a-matrix",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** matrix = [[9,9,4],[6,6,8],[2,1,1]]",
                "Output": "** 4",
                "Explanation": "** The longest increasing path is [1, 2, 6, 9]."
            },
            {
                "Input": "** matrix = [[3,4,5],[3,2,6],[2,2,1]]",
                "Output": "** 4",
                "Explanation": "** The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed."
            }
        ]
    },
    {
        "Title": "Patching Array",
        "slug": "patching-array",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,3], n = 6",
                "Output": "** 1\nExplanation:\nCombinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\nNow if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\nSo we only need 1 patch.",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,5,10], n = 20",
                "Output": "** 2\nExplanation: The two patches can be [2, 4].",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2,2], n = 5",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Verify Preorder Serialization of a Binary Tree",
        "slug": "verify-preorder-serialization-of-a-binary-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** preorder = \"1,#\"",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** preorder = \"9,#,#,1\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reconstruct Itinerary",
        "slug": "reconstruct-itinerary",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]",
                "Output": "** [\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]",
                "Explanation": null
            },
            {
                "Input": "** tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]",
                "Output": "** [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]",
                "Explanation": "** Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] but it is larger in lexical order."
            }
        ]
    },
    {
        "Title": "Increasing Triplet Subsequence",
        "slug": "increasing-triplet-subsequence",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** true",
                "Explanation": "** Any triplet where i < j < k is valid."
            },
            {
                "Input": "** nums = [5,4,3,2,1]",
                "Output": "** false",
                "Explanation": "** No triplet exists."
            },
            {
                "Input": "** nums = [2,1,5,0,4,6]",
                "Output": "** true",
                "Explanation": "** The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6."
            }
        ]
    },
    {
        "Title": "Self Crossing",
        "slug": "self-crossing",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** distance = [2,1,1,2]",
                "Output": "** true",
                "Explanation": "** The path crosses itself at the point (0, 1)."
            },
            {
                "Input": "** distance = [1,2,3,4]",
                "Output": "** false",
                "Explanation": "** The path does not cross itself at any point."
            },
            {
                "Input": "** distance = [1,1,1,2,1]",
                "Output": "** true",
                "Explanation": "** The path crosses itself at the point (0, 0)."
            }
        ]
    },
    {
        "Title": "Palindrome Pairs",
        "slug": "palindrome-pairs",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]",
                "Output": "** [[0,1],[1,0],[3,2],[2,4]]",
                "Explanation": "** The palindromes are [\"abcddcba\",\"dcbaabcd\",\"slls\",\"llssssll\"]"
            },
            {
                "Input": "** words = [\"bat\",\"tab\",\"cat\"]",
                "Output": "** [[0,1],[1,0]]",
                "Explanation": "** The palindromes are [\"battab\",\"tabbat\"]"
            },
            {
                "Input": "** words = [\"a\",\"\"]",
                "Output": "** [[0,1],[1,0]]",
                "Explanation": "** The palindromes are [\"a\",\"a\"]"
            }
        ]
    },
    {
        "Title": "House Robber III",
        "slug": "house-robber-iii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [3,2,3,null,3,null,1]",
                "Output": "** 7",
                "Explanation": "** Maximum amount of money the thief can rob = 3 + 3 + 1 = 7."
            },
            {
                "Input": "** root = [3,4,5,1,3,null,1]",
                "Output": "** 9",
                "Explanation": "** Maximum amount of money the thief can rob = 4 + 5 = 9."
            }
        ]
    },
    {
        "Title": "Counting Bits",
        "slug": "counting-bits",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** [0,1,1]",
                "Explanation": "**\n0 --> 0\n1 --> 1\n2 --> 10"
            },
            {
                "Input": "** n = 5",
                "Output": "** [0,1,1,2,1,2]",
                "Explanation": "**\n0 --> 0\n1 --> 1\n2 --> 10\n3 --> 11\n4 --> 100\n5 --> 101"
            }
        ]
    },
    {
        "Title": "Flatten Nested List Iterator",
        "slug": "flatten-nested-list-iterator",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nestedList = [[1,1],2,[1,1]]",
                "Output": "** [1,1,2,1,1]",
                "Explanation": "** By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1]."
            },
            {
                "Input": "** nestedList = [1,[4,[6]]]",
                "Output": "** [1,4,6]",
                "Explanation": "** By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6]."
            }
        ]
    },
    {
        "Title": "Power of Four",
        "slug": "power-of-four",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 16",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** n = 5",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** n = 1",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Integer Break",
        "slug": "integer-break",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** 1",
                "Explanation": "** 2 = 1 + 1, 1 \u00d7 1 = 1."
            },
            {
                "Input": "** n = 10",
                "Output": "** 36",
                "Explanation": "** 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36."
            }
        ]
    },
    {
        "Title": "Reverse String",
        "slug": "reverse-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = [\"h\",\"e\",\"l\",\"l\",\"o\"]",
                "Output": "** [\"o\",\"l\",\"l\",\"e\",\"h\"]",
                "Explanation": null
            },
            {
                "Input": "** s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]",
                "Output": "** [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reverse Vowels of a String",
        "slug": "reverse-vowels-of-a-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"hello\"",
                "Output": "** \"holle\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"leetcode\"",
                "Output": "** \"leotcede\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Top K Frequent Elements",
        "slug": "top-k-frequent-elements",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,1,1,2,2,3], k = 2",
                "Output": "** [1,2]",
                "Explanation": null
            },
            {
                "Input": "** nums = [1], k = 1",
                "Output": "** [1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Intersection of Two Arrays",
        "slug": "intersection-of-two-arrays",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums1 = [1,2,2,1], nums2 = [2,2]",
                "Output": "** [2]",
                "Explanation": null
            },
            {
                "Input": "** nums1 = [4,9,5], nums2 = [9,4,9,8,4]",
                "Output": "** [9,4]",
                "Explanation": "** [4,9] is also accepted."
            }
        ]
    },
    {
        "Title": "Intersection of Two Arrays II",
        "slug": "intersection-of-two-arrays-ii",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums1 = [1,2,2,1], nums2 = [2,2]",
                "Output": "** [2,2]",
                "Explanation": null
            },
            {
                "Input": "** nums1 = [4,9,5], nums2 = [9,4,9,8,4]",
                "Output": "** [4,9]",
                "Explanation": "** [9,4] is also accepted."
            }
        ]
    },
    {
        "Title": "Data Stream as Disjoint Intervals",
        "slug": "data-stream-as-disjoint-intervals",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]\n[[], [1], [], [3], [], [7], [], [2], [], [6], []]",
                "Output": "[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]",
                "Explanation": "SummaryRanges summaryRanges = new SummaryRanges();\nsummaryRanges.addNum(1);      // arr = [1]\nsummaryRanges.getIntervals(); // return [[1, 1]]\nsummaryRanges.addNum(3);      // arr = [1, 3]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3]]\nsummaryRanges.addNum(7);      // arr = [1, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]\nsummaryRanges.addNum(2);      // arr = [1, 2, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [7, 7]]\nsummaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [6, 7]]"
            }
        ]
    },
    {
        "Title": "Russian Doll Envelopes",
        "slug": "russian-doll-envelopes",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** envelopes = [[5,4],[6,4],[6,7],[2,3]]",
                "Output": "** 3",
                "Explanation": "** The maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7])."
            },
            {
                "Input": "** envelopes = [[1,1],[1,1],[1,1]]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Design Twitter",
        "slug": "design-twitter",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"Twitter\", \"postTweet\", \"getNewsFeed\", \"follow\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\"]\n[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]",
                "Output": "[null, null, [5], null, null, [6, 5], null, [5]]",
                "Explanation": "Twitter twitter = new Twitter();\ntwitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]\ntwitter.follow(1, 2);    // User 1 follows user 2.\ntwitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\ntwitter.unfollow(1, 2);  // User 1 unfollows user 2.\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2."
            }
        ]
    },
    {
        "Title": "Count Numbers with Unique Digits",
        "slug": "count-numbers-with-unique-digits",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** 91",
                "Explanation": "** The answer should be the total numbers in the range of 0 \u2264 x < 100, excluding 11,22,33,44,55,66,77,88,99"
            },
            {
                "Input": "** n = 0",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Max Sum of Rectangle No Larger Than K",
        "slug": "max-sum-of-rectangle-no-larger-than-k",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** matrix = [[1,0,1],[0,-2,3]], k = 2",
                "Output": "** 2",
                "Explanation": "** Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2)."
            }
        ]
    },
    {
        "Title": "Water and Jug Problem",
        "slug": "water-and-jug-problem",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "**   x = 3, y = 5, target = 4",
                "Output": "**   true",
                "Explanation": "**\n\n\nFollow these steps to reach a total of 4 liters:\n\n\n1. Fill the 5-liter jug (0, 5).\n2. Pour from the 5-liter jug into the 3-liter jug, leaving 2 liters (3, 2).\n3. Empty the 3-liter jug (0, 2).\n4. Transfer the 2 liters from the 5-liter jug to the 3-liter jug (2, 0).\n5. Fill the 5-liter jug again (2, 5).\n6. Pour from the 5-liter jug into the 3-liter jug until the 3-liter jug is full. This leaves 4 liters in the 5-liter jug (3, 4).\n7. Empty the 3-liter jug. Now, you have exactly 4 liters in the 5-liter jug (0, 4).\n\n\nReference: The [Die Hard](https://www.youtube.com/watch?v=BVtQNK_ZUJg&ab_channel=notnek01) example."
            },
            {
                "Input": "**   x = 2, y = 6, target = 5",
                "Output": "**   false",
                "Explanation": null
            },
            {
                "Input": "**   x = 1, y = 2, target = 3",
                "Output": "**   true",
                "Explanation": "** Fill both jugs. The total amount of water in both jugs is equal to 3 now.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= x, y, target\u00a0<= 103`"
            }
        ]
    },
    {
        "Title": "Valid Perfect Square",
        "slug": "valid-perfect-square",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num = 16",
                "Output": "** true",
                "Explanation": "** We return true because 4 * 4 = 16 and 4 is an integer."
            },
            {
                "Input": "** num = 14",
                "Output": "** false",
                "Explanation": "** We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer."
            }
        ]
    },
    {
        "Title": "Largest Divisible Subset",
        "slug": "largest-divisible-subset",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** [1,2]",
                "Explanation": "** [1,3] is also accepted."
            },
            {
                "Input": "** nums = [1,2,4,8]",
                "Output": "** [1,2,4,8]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sum of Two Integers",
        "slug": "sum-of-two-integers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** a = 1, b = 2",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** a = 2, b = 3",
                "Output": "** 5",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Super Pow",
        "slug": "super-pow",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** a = 2, b = [3]",
                "Output": "** 8",
                "Explanation": null
            },
            {
                "Input": "** a = 2, b = [1,0]",
                "Output": "** 1024",
                "Explanation": null
            },
            {
                "Input": "** a = 1, b = [4,3,3,8,5,2]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find K Pairs with Smallest Sums",
        "slug": "find-k-pairs-with-smallest-sums",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums1 = [1,7,11], nums2 = [2,4,6], k = 3",
                "Output": "** [[1,2],[1,4],[1,6]]",
                "Explanation": "** The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]"
            },
            {
                "Input": "** nums1 = [1,1,2], nums2 = [1,2,3], k = 2",
                "Output": "** [[1,1],[1,1]]",
                "Explanation": "** The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]"
            }
        ]
    },
    {
        "Title": "Guess Number Higher or Lower",
        "slug": "guess-number-higher-or-lower",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 10, pick = 6",
                "Output": "** 6",
                "Explanation": null
            },
            {
                "Input": "** n = 1, pick = 1",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** n = 2, pick = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Guess Number Higher or Lower II",
        "slug": "guess-number-higher-or-lower-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 10",
                "Output": "** 16",
                "Explanation": "** The winning strategy is as follows:\n- The range is [1,10]. Guess 7.\n\u00a0   - If this is my number, your total is $0. Otherwise, you pay $7.\n\u00a0   - If my number is higher, the range is [8,10]. Guess 9.\n\u00a0       - If this is my number, your total is $7. Otherwise, you pay $9.\n\u00a0       - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.\n\u00a0       - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.\n\u00a0   - If my number is lower, the range is [1,6]. Guess 3.\n\u00a0       - If this is my number, your total is $7. Otherwise, you pay $3.\n\u00a0       - If my number is higher, the range is [4,6]. Guess 5.\n\u00a0           - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.\n\u00a0           - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.\n\u00a0           - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.\n\u00a0       - If my number is lower, the range is [1,2]. Guess 1.\n\u00a0           - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.\n\u00a0           - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.\nThe worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win."
            }
        ]
    },
    {
        "Title": "Wiggle Subsequence",
        "slug": "wiggle-subsequence",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,7,4,9,2,5]",
                "Output": "** 6",
                "Explanation": "** The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3)."
            },
            {
                "Input": "** nums = [1,17,5,10,13,15,10,5,16,8]",
                "Output": "** 7",
                "Explanation": "** There are several subsequences that achieve this length.\nOne is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8)."
            },
            {
                "Input": "** nums = [1,2,3,4,5,6,7,8,9]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Combination Sum IV",
        "slug": "combination-sum-iv",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3], target = 4",
                "Output": "** 7",
                "Explanation": "**\nThe possible combination ways are:\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\nNote that different sequences are counted as different combinations."
            },
            {
                "Input": "** nums = [9], target = 3",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Kth Smallest Element in a Sorted Matrix",
        "slug": "kth-smallest-element-in-a-sorted-matrix",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8",
                "Output": "** 13",
                "Explanation": "** The elements in the matrix are [1,5,9,10,11,12,13,**13**,15], and the 8th smallest number is 13"
            },
            {
                "Input": "** matrix = [[-5]], k = 1",
                "Output": "** -5",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Insert Delete GetRandom O(1)",
        "slug": "insert-delete-getrandom-o1",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n[[], [1], [2], [2], [], [1], [2], []]",
                "Output": "[null, true, false, true, 2, true, false, 2]",
                "Explanation": "RandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomizedSet.remove(2); // Returns false as 2 does not exist in the set.\nrandomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\nrandomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\nrandomizedSet.insert(2); // 2 was already in the set, so return false.\nrandomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2."
            }
        ]
    },
    {
        "Title": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "slug": "insert-delete-getrandom-o1-duplicates-allowed",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"RandomizedCollection\", \"insert\", \"insert\", \"insert\", \"getRandom\", \"remove\", \"getRandom\"]\n[[], [1], [1], [2], [], [1], []]",
                "Output": "[null, true, false, true, 2, true, 1]",
                "Explanation": "RandomizedCollection randomizedCollection = new RandomizedCollection();\nrandomizedCollection.insert(1);   // return true since the collection does not contain 1.\n                                  // Inserts 1 into the collection.\nrandomizedCollection.insert(1);   // return false since the collection contains 1.\n                                  // Inserts another 1 into the collection. Collection now contains [1,1].\nrandomizedCollection.insert(2);   // return true since the collection does not contain 2.\n                                  // Inserts 2 into the collection. Collection now contains [1,1,2].\nrandomizedCollection.getRandom(); // getRandom should:\n                                  // - return 1 with probability 2/3, or\n                                  // - return 2 with probability 1/3.\nrandomizedCollection.remove(1);   // return true since the collection contains 1.\n                                  // Removes 1 from the collection. Collection now contains [1,2].\nrandomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely."
            }
        ]
    },
    {
        "Title": "Linked List Random Node",
        "slug": "linked-list-random-node",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"Solution\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\"]\n[[[1, 2, 3]], [], [], [], [], []]",
                "Output": "[null, 1, 3, 2, 2, 3]",
                "Explanation": "Solution solution = new Solution([1, 2, 3]);\nsolution.getRandom(); // return 1\nsolution.getRandom(); // return 3\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 3\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning."
            }
        ]
    },
    {
        "Title": "Ransom Note",
        "slug": "ransom-note",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** ransomNote = \"a\", magazine = \"b\"",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** ransomNote = \"aa\", magazine = \"ab\"",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** ransomNote = \"aa\", magazine = \"aab\"",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Shuffle an Array",
        "slug": "shuffle-an-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]\n[[[1, 2, 3]], [], [], []]",
                "Output": "[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]",
                "Explanation": "Solution solution = new Solution([1, 2, 3]);\nsolution.shuffle();    // Shuffle the array [1,2,3] and return its result.\n                       // Any permutation of [1,2,3] must be equally likely to be returned.\n                       // Example: return [3, 1, 2]\nsolution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]\nsolution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]"
            }
        ]
    },
    {
        "Title": "Mini Parser",
        "slug": "mini-parser",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"324\"",
                "Output": "** 324",
                "Explanation": "** You should return a NestedInteger object which contains a single integer 324."
            },
            {
                "Input": "** s = \"[123,[456,[789]]]\"",
                "Output": "** [123,[456,[789]]]",
                "Explanation": "** Return a NestedInteger object containing a nested list with 2 elements:\n1. An integer containing value 123.\n2. A nested list containing two elements:\n    i.  An integer containing value 456.\n    ii. A nested list with one element:\n         a. An integer containing value 789"
            }
        ]
    },
    {
        "Title": "Lexicographical Numbers",
        "slug": "lexicographical-numbers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 13",
                "Output": "** [1,10,11,12,13,2,3,4,5,6,7,8,9]",
                "Explanation": null
            },
            {
                "Input": "** n = 2",
                "Output": "** [1,2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "First Unique Character in a String",
        "slug": "first-unique-character-in-a-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"leetcode\"",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** s = \"loveleetcode\"",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** s = \"aabb\"",
                "Output": "** -1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Absolute File Path",
        "slug": "longest-absolute-file-path",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** input = \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"",
                "Output": "** 20",
                "Explanation": "** We have only one file, and the absolute path is \"dir/subdir2/file.ext\" of length 20."
            },
            {
                "Input": "** input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"",
                "Output": "** 32",
                "Explanation": "** We have two files:\n\"dir/subdir1/file1.ext\" of length 21\n\"dir/subdir2/subsubdir2/file2.ext\" of length 32.\nWe return 32 since it is the longest absolute path to a file."
            }
        ]
    },
    {
        "Title": "Find the Difference",
        "slug": "find-the-difference",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"abcd\", t = \"abcde\"",
                "Output": "** \"e\"",
                "Explanation": "** 'e' is the letter that was added."
            },
            {
                "Input": "** s = \"\", t = \"y\"",
                "Output": "** \"y\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Elimination Game",
        "slug": "elimination-game",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 9",
                "Output": "** 6",
                "Explanation": "**\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\narr = [2, 4, 6, 8]\narr = [2, 6]\narr = [6]"
            },
            {
                "Input": "** n = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Perfect Rectangle",
        "slug": "perfect-rectangle",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]",
                "Output": "** true",
                "Explanation": "** All 5 rectangles together form an exact cover of a rectangular region."
            },
            {
                "Input": "** rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]",
                "Output": "** false",
                "Explanation": "** Because there is a gap between the two rectangular regions."
            },
            {
                "Input": "** rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]",
                "Output": "** false",
                "Explanation": "** Because two of the rectangles overlap with each other."
            }
        ]
    },
    {
        "Title": "Is Subsequence",
        "slug": "is-subsequence",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"abc\", t = \"ahbgdc\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"axc\", t = \"ahbgdc\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "UTF-8 Validation",
        "slug": "utf-8-validation",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** data = [197,130,1]",
                "Output": "** true",
                "Explanation": "** data represents the octet sequence: 11000101 10000010 00000001.\nIt is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character."
            },
            {
                "Input": "** data = [235,140,4]",
                "Output": "** false",
                "Explanation": "** data represented the octet sequence: 11101011 10001100 00000100.\nThe first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.\nThe next byte is a continuation byte which starts with 10 and that's correct.\nBut the second continuation byte does not start with 10, so it is invalid."
            }
        ]
    },
    {
        "Title": "Decode String",
        "slug": "decode-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"3[a]2[bc]\"",
                "Output": "** \"aaabcbc\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"3[a2[c]]\"",
                "Output": "** \"accaccacc\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"2[abc]3[cd]ef\"",
                "Output": "** \"abcabccdcdcdef\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Substring with At Least K Repeating Characters",
        "slug": "longest-substring-with-at-least-k-repeating-characters",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"aaabb\", k = 3",
                "Output": "** 3",
                "Explanation": "** The longest substring is \"aaa\", as 'a' is repeated 3 times."
            },
            {
                "Input": "** s = \"ababbc\", k = 2",
                "Output": "** 5",
                "Explanation": "** The longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times."
            }
        ]
    },
    {
        "Title": "Rotate Function",
        "slug": "rotate-function",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [4,3,2,6]",
                "Output": "** 26",
                "Explanation": "**\nF(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\nSo the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26."
            },
            {
                "Input": "** nums = [100]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Integer Replacement",
        "slug": "integer-replacement",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 8",
                "Output": "** 3",
                "Explanation": "** 8 -> 4 -> 2 -> 1"
            },
            {
                "Input": "** n = 7",
                "Output": "** 4",
                "Explanation": "** 7 -> 8 -> 4 -> 2 -> 1\nor 7 -> 6 -> 3 -> 2 -> 1"
            },
            {
                "Input": "** n = 4",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Random Pick Index",
        "slug": "random-pick-index",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"Solution\", \"pick\", \"pick\", \"pick\"]\n[[[1, 2, 3, 3, 3]], [3], [1], [3]]",
                "Output": "[null, 4, 0, 2]",
                "Explanation": "Solution solution = new Solution([1, 2, 3, 3, 3]);\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\nsolution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning."
            }
        ]
    },
    {
        "Title": "Evaluate Division",
        "slug": "evaluate-division",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]",
                "Output": "** [6.00000,0.50000,-1.00000,1.00000,-1.00000]",
                "Explanation": "** \nGiven: *a / b = 2.0*, *b / c = 3.0*\nqueries are: *a / c = ?*, *b / a = ?*, *a / e = ?*, *a / a = ?*, *x / x = ?* \nreturn: [6.0, 0.5, -1.0, 1.0, -1.0 ]\nnote: x is undefined => -1.0"
            },
            {
                "Input": "** equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]",
                "Output": "** [3.75000,0.40000,5.00000,0.20000]",
                "Explanation": null
            },
            {
                "Input": "** equations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]",
                "Output": "** [0.50000,2.00000,-1.00000,-1.00000]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Nth Digit",
        "slug": "nth-digit",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** n = 11",
                "Output": "** 0",
                "Explanation": "** The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10."
            }
        ]
    },
    {
        "Title": "Binary Watch",
        "slug": "binary-watch",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** turnedOn = 1",
                "Output": "** [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]",
                "Explanation": null
            },
            {
                "Input": "** turnedOn = 9",
                "Output": "** []",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove K Digits",
        "slug": "remove-k-digits",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** num = \"1432219\", k = 3",
                "Output": "** \"1219\"",
                "Explanation": "** Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest."
            },
            {
                "Input": "** num = \"10200\", k = 1",
                "Output": "** \"200\"",
                "Explanation": "** Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes."
            },
            {
                "Input": "** num = \"10\", k = 2",
                "Output": "** \"0\"",
                "Explanation": "** Remove all the digits from the number and it is left with nothing which is 0."
            }
        ]
    },
    {
        "Title": "Frog Jump",
        "slug": "frog-jump",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** stones = [0,1,3,5,6,8,12,17]",
                "Output": "** true",
                "Explanation": "** The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone."
            },
            {
                "Input": "** stones = [0,1,2,3,4,8,9,11]",
                "Output": "** false",
                "Explanation": "** There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large."
            }
        ]
    },
    {
        "Title": "Sum of Left Leaves",
        "slug": "sum-of-left-leaves",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [3,9,20,null,null,15,7]",
                "Output": "** 24",
                "Explanation": "** There are two left leaves in the binary tree, with values 9 and 15 respectively."
            }
        ]
    },
    {
        "Title": "Convert a Number to Hexadecimal",
        "slug": "convert-a-number-to-hexadecimal",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num = 26",
                "Output": "** \"1a\"",
                "Explanation": null
            },
            {
                "Input": "** num = -1",
                "Output": "** \"ffffffff\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Queue Reconstruction by Height",
        "slug": "queue-reconstruction-by-height",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]",
                "Output": "** [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]",
                "Explanation": "**\nPerson 0 has height 5 with no other people taller or the same height in front.\nPerson 1 has height 7 with no other people taller or the same height in front.\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\nHence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue."
            },
            {
                "Input": "** people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]",
                "Output": "** [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Trapping Rain Water II",
        "slug": "trapping-rain-water-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]",
                "Output": "** 4",
                "Explanation": "** After the rain, water is trapped between the blocks.\nWe have two small ponds 1 and 3 units trapped.\nThe total volume of water trapped is 4."
            },
            {
                "Input": "** heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]",
                "Output": "** 10",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Palindrome",
        "slug": "longest-palindrome",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"abccccdd\"",
                "Output": "** 7",
                "Explanation": "** One longest palindrome that can be built is \"dccaccd\", whose length is 7."
            },
            {
                "Input": "** s = \"a\"",
                "Output": "** 1",
                "Explanation": "** The longest palindrome that can be built is \"a\", whose length is 1."
            }
        ]
    },
    {
        "Title": "Split Array Largest Sum",
        "slug": "split-array-largest-sum",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [7,2,5,10,8], k = 2",
                "Output": "** 18",
                "Explanation": "** There are four ways to split nums into two subarrays.\nThe best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18."
            },
            {
                "Input": "** nums = [1,2,3,4,5], k = 2",
                "Output": "** 9",
                "Explanation": "** There are four ways to split nums into two subarrays.\nThe best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9."
            }
        ]
    },
    {
        "Title": "Fizz Buzz",
        "slug": "fizz-buzz",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** [\"1\",\"2\",\"Fizz\"]",
                "Explanation": null
            },
            {
                "Input": "** n = 5",
                "Output": "** [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]",
                "Explanation": null
            },
            {
                "Input": "** n = 15",
                "Output": "** [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Arithmetic Slices",
        "slug": "arithmetic-slices",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 3",
                "Explanation": "** We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself."
            },
            {
                "Input": "** nums = [1]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Third Maximum Number",
        "slug": "third-maximum-number",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [3,2,1]",
                "Output": "** 1",
                "Explanation": "**\nThe first distinct maximum is 3.\nThe second distinct maximum is 2.\nThe third distinct maximum is 1."
            },
            {
                "Input": "** nums = [1,2]",
                "Output": "** 2",
                "Explanation": "**\nThe first distinct maximum is 2.\nThe second distinct maximum is 1.\nThe third distinct maximum does not exist, so the maximum (2) is returned instead."
            },
            {
                "Input": "** nums = [2,2,3,1]",
                "Output": "** 1",
                "Explanation": "**\nThe first distinct maximum is 3.\nThe second distinct maximum is 2 (both 2's are counted together since they have the same value).\nThe third distinct maximum is 1."
            }
        ]
    },
    {
        "Title": "Add Strings",
        "slug": "add-strings",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num1 = \"11\", num2 = \"123\"",
                "Output": "** \"134\"",
                "Explanation": null
            },
            {
                "Input": "** num1 = \"456\", num2 = \"77\"",
                "Output": "** \"533\"",
                "Explanation": null
            },
            {
                "Input": "** num1 = \"0\", num2 = \"0\"",
                "Output": "** \"0\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Partition Equal Subset Sum",
        "slug": "partition-equal-subset-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,5,11,5]",
                "Output": "** true",
                "Explanation": "** The array can be partitioned as [1, 5, 5] and [11]."
            },
            {
                "Input": "** nums = [1,2,3,5]",
                "Output": "** false",
                "Explanation": "** The array cannot be partitioned into equal sum subsets."
            }
        ]
    },
    {
        "Title": "Pacific Atlantic Water Flow",
        "slug": "pacific-atlantic-water-flow",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]",
                "Output": "** [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]",
                "Explanation": "** The following cells can flow to the Pacific and Atlantic oceans, as shown below:\n[0,4]: [0,4] -> Pacific Ocean \n\u00a0      [0,4] -> Atlantic Ocean\n[1,3]: [1,3] -> [0,3] -> Pacific Ocean \n\u00a0      [1,3] -> [1,4] -> Atlantic Ocean\n[1,4]: [1,4] -> [1,3] -> [0,3] -> Pacific Ocean \n\u00a0      [1,4] -> Atlantic Ocean\n[2,2]: [2,2] -> [1,2] -> [0,2] -> Pacific Ocean \n\u00a0      [2,2] -> [2,3] -> [2,4] -> Atlantic Ocean\n[3,0]: [3,0] -> Pacific Ocean \n\u00a0      [3,0] -> [4,0] -> Atlantic Ocean\n[3,1]: [3,1] -> [3,0] -> Pacific Ocean \n\u00a0      [3,1] -> [4,1] -> Atlantic Ocean\n[4,0]: [4,0] -> Pacific Ocean \n       [4,0] -> Atlantic Ocean\nNote that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans."
            }
        ]
    },
    {
        "Title": "Battleships in a Board",
        "slug": "battleships-in-a-board",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** board = [[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Strong Password Checker",
        "slug": "strong-password-checker",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** password = \"a\"",
                "Output": "** 5",
                "Explanation": null
            },
            {
                "Input": "** password = \"aA1\"",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** password = \"1337C0d3\"",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum XOR of Two Numbers in an Array",
        "slug": "maximum-xor-of-two-numbers-in-an-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,10,5,25,2,8]",
                "Output": "** 28",
                "Explanation": "** The maximum result is 5 XOR 25 = 28."
            },
            {
                "Input": "** nums = [14,70,53,83,49,91,36,80,92,51,66,70]",
                "Output": "** 127",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reconstruct Original Digits from English",
        "slug": "reconstruct-original-digits-from-english",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"owoztneoer\"",
                "Output": "** \"012\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"fviefuro\"",
                "Output": "** \"45\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Repeating Character Replacement",
        "slug": "longest-repeating-character-replacement",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"ABAB\", k = 2",
                "Output": "** 4",
                "Explanation": "** Replace the two 'A's with two 'B's or vice versa."
            },
            {
                "Input": "** s = \"AABABBA\", k = 1",
                "Output": "** 4",
                "Explanation": "** Replace the one 'A' in the middle with 'B' and form \"AABBBBA\".\nThe substring \"BBBB\" has the longest repeating letters, which is 4.\nThere may exists other ways to achieve this answer too."
            }
        ]
    },
    {
        "Title": "Construct Quad Tree",
        "slug": "construct-quad-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[0,1],[1,0]]",
                "Output": "** [[0,1],[1,0],[1,1],[1,1],[1,0]]",
                "Explanation": "** The explanation of this example is shown below:\nNotice that 0 represents False and 1 represents True in the photo representing the Quad-Tree.\n![](https://assets.leetcode.com/uploads/2020/02/12/e1tree.png)"
            },
            {
                "Input": "** grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]",
                "Output": "** [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]",
                "Explanation": "** All values in the grid are not the same. We divide the grid into four sub-grids.\nThe topLeft, bottomLeft and bottomRight each has the same value.\nThe topRight have different values so we divide it into 4 sub-grids where each has the same value.\nExplanation is shown in the photo below:\n![](https://assets.leetcode.com/uploads/2020/02/12/e2tree.png)"
            }
        ]
    },
    {
        "Title": "N-ary Tree Level Order Traversal",
        "slug": "n-ary-tree-level-order-traversal",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,null,3,2,4,null,5,6]",
                "Output": "** [[1],[3,2,4],[5,6]]",
                "Explanation": null
            },
            {
                "Input": "** root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
                "Output": "** [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Flatten a Multilevel Doubly Linked List",
        "slug": "flatten-a-multilevel-doubly-linked-list",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]",
                "Output": "** [1,2,3,7,8,11,12,9,10,4,5,6]",
                "Explanation": "** The multilevel linked list in the input is shown.\nAfter flattening the multilevel linked list it becomes:\n![](https://assets.leetcode.com/uploads/2021/11/09/flatten12.jpg)"
            },
            {
                "Input": "** head = [1,2,null,3]",
                "Output": "** [1,3,2]",
                "Explanation": "** The multilevel linked list in the input is shown.\nAfter flattening the multilevel linked list it becomes:\n![](https://assets.leetcode.com/uploads/2021/11/24/list.jpg)"
            }
        ]
    },
    {
        "Title": "All O`one Data Structure",
        "slug": "all-oone-data-structure",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"AllOne\", \"inc\", \"inc\", \"getMaxKey\", \"getMinKey\", \"inc\", \"getMaxKey\", \"getMinKey\"]\n[[], [\"hello\"], [\"hello\"], [], [], [\"leet\"], [], []]",
                "Output": "[null, null, null, \"hello\", \"hello\", null, \"hello\", \"leet\"]",
                "Explanation": "AllOne allOne = new AllOne();\nallOne.inc(\"hello\");\nallOne.inc(\"hello\");\nallOne.getMaxKey(); // return \"hello\"\nallOne.getMinKey(); // return \"hello\"\nallOne.inc(\"leet\");\nallOne.getMaxKey(); // return \"hello\"\nallOne.getMinKey(); // return \"leet\""
            }
        ]
    },
    {
        "Title": "Minimum Genetic Mutation",
        "slug": "minimum-genetic-mutation",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** startGene = \"AACCGGTT\", endGene = \"AACCGGTA\", bank = [\"AACCGGTA\"]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** startGene = \"AACCGGTT\", endGene = \"AAACGGTA\", bank = [\"AACCGGTA\",\"AACCGCTA\",\"AAACGGTA\"]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Segments in a String",
        "slug": "number-of-segments-in-a-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"Hello, my name is John\"",
                "Output": "** 5",
                "Explanation": "** The five segments are [\"Hello,\", \"my\", \"name\", \"is\", \"John\"]"
            },
            {
                "Input": "** s = \"Hello\"",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Non-overlapping Intervals",
        "slug": "non-overlapping-intervals",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** intervals = [[1,2],[2,3],[3,4],[1,3]]",
                "Output": "** 1",
                "Explanation": "** [1,3] can be removed and the rest of the intervals are non-overlapping."
            },
            {
                "Input": "** intervals = [[1,2],[1,2],[1,2]]",
                "Output": "** 2",
                "Explanation": "** You need to remove two [1,2] to make the rest of the intervals non-overlapping."
            },
            {
                "Input": "** intervals = [[1,2],[2,3]]",
                "Output": "** 0",
                "Explanation": "** You don't need to remove any of the intervals since they're already non-overlapping."
            }
        ]
    },
    {
        "Title": "Find Right Interval",
        "slug": "find-right-interval",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** intervals = [[1,2]]",
                "Output": "** [-1]",
                "Explanation": "** There is only one interval in the collection, so it outputs -1."
            },
            {
                "Input": "** intervals = [[3,4],[2,3],[1,2]]",
                "Output": "** [-1,0,1]",
                "Explanation": "** There is no right interval for [3,4].\nThe right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is >= end1 = 3.\nThe right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is >= end2 = 2."
            },
            {
                "Input": "** intervals = [[1,4],[2,3],[3,4]]",
                "Output": "** [-1,2,-1]",
                "Explanation": "** There is no right interval for [1,4] and [3,4].\nThe right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1 = 3."
            }
        ]
    },
    {
        "Title": "Path Sum III",
        "slug": "path-sum-iii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8",
                "Output": "** 3",
                "Explanation": "** The paths that sum to 8 are shown."
            }
        ]
    },
    {
        "Title": "Find All Anagrams in a String",
        "slug": "find-all-anagrams-in-a-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"cbaebabacd\", p = \"abc\"",
                "Output": "** [0,6]",
                "Explanation": "**\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\"."
            },
            {
                "Input": "** s = \"abab\", p = \"ab\"",
                "Output": "** [0,1,2]",
                "Explanation": "**\nThe substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\"."
            }
        ]
    },
    {
        "Title": "K-th Smallest in Lexicographical Order",
        "slug": "k-th-smallest-in-lexicographical-order",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 13, k = 2",
                "Output": "** 10",
                "Explanation": "** The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10."
            },
            {
                "Input": "** n = 1, k = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Arranging Coins",
        "slug": "arranging-coins",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 5",
                "Output": "** 2",
                "Explanation": "** Because the 3rd row is incomplete, we return 2."
            },
            {
                "Input": "** n = 8",
                "Output": "** 3",
                "Explanation": "** Because the 4th row is incomplete, we return 3."
            }
        ]
    },
    {
        "Title": "Find All Duplicates in an Array",
        "slug": "find-all-duplicates-in-an-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [4,3,2,7,8,2,3,1]",
                "Output": "** [2,3]",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,1,2]",
                "Output": "** [1]",
                "Explanation": null
            },
            {
                "Input": "** nums = [1]",
                "Output": "** []",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Add Two Numbers II",
        "slug": "add-two-numbers-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** l1 = [7,2,4,3], l2 = [5,6,4]",
                "Output": "** [7,8,0,7]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Arithmetic Slices II - Subsequence",
        "slug": "arithmetic-slices-ii-subsequence",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [2,4,6,8,10]",
                "Output": "** 7",
                "Explanation": "** All arithmetic subsequence slices are:\n[2,4,6]\n[4,6,8]\n[6,8,10]\n[2,4,6,8]\n[4,6,8,10]\n[2,4,6,8,10]\n[2,6,10]"
            },
            {
                "Input": "** nums = [7,7,7,7,7]",
                "Output": "** 16",
                "Explanation": "** Any subsequence of this array is arithmetic."
            }
        ]
    },
    {
        "Title": "Number of Boomerangs",
        "slug": "number-of-boomerangs",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** points = [[0,0],[1,0],[2,0]]",
                "Output": "** 2",
                "Explanation": "** The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]."
            },
            {
                "Input": "** points = [[1,1],[2,2],[3,3]]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** points = [[1,1]]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find All Numbers Disappeared in an Array",
        "slug": "find-all-numbers-disappeared-in-an-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [4,3,2,7,8,2,3,1]",
                "Output": "** [5,6]",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,1]",
                "Output": "** [2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Serialize and Deserialize BST",
        "slug": "serialize-and-deserialize-bst",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [2,1,3]",
                "Output": "** [2,1,3]",
                "Explanation": null
            },
            {
                "Input": "** root = []",
                "Output": "** []",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Delete Node in a BST",
        "slug": "delete-node-in-a-bst",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [5,3,6,2,4,null,7], key = 3",
                "Output": "** [5,4,6,2,null,null,7]",
                "Explanation": "** Given key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is [5,4,6,2,null,null,7], shown in the above BST.\nPlease notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.\n![](https://assets.leetcode.com/uploads/2020/09/04/del_node_supp.jpg)"
            }
        ]
    },
    {
        "Title": "Sort Characters By Frequency",
        "slug": "sort-characters-by-frequency",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"tree\"",
                "Output": "** \"eert\"",
                "Explanation": "** 'e' appears twice while 'r' and 't' both appear once.\nSo 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer."
            },
            {
                "Input": "** s = \"cccaaa\"",
                "Output": "** \"aaaccc\"",
                "Explanation": "** Both 'c' and 'a' appear three times, so both \"cccaaa\" and \"aaaccc\" are valid answers.\nNote that \"cacaca\" is incorrect, as the same characters must be together."
            },
            {
                "Input": "** s = \"Aabb\"",
                "Output": "** \"bbAa\"",
                "Explanation": "** \"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\nNote that 'A' and 'a' are treated as two different characters."
            }
        ]
    },
    {
        "Title": "Minimum Number of Arrows to Burst Balloons",
        "slug": "minimum-number-of-arrows-to-burst-balloons",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** points = [[10,16],[2,8],[1,6],[7,12]]",
                "Output": "** 2",
                "Explanation": "** The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].\n- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12]."
            },
            {
                "Input": "** points = [[1,2],[3,4],[5,6],[7,8]]",
                "Output": "** 4",
                "Explanation": "** One arrow needs to be shot for each balloon for a total of 4 arrows."
            },
            {
                "Input": "** points = [[1,2],[2,3],[3,4],[4,5]]",
                "Output": "** 2",
                "Explanation": "** The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].\n- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5]."
            }
        ]
    },
    {
        "Title": "Minimum Moves to Equal Array Elements",
        "slug": "minimum-moves-to-equal-array-elements",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 3",
                "Explanation": "** Only three moves are needed (remember each move increments two elements):\n[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]"
            },
            {
                "Input": "** nums = [1,1,1]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "4Sum II",
        "slug": "4sum-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]",
                "Output": "** 2",
                "Explanation": "**\nThe two tuples are:\n1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0"
            },
            {
                "Input": "** nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Assign Cookies",
        "slug": "assign-cookies",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** g = [1,2,3], s = [1,1]",
                "Output": "** 1",
                "Explanation": "** You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\nYou need to output 1."
            },
            {
                "Input": "** g = [1,2], s = [1,2,3]",
                "Output": "** 2",
                "Explanation": "** You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \nYou have 3 cookies and their sizes are big enough to gratify all of the children, \nYou need to output 2."
            }
        ]
    },
    {
        "Title": "132 Pattern",
        "slug": "132-pattern",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** false",
                "Explanation": "** There is no 132 pattern in the sequence."
            },
            {
                "Input": "** nums = [3,1,4,2]",
                "Output": "** true",
                "Explanation": "** There is a 132 pattern in the sequence: [1, 4, 2]."
            },
            {
                "Input": "** nums = [-1,3,2,0]",
                "Output": "** true",
                "Explanation": "** There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0]."
            }
        ]
    },
    {
        "Title": "Circular Array Loop",
        "slug": "circular-array-loop",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,-1,1,2,2]",
                "Output": "** true",
                "Explanation": "** The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\nWe can see the cycle 0 --> 2 --> 3 --> 0 --> ..., and all of its nodes are white (jumping in the same direction)."
            },
            {
                "Input": "** nums = [-1,-2,-3,-4,-5,6]",
                "Output": "** false",
                "Explanation": "** The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\nThe only cycle is of size 1, so we return false."
            },
            {
                "Input": "** nums = [1,-1,5,1,4]",
                "Output": "** true",
                "Explanation": "** The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\nWe can see the cycle 0 --> 1 --> 0 --> ..., and while it is of size > 1, it has a node jumping forward and a node jumping backward, so **it is not a cycle**.\nWe can see the cycle 3 --> 4 --> 3 --> ..., and all of its nodes are white (jumping in the same direction)."
            }
        ]
    },
    {
        "Title": "Poor Pigs",
        "slug": "poor-pigs",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** buckets = 4, minutesToDie = 15, minutesToTest = 15",
                "Output": "** 2",
                "Explanation": "** We can determine the poisonous bucket as follows:\nAt time 0, feed the first pig buckets 1 and 2, and feed the second pig buckets 2 and 3.\nAt time 15, there are 4 possible outcomes:\n- If only the first pig dies, then bucket 1 must be poisonous.\n- If only the second pig dies, then bucket 3 must be poisonous.\n- If both pigs die, then bucket 2 must be poisonous.\n- If neither pig dies, then bucket 4 must be poisonous."
            },
            {
                "Input": "** buckets = 4, minutesToDie = 15, minutesToTest = 30",
                "Output": "** 2",
                "Explanation": "** We can determine the poisonous bucket as follows:\nAt time 0, feed the first pig bucket 1, and feed the second pig bucket 2.\nAt time 15, there are 2 possible outcomes:\n- If either pig dies, then the poisonous bucket is the one it was fed.\n- If neither pig dies, then feed the first pig bucket 3, and feed the second pig bucket 4.\nAt time 30, one of the two pigs must die, and the poisonous bucket is the one it was fed."
            }
        ]
    },
    {
        "Title": "Repeated Substring Pattern",
        "slug": "repeated-substring-pattern",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"abab\"",
                "Output": "** true",
                "Explanation": "** It is the substring \"ab\" twice."
            },
            {
                "Input": "** s = \"aba\"",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** s = \"abcabcabcabc\"",
                "Output": "** true",
                "Explanation": "** It is the substring \"abc\" four times or the substring \"abcabc\" twice."
            }
        ]
    },
    {
        "Title": "LFU Cache",
        "slug": "lfu-cache",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"LFUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]",
                "Output": "[null, null, null, 1, null, -1, 3, null, -1, 3, 4]",
                "Explanation": "// cnt(x) = the use counter for key x\n// cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)\nLFUCache lfu = new LFUCache(2);\nlfu.put(1, 1);   // cache=[1,_], cnt(1)=1\nlfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1\nlfu.get(1);      // return 1\n                 // cache=[1,2], cnt(2)=1, cnt(1)=2\nlfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.\n\u00a0                // cache=[3,1], cnt(3)=1, cnt(1)=2\nlfu.get(2);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,1], cnt(3)=2, cnt(1)=2\nlfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.\n                 // cache=[4,3], cnt(4)=1, cnt(3)=2\nlfu.get(1);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,4], cnt(4)=1, cnt(3)=3\nlfu.get(4);      // return 4\n                 // cache=[4,3], cnt(4)=2, cnt(3)=3"
            }
        ]
    },
    {
        "Title": "Hamming Distance",
        "slug": "hamming-distance",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** x = 1, y = 4",
                "Output": "** 2",
                "Explanation": "**\n1   (0 0 0 1)\n4   (0 1 0 0)\n       \u2191   \u2191\nThe above arrows point to positions where the corresponding bits are different."
            },
            {
                "Input": "** x = 3, y = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Moves to Equal Array Elements II",
        "slug": "minimum-moves-to-equal-array-elements-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 2",
                "Explanation": "**\nOnly two moves are needed (remember each move increments or decrements one element):\n[1,2,3]  =>  [2,2,3]  =>  [2,2,2]"
            },
            {
                "Input": "** nums = [1,10,2,9]",
                "Output": "** 16",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Island Perimeter",
        "slug": "island-perimeter",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]",
                "Output": "** 16",
                "Explanation": "** The perimeter is the 16 yellow stripes in the image above."
            }
        ]
    },
    {
        "Title": "Can I Win",
        "slug": "can-i-win",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** maxChoosableInteger = 10, desiredTotal = 11",
                "Output": "** false",
                "Explanation": "**\nNo matter which integer the first player choose, the first player will lose.\nThe first player can choose an integer from 1 up to 10.\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\nThe second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\nSame with other integers chosen by the first player, the second player will always win."
            },
            {
                "Input": "** maxChoosableInteger = 10, desiredTotal = 0",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** maxChoosableInteger = 10, desiredTotal = 1",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count The Repetitions",
        "slug": "count-the-repetitions",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Unique Substrings in Wraparound String",
        "slug": "unique-substrings-in-wraparound-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"a\"",
                "Output": "** 1",
                "Explanation": "** Only the substring \"a\" of s is in base."
            },
            {
                "Input": "** s = \"cac\"",
                "Output": "** 2",
                "Explanation": "** There are two substrings (\"a\", \"c\") of s in base."
            },
            {
                "Input": "** s = \"zab\"",
                "Output": "** 6",
                "Explanation": "** There are six substrings (\"z\", \"a\", \"b\", \"za\", \"ab\", and \"zab\") of s in base."
            }
        ]
    },
    {
        "Title": "Validate IP Address",
        "slug": "validate-ip-address",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** queryIP = \"172.16.254.1\"",
                "Output": "** \"IPv4\"",
                "Explanation": "** This is a valid IPv4 address, return \"IPv4\"."
            },
            {
                "Input": "** queryIP = \"2001:0db8:85a3:0:0:8A2E:0370:7334\"",
                "Output": "** \"IPv6\"",
                "Explanation": "** This is a valid IPv6 address, return \"IPv6\"."
            },
            {
                "Input": "** queryIP = \"256.256.256.256\"",
                "Output": "** \"Neither\"",
                "Explanation": "** This is neither a IPv4 address nor a IPv6 address."
            }
        ]
    },
    {
        "Title": "Implement Rand10() Using Rand7()",
        "slug": "implement-rand10-using-rand7",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** [2]",
                "Explanation": null
            },
            {
                "Input": "** n = 2",
                "Output": "** [2,8]",
                "Explanation": null
            },
            {
                "Input": "** n = 3",
                "Output": "** [3,8,10]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Concatenated Words",
        "slug": "concatenated-words",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]",
                "Output": "** [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"]",
                "Explanation": "** \"catsdogcats\" can be concatenated by \"cats\", \"dog\" and \"cats\"; \n\"dogcatsdog\" can be concatenated by \"dog\", \"cats\" and \"dog\"; \n\"ratcatdogcat\" can be concatenated by \"rat\", \"cat\", \"dog\" and \"cat\"."
            },
            {
                "Input": "** words = [\"cat\",\"dog\",\"catdog\"]",
                "Output": "** [\"catdog\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Matchsticks to Square",
        "slug": "matchsticks-to-square",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** matchsticks = [1,1,2,2,2]",
                "Output": "** true",
                "Explanation": "** You can form a square with length 2, one side of the square came two sticks with length 1."
            }
        ]
    },
    {
        "Title": "Ones and Zeroes",
        "slug": "ones-and-zeroes",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** strs = [\"10\",\"0001\",\"111001\",\"1\",\"0\"], m = 5, n = 3",
                "Output": "** 4",
                "Explanation": "** The largest subset with at most 5 0's and 3 1's is {\"10\", \"0001\", \"1\", \"0\"}, so the answer is 4.\nOther valid but smaller subsets include {\"0001\", \"1\"} and {\"10\", \"1\", \"0\"}.\n{\"111001\"} is an invalid subset because it contains 4 1's, greater than the maximum of 3."
            },
            {
                "Input": "** strs = [\"10\",\"0\",\"1\"], m = 1, n = 1",
                "Output": "** 2",
                "Explanation": "** The largest subset is {\"0\", \"1\"}, so the answer is 2."
            }
        ]
    },
    {
        "Title": "Heaters",
        "slug": "heaters",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** houses = [1,2,3], heaters = [2]",
                "Output": "** 1",
                "Explanation": "** The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed."
            },
            {
                "Input": "** houses = [1,2,3,4], heaters = [1,4]",
                "Output": "** 1",
                "Explanation": "** The two heaters were placed at positions 1 and 4. We need to use a radius 1 standard, then all the houses can be warmed."
            },
            {
                "Input": "** houses = [1,5], heaters = [2]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number Complement",
        "slug": "number-complement",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num = 5",
                "Output": "** 2",
                "Explanation": "** The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2."
            },
            {
                "Input": "** num = 1",
                "Output": "** 0",
                "Explanation": "** The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0."
            }
        ]
    },
    {
        "Title": "Total Hamming Distance",
        "slug": "total-hamming-distance",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [4,14,2]",
                "Output": "** 6",
                "Explanation": "** In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\nshowing the four bits relevant in this case).\nThe answer will be:\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6."
            },
            {
                "Input": "** nums = [4,14,4]",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Generate Random Point in a Circle",
        "slug": "generate-random-point-in-a-circle",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"Solution\", \"randPoint\", \"randPoint\", \"randPoint\"]\n[[1.0, 0.0, 0.0], [], [], []]",
                "Output": "[null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]",
                "Explanation": "Solution solution = new Solution(1.0, 0.0, 0.0);\nsolution.randPoint(); // return [-0.02493, -0.38077]\nsolution.randPoint(); // return [0.82314, 0.38945]\nsolution.randPoint(); // return [0.36572, 0.17248]"
            }
        ]
    },
    {
        "Title": "Largest Palindrome Product",
        "slug": "largest-palindrome-product",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** 987\nExplanation: 99 x 91 = 9009, 9009 % 1337 = 987",
                "Explanation": null
            },
            {
                "Input": "** n = 1",
                "Output": "** 9",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sliding Window Median",
        "slug": "sliding-window-median",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,3,-1,-3,5,3,6,7], k = 3",
                "Output": "** [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]",
                "Explanation": "** \nWindow position                Median\n---------------                -----\n[**1 3 -1**] -3  5  3  6  7        1\n 1 [**3 -1 -3**] 5  3  6  7       -1\n 1  3 [**-1 -3 5**] 3  6  7       -1\n 1  3  -1 [**-3 5 3**] 6  7        3\n 1  3  -1  -3 [**5 3 6**] 7        5\n 1  3  -1  -3  5 [**3 6 7**]       6"
            },
            {
                "Input": "** nums = [1,2,3,4,2,3,1,4,2], k = 3",
                "Output": "** [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Magical String",
        "slug": "magical-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 6",
                "Output": "** 3",
                "Explanation": "** The first 6 elements of magical string s is \"122112\" and it contains three 1's, so return 3."
            },
            {
                "Input": "** n = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "License Key Formatting",
        "slug": "license-key-formatting",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"5F3Z-2e-9-w\", k = 4",
                "Output": "** \"5F3Z-2E9W\"",
                "Explanation": "** The string s has been split into two parts, each part has 4 characters.\nNote that the two extra dashes are not needed and can be removed."
            },
            {
                "Input": "** s = \"2-5g-3-J\", k = 2",
                "Output": "** \"2-5G-3J\"",
                "Explanation": "** The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above."
            }
        ]
    },
    {
        "Title": "Smallest Good Base",
        "slug": "smallest-good-base",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = \"13\"",
                "Output": "** \"3\"",
                "Explanation": "** 13 base 3 is 111."
            },
            {
                "Input": "** n = \"4681\"",
                "Output": "** \"8\"",
                "Explanation": "** 4681 base 8 is 11111."
            },
            {
                "Input": "** n = \"1000000000000000000\"",
                "Output": "** \"999999999999999999\"",
                "Explanation": "** 1000000000000000000 base 999999999999999999 is 11."
            }
        ]
    },
    {
        "Title": "Max Consecutive Ones",
        "slug": "max-consecutive-ones",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,1,0,1,1,1]",
                "Output": "** 3",
                "Explanation": "** The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3."
            },
            {
                "Input": "** nums = [1,0,1,1,0,1]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Predict the Winner",
        "slug": "predict-the-winner",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,5,2]",
                "Output": "** false",
                "Explanation": "** Initially, player 1 can choose between 1 and 2. \nIf he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). \nSo, final score of player 1 is 1 + 2 = 3, and player 2 is 5. \nHence, player 1 will never be the winner and you need to return false."
            },
            {
                "Input": "** nums = [1,5,233,7]",
                "Output": "** true",
                "Explanation": "** Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.\nFinally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win."
            }
        ]
    },
    {
        "Title": "Zuma Game",
        "slug": "zuma-game",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** board = \"WRRBBW\", hand = \"RB\"",
                "Output": "** -1",
                "Explanation": "** It is impossible to clear all the balls. The best you can do is:\n- Insert 'R' so the board becomes WRRRBBW. WRRRBBW -> WBBW.\n- Insert 'B' so the board becomes WBBBW. WBBBW -> WW.\nThere are still balls remaining on the board, and you are out of balls to insert."
            },
            {
                "Input": "** board = \"WWRRBBWW\", hand = \"WRBRW\"",
                "Output": "** 2",
                "Explanation": "** To make the board empty:\n- Insert 'R' so the board becomes WWRRRBBWW. WWRRRBBWW -> WWBBWW.\n- Insert 'B' so the board becomes WWBBBWW. WWBBBWW -> WWWW -> empty.\n2 balls from your hand were needed to clear the board."
            },
            {
                "Input": "** board = \"G\", hand = \"GGGGG\"",
                "Output": "** 2",
                "Explanation": "** To make the board empty:\n- Insert 'G' so the board becomes GG.\n- Insert 'G' so the board becomes GGG. GGG -> empty.\n2 balls from your hand were needed to clear the board."
            }
        ]
    },
    {
        "Title": "Non-decreasing Subsequences",
        "slug": "non-decreasing-subsequences",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [4,6,7,7]",
                "Output": "** [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]",
                "Explanation": null
            },
            {
                "Input": "** nums = [4,4,3,2,1]",
                "Output": "** [[4,4]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Construct the Rectangle",
        "slug": "construct-the-rectangle",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** area = 4",
                "Output": "** [2,2]",
                "Explanation": "** The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. \nBut according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2."
            },
            {
                "Input": "** area = 37",
                "Output": "** [37,1]",
                "Explanation": null
            },
            {
                "Input": "** area = 122122",
                "Output": "** [427,286]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reverse Pairs",
        "slug": "reverse-pairs",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,3,2,3,1]",
                "Output": "** 2",
                "Explanation": "** The reverse pairs are:\n(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1\n(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1"
            },
            {
                "Input": "** nums = [2,4,3,5,1]",
                "Output": "** 3",
                "Explanation": "** The reverse pairs are:\n(1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1\n(2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1\n(3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1"
            }
        ]
    },
    {
        "Title": "Target Sum",
        "slug": "target-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,1,1,1,1], target = 3",
                "Output": "** 5",
                "Explanation": "** There are 5 ways to assign symbols to make the sum of nums be target 3.\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3"
            },
            {
                "Input": "** nums = [1], target = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Teemo Attacking",
        "slug": "teemo-attacking",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** timeSeries = [1,4], duration = 2",
                "Output": "** 4",
                "Explanation": "** Teemo's attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.\nAshe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total."
            },
            {
                "Input": "** timeSeries = [1,2], duration = 2",
                "Output": "** 3",
                "Explanation": "** Teemo's attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.\nAshe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total."
            }
        ]
    },
    {
        "Title": "Next Greater Element I",
        "slug": "next-greater-element-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums1 = [4,1,2], nums2 = [1,3,4,2]",
                "Output": "** [-1,3,-1]",
                "Explanation": "** The next greater element for each value of nums1 is as follows:\n- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.\n- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1."
            },
            {
                "Input": "** nums1 = [2,4], nums2 = [1,2,3,4]",
                "Output": "** [3,-1]",
                "Explanation": "** The next greater element for each value of nums1 is as follows:\n- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.\n- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1."
            }
        ]
    },
    {
        "Title": "Random Point in Non-overlapping Rectangles",
        "slug": "random-point-in-non-overlapping-rectangles",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\n[[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []]",
                "Output": "[null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]",
                "Explanation": "Solution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]);\nsolution.pick(); // return [1, -2]\nsolution.pick(); // return [1, -1]\nsolution.pick(); // return [-1, -2]\nsolution.pick(); // return [-2, -2]\nsolution.pick(); // return [0, 0]"
            }
        ]
    },
    {
        "Title": "Diagonal Traverse",
        "slug": "diagonal-traverse",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** mat = [[1,2,3],[4,5,6],[7,8,9]]",
                "Output": "** [1,2,4,7,5,3,6,8,9]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Keyboard Row",
        "slug": "keyboard-row",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]",
                "Output": "** [\"Alaska\",\"Dad\"]",
                "Explanation": null
            },
            {
                "Input": "** words = [\"omk\"]",
                "Output": "** []",
                "Explanation": null
            },
            {
                "Input": "** words = [\"adsdf\",\"sfd\"]",
                "Output": "** [\"adsdf\",\"sfd\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Mode in Binary Search Tree",
        "slug": "find-mode-in-binary-search-tree",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [1,null,2,2]",
                "Output": "** [2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "IPO",
        "slug": "ipo",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]",
                "Output": "** 4",
                "Explanation": "** Since your initial capital is 0, you can only start the project indexed 0.\nAfter finishing it you will obtain profit 1 and your capital becomes 1.\nWith capital 1, you can either start the project indexed 1 or the project indexed 2.\nSince you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.\nTherefore, output the final maximized capital, which is 0 + 1 + 3 = 4."
            },
            {
                "Input": "** k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]",
                "Output": "** 6",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Next Greater Element II",
        "slug": "next-greater-element-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,1]",
                "Output": "** [2,-1,2]\nExplanation: The first 1's next greater number is 2; \nThe number 2 can't find next greater number. \nThe second 1's next greater number needs to search circularly, which is also 2.",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2,3,4,3]",
                "Output": "** [2,3,4,-1,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Base 7",
        "slug": "base-7",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num = 100",
                "Output": "** \"202\"",
                "Explanation": null
            },
            {
                "Input": "** num = -7",
                "Output": "** \"-10\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Relative Ranks",
        "slug": "relative-ranks",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** score = [5,4,3,2,1]",
                "Output": "** [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]",
                "Explanation": "** The placements are [1st, 2nd, 3rd, 4th, 5th]."
            },
            {
                "Input": "** score = [10,3,8,9,4]",
                "Output": "** [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]",
                "Explanation": "** The placements are [1st, 5th, 3rd, 2nd, 4th]."
            }
        ]
    },
    {
        "Title": "Perfect Number",
        "slug": "perfect-number",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num = 28",
                "Output": "** true",
                "Explanation": "** 28 = 1 + 2 + 4 + 7 + 14\n1, 2, 4, 7, and 14 are all divisors of 28."
            },
            {
                "Input": "** num = 7",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Most Frequent Subtree Sum",
        "slug": "most-frequent-subtree-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [5,2,-3]",
                "Output": "** [2,-3,4]",
                "Explanation": null
            },
            {
                "Input": "** root = [5,2,-5]",
                "Output": "** [2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Fibonacci Number",
        "slug": "fibonacci-number",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** 1",
                "Explanation": "** F(2) = F(1) + F(0) = 1 + 0 = 1."
            },
            {
                "Input": "** n = 3",
                "Output": "** 2",
                "Explanation": "** F(3) = F(2) + F(1) = 1 + 1 = 2."
            },
            {
                "Input": "** n = 4",
                "Output": "** 3",
                "Explanation": "** F(4) = F(3) + F(2) = 2 + 1 = 3."
            }
        ]
    },
    {
        "Title": "Game Play Analysis I",
        "slug": "game-play-analysis-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nActivity table:\n+-----------+-----------+------------+--------------+\n| player_id | device_id | event_date | games_played |\n+-----------+-----------+------------+--------------+\n| 1         | 2         | 2016-03-01 | 5            |\n| 1         | 2         | 2016-05-02 | 6            |\n| 2         | 3         | 2017-06-25 | 1            |\n| 3         | 1         | 2016-03-02 | 0            |\n| 3         | 4         | 2018-07-03 | 5            |\n+-----------+-----------+------------+--------------+",
                "Output": "** \n+-----------+-------------+\n| player_id | first_login |\n+-----------+-------------+\n| 1         | 2016-03-01  |\n| 2         | 2017-06-25  |\n| 3         | 2016-03-02  |\n+-----------+-------------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Bottom Left Tree Value",
        "slug": "find-bottom-left-tree-value",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [2,1,3]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** root = [1,2,3,4,null,5,6,null,null,7]",
                "Output": "** 7",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Freedom Trail",
        "slug": "freedom-trail",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** ring = \"godding\", key = \"gd\"",
                "Output": "** 4",
                "Explanation": "**\nFor the first key character 'g', since it is already in place, we just need 1 step to spell this character. \nFor the second key character 'd', we need to rotate the ring \"godding\" anticlockwise by two steps to make it become \"ddinggo\".\nAlso, we need 1 more step for spelling.\nSo the final output is 4."
            }
        ]
    },
    {
        "Title": "Find Largest Value in Each Tree Row",
        "slug": "find-largest-value-in-each-tree-row",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,3,2,5,3,null,9]",
                "Output": "** [1,3,9]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Palindromic Subsequence",
        "slug": "longest-palindromic-subsequence",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"bbbab\"",
                "Output": "** 4",
                "Explanation": "** One possible longest palindromic subsequence is \"bbbb\"."
            },
            {
                "Input": "** s = \"cbbd\"",
                "Output": "** 2",
                "Explanation": "** One possible longest palindromic subsequence is \"bb\"."
            }
        ]
    },
    {
        "Title": "Super Washing Machines",
        "slug": "super-washing-machines",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** machines = [1,0,5]",
                "Output": "** 3",
                "Explanation": "**\n1st move:    1     0 <-- 5    =>    1     1     4\n2nd move:    1 <-- 1 <-- 4    =>    2     1     3\n3rd move:    2     1 <-- 3    =>    2     2     2"
            },
            {
                "Input": "** machines = [0,3,0]",
                "Output": "** 2",
                "Explanation": "**\n1st move:    0 <-- 3     0    =>    1     2     0\n2nd move:    1     2 --> 0    =>    1     1     1"
            },
            {
                "Input": "** machines = [0,2,0]",
                "Output": "** -1",
                "Explanation": "**\nIt's impossible to make all three washing machines have the same number of dresses."
            }
        ]
    },
    {
        "Title": "Coin Change II",
        "slug": "coin-change-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** amount = 5, coins = [1,2,5]",
                "Output": "** 4",
                "Explanation": "** there are four ways to make up the amount:\n5=5\n5=2+2+1\n5=2+1+1+1\n5=1+1+1+1+1"
            },
            {
                "Input": "** amount = 3, coins = [2]",
                "Output": "** 0",
                "Explanation": "** the amount of 3 cannot be made up just with coins of 2."
            },
            {
                "Input": "** amount = 10, coins = [10]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Random Flip Matrix",
        "slug": "random-flip-matrix",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"Solution\", \"flip\", \"flip\", \"flip\", \"reset\", \"flip\"]\n[[3, 1], [], [], [], [], []]",
                "Output": "[null, [1, 0], [2, 0], [0, 0], null, [2, 0]]",
                "Explanation": "Solution solution = new Solution(3, 1);\nsolution.flip();  // return [1, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.\nsolution.flip();  // return [2, 0], Since [1,0] was returned, [2,0] and [0,0]\nsolution.flip();  // return [0, 0], Based on the previously returned indices, only [0,0] can be returned.\nsolution.reset(); // All the values are reset to 0 and can be returned.\nsolution.flip();  // return [2, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned."
            }
        ]
    },
    {
        "Title": "Detect Capital",
        "slug": "detect-capital",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** word = \"USA\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** word = \"FlaG\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Uncommon Subsequence I",
        "slug": "longest-uncommon-subsequence-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** a = \"aba\", b = \"cdc\"",
                "Output": "** 3",
                "Explanation": "** One longest uncommon subsequence is \"aba\" because \"aba\" is a subsequence of \"aba\" but not \"cdc\".\nNote that \"cdc\" is also a longest uncommon subsequence."
            },
            {
                "Input": "** a = \"aaa\", b = \"bbb\"",
                "Output": "** 3",
                "Explanation": "**\u00a0The longest uncommon subsequences are \"aaa\" and \"bbb\"."
            },
            {
                "Input": "** a = \"aaa\", b = \"aaa\"",
                "Output": "** -1",
                "Explanation": "**\u00a0Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a. So the answer would be -1."
            }
        ]
    },
    {
        "Title": "Longest Uncommon Subsequence II",
        "slug": "longest-uncommon-subsequence-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** strs = [\"aba\",\"cdc\",\"eae\"]",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** strs = [\"aaa\",\"aaa\",\"aa\"]",
                "Output": "** -1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Continuous Subarray Sum",
        "slug": "continuous-subarray-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [23,2,4,6,7], k = 6",
                "Output": "** true",
                "Explanation": "** [2, 4] is a continuous subarray of size 2 whose elements sum up to 6."
            },
            {
                "Input": "** nums = [23,2,6,4,7], k = 6",
                "Output": "** true",
                "Explanation": "** [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.\n42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer."
            },
            {
                "Input": "** nums = [23,2,6,4,7], k = 13",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Word in Dictionary through Deleting",
        "slug": "longest-word-in-dictionary-through-deleting",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"]",
                "Output": "** \"apple\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"abpcplea\", dictionary = [\"a\",\"b\",\"c\"]",
                "Output": "** \"a\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Contiguous Array",
        "slug": "contiguous-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [0,1]",
                "Output": "** 2",
                "Explanation": "** [0, 1] is the longest contiguous subarray with an equal number of 0 and 1."
            },
            {
                "Input": "** nums = [0,1,0]",
                "Output": "** 2",
                "Explanation": "** [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1."
            }
        ]
    },
    {
        "Title": "Beautiful Arrangement",
        "slug": "beautiful-arrangement",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** 2",
                "Explanation": "** \nThe first beautiful arrangement is [1,2]:\n    - perm[1] = 1 is divisible by i = 1\n    - perm[2] = 2 is divisible by i = 2\nThe second beautiful arrangement is [2,1]:\n    - perm[1] = 2 is divisible by i = 1\n    - i = 2 is divisible by perm[2] = 1"
            },
            {
                "Input": "** n = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Random Pick with Weight",
        "slug": "random-pick-with-weight",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"Solution\",\"pickIndex\"]\n[[[1]],[]]",
                "Output": "[null,0]",
                "Explanation": "Solution solution = new Solution([1]);\nsolution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w."
            },
            {
                "Input": "[\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"]\n[[[1,3]],[],[],[],[],[]]",
                "Output": "[null,1,1,1,1,0]",
                "Explanation": "Solution solution = new Solution([1, 3]);\nsolution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4.\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4.\n\nSince this is a randomization problem, multiple answers are allowed.\nAll of the following outputs can be considered correct:\n[null,1,1,1,1,0]\n[null,1,1,1,1,1]\n[null,1,1,1,0,0]\n[null,1,1,1,0,1]\n[null,1,0,1,0,0]\n......\nand so on."
            }
        ]
    },
    {
        "Title": "Minesweeper",
        "slug": "minesweeper",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** board = [[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"M\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"]], click = [3,0]",
                "Output": "** [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]",
                "Explanation": null
            },
            {
                "Input": "** board = [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]], click = [1,2]",
                "Output": "** [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"X\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Absolute Difference in BST",
        "slug": "minimum-absolute-difference-in-bst",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [4,2,6,1,3]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** root = [1,0,48,null,null,12,49]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "K-diff Pairs in an Array",
        "slug": "k-diff-pairs-in-an-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,1,4,1,5], k = 2",
                "Output": "** 2",
                "Explanation": "** There are two 2-diff pairs in the array, (1, 3) and (3, 5).\nAlthough we have two 1s in the input, we should only return the number of **unique** pairs."
            },
            {
                "Input": "** nums = [1,2,3,4,5], k = 1",
                "Output": "** 4",
                "Explanation": "** There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5)."
            },
            {
                "Input": "** nums = [1,3,1,5,4], k = 0",
                "Output": "** 1",
                "Explanation": "** There is one 0-diff pair in the array, (1, 1)."
            }
        ]
    },
    {
        "Title": "Encode and Decode TinyURL",
        "slug": "encode-and-decode-tinyurl",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** url = \"https://leetcode.com/problems/design-tinyurl\"",
                "Output": "** \"https://leetcode.com/problems/design-tinyurl\"",
                "Explanation": "**\nSolution obj = new Solution();\nstring tiny = obj.encode(url); // returns the encoded tiny url.\nstring ans = obj.decode(tiny); // returns the original url after decoding it."
            }
        ]
    },
    {
        "Title": "Complex Number Multiplication",
        "slug": "complex-number-multiplication",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** num1 = \"1+1i\", num2 = \"1+1i\"",
                "Output": "** \"0+2i\"",
                "Explanation": "** (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i."
            },
            {
                "Input": "** num1 = \"1+-1i\", num2 = \"1+-1i\"",
                "Output": "** \"0+-2i\"",
                "Explanation": "** (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i."
            }
        ]
    },
    {
        "Title": "Convert BST to Greater Tree",
        "slug": "convert-bst-to-greater-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]",
                "Output": "** [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Time Difference",
        "slug": "minimum-time-difference",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** timePoints = [\"23:59\",\"00:00\"]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** timePoints = [\"00:00\",\"23:59\",\"00:00\"]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Single Element in a Sorted Array",
        "slug": "single-element-in-a-sorted-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,1,2,3,3,4,4,8,8]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** nums = [3,3,7,7,10,11,11]",
                "Output": "** 10",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reverse String II",
        "slug": "reverse-string-ii",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"abcdefg\", k = 2",
                "Output": "** \"bacdfeg\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"abcd\", k = 2",
                "Output": "** \"bacd\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "01 Matrix",
        "slug": "01-matrix",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** mat = [[0,0,0],[0,1,0],[0,0,0]]",
                "Output": "** [[0,0,0],[0,1,0],[0,0,0]]",
                "Explanation": null
            },
            {
                "Input": "** mat = [[0,0,0],[0,1,0],[1,1,1]]",
                "Output": "** [[0,0,0],[0,1,0],[1,2,1]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Diameter of Binary Tree",
        "slug": "diameter-of-binary-tree",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [1,2,3,4,5]",
                "Output": "** 3",
                "Explanation": "** 3 is the length of the path [4,2,1,3] or [5,2,1,3]."
            }
        ]
    },
    {
        "Title": "Remove Boxes",
        "slug": "remove-boxes",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** boxes = [1,3,2,2,2,3,4,3,1]",
                "Output": "** 23",
                "Explanation": "**\n[1, 3, 2, 2, 2, 3, 4, 3, 1] \n----> [1, 3, 3, 4, 3, 1] (3*3=9 points) \n----> [1, 3, 3, 3, 1] (1*1=1 points) \n----> [1, 1] (3*3=9 points) \n----> [] (2*2=4 points)"
            },
            {
                "Input": "** boxes = [1,1,1]",
                "Output": "** 9",
                "Explanation": null
            },
            {
                "Input": "** boxes = [1]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Provinces",
        "slug": "number-of-provinces",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** isConnected = [[1,1,0],[1,1,0],[0,0,1]]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** isConnected = [[1,0,0],[0,1,0],[0,0,1]]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Game Play Analysis IV",
        "slug": "game-play-analysis-iv",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nActivity table:\n+-----------+-----------+------------+--------------+\n| player_id | device_id | event_date | games_played |\n+-----------+-----------+------------+--------------+\n| 1         | 2         | 2016-03-01 | 5            |\n| 1         | 2         | 2016-03-02 | 6            |\n| 2         | 3         | 2017-06-25 | 1            |\n| 3         | 1         | 2016-03-02 | 0            |\n| 3         | 4         | 2018-07-03 | 5            |\n+-----------+-----------+------------+--------------+",
                "Output": "** \n+-----------+\n| fraction  |\n+-----------+\n| 0.33      |\n+-----------+",
                "Explanation": "** \nOnly the player with id 1 logged back in after the first day he had logged in so the answer is 1/3 = 0.33"
            }
        ]
    },
    {
        "Title": "Student Attendance Record I",
        "slug": "student-attendance-record-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"PPALLP\"",
                "Output": "** true",
                "Explanation": "** The student has fewer than 2 absences and was never late 3 or more consecutive days."
            },
            {
                "Input": "** s = \"PPALLL\"",
                "Output": "** false",
                "Explanation": "** The student was late 3 consecutive days in the last 3 days, so is not eligible for the award."
            }
        ]
    },
    {
        "Title": "Student Attendance Record II",
        "slug": "student-attendance-record-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** 8",
                "Explanation": "** There are 8 records with length 2 that are eligible for an award:\n\"PP\", \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\"\nOnly \"AA\" is not eligible because there are 2 absences (there need to be fewer than 2)."
            },
            {
                "Input": "** n = 1",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** n = 10101",
                "Output": "** 183236316",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Optimal Division",
        "slug": "optimal-division",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1000,100,10,2]",
                "Output": "** \"1000/(100/10/2)\"",
                "Explanation": "** 1000/(100/10/2) = 1000/((100/10)/2) = 200\nHowever, the bold parenthesis in \"1000/(**(**100/10**)**/2)\" are redundant since they do not influence the operation priority.\nSo you should return \"1000/(100/10/2)\".\nOther cases:\n1000/(100/10)/2 = 50\n1000/(100/(10/2)) = 50\n1000/100/10/2 = 0.5\n1000/100/(10/2) = 2"
            },
            {
                "Input": "** nums = [2,3,4]",
                "Output": "** \"2/(3/4)\"",
                "Explanation": "** (2/(3/4)) = 8/3 = 2.667\nIt can be shown that after trying all possibilities, we cannot get an expression with evaluation greater than 2.667"
            }
        ]
    },
    {
        "Title": "Brick Wall",
        "slug": "brick-wall",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Next Greater Element III",
        "slug": "next-greater-element-iii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 12",
                "Output": "** 21",
                "Explanation": null
            },
            {
                "Input": "** n = 21",
                "Output": "** -1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reverse Words in a String III",
        "slug": "reverse-words-in-a-string-iii",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"Let's take LeetCode contest\"",
                "Output": "** \"s'teL ekat edoCteeL tsetnoc\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"Mr Ding\"",
                "Output": "** \"rM gniD\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Logical OR of Two Binary Grids Represented as Quad-Trees",
        "slug": "logical-or-of-two-binary-grids-represented-as-quad-trees",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]\n, quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]",
                "Output": "** [[0,0],[1,1],[1,1],[1,1],[1,0]]",
                "Explanation": "** quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree.\nIf we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad-Tree.\nNotice that the binary matrices shown are only for illustration, you don't have to construct the binary matrix to get the result tree.\n![](https://assets.leetcode.com/uploads/2020/02/11/qtr.png)"
            }
        ]
    },
    {
        "Title": "Maximum Depth of N-ary Tree",
        "slug": "maximum-depth-of-n-ary-tree",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [1,null,3,2,4,null,5,6]",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
                "Output": "** 5",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Subarray Sum Equals K",
        "slug": "subarray-sum-equals-k",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,1,1], k = 2",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2,3], k = 3",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Array Partition",
        "slug": "array-partition",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,4,3,2]",
                "Output": "** 4",
                "Explanation": "** All possible pairings (ignoring the ordering of elements) are:\n1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3\n2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3\n3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4\nSo the maximum possible sum is 4."
            },
            {
                "Input": "** nums = [6,2,6,5,1,2]",
                "Output": "** 9",
                "Explanation": "** The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9."
            }
        ]
    },
    {
        "Title": "Binary Tree Tilt",
        "slug": "binary-tree-tilt",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [1,2,3]",
                "Output": "** 1",
                "Explanation": "** \nTilt of node 2 : |0-0| = 0 (no children)\nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)\nSum of every tilt : 0 + 0 + 1 = 1"
            },
            {
                "Input": "** root = [4,2,9,3,5,null,7]",
                "Output": "** 15",
                "Explanation": "** \nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 5 : |0-0| = 0 (no children)\nTilt of node 7 : |0-0| = 0 (no children)\nTilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)\nTilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)\nTilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)\nSum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15"
            },
            {
                "Input": "** root = [21,7,14,1,1,2,2,3,3]",
                "Output": "** 9",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find the Closest Palindrome",
        "slug": "find-the-closest-palindrome",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = \"123\"",
                "Output": "** \"121\"",
                "Explanation": null
            },
            {
                "Input": "** n = \"1\"",
                "Output": "** \"0\"",
                "Explanation": "** 0 and 2 are the closest palindromes but we return the smallest which is 0."
            }
        ]
    },
    {
        "Title": "Array Nesting",
        "slug": "array-nesting",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [5,4,0,3,1,6,2]",
                "Output": "** 4",
                "Explanation": "** \nnums[0] = 5, nums[1] = 4, nums[2] = 0, nums[3] = 3, nums[4] = 1, nums[5] = 6, nums[6] = 2.\nOne of the longest sets s[k]:\ns[0] = {nums[0], nums[5], nums[6], nums[2]} = {5, 6, 2, 0}"
            },
            {
                "Input": "** nums = [0,1,2]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reshape the Matrix",
        "slug": "reshape-the-matrix",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** mat = [[1,2],[3,4]], r = 1, c = 4",
                "Output": "** [[1,2,3,4]]",
                "Explanation": null
            },
            {
                "Input": "** mat = [[1,2],[3,4]], r = 2, c = 4",
                "Output": "** [[1,2],[3,4]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Permutation in String",
        "slug": "permutation-in-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s1 = \"ab\", s2 = \"eidbaooo\"",
                "Output": "** true",
                "Explanation": "** s2 contains one permutation of s1 (\"ba\")."
            },
            {
                "Input": "** s1 = \"ab\", s2 = \"eidboaoo\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Managers with at Least 5 Direct Reports",
        "slug": "managers-with-at-least-5-direct-reports",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nEmployee table:\n+-----+-------+------------+-----------+\n| id  | name  | department | managerId |\n+-----+-------+------------+-----------+\n| 101 | John  | A          | null      |\n| 102 | Dan   | A          | 101       |\n| 103 | James | A          | 101       |\n| 104 | Amy   | A          | 101       |\n| 105 | Anne  | A          | 101       |\n| 106 | Ron   | B          | 101       |\n+-----+-------+------------+-----------+",
                "Output": "** \n+------+\n| name |\n+------+\n| John |\n+------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Subtree of Another Tree",
        "slug": "subtree-of-another-tree",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [3,4,5,1,2], subRoot = [4,1,2]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Distribute Candies",
        "slug": "distribute-candies",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** candyType = [1,1,2,2,3,3]",
                "Output": "** 3",
                "Explanation": "** Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type."
            },
            {
                "Input": "** candyType = [1,1,2,3]",
                "Output": "** 2",
                "Explanation": "** Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types."
            },
            {
                "Input": "** candyType = [6,6,6,6]",
                "Output": "** 1",
                "Explanation": "** Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type."
            }
        ]
    },
    {
        "Title": "Out of Boundary Paths",
        "slug": "out-of-boundary-paths",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0",
                "Output": "** 6",
                "Explanation": null
            },
            {
                "Input": "** m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1",
                "Output": "** 12",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Employee Bonus",
        "slug": "employee-bonus",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nEmployee table:\n+-------+--------+------------+--------+\n| empId | name   | supervisor | salary |\n+-------+--------+------------+--------+\n| 3     | Brad   | null       | 4000   |\n| 1     | John   | 3          | 1000   |\n| 2     | Dan    | 3          | 2000   |\n| 4     | Thomas | 3          | 4000   |\n+-------+--------+------------+--------+\nBonus table:\n+-------+-------+\n| empId | bonus |\n+-------+-------+\n| 2     | 500   |\n| 4     | 2000  |\n+-------+-------+",
                "Output": "** \n+------+-------+\n| name | bonus |\n+------+-------+\n| Brad | null  |\n| John | null  |\n| Dan  | 500   |\n+------+-------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Shortest Unsorted Continuous Subarray",
        "slug": "shortest-unsorted-continuous-subarray",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,6,4,8,10,9,15]",
                "Output": "** 5",
                "Explanation": "** You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order."
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** nums = [1]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Delete Operation for Two Strings",
        "slug": "delete-operation-for-two-strings",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** word1 = \"sea\", word2 = \"eat\"",
                "Output": "** 2",
                "Explanation": "** You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\"."
            },
            {
                "Input": "** word1 = \"leetcode\", word2 = \"etco\"",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Customer Referee",
        "slug": "find-customer-referee",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nCustomer table:\n+----+------+------------+\n| id | name | referee_id |\n+----+------+------------+\n| 1  | Will | null       |\n| 2  | Jane | null       |\n| 3  | Alex | 2          |\n| 4  | Bill | null       |\n| 5  | Zack | 1          |\n| 6  | Mark | 2          |\n+----+------+------------+",
                "Output": "** \n+------+\n| name |\n+------+\n| Will |\n| Jane |\n| Bill |\n| Zack |\n+------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Investments in 2016",
        "slug": "investments-in-2016",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nInsurance table:\n+-----+----------+----------+-----+-----+\n| pid | tiv_2015 | tiv_2016 | lat | lon |\n+-----+----------+----------+-----+-----+\n| 1   | 10       | 5        | 10  | 10  |\n| 2   | 20       | 20       | 20  | 20  |\n| 3   | 10       | 30       | 20  | 20  |\n| 4   | 10       | 40       | 40  | 40  |\n+-----+----------+----------+-----+-----+",
                "Output": "** \n+----------+\n| tiv_2016 |\n+----------+\n| 45.00    |\n+----------+",
                "Explanation": "** \nThe first record in the table, like the last record, meets both of the two criteria.\nThe tiv_2015 value 10 is the same as the third and fourth records, and its location is unique.\n\nThe second record does not meet any of the two criteria. Its tiv_2015 is not like any other policyholders and its location is the same as the third record, which makes the third record fail, too.\nSo, the result is the sum of tiv_2016 of the first and last record, which is 45."
            }
        ]
    },
    {
        "Title": "Customer Placing the Largest Number of Orders",
        "slug": "customer-placing-the-largest-number-of-orders",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nOrders table:\n+--------------+-----------------+\n| order_number | customer_number |\n+--------------+-----------------+\n| 1            | 1               |\n| 2            | 2               |\n| 3            | 3               |\n| 4            | 3               |\n+--------------+-----------------+",
                "Output": "** \n+-----------------+\n| customer_number |\n+-----------------+\n| 3               |\n+-----------------+",
                "Explanation": "** \nThe customer with number 3 has two orders, which is greater than either customer 1 or 2 because each of them only has one order. \nSo the result is customer_number 3."
            }
        ]
    },
    {
        "Title": "Erect the Fence",
        "slug": "erect-the-fence",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** trees = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]",
                "Output": "** [[1,1],[2,0],[4,2],[3,3],[2,4]]",
                "Explanation": "** All the trees will be on the perimeter of the fence except the tree at [2, 2], which will be inside the fence."
            },
            {
                "Input": "** trees = [[1,2],[2,2],[4,2]]",
                "Output": "** [[4,2],[2,2],[1,2]]",
                "Explanation": "** The fence forms a line that passes through all the trees."
            }
        ]
    },
    {
        "Title": "N-ary Tree Preorder Traversal",
        "slug": "n-ary-tree-preorder-traversal",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [1,null,3,2,4,null,5,6]",
                "Output": "** [1,3,5,6,2,4]",
                "Explanation": null
            },
            {
                "Input": "** root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
                "Output": "** [1,2,3,6,7,11,14,4,8,12,5,9,13,10]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "N-ary Tree Postorder Traversal",
        "slug": "n-ary-tree-postorder-traversal",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [1,null,3,2,4,null,5,6]",
                "Output": "** [5,6,3,2,4,1]",
                "Explanation": null
            },
            {
                "Input": "** root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
                "Output": "** [2,6,14,11,7,3,12,8,4,13,9,10,5,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Tag Validator",
        "slug": "tag-validator",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** code = \"<DIV>This is the first line <![CDATA[<div>]]></DIV>\"",
                "Output": "** true",
                "Explanation": "** \nThe code is wrapped in a closed tag : <DIV> and </DIV>. \nThe TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. \nAlthough CDATA_CONTENT has an unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as a tag.\nSo TAG_CONTENT is valid, and then the code is valid. Thus return true."
            },
            {
                "Input": "** code = \"<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>\"",
                "Output": "** true",
                "Explanation": "**\nWe first separate the code into : start_tag|tag_content|end_tag.\nstart_tag -> **\"<DIV>\"**\nend_tag -> **\"</DIV>\"**\ntag_content could also be separated into : text1|cdata|text2.\ntext1 -> **\">> ![cdata[]] \"**\ncdata -> **\"<![CDATA[<div>]>]]>\"**, where the CDATA_CONTENT is **\"<div>]>\"**\ntext2 -> **\"]]>>]\"**\nThe reason why start_tag is NOT **\"<DIV>>>\"** is because of the rule 6.\nThe reason why cdata is NOT **\"<![CDATA[<div>]>]]>]]>\"** is because of the rule 7."
            },
            {
                "Input": "** code = \"<A>  <B> </A>   </B>\"",
                "Output": "** false",
                "Explanation": "** Unbalanced. If \"<A>\" is closed, then \"<B>\" must be unmatched, and vice versa."
            }
        ]
    },
    {
        "Title": "Fraction Addition and Subtraction",
        "slug": "fraction-addition-and-subtraction",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** expression = \"-1/2+1/2\"",
                "Output": "** \"0/1\"",
                "Explanation": null
            },
            {
                "Input": "** expression = \"-1/2+1/2+1/3\"",
                "Output": "** \"1/3\"",
                "Explanation": null
            },
            {
                "Input": "** expression = \"1/3-1/2\"",
                "Output": "** \"-1/6\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Valid Square",
        "slug": "valid-square",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Harmonious Subsequence",
        "slug": "longest-harmonious-subsequence",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,3,2,2,5,2,3,7]",
                "Output": "** 5",
                "Explanation": "** The longest harmonious subsequence is [3,2,2,2,3]."
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,1,1,1]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Big Countries",
        "slug": "big-countries",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nWorld table:\n+-------------+-----------+---------+------------+--------------+\n| name        | continent | area    | population | gdp          |\n+-------------+-----------+---------+------------+--------------+\n| Afghanistan | Asia      | 652230  | 25500100   | 20343000000  |\n| Albania     | Europe    | 28748   | 2831741    | 12960000000  |\n| Algeria     | Africa    | 2381741 | 37100000   | 188681000000 |\n| Andorra     | Europe    | 468     | 78115      | 3712000000   |\n| Angola      | Africa    | 1246700 | 20609294   | 100990000000 |\n+-------------+-----------+---------+------------+--------------+",
                "Output": "** \n+-------------+------------+---------+\n| name        | population | area    |\n+-------------+------------+---------+\n| Afghanistan | 25500100   | 652230  |\n| Algeria     | 37100000   | 2381741 |\n+-------------+------------+---------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Classes More Than 5 Students",
        "slug": "classes-more-than-5-students",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nCourses table:\n+---------+----------+\n| student | class    |\n+---------+----------+\n| A       | Math     |\n| B       | English  |\n| C       | Math     |\n| D       | Biology  |\n| E       | Math     |\n| F       | Computer |\n| G       | Math     |\n| H       | Math     |\n| I       | Math     |\n+---------+----------+",
                "Output": "** \n+---------+\n| class   |\n+---------+\n| Math    |\n+---------+",
                "Explanation": "** \n- Math has 6 students, so we include it.\n- English has 1 student, so we do not include it.\n- Biology has 1 student, so we do not include it.\n- Computer has 1 student, so we do not include it."
            }
        ]
    },
    {
        "Title": "Range Addition II",
        "slug": "range-addition-ii",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** m = 3, n = 3, ops = [[2,2],[3,3]]",
                "Output": "** 4",
                "Explanation": "** The maximum integer in M is 2, and there are four of it in M. So return 4."
            }
        ]
    },
    {
        "Title": "Minimum Index Sum of Two Lists",
        "slug": "minimum-index-sum-of-two-lists",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"Piatti\",\"The Grill at Torrey Pines\",\"Hungry Hunter Steakhouse\",\"Shogun\"]",
                "Output": "** [\"Shogun\"]",
                "Explanation": "** The only common string is \"Shogun\"."
            },
            {
                "Input": "** list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Shogun\",\"Burger King\"]",
                "Output": "** [\"Shogun\"]",
                "Explanation": "** The common string with the least index sum is \"Shogun\" with index sum = (0 + 1) = 1."
            },
            {
                "Input": "** list1 = [\"happy\",\"sad\",\"good\"], list2 = [\"sad\",\"happy\",\"good\"]",
                "Output": "** [\"sad\",\"happy\"]",
                "Explanation": "** There are three common strings:\n\"happy\" with index sum = (0 + 1) = 1.\n\"sad\" with index sum = (1 + 0) = 1.\n\"good\" with index sum = (2 + 2) = 4.\nThe strings with the least index sum are \"sad\" and \"happy\"."
            }
        ]
    },
    {
        "Title": "Non-negative Integers without Consecutive Ones",
        "slug": "non-negative-integers-without-consecutive-ones",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 5",
                "Output": "** 5",
                "Explanation": "**\nHere are the non-negative integers <= 5 with their corresponding binary representations:\n0 : 0\n1 : 1\n2 : 10\n3 : 11\n4 : 100\n5 : 101\nAmong them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule."
            },
            {
                "Input": "** n = 1",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** n = 2",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Human Traffic of Stadium",
        "slug": "human-traffic-of-stadium",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** \nStadium table:\n+------+------------+-----------+\n| id   | visit_date | people    |\n+------+------------+-----------+\n| 1    | 2017-01-01 | 10        |\n| 2    | 2017-01-02 | 109       |\n| 3    | 2017-01-03 | 150       |\n| 4    | 2017-01-04 | 99        |\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-09 | 188       |\n+------+------------+-----------+",
                "Output": "** \n+------+------------+-----------+\n| id   | visit_date | people    |\n+------+------------+-----------+\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-09 | 188       |\n+------+------------+-----------+",
                "Explanation": "** \nThe four rows with ids 5, 6, 7, and 8 have consecutive ids and each of them has >= 100 people attended. Note that row 8 was included even though the visit_date was not the next day after row 7.\nThe rows with ids 2 and 3 are not included because we need at least three consecutive ids."
            }
        ]
    },
    {
        "Title": "Friend Requests II: Who Has the Most Friends",
        "slug": "friend-requests-ii-who-has-the-most-friends",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nRequestAccepted table:\n+--------------+-------------+-------------+\n| requester_id | accepter_id | accept_date |\n+--------------+-------------+-------------+\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n+--------------+-------------+-------------+",
                "Output": "** \n+----+-----+\n| id | num |\n+----+-----+\n| 3  | 3   |\n+----+-----+",
                "Explanation": "** \nThe person with id 3 is a friend of people 1, 2, and 4, so he has three friends in total, which is the most number than any others."
            }
        ]
    },
    {
        "Title": "Can Place Flowers",
        "slug": "can-place-flowers",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** flowerbed = [1,0,0,0,1], n = 1",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** flowerbed = [1,0,0,0,1], n = 2",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Construct String from Binary Tree",
        "slug": "construct-string-from-binary-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,2,3,4]",
                "Output": "** \"1(2(4))(3)\"",
                "Explanation": "** Originally, it needs to be \"1(2(4)())(3()())\", but you need to omit all the empty parenthesis pairs. And it will be \"1(2(4))(3)\"."
            },
            {
                "Input": "** root = [1,2,3,null,4]",
                "Output": "** \"1(2()(4))(3)\"",
                "Explanation": "** Almost the same as the first example, except the () after 2 is necessary to indicate the absence of a left child for 2 and the presence of a right child."
            }
        ]
    },
    {
        "Title": "Sales Person",
        "slug": "sales-person",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nSalesPerson table:\n+----------+------+--------+-----------------+------------+\n| sales_id | name | salary | commission_rate | hire_date  |\n+----------+------+--------+-----------------+------------+\n| 1        | John | 100000 | 6               | 4/1/2006   |\n| 2        | Amy  | 12000  | 5               | 5/1/2010   |\n| 3        | Mark | 65000  | 12              | 12/25/2008 |\n| 4        | Pam  | 25000  | 25              | 1/1/2005   |\n| 5        | Alex | 5000   | 10              | 2/3/2007   |\n+----------+------+--------+-----------------+------------+\nCompany table:\n+--------+--------+----------+\n| com_id | name   | city     |\n+--------+--------+----------+\n| 1      | RED    | Boston   |\n| 2      | ORANGE | New York |\n| 3      | YELLOW | Boston   |\n| 4      | GREEN  | Austin   |\n+--------+--------+----------+\nOrders table:\n+----------+------------+--------+----------+--------+\n| order_id | order_date | com_id | sales_id | amount |\n+----------+------------+--------+----------+--------+\n| 1        | 1/1/2014   | 3      | 4        | 10000  |\n| 2        | 2/1/2014   | 4      | 5        | 5000   |\n| 3        | 3/1/2014   | 1      | 1        | 50000  |\n| 4        | 4/1/2014   | 1      | 4        | 25000  |\n+----------+------------+--------+----------+--------+",
                "Output": "** \n+------+\n| name |\n+------+\n| Amy  |\n| Mark |\n| Alex |\n+------+",
                "Explanation": "** \nAccording to orders 3 and 4 in the Orders table, it is easy to tell that only salesperson John and Pam have sales to company RED, so we report all the other names in the table salesperson."
            }
        ]
    },
    {
        "Title": "Tree Node",
        "slug": "tree-node",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nTree table:\n+----+------+\n| id | p_id |\n+----+------+\n| 1  | null |\n| 2  | 1    |\n| 3  | 1    |\n| 4  | 2    |\n| 5  | 2    |\n+----+------+",
                "Output": "** \n+----+-------+\n| id | type  |\n+----+-------+\n| 1  | Root  |\n| 2  | Inner |\n| 3  | Leaf  |\n| 4  | Leaf  |\n| 5  | Leaf  |\n+----+-------+",
                "Explanation": "** \nNode 1 is the root node because its parent node is null and it has child nodes 2 and 3.\nNode 2 is an inner node because it has parent node 1 and child node 4 and 5.\nNodes 3, 4, and 5 are leaf nodes because they have parent nodes and they do not have child nodes."
            },
            {
                "Input": "** \nTree table:\n+----+------+\n| id | p_id |\n+----+------+\n| 1  | null |\n+----+------+",
                "Output": "** \n+----+-------+\n| id | type  |\n+----+-------+\n| 1  | Root  |\n+----+-------+",
                "Explanation": "** If there is only one node on the tree, you only need to output its root attributes."
            }
        ]
    },
    {
        "Title": "Find Duplicate File in System",
        "slug": "find-duplicate-file-in-system",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\",\"root 4.txt(efgh)\"]",
                "Output": "** [[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]",
                "Explanation": null
            },
            {
                "Input": "** paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\"]",
                "Output": "** [[\"root/a/2.txt\",\"root/c/d/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Triangle Judgement",
        "slug": "triangle-judgement",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nTriangle table:\n+----+----+----+\n| x  | y  | z  |\n+----+----+----+\n| 13 | 15 | 30 |\n| 10 | 20 | 15 |\n+----+----+----+",
                "Output": "** \n+----+----+----+----------+\n| x  | y  | z  | triangle |\n+----+----+----+----------+\n| 13 | 15 | 30 | No       |\n| 10 | 20 | 15 | Yes      |\n+----+----+----+----------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Valid Triangle Number",
        "slug": "valid-triangle-number",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,2,3,4]",
                "Output": "** 3",
                "Explanation": "** Valid combinations are: \n2,3,4 (using the first 2)\n2,3,4 (using the second 2)\n2,2,3"
            },
            {
                "Input": "** nums = [4,2,3,4]",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Merge Two Binary Trees",
        "slug": "merge-two-binary-trees",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]",
                "Output": "** [3,4,5,5,4,null,7]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Biggest Single Number",
        "slug": "biggest-single-number",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nMyNumbers table:\n+-----+\n| num |\n+-----+\n| 8   |\n| 8   |\n| 3   |\n| 3   |\n| 1   |\n| 4   |\n| 5   |\n| 6   |\n+-----+",
                "Output": "** \n+-----+\n| num |\n+-----+\n| 6   |\n+-----+",
                "Explanation": "** The single numbers are 1, 4, 5, and 6.\nSince 6 is the largest single number, we return it."
            },
            {
                "Input": "** \nMyNumbers table:\n+-----+\n| num |\n+-----+\n| 8   |\n| 8   |\n| 7   |\n| 7   |\n| 3   |\n| 3   |\n| 3   |\n+-----+",
                "Output": "** \n+------+\n| num  |\n+------+\n| null |\n+------+",
                "Explanation": "** There are no single numbers in the input table so we return null."
            }
        ]
    },
    {
        "Title": "Not Boring Movies",
        "slug": "not-boring-movies",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nCinema table:\n+----+------------+-------------+--------+\n| id | movie      | description | rating |\n+----+------------+-------------+--------+\n| 1  | War        | great 3D    | 8.9    |\n| 2  | Science    | fiction     | 8.5    |\n| 3  | irish      | boring      | 6.2    |\n| 4  | Ice song   | Fantacy     | 8.6    |\n| 5  | House card | Interesting | 9.1    |\n+----+------------+-------------+--------+",
                "Output": "** \n+----+------------+-------------+--------+\n| id | movie      | description | rating |\n+----+------------+-------------+--------+\n| 5  | House card | Interesting | 9.1    |\n| 1  | War        | great 3D    | 8.9    |\n+----+------------+-------------+--------+",
                "Explanation": "** \nWe have three movies with odd-numbered IDs: 1, 3, and 5. The movie with ID = 3 is boring so we do not include it in the answer."
            }
        ]
    },
    {
        "Title": "Task Scheduler",
        "slug": "task-scheduler",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2",
                "Output": "** 8",
                "Explanation": "** A possible sequence is: A -> B -> idle -> A -> B -> idle -> A -> B.\n\n\nAfter completing task A, you must wait two cycles before doing A again. The same applies to task B. In the 3rd interval, neither A nor B can be done, so you idle. By the 4th cycle, you can do A again as 2 intervals have passed."
            },
            {
                "Input": "** tasks = [\"A\",\"C\",\"A\",\"B\",\"D\",\"B\"], n = 1",
                "Output": "** 6",
                "Explanation": "** A possible sequence is: A -> B -> C -> D -> A -> B.\n\n\nWith a cooling interval of 1, you can repeat a task after just one other task."
            },
            {
                "Input": "** tasks = [\"A\",\"A\",\"A\", \"B\",\"B\",\"B\"], n = 3",
                "Output": "** 10",
                "Explanation": "** A possible sequence is: A -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B.\n\n\nThere are only two types of tasks, A and B, which need to be separated by 3 intervals. This leads to idling twice between repetitions of these tasks.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= tasks.length <= 104`\n* `tasks[i]` is an uppercase English letter.\n* `0 <= n <= 100`\n\n\nHints:\n    0. There are many different solutions for this problem, including a greedy algorithm.\n    1. For every cycle, find the most frequent letter that can be placed in this cycle. After placing, decrease the frequency of that letter by one.\nSimilarQuestions: [358, 767, 1953, 2323, 2365]"
            }
        ]
    },
    {
        "Title": "Design Circular Queue",
        "slug": "design-circular-queue",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"MyCircularQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"Rear\", \"isFull\", \"deQueue\", \"enQueue\", \"Rear\"]\n[[3], [1], [2], [3], [4], [], [], [], [4], []]",
                "Output": "[null, true, true, true, false, 3, true, true, true, 4]",
                "Explanation": "MyCircularQueue myCircularQueue = new MyCircularQueue(3);\nmyCircularQueue.enQueue(1); // return True\nmyCircularQueue.enQueue(2); // return True\nmyCircularQueue.enQueue(3); // return True\nmyCircularQueue.enQueue(4); // return False\nmyCircularQueue.Rear();     // return 3\nmyCircularQueue.isFull();   // return True\nmyCircularQueue.deQueue();  // return True\nmyCircularQueue.enQueue(4); // return True\nmyCircularQueue.Rear();     // return 4"
            }
        ]
    },
    {
        "Title": "Add One Row to Tree",
        "slug": "add-one-row-to-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [4,2,6,3,1,5], val = 1, depth = 2",
                "Output": "** [4,1,1,2,null,null,6,3,1,5]",
                "Explanation": null
            },
            {
                "Input": "** root = [4,2,null,3,1], val = 1, depth = 3",
                "Output": "** [4,2,null,1,1,3,null,null,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Exchange Seats",
        "slug": "exchange-seats",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nSeat table:\n+----+---------+\n| id | student |\n+----+---------+\n| 1  | Abbot   |\n| 2  | Doris   |\n| 3  | Emerson |\n| 4  | Green   |\n| 5  | Jeames  |\n+----+---------+",
                "Output": "** \n+----+---------+\n| id | student |\n+----+---------+\n| 1  | Doris   |\n| 2  | Abbot   |\n| 3  | Green   |\n| 4  | Emerson |\n| 5  | Jeames  |\n+----+---------+",
                "Explanation": "** \nNote that if the number of students is odd, there is no need to change the last one's seat."
            }
        ]
    },
    {
        "Title": "Swap Salary",
        "slug": "swap-salary",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nSalary table:\n+----+------+-----+--------+\n| id | name | sex | salary |\n+----+------+-----+--------+\n| 1  | A    | m   | 2500   |\n| 2  | B    | f   | 1500   |\n| 3  | C    | m   | 5500   |\n| 4  | D    | f   | 500    |\n+----+------+-----+--------+",
                "Output": "** \n+----+------+-----+--------+\n| id | name | sex | salary |\n+----+------+-----+--------+\n| 1  | A    | f   | 2500   |\n| 2  | B    | m   | 1500   |\n| 3  | C    | f   | 5500   |\n| 4  | D    | m   | 500    |\n+----+------+-----+--------+",
                "Explanation": "** \n(1, A) and (3, C) were changed from 'm' to 'f'.\n(2, B) and (4, D) were changed from 'f' to 'm'."
            }
        ]
    },
    {
        "Title": "Maximum Product of Three Numbers",
        "slug": "maximum-product-of-three-numbers",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 6",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 24",
                "Explanation": null
            },
            {
                "Input": "** nums = [-1,-2,-3]",
                "Output": "** -6",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "K Inverse Pairs Array",
        "slug": "k-inverse-pairs-array",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 3, k = 0",
                "Output": "** 1",
                "Explanation": "** Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pairs."
            },
            {
                "Input": "** n = 3, k = 1",
                "Output": "** 2",
                "Explanation": "** The array [1,3,2] and [2,1,3] have exactly 1 inverse pair."
            }
        ]
    },
    {
        "Title": "Course Schedule III",
        "slug": "course-schedule-iii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** courses = [[100,200],[200,1300],[1000,1250],[2000,3200]]",
                "Output": "** 3\nExplanation: \nThere are totally 4 courses, but you can take 3 courses at most:\nFirst, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day.\nSecond, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day. \nThird, take the 2nd course, it costs 200 days so you will finish it on the 1300th day. \nThe 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date.",
                "Explanation": null
            },
            {
                "Input": "** courses = [[1,2]]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** courses = [[3,2],[4,3]]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Smallest Range Covering Elements from K Lists",
        "slug": "smallest-range-covering-elements-from-k-lists",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]",
                "Output": "** [20,24]",
                "Explanation": "** \nList 1: [4, 10, 15, 24,26], 24 is in range [20,24].\nList 2: [0, 9, 12, 20], 20 is in range [20,24].\nList 3: [5, 18, 22, 30], 22 is in range [20,24]."
            },
            {
                "Input": "** nums = [[1,2,3],[1,2,3],[1,2,3]]",
                "Output": "** [1,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sum of Square Numbers",
        "slug": "sum-of-square-numbers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** c = 5",
                "Output": "** true",
                "Explanation": "** 1 * 1 + 2 * 2 = 5"
            },
            {
                "Input": "** c = 3",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Exclusive Time of Functions",
        "slug": "exclusive-time-of-functions",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 2, logs = [\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"]",
                "Output": "** [3,4]",
                "Explanation": "**\nFunction 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1.\nFunction 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5.\nFunction 0 resumes execution at the beginning of time 6 and executes for 1 unit of time.\nSo function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing."
            }
        ]
    },
    {
        "Title": "Average of Levels in Binary Tree",
        "slug": "average-of-levels-in-binary-tree",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [3,9,20,null,null,15,7]",
                "Output": "** [3.00000,14.50000,11.00000]\nExplanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.\nHence return [3, 14.5, 11].",
                "Explanation": null
            },
            {
                "Input": "** root = [3,9,20,15,7]",
                "Output": "** [3.00000,14.50000,11.00000]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Shopping Offers",
        "slug": "shopping-offers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]",
                "Output": "** 14",
                "Explanation": "** There are two kinds of items, A and B. Their prices are $2 and $5 respectively. \nIn special offer 1, you can pay $5 for 3A and 0B\nIn special offer 2, you can pay $10 for 1A and 2B. \nYou need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A."
            },
            {
                "Input": "** price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]",
                "Output": "** 11",
                "Explanation": "** The price of A is $2, and $3 for B, $4 for C. \nYou may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. \nYou need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. \nYou cannot add more items, though only $9 for 2A ,2B and 1C."
            }
        ]
    },
    {
        "Title": "Decode Ways II",
        "slug": "decode-ways-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"*\"",
                "Output": "** 9",
                "Explanation": "** The encoded message can represent any of the encoded messages \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", or \"9\".\nEach of these can be decoded to the strings \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", and \"I\" respectively.\nHence, there are a total of 9 ways to decode \"*\"."
            },
            {
                "Input": "** s = \"1*\"",
                "Output": "** 18",
                "Explanation": "** The encoded message can represent any of the encoded messages \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", or \"19\".\nEach of these encoded messages have 2 ways to be decoded (e.g. \"11\" can be decoded to \"AA\" or \"K\").\nHence, there are a total of 9 * 2 = 18 ways to decode \"1*\"."
            },
            {
                "Input": "** s = \"2*\"",
                "Output": "** 15",
                "Explanation": "** The encoded message can represent any of the encoded messages \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", or \"29\".\n\"21\", \"22\", \"23\", \"24\", \"25\", and \"26\" have 2 ways of being decoded, but \"27\", \"28\", and \"29\" only have 1 way.\nHence, there are a total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode \"2*\"."
            }
        ]
    },
    {
        "Title": "Solve the Equation",
        "slug": "solve-the-equation",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** equation = \"x+5-3+x=6+x-2\"",
                "Output": "** \"x=2\"",
                "Explanation": null
            },
            {
                "Input": "** equation = \"x=x\"",
                "Output": "** \"Infinite solutions\"",
                "Explanation": null
            },
            {
                "Input": "** equation = \"2x=x\"",
                "Output": "** \"x=0\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Design Circular Deque",
        "slug": "design-circular-deque",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"MyCircularDeque\", \"insertLast\", \"insertLast\", \"insertFront\", \"insertFront\", \"getRear\", \"isFull\", \"deleteLast\", \"insertFront\", \"getFront\"]\n[[3], [1], [2], [3], [4], [], [], [], [4], []]",
                "Output": "[null, true, true, true, false, 2, true, true, true, 4]",
                "Explanation": "MyCircularDeque myCircularDeque = new MyCircularDeque(3);\nmyCircularDeque.insertLast(1);  // return True\nmyCircularDeque.insertLast(2);  // return True\nmyCircularDeque.insertFront(3); // return True\nmyCircularDeque.insertFront(4); // return False, the queue is full.\nmyCircularDeque.getRear();      // return 2\nmyCircularDeque.isFull();       // return True\nmyCircularDeque.deleteLast();   // return True\nmyCircularDeque.insertFront(4); // return True\nmyCircularDeque.getFront();     // return 4"
            }
        ]
    },
    {
        "Title": "Maximum Average Subarray I",
        "slug": "maximum-average-subarray-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,12,-5,-6,50,3], k = 4",
                "Output": "** 12.75000",
                "Explanation": "** Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75"
            },
            {
                "Input": "** nums = [5], k = 1",
                "Output": "** 5.00000",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Set Mismatch",
        "slug": "set-mismatch",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,2,4]",
                "Output": "** [2,3]",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,1]",
                "Output": "** [1,2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Length of Pair Chain",
        "slug": "maximum-length-of-pair-chain",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** pairs = [[1,2],[2,3],[3,4]]",
                "Output": "** 2",
                "Explanation": "** The longest chain is [1,2] -> [3,4]."
            },
            {
                "Input": "** pairs = [[1,2],[7,8],[4,5]]",
                "Output": "** 3",
                "Explanation": "** The longest chain is [1,2] -> [4,5] -> [7,8]."
            }
        ]
    },
    {
        "Title": "Palindromic Substrings",
        "slug": "palindromic-substrings",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"abc\"",
                "Output": "** 3",
                "Explanation": "** Three palindromic strings: \"a\", \"b\", \"c\"."
            },
            {
                "Input": "** s = \"aaa\"",
                "Output": "** 6",
                "Explanation": "** Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\"."
            }
        ]
    },
    {
        "Title": "Replace Words",
        "slug": "replace-words",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** dictionary = [\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"",
                "Output": "** \"the cat was rat by the bat\"",
                "Explanation": null
            },
            {
                "Input": "** dictionary = [\"a\",\"b\",\"c\"], sentence = \"aadsfasf absbs bbab cadsfafs\"",
                "Output": "** \"a a b c\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Dota2 Senate",
        "slug": "dota2-senate",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** senate = \"RD\"",
                "Output": "** \"Radiant\"",
                "Explanation": "** \nThe first senator comes from Radiant and he can just ban the next senator's right in round 1. \nAnd the second senator can't exercise any rights anymore since his right has been banned. \nAnd in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote."
            },
            {
                "Input": "** senate = \"RDD\"",
                "Output": "** \"Dire\"",
                "Explanation": "** \nThe first senator comes from Radiant and he can just ban the next senator's right in round 1. \nAnd the second senator can't exercise any rights anymore since his right has been banned. \nAnd the third senator comes from Dire and he can ban the first senator's right in round 1. \nAnd in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote."
            }
        ]
    },
    {
        "Title": "2 Keys Keyboard",
        "slug": "2-keys-keyboard",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** 3",
                "Explanation": "** Initially, we have one character 'A'.\nIn step 1, we use Copy All operation.\nIn step 2, we use Paste operation to get 'AA'.\nIn step 3, we use Paste operation to get 'AAA'."
            },
            {
                "Input": "** n = 1",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Duplicate Subtrees",
        "slug": "find-duplicate-subtrees",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,2,3,4,null,2,4,null,null,4]",
                "Output": "** [[2,4],[4]]",
                "Explanation": null
            },
            {
                "Input": "** root = [2,1,1]",
                "Output": "** [[1]]",
                "Explanation": null
            },
            {
                "Input": "** root = [2,2,2,3,null,3,null]",
                "Output": "** [[2,3],[3]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Two Sum IV - Input is a BST",
        "slug": "two-sum-iv-input-is-a-bst",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [5,3,6,2,4,null,7], k = 9",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** root = [5,3,6,2,4,null,7], k = 28",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Binary Tree",
        "slug": "maximum-binary-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,2,1,6,0,5]",
                "Output": "** [6,3,5,null,2,0,null,null,1]",
                "Explanation": "** The recursive calls are as follow:\n- The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].\n    - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].\n        - Empty array, so no child.\n        - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].\n            - Empty array, so no child.\n            - Only one element, so child is a node with value 1.\n    - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].\n        - Only one element, so child is a node with value 0.\n        - Empty array, so no child."
            },
            {
                "Input": "** nums = [3,2,1]",
                "Output": "** [3,null,2,null,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Print Binary Tree",
        "slug": "print-binary-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,2]",
                "Output": "** \n[[\"\",\"1\",\"\"],\n\u00a0[\"2\",\"\",\"\"]]",
                "Explanation": null
            },
            {
                "Input": "** root = [1,2,3,null,4]",
                "Output": "** \n[[\"\",\"\",\"\",\"1\",\"\",\"\",\"\"],\n\u00a0[\"\",\"2\",\"\",\"\",\"\",\"3\",\"\"],\n\u00a0[\"\",\"\",\"4\",\"\",\"\",\"\",\"\"]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Robot Return to Origin",
        "slug": "robot-return-to-origin",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** moves = \"UD\"",
                "Output": "** true",
                "Explanation": "The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true."
            },
            {
                "Input": "** moves = \"LL\"",
                "Output": "** false",
                "Explanation": "The robot moves left twice. It ends up two \"moves\" to the left of the origin. We return false because it is not at the origin at the end of its moves."
            }
        ]
    },
    {
        "Title": "Find K Closest Elements",
        "slug": "find-k-closest-elements",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [1,2,3,4,5], k = 4, x = 3",
                "Output": "** [1,2,3,4]",
                "Explanation": null
            },
            {
                "Input": "** arr = [1,2,3,4,5], k = 4, x = -1",
                "Output": "** [1,2,3,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Split Array into Consecutive Subsequences",
        "slug": "split-array-into-consecutive-subsequences",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3,3,4,5]",
                "Output": "** true",
                "Explanation": "** nums can be split into the following subsequences:\n[**1**,**2**,**3**,3,4,5] --> 1, 2, 3\n[1,2,3,**3**,**4**,**5**] --> 3, 4, 5"
            },
            {
                "Input": "** nums = [1,2,3,3,4,4,5,5]",
                "Output": "** true",
                "Explanation": "** nums can be split into the following subsequences:\n[**1**,**2**,**3**,3,**4**,4,**5**,5] --> 1, 2, 3, 4, 5\n[1,2,3,**3**,4,**4**,5,**5**] --> 3, 4, 5"
            },
            {
                "Input": "** nums = [1,2,3,4,4,5]",
                "Output": "** false",
                "Explanation": "** It is impossible to split nums into consecutive increasing subsequences of length 3 or more."
            }
        ]
    },
    {
        "Title": "Image Smoother",
        "slug": "image-smoother",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** img = [[1,1,1],[1,0,1],[1,1,1]]",
                "Output": "** [[0,0,0],[0,0,0],[0,0,0]]",
                "Explanation": "**\nFor the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\nFor the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\nFor the point (1,1): floor(8/9) = floor(0.88888889) = 0"
            },
            {
                "Input": "** img = [[100,200,100],[200,50,200],[100,200,100]]",
                "Output": "** [[137,141,137],[141,138,141],[137,141,137]]",
                "Explanation": "**\nFor the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137\nFor the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141\nFor the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138"
            }
        ]
    },
    {
        "Title": "Maximum Width of Binary Tree",
        "slug": "maximum-width-of-binary-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,3,2,5,3,null,9]",
                "Output": "** 4",
                "Explanation": "** The maximum width exists in the third level with length 4 (5,3,null,9)."
            },
            {
                "Input": "** root = [1,3,2,5,null,null,9,6,null,7]",
                "Output": "** 7",
                "Explanation": "** The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7)."
            },
            {
                "Input": "** root = [1,3,2,5]",
                "Output": "** 2",
                "Explanation": "** The maximum width exists in the second level with length 2 (3,2)."
            }
        ]
    },
    {
        "Title": "Strange Printer",
        "slug": "strange-printer",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"aaabbb\"",
                "Output": "** 2",
                "Explanation": "** Print \"aaa\" first and then print \"bbb\"."
            },
            {
                "Input": "** s = \"aba\"",
                "Output": "** 2",
                "Explanation": "** Print \"aaa\" first and then print \"b\" from the second place of the string, which will cover the existing character 'a'."
            }
        ]
    },
    {
        "Title": "Non-decreasing Array",
        "slug": "non-decreasing-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [4,2,3]",
                "Output": "** true",
                "Explanation": "** You could modify the first 4 to 1 to get a non-decreasing array."
            },
            {
                "Input": "** nums = [4,2,1]",
                "Output": "** false",
                "Explanation": "** You cannot get a non-decreasing array by modifying at most one element."
            }
        ]
    },
    {
        "Title": "Beautiful Arrangement II",
        "slug": "beautiful-arrangement-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3, k = 1",
                "Output": "** [1,2,3]\nExplanation: The [1,2,3] has three different positive integers ranging from 1 to 3, and the [1,1] has exactly 1 distinct integer: 1",
                "Explanation": null
            },
            {
                "Input": "** n = 3, k = 2",
                "Output": "** [1,3,2]\nExplanation: The [1,3,2] has three different positive integers ranging from 1 to 3, and the [2,1] has exactly 2 distinct integers: 1 and 2.",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Kth Smallest Number in Multiplication Table",
        "slug": "kth-smallest-number-in-multiplication-table",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** m = 3, n = 3, k = 5",
                "Output": "** 3",
                "Explanation": "** The 5th smallest number is 3."
            },
            {
                "Input": "** m = 2, n = 3, k = 6",
                "Output": "** 6",
                "Explanation": "** The 6th smallest number is 6."
            }
        ]
    },
    {
        "Title": "Trim a Binary Search Tree",
        "slug": "trim-a-binary-search-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,0,2], low = 1, high = 2",
                "Output": "** [1,null,2]",
                "Explanation": null
            },
            {
                "Input": "** root = [3,0,4,null,2,null,null,1], low = 1, high = 3",
                "Output": "** [3,2,null,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Swap",
        "slug": "maximum-swap",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** num = 2736",
                "Output": "** 7236",
                "Explanation": "** Swap the number 2 and the number 7."
            },
            {
                "Input": "** num = 9973",
                "Output": "** 9973",
                "Explanation": "** No swap."
            }
        ]
    },
    {
        "Title": "Second Minimum Node In a Binary Tree",
        "slug": "second-minimum-node-in-a-binary-tree",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [2,2,5,null,null,5,7]",
                "Output": "** 5",
                "Explanation": "** The smallest value is 2, the second smallest value is 5."
            },
            {
                "Input": "** root = [2,2,2]",
                "Output": "** -1",
                "Explanation": "** The smallest value is 2, but there isn't any second smallest value."
            }
        ]
    },
    {
        "Title": "Bulb Switcher II",
        "slug": "bulb-switcher-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 1, presses = 1",
                "Output": "** 2",
                "Explanation": "** Status can be:\n- [off] by pressing button 1\n- [on] by pressing button 2"
            },
            {
                "Input": "** n = 2, presses = 1",
                "Output": "** 3",
                "Explanation": "** Status can be:\n- [off, off] by pressing button 1\n- [on, off] by pressing button 2\n- [off, on] by pressing button 3"
            },
            {
                "Input": "** n = 3, presses = 1",
                "Output": "** 4",
                "Explanation": "** Status can be:\n- [off, off, off] by pressing button 1\n- [off, on, off] by pressing button 2\n- [on, off, on] by pressing button 3\n- [off, on, on] by pressing button 4"
            }
        ]
    },
    {
        "Title": "Number of Longest Increasing Subsequence",
        "slug": "number-of-longest-increasing-subsequence",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,3,5,4,7]",
                "Output": "** 2",
                "Explanation": "** The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7]."
            },
            {
                "Input": "** nums = [2,2,2,2,2]",
                "Output": "** 5",
                "Explanation": "** The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5."
            }
        ]
    },
    {
        "Title": "Longest Continuous Increasing Subsequence",
        "slug": "longest-continuous-increasing-subsequence",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,3,5,4,7]",
                "Output": "** 3",
                "Explanation": "** The longest continuous increasing subsequence is [1,3,5] with length 3.\nEven though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element\n4."
            },
            {
                "Input": "** nums = [2,2,2,2,2]",
                "Output": "** 1",
                "Explanation": "** The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly\nincreasing."
            }
        ]
    },
    {
        "Title": "Cut Off Trees for Golf Event",
        "slug": "cut-off-trees-for-golf-event",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** forest = [[1,2,3],[0,0,4],[7,6,5]]",
                "Output": "** 6",
                "Explanation": "** Following the path above allows you to cut off the trees from shortest to tallest in 6 steps."
            },
            {
                "Input": "** forest = [[1,2,3],[0,0,0],[7,6,5]]",
                "Output": "** -1",
                "Explanation": "** The trees in the bottom row cannot be accessed as the middle row is blocked."
            }
        ]
    },
    {
        "Title": "Implement Magic Dictionary",
        "slug": "implement-magic-dictionary",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"MagicDictionary\", \"buildDict\", \"search\", \"search\", \"search\", \"search\"]\n[[], [[\"hello\", \"leetcode\"]], [\"hello\"], [\"hhllo\"], [\"hell\"], [\"leetcoded\"]]",
                "Output": "[null, null, false, true, false, false]",
                "Explanation": "MagicDictionary magicDictionary = new MagicDictionary();\nmagicDictionary.buildDict([\"hello\", \"leetcode\"]);\nmagicDictionary.search(\"hello\"); // return False\nmagicDictionary.search(\"hhllo\"); // We can change the second 'h' to 'e' to match \"hello\" so we return True\nmagicDictionary.search(\"hell\"); // return False\nmagicDictionary.search(\"leetcoded\"); // return False"
            }
        ]
    },
    {
        "Title": "Map Sum Pairs",
        "slug": "map-sum-pairs",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]\n[[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]",
                "Output": "[null, null, 3, null, 5]",
                "Explanation": "MapSum mapSum = new MapSum();\nmapSum.insert(\"apple\", 3);  \nmapSum.sum(\"ap\");           // return 3 (apple = 3)\nmapSum.insert(\"app\", 2);    \nmapSum.sum(\"ap\");           // return 5 (apple + app = 3 + 2 = 5)"
            }
        ]
    },
    {
        "Title": "Valid Parenthesis String",
        "slug": "valid-parenthesis-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"()\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"(*)\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"(*))\"",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "24 Game",
        "slug": "24-game",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** cards = [4,1,8,7]",
                "Output": "** true",
                "Explanation": "** (8-4) * (7-1) = 24"
            },
            {
                "Input": "** cards = [1,2,1,2]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Valid Palindrome II",
        "slug": "valid-palindrome-ii",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"aba\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"abca\"",
                "Output": "** true",
                "Explanation": "** You could delete the character 'c'."
            },
            {
                "Input": "** s = \"abc\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Baseball Game",
        "slug": "baseball-game",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** ops = [\"5\",\"2\",\"C\",\"D\",\"+\"]",
                "Output": "** 30",
                "Explanation": "**\n\"5\" - Add 5 to the record, record is now [5].\n\"2\" - Add 2 to the record, record is now [5, 2].\n\"C\" - Invalidate and remove the previous score, record is now [5].\n\"D\" - Add 2 * 5 = 10 to the record, record is now [5, 10].\n\"+\" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].\nThe total sum is 5 + 10 + 15 = 30."
            },
            {
                "Input": "** ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]",
                "Output": "** 27",
                "Explanation": "**\n\"5\" - Add 5 to the record, record is now [5].\n\"-2\" - Add -2 to the record, record is now [5, -2].\n\"4\" - Add 4 to the record, record is now [5, -2, 4].\n\"C\" - Invalidate and remove the previous score, record is now [5, -2].\n\"D\" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].\n\"9\" - Add 9 to the record, record is now [5, -2, -4, 9].\n\"+\" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].\n\"+\" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].\nThe total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27."
            },
            {
                "Input": "** ops = [\"1\",\"C\"]",
                "Output": "** 0",
                "Explanation": "**\n\"1\" - Add 1 to the record, record is now [1].\n\"C\" - Invalidate and remove the previous score, record is now [].\nSince the record is empty, the total sum is 0."
            }
        ]
    },
    {
        "Title": "Redundant Connection",
        "slug": "redundant-connection",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** edges = [[1,2],[1,3],[2,3]]",
                "Output": "** [2,3]",
                "Explanation": null
            },
            {
                "Input": "** edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]",
                "Output": "** [1,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Redundant Connection II",
        "slug": "redundant-connection-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** edges = [[1,2],[1,3],[2,3]]",
                "Output": "** [2,3]",
                "Explanation": null
            },
            {
                "Input": "** edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]",
                "Output": "** [4,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Repeated String Match",
        "slug": "repeated-string-match",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** a = \"abcd\", b = \"cdabcdab\"",
                "Output": "** 3",
                "Explanation": "** We return 3 because by repeating a three times \"ab**cdabcdab**cd\", b is a substring of it."
            },
            {
                "Input": "** a = \"a\", b = \"aa\"",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Univalue Path",
        "slug": "longest-univalue-path",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [5,4,5,1,1,null,5]",
                "Output": "** 2",
                "Explanation": "** The shown image shows that the longest path of the same value (i.e. 5)."
            },
            {
                "Input": "** root = [1,4,5,4,4,null,5]",
                "Output": "** 2",
                "Explanation": "** The shown image shows that the longest path of the same value (i.e. 4)."
            }
        ]
    },
    {
        "Title": "Knight Probability in Chessboard",
        "slug": "knight-probability-in-chessboard",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3, k = 2, row = 0, column = 0",
                "Output": "** 0.06250",
                "Explanation": "** There are two moves (to (1,2), (2,1)) that will keep the knight on the board.\nFrom each of those positions, there are also two moves that will keep the knight on the board.\nThe total probability the knight stays on the board is 0.0625."
            },
            {
                "Input": "** n = 1, k = 0, row = 0, column = 0",
                "Output": "** 1.00000",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Sum of 3 Non-Overlapping Subarrays",
        "slug": "maximum-sum-of-3-non-overlapping-subarrays",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,1,2,6,7,5,1], k = 2",
                "Output": "** [0,3,5]",
                "Explanation": "** Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].\nWe could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger."
            },
            {
                "Input": "** nums = [1,2,1,2,1,2,1,2,1], k = 2",
                "Output": "** [0,2,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Employee Importance",
        "slug": "employee-importance",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** employees = [[1,5,[2,3]],[2,3,[]],[3,3,[]]], id = 1",
                "Output": "** 11",
                "Explanation": "** Employee 1 has an importance value of 5 and has two direct subordinates: employee 2 and employee 3.\nThey both have an importance value of 3.\nThus, the total importance value of employee 1 is 5 + 3 + 3 = 11."
            },
            {
                "Input": "** employees = [[1,2,[5]],[5,-3,[]]], id = 5",
                "Output": "** -3",
                "Explanation": "** Employee 5 has an importance value of -3 and has no direct subordinates.\nThus, the total importance value of employee 5 is -3."
            }
        ]
    },
    {
        "Title": "Stickers to Spell Word",
        "slug": "stickers-to-spell-word",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** stickers = [\"with\",\"example\",\"science\"], target = \"thehat\"",
                "Output": "** 3",
                "Explanation": "**\nWe can use 2 \"with\" stickers, and 1 \"example\" sticker.\nAfter cutting and rearrange the letters of those stickers, we can form the target \"thehat\".\nAlso, this is the minimum number of stickers necessary to form the target string."
            },
            {
                "Input": "** stickers = [\"notice\",\"possible\"], target = \"basicbasic\"",
                "Output": "** -1\nExplanation:\nWe cannot form the target \"basicbasic\" from cutting letters from the given stickers.",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Top K Frequent Words",
        "slug": "top-k-frequent-words",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** words = [\"i\",\"love\",\"leetcode\",\"i\",\"love\",\"coding\"], k = 2",
                "Output": "** [\"i\",\"love\"]",
                "Explanation": "** \"i\" and \"love\" are the two most frequent words.\nNote that \"i\" comes before \"love\" due to a lower alphabetical order."
            },
            {
                "Input": "** words = [\"the\",\"day\",\"is\",\"sunny\",\"the\",\"the\",\"the\",\"sunny\",\"is\",\"is\"], k = 4",
                "Output": "** [\"the\",\"is\",\"sunny\",\"day\"]",
                "Explanation": "** \"the\", \"is\", \"sunny\" and \"day\" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively."
            }
        ]
    },
    {
        "Title": "Binary Number with Alternating Bits",
        "slug": "binary-number-with-alternating-bits",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 5",
                "Output": "** true",
                "Explanation": "** The binary representation of 5 is: 101"
            },
            {
                "Input": "** n = 7",
                "Output": "** false",
                "Explanation": "** The binary representation of 7 is: 111."
            },
            {
                "Input": "** n = 11",
                "Output": "** false",
                "Explanation": "** The binary representation of 11 is: 1011."
            }
        ]
    },
    {
        "Title": "Max Area of Island",
        "slug": "max-area-of-island",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]",
                "Output": "** 6",
                "Explanation": "** The answer is not 11, because the island must be connected 4-directionally."
            }
        ]
    },
    {
        "Title": "Count Binary Substrings",
        "slug": "count-binary-substrings",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"00110011\"",
                "Output": "** 6",
                "Explanation": "** There are 6 substrings that have equal number of consecutive 1's and 0's: \"0011\", \"01\", \"1100\", \"10\", \"0011\", and \"01\".\nNotice that some of these substrings repeat and are counted the number of times they occur.\nAlso, \"00110011\" is not a valid substring because all the 0's (and 1's) are not grouped together."
            },
            {
                "Input": "** s = \"10101\"",
                "Output": "** 4",
                "Explanation": "** There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of consecutive 1's and 0's."
            }
        ]
    },
    {
        "Title": "Degree of an Array",
        "slug": "degree-of-an-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,2,3,1]",
                "Output": "** 2",
                "Explanation": "** \nThe input array has a degree of 2 because both elements 1 and 2 appear twice.\nOf the subarrays that have the same degree:\n[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\nThe shortest length is 2. So return 2."
            },
            {
                "Input": "** nums = [1,2,2,3,1,4,2]",
                "Output": "** 6",
                "Explanation": "** \nThe degree is 3 because the element 2 is repeated 3 times.\nSo [2,2,3,1,4,2] is the shortest subarray, therefore returning 6."
            }
        ]
    },
    {
        "Title": "Partition to K Equal Sum Subsets",
        "slug": "partition-to-k-equal-sum-subsets",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [4,3,2,3,5,2,1], k = 4",
                "Output": "** true",
                "Explanation": "** It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums."
            },
            {
                "Input": "** nums = [1,2,3,4], k = 3",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Falling Squares",
        "slug": "falling-squares",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** positions = [[1,2],[2,3],[6,1]]",
                "Output": "** [2,5,5]",
                "Explanation": "**\nAfter the first drop, the tallest stack is square 1 with a height of 2.\nAfter the second drop, the tallest stack is squares 1 and 2 with a height of 5.\nAfter the third drop, the tallest stack is still squares 1 and 2 with a height of 5.\nThus, we return an answer of [2, 5, 5]."
            }
        ]
    },
    {
        "Title": "Search in a Binary Search Tree",
        "slug": "search-in-a-binary-search-tree",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [4,2,7,1,3], val = 2",
                "Output": "** [2,1,3]",
                "Explanation": null
            },
            {
                "Input": "** root = [4,2,7,1,3], val = 5",
                "Output": "** []",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Insert into a Binary Search Tree",
        "slug": "insert-into-a-binary-search-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [4,2,7,1,3], val = 5",
                "Output": "** [4,2,7,1,3,5]",
                "Explanation": "** Another accepted tree is:\n![](https://assets.leetcode.com/uploads/2020/10/05/bst.jpg)"
            }
        ]
    },
    {
        "Title": "Kth Largest Element in a Stream",
        "slug": "kth-largest-element-in-a-stream",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]",
                "Output": "[null, 4, 5, 5, 8, 8]",
                "Explanation": "KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3);   // return 4\nkthLargest.add(5);   // return 5\nkthLargest.add(10);  // return 5\nkthLargest.add(9);   // return 8\nkthLargest.add(4);   // return 8"
            }
        ]
    },
    {
        "Title": "Binary Search",
        "slug": "binary-search",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [-1,0,3,5,9,12], target = 9",
                "Output": "** 4",
                "Explanation": "** 9 exists in nums and its index is 4"
            },
            {
                "Input": "** nums = [-1,0,3,5,9,12], target = 2",
                "Output": "** -1",
                "Explanation": "** 2 does not exist in nums so return -1"
            }
        ]
    },
    {
        "Title": "Design HashSet",
        "slug": "design-hashset",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "[\"MyHashSet\", \"add\", \"add\", \"contains\", \"contains\", \"add\", \"contains\", \"remove\", \"contains\"]\n[[], [1], [2], [1], [3], [2], [2], [2], [2]]",
                "Output": "[null, null, null, true, false, null, true, null, false]",
                "Explanation": "MyHashSet myHashSet = new MyHashSet();\nmyHashSet.add(1);      // set = [1]\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(1); // return True\nmyHashSet.contains(3); // return False, (not found)\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(2); // return True\nmyHashSet.remove(2);   // set = [1]\nmyHashSet.contains(2); // return False, (already removed)"
            }
        ]
    },
    {
        "Title": "Design HashMap",
        "slug": "design-hashmap",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "[\"MyHashMap\", \"put\", \"put\", \"get\", \"get\", \"put\", \"get\", \"remove\", \"get\"]\n[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]",
                "Output": "[null, null, null, 1, -1, null, 1, null, -1]",
                "Explanation": "MyHashMap myHashMap = new MyHashMap();\nmyHashMap.put(1, 1); // The map is now [[1,1]]\nmyHashMap.put(2, 2); // The map is now [[1,1], [2,2]]\nmyHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]\nmyHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]\nmyHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)\nmyHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]\nmyHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]\nmyHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]"
            }
        ]
    },
    {
        "Title": "Design Linked List",
        "slug": "design-linked-list",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"MyLinkedList\", \"addAtHead\", \"addAtTail\", \"addAtIndex\", \"get\", \"deleteAtIndex\", \"get\"]\n[[], [1], [3], [1, 2], [1], [1], [1]]",
                "Output": "[null, null, null, null, 2, null, 3]",
                "Explanation": "MyLinkedList myLinkedList = new MyLinkedList();\nmyLinkedList.addAtHead(1);\nmyLinkedList.addAtTail(3);\nmyLinkedList.addAtIndex(1, 2);    // linked list becomes 1->2->3\nmyLinkedList.get(1);              // return 2\nmyLinkedList.deleteAtIndex(1);    // now the linked list is 1->3\nmyLinkedList.get(1);              // return 3"
            }
        ]
    },
    {
        "Title": "To Lower Case",
        "slug": "to-lower-case",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"Hello\"",
                "Output": "** \"hello\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"here\"",
                "Output": "** \"here\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"LOVELY\"",
                "Output": "** \"lovely\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Random Pick with Blacklist",
        "slug": "random-pick-with-blacklist",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\n[[7, [2, 3, 5]], [], [], [], [], [], [], []]",
                "Output": "[null, 0, 4, 1, 6, 1, 0, 4]",
                "Explanation": "Solution solution = new Solution(7, [2, 3, 5]);\nsolution.pick(); // return 0, any integer from [0,1,4,6] should be ok. Note that for every call of pick,\n                 // 0, 1, 4, and 6 must be equally likely to be returned (i.e., with probability 1/4).\nsolution.pick(); // return 4\nsolution.pick(); // return 1\nsolution.pick(); // return 6\nsolution.pick(); // return 1\nsolution.pick(); // return 0\nsolution.pick(); // return 4"
            }
        ]
    },
    {
        "Title": "Minimum ASCII Delete Sum for Two Strings",
        "slug": "minimum-ascii-delete-sum-for-two-strings",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s1 = \"sea\", s2 = \"eat\"",
                "Output": "** 231",
                "Explanation": "** Deleting \"s\" from \"sea\" adds the ASCII value of \"s\" (115) to the sum.\nDeleting \"t\" from \"eat\" adds 116 to the sum.\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this."
            },
            {
                "Input": "** s1 = \"delete\", s2 = \"leet\"",
                "Output": "** 403",
                "Explanation": "** Deleting \"dee\" from \"delete\" to turn the string into \"let\",\nadds 100[d] + 101[e] + 101[e] to the sum.\nDeleting \"e\" from \"leet\" adds 101[e] to the sum.\nAt the end, both strings are equal to \"let\", and the answer is 100+101+101+101 = 403.\nIf instead we turned both strings into \"lee\" or \"eet\", we would get answers of 433 or 417, which are higher."
            }
        ]
    },
    {
        "Title": "Subarray Product Less Than K",
        "slug": "subarray-product-less-than-k",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [10,5,2,6], k = 100",
                "Output": "** 8",
                "Explanation": "** The 8 subarrays that have product less than 100 are:\n[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]\nNote that [10, 5, 2] is not included as the product of 100 is not strictly less than k."
            },
            {
                "Input": "** nums = [1,2,3], k = 0",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Best Time to Buy and Sell Stock with Transaction Fee",
        "slug": "best-time-to-buy-and-sell-stock-with-transaction-fee",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** prices = [1,3,2,8,4,9], fee = 2",
                "Output": "** 8",
                "Explanation": "** The maximum profit can be achieved by:\n- Buying at prices[0] = 1\n- Selling at prices[3] = 8\n- Buying at prices[4] = 4\n- Selling at prices[5] = 9\nThe total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8."
            },
            {
                "Input": "** prices = [1,3,7,5,10,3], fee = 3",
                "Output": "** 6",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Range Module",
        "slug": "range-module",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"RangeModule\", \"addRange\", \"removeRange\", \"queryRange\", \"queryRange\", \"queryRange\"]\n[[], [10, 20], [14, 16], [10, 14], [13, 15], [16, 17]]",
                "Output": "[null, null, null, true, false, true]",
                "Explanation": "RangeModule rangeModule = new RangeModule();\nrangeModule.addRange(10, 20);\nrangeModule.removeRange(14, 16);\nrangeModule.queryRange(10, 14); // return True,(Every number in [10, 14) is being tracked)\nrangeModule.queryRange(13, 15); // return False,(Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)\nrangeModule.queryRange(16, 17); // return True, (The number 16 in [16, 17) is still being tracked, despite the remove operation)"
            }
        ]
    },
    {
        "Title": "1-bit and 2-bit Characters",
        "slug": "1-bit-and-2-bit-characters",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** bits = [1,0,0]",
                "Output": "** true",
                "Explanation": "** The only way to decode it is two-bit character and one-bit character.\nSo the last character is one-bit character."
            },
            {
                "Input": "** bits = [1,1,1,0]",
                "Output": "** false",
                "Explanation": "** The only way to decode it is two-bit character and two-bit character.\nSo the last character is not one-bit character."
            }
        ]
    },
    {
        "Title": "Find K-th Smallest Pair Distance",
        "slug": "find-k-th-smallest-pair-distance",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,3,1], k = 1",
                "Output": "** 0",
                "Explanation": "** Here are all the pairs:\n(1,3) -> 2\n(1,1) -> 0\n(3,1) -> 2\nThen the 1st smallest distance pair is (1,1), and its distance is 0."
            },
            {
                "Input": "** nums = [1,1,1], k = 2",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,6,1], k = 3",
                "Output": "** 5",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Word in Dictionary",
        "slug": "longest-word-in-dictionary",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** words = [\"w\",\"wo\",\"wor\",\"worl\",\"world\"]",
                "Output": "** \"world\"",
                "Explanation": "** The word \"world\" can be built one character at a time by \"w\", \"wo\", \"wor\", and \"worl\"."
            },
            {
                "Input": "** words = [\"a\",\"banana\",\"app\",\"appl\",\"ap\",\"apply\",\"apple\"]",
                "Output": "** \"apple\"",
                "Explanation": "** Both \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\"."
            }
        ]
    },
    {
        "Title": "Accounts Merge",
        "slug": "accounts-merge",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** accounts = [[\"John\",\"johnsmith@mail.com\",\"john_newyork@mail.com\"],[\"John\",\"johnsmith@mail.com\",\"john00@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]",
                "Output": "** [[\"John\",\"john00@mail.com\",\"john_newyork@mail.com\",\"johnsmith@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]",
                "Explanation": "**\nThe first and second John's are the same person as they have the common email \"johnsmith@mail.com\".\nThe third John and Mary are different people as none of their email addresses are used by other accounts.\nWe could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'], \n['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted."
            },
            {
                "Input": "** accounts = [[\"Gabe\",\"Gabe0@m.co\",\"Gabe3@m.co\",\"Gabe1@m.co\"],[\"Kevin\",\"Kevin3@m.co\",\"Kevin5@m.co\",\"Kevin0@m.co\"],[\"Ethan\",\"Ethan5@m.co\",\"Ethan4@m.co\",\"Ethan0@m.co\"],[\"Hanzo\",\"Hanzo3@m.co\",\"Hanzo1@m.co\",\"Hanzo0@m.co\"],[\"Fern\",\"Fern5@m.co\",\"Fern1@m.co\",\"Fern0@m.co\"]]",
                "Output": "** [[\"Ethan\",\"Ethan0@m.co\",\"Ethan4@m.co\",\"Ethan5@m.co\"],[\"Gabe\",\"Gabe0@m.co\",\"Gabe1@m.co\",\"Gabe3@m.co\"],[\"Hanzo\",\"Hanzo0@m.co\",\"Hanzo1@m.co\",\"Hanzo3@m.co\"],[\"Kevin\",\"Kevin0@m.co\",\"Kevin3@m.co\",\"Kevin5@m.co\"],[\"Fern\",\"Fern0@m.co\",\"Fern1@m.co\",\"Fern5@m.co\"]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove Comments",
        "slug": "remove-comments",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** source = [\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]",
                "Output": "** [\"int main()\",\"{ \",\"  \",\"int a, b, c;\",\"a = b + c;\",\"}\"]",
                "Explanation": "** The line by line code is visualized as below:\n/*Test program */\nint main()\n{ \n  // variable declaration \nint a, b, c;\n/* This is a test\n   multiline  \n   comment for \n   testing */\na = b + c;\n}\nThe string /* denotes a block comment, including line 1 and lines 6-9. The string // denotes line 4 as comments.\nThe line by line output code is visualized as below:\nint main()\n{ \n  \nint a, b, c;\na = b + c;\n}"
            },
            {
                "Input": "** source = [\"a/*comment\", \"line\", \"more_comment*/b\"]",
                "Output": "** [\"ab\"]",
                "Explanation": "** The original source string is \"a/*comment\\nline\\nmore_comment*/b\", where we have bolded the newline characters.  After deletion, the implicit newline characters are deleted, leaving the string \"ab\", which when delimited by newline characters becomes [\"ab\"]."
            }
        ]
    },
    {
        "Title": "Find Pivot Index",
        "slug": "find-pivot-index",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,7,3,6,5,6]",
                "Output": "** 3",
                "Explanation": "**\nThe pivot index is 3.\nLeft sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11\nRight sum = nums[4] + nums[5] = 5 + 6 = 11"
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** -1",
                "Explanation": "**\nThere is no index that satisfies the conditions in the problem statement."
            },
            {
                "Input": "** nums = [2,1,-1]",
                "Output": "** 0",
                "Explanation": "**\nThe pivot index is 0.\nLeft sum = 0 (no elements to the left of index 0)\nRight sum = nums[1] + nums[2] = 1 + -1 = 0"
            }
        ]
    },
    {
        "Title": "Split Linked List in Parts",
        "slug": "split-linked-list-in-parts",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [1,2,3], k = 5",
                "Output": "** [[1],[2],[3],[],[]]",
                "Explanation": "**\nThe first element output[0] has output[0].val = 1, output[0].next = null.\nThe last element output[4] is null, but its string representation as a ListNode is []."
            },
            {
                "Input": "** head = [1,2,3,4,5,6,7,8,9,10], k = 3",
                "Output": "** [[1,2,3,4],[5,6,7],[8,9,10]]",
                "Explanation": "**\nThe input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts."
            }
        ]
    },
    {
        "Title": "Number of Atoms",
        "slug": "number-of-atoms",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** formula = \"H2O\"",
                "Output": "** \"H2O\"",
                "Explanation": "** The count of elements are {'H': 2, 'O': 1}."
            },
            {
                "Input": "** formula = \"Mg(OH)2\"",
                "Output": "** \"H2MgO2\"",
                "Explanation": "** The count of elements are {'H': 2, 'Mg': 1, 'O': 2}."
            },
            {
                "Input": "** formula = \"K4(ON(SO3)2)2\"",
                "Output": "** \"K4N2O14S4\"",
                "Explanation": "** The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}."
            }
        ]
    },
    {
        "Title": "Self Dividing Numbers",
        "slug": "self-dividing-numbers",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** left = 1, right = 22",
                "Output": "** [1,2,3,4,5,6,7,8,9,11,12,15,22]",
                "Explanation": null
            },
            {
                "Input": "** left = 47, right = 85",
                "Output": "** [48,55,66,77]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "My Calendar I",
        "slug": "my-calendar-i",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"MyCalendar\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [15, 25], [20, 30]]",
                "Output": "[null, true, false, true]",
                "Explanation": "MyCalendar myCalendar = new MyCalendar();\nmyCalendar.book(10, 20); // return True\nmyCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event.\nmyCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20."
            }
        ]
    },
    {
        "Title": "Count Different Palindromic Subsequences",
        "slug": "count-different-palindromic-subsequences",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"bccb\"",
                "Output": "** 6",
                "Explanation": "** The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.\nNote that 'bcb' is counted only once, even though it occurs twice."
            },
            {
                "Input": "** s = \"abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba\"",
                "Output": "** 104860361",
                "Explanation": "** There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 109 + 7."
            }
        ]
    },
    {
        "Title": "My Calendar II",
        "slug": "my-calendar-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"MyCalendarTwo\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]",
                "Output": "[null, true, true, true, false, true, true]",
                "Explanation": "MyCalendarTwo myCalendarTwo = new MyCalendarTwo();\nmyCalendarTwo.book(10, 20); // return True, The event can be booked. \nmyCalendarTwo.book(50, 60); // return True, The event can be booked. \nmyCalendarTwo.book(10, 40); // return True, The event can be double booked. \nmyCalendarTwo.book(5, 15);  // return False, The event cannot be booked, because it would result in a triple booking.\nmyCalendarTwo.book(5, 10); // return True, The event can be booked, as it does not use time 10 which is already double booked.\nmyCalendarTwo.book(25, 55); // return True, The event can be booked, as the time in [25, 40) will be double booked with the third event, the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event."
            }
        ]
    },
    {
        "Title": "My Calendar III",
        "slug": "my-calendar-iii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"MyCalendarThree\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]",
                "Output": "[null, 1, 1, 2, 3, 3, 3]",
                "Explanation": "MyCalendarThree myCalendarThree = new MyCalendarThree();\nmyCalendarThree.book(10, 20); // return 1\nmyCalendarThree.book(50, 60); // return 1\nmyCalendarThree.book(10, 40); // return 2\nmyCalendarThree.book(5, 15); // return 3\nmyCalendarThree.book(5, 10); // return 3\nmyCalendarThree.book(25, 55); // return 3"
            }
        ]
    },
    {
        "Title": "Flood Fill",
        "slug": "flood-fill",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2",
                "Output": "** [[2,2,2],[2,2,0],[2,0,1]]",
                "Explanation": "** From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel."
            }
        ]
    },
    {
        "Title": "Asteroid Collision",
        "slug": "asteroid-collision",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** asteroids = [5,10,-5]",
                "Output": "** [5,10]",
                "Explanation": "** The 10 and -5 collide resulting in 10. The 5 and 10 never collide."
            },
            {
                "Input": "** asteroids = [8,-8]",
                "Output": "** []",
                "Explanation": "** The 8 and -8 collide exploding each other."
            },
            {
                "Input": "** asteroids = [10,2,-5]",
                "Output": "** [10]",
                "Explanation": "** The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10."
            }
        ]
    },
    {
        "Title": "Parse Lisp Expression",
        "slug": "parse-lisp-expression",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** expression = \"(let x 2 (mult x (let x 3 y 4 (add x y))))\"",
                "Output": "** 14",
                "Explanation": "** In the expression (add x y), when checking for the value of the variable x,\nwe check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.\nSince x = 3 is found first, the value of x is 3."
            },
            {
                "Input": "** expression = \"(let x 3 x 2 x)\"",
                "Output": "** 2",
                "Explanation": "** Assignment in let statements is processed sequentially."
            },
            {
                "Input": "** expression = \"(let x 1 y 2 x (add x y) (add x y))\"",
                "Output": "** 5",
                "Explanation": "** The first (add x y) evaluates as 3, and is assigned to x.\nThe second (add x y) evaluates as 3+2 = 5."
            }
        ]
    },
    {
        "Title": "Monotone Increasing Digits",
        "slug": "monotone-increasing-digits",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 10",
                "Output": "** 9",
                "Explanation": null
            },
            {
                "Input": "** n = 1234",
                "Output": "** 1234",
                "Explanation": null
            },
            {
                "Input": "** n = 332",
                "Output": "** 299",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Daily Temperatures",
        "slug": "daily-temperatures",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** temperatures = [73,74,75,71,69,72,76,73]",
                "Output": "** [1,1,4,2,1,1,0,0]",
                "Explanation": null
            },
            {
                "Input": "** temperatures = [30,40,50,60]",
                "Output": "** [1,1,1,0]",
                "Explanation": null
            },
            {
                "Input": "** temperatures = [30,60,90]",
                "Output": "** [1,1,0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Delete and Earn",
        "slug": "delete-and-earn",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,4,2]",
                "Output": "** 6",
                "Explanation": "** You can perform the following operations:\n- Delete 4 to earn 4 points. Consequently, 3 is also deleted. nums = [2].\n- Delete 2 to earn 2 points. nums = [].\nYou earn a total of 6 points."
            },
            {
                "Input": "** nums = [2,2,3,3,3,4]",
                "Output": "** 9",
                "Explanation": "** You can perform the following operations:\n- Delete a 3 to earn 3 points. All 2's and 4's are also deleted. nums = [3,3].\n- Delete a 3 again to earn 3 points. nums = [3].\n- Delete a 3 once more to earn 3 points. nums = [].\nYou earn a total of 9 points."
            }
        ]
    },
    {
        "Title": "Cherry Pickup",
        "slug": "cherry-pickup",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [[0,1,-1],[1,0,-1],[1,1,1]]",
                "Output": "** 5",
                "Explanation": "** The player started at (0, 0) and went down, down, right right to reach (2, 2).\n4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].\nThen, the player went left, up, up, left to return home, picking up one more cherry.\nThe total number of cherries picked up is 5, and this is the maximum possible."
            }
        ]
    },
    {
        "Title": "Network Delay Time",
        "slug": "network-delay-time",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Smallest Letter Greater Than Target",
        "slug": "find-smallest-letter-greater-than-target",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** letters = [\"c\",\"f\",\"j\"], target = \"a\"",
                "Output": "** \"c\"",
                "Explanation": "** The smallest character that is lexicographically greater than 'a' in letters is 'c'."
            },
            {
                "Input": "** letters = [\"c\",\"f\",\"j\"], target = \"c\"",
                "Output": "** \"f\"",
                "Explanation": "** The smallest character that is lexicographically greater than 'c' in letters is 'f'."
            },
            {
                "Input": "** letters = [\"x\",\"x\",\"y\",\"y\"], target = \"z\"",
                "Output": "** \"x\"",
                "Explanation": "** There are no characters in letters that is lexicographically greater than 'z' so we return letters[0]."
            }
        ]
    },
    {
        "Title": "Prefix and Suffix Search",
        "slug": "prefix-and-suffix-search",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"WordFilter\", \"f\"]\n[[[\"apple\"]], [\"a\", \"e\"]]",
                "Output": "[null, 0]",
                "Explanation": "WordFilter wordFilter = new WordFilter([\"apple\"]);\nwordFilter.f(\"a\", \"e\"); // return 0, because the word at index 0 has prefix = \"a\" and suffix = \"e\"."
            }
        ]
    },
    {
        "Title": "Min Cost Climbing Stairs",
        "slug": "min-cost-climbing-stairs",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** cost = [10,15,20]",
                "Output": "** 15",
                "Explanation": "** You will start at index 1.\n- Pay 15 and climb two steps to reach the top.\nThe total cost is 15."
            },
            {
                "Input": "** cost = [1,100,1,1,1,100,1,1,100,1]",
                "Output": "** 6",
                "Explanation": "** You will start at index 0.\n- Pay 1 and climb two steps to reach index 2.\n- Pay 1 and climb two steps to reach index 4.\n- Pay 1 and climb two steps to reach index 6.\n- Pay 1 and climb one step to reach index 7.\n- Pay 1 and climb two steps to reach index 9.\n- Pay 1 and climb one step to reach the top.\nThe total cost is 6."
            }
        ]
    },
    {
        "Title": "Largest Number At Least Twice of Others",
        "slug": "largest-number-at-least-twice-of-others",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [3,6,1,0]",
                "Output": "** 1",
                "Explanation": "** 6 is the largest integer.\nFor every other number in the array x, 6 is at least twice as big as x.\nThe index of value 6 is 1, so we return 1."
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** -1",
                "Explanation": "** 4 is less than twice the value of 3, so we return -1."
            }
        ]
    },
    {
        "Title": "Shortest Completing Word",
        "slug": "shortest-completing-word",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** licensePlate = \"1s3 PSt\", words = [\"step\",\"steps\",\"stripe\",\"stepple\"]",
                "Output": "** \"steps\"",
                "Explanation": "** licensePlate contains letters 's', 'p', 's' (ignoring case), and 't'.\n\"step\" contains 't' and 'p', but only contains 1 's'.\n\"steps\" contains 't', 'p', and both 's' characters.\n\"stripe\" is missing an 's'.\n\"stepple\" is missing an 's'.\nSince \"steps\" is the only word containing all the letters, that is the answer."
            },
            {
                "Input": "** licensePlate = \"1s3 456\", words = [\"looks\",\"pest\",\"stew\",\"show\"]",
                "Output": "** \"pest\"",
                "Explanation": "** licensePlate only contains the letter 's'. All the words contain 's', but among these \"pest\", \"stew\", and \"show\" are shortest. The answer is \"pest\" because it is the word that appears earliest of the 3."
            }
        ]
    },
    {
        "Title": "Contain Virus",
        "slug": "contain-virus",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** isInfected = [[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]",
                "Output": "** 10",
                "Explanation": "** There are 2 contaminated regions.\nOn the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is:\n![](https://assets.leetcode.com/uploads/2021/06/01/virus12edited-grid.jpg)\nOn the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained.\n![](https://assets.leetcode.com/uploads/2021/06/01/virus13edited-grid.jpg)"
            },
            {
                "Input": "** isInfected = [[1,1,1],[1,0,1],[1,1,1]]",
                "Output": "** 4",
                "Explanation": "** Even though there is only one cell saved, there are 4 walls built.\nNotice that walls are only built on the shared boundary of two different cells."
            }
        ]
    },
    {
        "Title": "Open the Lock",
        "slug": "open-the-lock",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\"",
                "Output": "** 6",
                "Explanation": "** \nA sequence of valid moves would be \"0000\" -> \"1000\" -> \"1100\" -> \"1200\" -> \"1201\" -> \"1202\" -> \"0202\".\nNote that a sequence like \"0000\" -> \"0001\" -> \"0002\" -> \"0102\" -> \"0202\" would be invalid,\nbecause the wheels of the lock become stuck after the display becomes the dead end \"0102\"."
            },
            {
                "Input": "** deadends = [\"8888\"], target = \"0009\"",
                "Output": "** 1",
                "Explanation": "** We can turn the last wheel in reverse to move from \"0000\" -> \"0009\"."
            },
            {
                "Input": "** deadends = [\"8887\",\"8889\",\"8878\",\"8898\",\"8788\",\"8988\",\"7888\",\"9888\"], target = \"8888\"",
                "Output": "** -1",
                "Explanation": "** We cannot reach the target without getting stuck."
            }
        ]
    },
    {
        "Title": "Cracking the Safe",
        "slug": "cracking-the-safe",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 1, k = 2",
                "Output": "** \"10\"",
                "Explanation": "** The password is a single digit, so enter each digit. \"01\" would also unlock the safe."
            },
            {
                "Input": "** n = 2, k = 2",
                "Output": "** \"01100\"",
                "Explanation": "** For each possible password:\n- \"00\" is typed in starting from the 4th digit.\n- \"01\" is typed in starting from the 1st digit.\n- \"10\" is typed in starting from the 3rd digit.\n- \"11\" is typed in starting from the 2nd digit.\nThus \"01100\" will unlock the safe. \"10011\", and \"11001\" would also unlock the safe."
            }
        ]
    },
    {
        "Title": "Reach a Number",
        "slug": "reach-a-number",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** target = 2",
                "Output": "** 3",
                "Explanation": "**\nOn the 1st move, we step from 0 to 1 (1 step).\nOn the 2nd move, we step from 1 to -1 (2 steps).\nOn the 3rd move, we step from -1 to 2 (3 steps)."
            },
            {
                "Input": "** target = 3",
                "Output": "** 2",
                "Explanation": "**\nOn the 1st move, we step from 0 to 1 (1 step).\nOn the 2nd move, we step from 1 to 3 (2 steps)."
            }
        ]
    },
    {
        "Title": "Pyramid Transition Matrix",
        "slug": "pyramid-transition-matrix",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** bottom = \"BCD\", allowed = [\"BCC\",\"CDE\",\"CEA\",\"FFF\"]",
                "Output": "** true",
                "Explanation": "** The allowed triangular patterns are shown on the right.\nStarting from the bottom (level 3), we can build \"CE\" on level 2 and then build \"A\" on level 1.\nThere are three triangular patterns in the pyramid, which are \"BCC\", \"CDE\", and \"CEA\". All are allowed."
            },
            {
                "Input": "** bottom = \"AAAA\", allowed = [\"AAB\",\"AAC\",\"BCD\",\"BBE\",\"DEF\"]",
                "Output": "** false",
                "Explanation": "** The allowed triangular patterns are shown on the right.\nStarting from the bottom (level 4), there are multiple ways to build level 3, but trying all the possibilites, you will get always stuck before building level 1."
            }
        ]
    },
    {
        "Title": "Set Intersection Size At Least Two",
        "slug": "set-intersection-size-at-least-two",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** intervals = [[1,3],[3,7],[8,9]]",
                "Output": "** 5",
                "Explanation": "** let nums = [2, 3, 4, 8, 9].\nIt can be shown that there cannot be any containing array of size 4."
            },
            {
                "Input": "** intervals = [[1,3],[1,4],[2,5],[3,5]]",
                "Output": "** 3",
                "Explanation": "** let nums = [2, 3, 4].\nIt can be shown that there cannot be any containing array of size 2."
            },
            {
                "Input": "** intervals = [[1,2],[2,3],[2,4],[4,5]]",
                "Output": "** 5",
                "Explanation": "** let nums = [1, 2, 3, 4, 5].\nIt can be shown that there cannot be any containing array of size 4."
            }
        ]
    },
    {
        "Title": "Special Binary String",
        "slug": "special-binary-string",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"11011000\"",
                "Output": "** \"11100100\"",
                "Explanation": "** The strings \"10\" [occuring at s[1]] and \"1100\" [at s[3]] are swapped.\nThis is the lexicographically largest string possible after some number of swaps."
            },
            {
                "Input": "** s = \"10\"",
                "Output": "** \"10\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Prime Number of Set Bits in Binary Representation",
        "slug": "prime-number-of-set-bits-in-binary-representation",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** left = 6, right = 10",
                "Output": "** 4",
                "Explanation": "**\n6  -> 110 (2 set bits, 2 is prime)\n7  -> 111 (3 set bits, 3 is prime)\n8  -> 1000 (1 set bit, 1 is not prime)\n9  -> 1001 (2 set bits, 2 is prime)\n10 -> 1010 (2 set bits, 2 is prime)\n4 numbers have a prime number of set bits."
            },
            {
                "Input": "** left = 10, right = 15",
                "Output": "** 5",
                "Explanation": "**\n10 -> 1010 (2 set bits, 2 is prime)\n11 -> 1011 (3 set bits, 3 is prime)\n12 -> 1100 (2 set bits, 2 is prime)\n13 -> 1101 (3 set bits, 3 is prime)\n14 -> 1110 (3 set bits, 3 is prime)\n15 -> 1111 (4 set bits, 4 is not prime)\n5 numbers have a prime number of set bits."
            }
        ]
    },
    {
        "Title": "Partition Labels",
        "slug": "partition-labels",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"ababcbacadefegdehijhklij\"",
                "Output": "** [9,7,8]",
                "Explanation": "**\nThe partition is \"ababcbaca\", \"defegde\", \"hijhklij\".\nThis is a partition so that each letter appears in at most one part.\nA partition like \"ababcbacadefegde\", \"hijhklij\" is incorrect, because it splits s into less parts."
            },
            {
                "Input": "** s = \"eccbbbbdec\"",
                "Output": "** [10]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Largest Plus Sign",
        "slug": "largest-plus-sign",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 5, mines = [[4,2]]",
                "Output": "** 2",
                "Explanation": "** In the above grid, the largest plus sign can only be of order 2. One of them is shown."
            },
            {
                "Input": "** n = 1, mines = [[0,0]]",
                "Output": "** 0",
                "Explanation": "** There is no plus sign, so return 0."
            }
        ]
    },
    {
        "Title": "Couples Holding Hands",
        "slug": "couples-holding-hands",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** row = [0,2,1,3]",
                "Output": "** 1",
                "Explanation": "** We only need to swap the second (row[1]) and third (row[2]) person."
            },
            {
                "Input": "** row = [3,2,0,1]",
                "Output": "** 0",
                "Explanation": "** All couples are already seated side by side."
            }
        ]
    },
    {
        "Title": "Toeplitz Matrix",
        "slug": "toeplitz-matrix",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]",
                "Output": "** true",
                "Explanation": "**\nIn the above grid, the\u00a0diagonals are:\n\"[9]\", \"[5, 5]\", \"[1, 1, 1]\", \"[2, 2, 2]\", \"[3, 3]\", \"[4]\".\nIn each diagonal all elements are the same, so the answer is True."
            },
            {
                "Input": "** matrix = [[1,2],[2,2]]",
                "Output": "** false",
                "Explanation": "**\nThe diagonal \"[1, 2]\" has different elements."
            }
        ]
    },
    {
        "Title": "Reorganize String",
        "slug": "reorganize-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"aab\"",
                "Output": "** \"aba\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"aaab\"",
                "Output": "** \"\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Max Chunks To Make Sorted II",
        "slug": "max-chunks-to-make-sorted-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** arr = [5,4,3,2,1]",
                "Output": "** 1",
                "Explanation": "**\nSplitting into two or more chunks will not return the required result.\nFor example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted."
            },
            {
                "Input": "** arr = [2,1,3,4,4]",
                "Output": "** 4",
                "Explanation": "**\nWe can split into two chunks, such as [2, 1], [3, 4, 4].\nHowever, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible."
            }
        ]
    },
    {
        "Title": "Max Chunks To Make Sorted",
        "slug": "max-chunks-to-make-sorted",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [4,3,2,1,0]",
                "Output": "** 1",
                "Explanation": "**\nSplitting into two or more chunks will not return the required result.\nFor example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted."
            },
            {
                "Input": "** arr = [1,0,2,3,4]",
                "Output": "** 4",
                "Explanation": "**\nWe can split into two chunks, such as [1, 0], [2, 3, 4].\nHowever, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible."
            }
        ]
    },
    {
        "Title": "Basic Calculator IV",
        "slug": "basic-calculator-iv",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** expression = \"e + 8 - a + 5\", evalvars = [\"e\"], evalints = [1]",
                "Output": "** [\"-1*a\",\"14\"]",
                "Explanation": null
            },
            {
                "Input": "** expression = \"e - 8 + temperature - pressure\", evalvars = [\"e\", \"temperature\"], evalints = [1, 12]",
                "Output": "** [\"-1*pressure\",\"5\"]",
                "Explanation": null
            },
            {
                "Input": "** expression = \"(e + 8) * (e - 8)\", evalvars = [], evalints = []",
                "Output": "** [\"1*e*e\",\"-64\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Jewels and Stones",
        "slug": "jewels-and-stones",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** jewels = \"aA\", stones = \"aAAbbbb\"",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** jewels = \"z\", stones = \"ZZ\"",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sliding Puzzle",
        "slug": "sliding-puzzle",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** board = [[1,2,3],[4,0,5]]",
                "Output": "** 1",
                "Explanation": "** Swap the 0 and the 5 in one move."
            },
            {
                "Input": "** board = [[1,2,3],[5,4,0]]",
                "Output": "** -1",
                "Explanation": "** No number of moves will make the board solved."
            },
            {
                "Input": "** board = [[4,1,2],[5,0,3]]",
                "Output": "** 5",
                "Explanation": "** 5 is the smallest number of moves that solves the board.\nAn example path:\nAfter move 0: [[4,1,2],[5,0,3]]\nAfter move 1: [[4,1,2],[0,5,3]]\nAfter move 2: [[0,1,2],[4,5,3]]\nAfter move 3: [[1,0,2],[4,5,3]]\nAfter move 4: [[1,2,0],[4,5,3]]\nAfter move 5: [[1,2,3],[4,5,0]]"
            }
        ]
    },
    {
        "Title": "Global and Local Inversions",
        "slug": "global-and-local-inversions",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,0,2]",
                "Output": "** true",
                "Explanation": "** There is 1 global inversion and 1 local inversion."
            },
            {
                "Input": "** nums = [1,2,0]",
                "Output": "** false",
                "Explanation": "** There are 2 global inversions and 1 local inversion."
            }
        ]
    },
    {
        "Title": "Swap Adjacent in LR String",
        "slug": "swap-adjacent-in-lr-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** start = \"RXXLRXRXL\", end = \"XRLXXRRLX\"",
                "Output": "** true",
                "Explanation": "** We can transform start to end following these steps:\nRXXLRXRXL ->\nXRXLRXRXL ->\nXRLXRXRXL ->\nXRLXXRRXL ->\nXRLXXRRLX"
            },
            {
                "Input": "** start = \"X\", end = \"L\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Swim in Rising Water",
        "slug": "swim-in-rising-water",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [[0,2],[1,3]]",
                "Output": "** 3\nExplanation:\nAt time 0, you are in grid location (0, 0).\nYou cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.\nYou cannot reach point (1, 1) until time 3.\nWhen the depth of water is 3, we can swim anywhere inside the grid.",
                "Explanation": null
            },
            {
                "Input": "** grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]",
                "Output": "** 16",
                "Explanation": "** The final route is shown.\nWe need to wait until time 16 so that (0, 0) and (4, 4) are connected."
            }
        ]
    },
    {
        "Title": "K-th Symbol in Grammar",
        "slug": "k-th-symbol-in-grammar",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 1, k = 1",
                "Output": "** 0",
                "Explanation": "** row 1: 0"
            },
            {
                "Input": "** n = 2, k = 1",
                "Output": "** 0",
                "Explanation": "** \nrow 1: 0\nrow 2: 01"
            },
            {
                "Input": "** n = 2, k = 2",
                "Output": "** 1",
                "Explanation": "** \nrow 1: 0\nrow 2: 01"
            }
        ]
    },
    {
        "Title": "Reaching Points",
        "slug": "reaching-points",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** sx = 1, sy = 1, tx = 3, ty = 5",
                "Output": "** true",
                "Explanation": "**\nOne series of moves that transforms the starting point to the target is:\n(1, 1) -> (1, 2)\n(1, 2) -> (3, 2)\n(3, 2) -> (3, 5)"
            },
            {
                "Input": "** sx = 1, sy = 1, tx = 2, ty = 2",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** sx = 1, sy = 1, tx = 1, ty = 1",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Rabbits in Forest",
        "slug": "rabbits-in-forest",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** answers = [1,1,2]",
                "Output": "** 5",
                "Explanation": "**\nThe two rabbits that answered \"1\" could both be the same color, say red.\nThe rabbit that answered \"2\" can't be red or the answers would be inconsistent.\nSay the rabbit that answered \"2\" was blue.\nThen there should be 2 other blue rabbits in the forest that didn't answer into the array.\nThe smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn't."
            },
            {
                "Input": "** answers = [10,10,10]",
                "Output": "** 11",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Transform to Chessboard",
        "slug": "transform-to-chessboard",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]",
                "Output": "** 2",
                "Explanation": "** One potential sequence of moves is shown.\nThe first move swaps the first and second column.\nThe second move swaps the second and third row."
            },
            {
                "Input": "** board = [[0,1],[1,0]]",
                "Output": "** 0",
                "Explanation": "** Also note that the board with 0 in the top left corner, is also a valid chessboard."
            },
            {
                "Input": "** board = [[1,0],[1,0]]",
                "Output": "** -1",
                "Explanation": "** No matter what sequence of moves you make, you cannot end with a valid chessboard."
            }
        ]
    },
    {
        "Title": "Minimum Distance Between BST Nodes",
        "slug": "minimum-distance-between-bst-nodes",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [4,2,6,1,3]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** root = [1,0,48,null,null,12,49]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Letter Case Permutation",
        "slug": "letter-case-permutation",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"a1b2\"",
                "Output": "** [\"a1b2\",\"a1B2\",\"A1b2\",\"A1B2\"]",
                "Explanation": null
            },
            {
                "Input": "** s = \"3z4\"",
                "Output": "** [\"3z4\",\"3Z4\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Is Graph Bipartite?",
        "slug": "is-graph-bipartite",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** graph = [[1,2,3],[0,2],[0,1,3],[0,2]]",
                "Output": "** false",
                "Explanation": "** There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other."
            },
            {
                "Input": "** graph = [[1,3],[0,2],[1,3],[0,2]]",
                "Output": "** true",
                "Explanation": "** We can partition the nodes into two sets: {0, 2} and {1, 3}."
            }
        ]
    },
    {
        "Title": "K-th Smallest Prime Fraction",
        "slug": "k-th-smallest-prime-fraction",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [1,2,3,5], k = 3",
                "Output": "** [2,5]",
                "Explanation": "** The fractions to be considered in sorted order are:\n1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.\nThe third fraction is 2/5."
            },
            {
                "Input": "** arr = [1,7], k = 1",
                "Output": "** [1,7]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Cheapest Flights Within K Stops",
        "slug": "cheapest-flights-within-k-stops",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1",
                "Output": "** 700",
                "Explanation": "**\nThe graph is shown above.\nThe optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.\nNote that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops."
            },
            {
                "Input": "** n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1",
                "Output": "** 200",
                "Explanation": "**\nThe graph is shown above.\nThe optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200."
            },
            {
                "Input": "** n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0",
                "Output": "** 500",
                "Explanation": "**\nThe graph is shown above.\nThe optimal path with no stops from city 0 to 2 is marked in red and has cost 500."
            }
        ]
    },
    {
        "Title": "Rotated Digits",
        "slug": "rotated-digits",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 10",
                "Output": "** 4",
                "Explanation": "** There are four good numbers in the range [1, 10] : 2, 5, 6, 9.\nNote that 1 and 10 are not good numbers, since they remain unchanged after rotating."
            },
            {
                "Input": "** n = 1",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** n = 2",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Escape The Ghosts",
        "slug": "escape-the-ghosts",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** ghosts = [[1,0],[0,3]], target = [0,1]",
                "Output": "** true",
                "Explanation": "** You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you."
            },
            {
                "Input": "** ghosts = [[1,0]], target = [2,0]",
                "Output": "** false",
                "Explanation": "** You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination."
            },
            {
                "Input": "** ghosts = [[2,0]], target = [1,0]",
                "Output": "** false",
                "Explanation": "** The ghost can reach the target at the same time as you."
            }
        ]
    },
    {
        "Title": "Domino and Tromino Tiling",
        "slug": "domino-and-tromino-tiling",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** 5",
                "Explanation": "** The five different ways are show above."
            }
        ]
    },
    {
        "Title": "Custom Sort String",
        "slug": "custom-sort-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "**   order = \"cba\", s = \"abcd\"",
                "Output": "**   \"cbad\"",
                "Explanation": "**  `\"a\"`, `\"b\"`, `\"c\"` appear in order, so the order of `\"a\"`, `\"b\"`, `\"c\"` should be `\"c\"`, `\"b\"`, and `\"a\"`.\n\n\nSince `\"d\"` does not appear in `order`, it can be at any position in the returned string. `\"dcba\"`, `\"cdba\"`, `\"cbda\"` are also valid outputs."
            },
            {
                "Input": "**   order = \"bcafg\", s = \"abcd\"",
                "Output": "**   \"bcad\"",
                "Explanation": "**  The characters `\"b\"`, `\"c\"`, and `\"a\"` from `order` dictate the order for the characters in `s`. The character `\"d\"` in `s` does not appear in `order`, so its position is flexible.\n\n\nFollowing the order of appearance in `order`, `\"b\"`, `\"c\"`, and `\"a\"` from `s` should be arranged as `\"b\"`, `\"c\"`, `\"a\"`. `\"d\"` can be placed at any position since it's not in order. The output `\"bcad\"` correctly follows this rule. Other arrangements like `\"bacd\"` or `\"bcda\"` would also be valid, as long as `\"b\"`, `\"c\"`, `\"a\"` maintain their order.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= order.length <= 26`\n* `1 <= s.length <= 200`\n* `order` and `s` consist of lowercase English letters.\n* All the characters of `order` are **unique**.\n\n\nSimilarQuestions: [2545]"
            }
        ]
    },
    {
        "Title": "Number of Matching Subsequences",
        "slug": "number-of-matching-subsequences",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"abcde\", words = [\"a\",\"bb\",\"acd\",\"ace\"]",
                "Output": "** 3",
                "Explanation": "** There are three strings in words that are a subsequence of s: \"a\", \"acd\", \"ace\"."
            },
            {
                "Input": "** s = \"dsahjpjauf\", words = [\"ahjpjau\",\"ja\",\"ahbwzgqnuk\",\"tnmlanowax\"]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Preimage Size of Factorial Zeroes Function",
        "slug": "preimage-size-of-factorial-zeroes-function",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** k = 0",
                "Output": "** 5",
                "Explanation": "** 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes."
            },
            {
                "Input": "** k = 5",
                "Output": "** 0",
                "Explanation": "** There is no x such that x! ends in k = 5 zeroes."
            },
            {
                "Input": "** k = 3",
                "Output": "** 5",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Valid Tic-Tac-Toe State",
        "slug": "valid-tic-tac-toe-state",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** board = [\"O  \",\"   \",\"   \"]",
                "Output": "** false",
                "Explanation": "** The first player always plays \"X\"."
            },
            {
                "Input": "** board = [\"XOX\",\" X \",\"   \"]",
                "Output": "** false",
                "Explanation": "** Players take turns making moves."
            },
            {
                "Input": "** board = [\"XOX\",\"O O\",\"XOX\"]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Subarrays with Bounded Maximum",
        "slug": "number-of-subarrays-with-bounded-maximum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,1,4,3], left = 2, right = 3",
                "Output": "** 3",
                "Explanation": "** There are three subarrays that meet the requirements: [2], [2, 1], [3]."
            },
            {
                "Input": "** nums = [2,9,2,5,6], left = 2, right = 8",
                "Output": "** 7",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Rotate String",
        "slug": "rotate-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"abcde\", goal = \"cdeab\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"abcde\", goal = \"abced\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "All Paths From Source to Target",
        "slug": "all-paths-from-source-to-target",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** graph = [[1,2],[3],[3],[]]",
                "Output": "** [[0,1,3],[0,2,3]]",
                "Explanation": "** There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3."
            },
            {
                "Input": "** graph = [[4,3,1],[3,2,4],[3],[4],[]]",
                "Output": "** [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Smallest Rotation with Highest Score",
        "slug": "smallest-rotation-with-highest-score",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [2,3,1,4,0]",
                "Output": "** 3",
                "Explanation": "** Scores for each k are listed below: \nk = 0,  nums = [2,3,1,4,0],    score 2\nk = 1,  nums = [3,1,4,0,2],    score 3\nk = 2,  nums = [1,4,0,2,3],    score 3\nk = 3,  nums = [4,0,2,3,1],    score 4\nk = 4,  nums = [0,2,3,1,4],    score 3\nSo we should choose k = 3, which has the highest score."
            },
            {
                "Input": "** nums = [1,3,0,2,4]",
                "Output": "** 0",
                "Explanation": "** nums will always have 3 points no matter how it shifts.\nSo we will choose the smallest k, which is 0."
            }
        ]
    },
    {
        "Title": "Champagne Tower",
        "slug": "champagne-tower",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** poured = 1, query_row = 1, query_glass = 1",
                "Output": "** 0.00000",
                "Explanation": "** We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty."
            },
            {
                "Input": "** poured = 2, query_row = 1, query_glass = 1",
                "Output": "** 0.50000",
                "Explanation": "** We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange."
            },
            {
                "Input": "** poured = 100000009, query_row = 33, query_glass = 17",
                "Output": "** 1.00000",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Swaps To Make Sequences Increasing",
        "slug": "minimum-swaps-to-make-sequences-increasing",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums1 = [1,3,5,4], nums2 = [1,2,3,7]",
                "Output": "** 1",
                "Explanation": "** \nSwap nums1[3] and nums2[3]. Then the sequences are:\nnums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4]\nwhich are both strictly increasing."
            },
            {
                "Input": "** nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Eventual Safe States",
        "slug": "find-eventual-safe-states",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** graph = [[1,2],[2,3],[5],[0],[5],[],[]]",
                "Output": "** [2,4,5,6]",
                "Explanation": "** The given graph is shown above.\nNodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.\nEvery path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6."
            }
        ]
    },
    {
        "Title": "Bricks Falling When Hit",
        "slug": "bricks-falling-when-hit",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]",
                "Output": "** [2]",
                "Explanation": "** Starting with the grid:\n[[1,0,0,0],\n [1,1,1,0]]\nWe erase the underlined brick at (1,0), resulting in the grid:\n[[1,0,0,0],\n [0,1,1,0]]\nThe two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is:\n[[1,0,0,0],\n [0,0,0,0]]\nHence the result is [2]."
            },
            {
                "Input": "** grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]",
                "Output": "** [0,0]",
                "Explanation": "** Starting with the grid:\n[[1,0,0,0],\n [1,1,0,0]]\nWe erase the underlined brick at (1,1), resulting in the grid:\n[[1,0,0,0],\n [1,0,0,0]]\nAll remaining bricks are still stable, so no bricks fall. The grid remains the same:\n[[1,0,0,0],\n [1,0,0,0]]\nNext, we erase the underlined brick at (1,0), resulting in the grid:\n[[1,0,0,0],\n [0,0,0,0]]\nOnce again, all remaining bricks are still stable, so no bricks fall.\nHence the result is [0,0]."
            }
        ]
    },
    {
        "Title": "Unique Morse Code Words",
        "slug": "unique-morse-code-words",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** words = [\"gin\",\"zen\",\"gig\",\"msg\"]",
                "Output": "** 2",
                "Explanation": "** The transformation of each word is:\n\"gin\" -> \"--...-.\"\n\"zen\" -> \"--...-.\"\n\"gig\" -> \"--...--.\"\n\"msg\" -> \"--...--.\"\nThere are 2 different transformations: \"--...-.\" and \"--...--.\"."
            },
            {
                "Input": "** words = [\"a\"]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Split Array With Same Average",
        "slug": "split-array-with-same-average",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5,6,7,8]",
                "Output": "** true",
                "Explanation": "** We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have an average of 4.5."
            },
            {
                "Input": "** nums = [3,1]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Lines To Write String",
        "slug": "number-of-lines-to-write-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"abcdefghijklmnopqrstuvwxyz\"",
                "Output": "** [3,60]",
                "Explanation": "** You can write s as follows:\nabcdefghij  // 100 pixels wide\nklmnopqrst  // 100 pixels wide\nuvwxyz      // 60 pixels wide\nThere are a total of 3 lines, and the last line is 60 pixels wide."
            },
            {
                "Input": "** widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"bbbcccdddaaa\"",
                "Output": "** [2,4]",
                "Explanation": "** You can write s as follows:\nbbbcccdddaa  // 98 pixels wide\na            // 4 pixels wide\nThere are a total of 2 lines, and the last line is 4 pixels wide."
            }
        ]
    },
    {
        "Title": "Max Increase to Keep City Skyline",
        "slug": "max-increase-to-keep-city-skyline",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]",
                "Output": "** 35",
                "Explanation": "** The building heights are shown in the center of the above image.\nThe skylines when viewed from each cardinal direction are drawn in red.\nThe grid after increasing the height of buildings without affecting skylines is:\ngridNew = [ [8, 4, 8, 7],\n            [7, 4, 7, 7],\n            [9, 4, 8, 7],\n            [3, 3, 3, 3] ]"
            }
        ]
    },
    {
        "Title": "Soup Servings",
        "slug": "soup-servings",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 50",
                "Output": "** 0.62500",
                "Explanation": "** If we choose the first two operations, A will become empty first.\nFor the third operation, A and B will become empty at the same time.\nFor the fourth operation, B will become empty first.\nSo the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625."
            },
            {
                "Input": "** n = 100",
                "Output": "** 0.71875",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Expressive Words",
        "slug": "expressive-words",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"heeellooo\", words = [\"hello\", \"hi\", \"helo\"]",
                "Output": "** 1",
                "Explanation": "** \nWe can extend \"e\" and \"o\" in the word \"hello\" to get \"heeellooo\".\nWe can't extend \"helo\" to get \"heeellooo\" because the group \"ll\" is not size 3 or more."
            },
            {
                "Input": "** s = \"zzzzzyyyyy\", words = [\"zzyy\",\"zy\",\"zyy\"]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Chalkboard XOR Game",
        "slug": "chalkboard-xor-game",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,1,2]",
                "Output": "** false",
                "Explanation": "** \nAlice has two choices: erase 1 or erase 2. \nIf she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. \nIf Alice erases 2 first, now nums become [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose."
            },
            {
                "Input": "** nums = [0,1]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Subdomain Visit Count",
        "slug": "subdomain-visit-count",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** cpdomains = [\"9001 discuss.leetcode.com\"]",
                "Output": "** [\"9001 leetcode.com\",\"9001 discuss.leetcode.com\",\"9001 com\"]",
                "Explanation": "** We only have one website domain: \"discuss.leetcode.com\".\nAs discussed above, the subdomain \"leetcode.com\" and \"com\" will also be visited. So they will all be visited 9001 times."
            },
            {
                "Input": "** cpdomains = [\"900 google.mail.com\", \"50 yahoo.com\", \"1 intel.mail.com\", \"5 wiki.org\"]",
                "Output": "** [\"901 mail.com\",\"50 yahoo.com\",\"900 google.mail.com\",\"5 wiki.org\",\"5 org\",\"1 intel.mail.com\",\"951 com\"]",
                "Explanation": "** We will visit \"google.mail.com\" 900 times, \"yahoo.com\" 50 times, \"intel.mail.com\" once and \"wiki.org\" 5 times.\nFor the subdomains, we will visit \"mail.com\" 900 + 1 = 901 times, \"com\" 900 + 50 + 1 = 951 times, and \"org\" 5 times."
            }
        ]
    },
    {
        "Title": "Largest Triangle Area",
        "slug": "largest-triangle-area",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** points = [[0,0],[0,1],[1,0],[0,2],[2,0]]",
                "Output": "** 2.00000",
                "Explanation": "** The five points are shown in the above figure. The red triangle is the largest."
            }
        ]
    },
    {
        "Title": "Largest Sum of Averages",
        "slug": "largest-sum-of-averages",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [9,1,2,3,9], k = 3",
                "Output": "** 20.00000",
                "Explanation": "** \nThe best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\nWe could have also partitioned nums into [9, 1], [2], [3, 9], for example.\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse."
            },
            {
                "Input": "** nums = [1,2,3,4,5,6,7], k = 4",
                "Output": "** 20.50000",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Tree Pruning",
        "slug": "binary-tree-pruning",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,null,0,0,1]",
                "Output": "** [1,null,0,null,1]",
                "Explanation": "** \nOnly the red nodes satisfy the property \"every subtree not containing a 1\".\nThe diagram on the right represents the answer."
            },
            {
                "Input": "** root = [1,0,1,0,0,0,1]",
                "Output": "** [1,null,1,null,1]",
                "Explanation": null
            },
            {
                "Input": "** root = [1,1,0,1,1,0,1,0]",
                "Output": "** [1,1,0,1,1,null,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Bus Routes",
        "slug": "bus-routes",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** routes = [[1,2,7],[3,6,7]], source = 1, target = 6",
                "Output": "** 2",
                "Explanation": "** The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6."
            },
            {
                "Input": "** routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12",
                "Output": "** -1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Ambiguous Coordinates",
        "slug": "ambiguous-coordinates",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"(123)\"",
                "Output": "** [\"(1, 2.3)\",\"(1, 23)\",\"(1.2, 3)\",\"(12, 3)\"]",
                "Explanation": null
            },
            {
                "Input": "** s = \"(0123)\"",
                "Output": "** [\"(0, 1.23)\",\"(0, 12.3)\",\"(0, 123)\",\"(0.1, 2.3)\",\"(0.1, 23)\",\"(0.12, 3)\"]",
                "Explanation": "** 0.0, 00, 0001 or 00.01 are not allowed."
            },
            {
                "Input": "** s = \"(00011)\"",
                "Output": "** [\"(0, 0.011)\",\"(0.001, 1)\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Linked List Components",
        "slug": "linked-list-components",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [0,1,2,3], nums = [0,1,3]",
                "Output": "** 2",
                "Explanation": "** 0 and 1 are connected, so [0, 1] and [3] are the two connected components."
            },
            {
                "Input": "** head = [0,1,2,3,4], nums = [0,3,1,4]",
                "Output": "** 2",
                "Explanation": "** 0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components."
            }
        ]
    },
    {
        "Title": "Race Car",
        "slug": "race-car",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** target = 3",
                "Output": "** 2",
                "Explanation": "** \nThe shortest instruction sequence is \"AA\".\nYour position goes from 0 --> 1 --> 3."
            },
            {
                "Input": "** target = 6",
                "Output": "** 5",
                "Explanation": "** \nThe shortest instruction sequence is \"AAARA\".\nYour position goes from 0 --> 1 --> 3 --> 7 --> 7 --> 6."
            }
        ]
    },
    {
        "Title": "Most Common Word",
        "slug": "most-common-word",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\", banned = [\"hit\"]",
                "Output": "** \"ball\"",
                "Explanation": "** \n\"hit\" occurs 3 times, but it is a banned word.\n\"ball\" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. \nNote that words in the paragraph are not case sensitive,\nthat punctuation is ignored (even if adjacent to words, such as \"ball,\"), \nand that \"hit\" isn't the answer even though it occurs more because it is banned."
            },
            {
                "Input": "** paragraph = \"a.\", banned = []",
                "Output": "** \"a\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Short Encoding of Words",
        "slug": "short-encoding-of-words",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** words = [\"time\", \"me\", \"bell\"]",
                "Output": "** 10",
                "Explanation": "** A valid encoding would be s = \"time#bell#\" and indices = [0, 2, 5].\nwords[0] = \"time\", the substring of s starting from indices[0] = 0 to the next '#' is underlined in \"time#bell#\"\nwords[1] = \"me\", the substring of s starting from indices[1] = 2 to the next '#' is underlined in \"time#bell#\"\nwords[2] = \"bell\", the substring of s starting from indices[2] = 5 to the next '#' is underlined in \"time#bell#\""
            },
            {
                "Input": "** words = [\"t\"]",
                "Output": "** 2",
                "Explanation": "** A valid encoding would be s = \"t#\" and indices = [0]."
            }
        ]
    },
    {
        "Title": "Shortest Distance to a Character",
        "slug": "shortest-distance-to-a-character",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"loveleetcode\", c = \"e\"",
                "Output": "** [3,2,1,0,1,0,0,1,2,2,1,0]",
                "Explanation": "** The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).\nThe closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.\nThe closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.\nFor index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.\nThe closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2."
            },
            {
                "Input": "** s = \"aaab\", c = \"b\"",
                "Output": "** [3,2,1,0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Card Flipping Game",
        "slug": "card-flipping-game",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** fronts = [1,2,4,4,7], backs = [1,3,4,1,3]",
                "Output": "** 2",
                "Explanation": "**\nIf we flip the second card, the face up numbers are [1,3,4,4,7] and the face down are [1,2,4,1,3].\n2 is the minimum good integer as it appears facing down but not facing up.\nIt can be shown that 2 is the minimum possible good integer obtainable after flipping some cards."
            },
            {
                "Input": "** fronts = [1], backs = [1]",
                "Output": "** 0",
                "Explanation": "**\nThere are no good integers no matter how we flip the cards, so we return 0."
            }
        ]
    },
    {
        "Title": "Binary Trees With Factors",
        "slug": "binary-trees-with-factors",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [2,4]",
                "Output": "** 3",
                "Explanation": "** We can make these trees: [2], [4], [4, 2, 2]"
            },
            {
                "Input": "** arr = [2,4,5,10]",
                "Output": "** 7",
                "Explanation": "** We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2]."
            }
        ]
    },
    {
        "Title": "Goat Latin",
        "slug": "goat-latin",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** sentence = \"I speak Goat Latin\"",
                "Output": "** \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"",
                "Explanation": null
            },
            {
                "Input": "** sentence = \"The quick brown fox jumped over the lazy dog\"",
                "Output": "** \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Friends Of Appropriate Ages",
        "slug": "friends-of-appropriate-ages",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** ages = [16,16]",
                "Output": "** 2",
                "Explanation": "** 2 people friend request each other."
            },
            {
                "Input": "** ages = [16,17,18]",
                "Output": "** 2",
                "Explanation": "** Friend requests are made 17 -> 16, 18 -> 17."
            },
            {
                "Input": "** ages = [20,30,100,110,120]",
                "Output": "** 3",
                "Explanation": "** Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100."
            }
        ]
    },
    {
        "Title": "Most Profit Assigning Work",
        "slug": "most-profit-assigning-work",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]",
                "Output": "** 100",
                "Explanation": "** Workers are assigned jobs of difficulty [4,4,6,6] and they get a profit of [20,20,30,30] separately."
            },
            {
                "Input": "** difficulty = [85,47,57], profit = [24,66,99], worker = [40,25,25]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Making A Large Island",
        "slug": "making-a-large-island",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [[1,0],[0,1]]",
                "Output": "** 3",
                "Explanation": "** Change one 0 to 1 and connect two 1s, then we get an island with area = 3."
            },
            {
                "Input": "** grid = [[1,1],[1,0]]",
                "Output": "** 4",
                "Explanation": "** Change the 0 to 1 and make the island bigger, only one island with area = 4."
            },
            {
                "Input": "** grid = [[1,1],[1,1]]",
                "Output": "** 4",
                "Explanation": "** Can't change any 0 to 1, only one island with area = 4."
            }
        ]
    },
    {
        "Title": "Count Unique Characters of All Substrings of a Given String",
        "slug": "count-unique-characters-of-all-substrings-of-a-given-string",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"ABC\"",
                "Output": "** 10",
                "Explanation": "** All possible substrings are: \"A\",\"B\",\"C\",\"AB\",\"BC\" and \"ABC\".\nEvery substring is composed with only unique letters.\nSum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10"
            },
            {
                "Input": "** s = \"ABA\"",
                "Output": "** 8",
                "Explanation": "** The same as example 1, except countUniqueChars(\"ABA\") = 1."
            },
            {
                "Input": "** s = \"LEETCODE\"",
                "Output": "** 92",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Consecutive Numbers Sum",
        "slug": "consecutive-numbers-sum",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 5",
                "Output": "** 2",
                "Explanation": "** 5 = 2 + 3"
            },
            {
                "Input": "** n = 9",
                "Output": "** 3",
                "Explanation": "** 9 = 4 + 5 = 2 + 3 + 4"
            },
            {
                "Input": "** n = 15",
                "Output": "** 4",
                "Explanation": "** 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5"
            }
        ]
    },
    {
        "Title": "Positions of Large Groups",
        "slug": "positions-of-large-groups",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"abbxxxxzzy\"",
                "Output": "** [[3,6]]",
                "Explanation": "** \"xxxx\" is the only large group with start index 3 and end index 6."
            },
            {
                "Input": "** s = \"abc\"",
                "Output": "** []",
                "Explanation": "** We have groups \"a\", \"b\", and \"c\", none of which are large groups."
            },
            {
                "Input": "** s = \"abcdddeeeeaabbbcd\"",
                "Output": "** [[3,5],[6,9],[12,14]]",
                "Explanation": "** The large groups are \"ddd\", \"eeee\", and \"bbb\"."
            }
        ]
    },
    {
        "Title": "Masking Personal Information",
        "slug": "masking-personal-information",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"LeetCode@LeetCode.com\"",
                "Output": "** \"l*****e@leetcode.com\"",
                "Explanation": "** s is an email address.\nThe name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks."
            },
            {
                "Input": "** s = \"AB@qq.com\"",
                "Output": "** \"a*****b@qq.com\"",
                "Explanation": "** s is an email address.\nThe name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.\nNote that even though \"ab\" is 2 characters, it still must have 5 asterisks in the middle."
            },
            {
                "Input": "** s = \"1(234)567-890\"",
                "Output": "** \"***-***-7890\"",
                "Explanation": "** s is a phone number.\nThere are 10 digits, so the local number is 10 digits and the country code is 0 digits.\nThus, the resulting masked number is \"***-***-7890\"."
            }
        ]
    },
    {
        "Title": "Flipping an Image",
        "slug": "flipping-an-image",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** image = [[1,1,0],[1,0,1],[0,0,0]]",
                "Output": "** [[1,0,0],[0,1,0],[1,1,1]]",
                "Explanation": "** First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\nThen, invert the image: [[1,0,0],[0,1,0],[1,1,1]]"
            },
            {
                "Input": "** image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]",
                "Output": "** [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]",
                "Explanation": "** First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].\nThen invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]"
            }
        ]
    },
    {
        "Title": "Find And Replace in String",
        "slug": "find-and-replace-in-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"abcd\", indices = [0, 2], sources = [\"a\", \"cd\"], targets = [\"eee\", \"ffff\"]",
                "Output": "** \"eeebffff\"",
                "Explanation": "**\n\"a\" occurs at index 0 in s, so we replace it with \"eee\".\n\"cd\" occurs at index 2 in s, so we replace it with \"ffff\"."
            },
            {
                "Input": "** s = \"abcd\", indices = [0, 2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]",
                "Output": "** \"eeecd\"",
                "Explanation": "**\n\"ab\" occurs at index 0 in s, so we replace it with \"eee\".\n\"ec\" does not occur at index 2 in s, so we do nothing."
            }
        ]
    },
    {
        "Title": "Sum of Distances in Tree",
        "slug": "sum-of-distances-in-tree",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]",
                "Output": "** [8,12,6,10,10,10]",
                "Explanation": "** The tree is shown above.\nWe can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)\nequals 1 + 1 + 2 + 2 + 2 = 8.\nHence, answer[0] = 8, and so on."
            },
            {
                "Input": "** n = 1, edges = []",
                "Output": "** [0]",
                "Explanation": null
            },
            {
                "Input": "** n = 2, edges = [[1,0]]",
                "Output": "** [1,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Image Overlap",
        "slug": "image-overlap",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]",
                "Output": "** 3",
                "Explanation": "** We translate img1 to right by 1 unit and down by 1 unit.\n![](https://assets.leetcode.com/uploads/2020/09/09/overlap_step1.jpg)\nThe number of positions that have a 1 in both images is 3 (shown in red).\n![](https://assets.leetcode.com/uploads/2020/09/09/overlap_step2.jpg)"
            }
        ]
    },
    {
        "Title": "Rectangle Overlap",
        "slug": "rectangle-overlap",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** rec1 = [0,0,2,2], rec2 = [1,1,3,3]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** rec1 = [0,0,1,1], rec2 = [1,0,2,1]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** rec1 = [0,0,1,1], rec2 = [2,2,3,3]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "New 21 Game",
        "slug": "new-21-game",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 10, k = 1, maxPts = 10",
                "Output": "** 1.00000",
                "Explanation": "** Alice gets a single card, then stops."
            },
            {
                "Input": "** n = 6, k = 1, maxPts = 10",
                "Output": "** 0.60000",
                "Explanation": "** Alice gets a single card, then stops.\nIn 6 out of 10 possibilities, she is at or below 6 points."
            },
            {
                "Input": "** n = 21, k = 17, maxPts = 10",
                "Output": "** 0.73278",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Push Dominoes",
        "slug": "push-dominoes",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** dominoes = \".L.R...LR..L..\"",
                "Output": "** \"LL.RR.LLRRLL..\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Similar String Groups",
        "slug": "similar-string-groups",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** strs = [\"tars\",\"rats\",\"arts\",\"star\"]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** strs = [\"omv\",\"ovm\"]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Magic Squares In Grid",
        "slug": "magic-squares-in-grid",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]",
                "Output": "** 1",
                "Explanation": "** \nThe following subgrid is a 3 x 3 magic square:\n![](https://assets.leetcode.com/uploads/2020/09/11/magic_valid.jpg)\nwhile this one is not:\n![](https://assets.leetcode.com/uploads/2020/09/11/magic_invalid.jpg)\nIn total, there is only one magic square inside the given grid."
            }
        ]
    },
    {
        "Title": "Keys and Rooms",
        "slug": "keys-and-rooms",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** rooms = [[1],[2],[3],[]]",
                "Output": "** true",
                "Explanation": "** \nWe visit room 0 and pick up key 1.\nWe then visit room 1 and pick up key 2.\nWe then visit room 2 and pick up key 3.\nWe then visit room 3.\nSince we were able to visit every room, we return true."
            },
            {
                "Input": "** rooms = [[1,3],[3,0,1],[2],[0]]",
                "Output": "** false",
                "Explanation": "** We can not enter room number 2 since the only key that unlocks it is in that room."
            }
        ]
    },
    {
        "Title": "Split Array into Fibonacci Sequence",
        "slug": "split-array-into-fibonacci-sequence",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** num = \"1101111\"",
                "Output": "** [11,0,11,11]",
                "Explanation": "** The output [110, 1, 111] would also be accepted."
            },
            {
                "Input": "** num = \"112358130\"",
                "Output": "** []",
                "Explanation": "** The task is impossible."
            },
            {
                "Input": "** num = \"0123\"",
                "Output": "** []",
                "Explanation": "** Leading zeroes are not allowed, so \"01\", \"2\", \"3\" is not valid."
            }
        ]
    },
    {
        "Title": "Guess the Word",
        "slug": "guess-the-word",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** secret = \"acckzz\", words = [\"acckzz\",\"ccbazz\",\"eiowzz\",\"abcczz\"], allowedGuesses = 10",
                "Output": "** You guessed the secret word correctly.",
                "Explanation": "**\nmaster.guess(\"aaaaaa\") returns -1, because \"aaaaaa\" is not in wordlist.\nmaster.guess(\"acckzz\") returns 6, because \"acckzz\" is secret and has all 6 matches.\nmaster.guess(\"ccbazz\") returns 3, because \"ccbazz\" has 3 matches.\nmaster.guess(\"eiowzz\") returns 2, because \"eiowzz\" has 2 matches.\nmaster.guess(\"abcczz\") returns 4, because \"abcczz\" has 4 matches.\nWe made 5 calls to master.guess, and one of them was the secret, so we pass the test case."
            },
            {
                "Input": "** secret = \"hamada\", words = [\"hamada\",\"khaled\"], allowedGuesses = 10",
                "Output": "** You guessed the secret word correctly.",
                "Explanation": "** Since there are two words, you can guess both."
            }
        ]
    },
    {
        "Title": "Backspace String Compare",
        "slug": "backspace-string-compare",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"ab#c\", t = \"ad#c\"",
                "Output": "** true",
                "Explanation": "** Both s and t become \"ac\"."
            },
            {
                "Input": "** s = \"ab##\", t = \"c#d#\"",
                "Output": "** true",
                "Explanation": "** Both s and t become \"\"."
            },
            {
                "Input": "** s = \"a#c\", t = \"b\"",
                "Output": "** false",
                "Explanation": "** s becomes \"c\" while t becomes \"b\"."
            }
        ]
    },
    {
        "Title": "Longest Mountain in Array",
        "slug": "longest-mountain-in-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [2,1,4,7,3,2,5]",
                "Output": "** 5",
                "Explanation": "** The largest mountain is [1,4,7,3,2] which has length 5."
            },
            {
                "Input": "** arr = [2,2,2]",
                "Output": "** 0",
                "Explanation": "** There is no mountain."
            }
        ]
    },
    {
        "Title": "Hand of Straights",
        "slug": "hand-of-straights",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** hand = [1,2,3,6,2,3,4,7,8], groupSize = 3",
                "Output": "** true",
                "Explanation": "** Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]"
            },
            {
                "Input": "** hand = [1,2,3,4,5], groupSize = 4",
                "Output": "** false",
                "Explanation": "** Alice's hand can not be rearranged into groups of 4."
            }
        ]
    },
    {
        "Title": "Shortest Path Visiting All Nodes",
        "slug": "shortest-path-visiting-all-nodes",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** graph = [[1,2,3],[0],[0],[0]]",
                "Output": "** 4",
                "Explanation": "** One possible path is [1,0,2,0,3]"
            },
            {
                "Input": "** graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]",
                "Output": "** 4",
                "Explanation": "** One possible path is [0,1,4,2,3]"
            }
        ]
    },
    {
        "Title": "Shifting Letters",
        "slug": "shifting-letters",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"abc\", shifts = [3,5,9]",
                "Output": "** \"rpl\"",
                "Explanation": "** We start with \"abc\".\nAfter shifting the first 1 letters of s by 3, we have \"dbc\".\nAfter shifting the first 2 letters of s by 5, we have \"igc\".\nAfter shifting the first 3 letters of s by 9, we have \"rpl\", the answer."
            },
            {
                "Input": "** s = \"aaa\", shifts = [1,2,3]",
                "Output": "** \"gfd\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximize Distance to Closest Person",
        "slug": "maximize-distance-to-closest-person",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** seats = [1,0,0,0,1,0,1]",
                "Output": "** 2",
                "Explanation": "** \nIf Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.\nIf Alex sits in any other open seat, the closest person has distance 1.\nThus, the maximum distance to the closest person is 2."
            }
        ]
    },
    {
        "Title": "Rectangle Area II",
        "slug": "rectangle-area-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]",
                "Output": "** 6",
                "Explanation": "** A total area of 6 is covered by all three rectangles, as illustrated in the picture.\nFrom (1,1) to (2,2), the green and red rectangles overlap.\nFrom (1,0) to (2,3), all three rectangles overlap."
            }
        ]
    },
    {
        "Title": "Loud and Rich",
        "slug": "loud-and-rich",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]",
                "Output": "** [5,5,2,5,4,5,6,7]",
                "Explanation": "** \nanswer[0] = 5.\nPerson 5 has more money than 3, which has more money than 1, which has more money than 0.\nThe only person who is quieter (has lower quiet[x]) is person 7, but it is not clear if they have more money than person 0.\nanswer[7] = 7.\nAmong all people that definitely have equal to or more money than person 7 (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x]) is person 7.\nThe other answers can be filled out with similar reasoning."
            },
            {
                "Input": "** richer = [], quiet = [0]",
                "Output": "** [0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Peak Index in a Mountain Array",
        "slug": "peak-index-in-a-mountain-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [0,1,0]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** arr = [0,2,1,0]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** arr = [0,10,5,2]",
                "Output": "** 1\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `3 <= arr.length <= 105`\n* `0 <= arr[i] <= 106`\n* `arr` is **guaranteed** to be a mountain array.\n\n\nSimilarQuestions: [162, 1095, 1671]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Car Fleet",
        "slug": "car-fleet",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]",
                "Output": "** 3",
                "Explanation": "**\nThe cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12.\nThe car starting at 0 does not catch up to any other car, so it is a fleet by itself.\nThe cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.\nNote that no other cars meet these fleets before the destination, so the answer is 3."
            },
            {
                "Input": "** target = 10, position = [3], speed = [3]",
                "Output": "** 1",
                "Explanation": "** There is only one car, hence there is only one fleet."
            },
            {
                "Input": "** target = 100, position = [0,2,4], speed = [4,2,1]",
                "Output": "** 1",
                "Explanation": "**\nThe cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The fleet moves at speed 2.\nThen, the fleet (speed 2) and the car starting at 4 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target."
            }
        ]
    },
    {
        "Title": "K-Similar Strings",
        "slug": "k-similar-strings",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s1 = \"ab\", s2 = \"ba\"",
                "Output": "** 1",
                "Explanation": "** The two string are 1-similar because we can use one swap to change s1 to s2: \"ab\" --> \"ba\"."
            },
            {
                "Input": "** s1 = \"abc\", s2 = \"bca\"",
                "Output": "** 2",
                "Explanation": "** The two strings are 2-similar because we can use two swaps to change s1 to s2: \"abc\" --> \"bac\" --> \"bca\"."
            }
        ]
    },
    {
        "Title": "Exam Room",
        "slug": "exam-room",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"ExamRoom\", \"seat\", \"seat\", \"seat\", \"seat\", \"leave\", \"seat\"]\n[[10], [], [], [], [], [4], []]",
                "Output": "[null, 0, 9, 4, 2, null, 5]",
                "Explanation": "ExamRoom examRoom = new ExamRoom(10);\nexamRoom.seat(); // return 0, no one is in the room, then the student sits at seat number 0.\nexamRoom.seat(); // return 9, the student sits at the last seat number 9.\nexamRoom.seat(); // return 4, the student sits at the last seat number 4.\nexamRoom.seat(); // return 2, the student sits at the last seat number 2.\nexamRoom.leave(4);\nexamRoom.seat(); // return 5, the student sits at the last seat number 5."
            }
        ]
    },
    {
        "Title": "Score of Parentheses",
        "slug": "score-of-parentheses",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"()\"",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** s = \"(())\"",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** s = \"()()\"",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Cost to Hire K Workers",
        "slug": "minimum-cost-to-hire-k-workers",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** quality = [10,20,5], wage = [70,50,30], k = 2",
                "Output": "** 105.00000",
                "Explanation": "** We pay 70 to 0th worker and 35 to 2nd worker."
            },
            {
                "Input": "** quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3",
                "Output": "** 30.66667",
                "Explanation": "** We pay 4 to 0th worker, 13.33333 to 2nd and 3rd workers separately."
            }
        ]
    },
    {
        "Title": "Mirror Reflection",
        "slug": "mirror-reflection",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** p = 2, q = 1",
                "Output": "** 2",
                "Explanation": "** The ray meets receptor 2 the first time it gets reflected back to the left wall."
            }
        ]
    },
    {
        "Title": "Buddy Strings",
        "slug": "buddy-strings",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"ab\", goal = \"ba\"",
                "Output": "** true",
                "Explanation": "** You can swap s[0] = 'a' and s[1] = 'b' to get \"ba\", which is equal to goal."
            },
            {
                "Input": "** s = \"ab\", goal = \"ab\"",
                "Output": "** false",
                "Explanation": "** The only letters you can swap are s[0] = 'a' and s[1] = 'b', which results in \"ba\" != goal."
            },
            {
                "Input": "** s = \"aa\", goal = \"aa\"",
                "Output": "** true",
                "Explanation": "** You can swap s[0] = 'a' and s[1] = 'a' to get \"aa\", which is equal to goal."
            }
        ]
    },
    {
        "Title": "Lemonade Change",
        "slug": "lemonade-change",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** bills = [5,5,5,10,20]",
                "Output": "** true",
                "Explanation": "** \nFrom the first 3 customers, we collect three $5 bills in order.\nFrom the fourth customer, we collect a $10 bill and give back a $5.\nFrom the fifth customer, we give a $10 bill and a $5 bill.\nSince all customers got correct change, we output true."
            },
            {
                "Input": "** bills = [5,5,10,10,20]",
                "Output": "** false",
                "Explanation": "** \nFrom the first two customers in order, we collect two $5 bills.\nFor the next two customers in order, we collect a $10 bill and give back a $5 bill.\nFor the last customer, we can not give the change of $15 back because we only have two $10 bills.\nSince not every customer received the correct change, the answer is false."
            }
        ]
    },
    {
        "Title": "Score After Flipping Matrix",
        "slug": "score-after-flipping-matrix",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]",
                "Output": "** 39",
                "Explanation": "** 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39"
            }
        ]
    },
    {
        "Title": "Shortest Subarray with Sum at Least K",
        "slug": "shortest-subarray-with-sum-at-least-k",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1], k = 1",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2], k = 4",
                "Output": "** -1",
                "Explanation": null
            },
            {
                "Input": "** nums = [2,-1,2], k = 3",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "All Nodes Distance K in Binary Tree",
        "slug": "all-nodes-distance-k-in-binary-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2",
                "Output": "** [7,4,1]\nExplanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Shortest Path to Get All Keys",
        "slug": "shortest-path-to-get-all-keys",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [\"@.a..\",\"###.#\",\"b.A.B\"]",
                "Output": "** 8",
                "Explanation": "** Note that the goal is to obtain all the keys not to open all the locks."
            },
            {
                "Input": "** grid = [\"@..aA\",\"..B#.\",\"....b\"]",
                "Output": "** 6",
                "Explanation": null
            },
            {
                "Input": "** grid = [\"@Aa\"]",
                "Output": "** -1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Smallest Subtree with all the Deepest Nodes",
        "slug": "smallest-subtree-with-all-the-deepest-nodes",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [3,5,1,6,2,0,8,null,null,7,4]",
                "Output": "** [2,7,4]",
                "Explanation": "** We return the node with value 2, colored in yellow in the diagram.\nThe nodes coloured in blue are the deepest nodes of the tree.\nNotice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it."
            }
        ]
    },
    {
        "Title": "Prime Palindrome",
        "slug": "prime-palindrome",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 6",
                "Output": "** 7",
                "Explanation": null
            },
            {
                "Input": "** n = 8",
                "Output": "** 11",
                "Explanation": null
            },
            {
                "Input": "** n = 13",
                "Output": "** 101",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Transpose Matrix",
        "slug": "transpose-matrix",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** matrix = [[1,2,3],[4,5,6],[7,8,9]]",
                "Output": "** [[1,4,7],[2,5,8],[3,6,9]]",
                "Explanation": null
            },
            {
                "Input": "** matrix = [[1,2,3],[4,5,6]]",
                "Output": "** [[1,4],[2,5],[3,6]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Gap",
        "slug": "binary-gap",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 22",
                "Output": "** 2",
                "Explanation": "** 22 in binary is \"10110\".\nThe first adjacent pair of 1's is \"10110\" with a distance of 2.\nThe second adjacent pair of 1's is \"10110\" with a distance of 1.\nThe answer is the largest of these two distances, which is 2.\nNote that \"10110\" is not a valid pair since there is a 1 separating the two 1's underlined."
            },
            {
                "Input": "** n = 8",
                "Output": "** 0",
                "Explanation": "** 8 in binary is \"1000\".\nThere are not any adjacent pairs of 1's in the binary representation of 8, so we return 0."
            },
            {
                "Input": "** n = 5",
                "Output": "** 2",
                "Explanation": "** 5 in binary is \"101\"."
            }
        ]
    },
    {
        "Title": "Reordered Power of 2",
        "slug": "reordered-power-of-2",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** n = 10",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Advantage Shuffle",
        "slug": "advantage-shuffle",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums1 = [2,7,11,15], nums2 = [1,10,4,11]",
                "Output": "** [2,11,7,15]",
                "Explanation": null
            },
            {
                "Input": "** nums1 = [12,24,8,32], nums2 = [13,25,32,11]",
                "Output": "** [24,32,8,12]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Number of Refueling Stops",
        "slug": "minimum-number-of-refueling-stops",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** target = 1, startFuel = 1, stations = []",
                "Output": "** 0",
                "Explanation": "** We can reach the target without refueling."
            },
            {
                "Input": "** target = 100, startFuel = 1, stations = [[10,100]]",
                "Output": "** -1",
                "Explanation": "** We can not reach the target (or even the first gas station)."
            },
            {
                "Input": "** target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]",
                "Output": "** 2",
                "Explanation": "** We start with 10 liters of fuel.\nWe drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.\nThen, we drive from position 10 to position 60 (expending 50 liters of fuel),\nand refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.\nWe made 2 refueling stops along the way, so we return 2."
            }
        ]
    },
    {
        "Title": "Leaf-Similar Trees",
        "slug": "leaf-similar-trees",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** root1 = [1,2,3], root2 = [1,3,2]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Length of Longest Fibonacci Subsequence",
        "slug": "length-of-longest-fibonacci-subsequence",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [1,2,3,4,5,6,7,8]",
                "Output": "** 5",
                "Explanation": "** The longest subsequence that is fibonacci-like: [1,2,3,5,8]."
            },
            {
                "Input": "** arr = [1,3,7,11,12,14,18]",
                "Output": "** 3",
                "Explanation": "The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18]."
            }
        ]
    },
    {
        "Title": "Walking Robot Simulation",
        "slug": "walking-robot-simulation",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** commands = [4,-1,3], obstacles = []",
                "Output": "** 25",
                "Explanation": "** The robot starts at (0, 0):\n1. Move north 4 units to (0, 4).\n2. Turn right.\n3. Move east 3 units to (3, 4).\nThe furthest point the robot ever gets from the origin is (3, 4), which squared is 32 + 42 = 25 units away."
            },
            {
                "Input": "** commands = [4,-1,4,-2,4], obstacles = [[2,4]]",
                "Output": "** 65",
                "Explanation": "** The robot starts at (0, 0):\n1. Move north 4 units to (0, 4).\n2. Turn right.\n3. Move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4).\n4. Turn left.\n5. Move north 4 units to (1, 8).\nThe furthest point the robot ever gets from the origin is (1, 8), which squared is 12 + 82 = 65 units away."
            },
            {
                "Input": "** commands = [6,-1,-1,6], obstacles = []",
                "Output": "** 36",
                "Explanation": "** The robot starts at (0, 0):\n1. Move north 6 units to (0, 6).\n2. Turn right.\n3. Turn right.\n4. Move south 6 units to (0, 0).\nThe furthest point the robot ever gets from the origin is (0, 6), which squared is 62 = 36 units away."
            }
        ]
    },
    {
        "Title": "Koko Eating Bananas",
        "slug": "koko-eating-bananas",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** piles = [3,6,7,11], h = 8",
                "Output": "** 4",
                "Explanation": null
            },
            {
                "Input": "** piles = [30,11,23,4,20], h = 5",
                "Output": "** 30",
                "Explanation": null
            },
            {
                "Input": "** piles = [30,11,23,4,20], h = 6",
                "Output": "** 23",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Middle of the Linked List",
        "slug": "middle-of-the-linked-list",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** head = [1,2,3,4,5]",
                "Output": "** [3,4,5]",
                "Explanation": "** The middle node of the list is node 3."
            },
            {
                "Input": "** head = [1,2,3,4,5,6]",
                "Output": "** [4,5,6]",
                "Explanation": "** Since the list has two middle nodes with values 3 and 4, we return the second one."
            }
        ]
    },
    {
        "Title": "Stone Game",
        "slug": "stone-game",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** piles = [5,3,4,5]",
                "Output": "** true",
                "Explanation": "** \nAlice starts first, and can only take the first 5 or the last 5.\nSay she takes the first 5, so that the row becomes [3, 4, 5].\nIf Bob takes 3, then the board is [4, 5], and Alice takes 5 to win with 10 points.\nIf Bob takes the last 5, then the board is [3, 4], and Alice takes 4 to win with 9 points.\nThis demonstrated that taking the first 5 was a winning move for Alice, so we return true."
            },
            {
                "Input": "** piles = [3,7,2,3]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Nth Magical Number",
        "slug": "nth-magical-number",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 1, a = 2, b = 3",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** n = 4, a = 2, b = 3",
                "Output": "** 6",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Profitable Schemes",
        "slug": "profitable-schemes",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 5, minProfit = 3, group = [2,2], profit = [2,3]",
                "Output": "** 2",
                "Explanation": "** To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.\nIn total, there are 2 schemes."
            },
            {
                "Input": "** n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]",
                "Output": "** 7",
                "Explanation": "** To make a profit of at least 5, the group could commit any crimes, as long as they commit one.\nThere are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2)."
            }
        ]
    },
    {
        "Title": "Decoded String at Index",
        "slug": "decoded-string-at-index",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"leet2code3\", k = 10",
                "Output": "** \"o\"",
                "Explanation": "** The decoded string is \"leetleetcodeleetleetcodeleetleetcode\".\nThe 10th letter in the string is \"o\"."
            },
            {
                "Input": "** s = \"ha22\", k = 5",
                "Output": "** \"h\"",
                "Explanation": "** The decoded string is \"hahahaha\".\nThe 5th letter is \"h\"."
            },
            {
                "Input": "** s = \"a2345678999999999999999\", k = 1",
                "Output": "** \"a\"",
                "Explanation": "** The decoded string is \"a\" repeated 8301530446056247680 times.\nThe 1st letter is \"a\"."
            }
        ]
    },
    {
        "Title": "Boats to Save People",
        "slug": "boats-to-save-people",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** people = [1,2], limit = 3",
                "Output": "** 1",
                "Explanation": "** 1 boat (1, 2)"
            },
            {
                "Input": "** people = [3,2,2,1], limit = 3",
                "Output": "** 3",
                "Explanation": "** 3 boats (1, 2), (2) and (3)"
            },
            {
                "Input": "** people = [3,5,3,4], limit = 5",
                "Output": "** 4",
                "Explanation": "** 4 boats (3), (3), (4), (5)"
            }
        ]
    },
    {
        "Title": "Reachable Nodes In Subdivided Graph",
        "slug": "reachable-nodes-in-subdivided-graph",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3",
                "Output": "** 13",
                "Explanation": "** The edge subdivisions are shown in the image above.\nThe nodes that are reachable are highlighted in yellow."
            }
        ]
    },
    {
        "Title": "Projection Area of 3D Shapes",
        "slug": "projection-area-of-3d-shapes",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** grid = [[1,2],[3,4]]",
                "Output": "** 17",
                "Explanation": "** Here are the three projections (\"shadows\") of the shape made with each axis-aligned plane."
            }
        ]
    },
    {
        "Title": "Uncommon Words from Two Sentences",
        "slug": "uncommon-words-from-two-sentences",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s1 = \"this apple is sweet\", s2 = \"this apple is sour\"",
                "Output": "** [\"sweet\",\"sour\"]",
                "Explanation": null
            },
            {
                "Input": "** s1 = \"apple apple\", s2 = \"banana\"",
                "Output": "** [\"banana\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Spiral Matrix III",
        "slug": "spiral-matrix-iii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** rows = 1, cols = 4, rStart = 0, cStart = 0",
                "Output": "** [[0,0],[0,1],[0,2],[0,3]]",
                "Explanation": null
            },
            {
                "Input": "** rows = 5, cols = 6, rStart = 1, cStart = 4",
                "Output": "** [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Possible Bipartition",
        "slug": "possible-bipartition",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 4, dislikes = [[1,2],[1,3],[2,4]]",
                "Output": "** true",
                "Explanation": "** The first group has [1,4], and the second group has [2,3]."
            },
            {
                "Input": "** n = 3, dislikes = [[1,2],[1,3],[2,3]]",
                "Output": "** false",
                "Explanation": "** We need at least 3 groups to divide them. We cannot put them in two groups."
            }
        ]
    },
    {
        "Title": "Super Egg Drop",
        "slug": "super-egg-drop",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** k = 1, n = 2",
                "Output": "** 2",
                "Explanation": "** \nDrop the egg from floor 1. If it breaks, we know that f = 0.\nOtherwise, drop the egg from floor 2. If it breaks, we know that f = 1.\nIf it does not break, then we know f = 2.\nHence, we need at minimum 2 moves to determine with certainty what the value of f is."
            },
            {
                "Input": "** k = 2, n = 6",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** k = 3, n = 14",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Fair Candy Swap",
        "slug": "fair-candy-swap",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** aliceSizes = [1,1], bobSizes = [2,2]",
                "Output": "** [1,2]",
                "Explanation": null
            },
            {
                "Input": "** aliceSizes = [1,2], bobSizes = [2,3]",
                "Output": "** [1,2]",
                "Explanation": null
            },
            {
                "Input": "** aliceSizes = [2], bobSizes = [1,3]",
                "Output": "** [2,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Construct Binary Tree from Preorder and Postorder Traversal",
        "slug": "construct-binary-tree-from-preorder-and-postorder-traversal",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]",
                "Output": "** [1,2,3,4,5,6,7]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find and Replace Pattern",
        "slug": "find-and-replace-pattern",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** words = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\"",
                "Output": "** [\"mee\",\"aqq\"]",
                "Explanation": "** \"mee\" matches the pattern because there is a permutation {a -> m, b -> e, ...}. \n\"ccc\" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter."
            },
            {
                "Input": "** words = [\"a\",\"b\",\"c\"], pattern = \"a\"",
                "Output": "** [\"a\",\"b\",\"c\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sum of Subsequence Widths",
        "slug": "sum-of-subsequence-widths",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [2,1,3]",
                "Output": "** 6\nExplanation: The subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].\nThe corresponding widths are 0, 0, 0, 1, 1, 2, 2.\nThe sum of these widths is 6.",
                "Explanation": null
            },
            {
                "Input": "** nums = [2]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Surface Area of 3D Shapes",
        "slug": "surface-area-of-3d-shapes",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** grid = [[1,2],[3,4]]",
                "Output": "** 34",
                "Explanation": null
            },
            {
                "Input": "** grid = [[1,1,1],[1,0,1],[1,1,1]]",
                "Output": "** 32",
                "Explanation": null
            },
            {
                "Input": "** grid = [[2,2,2],[2,1,2],[2,2,2]]",
                "Output": "** 46",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Groups of Special-Equivalent Strings",
        "slug": "groups-of-special-equivalent-strings",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** words = [\"abcd\",\"cdab\",\"cbad\",\"xyzz\",\"zzxy\",\"zzyx\"]",
                "Output": "** 3",
                "Explanation": "** \nOne group is [\"abcd\", \"cdab\", \"cbad\"], since they are all pairwise special equivalent, and none of the other strings is all pairwise special equivalent to these.\nThe other two groups are [\"xyzz\", \"zzxy\"] and [\"zzyx\"].\nNote that in particular, \"zzxy\" is not special equivalent to \"zzyx\"."
            },
            {
                "Input": "** words = [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "All Possible Full Binary Trees",
        "slug": "all-possible-full-binary-trees",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 7",
                "Output": "** [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Frequency Stack",
        "slug": "maximum-frequency-stack",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"FreqStack\", \"push\", \"push\", \"push\", \"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\", \"pop\"]\n[[], [5], [7], [5], [7], [4], [5], [], [], [], []]",
                "Output": "[null, null, null, null, null, null, null, 5, 7, 5, 4]",
                "Explanation": "FreqStack freqStack = new FreqStack();\nfreqStack.push(5); // The stack is [5]\nfreqStack.push(7); // The stack is [5,7]\nfreqStack.push(5); // The stack is [5,7,5]\nfreqStack.push(7); // The stack is [5,7,5,7]\nfreqStack.push(4); // The stack is [5,7,5,7,4]\nfreqStack.push(5); // The stack is [5,7,5,7,4,5]\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].\nfreqStack.pop();   // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4].\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,4].\nfreqStack.pop();   // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7]."
            }
        ]
    },
    {
        "Title": "Monotonic Array",
        "slug": "monotonic-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,2,3]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** nums = [6,5,4,4]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,3,2]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Increasing Order Search Tree",
        "slug": "increasing-order-search-tree",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [5,3,6,2,4,null,8,1,null,null,null,7,9]",
                "Output": "** [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]",
                "Explanation": null
            },
            {
                "Input": "** root = [5,1,7]",
                "Output": "** [1,null,5,null,7]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Bitwise ORs of Subarrays",
        "slug": "bitwise-ors-of-subarrays",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [0]",
                "Output": "** 1",
                "Explanation": "** There is only one possible result: 0."
            },
            {
                "Input": "** arr = [1,1,2]",
                "Output": "** 3",
                "Explanation": "** The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].\nThese yield the results 1, 1, 2, 1, 3, 3.\nThere are 3 unique values, so the answer is 3."
            },
            {
                "Input": "** arr = [1,2,4]",
                "Output": "** 6",
                "Explanation": "** The possible results are 1, 2, 3, 4, 6, and 7."
            }
        ]
    },
    {
        "Title": "Orderly Queue",
        "slug": "orderly-queue",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"cba\", k = 1",
                "Output": "** \"acb\"",
                "Explanation": "** \nIn the first move, we move the 1st character 'c' to the end, obtaining the string \"bac\".\nIn the second move, we move the 1st character 'b' to the end, obtaining the final result \"acb\"."
            },
            {
                "Input": "** s = \"baaca\", k = 3",
                "Output": "** \"aaabc\"",
                "Explanation": "** \nIn the first move, we move the 1st character 'b' to the end, obtaining the string \"aacab\".\nIn the second move, we move the 3rd character 'c' to the end, obtaining the final result \"aaabc\"."
            }
        ]
    },
    {
        "Title": "RLE Iterator",
        "slug": "rle-iterator",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"RLEIterator\", \"next\", \"next\", \"next\", \"next\"]\n[[[3, 8, 0, 9, 2, 5]], [2], [1], [1], [2]]",
                "Output": "[null, 8, 8, 5, -1]",
                "Explanation": "RLEIterator rLEIterator = new RLEIterator([3, 8, 0, 9, 2, 5]); // This maps to the sequence [8,8,8,5,5].\nrLEIterator.next(2); // exhausts 2 terms of the sequence, returning 8. The remaining sequence is now [8, 5, 5].\nrLEIterator.next(1); // exhausts 1 term of the sequence, returning 8. The remaining sequence is now [5, 5].\nrLEIterator.next(1); // exhausts 1 term of the sequence, returning 5. The remaining sequence is now [5].\nrLEIterator.next(2); // exhausts 2 terms, returning -1. This is because the first term exhausted was 5,\nbut the second term did not exist. Since the last term exhausted does not exist, we return -1."
            }
        ]
    },
    {
        "Title": "Online Stock Span",
        "slug": "online-stock-span",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"StockSpanner\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\"]\n[[], [100], [80], [60], [70], [60], [75], [85]]",
                "Output": "[null, 1, 1, 1, 2, 1, 4, 6]",
                "Explanation": "StockSpanner stockSpanner = new StockSpanner();\nstockSpanner.next(100); // return 1\nstockSpanner.next(80);  // return 1\nstockSpanner.next(60);  // return 1\nstockSpanner.next(70);  // return 2\nstockSpanner.next(60);  // return 1\nstockSpanner.next(75);  // return 4, because the last 4 prices (including today's price of 75) were less than or equal to today's price.\nstockSpanner.next(85);  // return 6"
            }
        ]
    },
    {
        "Title": "Numbers At Most N Given Digit Set",
        "slug": "numbers-at-most-n-given-digit-set",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** digits = [\"1\",\"3\",\"5\",\"7\"], n = 100",
                "Output": "** 20",
                "Explanation": "** \nThe 20 numbers that can be written are:\n1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77."
            },
            {
                "Input": "** digits = [\"1\",\"4\",\"9\"], n = 1000000000",
                "Output": "** 29523",
                "Explanation": "** \nWe can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,\n81 four digit numbers, 243 five digit numbers, 729 six digit numbers,\n2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.\nIn total, this is 29523 integers that can be written using the digits array."
            },
            {
                "Input": "** digits = [\"7\"], n = 8",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Valid Permutations for DI Sequence",
        "slug": "valid-permutations-for-di-sequence",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"DID\"",
                "Output": "** 5",
                "Explanation": "** The 5 valid permutations of (0, 1, 2, 3) are:\n(1, 0, 3, 2)\n(2, 0, 3, 1)\n(2, 1, 3, 0)\n(3, 0, 2, 1)\n(3, 1, 2, 0)"
            },
            {
                "Input": "** s = \"D\"",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Fruit Into Baskets",
        "slug": "fruit-into-baskets",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** fruits = [1,2,1]",
                "Output": "** 3",
                "Explanation": "** We can pick from all 3 trees."
            },
            {
                "Input": "** fruits = [0,1,2,2]",
                "Output": "** 3",
                "Explanation": "** We can pick from trees [1,2,2].\nIf we had started at the first tree, we would only pick from trees [0,1]."
            },
            {
                "Input": "** fruits = [1,2,3,2,2]",
                "Output": "** 4",
                "Explanation": "** We can pick from trees [2,3,2,2].\nIf we had started at the first tree, we would only pick from trees [1,2]."
            }
        ]
    },
    {
        "Title": "Sort Array By Parity",
        "slug": "sort-array-by-parity",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [3,1,2,4]",
                "Output": "** [2,4,3,1]",
                "Explanation": "** The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted."
            },
            {
                "Input": "** nums = [0]",
                "Output": "** [0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Super Palindromes",
        "slug": "super-palindromes",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** left = \"4\", right = \"1000\"",
                "Output": "** 4",
                "Explanation": "4, 9, 121, and 484 are superpalindromes.\nNote that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome."
            },
            {
                "Input": "** left = \"1\", right = \"2\"",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sum of Subarray Minimums",
        "slug": "sum-of-subarray-minimums",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [3,1,2,4]",
                "Output": "** 17",
                "Explanation": "** \nSubarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. \nMinimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.\nSum is 17."
            },
            {
                "Input": "** arr = [11,81,94,43,3]",
                "Output": "** 444",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Smallest Range I",
        "slug": "smallest-range-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1], k = 0",
                "Output": "** 0",
                "Explanation": "** The score is max(nums) - min(nums) = 1 - 1 = 0."
            },
            {
                "Input": "** nums = [0,10], k = 2",
                "Output": "** 6",
                "Explanation": "** Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6."
            },
            {
                "Input": "** nums = [1,3,6], k = 3",
                "Output": "** 0",
                "Explanation": "** Change nums to be [4, 4, 4]. The score is max(nums) - min(nums) = 4 - 4 = 0."
            }
        ]
    },
    {
        "Title": "Snakes and Ladders",
        "slug": "snakes-and-ladders",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]",
                "Output": "** 4",
                "Explanation": "** \nIn the beginning, you start at square 1 (at row 5, column 0).\nYou decide to move to square 2 and must take the ladder to square 15.\nYou then decide to move to square 17 and must take the snake to square 13.\nYou then decide to move to square 14 and must take the ladder to square 35.\nYou then decide to move to square 36, ending the game.\nThis is the lowest possible number of moves to reach the last square, so return 4."
            }
        ]
    },
    {
        "Title": "Smallest Range II",
        "slug": "smallest-range-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1], k = 0",
                "Output": "** 0",
                "Explanation": "** The score is max(nums) - min(nums) = 1 - 1 = 0."
            },
            {
                "Input": "** nums = [0,10], k = 2",
                "Output": "** 6",
                "Explanation": "** Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6."
            },
            {
                "Input": "** nums = [1,3,6], k = 3",
                "Output": "** 3",
                "Explanation": "** Change nums to be [4, 6, 3]. The score is max(nums) - min(nums) = 6 - 3 = 3."
            }
        ]
    },
    {
        "Title": "Online Election",
        "slug": "online-election",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"TopVotedCandidate\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\"]\n[[[0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]], [3], [12], [25], [15], [24], [8]]",
                "Output": "[null, 0, 1, 1, 0, 0, 1]",
                "Explanation": "TopVotedCandidate topVotedCandidate = new TopVotedCandidate([0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]);\ntopVotedCandidate.q(3); // return 0, At time 3, the votes are [0], and 0 is leading.\ntopVotedCandidate.q(12); // return 1, At time 12, the votes are [0,1,1], and 1 is leading.\ntopVotedCandidate.q(25); // return 1, At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)\ntopVotedCandidate.q(15); // return 0\ntopVotedCandidate.q(24); // return 0\ntopVotedCandidate.q(8); // return 1"
            }
        ]
    },
    {
        "Title": "Sort an Array",
        "slug": "sort-an-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [5,2,3,1]",
                "Output": "** [1,2,3,5]",
                "Explanation": "** After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5)."
            },
            {
                "Input": "** nums = [5,1,1,2,0,0]",
                "Output": "** [0,0,1,1,2,5]",
                "Explanation": "** Note that the values of nums are not necessairly unique."
            }
        ]
    },
    {
        "Title": "Cat and Mouse",
        "slug": "cat-and-mouse",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** graph = [[1,3],[0],[3],[0,2]]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "X of a Kind in a Deck of Cards",
        "slug": "x-of-a-kind-in-a-deck-of-cards",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** deck = [1,2,3,4,4,3,2,1]",
                "Output": "** true",
                "Explanation": "Possible partition [1,1],[2,2],[3,3],[4,4]."
            },
            {
                "Input": "** deck = [1,1,1,2,2,2,3,3]",
                "Output": "** false",
                "Explanation": "No possible partition."
            }
        ]
    },
    {
        "Title": "Partition Array into Disjoint Intervals",
        "slug": "partition-array-into-disjoint-intervals",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [5,0,3,8,6]",
                "Output": "** 3",
                "Explanation": "** left = [5,0,3], right = [8,6]"
            },
            {
                "Input": "** nums = [1,1,1,0,6,12]",
                "Output": "** 4",
                "Explanation": "** left = [1,1,1,0], right = [6,12]"
            }
        ]
    },
    {
        "Title": "Word Subsets",
        "slug": "word-subsets",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"e\",\"o\"]",
                "Output": "** [\"facebook\",\"google\",\"leetcode\"]",
                "Explanation": null
            },
            {
                "Input": "** words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"l\",\"e\"]",
                "Output": "** [\"apple\",\"google\",\"leetcode\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reverse Only Letters",
        "slug": "reverse-only-letters",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"ab-cd\"",
                "Output": "** \"dc-ba\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"a-bC-dEf-ghIj\"",
                "Output": "** \"j-Ih-gfE-dCba\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"Test1ng-Leet=code-Q!\"",
                "Output": "** \"Qedo1ct-eeLg=ntse-T!\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Sum Circular Subarray",
        "slug": "maximum-sum-circular-subarray",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,-2,3,-2]",
                "Output": "** 3",
                "Explanation": "** Subarray [3] has maximum sum 3."
            },
            {
                "Input": "** nums = [5,-3,5]",
                "Output": "** 10",
                "Explanation": "** Subarray [5,5] has maximum sum 5 + 5 = 10."
            },
            {
                "Input": "** nums = [-3,-2,-3]",
                "Output": "** -2",
                "Explanation": "** Subarray [-2] has maximum sum -2."
            }
        ]
    },
    {
        "Title": "Complete Binary Tree Inserter",
        "slug": "complete-binary-tree-inserter",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"CBTInserter\", \"insert\", \"insert\", \"get_root\"]\n[[[1, 2]], [3], [4], []]",
                "Output": "[null, 1, 2, [1, 2, 3, 4]]",
                "Explanation": "CBTInserter cBTInserter = new CBTInserter([1, 2]);\ncBTInserter.insert(3);  // return 1\ncBTInserter.insert(4);  // return 2\ncBTInserter.get_root(); // return [1, 2, 3, 4]"
            }
        ]
    },
    {
        "Title": "Number of Music Playlists",
        "slug": "number-of-music-playlists",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 3, goal = 3, k = 1",
                "Output": "** 6",
                "Explanation": "** There are 6 possible playlists: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], and [3, 2, 1]."
            },
            {
                "Input": "** n = 2, goal = 3, k = 0",
                "Output": "** 6",
                "Explanation": "** There are 6 possible playlists: [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], and [1, 2, 2]."
            },
            {
                "Input": "** n = 2, goal = 3, k = 1",
                "Output": "** 2",
                "Explanation": "** There are 2 possible playlists: [1, 2, 1] and [2, 1, 2]."
            }
        ]
    },
    {
        "Title": "Minimum Add to Make Parentheses Valid",
        "slug": "minimum-add-to-make-parentheses-valid",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"())\"",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** s = \"(((\"",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sort Array By Parity II",
        "slug": "sort-array-by-parity-ii",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [4,2,5,7]",
                "Output": "** [4,5,2,7]",
                "Explanation": "** [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted."
            },
            {
                "Input": "** nums = [2,3]",
                "Output": "** [2,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "3Sum With Multiplicity",
        "slug": "3sum-with-multiplicity",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [1,1,2,2,3,3,4,4,5,5], target = 8",
                "Output": "** 20",
                "Explanation": "** \nEnumerating by the values (arr[i], arr[j], arr[k]):\n(1, 2, 5) occurs 8 times;\n(1, 3, 4) occurs 8 times;\n(2, 2, 4) occurs 2 times;\n(2, 3, 3) occurs 2 times."
            },
            {
                "Input": "** arr = [1,1,2,2,2,2], target = 5",
                "Output": "** 12",
                "Explanation": "** \narr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:\nWe choose one 1 from [1,1] in 2 ways,\nand two 2s from [2,2,2,2] in 6 ways."
            },
            {
                "Input": "** arr = [2,1,3], target = 6",
                "Output": "** 1",
                "Explanation": "** (1, 2, 3) occured one time in the array so we return 1."
            }
        ]
    },
    {
        "Title": "Minimize Malware Spread",
        "slug": "minimize-malware-spread",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Long Pressed Name",
        "slug": "long-pressed-name",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** name = \"alex\", typed = \"aaleex\"",
                "Output": "** true",
                "Explanation": "** 'a' and 'e' in 'alex' were long pressed."
            },
            {
                "Input": "** name = \"saeed\", typed = \"ssaaedd\"",
                "Output": "** false",
                "Explanation": "** 'e' must have been pressed twice, but it was not in the typed output."
            }
        ]
    },
    {
        "Title": "Flip String to Monotone Increasing",
        "slug": "flip-string-to-monotone-increasing",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"00110\"",
                "Output": "** 1",
                "Explanation": "** We flip the last digit to get 00111."
            },
            {
                "Input": "** s = \"010110\"",
                "Output": "** 2",
                "Explanation": "** We flip to get 011111, or alternatively 000111."
            },
            {
                "Input": "** s = \"00011000\"",
                "Output": "** 2",
                "Explanation": "** We flip to get 00000000."
            }
        ]
    },
    {
        "Title": "Three Equal Parts",
        "slug": "three-equal-parts",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** arr = [1,0,1,0,1]",
                "Output": "** [0,3]",
                "Explanation": null
            },
            {
                "Input": "** arr = [1,1,0,1,1]",
                "Output": "** [-1,-1]",
                "Explanation": null
            },
            {
                "Input": "** arr = [1,1,0,0,1]",
                "Output": "** [0,2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimize Malware Spread II",
        "slug": "minimize-malware-spread-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Unique Email Addresses",
        "slug": "unique-email-addresses",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** emails = [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]",
                "Output": "** 2",
                "Explanation": "** \"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails."
            },
            {
                "Input": "** emails = [\"a@leetcode.com\",\"b@leetcode.com\",\"c@leetcode.com\"]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Subarrays With Sum",
        "slug": "binary-subarrays-with-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,0,1,0,1], goal = 2",
                "Output": "** 4",
                "Explanation": "** The 4 subarrays are bolded and underlined below:\r\n[**1,0,1**,0,1]\r\n[**1,0,1,0**,1]\r\n[1,**0,1,0,1**]\r\n[1,0,**1,0,1**]"
            },
            {
                "Input": "** nums = [0,0,0,0,0], goal = 0",
                "Output": "** 15",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Falling Path Sum",
        "slug": "minimum-falling-path-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** matrix = [[2,1,3],[6,5,4],[7,8,9]]",
                "Output": "** 13",
                "Explanation": "** There are two falling paths with a minimum sum as shown."
            },
            {
                "Input": "** matrix = [[-19,57],[-40,-5]]",
                "Output": "** -59",
                "Explanation": "** The falling path with a minimum sum is shown."
            }
        ]
    },
    {
        "Title": "Beautiful Array",
        "slug": "beautiful-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** [2,1,4,3]",
                "Explanation": null
            },
            {
                "Input": "** n = 5",
                "Output": "** [3,1,2,5,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Recent Calls",
        "slug": "number-of-recent-calls",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "[\"RecentCounter\", \"ping\", \"ping\", \"ping\", \"ping\"]\n[[], [1], [100], [3001], [3002]]",
                "Output": "[null, 1, 2, 3, 3]",
                "Explanation": "RecentCounter recentCounter = new RecentCounter();\nrecentCounter.ping(1);     // requests = [1], range is [-2999,1], return 1\nrecentCounter.ping(100);   // requests = [1, 100], range is [-2900,100], return 2\nrecentCounter.ping(3001);  // requests = [1, 100, 3001], range is [1,3001], return 3\nrecentCounter.ping(3002);  // requests = [1, 100, 3001, 3002], range is [2,3002], return 3"
            }
        ]
    },
    {
        "Title": "Shortest Bridge",
        "slug": "shortest-bridge",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[0,1],[1,0]]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** grid = [[0,1,0],[0,0,0],[0,0,1]]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Knight Dialer",
        "slug": "knight-dialer",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** 10",
                "Explanation": "** We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient."
            },
            {
                "Input": "** n = 2",
                "Output": "** 20",
                "Explanation": "** All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]"
            },
            {
                "Input": "** n = 3131",
                "Output": "** 136006598",
                "Explanation": "** Please take care of the mod."
            }
        ]
    },
    {
        "Title": "Stamping The Sequence",
        "slug": "stamping-the-sequence",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** stamp = \"abc\", target = \"ababc\"",
                "Output": "** [0,2]",
                "Explanation": "** Initially s = \"?????\".\n- Place stamp at index 0 to get \"abc??\".\n- Place stamp at index 2 to get \"ababc\".\n[1,0,2] would also be accepted as an answer, as well as some other answers."
            },
            {
                "Input": "** stamp = \"abca\", target = \"aabcaca\"",
                "Output": "** [3,0,1]",
                "Explanation": "** Initially s = \"???????\".\n- Place stamp at index 3 to get \"???abca\".\n- Place stamp at index 0 to get \"abcabca\".\n- Place stamp at index 1 to get \"aabcaca\"."
            }
        ]
    },
    {
        "Title": "Reorder Data in Log Files",
        "slug": "reorder-data-in-log-files",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** logs = [\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]",
                "Output": "** [\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"]",
                "Explanation": "**\nThe letter-log contents are all different, so their ordering is \"art can\", \"art zero\", \"own kit dig\".\nThe digit-logs have a relative order of \"dig1 8 1 5 1\", \"dig2 3 6\"."
            },
            {
                "Input": "** logs = [\"a1 9 2 3 1\",\"g1 act car\",\"zo4 4 7\",\"ab1 off key dog\",\"a8 act zoo\"]",
                "Output": "** [\"g1 act car\",\"a8 act zoo\",\"ab1 off key dog\",\"a1 9 2 3 1\",\"zo4 4 7\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Range Sum of BST",
        "slug": "range-sum-of-bst",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [10,5,15,3,7,null,18], low = 7, high = 15",
                "Output": "** 32",
                "Explanation": "** Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32."
            },
            {
                "Input": "** root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10",
                "Output": "** 23",
                "Explanation": "** Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23."
            }
        ]
    },
    {
        "Title": "Minimum Area Rectangle",
        "slug": "minimum-area-rectangle",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** points = [[1,1],[1,3],[3,1],[3,3],[2,2]]",
                "Output": "** 4",
                "Explanation": null
            },
            {
                "Input": "** points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Distinct Subsequences II",
        "slug": "distinct-subsequences-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"abc\"",
                "Output": "** 7",
                "Explanation": "** The 7 distinct subsequences are \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", and \"abc\"."
            },
            {
                "Input": "** s = \"aba\"",
                "Output": "** 6",
                "Explanation": "** The 6 distinct subsequences are \"a\", \"b\", \"ab\", \"aa\", \"ba\", and \"aba\"."
            },
            {
                "Input": "** s = \"aaa\"",
                "Output": "** 3",
                "Explanation": "** The 3 distinct subsequences are \"a\", \"aa\" and \"aaa\"."
            }
        ]
    },
    {
        "Title": "Valid Mountain Array",
        "slug": "valid-mountain-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [2,1]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** arr = [3,5,5]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** arr = [0,3,2,1]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "DI String Match",
        "slug": "di-string-match",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"IDID\"",
                "Output": "** [0,4,1,3,2]",
                "Explanation": null
            },
            {
                "Input": "** s = \"III\"",
                "Output": "** [0,1,2,3]",
                "Explanation": null
            },
            {
                "Input": "** s = \"DDI\"",
                "Output": "** [3,2,0,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find the Shortest Superstring",
        "slug": "find-the-shortest-superstring",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** words = [\"alex\",\"loves\",\"leetcode\"]",
                "Output": "** \"alexlovesleetcode\"",
                "Explanation": "** All permutations of \"alex\",\"loves\",\"leetcode\" would also be accepted."
            },
            {
                "Input": "** words = [\"catg\",\"ctaagt\",\"gcta\",\"ttca\",\"atgcatc\"]",
                "Output": "** \"gctaagttcatgcatc\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Delete Columns to Make Sorted",
        "slug": "delete-columns-to-make-sorted",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** strs = [\"cba\",\"daf\",\"ghi\"]",
                "Output": "** 1",
                "Explanation": "** The grid looks as follows:\n  cba\n  daf\n  ghi\nColumns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column."
            },
            {
                "Input": "** strs = [\"a\",\"b\"]",
                "Output": "** 0",
                "Explanation": "** The grid looks as follows:\n  a\n  b\nColumn 0 is the only column and is sorted, so you will not delete any columns."
            },
            {
                "Input": "** strs = [\"zyx\",\"wvu\",\"tsr\"]",
                "Output": "** 3",
                "Explanation": "** The grid looks as follows:\n  zyx\n  wvu\n  tsr\nAll 3 columns are not sorted, so you will delete all 3."
            }
        ]
    },
    {
        "Title": "Minimum Increment to Make Array Unique",
        "slug": "minimum-increment-to-make-array-unique",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,2]",
                "Output": "** 1",
                "Explanation": "** After 1 move, the array could be [1, 2, 3]."
            },
            {
                "Input": "** nums = [3,2,1,2,1,7]",
                "Output": "** 6",
                "Explanation": "** After 6 moves, the array could be [3, 4, 1, 2, 5, 7].\nIt can be shown with 5 or less moves that it is impossible for the array to have all unique values."
            }
        ]
    },
    {
        "Title": "Validate Stack Sequences",
        "slug": "validate-stack-sequences",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** pushed = [1,2,3,4,5], popped = [4,5,3,2,1]",
                "Output": "** true",
                "Explanation": "** We might do the following sequence:\npush(1), push(2), push(3), push(4),\npop() -> 4,\npush(5),\npop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1"
            },
            {
                "Input": "** pushed = [1,2,3,4,5], popped = [4,3,5,1,2]",
                "Output": "** false",
                "Explanation": "** 1 cannot be popped before 2."
            }
        ]
    },
    {
        "Title": "Most Stones Removed with Same Row or Column",
        "slug": "most-stones-removed-with-same-row-or-column",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]",
                "Output": "** 5",
                "Explanation": "** One way to remove 5 stones is as follows:\n1. Remove stone [2,2] because it shares the same row as [2,1].\n2. Remove stone [2,1] because it shares the same column as [0,1].\n3. Remove stone [1,2] because it shares the same row as [1,0].\n4. Remove stone [1,0] because it shares the same column as [0,0].\n5. Remove stone [0,1] because it shares the same row as [0,0].\nStone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane."
            },
            {
                "Input": "** stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]",
                "Output": "** 3",
                "Explanation": "** One way to make 3 moves is as follows:\n1. Remove stone [2,2] because it shares the same row as [2,0].\n2. Remove stone [2,0] because it shares the same column as [0,0].\n3. Remove stone [0,2] because it shares the same row as [0,0].\nStones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane."
            },
            {
                "Input": "** stones = [[0,0]]",
                "Output": "** 0",
                "Explanation": "** [0,0] is the only stone on the plane, so you cannot remove it."
            }
        ]
    },
    {
        "Title": "Bag of Tokens",
        "slug": "bag-of-tokens",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** tokens = [100], power = 50",
                "Output": "** 0",
                "Explanation": "** Since your score is `0` initially, you cannot play the token face-down. You also cannot play it face-up since your power (`50`) is less than `tokens[0]`\u00a0(`100`)."
            },
            {
                "Input": "** tokens = [200,100], power = 150",
                "Output": "** 1",
                "Explanation": "** Play token*1* (`100`) face-up, reducing your power to\u00a0`50` and increasing your score to\u00a0`1`.\n\n\nThere is no need to play token*0*, since you cannot play it face-up to add to your score. The maximum score achievable is `1`."
            },
            {
                "Input": "** tokens = [100,200,300,400], power = 200",
                "Output": "** 2",
                "Explanation": "** Play the tokens in this order to get a score of `2`:\n\n\n1. Play token*0* (`100`) face-up, reducing power to `100` and increasing score to `1`.\n2. Play token*3* (`400`) face-down, increasing power to `500` and reducing score to `0`.\n3. Play token*1* (`200`) face-up, reducing power to `300` and increasing score to `1`.\n4. Play token*2* (`300`) face-up, reducing power to `0` and increasing score to `2`.\n\n\nThe maximum score achievable is `2`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= tokens.length <= 1000`\n* `0 <= tokens[i], power < 104`"
            }
        ]
    },
    {
        "Title": "Largest Time for Given Digits",
        "slug": "largest-time-for-given-digits",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [1,2,3,4]",
                "Output": "** \"23:41\"",
                "Explanation": "** The valid 24-hour times are \"12:34\", \"12:43\", \"13:24\", \"13:42\", \"14:23\", \"14:32\", \"21:34\", \"21:43\", \"23:14\", and \"23:41\". Of these times, \"23:41\" is the latest."
            },
            {
                "Input": "** arr = [5,5,5,5]",
                "Output": "** \"\"",
                "Explanation": "** There are no valid 24-hour times as \"55:55\" is not valid."
            }
        ]
    },
    {
        "Title": "Reveal Cards In Increasing Order",
        "slug": "reveal-cards-in-increasing-order",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** deck = [17,13,11,2,3,5,7]",
                "Output": "** [2,13,3,11,5,17,7]",
                "Explanation": "** \nWe get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it.\nAfter reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.\nWe reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].\nWe reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].\nWe reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].\nWe reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].\nWe reveal 11, and move 17 to the bottom.  The deck is now [13,17].\nWe reveal 13, and move 17 to the bottom.  The deck is now [17].\nWe reveal 17.\nSince all the cards revealed are in increasing order, the answer is correct."
            },
            {
                "Input": "** deck = [1,1000]",
                "Output": "** [1,1000]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Flip Equivalent Binary Trees",
        "slug": "flip-equivalent-binary-trees",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]",
                "Output": "** true",
                "Explanation": "** We flipped at nodes with values 1, 3, and 5."
            }
        ]
    },
    {
        "Title": "Largest Component Size by Common Factor",
        "slug": "largest-component-size-by-common-factor",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [4,6,15,35]",
                "Output": "** 4",
                "Explanation": null
            },
            {
                "Input": "** nums = [20,50,9,63]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** nums = [2,3,6,7,4,12,21,39]",
                "Output": "** 8",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Verifying an Alien Dictionary",
        "slug": "verifying-an-alien-dictionary",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** words = [\"hello\",\"leetcode\"], order = \"hlabcdefgijkmnopqrstuvwxyz\"",
                "Output": "** true",
                "Explanation": "** As 'h' comes before 'l' in this language, then the sequence is sorted."
            },
            {
                "Input": "** words = [\"word\",\"world\",\"row\"], order = \"worldabcefghijkmnpqstuvxyz\"",
                "Output": "** false",
                "Explanation": "** As 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted."
            },
            {
                "Input": "** words = [\"apple\",\"app\"], order = \"abcdefghijklmnopqrstuvwxyz\"",
                "Output": "** false",
                "Explanation": "** The first three characters \"app\" match, and the second string is shorter (in size.) According to lexicographical rules \"apple\" > \"app\", because 'l' > '\u2205', where '\u2205' is defined as the blank character which is less than any other character ([More info](https://en.wikipedia.org/wiki/Lexicographical_order))."
            }
        ]
    },
    {
        "Title": "Array of Doubled Pairs",
        "slug": "array-of-doubled-pairs",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [3,1,3,6]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** arr = [2,1,2,6]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** arr = [4,-2,2,-4]",
                "Output": "** true",
                "Explanation": "** We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4]."
            }
        ]
    },
    {
        "Title": "Delete Columns to Make Sorted II",
        "slug": "delete-columns-to-make-sorted-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** strs = [\"ca\",\"bb\",\"ac\"]",
                "Output": "** 1",
                "Explanation": "** \nAfter deleting the first column, strs = [\"a\", \"b\", \"c\"].\nNow strs is in lexicographic order (ie. strs[0] <= strs[1] <= strs[2]).\nWe require at least 1 deletion since initially strs was not in lexicographic order, so the answer is 1."
            },
            {
                "Input": "** strs = [\"xc\",\"yb\",\"za\"]",
                "Output": "** 0",
                "Explanation": "** \nstrs is already in lexicographic order, so we do not need to delete anything.\nNote that the rows of strs are not necessarily in lexicographic order:\ni.e., it is NOT necessarily true that (strs[0][0] <= strs[0][1] <= ...)"
            },
            {
                "Input": "** strs = [\"zyx\",\"wvu\",\"tsr\"]",
                "Output": "** 3",
                "Explanation": "** We have to delete every column."
            }
        ]
    },
    {
        "Title": "Tallest Billboard",
        "slug": "tallest-billboard",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** rods = [1,2,3,6]",
                "Output": "** 6",
                "Explanation": "** We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6."
            },
            {
                "Input": "** rods = [1,2,3,4,5,6]",
                "Output": "** 10",
                "Explanation": "** We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10."
            },
            {
                "Input": "** rods = [1,2]",
                "Output": "** 0",
                "Explanation": "** The billboard cannot be supported, so we return 0."
            }
        ]
    },
    {
        "Title": "Prison Cells After N Days",
        "slug": "prison-cells-after-n-days",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** cells = [0,1,0,1,1,0,0,1], n = 7",
                "Output": "** [0,0,1,1,0,0,0,0]",
                "Explanation": "** The following table summarizes the state of the prison on each day:\nDay 0: [0, 1, 0, 1, 1, 0, 0, 1]\nDay 1: [0, 1, 1, 0, 0, 0, 0, 0]\nDay 2: [0, 0, 0, 0, 1, 1, 1, 0]\nDay 3: [0, 1, 1, 0, 0, 1, 0, 0]\nDay 4: [0, 0, 0, 0, 0, 1, 0, 0]\nDay 5: [0, 1, 1, 1, 0, 1, 0, 0]\nDay 6: [0, 0, 1, 0, 1, 1, 0, 0]\nDay 7: [0, 0, 1, 1, 0, 0, 0, 0]"
            },
            {
                "Input": "** cells = [1,0,0,1,0,0,1,0], n = 1000000000",
                "Output": "** [0,0,1,1,1,1,1,0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Check Completeness of a Binary Tree",
        "slug": "check-completeness-of-a-binary-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,2,3,4,5,6]",
                "Output": "** true",
                "Explanation": "** Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible."
            },
            {
                "Input": "** root = [1,2,3,4,5,null,7]",
                "Output": "** false",
                "Explanation": "** The node with value 7 isn't as far left as possible."
            }
        ]
    },
    {
        "Title": "Regions Cut By Slashes",
        "slug": "regions-cut-by-slashes",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [\" /\",\"/ \"]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** grid = [\" /\",\"  \"]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** grid = [\"/\\\\\",\"\\\\/\"]",
                "Output": "** 5",
                "Explanation": "** Recall that because \\ characters are escaped, \"\\\\/\" refers to \\/, and \"/\\\\\" refers to /\\."
            }
        ]
    },
    {
        "Title": "Delete Columns to Make Sorted III",
        "slug": "delete-columns-to-make-sorted-iii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** strs = [\"babca\",\"bbazb\"]",
                "Output": "** 3",
                "Explanation": "** After deleting columns 0, 1, and 4, the final array is strs = [\"bc\", \"az\"].\nBoth these rows are individually in lexicographic order (ie. strs[0][0] <= strs[0][1] and strs[1][0] <= strs[1][1]).\nNote that strs[0] > strs[1] - the array strs is not necessarily in lexicographic order."
            },
            {
                "Input": "** strs = [\"edcba\"]",
                "Output": "** 4",
                "Explanation": "** If we delete less than 4 columns, the only row will not be lexicographically sorted."
            },
            {
                "Input": "** strs = [\"ghi\",\"def\",\"abc\"]",
                "Output": "** 0",
                "Explanation": "** All rows are already lexicographically sorted."
            }
        ]
    },
    {
        "Title": "N-Repeated Element in Size 2N Array",
        "slug": "n-repeated-element-in-size-2n-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,3,3]",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** nums = [2,1,2,5,3,2]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** nums = [5,1,5,2,5,3,5,4]",
                "Output": "** 5",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Width Ramp",
        "slug": "maximum-width-ramp",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [6,0,8,2,1,5]",
                "Output": "** 4",
                "Explanation": "** The maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5."
            },
            {
                "Input": "** nums = [9,8,1,0,1,9,4,0,4,1]",
                "Output": "** 7",
                "Explanation": "** The maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1 and nums[9] = 1."
            }
        ]
    },
    {
        "Title": "Minimum Area Rectangle II",
        "slug": "minimum-area-rectangle-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** points = [[1,2],[2,1],[1,0],[0,1]]",
                "Output": "** 2.00000",
                "Explanation": "** The minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2."
            },
            {
                "Input": "** points = [[0,1],[2,1],[1,1],[1,0],[2,0]]",
                "Output": "** 1.00000",
                "Explanation": "** The minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1."
            },
            {
                "Input": "** points = [[0,3],[1,2],[3,1],[1,3],[2,1]]",
                "Output": "** 0",
                "Explanation": "** There is no possible rectangle to form from these points."
            }
        ]
    },
    {
        "Title": "Least Operators to Express Number",
        "slug": "least-operators-to-express-number",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** x = 3, target = 19",
                "Output": "** 5",
                "Explanation": "** 3 * 3 + 3 * 3 + 3 / 3.\nThe expression contains 5 operations."
            },
            {
                "Input": "** x = 5, target = 501",
                "Output": "** 8",
                "Explanation": "** 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.\nThe expression contains 8 operations."
            },
            {
                "Input": "** x = 100, target = 100000000",
                "Output": "** 3",
                "Explanation": "** 100 * 100 * 100 * 100.\nThe expression contains 3 operations."
            }
        ]
    },
    {
        "Title": "Univalued Binary Tree",
        "slug": "univalued-binary-tree",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [1,1,1,1,1,null,1]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** root = [2,2,2,5,2]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Vowel Spellchecker",
        "slug": "vowel-spellchecker",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** wordlist = [\"KiTe\",\"kite\",\"hare\",\"Hare\"], queries = [\"kite\",\"Kite\",\"KiTe\",\"Hare\",\"HARE\",\"Hear\",\"hear\",\"keti\",\"keet\",\"keto\"]",
                "Output": "** [\"kite\",\"KiTe\",\"KiTe\",\"Hare\",\"hare\",\"\",\"\",\"KiTe\",\"\",\"KiTe\"]",
                "Explanation": null
            },
            {
                "Input": "** wordlist = [\"yellow\"], queries = [\"YellOw\"]",
                "Output": "** [\"yellow\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Numbers With Same Consecutive Differences",
        "slug": "numbers-with-same-consecutive-differences",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3, k = 7",
                "Output": "** [181,292,707,818,929]",
                "Explanation": "** Note that 070 is not a valid number, because it has leading zeroes."
            },
            {
                "Input": "** n = 2, k = 1",
                "Output": "** [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Tree Cameras",
        "slug": "binary-tree-cameras",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** root = [0,0,null,0,0]",
                "Output": "** 1",
                "Explanation": "** One camera is enough to monitor all nodes if placed as shown."
            },
            {
                "Input": "** root = [0,0,null,0,null,0,null,null,0]",
                "Output": "** 2",
                "Explanation": "** At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement."
            }
        ]
    },
    {
        "Title": "Pancake Sorting",
        "slug": "pancake-sorting",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [3,2,4,1]",
                "Output": "** [4,2,4,3]",
                "Explanation": "** \nWe perform 4 pancake flips, with k values 4, 2, 4, and 3.\nStarting state: arr = [3, 2, 4, 1]\nAfter 1st flip (k = 4): arr = [1, 4, 2, 3]\nAfter 2nd flip (k = 2): arr = [4, 1, 2, 3]\nAfter 3rd flip (k = 4): arr = [3, 2, 1, 4]\nAfter 4th flip (k = 3): arr = [1, 2, 3, 4], which is sorted."
            },
            {
                "Input": "** arr = [1,2,3]",
                "Output": "** []",
                "Explanation": "** The input is already sorted, so there is no need to flip anything.\nNote that other answers, such as [3, 3], would also be accepted."
            }
        ]
    },
    {
        "Title": "Powerful Integers",
        "slug": "powerful-integers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** x = 2, y = 3, bound = 10",
                "Output": "** [2,3,4,5,7,9,10]",
                "Explanation": "**\n2 = 20 + 30\n3 = 21 + 30\n4 = 20 + 31\n5 = 21 + 31\n7 = 22 + 31\n9 = 23 + 30\n10 = 20 + 32"
            },
            {
                "Input": "** x = 3, y = 5, bound = 15",
                "Output": "** [2,4,6,8,10,14]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Flip Binary Tree To Match Preorder Traversal",
        "slug": "flip-binary-tree-to-match-preorder-traversal",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,2], voyage = [2,1]",
                "Output": "** [-1]",
                "Explanation": "** It is impossible to flip the nodes such that the pre-order traversal matches voyage."
            },
            {
                "Input": "** root = [1,2,3], voyage = [1,3,2]",
                "Output": "** [1]",
                "Explanation": "** Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage."
            },
            {
                "Input": "** root = [1,2,3], voyage = [1,2,3]",
                "Output": "** []",
                "Explanation": "** The tree's pre-order traversal already matches voyage, so no nodes need to be flipped."
            }
        ]
    },
    {
        "Title": "Equal Rational Numbers",
        "slug": "equal-rational-numbers",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"0.(52)\", t = \"0.5(25)\"",
                "Output": "** true",
                "Explanation": "** Because \"0.(52)\" represents 0.52525252..., and \"0.5(25)\" represents 0.52525252525..... , the strings represent the same number."
            },
            {
                "Input": "** s = \"0.1666(6)\", t = \"0.166(66)\"",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"0.9(9)\", t = \"1.\"",
                "Output": "** true",
                "Explanation": "** \"0.9(9)\" represents 0.999999999... repeated forever, which equals 1.  [[See this link for an explanation.](https://en.wikipedia.org/wiki/0.999...)]\n\"1.\" represents the number 1, which is formed correctly: (IntegerPart) = \"1\" and (NonRepeatingPart) = \"\"."
            }
        ]
    },
    {
        "Title": "K Closest Points to Origin",
        "slug": "k-closest-points-to-origin",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** points = [[1,3],[-2,2]], k = 1",
                "Output": "** [[-2,2]]",
                "Explanation": "**\nThe distance between (1, 3) and the origin is sqrt(10).\nThe distance between (-2, 2) and the origin is sqrt(8).\nSince sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.\nWe only want the closest k = 1 points from the origin, so the answer is just [[-2,2]]."
            }
        ]
    },
    {
        "Title": "Subarray Sums Divisible by K",
        "slug": "subarray-sums-divisible-by-k",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [4,5,0,-2,-3,1], k = 5",
                "Output": "** 7",
                "Explanation": "** There are 7 subarrays with a sum divisible by k = 5:\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]"
            },
            {
                "Input": "** nums = [5], k = 9",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Odd Even Jump",
        "slug": "odd-even-jump",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** arr = [10,13,12,14,15]",
                "Output": "** 2",
                "Explanation": "** \nFrom starting index i = 0, we can make our 1st jump to i = 2 (since arr[2] is the smallest among arr[1], arr[2], arr[3], arr[4] that is greater or equal to arr[0]), then we cannot jump any more.\nFrom starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more.\nFrom starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end.\nFrom starting index i = 4, we have reached the end already.\nIn total, there are 2 different starting indices i = 3 and i = 4, where we can reach the end with some number of\njumps."
            },
            {
                "Input": "** arr = [2,3,1,1,4]",
                "Output": "** 3",
                "Explanation": "** \nFrom starting index i = 0, we make jumps to i = 1, i = 2, i = 3:\nDuring our 1st jump (odd-numbered), we first jump to i = 1 because arr[1] is the smallest value in [arr[1], arr[2], arr[3], arr[4]] that is greater than or equal to arr[0].\nDuring our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less than or equal to arr[1]. arr[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3\nDuring our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because arr[3] is the smallest value in [arr[3], arr[4]] that is greater than or equal to arr[2].\nWe can't jump from i = 3 to i = 4, so the starting index i = 0 is not good.\nIn a similar manner, we can deduce that:\nFrom starting index i = 1, we jump to i = 4, so we reach the end.\nFrom starting index i = 2, we jump to i = 3, and then we can't jump anymore.\nFrom starting index i = 3, we jump to i = 4, so we reach the end.\nFrom starting index i = 4, we are already at the end.\nIn total, there are 3 different starting indices i = 1, i = 3, and i = 4, where we can reach the end with some\nnumber of jumps."
            },
            {
                "Input": "** arr = [5,1,3,4,2]",
                "Output": "** 3",
                "Explanation": "** We can reach the end from starting indices 1, 2, and 4."
            }
        ]
    },
    {
        "Title": "Largest Perimeter Triangle",
        "slug": "largest-perimeter-triangle",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [2,1,2]",
                "Output": "** 5",
                "Explanation": "** You can form a triangle with three side lengths: 1, 2, and 2."
            },
            {
                "Input": "** nums = [1,2,1,10]",
                "Output": "** 0",
                "Explanation": "** \nYou cannot use the side lengths 1, 1, and 2 to form a triangle.\nYou cannot use the side lengths 1, 1, and 10 to form a triangle.\nYou cannot use the side lengths 1, 2, and 10 to form a triangle.\nAs we cannot use any three side lengths to form a triangle of non-zero area, we return 0."
            }
        ]
    },
    {
        "Title": "Squares of a Sorted Array",
        "slug": "squares-of-a-sorted-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [-4,-1,0,3,10]",
                "Output": "** [0,1,9,16,100]",
                "Explanation": "** After squaring, the array becomes [16,1,0,9,100].\nAfter sorting, it becomes [0,1,9,16,100]."
            },
            {
                "Input": "** nums = [-7,-3,2,3,11]",
                "Output": "** [4,9,9,49,121]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Turbulent Subarray",
        "slug": "longest-turbulent-subarray",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [9,4,2,10,7,8,8,1,9]",
                "Output": "** 5",
                "Explanation": "** arr[1] > arr[2] < arr[3] > arr[4] < arr[5]"
            },
            {
                "Input": "** arr = [4,8,12,16]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** arr = [100]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Distribute Coins in Binary Tree",
        "slug": "distribute-coins-in-binary-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [3,0,0]",
                "Output": "** 2",
                "Explanation": "** From the root of the tree, we move one coin to its left child, and one coin to its right child."
            },
            {
                "Input": "** root = [0,3,0]",
                "Output": "** 3",
                "Explanation": "** From the left child of the root, we move two coins to the root [taking two moves]. Then, we move one coin from the root of the tree to the right child."
            }
        ]
    },
    {
        "Title": "Unique Paths III",
        "slug": "unique-paths-iii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]",
                "Output": "** 2",
                "Explanation": "** We have the following two paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)"
            },
            {
                "Input": "** grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]",
                "Output": "** 4",
                "Explanation": "** We have the following four paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)"
            },
            {
                "Input": "** grid = [[0,1],[2,0]]",
                "Output": "** 0",
                "Explanation": "** There is no path that walks over every empty square exactly once.\nNote that the starting and ending square can be anywhere in the grid."
            }
        ]
    },
    {
        "Title": "Time Based Key-Value Store",
        "slug": "time-based-key-value-store",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"TimeMap\", \"set\", \"get\", \"get\", \"set\", \"get\", \"get\"]\n[[], [\"foo\", \"bar\", 1], [\"foo\", 1], [\"foo\", 3], [\"foo\", \"bar2\", 4], [\"foo\", 4], [\"foo\", 5]]",
                "Output": "[null, null, \"bar\", \"bar\", null, \"bar2\", \"bar2\"]",
                "Explanation": "TimeMap timeMap = new TimeMap();\ntimeMap.set(\"foo\", \"bar\", 1);  // store the key \"foo\" and value \"bar\" along with timestamp = 1.\ntimeMap.get(\"foo\", 1);         // return \"bar\"\ntimeMap.get(\"foo\", 3);         // return \"bar\", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is \"bar\".\ntimeMap.set(\"foo\", \"bar2\", 4); // store the key \"foo\" and value \"bar2\" along with timestamp = 4.\ntimeMap.get(\"foo\", 4);         // return \"bar2\"\ntimeMap.get(\"foo\", 5);         // return \"bar2\""
            }
        ]
    },
    {
        "Title": "Triples with Bitwise AND Equal To Zero",
        "slug": "triples-with-bitwise-and-equal-to-zero",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [2,1,3]",
                "Output": "** 12",
                "Explanation": "** We could choose the following i, j, k triples:\n(i=0, j=0, k=1) : 2 & 2 & 1\n(i=0, j=1, k=0) : 2 & 1 & 2\n(i=0, j=1, k=1) : 2 & 1 & 1\n(i=0, j=1, k=2) : 2 & 1 & 3\n(i=0, j=2, k=1) : 2 & 3 & 1\n(i=1, j=0, k=0) : 1 & 2 & 2\n(i=1, j=0, k=1) : 1 & 2 & 1\n(i=1, j=0, k=2) : 1 & 2 & 3\n(i=1, j=1, k=0) : 1 & 1 & 2\n(i=1, j=2, k=0) : 1 & 3 & 2\n(i=2, j=0, k=1) : 3 & 2 & 1\n(i=2, j=1, k=0) : 3 & 1 & 2"
            },
            {
                "Input": "** nums = [0,0,0]",
                "Output": "** 27",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Cost For Tickets",
        "slug": "minimum-cost-for-tickets",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** days = [1,4,6,7,8,20], costs = [2,7,15]",
                "Output": "** 11",
                "Explanation": "** For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.\nOn day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.\nOn day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.\nIn total, you spent $11 and covered all the days of your travel."
            },
            {
                "Input": "** days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]",
                "Output": "** 17",
                "Explanation": "** For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.\nOn day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.\nIn total, you spent $17 and covered all the days of your travel."
            }
        ]
    },
    {
        "Title": "String Without AAA or BBB",
        "slug": "string-without-aaa-or-bbb",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** a = 1, b = 2",
                "Output": "** \"abb\"",
                "Explanation": "** \"abb\", \"bab\" and \"bba\" are all correct answers."
            },
            {
                "Input": "** a = 4, b = 1",
                "Output": "** \"aabaa\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sum of Even Numbers After Queries",
        "slug": "sum-of-even-numbers-after-queries",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]",
                "Output": "** [8,6,2,4]",
                "Explanation": "** At the beginning, the array is [1,2,3,4].\nAfter adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.\nAfter adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.\nAfter adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.\nAfter adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4."
            },
            {
                "Input": "** nums = [1], queries = [[4,0]]",
                "Output": "** [0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Interval List Intersections",
        "slug": "interval-list-intersections",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]",
                "Output": "** [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Vertical Order Traversal of a Binary Tree",
        "slug": "vertical-order-traversal-of-a-binary-tree",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** root = [3,9,20,null,null,15,7]",
                "Output": "** [[9],[3,15],[20],[7]]",
                "Explanation": "**\nColumn -1: Only node 9 is in this column.\nColumn 0: Nodes 3 and 15 are in this column in that order from top to bottom.\nColumn 1: Only node 20 is in this column.\nColumn 2: Only node 7 is in this column."
            },
            {
                "Input": "** root = [1,2,3,4,5,6,7]",
                "Output": "** [[4],[2],[1,5,6],[3],[7]]",
                "Explanation": "**\nColumn -2: Only node 4 is in this column.\nColumn -1: Only node 2 is in this column.\nColumn 0: Nodes 1, 5, and 6 are in this column.\n          1 is at the top, so it comes first.\n          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.\nColumn 1: Only node 3 is in this column.\nColumn 2: Only node 7 is in this column."
            },
            {
                "Input": "** root = [1,2,3,4,6,5,7]",
                "Output": "** [[4],[2],[1,5,6],[3],[7]]",
                "Explanation": "**\nThis case is the exact same as example 2, but with nodes 5 and 6 swapped.\nNote that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values."
            }
        ]
    },
    {
        "Title": "Smallest String Starting From Leaf",
        "slug": "smallest-string-starting-from-leaf",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [0,1,2,3,4,3,4]",
                "Output": "** \"dba\"",
                "Explanation": null
            },
            {
                "Input": "** root = [25,1,3,1,3,0,2]",
                "Output": "** \"adz\"",
                "Explanation": null
            },
            {
                "Input": "** root = [2,2,1,null,1,0,null,0]",
                "Output": "** \"abc\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Add to Array-Form of Integer",
        "slug": "add-to-array-form-of-integer",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num = [1,2,0,0], k = 34",
                "Output": "** [1,2,3,4]",
                "Explanation": "** 1200 + 34 = 1234"
            },
            {
                "Input": "** num = [2,7,4], k = 181",
                "Output": "** [4,5,5]",
                "Explanation": "** 274 + 181 = 455"
            },
            {
                "Input": "** num = [2,1,5], k = 806",
                "Output": "** [1,0,2,1]",
                "Explanation": "** 215 + 806 = 1021"
            }
        ]
    },
    {
        "Title": "Satisfiability of Equality Equations",
        "slug": "satisfiability-of-equality-equations",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** equations = [\"a==b\",\"b!=a\"]",
                "Output": "** false",
                "Explanation": "** If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.\nThere is no way to assign the variables to satisfy both equations."
            },
            {
                "Input": "** equations = [\"b==a\",\"a==b\"]",
                "Output": "** true",
                "Explanation": "** We could assign a = 1 and b = 1 to satisfy both equations."
            }
        ]
    },
    {
        "Title": "Broken Calculator",
        "slug": "broken-calculator",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** startValue = 2, target = 3",
                "Output": "** 2",
                "Explanation": "** Use double operation and then decrement operation {2 -> 4 -> 3}."
            },
            {
                "Input": "** startValue = 5, target = 8",
                "Output": "** 2",
                "Explanation": "** Use decrement and then double {5 -> 4 -> 8}."
            },
            {
                "Input": "** startValue = 3, target = 10",
                "Output": "** 3",
                "Explanation": "** Use double, decrement and double {3 -> 6 -> 5 -> 10}."
            }
        ]
    },
    {
        "Title": "Subarrays with K Different Integers",
        "slug": "subarrays-with-k-different-integers",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,1,2,3], k = 2",
                "Output": "** 7",
                "Explanation": "** Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]"
            },
            {
                "Input": "** nums = [1,2,1,3,4], k = 3",
                "Output": "** 3",
                "Explanation": "** Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4]."
            }
        ]
    },
    {
        "Title": "Cousins in Binary Tree",
        "slug": "cousins-in-binary-tree",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [1,2,3,4], x = 4, y = 3",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** root = [1,2,3,null,4,null,5], x = 5, y = 4",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** root = [1,2,3,null,4], x = 2, y = 3",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Rotting Oranges",
        "slug": "rotting-oranges",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[2,1,1],[1,1,0],[0,1,1]]",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Number of K Consecutive Bit Flips",
        "slug": "minimum-number-of-k-consecutive-bit-flips",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [0,1,0], k = 1",
                "Output": "** 2",
                "Explanation": "** Flip nums[0], then flip nums[2]."
            },
            {
                "Input": "** nums = [1,1,0], k = 2",
                "Output": "** -1",
                "Explanation": "** No matter how we flip subarrays of size 2, we cannot make the array become [1,1,1]."
            },
            {
                "Input": "** nums = [0,0,0,1,0,1,1,0], k = 3",
                "Output": "** 3",
                "Explanation": "** \nFlip nums[0],nums[1],nums[2]: nums becomes [1,1,1,1,0,1,1,0]\nFlip nums[4],nums[5],nums[6]: nums becomes [1,1,1,1,1,0,0,0]\nFlip nums[5],nums[6],nums[7]: nums becomes [1,1,1,1,1,1,1,1]"
            }
        ]
    },
    {
        "Title": "Number of Squareful Arrays",
        "slug": "number-of-squareful-arrays",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,17,8]",
                "Output": "** 2",
                "Explanation": "** [1,8,17] and [17,8,1] are the valid permutations."
            },
            {
                "Input": "** nums = [2,2,2]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find the Town Judge",
        "slug": "find-the-town-judge",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 2, trust = [[1,2]]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** n = 3, trust = [[1,3],[2,3]]",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** n = 3, trust = [[1,3],[2,3],[3,1]]",
                "Output": "** -1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Binary Tree II",
        "slug": "maximum-binary-tree-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [4,1,3,null,null,2], val = 5",
                "Output": "** [5,4,null,1,3,null,null,2]",
                "Explanation": "** a = [1,4,2,3], b = [1,4,2,3,5]"
            },
            {
                "Input": "** root = [5,2,4,null,1], val = 3",
                "Output": "** [5,2,4,null,1,null,3]",
                "Explanation": "** a = [2,1,5,4], b = [2,1,5,4,3]"
            },
            {
                "Input": "** root = [5,2,3,null,1], val = 4",
                "Output": "** [5,2,4,null,1,3]",
                "Explanation": "** a = [2,1,5,3], b = [2,1,5,3,4]"
            }
        ]
    },
    {
        "Title": "Available Captures for Rook",
        "slug": "available-captures-for-rook",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"R\",\".\",\".\",\".\",\"p\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]",
                "Output": "** 3",
                "Explanation": "** In this example, the rook is attacking all the pawns."
            },
            {
                "Input": "** board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"B\",\"R\",\"B\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]",
                "Output": "** 0",
                "Explanation": "** The bishops are blocking the rook from attacking any of the pawns."
            },
            {
                "Input": "** board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\"p\",\"p\",\".\",\"R\",\".\",\"p\",\"B\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]",
                "Output": "** 3",
                "Explanation": "** The rook is attacking the pawns at positions b5, d6, and f5."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Merge Stones",
        "slug": "minimum-cost-to-merge-stones",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** stones = [3,2,4,1], k = 2",
                "Output": "** 20",
                "Explanation": "** We start with [3, 2, 4, 1].\nWe merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].\nWe merge [4, 1] for a cost of 5, and we are left with [5, 5].\nWe merge [5, 5] for a cost of 10, and we are left with [10].\nThe total cost was 20, and this is the minimum possible."
            },
            {
                "Input": "** stones = [3,2,4,1], k = 3",
                "Output": "** -1",
                "Explanation": "** After any merge operation, there are 2 piles left, and we can't merge anymore.  So the task is impossible."
            },
            {
                "Input": "** stones = [3,5,1,2,6], k = 3",
                "Output": "** 25",
                "Explanation": "** We start with [3, 5, 1, 2, 6].\nWe merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6].\nWe merge [3, 8, 6] for a cost of 17, and we are left with [17].\nThe total cost was 25, and this is the minimum possible."
            }
        ]
    },
    {
        "Title": "Grid Illumination",
        "slug": "grid-illumination",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]",
                "Output": "** [1,0]",
                "Explanation": "** We have the initial grid with all lamps turned off. In the above picture we see the grid after turning on the lamp at grid[0][0] then turning on the lamp at grid[4][4].\nThe 0th\u00a0query asks if the lamp at grid[1][1] is illuminated or not (the blue square). It is illuminated, so set ans[0] = 1. Then, we turn off all lamps in the red square.\n![](https://assets.leetcode.com/uploads/2020/08/19/illu_step1.jpg)\nThe 1st\u00a0query asks if the lamp at grid[1][0] is illuminated or not (the blue square). It is not illuminated, so set ans[1] = 0. Then, we turn off all lamps in the red rectangle.\n![](https://assets.leetcode.com/uploads/2020/08/19/illu_step2.jpg)"
            }
        ]
    },
    {
        "Title": "Find Common Characters",
        "slug": "find-common-characters",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** words = [\"bella\",\"label\",\"roller\"]",
                "Output": "** [\"e\",\"l\",\"l\"]",
                "Explanation": null
            },
            {
                "Input": "** words = [\"cool\",\"lock\",\"cook\"]",
                "Output": "** [\"c\",\"o\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Check If Word Is Valid After Substitutions",
        "slug": "check-if-word-is-valid-after-substitutions",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"aabcbc\"",
                "Output": "** true",
                "Explanation": "**\n\"\" -> \"abc\" -> \"aabcbc\"\nThus, \"aabcbc\" is valid."
            },
            {
                "Input": "** s = \"abcabcababcc\"",
                "Output": "** true",
                "Explanation": "**\n\"\" -> \"abc\" -> \"abcabc\" -> \"abcabcabc\" -> \"abcabcababcc\"\nThus, \"abcabcababcc\" is valid."
            },
            {
                "Input": "** s = \"abccba\"",
                "Output": "** false",
                "Explanation": "** It is impossible to get \"abccba\" using the operation."
            }
        ]
    },
    {
        "Title": "Max Consecutive Ones III",
        "slug": "max-consecutive-ones-iii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2",
                "Output": "** 6",
                "Explanation": "** [1,1,1,0,0,**1**,1,1,1,1,**1**]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined."
            },
            {
                "Input": "** nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3",
                "Output": "** 10",
                "Explanation": "** [0,0,1,1,**1**,**1**,1,1,1,**1**,1,1,0,0,0,1,1,1,1]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined."
            }
        ]
    },
    {
        "Title": "Maximize Sum Of Array After K Negations",
        "slug": "maximize-sum-of-array-after-k-negations",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [4,2,3], k = 1",
                "Output": "** 5",
                "Explanation": "** Choose index 1 and nums becomes [4,-2,3]."
            },
            {
                "Input": "** nums = [3,-1,0,2], k = 3",
                "Output": "** 6",
                "Explanation": "** Choose indices (1, 2, 2) and nums becomes [3,1,0,2]."
            },
            {
                "Input": "** nums = [2,-3,-1,5,-4], k = 2",
                "Output": "** 13",
                "Explanation": "** Choose indices (1, 4) and nums becomes [2,3,-1,5,4]."
            }
        ]
    },
    {
        "Title": "Clumsy Factorial",
        "slug": "clumsy-factorial",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** 7",
                "Explanation": "** 7 = 4 * 3 / 2 + 1"
            },
            {
                "Input": "** n = 10",
                "Output": "** 12",
                "Explanation": "** 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1"
            }
        ]
    },
    {
        "Title": "Minimum Domino Rotations For Equal Row",
        "slug": "minimum-domino-rotations-for-equal-row",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** tops = [2,1,2,4,2,2], bottoms = [5,2,6,2,3,2]",
                "Output": "** 2",
                "Explanation": "** \nThe first figure represents the dominoes as given by tops and bottoms: before we do any rotations.\nIf we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure."
            }
        ]
    },
    {
        "Title": "Construct Binary Search Tree from Preorder Traversal",
        "slug": "construct-binary-search-tree-from-preorder-traversal",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** preorder = [8,5,1,7,10,12]",
                "Output": "** [8,5,10,1,7,null,12]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Complement of Base 10 Integer",
        "slug": "complement-of-base-10-integer",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 5",
                "Output": "** 2",
                "Explanation": "** 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10."
            },
            {
                "Input": "** n = 7",
                "Output": "** 0",
                "Explanation": "** 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10."
            },
            {
                "Input": "** n = 10",
                "Output": "** 5",
                "Explanation": "** 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10."
            }
        ]
    },
    {
        "Title": "Pairs of Songs With Total Durations Divisible by 60",
        "slug": "pairs-of-songs-with-total-durations-divisible-by-60",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** time = [30,20,150,100,40]",
                "Output": "** 3",
                "Explanation": "** Three pairs have a total duration divisible by 60:\n(time[0] = 30, time[2] = 150): total duration 180\n(time[1] = 20, time[3] = 100): total duration 120\n(time[1] = 20, time[4] = 40): total duration 60"
            },
            {
                "Input": "** time = [60,60,60]",
                "Output": "** 3",
                "Explanation": "** All three pairs have a total duration of 120, which is divisible by 60."
            }
        ]
    },
    {
        "Title": "Capacity To Ship Packages Within D Days",
        "slug": "capacity-to-ship-packages-within-d-days",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** weights = [1,2,3,4,5,6,7,8,9,10], days = 5",
                "Output": "** 15",
                "Explanation": "** A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\n1st day: 1, 2, 3, 4, 5\n2nd day: 6, 7\n3rd day: 8\n4th day: 9\n5th day: 10\n\nNote that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed."
            },
            {
                "Input": "** weights = [3,2,2,4,1,4], days = 3",
                "Output": "** 6",
                "Explanation": "** A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\n1st day: 3, 2\n2nd day: 2, 4\n3rd day: 1, 4"
            },
            {
                "Input": "** weights = [1,2,3,1,1], days = 4",
                "Output": "** 3",
                "Explanation": "**\n1st day: 1\n2nd day: 2\n3rd day: 3\n4th day: 1, 1"
            }
        ]
    },
    {
        "Title": "Numbers With Repeated Digits",
        "slug": "numbers-with-repeated-digits",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 20",
                "Output": "** 1",
                "Explanation": "** The only positive number (<= 20) with at least 1 repeated digit is 11."
            },
            {
                "Input": "** n = 100",
                "Output": "** 10",
                "Explanation": "** The positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100."
            },
            {
                "Input": "** n = 1000",
                "Output": "** 262",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Partition Array Into Three Parts With Equal Sum",
        "slug": "partition-array-into-three-parts-with-equal-sum",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [0,2,1,-6,6,-7,9,1,2,0,1]",
                "Output": "** true",
                "Explanation": "** 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1"
            },
            {
                "Input": "** arr = [0,2,1,-6,6,7,9,-1,2,0,1]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** arr = [3,3,6,5,-2,2,5,1,-9,4]",
                "Output": "** true",
                "Explanation": "** 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4"
            }
        ]
    },
    {
        "Title": "Best Sightseeing Pair",
        "slug": "best-sightseeing-pair",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** values = [8,1,5,2,6]",
                "Output": "** 11",
                "Explanation": "** i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11"
            },
            {
                "Input": "** values = [1,2]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Smallest Integer Divisible by K",
        "slug": "smallest-integer-divisible-by-k",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** k = 1",
                "Output": "** 1",
                "Explanation": "** The smallest answer is n = 1, which has length 1."
            },
            {
                "Input": "** k = 2",
                "Output": "** -1",
                "Explanation": "** There is no such positive integer n divisible by 2."
            },
            {
                "Input": "** k = 3",
                "Output": "** 3",
                "Explanation": "** The smallest answer is n = 111, which has length 3."
            }
        ]
    },
    {
        "Title": "Binary String With Substrings Representing 1 To N",
        "slug": "binary-string-with-substrings-representing-1-to-n",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"0110\", n = 3",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** s = \"0110\", n = 4",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Convert to Base -2",
        "slug": "convert-to-base-2",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** \"110\"\n**Explantion:** (-2)2 + (-2)1 = 2",
                "Explanation": null
            },
            {
                "Input": "** n = 3",
                "Output": "** \"111\"\n**Explantion:** (-2)2 + (-2)1 + (-2)0 = 3",
                "Explanation": null
            },
            {
                "Input": "** n = 4",
                "Output": "** \"100\"\n**Explantion:** (-2)2 = 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Prefix Divisible By 5",
        "slug": "binary-prefix-divisible-by-5",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [0,1,1]",
                "Output": "** [true,false,false]",
                "Explanation": "** The input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10.\nOnly the first number is divisible by 5, so answer[0] is true."
            },
            {
                "Input": "** nums = [1,1,1]",
                "Output": "** [false,false,false]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Next Greater Node In Linked List",
        "slug": "next-greater-node-in-linked-list",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [2,1,5]",
                "Output": "** [5,5,0]",
                "Explanation": null
            },
            {
                "Input": "** head = [2,7,4,3,5]",
                "Output": "** [7,0,5,5,0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Enclaves",
        "slug": "number-of-enclaves",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]",
                "Output": "** 3",
                "Explanation": "** There are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary."
            },
            {
                "Input": "** grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]",
                "Output": "** 0",
                "Explanation": "** All 1s are either on the boundary or can reach the boundary."
            }
        ]
    },
    {
        "Title": "Remove Outermost Parentheses",
        "slug": "remove-outermost-parentheses",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"(()())(())\"",
                "Output": "** \"()()()\"",
                "Explanation": "** \nThe input string is \"(()())(())\", with primitive decomposition \"(()())\" + \"(())\".\nAfter removing outer parentheses of each part, this is \"()()\" + \"()\" = \"()()()\"."
            },
            {
                "Input": "** s = \"(()())(())(()(()))\"",
                "Output": "** \"()()()()(())\"",
                "Explanation": "** \nThe input string is \"(()())(())(()(()))\", with primitive decomposition \"(()())\" + \"(())\" + \"(()(()))\".\nAfter removing outer parentheses of each part, this is \"()()\" + \"()\" + \"()(())\" = \"()()()()(())\"."
            },
            {
                "Input": "** s = \"()()\"",
                "Output": "** \"\"",
                "Explanation": "** \nThe input string is \"()()\", with primitive decomposition \"()\" + \"()\".\nAfter removing outer parentheses of each part, this is \"\" + \"\" = \"\"."
            }
        ]
    },
    {
        "Title": "Sum of Root To Leaf Binary Numbers",
        "slug": "sum-of-root-to-leaf-binary-numbers",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [1,0,1,0,1,0,1]",
                "Output": "** 22",
                "Explanation": "** (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22"
            }
        ]
    },
    {
        "Title": "Camelcase Matching",
        "slug": "camelcase-matching",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FB\"",
                "Output": "** [true,false,true,true,false]",
                "Explanation": "** \"FooBar\" can be generated like this \"F\" + \"oo\" + \"B\" + \"ar\".\n\"FootBall\" can be generated like this \"F\" + \"oot\" + \"B\" + \"all\".\n\"FrameBuffer\" can be generated like this \"F\" + \"rame\" + \"B\" + \"uffer\"."
            },
            {
                "Input": "** queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBa\"",
                "Output": "** [true,false,true,false,false]",
                "Explanation": "** \"FooBar\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\".\n\"FootBall\" can be generated like this \"Fo\" + \"ot\" + \"Ba\" + \"ll\"."
            },
            {
                "Input": "** queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBaT\"",
                "Output": "** [false,true,false,false,false]",
                "Explanation": "** \"FooBarTest\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\" + \"T\" + \"est\"."
            }
        ]
    },
    {
        "Title": "Video Stitching",
        "slug": "video-stitching",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10",
                "Output": "** 3",
                "Explanation": "** We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.\nThen, we can reconstruct the sporting event as follows:\nWe cut [1,9] into segments [1,2] + [2,8] + [8,9].\nNow we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10]."
            },
            {
                "Input": "** clips = [[0,1],[1,2]], time = 5",
                "Output": "** -1",
                "Explanation": "** We cannot cover [0,5] with only [0,1] and [1,2]."
            },
            {
                "Input": "** clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], time = 9",
                "Output": "** 3",
                "Explanation": "** We can take clips [0,4], [4,7], and [6,9]."
            }
        ]
    },
    {
        "Title": "Divisor Game",
        "slug": "divisor-game",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** true",
                "Explanation": "** Alice chooses 1, and Bob has no more moves."
            },
            {
                "Input": "** n = 3",
                "Output": "** false",
                "Explanation": "** Alice chooses 1, Bob chooses 1, and Alice has no more moves."
            }
        ]
    },
    {
        "Title": "Maximum Difference Between Node and Ancestor",
        "slug": "maximum-difference-between-node-and-ancestor",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [8,3,10,1,6,null,14,null,null,4,7,13]",
                "Output": "** 7",
                "Explanation": "** We have various ancestor-node differences, some of which are given below :\n|8 - 3| = 5\n|3 - 7| = 4\n|8 - 1| = 7\n|10 - 13| = 3\nAmong all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7."
            },
            {
                "Input": "** root = [1,null,2,null,0,3]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Arithmetic Subsequence",
        "slug": "longest-arithmetic-subsequence",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,6,9,12]",
                "Output": "** 4",
                "Explanation": "**  The whole array is an arithmetic sequence with steps of length = 3."
            },
            {
                "Input": "** nums = [9,4,7,2,10]",
                "Output": "** 3",
                "Explanation": "**  The longest arithmetic subsequence is [4,7,10]."
            },
            {
                "Input": "** nums = [20,1,15,3,10,5,8]",
                "Output": "** 4",
                "Explanation": "**  The longest arithmetic subsequence is [20,15,10,5]."
            }
        ]
    },
    {
        "Title": "Recover a Tree From Preorder Traversal",
        "slug": "recover-a-tree-from-preorder-traversal",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** traversal = \"1-2--3--4-5--6--7\"",
                "Output": "** [1,2,5,3,4,6,7]",
                "Explanation": null
            },
            {
                "Input": "** traversal = \"1-2--3---4-5--6---7\"",
                "Output": "** [1,2,5,3,null,6,null,4,null,7]",
                "Explanation": null
            },
            {
                "Input": "** traversal = \"1-401--349---90--88\"",
                "Output": "** [1,401,null,349,88,90]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Two City Scheduling",
        "slug": "two-city-scheduling",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** costs = [[10,20],[30,200],[400,50],[30,20]]",
                "Output": "** 110",
                "Explanation": "** \nThe first person goes to city A for a cost of 10.\nThe second person goes to city A for a cost of 30.\nThe third person goes to city B for a cost of 50.\nThe fourth person goes to city B for a cost of 20.\n\nThe total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city."
            },
            {
                "Input": "** costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]",
                "Output": "** 1859",
                "Explanation": null
            },
            {
                "Input": "** costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]",
                "Output": "** 3086",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Matrix Cells in Distance Order",
        "slug": "matrix-cells-in-distance-order",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** rows = 1, cols = 2, rCenter = 0, cCenter = 0",
                "Output": "** [[0,0],[0,1]]",
                "Explanation": "** The distances from (0, 0) to other cells are: [0,1]"
            },
            {
                "Input": "** rows = 2, cols = 2, rCenter = 0, cCenter = 1",
                "Output": "** [[0,1],[0,0],[1,1],[1,0]]",
                "Explanation": "** The distances from (0, 1) to other cells are: [0,1,1,2]\nThe answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct."
            },
            {
                "Input": "** rows = 2, cols = 3, rCenter = 1, cCenter = 2",
                "Output": "** [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]",
                "Explanation": "** The distances from (1, 2) to other cells are: [0,1,1,2,2,3]\nThere are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]]."
            }
        ]
    },
    {
        "Title": "Maximum Sum of Two Non-Overlapping Subarrays",
        "slug": "maximum-sum-of-two-non-overlapping-subarrays",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [0,6,5,2,2,5,1,9,4], firstLen = 1, secondLen = 2",
                "Output": "** 20",
                "Explanation": "** One choice of subarrays is [9] with length 1, and [6,5] with length 2."
            },
            {
                "Input": "** nums = [3,8,1,3,2,1,8,9,0], firstLen = 3, secondLen = 2",
                "Output": "** 29",
                "Explanation": "** One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2."
            },
            {
                "Input": "** nums = [2,1,5,6,0,9,5,0,3,8], firstLen = 4, secondLen = 3",
                "Output": "** 31",
                "Explanation": "** One choice of subarrays is [5,6,0,9] with length 4, and [0,3,8] with length 3."
            }
        ]
    },
    {
        "Title": "Stream of Characters",
        "slug": "stream-of-characters",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"StreamChecker\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\"]\n[[[\"cd\", \"f\", \"kl\"]], [\"a\"], [\"b\"], [\"c\"], [\"d\"], [\"e\"], [\"f\"], [\"g\"], [\"h\"], [\"i\"], [\"j\"], [\"k\"], [\"l\"]]",
                "Output": "[null, false, false, false, true, false, true, false, false, false, false, false, true]",
                "Explanation": "StreamChecker streamChecker = new StreamChecker([\"cd\", \"f\", \"kl\"]);\nstreamChecker.query(\"a\"); // return False\nstreamChecker.query(\"b\"); // return False\nstreamChecker.query(\"c\"); // return False\nstreamChecker.query(\"d\"); // return True, because 'cd' is in the wordlist\nstreamChecker.query(\"e\"); // return False\nstreamChecker.query(\"f\"); // return True, because 'f' is in the wordlist\nstreamChecker.query(\"g\"); // return False\nstreamChecker.query(\"h\"); // return False\nstreamChecker.query(\"i\"); // return False\nstreamChecker.query(\"j\"); // return False\nstreamChecker.query(\"k\"); // return False\nstreamChecker.query(\"l\"); // return True, because 'kl' is in the wordlist"
            }
        ]
    },
    {
        "Title": "Moving Stones Until Consecutive",
        "slug": "moving-stones-until-consecutive",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** a = 1, b = 2, c = 5",
                "Output": "** [1,2]",
                "Explanation": "** Move the stone from 5 to 3, or move the stone from 5 to 4 to 3."
            },
            {
                "Input": "** a = 4, b = 3, c = 2",
                "Output": "** [0,0]",
                "Explanation": "** We cannot make any moves."
            },
            {
                "Input": "** a = 3, b = 5, c = 1",
                "Output": "** [1,2]",
                "Explanation": "** Move the stone from 1 to 4; or move the stone from 1 to 2 to 4."
            }
        ]
    },
    {
        "Title": "Coloring A Border",
        "slug": "coloring-a-border",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[1,1],[1,2]], row = 0, col = 0, color = 3",
                "Output": "** [[3,3],[3,2]]",
                "Explanation": null
            },
            {
                "Input": "** grid = [[1,2,2],[2,3,2]], row = 0, col = 1, color = 3",
                "Output": "** [[1,3,3],[2,3,3]]",
                "Explanation": null
            },
            {
                "Input": "** grid = [[1,1,1],[1,1,1],[1,1,1]], row = 1, col = 1, color = 2",
                "Output": "** [[2,2,2],[2,1,2],[2,2,2]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Uncrossed Lines",
        "slug": "uncrossed-lines",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums1 = [1,4,2], nums2 = [1,2,4]",
                "Output": "** 2",
                "Explanation": "** We can draw 2 uncrossed lines as in the diagram.\nWe cannot draw 3 uncrossed lines, because the line from nums1[1] = 4 to nums2[2] = 4 will intersect the line from nums1[2]=2 to nums2[1]=2."
            }
        ]
    },
    {
        "Title": "Escape a Large Maze",
        "slug": "escape-a-large-maze",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]",
                "Output": "** false",
                "Explanation": "** The target square is inaccessible starting from the source square because we cannot move.\nWe cannot move north or east because those squares are blocked.\nWe cannot move south or west because we cannot go outside of the grid."
            },
            {
                "Input": "** blocked = [], source = [0,0], target = [999999,999999]",
                "Output": "** true",
                "Explanation": "** Because there are no blocked cells, it is possible to reach the target square."
            }
        ]
    },
    {
        "Title": "Valid Boomerang",
        "slug": "valid-boomerang",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** points = [[1,1],[2,3],[3,2]]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** points = [[1,1],[2,2],[3,3]]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Search Tree to Greater Sum Tree",
        "slug": "binary-search-tree-to-greater-sum-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]",
                "Output": "** [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Score Triangulation of Polygon",
        "slug": "minimum-score-triangulation-of-polygon",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** values = [1,2,3]",
                "Output": "** 6",
                "Explanation": "** The polygon is already triangulated, and the score of the only triangle is 6."
            },
            {
                "Input": "** values = [3,7,4,5]",
                "Output": "** 144",
                "Explanation": "** There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144.\nThe minimum score is 144."
            },
            {
                "Input": "** values = [1,3,1,4,1,5]",
                "Output": "** 13",
                "Explanation": "** The minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13."
            }
        ]
    },
    {
        "Title": "Moving Stones Until Consecutive II",
        "slug": "moving-stones-until-consecutive-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** stones = [7,4,9]",
                "Output": "** [1,2]",
                "Explanation": "** We can move 4 -> 8 for one move to finish the game.\nOr, we can move 9 -> 5, 4 -> 6 for two moves to finish the game."
            },
            {
                "Input": "** stones = [6,5,4,3,10]",
                "Output": "** [2,3]",
                "Explanation": "** We can move 3 -> 8 then 10 -> 7 to finish the game.\nOr, we can move 3 -> 7, 4 -> 8, 5 -> 9 to finish the game.\nNotice we cannot move 10 -> 2 to finish the game, because that would be an illegal move."
            }
        ]
    },
    {
        "Title": "Robot Bounded In Circle",
        "slug": "robot-bounded-in-circle",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** instructions = \"GGLLGG\"",
                "Output": "** true",
                "Explanation": "** The robot is initially at (0, 0) facing the north direction.\n\"G\": move one step. Position: (0, 1). Direction: North.\n\"G\": move one step. Position: (0, 2). Direction: North.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: West.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: South.\n\"G\": move one step. Position: (0, 1). Direction: South.\n\"G\": move one step. Position: (0, 0). Direction: South.\nRepeating the instructions, the robot goes into the cycle: (0, 0) --> (0, 1) --> (0, 2) --> (0, 1) --> (0, 0).\nBased on that, we return true."
            },
            {
                "Input": "** instructions = \"GG\"",
                "Output": "** false",
                "Explanation": "** The robot is initially at (0, 0) facing the north direction.\n\"G\": move one step. Position: (0, 1). Direction: North.\n\"G\": move one step. Position: (0, 2). Direction: North.\nRepeating the instructions, keeps advancing in the north direction and does not go into cycles.\nBased on that, we return false."
            },
            {
                "Input": "** instructions = \"GL\"",
                "Output": "** true",
                "Explanation": "** The robot is initially at (0, 0) facing the north direction.\n\"G\": move one step. Position: (0, 1). Direction: North.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 1). Direction: West.\n\"G\": move one step. Position: (-1, 1). Direction: West.\n\"L\": turn 90 degrees anti-clockwise. Position: (-1, 1). Direction: South.\n\"G\": move one step. Position: (-1, 0). Direction: South.\n\"L\": turn 90 degrees anti-clockwise. Position: (-1, 0). Direction: East.\n\"G\": move one step. Position: (0, 0). Direction: East.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 0). Direction: North.\nRepeating the instructions, the robot goes into the cycle: (0, 0) --> (0, 1) --> (-1, 1) --> (-1, 0) --> (0, 0).\nBased on that, we return true."
            }
        ]
    },
    {
        "Title": "Flower Planting With No Adjacent",
        "slug": "flower-planting-with-no-adjacent",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3, paths = [[1,2],[2,3],[3,1]]",
                "Output": "** [1,2,3]",
                "Explanation": "**\nGardens 1 and 2 have different types.\nGardens 2 and 3 have different types.\nGardens 3 and 1 have different types.\nHence, [1,2,3] is a valid answer. Other valid answers include [1,2,4], [1,4,2], and [3,2,1]."
            },
            {
                "Input": "** n = 4, paths = [[1,2],[3,4]]",
                "Output": "** [1,2,1,2]",
                "Explanation": null
            },
            {
                "Input": "** n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]",
                "Output": "** [1,2,3,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Partition Array for Maximum Sum",
        "slug": "partition-array-for-maximum-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [1,15,7,9,2,5,10], k = 3",
                "Output": "** 84",
                "Explanation": "** arr becomes [15,15,15,9,10,10,10]"
            },
            {
                "Input": "** arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4",
                "Output": "** 83",
                "Explanation": null
            },
            {
                "Input": "** arr = [1], k = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Duplicate Substring",
        "slug": "longest-duplicate-substring",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"banana\"",
                "Output": "** \"ana\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"abcd\"",
                "Output": "** \"\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Customers Who Bought All Products",
        "slug": "customers-who-bought-all-products",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nCustomer table:\n+-------------+-------------+\n| customer_id | product_key |\n+-------------+-------------+\n| 1           | 5           |\n| 2           | 6           |\n| 3           | 5           |\n| 3           | 6           |\n| 1           | 6           |\n+-------------+-------------+\nProduct table:\n+-------------+\n| product_key |\n+-------------+\n| 5           |\n| 6           |\n+-------------+",
                "Output": "** \n+-------------+\n| customer_id |\n+-------------+\n| 1           |\n| 3           |\n+-------------+",
                "Explanation": "** \nThe customers who bought all the products (5 and 6) are customers with IDs 1 and 3."
            }
        ]
    },
    {
        "Title": "Last Stone Weight",
        "slug": "last-stone-weight",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** stones = [2,7,4,1,8,1]",
                "Output": "** 1",
                "Explanation": "** \nWe combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,\nwe combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,\nwe combine 2 and 1 to get 1 so the array converts to [1,1,1] then,\nwe combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone."
            },
            {
                "Input": "** stones = [1]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove All Adjacent Duplicates In String",
        "slug": "remove-all-adjacent-duplicates-in-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"abbaca\"",
                "Output": "** \"ca\"",
                "Explanation": "** \nFor example, in \"abbaca\" we could remove \"bb\" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is \"aaca\", of which only \"aa\" is possible, so the final string is \"ca\"."
            },
            {
                "Input": "** s = \"azxxzy\"",
                "Output": "** \"ay\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest String Chain",
        "slug": "longest-string-chain",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** words = [\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"]",
                "Output": "** 4",
                "Explanation": "One of the longest word chains is [\"a\",\"ba\",\"bda\",\"bdca\"]."
            },
            {
                "Input": "** words = [\"xbc\",\"pcxbcf\",\"xb\",\"cxbc\",\"pcxbc\"]",
                "Output": "** 5",
                "Explanation": "** All the words can be put in a word chain [\"xb\", \"xbc\", \"cxbc\", \"pcxbc\", \"pcxbcf\"]."
            },
            {
                "Input": "** words = [\"abcd\",\"dbqca\"]",
                "Output": "** 1",
                "Explanation": "** The trivial word chain [\"abcd\"] is one of the longest word chains.\n[\"abcd\",\"dbqca\"] is not a valid word chain because the ordering of the letters is changed."
            }
        ]
    },
    {
        "Title": "Last Stone Weight II",
        "slug": "last-stone-weight-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** stones = [2,7,4,1,8,1]",
                "Output": "** 1",
                "Explanation": "**\nWe can combine 2 and 4 to get 2, so the array converts to [2,7,1,8,1] then,\nwe can combine 7 and 8 to get 1, so the array converts to [2,1,1,1] then,\nwe can combine 2 and 1 to get 1, so the array converts to [1,1,1] then,\nwe can combine 1 and 1 to get 0, so the array converts to [1], then that's the optimal value."
            },
            {
                "Input": "** stones = [31,26,33,21,40]",
                "Output": "** 5",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Actors and Directors Who Cooperated At Least Three Times",
        "slug": "actors-and-directors-who-cooperated-at-least-three-times",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nActorDirector table:\n+-------------+-------------+-------------+\n| actor_id    | director_id | timestamp   |\n+-------------+-------------+-------------+\n| 1           | 1           | 0           |\n| 1           | 1           | 1           |\n| 1           | 1           | 2           |\n| 1           | 2           | 3           |\n| 1           | 2           | 4           |\n| 2           | 1           | 5           |\n| 2           | 1           | 6           |\n+-------------+-------------+-------------+",
                "Output": "** \n+-------------+-------------+\n| actor_id    | director_id |\n+-------------+-------------+\n| 1           | 1           |\n+-------------+-------------+",
                "Explanation": "** The only pair is (1, 1) where they cooperated exactly 3 times."
            }
        ]
    },
    {
        "Title": "Height Checker",
        "slug": "height-checker",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** heights = [1,1,4,2,1,3]",
                "Output": "** 3",
                "Explanation": "** \nheights:  [1,1,4,2,1,3]\nexpected: [1,1,1,2,3,4]\nIndices 2, 4, and 5 do not match."
            },
            {
                "Input": "** heights = [5,1,2,3,4]",
                "Output": "** 5",
                "Explanation": "**\nheights:  [5,1,2,3,4]\nexpected: [1,2,3,4,5]\nAll indices do not match."
            },
            {
                "Input": "** heights = [1,2,3,4,5]",
                "Output": "** 0",
                "Explanation": "**\nheights:  [1,2,3,4,5]\nexpected: [1,2,3,4,5]\nAll indices match."
            }
        ]
    },
    {
        "Title": "Grumpy Bookstore Owner",
        "slug": "grumpy-bookstore-owner",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3",
                "Output": "** 16",
                "Explanation": "** The bookstore owner keeps themselves not grumpy for the last 3 minutes. \nThe maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16."
            },
            {
                "Input": "** customers = [1], grumpy = [0], minutes = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Previous Permutation With One Swap",
        "slug": "previous-permutation-with-one-swap",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [3,2,1]",
                "Output": "** [3,1,2]",
                "Explanation": "** Swapping 2 and 1."
            },
            {
                "Input": "** arr = [1,1,5]",
                "Output": "** [1,1,5]",
                "Explanation": "** This is already the smallest permutation."
            },
            {
                "Input": "** arr = [1,9,4,6,7]",
                "Output": "** [1,7,4,6,9]",
                "Explanation": "** Swapping 9 and 7."
            }
        ]
    },
    {
        "Title": "Distant Barcodes",
        "slug": "distant-barcodes",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** barcodes = [1,1,1,2,2,2]",
                "Output": "** [2,1,2,1,2,1]",
                "Explanation": null
            },
            {
                "Input": "** barcodes = [1,1,1,1,2,2,3,3]",
                "Output": "** [1,3,1,3,1,2,1,2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Lexicographically Smallest Equivalent String",
        "slug": "lexicographically-smallest-equivalent-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s1 = \"parker\", s2 = \"morris\", baseStr = \"parser\"",
                "Output": "** \"makkek\"",
                "Explanation": "** Based on the equivalency information in s1 and s2, we can group their characters as [m,p], [a,o], [k,r,s], [e,i].\nThe characters in each group are equivalent and sorted in lexicographical order.\nSo the answer is \"makkek\"."
            },
            {
                "Input": "** s1 = \"hello\", s2 = \"world\", baseStr = \"hold\"",
                "Output": "** \"hdld\"",
                "Explanation": "** Based on the equivalency information in s1 and s2, we can group their characters as [h,w], [d,e,o], [l,r].\nSo only the second letter 'o' in baseStr is changed to 'd', the answer is \"hdld\"."
            },
            {
                "Input": "** s1 = \"leetcode\", s2 = \"programs\", baseStr = \"sourcecode\"",
                "Output": "** \"aauaaaaada\"",
                "Explanation": "** We group the equivalent characters in s1 and s2 as [a,o,e,r,s,c], [l,p], [g,t] and [d,m], thus all letters in baseStr except 'u' and 'd' are transformed to 'a', the answer is \"aauaaaaada\"."
            }
        ]
    },
    {
        "Title": "Product Sales Analysis I",
        "slug": "product-sales-analysis-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nSales table:\n+---------+------------+------+----------+-------+\n| sale_id | product_id | year | quantity | price |\n+---------+------------+------+----------+-------+ \n| 1       | 100        | 2008 | 10       | 5000  |\n| 2       | 100        | 2009 | 12       | 5000  |\n| 7       | 200        | 2011 | 15       | 9000  |\n+---------+------------+------+----------+-------+\nProduct table:\n+------------+--------------+\n| product_id | product_name |\n+------------+--------------+\n| 100        | Nokia        |\n| 200        | Apple        |\n| 300        | Samsung      |\n+------------+--------------+",
                "Output": "** \n+--------------+-------+-------+\n| product_name | year  | price |\n+--------------+-------+-------+\n| Nokia        | 2008  | 5000  |\n| Nokia        | 2009  | 5000  |\n| Apple        | 2011  | 9000  |\n+--------------+-------+-------+",
                "Explanation": "** \nFrom sale_id = 1, we can conclude that Nokia was sold for 5000 in the year 2008.\nFrom sale_id = 2, we can conclude that Nokia was sold for 5000 in the year 2009.\nFrom sale_id = 7, we can conclude that Apple was sold for 9000 in the year 2011."
            }
        ]
    },
    {
        "Title": "Product Sales Analysis III",
        "slug": "product-sales-analysis-iii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nSales table:\n+---------+------------+------+----------+-------+\n| sale_id | product_id | year | quantity | price |\n+---------+------------+------+----------+-------+ \n| 1       | 100        | 2008 | 10       | 5000  |\n| 2       | 100        | 2009 | 12       | 5000  |\n| 7       | 200        | 2011 | 15       | 9000  |\n+---------+------------+------+----------+-------+\nProduct table:\n+------------+--------------+\n| product_id | product_name |\n+------------+--------------+\n| 100        | Nokia        |\n| 200        | Apple        |\n| 300        | Samsung      |\n+------------+--------------+",
                "Output": "** \n+------------+------------+----------+-------+\n| product_id | first_year | quantity | price |\n+------------+------------+----------+-------+ \n| 100        | 2008       | 10       | 5000  |\n| 200        | 2011       | 15       | 9000  |\n+------------+------------+----------+-------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Greatest Common Divisor of Strings",
        "slug": "greatest-common-divisor-of-strings",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** str1 = \"ABCABC\", str2 = \"ABC\"",
                "Output": "** \"ABC\"",
                "Explanation": null
            },
            {
                "Input": "** str1 = \"ABABAB\", str2 = \"ABAB\"",
                "Output": "** \"AB\"",
                "Explanation": null
            },
            {
                "Input": "** str1 = \"LEET\", str2 = \"CODE\"",
                "Output": "** \"\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Flip Columns For Maximum Number of Equal Rows",
        "slug": "flip-columns-for-maximum-number-of-equal-rows",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** matrix = [[0,1],[1,1]]",
                "Output": "** 1",
                "Explanation": "** After flipping no values, 1 row has all values equal."
            },
            {
                "Input": "** matrix = [[0,1],[1,0]]",
                "Output": "** 2",
                "Explanation": "** After flipping values in the first column, both rows have equal values."
            },
            {
                "Input": "** matrix = [[0,0,0],[0,0,1],[1,1,0]]",
                "Output": "** 2",
                "Explanation": "** After flipping values in the first two columns, the last two rows have equal values."
            }
        ]
    },
    {
        "Title": "Adding Two Negabinary Numbers",
        "slug": "adding-two-negabinary-numbers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr1 = [1,1,1,1,1], arr2 = [1,0,1]",
                "Output": "** [1,0,0,0,0]",
                "Explanation": "** arr1 represents 11, arr2 represents 5, the output represents 16."
            },
            {
                "Input": "** arr1 = [0], arr2 = [0]",
                "Output": "** [0]",
                "Explanation": null
            },
            {
                "Input": "** arr1 = [0], arr2 = [1]",
                "Output": "** [1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Submatrices That Sum to Target",
        "slug": "number-of-submatrices-that-sum-to-target",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0",
                "Output": "** 4",
                "Explanation": "** The four 1x1 submatrices that only contain 0."
            }
        ]
    },
    {
        "Title": "Project Employees I",
        "slug": "project-employees-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nProject table:\n+-------------+-------------+\n| project_id  | employee_id |\n+-------------+-------------+\n| 1           | 1           |\n| 1           | 2           |\n| 1           | 3           |\n| 2           | 1           |\n| 2           | 4           |\n+-------------+-------------+\nEmployee table:\n+-------------+--------+------------------+\n| employee_id | name   | experience_years |\n+-------------+--------+------------------+\n| 1           | Khaled | 3                |\n| 2           | Ali    | 2                |\n| 3           | John   | 1                |\n| 4           | Doe    | 2                |\n+-------------+--------+------------------+",
                "Output": "** \n+-------------+---------------+\n| project_id  | average_years |\n+-------------+---------------+\n| 1           | 2.00          |\n| 2           | 2.50          |\n+-------------+---------------+",
                "Explanation": "** The average experience years for the first project is (3 + 2 + 1) / 3 = 2.00 and for the second project is (3 + 2) / 2 = 2.50"
            }
        ]
    },
    {
        "Title": "Occurrences After Bigram",
        "slug": "occurrences-after-bigram",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** text = \"alice is a good girl she is a good student\", first = \"a\", second = \"good\"",
                "Output": "** [\"girl\",\"student\"]",
                "Explanation": null
            },
            {
                "Input": "** text = \"we will we will rock you\", first = \"we\", second = \"will\"",
                "Output": "** [\"we\",\"rock\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Letter Tile Possibilities",
        "slug": "letter-tile-possibilities",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** tiles = \"AAB\"",
                "Output": "** 8",
                "Explanation": "** The possible sequences are \"A\", \"B\", \"AA\", \"AB\", \"BA\", \"AAB\", \"ABA\", \"BAA\"."
            },
            {
                "Input": "** tiles = \"AAABBC\"",
                "Output": "** 188",
                "Explanation": null
            },
            {
                "Input": "** tiles = \"V\"",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Insufficient Nodes in Root to Leaf Paths",
        "slug": "insufficient-nodes-in-root-to-leaf-paths",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1",
                "Output": "** [1,2,3,4,null,null,7,8,9,null,14]",
                "Explanation": null
            },
            {
                "Input": "** root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22",
                "Output": "** [5,4,8,11,null,17,4,7,null,null,null,5]",
                "Explanation": null
            },
            {
                "Input": "** root = [1,2,-3,-5,null,4,null], limit = -1",
                "Output": "** [1,null,-3,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Smallest Subsequence of Distinct Characters",
        "slug": "smallest-subsequence-of-distinct-characters",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"bcabc\"",
                "Output": "** \"abc\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"cbacdcbc\"",
                "Output": "** \"acdb\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sales Analysis III",
        "slug": "sales-analysis-iii",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nProduct table:\n+------------+--------------+------------+\n| product_id | product_name | unit_price |\n+------------+--------------+------------+\n| 1          | S8           | 1000       |\n| 2          | G4           | 800        |\n| 3          | iPhone       | 1400       |\n+------------+--------------+------------+\nSales table:\n+-----------+------------+----------+------------+----------+-------+\n| seller_id | product_id | buyer_id | sale_date  | quantity | price |\n+-----------+------------+----------+------------+----------+-------+\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\n| 2         | 2          | 3        | 2019-06-02 | 1        | 800   |\n| 3         | 3          | 4        | 2019-05-13 | 2        | 2800  |\n+-----------+------------+----------+------------+----------+-------+",
                "Output": "** \n+-------------+--------------+\n| product_id  | product_name |\n+-------------+--------------+\n| 1           | S8           |\n+-------------+--------------+",
                "Explanation": "** \nThe product with id 1 was only sold in the spring of 2019.\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\nThe product with id 3 was sold after spring 2019.\nWe return only product 1 as it is the product that was only sold in the spring of 2019."
            }
        ]
    },
    {
        "Title": "Duplicate Zeros",
        "slug": "duplicate-zeros",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [1,0,2,3,0,4,5,0]",
                "Output": "** [1,0,0,2,3,0,0,4]",
                "Explanation": "** After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]"
            },
            {
                "Input": "** arr = [1,2,3]",
                "Output": "** [1,2,3]",
                "Explanation": "** After calling your function, the input array is modified to: [1,2,3]"
            }
        ]
    },
    {
        "Title": "Largest Values From Labels",
        "slug": "largest-values-from-labels",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** values = [5,4,3,2,1], labels = [1,1,2,2,3], numWanted = 3, useLimit = 1",
                "Output": "** 9",
                "Explanation": "** The subset chosen is the first, third, and fifth items."
            },
            {
                "Input": "** values = [5,4,3,2,1], labels = [1,3,3,3,2], numWanted = 3, useLimit = 2",
                "Output": "** 12",
                "Explanation": "** The subset chosen is the first, second, and third items."
            },
            {
                "Input": "** values = [9,8,8,7,6], labels = [0,0,0,1,1], numWanted = 3, useLimit = 1",
                "Output": "** 16",
                "Explanation": "** The subset chosen is the first and fourth items."
            }
        ]
    },
    {
        "Title": "Shortest Path in Binary Matrix",
        "slug": "shortest-path-in-binary-matrix",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[0,1],[1,0]]",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** grid = [[0,0,0],[1,1,0],[1,1,0]]",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Shortest Common Supersequence ",
        "slug": "shortest-common-supersequence",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** str1 = \"abac\", str2 = \"cab\"",
                "Output": "** \"cabac\"",
                "Explanation": "** \nstr1 = \"abac\" is a subsequence of \"cabac\" because we can delete the first \"c\".\nstr2 = \"cab\" is a subsequence of \"cabac\" because we can delete the last \"ac\".\nThe answer provided is the shortest such string that satisfies these properties."
            },
            {
                "Input": "** str1 = \"aaaaaaaa\", str2 = \"aaaaaaaa\"",
                "Output": "** \"aaaaaaaa\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Statistics from a Large Sample",
        "slug": "statistics-from-a-large-sample",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                "Output": "** [1.00000,3.00000,2.37500,2.50000,3.00000]",
                "Explanation": "** The sample represented by count is [1,2,2,2,3,3,3,3].\nThe minimum and maximum are 1 and 3 respectively.\nThe mean is (1+2+2+2+3+3+3+3) / 8 = 19 / 8 = 2.375.\nSince the size of the sample is even, the median is the average of the two middle elements 2 and 3, which is 2.5.\nThe mode is 3 as it appears the most in the sample."
            },
            {
                "Input": "** count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                "Output": "** [1.00000,4.00000,2.18182,2.00000,1.00000]",
                "Explanation": "** The sample represented by count is [1,1,1,1,2,2,2,3,3,4,4].\nThe minimum and maximum are 1 and 4 respectively.\nThe mean is (1+1+1+1+2+2+2+3+3+4+4) / 11 = 24 / 11 = 2.18181818... (for display purposes, the output shows the rounded number 2.18182).\nSince the size of the sample is odd, the median is the middle element 2.\nThe mode is 1 as it appears the most in the sample."
            }
        ]
    },
    {
        "Title": "Car Pooling",
        "slug": "car-pooling",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** trips = [[2,1,5],[3,3,7]], capacity = 4",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** trips = [[2,1,5],[3,3,7]], capacity = 5",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find in Mountain Array",
        "slug": "find-in-mountain-array",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** array = [1,2,3,4,5,3,1], target = 3",
                "Output": "** 2",
                "Explanation": "** 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2."
            },
            {
                "Input": "** array = [0,1,2,4,2,1], target = 3",
                "Output": "** -1",
                "Explanation": "** 3 does not exist in the array, so we return -1."
            }
        ]
    },
    {
        "Title": "Brace Expansion II",
        "slug": "brace-expansion-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** expression = \"{a,b}{c,{d,e}}\"",
                "Output": "** [\"ac\",\"ad\",\"ae\",\"bc\",\"bd\",\"be\"]",
                "Explanation": null
            },
            {
                "Input": "** expression = \"{{a,z},a{b,c},{ab,z}}\"",
                "Output": "** [\"a\",\"ab\",\"ac\",\"z\"]",
                "Explanation": "** Each distinct word is written only once in the final answer."
            }
        ]
    },
    {
        "Title": "Distribute Candies to People",
        "slug": "distribute-candies-to-people",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** candies = 7, num_people = 4",
                "Output": "** [1,2,3,1]",
                "Explanation": "**\nOn the first turn, ans[0] += 1, and the array is [1,0,0,0].\nOn the second turn, ans[1] += 2, and the array is [1,2,0,0].\nOn the third turn, ans[2] += 3, and the array is [1,2,3,0].\nOn the fourth turn, ans[3] += 1 (because there is only one candy left), and the final array is [1,2,3,1]."
            },
            {
                "Input": "** candies = 10, num_people = 3",
                "Output": "** [5,2,3]",
                "Explanation": "** \nOn the first turn, ans[0] += 1, and the array is [1,0,0].\nOn the second turn, ans[1] += 2, and the array is [1,2,0].\nOn the third turn, ans[2] += 3, and the array is [1,2,3].\nOn the fourth turn, ans[0] += 4, and the final array is [5,2,3]."
            }
        ]
    },
    {
        "Title": "Path In Zigzag Labelled Binary Tree",
        "slug": "path-in-zigzag-labelled-binary-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** label = 14",
                "Output": "** [1,3,4,14]",
                "Explanation": null
            },
            {
                "Input": "** label = 26",
                "Output": "** [1,2,6,10,26]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Filling Bookcase Shelves",
        "slug": "filling-bookcase-shelves",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelfWidth = 4",
                "Output": "** 6",
                "Explanation": "**\nThe sum of the heights of the 3 shelves is 1 + 3 + 2 = 6.\nNotice that book number 2 does not have to be on the first shelf."
            }
        ]
    },
    {
        "Title": "Parsing A Boolean Expression",
        "slug": "parsing-a-boolean-expression",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** expression = \"&(|(f))\"",
                "Output": "** false",
                "Explanation": "** \nFirst, evaluate |(f) --> f. The expression is now \"&(f)\".\nThen, evaluate &(f) --> f. The expression is now \"f\".\nFinally, return false."
            },
            {
                "Input": "** expression = \"|(f,f,f,t)\"",
                "Output": "** true",
                "Explanation": "** The evaluation of (false OR false OR false OR true) is true."
            },
            {
                "Input": "** expression = \"!(&(f,t))\"",
                "Output": "** true",
                "Explanation": "** \nFirst, evaluate &(f,t) --> (false AND true) --> false --> f. The expression is now \"!(f)\".\nThen, evaluate !(f) --> NOT false --> true. We return true."
            }
        ]
    },
    {
        "Title": "Defanging an IP Address",
        "slug": "defanging-an-ip-address",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** address = \"1.1.1.1\"",
                "Output": "** \"1[.]1[.]1[.]1\"",
                "Explanation": null
            },
            {
                "Input": "** address = \"255.100.50.0\"",
                "Output": "** \"255[.]100[.]50[.]0\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Corporate Flight Bookings",
        "slug": "corporate-flight-bookings",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5",
                "Output": "** [10,55,45,25,25]",
                "Explanation": "**\nFlight labels:        1   2   3   4   5\nBooking 1 reserved:  10  10\nBooking 2 reserved:      20  20\nBooking 3 reserved:      25  25  25  25\nTotal seats:         10  55  45  25  25\nHence, answer = [10,55,45,25,25]"
            },
            {
                "Input": "** bookings = [[1,2,10],[2,2,15]], n = 2",
                "Output": "** [10,25]",
                "Explanation": "**\nFlight labels:        1   2\nBooking 1 reserved:  10  10\nBooking 2 reserved:      15\nTotal seats:         10  25\nHence, answer = [10,25]"
            }
        ]
    },
    {
        "Title": "Delete Nodes And Return Forest",
        "slug": "delete-nodes-and-return-forest",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,2,3,4,5,6,7], to_delete = [3,5]",
                "Output": "** [[1,2,null,4],[6],[7]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Nesting Depth of Two Valid Parentheses Strings",
        "slug": "maximum-nesting-depth-of-two-valid-parentheses-strings",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** seq = \"(()())\"",
                "Output": "** [0,1,1,1,1,0]",
                "Explanation": null
            },
            {
                "Input": "** seq = \"()(())()\"",
                "Output": "** [0,0,0,1,1,0,1,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Print in Order",
        "slug": "print-in-order",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** \"firstsecondthird\"",
                "Explanation": "** There are three threads being fired asynchronously. The input [1,2,3] means thread A calls first(), thread B calls second(), and thread C calls third(). \"firstsecondthird\" is the correct output."
            },
            {
                "Input": "** nums = [1,3,2]",
                "Output": "** \"firstsecondthird\"",
                "Explanation": "** The input [1,3,2] means thread A calls first(), thread B calls third(), and thread C calls second(). \"firstsecondthird\" is the correct output."
            }
        ]
    },
    {
        "Title": "Print FooBar Alternately",
        "slug": "print-foobar-alternately",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** \"foobar\"",
                "Explanation": "** There are two threads being fired asynchronously. One of them calls foo(), while the other calls bar().\n\"foobar\" is being output 1 time."
            },
            {
                "Input": "** n = 2",
                "Output": "** \"foobarfoobar\"",
                "Explanation": "** \"foobar\" is being output 2 times."
            }
        ]
    },
    {
        "Title": "Print Zero Even Odd",
        "slug": "print-zero-even-odd",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** \"0102\"",
                "Explanation": "** There are three threads being fired asynchronously.\nOne of them calls zero(), the other calls even(), and the last one calls odd().\n\"0102\" is the correct output."
            },
            {
                "Input": "** n = 5",
                "Output": "** \"0102030405\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Building H2O",
        "slug": "building-h2o",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** water = \"HOH\"",
                "Output": "** \"HHO\"",
                "Explanation": "** \"HOH\" and \"OHH\" are also valid answers."
            },
            {
                "Input": "** water = \"OOHHHH\"",
                "Output": "** \"HHOHHO\"",
                "Explanation": "** \"HOHHHO\", \"OHHHHO\", \"HHOHOH\", \"HOHHOH\", \"OHHHOH\", \"HHOOHH\", \"HOHOHH\" and \"OHHOHH\" are also valid answers."
            }
        ]
    },
    {
        "Title": "Relative Sort Array",
        "slug": "relative-sort-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]",
                "Output": "** [2,2,2,1,4,3,3,9,6,7,19]",
                "Explanation": null
            },
            {
                "Input": "** arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6]",
                "Output": "** [22,28,8,6,17,44]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Lowest Common Ancestor of Deepest Leaves",
        "slug": "lowest-common-ancestor-of-deepest-leaves",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [3,5,1,6,2,0,8,null,null,7,4]",
                "Output": "** [2,7,4]",
                "Explanation": "** We return the node with value 2, colored in yellow in the diagram.\nThe nodes coloured in blue are the deepest leaf-nodes of the tree.\nNote that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3."
            }
        ]
    },
    {
        "Title": "Longest Well-Performing Interval",
        "slug": "longest-well-performing-interval",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** hours = [9,9,6,0,6,6,9]",
                "Output": "** 3",
                "Explanation": "** The longest well-performing interval is [9,9,6]."
            },
            {
                "Input": "** hours = [6,6,6]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Smallest Sufficient Team",
        "slug": "smallest-sufficient-team",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** req_skills = [\"java\",\"nodejs\",\"reactjs\"], people = [[\"java\"],[\"nodejs\"],[\"nodejs\",\"reactjs\"]]",
                "Output": "** [0,2]",
                "Explanation": null
            },
            {
                "Input": "** req_skills = [\"algorithms\",\"math\",\"java\",\"reactjs\",\"csharp\",\"aws\"], people = [[\"algorithms\",\"math\",\"java\"],[\"algorithms\",\"math\",\"reactjs\"],[\"java\",\"csharp\",\"aws\"],[\"reactjs\",\"csharp\"],[\"csharp\",\"math\"],[\"aws\",\"java\"]]",
                "Output": "** [1,2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Equivalent Domino Pairs",
        "slug": "number-of-equivalent-domino-pairs",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** dominoes = [[1,2],[2,1],[3,4],[5,6]]",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Shortest Path with Alternating Colors",
        "slug": "shortest-path-with-alternating-colors",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3, redEdges = [[0,1],[1,2]], blueEdges = []",
                "Output": "** [0,1,-1]",
                "Explanation": null
            },
            {
                "Input": "** n = 3, redEdges = [[0,1]], blueEdges = [[2,1]]",
                "Output": "** [0,1,-1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Cost Tree From Leaf Values",
        "slug": "minimum-cost-tree-from-leaf-values",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [6,2,4]",
                "Output": "** 32",
                "Explanation": "** There are two possible trees shown.\nThe first has a non-leaf node sum 36, and the second has non-leaf node sum 32."
            },
            {
                "Input": "** arr = [4,11]",
                "Output": "** 44",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum of Absolute Value Expression",
        "slug": "maximum-of-absolute-value-expression",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr1 = [1,2,3,4], arr2 = [-1,4,5,6]",
                "Output": "** 13",
                "Explanation": null
            },
            {
                "Input": "** arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]",
                "Output": "** 20",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "N-th Tribonacci Number",
        "slug": "n-th-tribonacci-number",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** 4",
                "Explanation": "**\r\nT_3 = 0 + 1 + 1 = 2\r\nT_4 = 1 + 1 + 2 = 4"
            },
            {
                "Input": "** n = 25",
                "Output": "** 1389537",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Alphabet Board Path",
        "slug": "alphabet-board-path",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** target = \"leet\"",
                "Output": "** \"DDR!UURRR!!DDD!\"",
                "Explanation": null
            },
            {
                "Input": "** target = \"code\"",
                "Output": "** \"RR!DDRR!UUL!R!\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Largest 1-Bordered Square",
        "slug": "largest-1-bordered-square",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[1,1,1],[1,0,1],[1,1,1]]",
                "Output": "** 9",
                "Explanation": null
            },
            {
                "Input": "** grid = [[1,1,0,0]]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Stone Game II",
        "slug": "stone-game-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** piles = [2,7,9,4,4]",
                "Output": "** 10",
                "Explanation": "**  If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 piles in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get 2 + 7 = 9 piles in total. So we return 10 since it's larger."
            },
            {
                "Input": "** piles = [1,2,3,4,5,100]",
                "Output": "** 104",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "User Activity for the Past 30 Days I",
        "slug": "user-activity-for-the-past-30-days-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nActivity table:\n+---------+------------+---------------+---------------+\n| user_id | session_id | activity_date | activity_type |\n+---------+------------+---------------+---------------+\n| 1       | 1          | 2019-07-20    | open_session  |\n| 1       | 1          | 2019-07-20    | scroll_down   |\n| 1       | 1          | 2019-07-20    | end_session   |\n| 2       | 4          | 2019-07-20    | open_session  |\n| 2       | 4          | 2019-07-21    | send_message  |\n| 2       | 4          | 2019-07-21    | end_session   |\n| 3       | 2          | 2019-07-21    | open_session  |\n| 3       | 2          | 2019-07-21    | send_message  |\n| 3       | 2          | 2019-07-21    | end_session   |\n| 4       | 3          | 2019-06-25    | open_session  |\n| 4       | 3          | 2019-06-25    | end_session   |\n+---------+------------+---------------+---------------+",
                "Output": "** \n+------------+--------------+ \n| day        | active_users |\n+------------+--------------+ \n| 2019-07-20 | 2            |\n| 2019-07-21 | 2            |\n+------------+--------------+",
                "Explanation": "** Note that we do not care about days with zero active users."
            }
        ]
    },
    {
        "Title": "Longest Common Subsequence",
        "slug": "longest-common-subsequence",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** text1 = \"abcde\", text2 = \"ace\"",
                "Output": "** 3",
                "Explanation": "** The longest common subsequence is \"ace\" and its length is 3."
            },
            {
                "Input": "** text1 = \"abc\", text2 = \"abc\"",
                "Output": "** 3",
                "Explanation": "** The longest common subsequence is \"abc\" and its length is 3."
            },
            {
                "Input": "** text1 = \"abc\", text2 = \"def\"",
                "Output": "** 0",
                "Explanation": "** There is no such common subsequence, so the result is 0."
            }
        ]
    },
    {
        "Title": "Decrease Elements To Make Array Zigzag",
        "slug": "decrease-elements-to-make-array-zigzag",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 2",
                "Explanation": "** We can decrease 2 to 0 or 3 to 1."
            },
            {
                "Input": "** nums = [9,6,1,6,2]",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Binary Tree Coloring Game",
        "slug": "binary-tree-coloring-game",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3",
                "Output": "** true",
                "Explanation": "** The second player can choose the node with value 2."
            }
        ]
    },
    {
        "Title": "Snapshot Array",
        "slug": "snapshot-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** [\"SnapshotArray\",\"set\",\"snap\",\"set\",\"get\"]\n[[3],[0,5],[],[0,6],[0,0]]",
                "Output": "** [null,null,0,null,5]",
                "Explanation": "** \nSnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3\nsnapshotArr.set(0,5);  // Set array[0] = 5\nsnapshotArr.snap();  // Take a snapshot, return snap_id = 0\nsnapshotArr.set(0,6);\nsnapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5"
            }
        ]
    },
    {
        "Title": "Longest Chunked Palindrome Decomposition",
        "slug": "longest-chunked-palindrome-decomposition",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** text = \"ghiabcdefhelloadamhelloabcdefghi\"",
                "Output": "** 7",
                "Explanation": "** We can split the string on \"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)\"."
            },
            {
                "Input": "** text = \"merchant\"",
                "Output": "** 1",
                "Explanation": "** We can split the string on \"(merchant)\"."
            },
            {
                "Input": "** text = \"antaprezatepzapreanta\"",
                "Output": "** 11",
                "Explanation": "** We can split the string on \"(a)(nt)(a)(pre)(za)(tep)(za)(pre)(a)(nt)(a)\"."
            }
        ]
    },
    {
        "Title": "Article Views I",
        "slug": "article-views-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nViews table:\n+------------+-----------+-----------+------------+\n| article_id | author_id | viewer_id | view_date  |\n+------------+-----------+-----------+------------+\n| 1          | 3         | 5         | 2019-08-01 |\n| 1          | 3         | 6         | 2019-08-02 |\n| 2          | 7         | 7         | 2019-08-01 |\n| 2          | 7         | 6         | 2019-08-02 |\n| 4          | 7         | 1         | 2019-07-22 |\n| 3          | 4         | 4         | 2019-07-21 |\n| 3          | 4         | 4         | 2019-07-21 |\n+------------+-----------+-----------+------------+",
                "Output": "** \n+------+\n| id   |\n+------+\n| 4    |\n| 7    |\n+------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Day of the Year",
        "slug": "day-of-the-year",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** date = \"2019-01-09\"",
                "Output": "** 9",
                "Explanation": "** Given date is the 9th day of the year in 2019."
            },
            {
                "Input": "** date = \"2019-02-10\"",
                "Output": "** 41",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Dice Rolls With Target Sum",
        "slug": "number-of-dice-rolls-with-target-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 1, k = 6, target = 3",
                "Output": "** 1",
                "Explanation": "** You throw one die with 6 faces.\nThere is only one way to get a sum of 3."
            },
            {
                "Input": "** n = 2, k = 6, target = 7",
                "Output": "** 6",
                "Explanation": "** You throw two dice, each with 6 faces.\nThere are 6 ways to get a sum of 7: 1+6, 2+5, 3+4, 4+3, 5+2, 6+1."
            },
            {
                "Input": "** n = 30, k = 30, target = 500",
                "Output": "** 222616187",
                "Explanation": "** The answer must be returned modulo 109 + 7."
            }
        ]
    },
    {
        "Title": "Swap For Longest Repeated Character Substring",
        "slug": "swap-for-longest-repeated-character-substring",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** text = \"ababa\"",
                "Output": "** 3",
                "Explanation": "** We can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. Then, the longest repeated character substring is \"aaa\" with length 3."
            },
            {
                "Input": "** text = \"aaabaaa\"",
                "Output": "** 6",
                "Explanation": "** Swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring \"aaaaaa\" with length 6."
            },
            {
                "Input": "** text = \"aaaaa\"",
                "Output": "** 5",
                "Explanation": "** No need to swap, longest repeated character substring is \"aaaaa\" with length is 5."
            }
        ]
    },
    {
        "Title": "Online Majority Element In Subarray",
        "slug": "online-majority-element-in-subarray",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"MajorityChecker\", \"query\", \"query\", \"query\"]\n[[[1, 1, 2, 2, 1, 1]], [0, 5, 4], [0, 3, 3], [2, 3, 2]]",
                "Output": "[null, 1, -1, 2]",
                "Explanation": "MajorityChecker majorityChecker = new MajorityChecker([1, 1, 2, 2, 1, 1]);\nmajorityChecker.query(0, 5, 4); // return 1\nmajorityChecker.query(0, 3, 3); // return -1\nmajorityChecker.query(2, 3, 2); // return 2"
            }
        ]
    },
    {
        "Title": "Market Analysis I",
        "slug": "market-analysis-i",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nUsers table:\n+---------+------------+----------------+\n| user_id | join_date  | favorite_brand |\n+---------+------------+----------------+\n| 1       | 2018-01-01 | Lenovo         |\n| 2       | 2018-02-09 | Samsung        |\n| 3       | 2018-01-19 | LG             |\n| 4       | 2018-05-21 | HP             |\n+---------+------------+----------------+\nOrders table:\n+----------+------------+---------+----------+-----------+\n| order_id | order_date | item_id | buyer_id | seller_id |\n+----------+------------+---------+----------+-----------+\n| 1        | 2019-08-01 | 4       | 1        | 2         |\n| 2        | 2018-08-02 | 2       | 1        | 3         |\n| 3        | 2019-08-03 | 3       | 2        | 3         |\n| 4        | 2018-08-04 | 1       | 4        | 2         |\n| 5        | 2018-08-04 | 1       | 3        | 4         |\n| 6        | 2019-08-05 | 2       | 2        | 4         |\n+----------+------------+---------+----------+-----------+\nItems table:\n+---------+------------+\n| item_id | item_brand |\n+---------+------------+\n| 1       | Samsung    |\n| 2       | Lenovo     |\n| 3       | LG         |\n| 4       | HP         |\n+---------+------------+",
                "Output": "** \n+-----------+------------+----------------+\n| buyer_id  | join_date  | orders_in_2019 |\n+-----------+------------+----------------+\n| 1         | 2018-01-01 | 1              |\n| 2         | 2018-02-09 | 2              |\n| 3         | 2018-01-19 | 0              |\n| 4         | 2018-05-21 | 0              |\n+-----------+------------+----------------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Words That Can Be Formed by Characters",
        "slug": "find-words-that-can-be-formed-by-characters",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** words = [\"cat\",\"bt\",\"hat\",\"tree\"], chars = \"atach\"",
                "Output": "** 6",
                "Explanation": "** The strings that can be formed are \"cat\" and \"hat\" so the answer is 3 + 3 = 6."
            },
            {
                "Input": "** words = [\"hello\",\"world\",\"leetcode\"], chars = \"welldonehoneyr\"",
                "Output": "** 10",
                "Explanation": "** The strings that can be formed are \"hello\" and \"world\" so the answer is 5 + 5 = 10."
            }
        ]
    },
    {
        "Title": "Maximum Level Sum of a Binary Tree",
        "slug": "maximum-level-sum-of-a-binary-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,7,0,7,-8,null,null]",
                "Output": "** 2",
                "Explanation": "** \nLevel 1 sum = 1.\nLevel 2 sum = 7 + 0 = 7.\nLevel 3 sum = 7 + -8 = -1.\nSo we return the level with the maximum sum which is level 2."
            }
        ]
    },
    {
        "Title": "As Far from Land as Possible",
        "slug": "as-far-from-land-as-possible",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[1,0,1],[0,0,0],[1,0,1]]",
                "Output": "** 2",
                "Explanation": "** The cell (1, 1) is as far as possible from all the land with distance 2."
            },
            {
                "Input": "** grid = [[1,0,0],[0,0,0],[0,0,0]]",
                "Output": "** 4",
                "Explanation": "** The cell (2, 2) is as far as possible from all the land with distance 4."
            }
        ]
    },
    {
        "Title": "Last Substring in Lexicographical Order",
        "slug": "last-substring-in-lexicographical-order",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"abab\"",
                "Output": "** \"bab\"",
                "Explanation": "** The substrings are [\"a\", \"ab\", \"aba\", \"abab\", \"b\", \"ba\", \"bab\"]. The lexicographically maximum substring is \"bab\"."
            },
            {
                "Input": "** s = \"leetcode\"",
                "Output": "** \"tcode\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Product Price at a Given Date",
        "slug": "product-price-at-a-given-date",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nProducts table:\n+------------+-----------+-------------+\n| product_id | new_price | change_date |\n+------------+-----------+-------------+\n| 1          | 20        | 2019-08-14  |\n| 2          | 50        | 2019-08-14  |\n| 1          | 30        | 2019-08-15  |\n| 1          | 35        | 2019-08-16  |\n| 2          | 65        | 2019-08-17  |\n| 3          | 20        | 2019-08-18  |\n+------------+-----------+-------------+",
                "Output": "** \n+------------+-------+\n| product_id | price |\n+------------+-------+\n| 2          | 50    |\n| 1          | 35    |\n| 3          | 10    |\n+------------+-------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Invalid Transactions",
        "slug": "invalid-transactions",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** transactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]",
                "Output": "** [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]",
                "Explanation": "** The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too."
            },
            {
                "Input": "** transactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"]",
                "Output": "** [\"alice,50,1200,mtv\"]",
                "Explanation": null
            },
            {
                "Input": "** transactions = [\"alice,20,800,mtv\",\"bob,50,1200,mtv\"]",
                "Output": "** [\"bob,50,1200,mtv\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Compare Strings by Frequency of the Smallest Character",
        "slug": "compare-strings-by-frequency-of-the-smallest-character",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** queries = [\"cbd\"], words = [\"zaaaz\"]",
                "Output": "** [1]",
                "Explanation": "** On the first query we have f(\"cbd\") = 1, f(\"zaaaz\") = 3 so f(\"cbd\") < f(\"zaaaz\")."
            },
            {
                "Input": "** queries = [\"bbb\",\"cc\"], words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]",
                "Output": "** [1,2]",
                "Explanation": "** On the first query only f(\"bbb\") < f(\"aaaa\"). On the second query both f(\"aaa\") and f(\"aaaa\") are both > f(\"cc\")."
            }
        ]
    },
    {
        "Title": "Remove Zero Sum Consecutive Nodes from Linked List",
        "slug": "remove-zero-sum-consecutive-nodes-from-linked-list",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [1,2,-3,3,1]",
                "Output": "** [3,1]\n**Note:** The answer [1,2,1] would also be accepted.",
                "Explanation": null
            },
            {
                "Input": "** head = [1,2,3,-3,4]",
                "Output": "** [1,2,4]",
                "Explanation": null
            },
            {
                "Input": "** head = [1,2,3,-3,-2]",
                "Output": "** [1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Dinner Plate Stacks",
        "slug": "dinner-plate-stacks",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"DinnerPlates\", \"push\", \"push\", \"push\", \"push\", \"push\", \"popAtStack\", \"push\", \"push\", \"popAtStack\", \"popAtStack\", \"pop\", \"pop\", \"pop\", \"pop\", \"pop\"]\n[[2], [1], [2], [3], [4], [5], [0], [20], [21], [0], [2], [], [], [], [], []]",
                "Output": "[null, null, null, null, null, null, 2, null, null, 20, 21, 5, 4, 3, 1, -1]",
                "Explanation": "** \nDinnerPlates D = DinnerPlates(2);  // Initialize with capacity = 2\nD.push(1);\nD.push(2);\nD.push(3);\nD.push(4);\nD.push(5);         // The stacks are now:  2  4\n                                           1  3  5\n                                           \ufe48 \ufe48 \ufe48\nD.popAtStack(0);   // Returns 2.  The stacks are now:     4\n                                                       1  3  5\n                                                       \ufe48 \ufe48 \ufe48\nD.push(20);        // The stacks are now: 20  4\n                                           1  3  5\n                                           \ufe48 \ufe48 \ufe48\nD.push(21);        // The stacks are now: 20  4 21\n                                           1  3  5\n                                           \ufe48 \ufe48 \ufe48\nD.popAtStack(0);   // Returns 20.  The stacks are now:     4 21\n                                                        1  3  5\n                                                        \ufe48 \ufe48 \ufe48\nD.popAtStack(2);   // Returns 21.  The stacks are now:     4\n                                                        1  3  5\n                                                        \ufe48 \ufe48 \ufe48 \nD.pop()            // Returns 5.  The stacks are now:      4\n                                                        1  3 \n                                                        \ufe48 \ufe48  \nD.pop()            // Returns 4.  The stacks are now:   1  3 \n                                                        \ufe48 \ufe48   \nD.pop()            // Returns 3.  The stacks are now:   1 \n                                                        \ufe48   \nD.pop()            // Returns 1.  There are no stacks.\nD.pop()            // Returns -1.  There are still no stacks."
            }
        ]
    },
    {
        "Title": "Immediate Food Delivery II",
        "slug": "immediate-food-delivery-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nDelivery table:\n+-------------+-------------+------------+-----------------------------+\n| delivery_id | customer_id | order_date | customer_pref_delivery_date |\n+-------------+-------------+------------+-----------------------------+\n| 1           | 1           | 2019-08-01 | 2019-08-02                  |\n| 2           | 2           | 2019-08-02 | 2019-08-02                  |\n| 3           | 1           | 2019-08-11 | 2019-08-12                  |\n| 4           | 3           | 2019-08-24 | 2019-08-24                  |\n| 5           | 3           | 2019-08-21 | 2019-08-22                  |\n| 6           | 2           | 2019-08-11 | 2019-08-13                  |\n| 7           | 4           | 2019-08-09 | 2019-08-09                  |\n+-------------+-------------+------------+-----------------------------+",
                "Output": "** \n+----------------------+\n| immediate_percentage |\n+----------------------+\n| 50.00                |\n+----------------------+",
                "Explanation": "** \nThe customer id 1 has a first order with delivery id 1 and it is scheduled.\nThe customer id 2 has a first order with delivery id 2 and it is immediate.\nThe customer id 3 has a first order with delivery id 5 and it is scheduled.\nThe customer id 4 has a first order with delivery id 7 and it is immediate.\nHence, half the customers have immediate first orders."
            }
        ]
    },
    {
        "Title": "Prime Arrangements",
        "slug": "prime-arrangements",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 5",
                "Output": "** 12",
                "Explanation": "** For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1."
            },
            {
                "Input": "** n = 100",
                "Output": "** 682289015",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Can Make Palindrome from Substring",
        "slug": "can-make-palindrome-from-substring",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"lyb\", queries = [[0,1,0],[2,2,1]]",
                "Output": "** [false,true]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Valid Words for Each Puzzle",
        "slug": "number-of-valid-words-for-each-puzzle",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** words = [\"aaaa\",\"asas\",\"able\",\"ability\",\"actt\",\"actor\",\"access\"], puzzles = [\"aboveyz\",\"abrodyz\",\"abslute\",\"absoryz\",\"actresz\",\"gaswxyz\"]",
                "Output": "** [1,1,3,2,4,0]",
                "Explanation": "** \n1 valid word for \"aboveyz\" : \"aaaa\" \n1 valid word for \"abrodyz\" : \"aaaa\"\n3 valid words for \"abslute\" : \"aaaa\", \"asas\", \"able\"\n2 valid words for \"absoryz\" : \"aaaa\", \"asas\"\n4 valid words for \"actresz\" : \"aaaa\", \"asas\", \"actt\", \"access\"\nThere are no valid words for \"gaswxyz\" cause none of the words in the list contains letter 'g'."
            },
            {
                "Input": "** words = [\"apple\",\"pleas\",\"please\"], puzzles = [\"aelwxyz\",\"aelpxyz\",\"aelpsxy\",\"saelpxy\",\"xaelpsy\"]",
                "Output": "** [0,1,3,2,0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reformat Department Table",
        "slug": "reformat-department-table",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nDepartment table:\n+------+---------+-------+\n| id   | revenue | month |\n+------+---------+-------+\n| 1    | 8000    | Jan   |\n| 2    | 9000    | Jan   |\n| 3    | 10000   | Feb   |\n| 1    | 7000    | Feb   |\n| 1    | 6000    | Mar   |\n+------+---------+-------+",
                "Output": "** \n+------+-------------+-------------+-------------+-----+-------------+\n| id   | Jan_Revenue | Feb_Revenue | Mar_Revenue | ... | Dec_Revenue |\n+------+-------------+-------------+-------------+-----+-------------+\n| 1    | 8000        | 7000        | 6000        | ... | null        |\n| 2    | 9000        | null        | null        | ... | null        |\n| 3    | null        | 10000       | null        | ... | null        |\n+------+-------------+-------------+-------------+-----+-------------+",
                "Explanation": "** The revenue from Apr to Dec is null.\nNote that the result table has 13 columns (1 for the department id + 12 for the months)."
            }
        ]
    },
    {
        "Title": "Distance Between Bus Stops",
        "slug": "distance-between-bus-stops",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** distance = [1,2,3,4], start = 0, destination = 1",
                "Output": "** 1",
                "Explanation": "** Distance between 0 and 1 is 1 or 9, minimum is 1."
            },
            {
                "Input": "** distance = [1,2,3,4], start = 0, destination = 2",
                "Output": "** 3",
                "Explanation": "** Distance between 0 and 2 is 3 or 7, minimum is 3."
            },
            {
                "Input": "** distance = [1,2,3,4], start = 0, destination = 3",
                "Output": "** 4",
                "Explanation": "** Distance between 0 and 3 is 6 or 4, minimum is 4."
            }
        ]
    },
    {
        "Title": "Day of the Week",
        "slug": "day-of-the-week",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** day = 31, month = 8, year = 2019",
                "Output": "** \"Saturday\"",
                "Explanation": null
            },
            {
                "Input": "** day = 18, month = 7, year = 1999",
                "Output": "** \"Sunday\"",
                "Explanation": null
            },
            {
                "Input": "** day = 15, month = 8, year = 1993",
                "Output": "** \"Sunday\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Subarray Sum with One Deletion",
        "slug": "maximum-subarray-sum-with-one-deletion",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [1,-2,0,3]",
                "Output": "** 4",
                "Explanation": "** Because we can choose [1, -2, 0, 3] and drop -2, thus the subarray [1, 0, 3] becomes the maximum value."
            },
            {
                "Input": "** arr = [1,-2,-2,3]",
                "Output": "** 3",
                "Explanation": "** We just choose [3] and it's the maximum sum."
            },
            {
                "Input": "** arr = [-1,-1,-1,-1]",
                "Output": "** -1",
                "Explanation": "**\u00a0The final subarray needs to be non-empty. You can't choose [-1] and delete -1 from it, then get an empty subarray to make the sum equals to 0."
            }
        ]
    },
    {
        "Title": "Make Array Strictly Increasing",
        "slug": "make-array-strictly-increasing",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]",
                "Output": "** 1",
                "Explanation": "** Replace 5 with 2, then arr1 = [1, 2, 3, 6, 7]."
            },
            {
                "Input": "** arr1 = [1,5,3,6,7], arr2 = [4,3,1]",
                "Output": "** 2",
                "Explanation": "** Replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7]."
            },
            {
                "Input": "** arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]",
                "Output": "** -1",
                "Explanation": "** You can't make arr1 strictly increasing."
            }
        ]
    },
    {
        "Title": "Maximum Number of Balloons",
        "slug": "maximum-number-of-balloons",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** text = \"leetcode\"",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reverse Substrings Between Each Pair of Parentheses",
        "slug": "reverse-substrings-between-each-pair-of-parentheses",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"(abcd)\"",
                "Output": "** \"dcba\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"(u(love)i)\"",
                "Output": "** \"iloveu\"",
                "Explanation": "** The substring \"love\" is reversed first, then the whole string is reversed."
            },
            {
                "Input": "** s = \"(ed(et(oc))el)\"",
                "Output": "** \"leetcode\"",
                "Explanation": "** First, we reverse the substring \"oc\", then \"etco\", and finally, the whole string."
            }
        ]
    },
    {
        "Title": "K-Concatenation Maximum Sum",
        "slug": "k-concatenation-maximum-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [1,2], k = 3",
                "Output": "** 9",
                "Explanation": null
            },
            {
                "Input": "** arr = [1,-2,1], k = 5",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** arr = [-1,-2], k = 7",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Critical Connections in a Network",
        "slug": "critical-connections-in-a-network",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]",
                "Output": "** [[1,3]]",
                "Explanation": "** [[3,1]] is also accepted."
            }
        ]
    },
    {
        "Title": "Monthly Transactions I",
        "slug": "monthly-transactions-i",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nTransactions table:\n+------+---------+----------+--------+------------+\n| id   | country | state    | amount | trans_date |\n+------+---------+----------+--------+------------+\n| 121  | US      | approved | 1000   | 2018-12-18 |\n| 122  | US      | declined | 2000   | 2018-12-19 |\n| 123  | US      | approved | 2000   | 2019-01-01 |\n| 124  | DE      | approved | 2000   | 2019-01-07 |\n+------+---------+----------+--------+------------+",
                "Output": "** \n+----------+---------+-------------+----------------+--------------------+-----------------------+\n| month    | country | trans_count | approved_count | trans_total_amount | approved_total_amount |\n+----------+---------+-------------+----------------+--------------------+-----------------------+\n| 2018-12  | US      | 2           | 1              | 3000               | 1000                  |\n| 2019-01  | US      | 1           | 1              | 2000               | 2000                  |\n| 2019-01  | DE      | 1           | 1              | 2000               | 2000                  |\n+----------+---------+-------------+----------------+--------------------+-----------------------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Fizz Buzz Multithreaded",
        "slug": "fizz-buzz-multithreaded",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 15",
                "Output": "** [1,2,\"fizz\",4,\"buzz\",\"fizz\",7,8,\"fizz\",\"buzz\",11,\"fizz\",13,14,\"fizzbuzz\"]",
                "Explanation": null
            },
            {
                "Input": "** n = 5",
                "Output": "** [1,2,\"fizz\",4,\"buzz\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Absolute Difference",
        "slug": "minimum-absolute-difference",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [4,2,1,3]",
                "Output": "** [[1,2],[2,3],[3,4]]",
                "Explanation": "** The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order."
            },
            {
                "Input": "** arr = [1,3,6,10,15]",
                "Output": "** [[1,3]]",
                "Explanation": null
            },
            {
                "Input": "** arr = [3,8,-10,23,19,-4,-14,27]",
                "Output": "** [[-14,-10],[19,23],[23,27]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Ugly Number III",
        "slug": "ugly-number-iii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3, a = 2, b = 3, c = 5",
                "Output": "** 4",
                "Explanation": "** The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4."
            },
            {
                "Input": "** n = 4, a = 2, b = 3, c = 4",
                "Output": "** 6",
                "Explanation": "** The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6."
            },
            {
                "Input": "** n = 5, a = 2, b = 11, c = 13",
                "Output": "** 10",
                "Explanation": "** The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5th is 10."
            }
        ]
    },
    {
        "Title": "Smallest String With Swaps",
        "slug": "smallest-string-with-swaps",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"dcab\", pairs = [[0,3],[1,2]]",
                "Output": "** \"bacd\"\n**Explaination:** \nSwap s[0] and s[3], s = \"bcad\"\nSwap s[1] and s[2], s = \"bacd\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"dcab\", pairs = [[0,3],[1,2],[0,2]]",
                "Output": "** \"abcd\"\n**Explaination:** \nSwap s[0] and s[3], s = \"bcad\"\nSwap s[0] and s[2], s = \"acbd\"\nSwap s[1] and s[2], s = \"abcd\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"cba\", pairs = [[0,1],[1,2]]",
                "Output": "** \"abc\"\n**Explaination:** \nSwap s[0] and s[1], s = \"bca\"\nSwap s[1] and s[2], s = \"bac\"\nSwap s[0] and s[1], s = \"abc\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sort Items by Groups Respecting Dependencies",
        "slug": "sort-items-by-groups-respecting-dependencies",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]]",
                "Output": "** []",
                "Explanation": "**\u00a0This is the same as example 1 except that 4 needs to be before 6 in the sorted list."
            }
        ]
    },
    {
        "Title": "Last Person to Fit in the Bus",
        "slug": "last-person-to-fit-in-the-bus",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nQueue table:\n+-----------+-------------+--------+------+\n| person_id | person_name | weight | turn |\n+-----------+-------------+--------+------+\n| 5         | Alice       | 250    | 1    |\n| 4         | Bob         | 175    | 5    |\n| 3         | Alex        | 350    | 2    |\n| 6         | John Cena   | 400    | 3    |\n| 1         | Winston     | 500    | 6    |\n| 2         | Marie       | 200    | 4    |\n+-----------+-------------+--------+------+",
                "Output": "** \n+-------------+\n| person_name |\n+-------------+\n| John Cena   |\n+-------------+",
                "Explanation": "** The folowing table is ordered by the turn for simplicity.\n+------+----+-----------+--------+--------------+\n| Turn | ID | Name      | Weight | Total Weight |\n+------+----+-----------+--------+--------------+\n| 1    | 5  | Alice     | 250    | 250          |\n| 2    | 3  | Alex      | 350    | 600          |\n| 3    | 6  | John Cena | 400    | 1000         | (last person to board)\n| 4    | 2  | Marie     | 200    | 1200         | (cannot board)\n| 5    | 4  | Bob       | 175    | ___          |\n| 6    | 1  | Winston   | 500    | ___          |\n+------+----+-----------+--------+--------------+"
            }
        ]
    },
    {
        "Title": "Design Skiplist",
        "slug": "design-skiplist",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"Skiplist\", \"add\", \"add\", \"add\", \"search\", \"add\", \"search\", \"erase\", \"erase\", \"search\"]\n[[], [1], [2], [3], [0], [4], [1], [0], [1], [1]]",
                "Output": "[null, null, null, null, false, null, true, false, true, false]",
                "Explanation": "Skiplist skiplist = new Skiplist();\nskiplist.add(1);\nskiplist.add(2);\nskiplist.add(3);\nskiplist.search(0); // return False\nskiplist.add(4);\nskiplist.search(1); // return True\nskiplist.erase(0);  // return False, 0 is not in skiplist.\nskiplist.erase(1);  // return True\nskiplist.search(1); // return False, 1 has already been erased."
            }
        ]
    },
    {
        "Title": "Unique Number of Occurrences",
        "slug": "unique-number-of-occurrences",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [1,2,2,1,1,3]",
                "Output": "** true",
                "Explanation": "**\u00a0The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences."
            },
            {
                "Input": "** arr = [1,2]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** arr = [-3,0,1,-3,1,1,1,-3,10,0]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Get Equal Substrings Within Budget",
        "slug": "get-equal-substrings-within-budget",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"abcd\", t = \"bcdf\", maxCost = 3",
                "Output": "** 3",
                "Explanation": "** \"abc\" of s can change to \"bcd\".\nThat costs 3, so the maximum length is 3."
            },
            {
                "Input": "** s = \"abcd\", t = \"cdef\", maxCost = 3",
                "Output": "** 1",
                "Explanation": "** Each character in s costs 2 to change to character in t,  so the maximum length is 1."
            },
            {
                "Input": "** s = \"abcd\", t = \"acde\", maxCost = 0",
                "Output": "** 1",
                "Explanation": "** You cannot make any change, so the maximum length is 1."
            }
        ]
    },
    {
        "Title": "Remove All Adjacent Duplicates in String II",
        "slug": "remove-all-adjacent-duplicates-in-string-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"abcd\", k = 2",
                "Output": "** \"abcd\"",
                "Explanation": "** There's nothing to delete."
            },
            {
                "Input": "** s = \"deeedbbcccbdaa\", k = 3",
                "Output": "** \"aa\"",
                "Explanation": "**First delete \"eee\" and \"ccc\", get \"ddbbbdaa\"\nThen delete \"bbb\", get \"dddaa\"\nFinally delete \"ddd\", get \"aa\""
            },
            {
                "Input": "** s = \"pbbcggttciiippooaais\", k = 2",
                "Output": "** \"ps\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Moves to Reach Target with Rotations",
        "slug": "minimum-moves-to-reach-target-with-rotations",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [[0,0,1,1,1,1],\n\u00a0              [0,0,0,0,1,1],\n\u00a0              [1,1,0,0,0,1],\n\u00a0              [1,1,1,0,0,1],\n\u00a0              [1,1,1,0,0,1],\n\u00a0              [1,1,1,0,0,0]]",
                "Output": "** 9",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Queries Quality and Percentage",
        "slug": "queries-quality-and-percentage",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nQueries table:\n+------------+-------------------+----------+--------+\n| query_name | result            | position | rating |\n+------------+-------------------+----------+--------+\n| Dog        | Golden Retriever  | 1        | 5      |\n| Dog        | German Shepherd   | 2        | 5      |\n| Dog        | Mule              | 200      | 1      |\n| Cat        | Shirazi           | 5        | 2      |\n| Cat        | Siamese           | 3        | 3      |\n| Cat        | Sphynx            | 7        | 4      |\n+------------+-------------------+----------+--------+",
                "Output": "** \n+------------+---------+-----------------------+\n| query_name | quality | poor_query_percentage |\n+------------+---------+-----------------------+\n| Dog        | 2.50    | 33.33                 |\n| Cat        | 0.66    | 33.33                 |\n+------------+---------+-----------------------+",
                "Explanation": "** \nDog queries quality is ((5 / 1) + (5 / 2) + (1 / 200)) / 3 = 2.50\nDog queries poor_ query_percentage is (1 / 3) * 100 = 33.33\n\nCat queries quality equals ((2 / 5) + (3 / 3) + (4 / 7)) / 3 = 0.66\nCat queries poor_ query_percentage is (1 / 3) * 100 = 33.33"
            }
        ]
    },
    {
        "Title": "Minimum Cost to Move Chips to The Same Position",
        "slug": "minimum-cost-to-move-chips-to-the-same-position",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** position = [1,2,3]",
                "Output": "** 1",
                "Explanation": "** First step: Move the chip at position 3 to position 1 with cost = 0.\nSecond step: Move the chip at position 2 to position 1 with cost = 1.\nTotal cost is 1."
            },
            {
                "Input": "** position = [2,2,2,3,3]",
                "Output": "** 2",
                "Explanation": "** We can move the two chips at position  3 to position 2. Each move has cost = 1. The total cost = 2."
            }
        ]
    },
    {
        "Title": "Longest Arithmetic Subsequence of Given Difference",
        "slug": "longest-arithmetic-subsequence-of-given-difference",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [1,2,3,4], difference = 1",
                "Output": "** 4",
                "Explanation": "** The longest arithmetic subsequence is [1,2,3,4]."
            },
            {
                "Input": "** arr = [1,3,5,7], difference = 1",
                "Output": "** 1",
                "Explanation": "** The longest arithmetic subsequence is any single element."
            },
            {
                "Input": "** arr = [1,5,7,8,5,3,4,2,1], difference = -2",
                "Output": "** 4",
                "Explanation": "** The longest arithmetic subsequence is [7,5,3,1]."
            }
        ]
    },
    {
        "Title": "Path with Maximum Gold",
        "slug": "path-with-maximum-gold",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[0,6,0],[5,8,7],[0,9,0]]",
                "Output": "** 24",
                "Explanation": "**\n[[0,6,0],\n [5,8,7],\n [0,9,0]]\nPath to get the maximum gold, 9 -> 8 -> 7."
            },
            {
                "Input": "** grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]",
                "Output": "** 28",
                "Explanation": "**\n[[1,0,7],\n [2,0,6],\n [3,4,5],\n [0,3,0],\n [9,0,20]]\nPath to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7."
            }
        ]
    },
    {
        "Title": "Count Vowels Permutation",
        "slug": "count-vowels-permutation",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** 5",
                "Explanation": "** All possible strings are: \"a\", \"e\", \"i\" , \"o\" and \"u\"."
            },
            {
                "Input": "** n = 2",
                "Output": "** 10",
                "Explanation": "** All possible strings are: \"ae\", \"ea\", \"ei\", \"ia\", \"ie\", \"io\", \"iu\", \"oi\", \"ou\" and \"ua\"."
            },
            {
                "Input": "** n = 5",
                "Output": "** 68",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Split a String in Balanced Strings",
        "slug": "split-a-string-in-balanced-strings",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"RLRRLLRLRL\"",
                "Output": "** 4",
                "Explanation": "** s can be split into \"RL\", \"RRLL\", \"RL\", \"RL\", each substring contains same number of 'L' and 'R'."
            },
            {
                "Input": "** s = \"RLRRRLLRLL\"",
                "Output": "** 2",
                "Explanation": "** s can be split into \"RL\", \"RRRLLRLL\", each substring contains same number of 'L' and 'R'.\nNote that s cannot be split into \"RL\", \"RR\", \"RL\", \"LR\", \"LL\", because the 2nd and 5th substrings are not balanced."
            },
            {
                "Input": "** s = \"LLLLRRRR\"",
                "Output": "** 1",
                "Explanation": "** s can be split into \"LLLLRRRR\"."
            }
        ]
    },
    {
        "Title": "Queens That Can Attack the King",
        "slug": "queens-that-can-attack-the-king",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]",
                "Output": "** [[0,1],[1,0],[3,3]]",
                "Explanation": "** The diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king (i.e., marked with red dashes)."
            },
            {
                "Input": "** queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]",
                "Output": "** [[2,2],[3,4],[4,4]]",
                "Explanation": "** The diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king (i.e., marked with red dashes)."
            }
        ]
    },
    {
        "Title": "Dice Roll Simulation",
        "slug": "dice-roll-simulation",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 2, rollMax = [1,1,2,2,2,3]",
                "Output": "** 34",
                "Explanation": "** There will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34."
            },
            {
                "Input": "** n = 2, rollMax = [1,1,1,1,1,1]",
                "Output": "** 30",
                "Explanation": null
            },
            {
                "Input": "** n = 3, rollMax = [1,1,1,2,2,3]",
                "Output": "** 181",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Equal Frequency",
        "slug": "maximum-equal-frequency",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [2,2,1,1,5,3,3,5]",
                "Output": "** 7",
                "Explanation": "** For the subarray [2,2,1,1,5,3,3] of length 7, if we remove nums[4] = 5, we will get [2,2,1,1,3,3], so that each number will appear exactly twice."
            },
            {
                "Input": "** nums = [1,1,1,2,2,2,3,3,3,4,4,4,5]",
                "Output": "** 13",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "The Dining Philosophers",
        "slug": "the-dining-philosophers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** [[4,2,1],[4,1,1],[0,1,1],[2,2,1],[2,1,1],[2,0,3],[2,1,2],[2,2,2],[4,0,3],[4,1,2],[0,2,1],[4,2,2],[3,2,1],[3,1,1],[0,0,3],[0,1,2],[0,2,2],[1,2,1],[1,1,1],[3,0,3],[3,1,2],[3,2,2],[1,0,3],[1,1,2],[1,2,2]]",
                "Explanation": "**\nn is the number of times each philosopher will call the function.\nThe output array describes the calls you made to the functions controlling the forks and the eat function, its format is:\noutput[i] = [a, b, c] (three integers)\n- a is the id of a philosopher.\n- b specifies the fork: {1 : left, 2 : right}.\n- c specifies the operation: {1 : pick, 2 : put, 3 : eat}."
            }
        ]
    },
    {
        "Title": "Airplane Seat Assignment Probability",
        "slug": "airplane-seat-assignment-probability",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** 1.00000",
                "Explanation": "** The first person can only get the first seat."
            },
            {
                "Input": "** n = 2",
                "Output": "** 0.50000",
                "Explanation": "** The second person has a probability of 0.5 to get the second seat (when first person gets the first seat)."
            }
        ]
    },
    {
        "Title": "Check If It Is a Straight Line",
        "slug": "check-if-it-is-a-straight-line",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove Sub-Folders from the Filesystem",
        "slug": "remove-sub-folders-from-the-filesystem",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** folder = [\"/a\",\"/a/b\",\"/c/d\",\"/c/d/e\",\"/c/f\"]",
                "Output": "** [\"/a\",\"/c/d\",\"/c/f\"]",
                "Explanation": "** Folders \"/a/b\" is a subfolder of \"/a\" and \"/c/d/e\" is inside of folder \"/c/d\" in our filesystem."
            },
            {
                "Input": "** folder = [\"/a\",\"/a/b/c\",\"/a/b/d\"]",
                "Output": "** [\"/a\"]",
                "Explanation": "** Folders \"/a/b/c\" and \"/a/b/d\" will be removed because they are subfolders of \"/a\"."
            },
            {
                "Input": "** folder = [\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]",
                "Output": "** [\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Replace the Substring for Balanced String",
        "slug": "replace-the-substring-for-balanced-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"QWER\"",
                "Output": "** 0",
                "Explanation": "** s is already balanced."
            },
            {
                "Input": "** s = \"QQWE\"",
                "Output": "** 1",
                "Explanation": "** We need to replace a 'Q' to 'R', so that \"RQWE\" (or \"QRWE\") is balanced."
            },
            {
                "Input": "** s = \"QQQW\"",
                "Output": "** 2",
                "Explanation": "** We can replace the first \"QQ\" to \"ER\"."
            }
        ]
    },
    {
        "Title": "Find Positive Integer Solution for a Given Equation",
        "slug": "find-positive-integer-solution-for-a-given-equation",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** function_id = 1, z = 5",
                "Output": "** [[1,4],[2,3],[3,2],[4,1]]",
                "Explanation": "** The hidden formula for function_id = 1 is f(x, y) = x + y.\nThe following positive integer values of x and y make f(x, y) equal to 5:\nx=1, y=4 -> f(1, 4) = 1 + 4 = 5.\nx=2, y=3 -> f(2, 3) = 2 + 3 = 5.\nx=3, y=2 -> f(3, 2) = 3 + 2 = 5.\nx=4, y=1 -> f(4, 1) = 4 + 1 = 5."
            },
            {
                "Input": "** function_id = 2, z = 5",
                "Output": "** [[1,5],[5,1]]",
                "Explanation": "** The hidden formula for function_id = 2 is f(x, y) = x * y.\nThe following positive integer values of x and y make f(x, y) equal to 5:\nx=1, y=5 -> f(1, 5) = 1 * 5 = 5.\nx=5, y=1 -> f(5, 1) = 5 * 1 = 5."
            }
        ]
    },
    {
        "Title": "Circular Permutation in Binary Representation",
        "slug": "circular-permutation-in-binary-representation",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 2, start = 3",
                "Output": "** [3,2,0,1]",
                "Explanation": "** The binary representation of the permutation is (11,10,00,01). \r\nAll the adjacent element differ by one bit. Another valid permutation is [3,1,0,2]"
            },
            {
                "Input": "** n = 3, start = 2",
                "Output": "** [2,6,7,5,4,0,1,3]",
                "Explanation": "** The binary representation of the permutation is (010,110,111,101,100,000,001,011)."
            }
        ]
    },
    {
        "Title": "Maximum Length of a Concatenated String with Unique Characters",
        "slug": "maximum-length-of-a-concatenated-string-with-unique-characters",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [\"un\",\"iq\",\"ue\"]",
                "Output": "** 4",
                "Explanation": "** All the valid concatenations are:\n- \"\"\n- \"un\"\n- \"iq\"\n- \"ue\"\n- \"uniq\" (\"un\" + \"iq\")\n- \"ique\" (\"iq\" + \"ue\")\nMaximum length is 4."
            },
            {
                "Input": "** arr = [\"cha\",\"r\",\"act\",\"ers\"]",
                "Output": "** 6",
                "Explanation": "** Possible longest valid concatenations are \"chaers\" (\"cha\" + \"ers\") and \"acters\" (\"act\" + \"ers\")."
            },
            {
                "Input": "** arr = [\"abcdefghijklmnopqrstuvwxyz\"]",
                "Output": "** 26",
                "Explanation": "** The only string in arr has all 26 characters."
            }
        ]
    },
    {
        "Title": "Tiling a Rectangle with the Fewest Squares",
        "slug": "tiling-a-rectangle-with-the-fewest-squares",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 2, m = 3",
                "Output": "** 3",
                "Explanation": "** 3 squares are necessary to cover the rectangle.\n2 (squares of 1x1)\n1 (square of 2x2)"
            },
            {
                "Input": "** n = 5, m = 8",
                "Output": "** 5",
                "Explanation": null
            },
            {
                "Input": "** n = 11, m = 13",
                "Output": "** 6",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Swaps to Make Strings Equal",
        "slug": "minimum-swaps-to-make-strings-equal",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s1 = \"xx\", s2 = \"yy\"",
                "Output": "** 1",
                "Explanation": "** Swap s1[0] and s2[1], s1 = \"yx\", s2 = \"yx\"."
            },
            {
                "Input": "** s1 = \"xy\", s2 = \"yx\"",
                "Output": "** 2",
                "Explanation": "** Swap s1[0] and s2[0], s1 = \"yy\", s2 = \"xx\".\nSwap s1[0] and s2[1], s1 = \"xy\", s2 = \"xy\".\nNote that you cannot swap s1[0] and s1[1] to make s1 equal to \"yx\", cause we can only swap chars in different strings."
            },
            {
                "Input": "** s1 = \"xx\", s2 = \"xy\"",
                "Output": "** -1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count Number of Nice Subarrays",
        "slug": "count-number-of-nice-subarrays",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,1,2,1,1], k = 3",
                "Output": "** 2",
                "Explanation": "** The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1]."
            },
            {
                "Input": "** nums = [2,4,6], k = 1",
                "Output": "** 0",
                "Explanation": "** There is no odd numbers in the array."
            },
            {
                "Input": "** nums = [2,2,2,1,2,2,1,2,2,2], k = 2",
                "Output": "** 16",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Remove to Make Valid Parentheses",
        "slug": "minimum-remove-to-make-valid-parentheses",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"lee(t(c)o)de)\"",
                "Output": "** \"lee(t(c)o)de\"",
                "Explanation": "** \"lee(t(co)de)\" , \"lee(t(c)ode)\" would also be accepted."
            },
            {
                "Input": "** s = \"a)b(c)d\"",
                "Output": "** \"ab(c)d\"",
                "Explanation": null
            },
            {
                "Input": "** s = \"))((\"",
                "Output": "** \"\"",
                "Explanation": "** An empty string is also valid."
            }
        ]
    },
    {
        "Title": "Check If It Is a Good Array",
        "slug": "check-if-it-is-a-good-array",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [12,5,7,23]",
                "Output": "** true",
                "Explanation": "** Pick numbers 5 and 7.\n5*3 + 7*(-2) = 1"
            },
            {
                "Input": "** nums = [29,6,10]",
                "Output": "** true",
                "Explanation": "** Pick numbers 29, 6 and 10.\n29*1 + 6*(-3) + 10*(-1) = 1"
            },
            {
                "Input": "** nums = [3,6]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Average Selling Price",
        "slug": "average-selling-price",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nPrices table:\n+------------+------------+------------+--------+\n| product_id | start_date | end_date   | price  |\n+------------+------------+------------+--------+\n| 1          | 2019-02-17 | 2019-02-28 | 5      |\n| 1          | 2019-03-01 | 2019-03-22 | 20     |\n| 2          | 2019-02-01 | 2019-02-20 | 15     |\n| 2          | 2019-02-21 | 2019-03-31 | 30     |\n+------------+------------+------------+--------+\nUnitsSold table:\n+------------+---------------+-------+\n| product_id | purchase_date | units |\n+------------+---------------+-------+\n| 1          | 2019-02-25    | 100   |\n| 1          | 2019-03-01    | 15    |\n| 2          | 2019-02-10    | 200   |\n| 2          | 2019-03-22    | 30    |\n+------------+---------------+-------+",
                "Output": "** \n+------------+---------------+\n| product_id | average_price |\n+------------+---------------+\n| 1          | 6.96          |\n| 2          | 16.96         |\n+------------+---------------+",
                "Explanation": "** \nAverage selling price = Total Price of Product / Number of products sold.\nAverage selling price for product 1 = ((100 * 5) + (15 * 20)) / 115 = 6.96\nAverage selling price for product 2 = ((200 * 15) + (30 * 30)) / 230 = 16.96"
            }
        ]
    },
    {
        "Title": "Cells with Odd Values in a Matrix",
        "slug": "cells-with-odd-values-in-a-matrix",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** m = 2, n = 3, indices = [[0,1],[1,1]]",
                "Output": "** 6",
                "Explanation": "** Initial matrix = [[0,0,0],[0,0,0]].\nAfter applying first increment it becomes [[1,2,1],[0,1,0]].\nThe final matrix is [[1,3,1],[1,3,1]], which contains 6 odd numbers."
            },
            {
                "Input": "** m = 2, n = 2, indices = [[1,1],[0,0]]",
                "Output": "** 0",
                "Explanation": "** Final matrix = [[2,2],[2,2]]. There are no odd numbers in the final matrix."
            }
        ]
    },
    {
        "Title": "Reconstruct a 2-Row Binary Matrix",
        "slug": "reconstruct-a-2-row-binary-matrix",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** upper = 2, lower = 1, colsum = [1,1,1]",
                "Output": "** [[1,1,0],[0,0,1]]",
                "Explanation": "** [[1,0,1],[0,1,0]], and [[0,1,1],[1,0,0]] are also correct answers."
            },
            {
                "Input": "** upper = 2, lower = 3, colsum = [2,2,1,1]",
                "Output": "** []",
                "Explanation": null
            },
            {
                "Input": "** upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1]",
                "Output": "** [[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Closed Islands",
        "slug": "number-of-closed-islands",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]",
                "Output": "** 2",
                "Explanation": "** \nIslands in gray are closed because they are completely surrounded by water (group of 1s)."
            },
            {
                "Input": "** grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Score Words Formed by Letters",
        "slug": "maximum-score-words-formed-by-letters",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** words = [\"dog\",\"cat\",\"dad\",\"good\"], letters = [\"a\",\"a\",\"c\",\"d\",\"d\",\"d\",\"g\",\"o\",\"o\"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]",
                "Output": "** 23",
                "Explanation": "**\nScore  a=1, c=9, d=5, g=3, o=2\nGiven letters, we can form the words \"dad\" (5+1+5) and \"good\" (3+2+2+5) with a score of 23.\nWords \"dad\" and \"dog\" only get a score of 21."
            },
            {
                "Input": "** words = [\"xxxz\",\"ax\",\"bx\",\"cx\"], letters = [\"z\",\"a\",\"b\",\"c\",\"x\",\"x\",\"x\"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]",
                "Output": "** 27",
                "Explanation": "**\nScore  a=4, b=4, c=4, x=5, z=10\nGiven letters, we can form the words \"ax\" (4+5), \"bx\" (4+5) and \"cx\" (4+5) with a score of 27.\nWord \"xxxz\" only get a score of 25."
            },
            {
                "Input": "** words = [\"leetcode\"], letters = [\"l\",\"e\",\"t\",\"c\",\"o\",\"d\"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]",
                "Output": "** 0",
                "Explanation": "**\nLetter \"e\" can only be used once."
            }
        ]
    },
    {
        "Title": "Shift 2D Grid",
        "slug": "shift-2d-grid",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1",
                "Output": "** [[9,1,2],[3,4,5],[6,7,8]]",
                "Explanation": null
            },
            {
                "Input": "** grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4",
                "Output": "** [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Elements in a Contaminated Binary Tree",
        "slug": "find-elements-in-a-contaminated-binary-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"FindElements\",\"find\",\"find\"]\n[[[-1,null,-1]],[1],[2]]",
                "Output": "[null,false,true]",
                "Explanation": "FindElements findElements = new FindElements([-1,null,-1]); \nfindElements.find(1); // return False \nfindElements.find(2); // return True"
            },
            {
                "Input": "[\"FindElements\",\"find\",\"find\",\"find\"]\n[[[-1,-1,-1,-1,-1]],[1],[3],[5]]",
                "Output": "[null,true,true,false]",
                "Explanation": "FindElements findElements = new FindElements([-1,-1,-1,-1,-1]);\nfindElements.find(1); // return True\nfindElements.find(3); // return True\nfindElements.find(5); // return False"
            },
            {
                "Input": "[\"FindElements\",\"find\",\"find\",\"find\",\"find\"]\n[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]",
                "Output": "[null,true,false,false,true]",
                "Explanation": "FindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);\nfindElements.find(2); // return True\nfindElements.find(3); // return False\nfindElements.find(4); // return False\nfindElements.find(5); // return True"
            }
        ]
    },
    {
        "Title": "Greatest Sum Divisible by Three",
        "slug": "greatest-sum-divisible-by-three",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,6,5,1,8]",
                "Output": "** 18",
                "Explanation": "** Pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3)."
            },
            {
                "Input": "** nums = [4]",
                "Output": "** 0",
                "Explanation": "** Since 4 is not divisible by 3, do not pick any number."
            },
            {
                "Input": "** nums = [1,2,3,4,4]",
                "Output": "** 12",
                "Explanation": "** Pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3)."
            }
        ]
    },
    {
        "Title": "Minimum Moves to Move a Box to Their Target Location",
        "slug": "minimum-moves-to-move-a-box-to-their-target-location",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\".\",\".\",\"B\",\".\",\"#\"],\n               [\"#\",\".\",\"#\",\"#\",\".\",\"#\"],\n               [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n               [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]",
                "Output": "** 3",
                "Explanation": "** We return only the number of times the box is pushed."
            }
        ]
    },
    {
        "Title": "Minimum Time Visiting All Points",
        "slug": "minimum-time-visiting-all-points",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** points = [[1,1],[3,4],[-1,0]]",
                "Output": "** 7",
                "Explanation": "** One optimal path is **[1,1]** -> [2,2] -> [3,3] -> **[3,4]** -> [2,3] -> [1,2] -> [0,1] -> **[-1,0]**   \nTime from [1,1] to [3,4] = 3 seconds \nTime from [3,4] to [-1,0] = 4 seconds\nTotal time = 7 seconds"
            }
        ]
    },
    {
        "Title": "Count Servers that Communicate",
        "slug": "count-servers-that-communicate",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[1,0],[0,1]]",
                "Output": "** 0",
                "Explanation": "**\u00a0No servers can communicate with others."
            },
            {
                "Input": "** grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]",
                "Output": "** 4",
                "Explanation": "**\u00a0The two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server at right bottom corner can't communicate with any other server."
            }
        ]
    },
    {
        "Title": "Search Suggestions System",
        "slug": "search-suggestions-system",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** products = [\"mobile\",\"mouse\",\"moneypot\",\"monitor\",\"mousepad\"], searchWord = \"mouse\"",
                "Output": "** [[\"mobile\",\"moneypot\",\"monitor\"],[\"mobile\",\"moneypot\",\"monitor\"],[\"mouse\",\"mousepad\"],[\"mouse\",\"mousepad\"],[\"mouse\",\"mousepad\"]]",
                "Explanation": "** products sorted lexicographically = [\"mobile\",\"moneypot\",\"monitor\",\"mouse\",\"mousepad\"].\nAfter typing m and mo all products match and we show user [\"mobile\",\"moneypot\",\"monitor\"].\nAfter typing mou, mous and mouse the system suggests [\"mouse\",\"mousepad\"]."
            },
            {
                "Input": "** products = [\"havana\"], searchWord = \"havana\"",
                "Output": "** [[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"]]",
                "Explanation": "** The only word \"havana\" will be always suggested while typing the search word."
            }
        ]
    },
    {
        "Title": "Number of Ways to Stay in the Same Place After Some Steps",
        "slug": "number-of-ways-to-stay-in-the-same-place-after-some-steps",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** steps = 3, arrLen = 2",
                "Output": "** 4",
                "Explanation": "** There are 4 differents ways to stay at index 0 after 3 steps.\nRight, Left, Stay\nStay, Right, Left\nRight, Stay, Left\nStay, Stay, Stay"
            },
            {
                "Input": "** steps = 2, arrLen = 4",
                "Output": "** 2",
                "Explanation": "** There are 2 differents ways to stay at index 0 after 2 steps\nRight, Left\nStay, Stay"
            },
            {
                "Input": "** steps = 4, arrLen = 2",
                "Output": "** 8",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Winner on a Tic Tac Toe Game",
        "slug": "find-winner-on-a-tic-tac-toe-game",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]",
                "Output": "** \"A\"",
                "Explanation": "** A wins, they always play first."
            },
            {
                "Input": "** moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]",
                "Output": "** \"B\"",
                "Explanation": "** B wins."
            },
            {
                "Input": "** moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]",
                "Output": "** \"Draw\"",
                "Explanation": "** The game ends in a draw since there are no moves to make."
            }
        ]
    },
    {
        "Title": "Number of Burgers with No Waste of Ingredients",
        "slug": "number-of-burgers-with-no-waste-of-ingredients",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** tomatoSlices = 16, cheeseSlices = 7",
                "Output": "** [1,6]\n**Explantion:** To make one jumbo burger and 6 small burgers we need 4*1 + 2*6 = 16 tomato and 1 + 6 = 7 cheese.\nThere will be no remaining ingredients.",
                "Explanation": null
            },
            {
                "Input": "** tomatoSlices = 17, cheeseSlices = 4",
                "Output": "** []\n**Explantion:** There will be no way to use all ingredients to make small and jumbo burgers.",
                "Explanation": null
            },
            {
                "Input": "** tomatoSlices = 4, cheeseSlices = 17",
                "Output": "** []\n**Explantion:** Making 1 jumbo burger there will be 16 cheese remaining and making 2 small burgers there will be 15 cheese remaining.",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count Square Submatrices with All Ones",
        "slug": "count-square-submatrices-with-all-ones",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** matrix =\n[\n\u00a0 [0,1,1,1],\n\u00a0 [1,1,1,1],\n\u00a0 [0,1,1,1]\n]",
                "Output": "** 15",
                "Explanation": "** \nThere are **10** squares of side 1.\nThere are **4** squares of side 2.\nThere is  **1** square of side 3.\nTotal number of squares = 10 + 4 + 1 = **15**."
            },
            {
                "Input": "** matrix = \n[\n  [1,0,1],\n  [1,1,0],\n  [1,1,0]\n]",
                "Output": "** 7",
                "Explanation": "** \nThere are **6** squares of side 1.  \nThere is **1** square of side 2. \nTotal number of squares = 6 + 1 = **7**."
            }
        ]
    },
    {
        "Title": "Palindrome Partitioning III",
        "slug": "palindrome-partitioning-iii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"abc\", k = 2",
                "Output": "** 1",
                "Explanation": "**\u00a0You can split the string into \"ab\" and \"c\", and change 1 character in \"ab\" to make it palindrome."
            },
            {
                "Input": "** s = \"aabbc\", k = 3",
                "Output": "** 0",
                "Explanation": "**\u00a0You can split the string into \"aa\", \"bb\" and \"c\", all of them are palindrome."
            },
            {
                "Input": "** s = \"leetcode\", k = 8",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Students and Examinations",
        "slug": "students-and-examinations",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nStudents table:\n+------------+--------------+\n| student_id | student_name |\n+------------+--------------+\n| 1          | Alice        |\n| 2          | Bob          |\n| 13         | John         |\n| 6          | Alex         |\n+------------+--------------+\nSubjects table:\n+--------------+\n| subject_name |\n+--------------+\n| Math         |\n| Physics      |\n| Programming  |\n+--------------+\nExaminations table:\n+------------+--------------+\n| student_id | subject_name |\n+------------+--------------+\n| 1          | Math         |\n| 1          | Physics      |\n| 1          | Programming  |\n| 2          | Programming  |\n| 1          | Physics      |\n| 1          | Math         |\n| 13         | Math         |\n| 13         | Programming  |\n| 13         | Physics      |\n| 2          | Math         |\n| 1          | Math         |\n+------------+--------------+",
                "Output": "** \n+------------+--------------+--------------+----------------+\n| student_id | student_name | subject_name | attended_exams |\n+------------+--------------+--------------+----------------+\n| 1          | Alice        | Math         | 3              |\n| 1          | Alice        | Physics      | 2              |\n| 1          | Alice        | Programming  | 1              |\n| 2          | Bob          | Math         | 1              |\n| 2          | Bob          | Physics      | 0              |\n| 2          | Bob          | Programming  | 1              |\n| 6          | Alex         | Math         | 0              |\n| 6          | Alex         | Physics      | 0              |\n| 6          | Alex         | Programming  | 0              |\n| 13         | John         | Math         | 1              |\n| 13         | John         | Physics      | 1              |\n| 13         | John         | Programming  | 1              |\n+------------+--------------+--------------+----------------+",
                "Explanation": "** \nThe result table should contain all students and all subjects.\nAlice attended the Math exam 3 times, the Physics exam 2 times, and the Programming exam 1 time.\nBob attended the Math exam 1 time, the Programming exam 1 time, and did not attend the Physics exam.\nAlex did not attend any exams.\nJohn attended the Math exam 1 time, the Physics exam 1 time, and the Programming exam 1 time."
            }
        ]
    },
    {
        "Title": "Subtract the Product and Sum of Digits of an Integer",
        "slug": "subtract-the-product-and-sum-of-digits-of-an-integer",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 234",
                "Output": "** 15",
                "Explanation": "** \nProduct of digits = 2 * 3 * 4 = 24 \nSum of digits = 2 + 3 + 4 = 9 \nResult = 24 - 9 = 15"
            },
            {
                "Input": "** n = 4421",
                "Output": "** 21",
                "Explanation": "**Product of digits = 4 * 4 * 2 * 1 = 32 \nSum of digits = 4 + 4 + 2 + 1 = 11 \nResult = 32 - 11 = 21"
            }
        ]
    },
    {
        "Title": "Group the People Given the Group Size They Belong To",
        "slug": "group-the-people-given-the-group-size-they-belong-to",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** groupSizes = [3,3,3,3,3,1,3]",
                "Output": "** [[5],[0,1,2],[3,4,6]]",
                "Explanation": "** \nThe first group is [5]. The size is 1, and groupSizes[5] = 1.\nThe second group is [0,1,2]. The size is 3, and groupSizes[0] = groupSizes[1] = groupSizes[2] = 3.\nThe third group is [3,4,6]. The size is 3, and groupSizes[3] = groupSizes[4] = groupSizes[6] = 3.\nOther possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]]."
            },
            {
                "Input": "** groupSizes = [2,1,3,3,3,2]",
                "Output": "** [[1],[0,5],[2,3,4]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find the Smallest Divisor Given a Threshold",
        "slug": "find-the-smallest-divisor-given-a-threshold",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,5,9], threshold = 6",
                "Output": "** 5",
                "Explanation": "** We can get a sum to 17 (1+2+5+9) if the divisor is 1. \nIf the divisor is 4 we can get a sum of 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2)."
            },
            {
                "Input": "** nums = [44,22,33,11,1], threshold = 5",
                "Output": "** 44",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
        "slug": "minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** mat = [[0,0],[0,1]]",
                "Output": "** 3",
                "Explanation": "** One possible solution is to flip (1, 0) then (0, 1) and finally (1, 1) as shown."
            }
        ]
    },
    {
        "Title": "Iterator for Combination",
        "slug": "iterator-for-combination",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"CombinationIterator\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[\"abc\", 2], [], [], [], [], [], []]",
                "Output": "[null, \"ab\", true, \"ac\", true, \"bc\", false]",
                "Explanation": "CombinationIterator itr = new CombinationIterator(\"abc\", 2);\nitr.next();    // return \"ab\"\nitr.hasNext(); // return True\nitr.next();    // return \"ac\"\nitr.hasNext(); // return True\nitr.next();    // return \"bc\"\nitr.hasNext(); // return False"
            }
        ]
    },
    {
        "Title": "Element Appearing More Than 25% In Sorted Array",
        "slug": "element-appearing-more-than-25-in-sorted-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [1,2,2,6,6,6,6,7,10]",
                "Output": "** 6",
                "Explanation": null
            },
            {
                "Input": "** arr = [1,1]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove Covered Intervals",
        "slug": "remove-covered-intervals",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** intervals = [[1,4],[3,6],[2,8]]",
                "Output": "** 2",
                "Explanation": "** Interval [3,6] is covered by [2,8], therefore it is removed."
            },
            {
                "Input": "** intervals = [[1,4],[2,3]]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Falling Path Sum II",
        "slug": "minimum-falling-path-sum-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [[1,2,3],[4,5,6],[7,8,9]]",
                "Output": "** 13",
                "Explanation": "** \nThe possible falling paths are:\n[1,5,9], [1,5,7], [1,6,7], [1,6,8],\n[2,4,8], [2,4,9], [2,6,7], [2,6,8],\n[3,4,8], [3,4,9], [3,5,7], [3,5,9]\nThe falling path with the smallest sum is\u00a0[1,5,7], so the answer is\u00a013."
            }
        ]
    },
    {
        "Title": "Convert Binary Number in a Linked List to Integer",
        "slug": "convert-binary-number-in-a-linked-list-to-integer",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** head = [1,0,1]",
                "Output": "** 5",
                "Explanation": "** (101) in base 2 = (5) in base 10"
            }
        ]
    },
    {
        "Title": "Sequential Digits",
        "slug": "sequential-digits",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** low = 100, high = 300",
                "Output": "** [123,234]",
                "Explanation": null
            },
            {
                "Input": "** low = 1000, high = 13000",
                "Output": "** [1234,2345,3456,4567,5678,6789,12345]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
        "slug": "maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4",
                "Output": "** 2",
                "Explanation": "** The maximum side length of square with sum less than 4 is 2 as shown."
            }
        ]
    },
    {
        "Title": "Shortest Path in a Grid with Obstacles Elimination",
        "slug": "shortest-path-in-a-grid-with-obstacles-elimination",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]], k = 1",
                "Output": "** 6",
                "Explanation": "** \nThe shortest path without eliminating any obstacle is 10.\nThe shortest path with one obstacle elimination at position (3,2) is 6. Such path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> **(3,2)** -> (4,2)."
            },
            {
                "Input": "** grid = [[0,1,1],[1,1,1],[1,0,0]], k = 1",
                "Output": "** -1",
                "Explanation": "** We need to eliminate at least two obstacles to find such a walk."
            }
        ]
    },
    {
        "Title": "Find Numbers with Even Number of Digits",
        "slug": "find-numbers-with-even-number-of-digits",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [12,345,2,6,7896]",
                "Output": "** 2",
                "Explanation": "**12 contains 2 digits (even number of digits).\u00a0\n345 contains 3 digits (odd number of digits).\u00a0\n2 contains 1 digit (odd number of digits).\u00a0\n6 contains 1 digit (odd number of digits).\u00a0\n7896 contains 4 digits (even number of digits).\u00a0\nTherefore only 12 and 7896 contain an even number of digits."
            },
            {
                "Input": "** nums = [555,901,482,1771]",
                "Output": "** 1",
                "Explanation": "** \nOnly 1771 contains an even number of digits."
            }
        ]
    },
    {
        "Title": "Divide Array in Sets of K Consecutive Numbers",
        "slug": "divide-array-in-sets-of-k-consecutive-numbers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3,3,4,4,5,6], k = 4",
                "Output": "** true",
                "Explanation": "** Array can be divided into [1,2,3,4] and [3,4,5,6]."
            },
            {
                "Input": "** nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3",
                "Output": "** true",
                "Explanation": "** Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11]."
            },
            {
                "Input": "** nums = [1,2,3,4], k = 3",
                "Output": "** false",
                "Explanation": "** Each array should be divided in subarrays of size 3."
            }
        ]
    },
    {
        "Title": "Maximum Number of Occurrences of a Substring",
        "slug": "maximum-number-of-occurrences-of-a-substring",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"aababcaab\", maxLetters = 2, minSize = 3, maxSize = 4",
                "Output": "** 2",
                "Explanation": "** Substring \"aab\" has 2 occurrences in the original string.\nIt satisfies the conditions, 2 unique letters and size 3 (between minSize and maxSize)."
            },
            {
                "Input": "** s = \"aaaa\", maxLetters = 1, minSize = 3, maxSize = 3",
                "Output": "** 2",
                "Explanation": "** Substring \"aaa\" occur 2 times in the string. It can overlap."
            }
        ]
    },
    {
        "Title": "Maximum Candies You Can Get from Boxes",
        "slug": "maximum-candies-you-can-get-from-boxes",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]",
                "Output": "** 16",
                "Explanation": "** You will be initially given box 0. You will find 7 candies in it and boxes 1 and 2.\nBox 1 is closed and you do not have a key for it so you will open box 2. You will find 4 candies and a key to box 1 in box 2.\nIn box 1, you will find 5 candies and box 3 but you will not find a key to box 3 so box 3 will remain closed.\nTotal number of candies collected = 7 + 4 + 5 = 16 candy."
            },
            {
                "Input": "** status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]",
                "Output": "** 6",
                "Explanation": "** You have initially box 0. Opening it you can find boxes 1,2,3,4 and 5 and their keys.\nThe total number of candies will be 6."
            }
        ]
    },
    {
        "Title": "Replace Elements with Greatest Element on Right Side",
        "slug": "replace-elements-with-greatest-element-on-right-side",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [17,18,5,4,6,1]",
                "Output": "** [18,6,6,6,1,-1]",
                "Explanation": "** \n- index 0 --> the greatest element to the right of index 0 is index 1 (18).\n- index 1 --> the greatest element to the right of index 1 is index 4 (6).\n- index 2 --> the greatest element to the right of index 2 is index 4 (6).\n- index 3 --> the greatest element to the right of index 3 is index 4 (6).\n- index 4 --> the greatest element to the right of index 4 is index 5 (1).\n- index 5 --> there are no elements to the right of index 5, so we put -1."
            },
            {
                "Input": "** arr = [400]",
                "Output": "** [-1]",
                "Explanation": "** There are no elements to the right of index 0."
            }
        ]
    },
    {
        "Title": "Sum of Mutated Array Closest to Target",
        "slug": "sum-of-mutated-array-closest-to-target",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [4,9,3], target = 10",
                "Output": "** 3",
                "Explanation": "** When using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer."
            },
            {
                "Input": "** arr = [2,3,5], target = 10",
                "Output": "** 5",
                "Explanation": null
            },
            {
                "Input": "** arr = [60864,25176,27249,21296,20204], target = 56803",
                "Output": "** 11361",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Paths with Max Score",
        "slug": "number-of-paths-with-max-score",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** board = [\"E23\",\"2X2\",\"12S\"]",
                "Output": "** [7,1]",
                "Explanation": null
            },
            {
                "Input": "** board = [\"E12\",\"1X1\",\"21S\"]",
                "Output": "** [4,2]",
                "Explanation": null
            },
            {
                "Input": "** board = [\"E11\",\"XXX\",\"11S\"]",
                "Output": "** [0,0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Deepest Leaves Sum",
        "slug": "deepest-leaves-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,2,3,4,5,null,6,7,null,null,null,null,8]",
                "Output": "** 15",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find N Unique Integers Sum up to Zero",
        "slug": "find-n-unique-integers-sum-up-to-zero",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 5",
                "Output": "** [-7,-1,1,3,4]",
                "Explanation": "** These arrays also are accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4]."
            },
            {
                "Input": "** n = 3",
                "Output": "** [-1,0,1]",
                "Explanation": null
            },
            {
                "Input": "** n = 1",
                "Output": "** [0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "All Elements in Two Binary Search Trees",
        "slug": "all-elements-in-two-binary-search-trees",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root1 = [2,1,4], root2 = [1,0,3]",
                "Output": "** [0,1,1,2,3,4]",
                "Explanation": null
            },
            {
                "Input": "** root1 = [1,null,8], root2 = [8,1]",
                "Output": "** [1,1,8,8]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Jump Game III",
        "slug": "jump-game-iii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [4,2,3,0,3,1,2], start = 5",
                "Output": "** true",
                "Explanation": "** \nAll possible ways to reach at index 3 with value 0 are: \nindex 5 -> index 4 -> index 1 -> index 3 \nindex 5 -> index 6 -> index 4 -> index 1 -> index 3"
            },
            {
                "Input": "** arr = [4,2,3,0,3,1,2], start = 0",
                "Output": "** true",
                "Explanation": "**One possible way to reach at index 3 with value 0 is: \nindex 0 -> index 4 -> index 1 -> index 3"
            },
            {
                "Input": "** arr = [3,0,2,1,2], start = 2",
                "Output": "** false",
                "Explanation": "** There is no way to reach at index 1 with value 0."
            }
        ]
    },
    {
        "Title": "Verbal Arithmetic Puzzle",
        "slug": "verbal-arithmetic-puzzle",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** words = [\"SEND\",\"MORE\"], result = \"MONEY\"",
                "Output": "** true",
                "Explanation": "** Map 'S'-> 9, 'E'->5, 'N'->6, 'D'->7, 'M'->1, 'O'->0, 'R'->8, 'Y'->'2'\nSuch that: \"SEND\" + \"MORE\" = \"MONEY\" ,  9567 + 1085 = 10652"
            },
            {
                "Input": "** words = [\"SIX\",\"SEVEN\",\"SEVEN\"], result = \"TWENTY\"",
                "Output": "** true",
                "Explanation": "** Map 'S'-> 6, 'I'->5, 'X'->0, 'E'->8, 'V'->7, 'N'->2, 'T'->1, 'W'->'3', 'Y'->4\nSuch that: \"SIX\" + \"SEVEN\" + \"SEVEN\" = \"TWENTY\" ,  650 + 68782 + 68782 = 138214"
            },
            {
                "Input": "** words = [\"LEET\",\"CODE\"], result = \"POINT\"",
                "Output": "** false",
                "Explanation": "** There is no possible mapping to satisfy the equation, so we return false.\nNote that two different characters cannot map to the same digit."
            }
        ]
    },
    {
        "Title": "Decrypt String from Alphabet to Integer Mapping",
        "slug": "decrypt-string-from-alphabet-to-integer-mapping",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"10#11#12\"",
                "Output": "** \"jkab\"",
                "Explanation": "** \"j\" -> \"10#\" , \"k\" -> \"11#\" , \"a\" -> \"1\" , \"b\" -> \"2\"."
            },
            {
                "Input": "** s = \"1326#\"",
                "Output": "** \"acz\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "XOR Queries of a Subarray",
        "slug": "xor-queries-of-a-subarray",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]",
                "Output": "** [2,7,14,8]",
                "Explanation": "** \nThe binary representation of the elements in the array are:\n1 = 0001 \n3 = 0011 \n4 = 0100 \n8 = 1000 \nThe XOR values for queries are:\n[0,1] = 1 xor 3 = 2 \n[1,2] = 3 xor 4 = 7 \n[0,3] = 1 xor 3 xor 4 xor 8 = 14 \n[3,3] = 8"
            },
            {
                "Input": "** arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]",
                "Output": "** [8,0,4,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Insertion Steps to Make a String Palindrome",
        "slug": "minimum-insertion-steps-to-make-a-string-palindrome",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"zzazz\"",
                "Output": "** 0",
                "Explanation": "** The string \"zzazz\" is already palindrome we do not need any insertions."
            },
            {
                "Input": "** s = \"mbadm\"",
                "Output": "** 2",
                "Explanation": "** String can be \"mbdadbm\" or \"mdbabdm\"."
            },
            {
                "Input": "** s = \"leetcode\"",
                "Output": "** 5",
                "Explanation": "** Inserting 5 characters the string becomes \"leetcodocteel\"."
            }
        ]
    },
    {
        "Title": "Decompress Run-Length Encoded List",
        "slug": "decompress-run-length-encoded-list",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** [2,4,4,4]",
                "Explanation": "** The first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2].\nThe second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4].\nAt the end the concatenation [2] + [4,4,4] is [2,4,4,4]."
            },
            {
                "Input": "** nums = [1,1,2,3]",
                "Output": "** [1,3,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Matrix Block Sum",
        "slug": "matrix-block-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1",
                "Output": "** [[12,21,16],[27,45,33],[24,39,28]]",
                "Explanation": null
            },
            {
                "Input": "** mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2",
                "Output": "** [[45,45,45],[45,45,45],[45,45,45]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sum of Nodes with Even-Valued Grandparent",
        "slug": "sum-of-nodes-with-even-valued-grandparent",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]",
                "Output": "** 18",
                "Explanation": "** The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents."
            },
            {
                "Input": "** root = [1]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Distinct Echo Substrings",
        "slug": "distinct-echo-substrings",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** text = \"abcabcabc\"",
                "Output": "** 3",
                "Explanation": "** The 3 substrings are \"abcabc\", \"bcabca\" and \"cabcab\"."
            },
            {
                "Input": "** text = \"leetcodeleetcode\"",
                "Output": "** 2",
                "Explanation": "** The 2 substrings are \"ee\" and \"leetcodeleetcode\"."
            }
        ]
    },
    {
        "Title": "Convert Integer to the Sum of Two No-Zero Integers",
        "slug": "convert-integer-to-the-sum-of-two-no-zero-integers",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** [1,1]",
                "Explanation": "** Let a = 1 and b = 1.\nBoth a and b are no-zero integers, and a + b = 2 = n."
            },
            {
                "Input": "** n = 11",
                "Output": "** [2,9]",
                "Explanation": "** Let a = 2 and b = 9.\nBoth a and b are no-zero integers, and a + b = 9 = n.\nNote that there are other valid answers as [8, 3] that can be accepted."
            }
        ]
    },
    {
        "Title": "Minimum Flips to Make a OR b Equal to c",
        "slug": "minimum-flips-to-make-a-or-b-equal-to-c",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** a = 2, b = 6, c = 5",
                "Output": "** 3",
                "Explanation": "** After flips a = 1 , b = 4 , c = 5 such that (a OR b == c)"
            }
        ]
    },
    {
        "Title": "Number of Operations to Make Network Connected",
        "slug": "number-of-operations-to-make-network-connected",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 4, connections = [[0,1],[0,2],[1,2]]",
                "Output": "** 1",
                "Explanation": "** Remove cable between computer 1 and 2 and place between computers 1 and 3."
            },
            {
                "Input": "** n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Distance to Type a Word Using Two Fingers",
        "slug": "minimum-distance-to-type-a-word-using-two-fingers",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** word = \"CAKE\"",
                "Output": "** 3",
                "Explanation": "** Using two fingers, one optimal way to type \"CAKE\" is: \nFinger 1 on letter 'C' -> cost = 0 \nFinger 1 on letter 'A' -> cost = Distance from letter 'C' to letter 'A' = 2 \nFinger 2 on letter 'K' -> cost = 0 \nFinger 2 on letter 'E' -> cost = Distance from letter 'K' to letter 'E' = 1 \nTotal distance = 3"
            },
            {
                "Input": "** word = \"HAPPY\"",
                "Output": "** 6",
                "Explanation": "** Using two fingers, one optimal way to type \"HAPPY\" is:\nFinger 1 on letter 'H' -> cost = 0\nFinger 1 on letter 'A' -> cost = Distance from letter 'H' to letter 'A' = 2\nFinger 2 on letter 'P' -> cost = 0\nFinger 2 on letter 'P' -> cost = Distance from letter 'P' to letter 'P' = 0\nFinger 1 on letter 'Y' -> cost = Distance from letter 'A' to letter 'Y' = 4\nTotal distance = 6"
            }
        ]
    },
    {
        "Title": "Restaurant Growth",
        "slug": "restaurant-growth",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nCustomer table:\n+-------------+--------------+--------------+-------------+\n| customer_id | name         | visited_on   | amount      |\n+-------------+--------------+--------------+-------------+\n| 1           | Jhon         | 2019-01-01   | 100         |\n| 2           | Daniel       | 2019-01-02   | 110         |\n| 3           | Jade         | 2019-01-03   | 120         |\n| 4           | Khaled       | 2019-01-04   | 130         |\n| 5           | Winston      | 2019-01-05   | 110         | \n| 6           | Elvis        | 2019-01-06   | 140         | \n| 7           | Anna         | 2019-01-07   | 150         |\n| 8           | Maria        | 2019-01-08   | 80          |\n| 9           | Jaze         | 2019-01-09   | 110         | \n| 1           | Jhon         | 2019-01-10   | 130         | \n| 3           | Jade         | 2019-01-10   | 150         | \n+-------------+--------------+--------------+-------------+",
                "Output": "** \n+--------------+--------------+----------------+\n| visited_on   | amount       | average_amount |\n+--------------+--------------+----------------+\n| 2019-01-07   | 860          | 122.86         |\n| 2019-01-08   | 840          | 120            |\n| 2019-01-09   | 840          | 120            |\n| 2019-01-10   | 1000         | 142.86         |\n+--------------+--------------+----------------+",
                "Explanation": "** \n1st moving average from 2019-01-01 to 2019-01-07 has an average_amount of (100 + 110 + 120 + 130 + 110 + 140 + 150)/7 = 122.86\n2nd moving average from 2019-01-02 to 2019-01-08 has an average_amount of (110 + 120 + 130 + 110 + 140 + 150 + 80)/7 = 120\n3rd moving average from 2019-01-03 to 2019-01-09 has an average_amount of (120 + 130 + 110 + 140 + 150 + 80 + 110)/7 = 120\n4th moving average from 2019-01-04 to 2019-01-10 has an average_amount of (130 + 110 + 140 + 150 + 80 + 110 + 130 + 150)/7 = 142.86"
            }
        ]
    },
    {
        "Title": "Maximum 69 Number",
        "slug": "maximum-69-number",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num = 9669",
                "Output": "** 9969",
                "Explanation": "** \nChanging the first digit results in 6669.\nChanging the second digit results in 9969.\nChanging the third digit results in 9699.\nChanging the fourth digit results in 9666.\nThe maximum number is 9969."
            },
            {
                "Input": "** num = 9996",
                "Output": "** 9999",
                "Explanation": "** Changing the last digit 6 to 9 results in the maximum number."
            },
            {
                "Input": "** num = 9999",
                "Output": "** 9999",
                "Explanation": "** It is better not to apply any change."
            }
        ]
    },
    {
        "Title": "Print Words Vertically",
        "slug": "print-words-vertically",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"HOW ARE YOU\"",
                "Output": "** [\"HAY\",\"ORO\",\"WEU\"]",
                "Explanation": "** Each word is printed vertically. \r\n \"HAY\"\r\n\u00a0\"ORO\"\r\n\u00a0\"WEU\""
            },
            {
                "Input": "** s = \"TO BE OR NOT TO BE\"",
                "Output": "** [\"TBONTB\",\"OEROOE\",\"   T\"]",
                "Explanation": "** Trailing spaces is not allowed. \r\n\"TBONTB\"\r\n\"OEROOE\"\r\n\"   T\""
            },
            {
                "Input": "** s = \"CONTEST IS COMING\"",
                "Output": "** [\"CIC\",\"OSO\",\"N M\",\"T I\",\"E N\",\"S G\",\"T\"]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Number of Taps to Open to Water a Garden",
        "slug": "minimum-number-of-taps-to-open-to-water-a-garden",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 5, ranges = [3,4,1,1,0,0]",
                "Output": "** 1",
                "Explanation": "** The tap at point 0 can cover the interval [-3,3]\nThe tap at point 1 can cover the interval [-3,5]\nThe tap at point 2 can cover the interval [1,3]\nThe tap at point 3 can cover the interval [2,4]\nThe tap at point 4 can cover the interval [4,4]\nThe tap at point 5 can cover the interval [5,5]\nOpening Only the second tap will water the whole garden [0,5]"
            }
        ]
    },
    {
        "Title": "List the Products Ordered in a Period",
        "slug": "list-the-products-ordered-in-a-period",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nProducts table:\n+-------------+-----------------------+------------------+\n| product_id  | product_name          | product_category |\n+-------------+-----------------------+------------------+\n| 1           | Leetcode Solutions    | Book             |\n| 2           | Jewels of Stringology | Book             |\n| 3           | HP                    | Laptop           |\n| 4           | Lenovo                | Laptop           |\n| 5           | Leetcode Kit          | T-shirt          |\n+-------------+-----------------------+------------------+\nOrders table:\n+--------------+--------------+----------+\n| product_id   | order_date   | unit     |\n+--------------+--------------+----------+\n| 1            | 2020-02-05   | 60       |\n| 1            | 2020-02-10   | 70       |\n| 2            | 2020-01-18   | 30       |\n| 2            | 2020-02-11   | 80       |\n| 3            | 2020-02-17   | 2        |\n| 3            | 2020-02-24   | 3        |\n| 4            | 2020-03-01   | 20       |\n| 4            | 2020-03-04   | 30       |\n| 4            | 2020-03-04   | 60       |\n| 5            | 2020-02-25   | 50       |\n| 5            | 2020-02-27   | 50       |\n| 5            | 2020-03-01   | 50       |\n+--------------+--------------+----------+",
                "Output": "** \n+--------------------+---------+\n| product_name       | unit    |\n+--------------------+---------+\n| Leetcode Solutions | 130     |\n| Leetcode Kit       | 100     |\n+--------------------+---------+",
                "Explanation": "** \nProducts with product_id = 1 is ordered in February a total of (60 + 70) = 130.\nProducts with product_id = 2 is ordered in February a total of 80.\nProducts with product_id = 3 is ordered in February a total of (2 + 3) = 5.\nProducts with product_id = 4 was not ordered in February 2020.\nProducts with product_id = 5 is ordered in February a total of (50 + 50) = 100."
            }
        ]
    },
    {
        "Title": "Break a Palindrome",
        "slug": "break-a-palindrome",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** palindrome = \"abccba\"",
                "Output": "** \"aaccba\"",
                "Explanation": "** There are many ways to make \"abccba\" not a palindrome, such as \"zbccba\", \"aaccba\", and \"abacba\".\nOf all the ways, \"aaccba\" is the lexicographically smallest."
            },
            {
                "Input": "** palindrome = \"a\"",
                "Output": "** \"\"",
                "Explanation": "** There is no way to replace a single character to make \"a\" not a palindrome, so return an empty string."
            }
        ]
    },
    {
        "Title": "Sort the Matrix Diagonally",
        "slug": "sort-the-matrix-diagonally",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]",
                "Output": "** [[1,1,1,1],[1,2,2,2],[1,2,3,3]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reverse Subarray To Maximize Array Value",
        "slug": "reverse-subarray-to-maximize-array-value",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [2,3,1,5,4]",
                "Output": "** 10",
                "Explanation": "** By reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10."
            },
            {
                "Input": "** nums = [2,4,9,24,2,1,10]",
                "Output": "** 68",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Rank Transform of an Array",
        "slug": "rank-transform-of-an-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [40,10,20,30]",
                "Output": "** [4,1,2,3]",
                "Explanation": "40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest."
            },
            {
                "Input": "** arr = [100,100,100]",
                "Output": "** [1,1,1]",
                "Explanation": "Same elements share the same rank."
            },
            {
                "Input": "** arr = [37,12,28,9,100,56,80,5,12]",
                "Output": "** [5,3,4,2,8,6,7,1,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Remove Palindromic Subsequences",
        "slug": "remove-palindromic-subsequences",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"ababa\"",
                "Output": "** 1",
                "Explanation": "** s is already a palindrome, so its entirety can be removed in a single step."
            },
            {
                "Input": "** s = \"abb\"",
                "Output": "** 2",
                "Explanation": "** \"abb\" -> \"bb\" -> \"\". \nRemove palindromic subsequence \"a\" then \"bb\"."
            },
            {
                "Input": "** s = \"baabb\"",
                "Output": "** 2",
                "Explanation": "** \"baabb\" -> \"b\" -> \"\". \nRemove palindromic subsequence \"baab\" then \"b\"."
            }
        ]
    },
    {
        "Title": "Filter Restaurants by Vegan-Friendly, Price and Distance",
        "slug": "filter-restaurants-by-vegan-friendly-price-and-distance",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10",
                "Output": "** [3,1,5]",
                "Explanation": "**The restaurants are:\nRestaurant 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10]\nRestaurant 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5]\nRestaurant 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4]\nRestaurant 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3]\nRestaurant 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1] \nAfter filter restaurants with veganFriendly = 1, maxPrice = 50 and maxDistance = 10 we have restaurant 3, restaurant 1 and restaurant 5 (ordered by rating from highest to lowest)."
            },
            {
                "Input": "** restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10",
                "Output": "** [4,3,2,1,5]",
                "Explanation": "** The restaurants are the same as in example 1, but in this case the filter veganFriendly = 0, therefore all restaurants are considered."
            },
            {
                "Input": "** restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3",
                "Output": "** [4,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance",
        "slug": "find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4",
                "Output": "** 3",
                "Explanation": "** The figure above describes the graph.\u00a0\nThe neighboring cities at a distanceThreshold = 4 for each city are:\nCity 0 -> [City 1, City 2]\u00a0\nCity 1 -> [City 0, City 2, City 3]\u00a0\nCity 2 -> [City 0, City 1, City 3]\u00a0\nCity 3 -> [City 1, City 2]\u00a0\nCities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number."
            },
            {
                "Input": "** n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2",
                "Output": "** 0",
                "Explanation": "** The figure above describes the graph.\u00a0\nThe neighboring cities at a distanceThreshold = 2 for each city are:\nCity 0 -> [City 1]\u00a0\nCity 1 -> [City 0, City 4]\u00a0\nCity 2 -> [City 3, City 4]\u00a0\nCity 3 -> [City 2, City 4]\nCity 4 -> [City 1, City 2, City 3]\u00a0\nThe city 0 has 1 neighboring city at a distanceThreshold = 2."
            }
        ]
    },
    {
        "Title": "Minimum Difficulty of a Job Schedule",
        "slug": "minimum-difficulty-of-a-job-schedule",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** jobDifficulty = [6,5,4,3,2,1], d = 2",
                "Output": "** 7",
                "Explanation": "** First day you can finish the first 5 jobs, total difficulty = 6.\nSecond day you can finish the last job, total difficulty = 1.\nThe difficulty of the schedule = 6 + 1 = 7"
            }
        ]
    },
    {
        "Title": "The K Weakest Rows in a Matrix",
        "slug": "the-k-weakest-rows-in-a-matrix",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** mat = \n[[1,1,0,0,0],\n [1,1,1,1,0],\n [1,0,0,0,0],\n [1,1,0,0,0],\n [1,1,1,1,1]], \nk = 3",
                "Output": "** [2,0,3]",
                "Explanation": "** \nThe number of soldiers in each row is: \n- Row 0: 2 \n- Row 1: 4 \n- Row 2: 1 \n- Row 3: 2 \n- Row 4: 5 \nThe rows ordered from weakest to strongest are [2,0,3,1,4]."
            },
            {
                "Input": "** mat = \n[[1,0,0,0],\n [1,1,1,1],\n [1,0,0,0],\n [1,0,0,0]], \nk = 2",
                "Output": "** [0,2]",
                "Explanation": "** \nThe number of soldiers in each row is: \n- Row 0: 1 \n- Row 1: 4 \n- Row 2: 1 \n- Row 3: 1 \nThe rows ordered from weakest to strongest are [0,2,3,1]."
            }
        ]
    },
    {
        "Title": "Reduce Array Size to The Half",
        "slug": "reduce-array-size-to-the-half",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [3,3,3,3,5,5,5,2,2,7]",
                "Output": "** 2",
                "Explanation": "** Choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array).\nPossible sets of size 2 are {3,5},{3,2},{5,2}.\nChoosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has a size greater than half of the size of the old array."
            },
            {
                "Input": "** arr = [7,7,7,7,7,7]",
                "Output": "** 1",
                "Explanation": "** The only possible set you can choose is {7}. This will make the new array empty."
            }
        ]
    },
    {
        "Title": "Maximum Product of Splitted Binary Tree",
        "slug": "maximum-product-of-splitted-binary-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,2,3,4,5,6]",
                "Output": "** 110",
                "Explanation": "** Remove the red edge and get 2 binary trees with sum 11 and 10. Their product is 110 (11*10)"
            },
            {
                "Input": "** root = [1,null,2,3,4,null,null,5,6]",
                "Output": "** 90",
                "Explanation": "** Remove the red edge and get 2 binary trees with sum 15 and 6.Their product is 90 (15*6)"
            }
        ]
    },
    {
        "Title": "Jump Game V",
        "slug": "jump-game-v",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2",
                "Output": "** 4",
                "Explanation": "** You can start at index 10. You can jump 10 --> 8 --> 6 --> 7 as shown.\nNote that if you start at index 6 you can only jump to index 7. You cannot jump to index 5 because 13 > 9. You cannot jump to index 4 because index 5 is between index 4 and 6 and 13 > 9.\nSimilarly You cannot jump from index 3 to index 2 or index 1."
            }
        ]
    },
    {
        "Title": "Movie Rating",
        "slug": "movie-rating",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nMovies table:\n+-------------+--------------+\n| movie_id    |  title       |\n+-------------+--------------+\n| 1           | Avengers     |\n| 2           | Frozen 2     |\n| 3           | Joker        |\n+-------------+--------------+\nUsers table:\n+-------------+--------------+\n| user_id     |  name        |\n+-------------+--------------+\n| 1           | Daniel       |\n| 2           | Monica       |\n| 3           | Maria        |\n| 4           | James        |\n+-------------+--------------+\nMovieRating table:\n+-------------+--------------+--------------+-------------+\n| movie_id    | user_id      | rating       | created_at  |\n+-------------+--------------+--------------+-------------+\n| 1           | 1            | 3            | 2020-01-12  |\n| 1           | 2            | 4            | 2020-02-11  |\n| 1           | 3            | 2            | 2020-02-12  |\n| 1           | 4            | 1            | 2020-01-01  |\n| 2           | 1            | 5            | 2020-02-17  | \n| 2           | 2            | 2            | 2020-02-01  | \n| 2           | 3            | 2            | 2020-03-01  |\n| 3           | 1            | 3            | 2020-02-22  | \n| 3           | 2            | 4            | 2020-02-25  | \n+-------------+--------------+--------------+-------------+",
                "Output": "** \n+--------------+\n| results      |\n+--------------+\n| Daniel       |\n| Frozen 2     |\n+--------------+",
                "Explanation": "** \nDaniel and Monica have rated 3 movies (\"Avengers\", \"Frozen 2\" and \"Joker\") but Daniel is smaller lexicographically.\nFrozen 2 and Joker have a rating average of 3.5 in February but Frozen 2 is smaller lexicographically."
            }
        ]
    },
    {
        "Title": "Number of Steps to Reduce a Number to Zero",
        "slug": "number-of-steps-to-reduce-a-number-to-zero",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num = 14",
                "Output": "** 6",
                "Explanation": "**\u00a0\nStep 1) 14 is even; divide by 2 and obtain 7.\u00a0\nStep 2) 7 is odd; subtract 1 and obtain 6.\nStep 3) 6 is even; divide by 2 and obtain 3.\u00a0\nStep 4) 3 is odd; subtract 1 and obtain 2.\u00a0\nStep 5) 2 is even; divide by 2 and obtain 1.\u00a0\nStep 6) 1 is odd; subtract 1 and obtain 0."
            },
            {
                "Input": "** num = 8",
                "Output": "** 4",
                "Explanation": "**\u00a0\nStep 1) 8 is even; divide by 2 and obtain 4.\u00a0\nStep 2) 4 is even; divide by 2 and obtain 2.\u00a0\nStep 3) 2 is even; divide by 2 and obtain 1.\u00a0\nStep 4) 1 is odd; subtract 1 and obtain 0."
            },
            {
                "Input": "** num = 123",
                "Output": "** 12",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
        "slug": "number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4",
                "Output": "** 3",
                "Explanation": "** Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold)."
            },
            {
                "Input": "** arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5",
                "Output": "** 6",
                "Explanation": "** The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers."
            }
        ]
    },
    {
        "Title": "Angle Between Hands of a Clock",
        "slug": "angle-between-hands-of-a-clock",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** hour = 12, minutes = 30",
                "Output": "** 165",
                "Explanation": null
            },
            {
                "Input": "** hour = 3, minutes = 30",
                "Output": "** 75",
                "Explanation": null
            },
            {
                "Input": "** hour = 3, minutes = 15",
                "Output": "** 7.5",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Jump Game IV",
        "slug": "jump-game-iv",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** arr = [100,-23,-23,404,100,23,23,23,3,404]",
                "Output": "** 3",
                "Explanation": "** You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array."
            },
            {
                "Input": "** arr = [7]",
                "Output": "** 0",
                "Explanation": "** Start index is the last index. You do not need to jump."
            },
            {
                "Input": "** arr = [7,6,9,6,9,6,9,7]",
                "Output": "** 1",
                "Explanation": "** You can jump directly from index 0 to index 7 which is last index of the array."
            }
        ]
    },
    {
        "Title": "Check If N and Its Double Exist",
        "slug": "check-if-n-and-its-double-exist",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [10,2,5,3]",
                "Output": "** true",
                "Explanation": "** For i = 0 and j = 2, arr[i] == 10 == 2 * 5 == 2 * arr[j]"
            },
            {
                "Input": "** arr = [3,1,7,11]",
                "Output": "** false",
                "Explanation": "** There is no i and j that satisfy the conditions."
            }
        ]
    },
    {
        "Title": "Minimum Number of Steps to Make Two Strings Anagram",
        "slug": "minimum-number-of-steps-to-make-two-strings-anagram",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"bab\", t = \"aba\"",
                "Output": "** 1",
                "Explanation": "** Replace the first 'a' in t with b, t = \"bba\" which is anagram of s."
            },
            {
                "Input": "** s = \"leetcode\", t = \"practice\"",
                "Output": "** 5",
                "Explanation": "** Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s."
            },
            {
                "Input": "** s = \"anagram\", t = \"mangaar\"",
                "Output": "** 0",
                "Explanation": "** \"anagram\" and \"mangaar\" are anagrams."
            }
        ]
    },
    {
        "Title": "Maximum Students Taking Exam",
        "slug": "maximum-students-taking-exam",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** seats = [[\"#\",\".\",\"#\",\"#\",\".\",\"#\"],\n\u00a0               [\".\",\"#\",\"#\",\"#\",\"#\",\".\"],\n\u00a0               [\"#\",\".\",\"#\",\"#\",\".\",\"#\"]]",
                "Output": "** 4",
                "Explanation": "** Teacher can place 4 students in available seats so they don't cheat on the exam."
            }
        ]
    },
    {
        "Title": "Count Negative Numbers in a Sorted Matrix",
        "slug": "count-negative-numbers-in-a-sorted-matrix",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]",
                "Output": "** 8",
                "Explanation": "** There are 8 negatives number in the matrix."
            },
            {
                "Input": "** grid = [[3,2],[1,0]]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Number of Events That Can Be Attended",
        "slug": "maximum-number-of-events-that-can-be-attended",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** events = [[1,2],[2,3],[3,4]]",
                "Output": "** 3",
                "Explanation": "** You can attend all the three events.\nOne way to attend them all is as shown.\nAttend the first event on day 1.\nAttend the second event on day 2.\nAttend the third event on day 3."
            }
        ]
    },
    {
        "Title": "Construct Target Array With Multiple Sums",
        "slug": "construct-target-array-with-multiple-sums",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** target = [9,3,5]",
                "Output": "** true",
                "Explanation": "** Start with arr = [1, 1, 1] \n[1, 1, 1], sum = 3 choose index 1\n[1, 3, 1], sum = 5 choose index 2\n[1, 3, 5], sum = 9 choose index 0\n[9, 3, 5] Done"
            },
            {
                "Input": "** target = [1,1,1,2]",
                "Output": "** false",
                "Explanation": "** Impossible to create target array from [1,1,1,1]."
            },
            {
                "Input": "** target = [8,5]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sort Integers by The Number of 1 Bits",
        "slug": "sort-integers-by-the-number-of-1-bits",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [0,1,2,3,4,5,6,7,8]",
                "Output": "** [0,1,2,4,8,3,5,6,7]\n**Explantion:** [0] is the only integer with 0 bits.\n[1,2,4,8] all have 1 bit.\n[3,5,6] have 2 bits.\n[7] has 3 bits.\nThe sorted array by bits is [0,1,2,4,8,3,5,6,7]",
                "Explanation": null
            },
            {
                "Input": "** arr = [1024,512,256,128,64,32,16,8,4,2,1]",
                "Output": "** [1,2,4,8,16,32,64,128,256,512,1024]\n**Explantion:** All integers have 1 bit in the binary representation, you should just sort them in ascending order.",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Apply Discount Every n Orders",
        "slug": "apply-discount-every-n-orders",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"Cashier\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\"]\n[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]",
                "Output": "[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]",
                "Explanation": "Cashier cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);\ncashier.getBill([1,2],[1,2]);                        // return 500.0. 1st customer, no discount.\n                                                     // bill = 1 * 100 + 2 * 200 = 500.\ncashier.getBill([3,7],[10,10]);                      // return 4000.0. 2nd customer, no discount.\n                                                     // bill = 10 * 300 + 10 * 100 = 4000.\ncashier.getBill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]);    // return 800.0. 3rd customer, 50% discount.\n                                                     // Original bill = 1600\n                                                     // Actual bill = 1600 * ((100 - 50) / 100) = 800.\ncashier.getBill([4],[10]);                           // return 4000.0. 4th customer, no discount.\ncashier.getBill([7,3],[10,10]);                      // return 4000.0. 5th customer, no discount.\ncashier.getBill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // return 7350.0. 6th customer, 50% discount.\n                                                     // Original bill = 14700, but with\n                                                     // Actual bill = 14700 * ((100 - 50) / 100) = 7350.\ncashier.getBill([2,3,5],[5,3,2]);                    // return 2500.0.  7th customer, no discount."
            }
        ]
    },
    {
        "Title": "Number of Substrings Containing All Three Characters",
        "slug": "number-of-substrings-containing-all-three-characters",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"abcabc\"",
                "Output": "** 10",
                "Explanation": "** The substrings containing\u00a0at least\u00a0one occurrence of the characters\u00a0*a*,\u00a0*b*\u00a0and\u00a0*c are \"*abc*\", \"*abca*\", \"*abcab*\", \"*abcabc*\", \"*bca*\", \"*bcab*\", \"*bcabc*\", \"*cab*\", \"*cabc*\"* and *\"*abc*\"* (**again**)*.*"
            },
            {
                "Input": "** s = \"aaacb\"",
                "Output": "** 3",
                "Explanation": "** The substrings containing\u00a0at least\u00a0one occurrence of the characters\u00a0*a*,\u00a0*b*\u00a0and\u00a0*c are \"*aaacb*\", \"*aacb*\"* and *\"*acb*\".*"
            },
            {
                "Input": "** s = \"abc\"",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count All Valid Pickup and Delivery Options",
        "slug": "count-all-valid-pickup-and-delivery-options",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** 1",
                "Explanation": "** Unique order (P1, D1), Delivery 1 always is after of Pickup 1."
            },
            {
                "Input": "** n = 2",
                "Output": "** 6",
                "Explanation": "** All possible orders: \n(P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).\nThis is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2."
            },
            {
                "Input": "** n = 3",
                "Output": "** 90",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Days Between Two Dates",
        "slug": "number-of-days-between-two-dates",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** date1 = \"2019-06-29\", date2 = \"2019-06-30\"",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** date1 = \"2020-01-15\", date2 = \"2019-12-31\"",
                "Output": "** 15",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Validate Binary Tree Nodes",
        "slug": "validate-binary-tree-nodes",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** n = 2, leftChild = [1,0], rightChild = [-1,-1]",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Closest Divisors",
        "slug": "closest-divisors",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** num = 8",
                "Output": "** [3,3]",
                "Explanation": "** For num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen."
            },
            {
                "Input": "** num = 123",
                "Output": "** [5,25]",
                "Explanation": null
            },
            {
                "Input": "** num = 999",
                "Output": "** [40,25]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Largest Multiple of Three",
        "slug": "largest-multiple-of-three",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** digits = [8,1,9]",
                "Output": "** \"981\"",
                "Explanation": null
            },
            {
                "Input": "** digits = [8,6,7,1,0]",
                "Output": "** \"8760\"",
                "Explanation": null
            },
            {
                "Input": "** digits = [1]",
                "Output": "** \"\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "How Many Numbers Are Smaller Than the Current Number",
        "slug": "how-many-numbers-are-smaller-than-the-current-number",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [8,1,2,2,3]",
                "Output": "** [4,0,1,1,3]",
                "Explanation": "** \nFor nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). \nFor nums[1]=1 does not exist any smaller number than it.\nFor nums[2]=2 there exist one smaller number than it (1). \nFor nums[3]=2 there exist one smaller number than it (1). \nFor nums[4]=3 there exist three smaller numbers than it (1, 2 and 2)."
            },
            {
                "Input": "** nums = [6,5,4,8]",
                "Output": "** [2,1,0,3]",
                "Explanation": null
            },
            {
                "Input": "** nums = [7,7,7,7]",
                "Output": "** [0,0,0,0]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Rank Teams by Votes",
        "slug": "rank-teams-by-votes",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** votes = [\"ABC\",\"ACB\",\"ABC\",\"ACB\",\"ACB\"]",
                "Output": "** \"ACB\"",
                "Explanation": "** \nTeam A was ranked first place by 5 voters. No other team was voted as first place, so team A is the first team.\nTeam B was ranked second by 2 voters and ranked third by 3 voters.\nTeam C was ranked second by 3 voters and ranked third by 2 voters.\nAs most of the voters ranked C second, team C is the second team, and team B is the third."
            },
            {
                "Input": "** votes = [\"WXYZ\",\"XYZW\"]",
                "Output": "** \"XWYZ\"",
                "Explanation": "**\nX is the winner due to the tie-breaking rule. X has the same votes as W for the first position, but X has one vote in the second position, while W does not have any votes in the second position."
            },
            {
                "Input": "** votes = [\"ZMNAGUEDSJYLBOPHRQICWFXTVK\"]",
                "Output": "** \"ZMNAGUEDSJYLBOPHRQICWFXTVK\"",
                "Explanation": "** Only one voter, so their votes are used for the ranking."
            }
        ]
    },
    {
        "Title": "Linked List in Binary Tree",
        "slug": "linked-list-in-binary-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]",
                "Output": "** false",
                "Explanation": "** There is no path in the binary tree that contains all the elements of the linked list from head."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Make at Least One Valid Path in a Grid",
        "slug": "minimum-cost-to-make-at-least-one-valid-path-in-a-grid",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]",
                "Output": "** 3",
                "Explanation": "** You will start at point (0, 0).\nThe path to (3, 3) is as follows. (0, 0) --> (0, 1) --> (0, 2) --> (0, 3) change the arrow to down with cost = 1 --> (1, 3) --> (1, 2) --> (1, 1) --> (1, 0) change the arrow to down with cost = 1 --> (2, 0) --> (2, 1) --> (2, 2) --> (2, 3) change the arrow to down with cost = 1 --> (3, 3)\nThe total cost = 3."
            },
            {
                "Input": "** grid = [[1,1,3],[3,2,2],[1,1,4]]",
                "Output": "** 0",
                "Explanation": "** You can follow the path from (0, 0) to (2, 2)."
            },
            {
                "Input": "** grid = [[1,2],[4,3]]",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Increasing Decreasing String",
        "slug": "increasing-decreasing-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"aaaabbbbcccc\"",
                "Output": "** \"abccbaabccba\"",
                "Explanation": "** After steps 1, 2 and 3 of the first iteration, result = \"abc\"\nAfter steps 4, 5 and 6 of the first iteration, result = \"abccba\"\nFirst iteration is done. Now s = \"aabbcc\" and we go back to step 1\nAfter steps 1, 2 and 3 of the second iteration, result = \"abccbaabc\"\nAfter steps 4, 5 and 6 of the second iteration, result = \"abccbaabccba\""
            },
            {
                "Input": "** s = \"rat\"",
                "Output": "** \"art\"",
                "Explanation": "** The word \"rat\" becomes \"art\" after re-ordering it with the mentioned algorithm."
            }
        ]
    },
    {
        "Title": "Find the Longest Substring Containing Vowels in Even Counts",
        "slug": "find-the-longest-substring-containing-vowels-in-even-counts",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"eleetminicoworoep\"",
                "Output": "** 13",
                "Explanation": "** The longest substring is \"leetminicowor\" which contains two each of the vowels: **e**, **i** and **o** and zero of the vowels: **a** and **u**."
            },
            {
                "Input": "** s = \"leetcodeisgreat\"",
                "Output": "** 5",
                "Explanation": "** The longest substring is \"leetc\" which contains two e's."
            },
            {
                "Input": "** s = \"bcbcbc\"",
                "Output": "** 6",
                "Explanation": "** In this case, the given string \"bcbcbc\" is the longest because all vowels: **a**, **e**, **i**, **o** and **u** appear zero times."
            }
        ]
    },
    {
        "Title": "Longest ZigZag Path in a Binary Tree",
        "slug": "longest-zigzag-path-in-a-binary-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1]",
                "Output": "** 3",
                "Explanation": "** Longest ZigZag path in blue nodes (right -> left -> right)."
            },
            {
                "Input": "** root = [1,1,1,null,1,null,null,1,1,null,1]",
                "Output": "** 4",
                "Explanation": "** Longest ZigZag path in blue nodes (left -> right -> left -> right)."
            }
        ]
    },
    {
        "Title": "Maximum Sum BST in Binary Tree",
        "slug": "maximum-sum-bst-in-binary-tree",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]",
                "Output": "** 20",
                "Explanation": "** Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3."
            },
            {
                "Input": "** root = [4,3,null,1,2]",
                "Output": "** 2",
                "Explanation": "** Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2."
            }
        ]
    },
    {
        "Title": "Generate a String With Characters That Have Odd Counts",
        "slug": "generate-a-string-with-characters-that-have-odd-counts",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** \"pppz\"",
                "Explanation": "** \"pppz\" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as \"ohhh\" and \"love\"."
            },
            {
                "Input": "** n = 2",
                "Output": "** \"xy\"",
                "Explanation": "** \"xy\" is a valid string since the characters 'x' and 'y' occur once. Note that there are many other valid strings such as \"ag\" and \"ur\"."
            },
            {
                "Input": "** n = 7",
                "Output": "** \"holasss\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Times Binary String Is Prefix-Aligned",
        "slug": "number-of-times-binary-string-is-prefix-aligned",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** flips = [3,2,4,1,5]",
                "Output": "** 2",
                "Explanation": "** The binary string is initially \"00000\".\nAfter applying step 1: The string becomes \"00100\", which is not prefix-aligned.\nAfter applying step 2: The string becomes \"01100\", which is not prefix-aligned.\nAfter applying step 3: The string becomes \"01110\", which is not prefix-aligned.\nAfter applying step 4: The string becomes \"11110\", which is prefix-aligned.\nAfter applying step 5: The string becomes \"11111\", which is prefix-aligned.\nWe can see that the string was prefix-aligned 2 times, so we return 2."
            },
            {
                "Input": "** flips = [4,1,2,3]",
                "Output": "** 1",
                "Explanation": "** The binary string is initially \"0000\".\nAfter applying step 1: The string becomes \"0001\", which is not prefix-aligned.\nAfter applying step 2: The string becomes \"1001\", which is not prefix-aligned.\nAfter applying step 3: The string becomes \"1101\", which is not prefix-aligned.\nAfter applying step 4: The string becomes \"1111\", which is prefix-aligned.\nWe can see that the string was prefix-aligned 1 time, so we return 1."
            }
        ]
    },
    {
        "Title": "Time Needed to Inform All Employees",
        "slug": "time-needed-to-inform-all-employees",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]",
                "Output": "** 1",
                "Explanation": "** The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all.\nThe tree structure of the employees in the company is shown."
            }
        ]
    },
    {
        "Title": "Frog Position After T Seconds",
        "slug": "frog-position-after-t-seconds",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4",
                "Output": "** 0.16666666666666666",
                "Explanation": "** The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after **second 1** and then jumping with 1/2 probability to vertex 4 after **second 2**. Thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 = 0.16666666666666666."
            }
        ]
    },
    {
        "Title": "Replace Employee ID With The Unique Identifier",
        "slug": "replace-employee-id-with-the-unique-identifier",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nEmployees table:\n+----+----------+\n| id | name     |\n+----+----------+\n| 1  | Alice    |\n| 7  | Bob      |\n| 11 | Meir     |\n| 90 | Winston  |\n| 3  | Jonathan |\n+----+----------+\nEmployeeUNI table:\n+----+-----------+\n| id | unique_id |\n+----+-----------+\n| 3  | 1         |\n| 11 | 2         |\n| 90 | 3         |\n+----+-----------+",
                "Output": "** \n+-----------+----------+\n| unique_id | name     |\n+-----------+----------+\n| null      | Alice    |\n| null      | Bob      |\n| 2         | Meir     |\n| 3         | Winston  |\n| 1         | Jonathan |\n+-----------+----------+",
                "Explanation": "** \nAlice and Bob do not have a unique ID, We will show null instead.\nThe unique ID of Meir is 2.\nThe unique ID of Winston is 3.\nThe unique ID of Jonathan is 1."
            }
        ]
    },
    {
        "Title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
        "slug": "find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** tree = [7,4,3,null,null,6,19], target = 3",
                "Output": "** 3",
                "Explanation": "** In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree."
            },
            {
                "Input": "** tree = [7], target =  7",
                "Output": "** 7",
                "Explanation": null
            },
            {
                "Input": "** tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Lucky Numbers in a Matrix",
        "slug": "lucky-numbers-in-a-matrix",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** matrix = [[3,7,8],[9,11,13],[15,16,17]]",
                "Output": "** [15]",
                "Explanation": "** 15 is the only lucky number since it is the minimum in its row and the maximum in its column."
            },
            {
                "Input": "** matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]",
                "Output": "** [12]",
                "Explanation": "** 12 is the only lucky number since it is the minimum in its row and the maximum in its column."
            },
            {
                "Input": "** matrix = [[7,8],[1,2]]",
                "Output": "** [7]",
                "Explanation": "** 7 is the only lucky number since it is the minimum in its row and the maximum in its column."
            }
        ]
    },
    {
        "Title": "Design a Stack With Increment Operation",
        "slug": "design-a-stack-with-increment-operation",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]",
                "Output": "[null,null,null,2,null,null,null,null,null,103,202,201,-1]",
                "Explanation": "CustomStack stk = new CustomStack(3); // Stack is Empty []\nstk.push(1);                          // stack becomes [1]\nstk.push(2);                          // stack becomes [1, 2]\nstk.pop();                            // return 2 --> Return top of the stack 2, stack becomes [1]\nstk.push(2);                          // stack becomes [1, 2]\nstk.push(3);                          // stack becomes [1, 2, 3]\nstk.push(4);                          // stack still [1, 2, 3], Do not add another elements as size is 4\nstk.increment(5, 100);                // stack becomes [101, 102, 103]\nstk.increment(2, 100);                // stack becomes [201, 202, 103]\nstk.pop();                            // return 103 --> Return top of the stack 103, stack becomes [201, 202]\nstk.pop();                            // return 202 --> Return top of the stack 202, stack becomes [201]\nstk.pop();                            // return 201 --> Return top of the stack 201, stack becomes []\nstk.pop();                            // return -1 --> Stack is empty return -1."
            }
        ]
    },
    {
        "Title": "Balance a Binary Search Tree",
        "slug": "balance-a-binary-search-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,null,2,null,3,null,4,null,null]",
                "Output": "** [2,1,3,null,null,null,4]",
                "Explanation": "** This is not the only correct answer, [3,1,4,null,2] is also correct."
            },
            {
                "Input": "** root = [2,1,3]",
                "Output": "** [2,1,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Performance of a Team",
        "slug": "maximum-performance-of-a-team",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2",
                "Output": "** 60",
                "Explanation": "** \nWe have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60."
            },
            {
                "Input": "** n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3",
                "Output": "** 68",
                "Explanation": "**This is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68."
            },
            {
                "Input": "** n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4",
                "Output": "** 72",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find the Distance Value Between Two Arrays",
        "slug": "find-the-distance-value-between-two-arrays",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2",
                "Output": "** 2",
                "Explanation": "** \nFor arr1[0]=4 we have: \n|4-10|=6 > d=2 \n|4-9|=5 > d=2 \n|4-1|=3 > d=2 \n|4-8|=4 > d=2 \nFor arr1[1]=5 we have: \n|5-10|=5 > d=2 \n|5-9|=4 > d=2 \n|5-1|=4 > d=2 \n|5-8|=3 > d=2\nFor arr1[2]=8 we have:\n**|8-10|=2 <= d=2**\n**|8-9|=1 <= d=2**\n|8-1|=7 > d=2\n**|8-8|=0 <= d=2**"
            },
            {
                "Input": "** arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Cinema Seat Allocation",
        "slug": "cinema-seat-allocation",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]",
                "Output": "** 4",
                "Explanation": "** The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group."
            }
        ]
    },
    {
        "Title": "Sort Integers by The Power Value",
        "slug": "sort-integers-by-the-power-value",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** lo = 12, hi = 15, k = 2",
                "Output": "** 13",
                "Explanation": "** The power of 12 is 9 (12 --> 6 --> 3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1)\nThe power of 13 is 9\nThe power of 14 is 17\nThe power of 15 is 17\nThe interval sorted by the power value [12,13,14,15]. For k = 2 answer is the second element which is 13.\nNotice that 12 and 13 have the same power value and we sorted them in ascending order. Same for 14 and 15."
            },
            {
                "Input": "** lo = 7, hi = 11, k = 4",
                "Output": "** 7",
                "Explanation": "** The power array corresponding to the interval [7, 8, 9, 10, 11] is [16, 3, 19, 6, 14].\nThe interval sorted by power is [8, 10, 11, 7, 9].\nThe fourth number in the sorted array is 7."
            }
        ]
    },
    {
        "Title": "Pizza With 3n Slices",
        "slug": "pizza-with-3n-slices",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** slices = [1,2,3,4,5,6]",
                "Output": "** 10",
                "Explanation": "** Pick pizza slice of size 4, Alice and Bob will pick slices with size 3 and 5 respectively. Then Pick slices with size 6, finally Alice and Bob will pick slice of size 2 and 1 respectively. Total = 4 + 6."
            },
            {
                "Input": "** slices = [8,9,8,6,1,1]",
                "Output": "** 16",
                "Explanation": "** Pick pizza slice of size 8 in each turn. If you pick slice with size 9 your partners will pick slices of size 8."
            }
        ]
    },
    {
        "Title": "Create Target Array in the Given Order",
        "slug": "create-target-array-in-the-given-order",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [0,1,2,3,4], index = [0,1,2,2,1]",
                "Output": "** [0,4,1,3,2]",
                "Explanation": "**\nnums       index     target\n0            0        [0]\n1            1        [0,1]\n2            2        [0,1,2]\n3            2        [0,1,3,2]\n4            1        [0,4,1,3,2]"
            },
            {
                "Input": "** nums = [1,2,3,4,0], index = [0,1,2,3,0]",
                "Output": "** [0,1,2,3,4]",
                "Explanation": "**\nnums       index     target\n1            0        [1]\n2            1        [1,2]\n3            2        [1,2,3]\n4            3        [1,2,3,4]\n0            0        [0,1,2,3,4]"
            },
            {
                "Input": "** nums = [1], index = [0]",
                "Output": "** [1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Four Divisors",
        "slug": "four-divisors",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [21,4,7]",
                "Output": "** 32",
                "Explanation": "** \n21 has 4 divisors: 1, 3, 7, 21\n4 has 3 divisors: 1, 2, 4\n7 has 2 divisors: 1, 7\nThe answer is the sum of divisors of 21 only."
            },
            {
                "Input": "** nums = [21,21]",
                "Output": "** 64",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Check if There is a Valid Path in a Grid",
        "slug": "check-if-there-is-a-valid-path-in-a-grid",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[2,4,3],[6,5,2]]",
                "Output": "** true",
                "Explanation": "** As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1)."
            },
            {
                "Input": "** grid = [[1,2,1],[1,2,1]]",
                "Output": "** false",
                "Explanation": "** As shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0)"
            }
        ]
    },
    {
        "Title": "Longest Happy Prefix",
        "slug": "longest-happy-prefix",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"level\"",
                "Output": "** \"l\"",
                "Explanation": "** s contains 4 prefix excluding itself (\"l\", \"le\", \"lev\", \"leve\"), and suffix (\"l\", \"el\", \"vel\", \"evel\"). The largest prefix which is also suffix is given by \"l\"."
            },
            {
                "Input": "** s = \"ababab\"",
                "Output": "** \"abab\"",
                "Explanation": "** \"abab\" is the largest prefix which is also suffix. They can overlap in the original string."
            }
        ]
    },
    {
        "Title": "Capital Gain/Loss",
        "slug": "capital-gainloss",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nStocks table:\n+---------------+-----------+---------------+--------+\n| stock_name    | operation | operation_day | price  |\n+---------------+-----------+---------------+--------+\n| Leetcode      | Buy       | 1             | 1000   |\n| Corona Masks  | Buy       | 2             | 10     |\n| Leetcode      | Sell      | 5             | 9000   |\n| Handbags      | Buy       | 17            | 30000  |\n| Corona Masks  | Sell      | 3             | 1010   |\n| Corona Masks  | Buy       | 4             | 1000   |\n| Corona Masks  | Sell      | 5             | 500    |\n| Corona Masks  | Buy       | 6             | 1000   |\n| Handbags      | Sell      | 29            | 7000   |\n| Corona Masks  | Sell      | 10            | 10000  |\n+---------------+-----------+---------------+--------+",
                "Output": "** \n+---------------+-------------------+\n| stock_name    | capital_gain_loss |\n+---------------+-------------------+\n| Corona Masks  | 9500              |\n| Leetcode      | 8000              |\n| Handbags      | -23000            |\n+---------------+-------------------+",
                "Explanation": "** \nLeetcode stock was bought at day 1 for 1000$ and was sold at day 5 for 9000$. Capital gain = 9000 - 1000 = 8000$.\nHandbags stock was bought at day 17 for 30000$ and was sold at day 29 for 7000$. Capital loss = 7000 - 30000 = -23000$.\nCorona Masks stock was bought at day 1 for 10$ and was sold at day 3 for 1010$. It was bought again at day 4 for 1000$ and was sold at day 5 for 500$. At last, it was bought at day 6 for 1000$ and was sold at day 10 for 10000$. Capital gain/loss is the sum of capital gains/losses for each ('Buy' --> 'Sell') operation = (1010 - 10) + (500 - 1000) + (10000 - 1000) = 1000 - 500 + 9000 = 9500$."
            }
        ]
    },
    {
        "Title": "Find Lucky Integer in an Array",
        "slug": "find-lucky-integer-in-an-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [2,2,3,4]",
                "Output": "** 2",
                "Explanation": "** The only lucky number in the array is 2 because frequency[2] == 2."
            },
            {
                "Input": "** arr = [1,2,2,3,3,3]",
                "Output": "** 3",
                "Explanation": "** 1, 2 and 3 are all lucky numbers, return the largest of them."
            },
            {
                "Input": "** arr = [2,2,2,3,3]",
                "Output": "** -1",
                "Explanation": "** There are no lucky numbers in the array."
            }
        ]
    },
    {
        "Title": "Count Number of Teams",
        "slug": "count-number-of-teams",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** rating = [2,5,3,4,1]",
                "Output": "** 3",
                "Explanation": "** We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1)."
            },
            {
                "Input": "** rating = [2,1,3]",
                "Output": "** 0",
                "Explanation": "** We can't form any team given the conditions."
            },
            {
                "Input": "** rating = [1,2,3,4]",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Design Underground System",
        "slug": "design-underground-system",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"UndergroundSystem\",\"checkIn\",\"checkIn\",\"checkIn\",\"checkOut\",\"checkOut\",\"checkOut\",\"getAverageTime\",\"getAverageTime\",\"checkIn\",\"getAverageTime\",\"checkOut\",\"getAverageTime\"]\n[[],[45,\"Leyton\",3],[32,\"Paradise\",8],[27,\"Leyton\",10],[45,\"Waterloo\",15],[27,\"Waterloo\",20],[32,\"Cambridge\",22],[\"Paradise\",\"Cambridge\"],[\"Leyton\",\"Waterloo\"],[10,\"Leyton\",24],[\"Leyton\",\"Waterloo\"],[10,\"Waterloo\",38],[\"Leyton\",\"Waterloo\"]]",
                "Output": "[null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000]",
                "Explanation": "UndergroundSystem undergroundSystem = new UndergroundSystem();\nundergroundSystem.checkIn(45, \"Leyton\", 3);\nundergroundSystem.checkIn(32, \"Paradise\", 8);\nundergroundSystem.checkIn(27, \"Leyton\", 10);\nundergroundSystem.checkOut(45, \"Waterloo\", 15);  // Customer 45 \"Leyton\" -> \"Waterloo\" in 15-3 = 12\nundergroundSystem.checkOut(27, \"Waterloo\", 20);  // Customer 27 \"Leyton\" -> \"Waterloo\" in 20-10 = 10\nundergroundSystem.checkOut(32, \"Cambridge\", 22); // Customer 32 \"Paradise\" -> \"Cambridge\" in 22-8 = 14\nundergroundSystem.getAverageTime(\"Paradise\", \"Cambridge\"); // return 14.00000. One trip \"Paradise\" -> \"Cambridge\", (14) / 1 = 14\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 11.00000. Two trips \"Leyton\" -> \"Waterloo\", (10 + 12) / 2 = 11\nundergroundSystem.checkIn(10, \"Leyton\", 24);\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 11.00000\nundergroundSystem.checkOut(10, \"Waterloo\", 38);  // Customer 10 \"Leyton\" -> \"Waterloo\" in 38-24 = 14\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 12.00000. Three trips \"Leyton\" -> \"Waterloo\", (10 + 12 + 14) / 3 = 12"
            },
            {
                "Input": "[\"UndergroundSystem\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\"]\n[[],[10,\"Leyton\",3],[10,\"Paradise\",8],[\"Leyton\",\"Paradise\"],[5,\"Leyton\",10],[5,\"Paradise\",16],[\"Leyton\",\"Paradise\"],[2,\"Leyton\",21],[2,\"Paradise\",30],[\"Leyton\",\"Paradise\"]]",
                "Output": "[null,null,null,5.00000,null,null,5.50000,null,null,6.66667]",
                "Explanation": "UndergroundSystem undergroundSystem = new UndergroundSystem();\nundergroundSystem.checkIn(10, \"Leyton\", 3);\nundergroundSystem.checkOut(10, \"Paradise\", 8); // Customer 10 \"Leyton\" -> \"Paradise\" in 8-3 = 5\nundergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 5.00000, (5) / 1 = 5\nundergroundSystem.checkIn(5, \"Leyton\", 10);\nundergroundSystem.checkOut(5, \"Paradise\", 16); // Customer 5 \"Leyton\" -> \"Paradise\" in 16-10 = 6\nundergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 5.50000, (5 + 6) / 2 = 5.5\nundergroundSystem.checkIn(2, \"Leyton\", 21);\nundergroundSystem.checkOut(2, \"Paradise\", 30); // Customer 2 \"Leyton\" -> \"Paradise\" in 30-21 = 9\nundergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 6.66667, (5 + 6 + 9) / 3 = 6.66667"
            }
        ]
    },
    {
        "Title": "Find All Good Strings",
        "slug": "find-all-good-strings",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 2, s1 = \"aa\", s2 = \"da\", evil = \"b\"",
                "Output": "** 51",
                "Explanation": "** There are 25 good strings starting with 'a': \"aa\",\"ac\",\"ad\",...,\"az\". Then there are 25 good strings starting with 'c': \"ca\",\"cc\",\"cd\",...,\"cz\" and finally there is one good string starting with 'd': \"da\"."
            },
            {
                "Input": "** n = 8, s1 = \"leetcode\", s2 = \"leetgoes\", evil = \"leet\"",
                "Output": "** 0",
                "Explanation": "** All strings greater than or equal to s1 and smaller than or equal to s2 start with the prefix \"leet\", therefore, there is not any good string."
            },
            {
                "Input": "** n = 2, s1 = \"gx\", s2 = \"gz\", evil = \"x\"",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count Largest Group",
        "slug": "count-largest-group",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 13",
                "Output": "** 4",
                "Explanation": "** There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:\n[1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9].\nThere are 4 groups with largest size."
            },
            {
                "Input": "** n = 2",
                "Output": "** 2",
                "Explanation": "** There are 2 groups [1], [2] of size 1."
            }
        ]
    },
    {
        "Title": "Construct K Palindrome Strings",
        "slug": "construct-k-palindrome-strings",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"annabelle\", k = 2",
                "Output": "** true",
                "Explanation": "** You can construct two palindromes using all characters in s.\nSome possible constructions \"anna\" + \"elble\", \"anbna\" + \"elle\", \"anellena\" + \"b\""
            },
            {
                "Input": "** s = \"leetcode\", k = 3",
                "Output": "** false",
                "Explanation": "** It is impossible to construct 3 palindromes using all the characters of s."
            },
            {
                "Input": "** s = \"true\", k = 4",
                "Output": "** true",
                "Explanation": "** The only possible solution is to put each character in a separate string."
            }
        ]
    },
    {
        "Title": "Circle and Rectangle Overlapping",
        "slug": "circle-and-rectangle-overlapping",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** radius = 1, xCenter = 0, yCenter = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1",
                "Output": "** true",
                "Explanation": "** Circle and rectangle share the point (1,0)."
            },
            {
                "Input": "** radius = 1, xCenter = 0, yCenter = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reducing Dishes",
        "slug": "reducing-dishes",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** satisfaction = [-1,-8,0,5,-9]",
                "Output": "** 14",
                "Explanation": "** After Removing the second and last dish, the maximum total **like-time coefficient** will be equal to (-1*1 + 0*2 + 5*3 = 14).\nEach dish is prepared in one unit of time."
            },
            {
                "Input": "** satisfaction = [4,3,2]",
                "Output": "** 20",
                "Explanation": "** Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)"
            },
            {
                "Input": "** satisfaction = [-1,-4,-5]",
                "Output": "** 0",
                "Explanation": "** People do not like the dishes. No dish is prepared."
            }
        ]
    },
    {
        "Title": "Minimum Subsequence in Non-Increasing Order",
        "slug": "minimum-subsequence-in-non-increasing-order",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [4,3,10,9,8]",
                "Output": "** [10,9]",
                "Explanation": "** The subsequences [10,9] and [10,8] are minimal such that the sum of their elements is strictly greater than the sum of elements not included. However, the subsequence [10,9] has the maximum total sum of its elements."
            },
            {
                "Input": "** nums = [4,4,7,6,7]",
                "Output": "** [7,7,6]",
                "Explanation": "** The subsequence [7,7] has the sum of its elements equal to 14 which is not strictly greater than the sum of elements not included (14 = 4 + 4 + 6). Therefore, the subsequence [7,6,7] is the minimal satisfying the conditions. Note the subsequence has to be returned in non-increasing order."
            }
        ]
    },
    {
        "Title": "Number of Steps to Reduce a Number in Binary Representation to One",
        "slug": "number-of-steps-to-reduce-a-number-in-binary-representation-to-one",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"1101\"",
                "Output": "** 6",
                "Explanation": "** \"1101\" corressponds to number 13 in their decimal representation.\nStep 1) 13 is odd, add 1 and obtain 14.\u00a0\nStep 2) 14 is even, divide by 2 and obtain 7.\nStep 3) 7 is odd, add 1 and obtain 8.\nStep 4) 8 is even, divide by 2 and obtain 4.\u00a0 \nStep 5) 4 is even, divide by 2 and obtain 2.\u00a0\nStep 6) 2 is even, divide by 2 and obtain 1."
            },
            {
                "Input": "** s = \"10\"",
                "Output": "** 1",
                "Explanation": "** \"10\" corresponds to number 2 in their decimal representation.\nStep 1) 2 is even, divide by 2 and obtain 1."
            },
            {
                "Input": "** s = \"1\"",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Happy String",
        "slug": "longest-happy-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** a = 1, b = 1, c = 7",
                "Output": "** \"ccaccbcc\"",
                "Explanation": "** \"ccbccacc\" would also be a correct answer."
            },
            {
                "Input": "** a = 7, b = 1, c = 0",
                "Output": "** \"aabaa\"",
                "Explanation": "** It is the only correct answer in this case."
            }
        ]
    },
    {
        "Title": "Stone Game III",
        "slug": "stone-game-iii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** stoneValue = [1,2,3,7]",
                "Output": "** \"Bob\"",
                "Explanation": "** Alice will always lose. Her best move will be to take three piles and the score become 6. Now the score of Bob is 7 and Bob wins."
            },
            {
                "Input": "** stoneValue = [1,2,3,-9]",
                "Output": "** \"Alice\"",
                "Explanation": "** Alice must choose all the three piles at the first move to win and leave Bob with negative score.\nIf Alice chooses one pile her score will be 1 and the next move Bob's score becomes 5. In the next move, Alice will take the pile with value = -9 and lose.\nIf Alice chooses two piles her score will be 3 and the next move Bob's score becomes 3. In the next move, Alice will take the pile with value = -9 and also lose.\nRemember that both play optimally so here Alice will choose the scenario that makes her win."
            },
            {
                "Input": "** stoneValue = [1,2,3,6]",
                "Output": "** \"Tie\"",
                "Explanation": "** Alice cannot win this game. She can end the game in a draw if she decided to choose all the first three piles, otherwise she will lose."
            }
        ]
    },
    {
        "Title": "Top Travellers",
        "slug": "top-travellers",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nUsers table:\n+------+-----------+\n| id   | name      |\n+------+-----------+\n| 1    | Alice     |\n| 2    | Bob       |\n| 3    | Alex      |\n| 4    | Donald    |\n| 7    | Lee       |\n| 13   | Jonathan  |\n| 19   | Elvis     |\n+------+-----------+\nRides table:\n+------+----------+----------+\n| id   | user_id  | distance |\n+------+----------+----------+\n| 1    | 1        | 120      |\n| 2    | 2        | 317      |\n| 3    | 3        | 222      |\n| 4    | 7        | 100      |\n| 5    | 13       | 312      |\n| 6    | 19       | 50       |\n| 7    | 7        | 120      |\n| 8    | 19       | 400      |\n| 9    | 7        | 230      |\n+------+----------+----------+",
                "Output": "** \n+----------+--------------------+\n| name     | travelled_distance |\n+----------+--------------------+\n| Elvis    | 450                |\n| Lee      | 450                |\n| Bob      | 317                |\n| Jonathan | 312                |\n| Alex     | 222                |\n| Alice    | 120                |\n| Donald   | 0                  |\n+----------+--------------------+",
                "Explanation": "** \nElvis and Lee traveled 450 miles, Elvis is the top traveler as his name is alphabetically smaller than Lee.\nBob, Jonathan, Alex, and Alice have only one ride and we just order them by the total distances of the ride.\nDonald did not have any rides, the distance traveled by him is 0."
            }
        ]
    },
    {
        "Title": "String Matching in an Array",
        "slug": "string-matching-in-an-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** words = [\"mass\",\"as\",\"hero\",\"superhero\"]",
                "Output": "** [\"as\",\"hero\"]",
                "Explanation": "** \"as\" is substring of \"mass\" and \"hero\" is substring of \"superhero\".\n[\"hero\",\"as\"] is also a valid answer."
            },
            {
                "Input": "** words = [\"leetcode\",\"et\",\"code\"]",
                "Output": "** [\"et\",\"code\"]",
                "Explanation": "** \"et\", \"code\" are substring of \"leetcode\"."
            },
            {
                "Input": "** words = [\"blue\",\"green\",\"bu\"]",
                "Output": "** []",
                "Explanation": "** No string of words is substring of another string."
            }
        ]
    },
    {
        "Title": "Queries on a Permutation With Key",
        "slug": "queries-on-a-permutation-with-key",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** queries = [3,1,2,1], m = 5",
                "Output": "** [2,1,2,1]",
                "Explanation": "** The queries are processed as follow: \nFor i=0: queries[i]=3, P=[1,2,3,4,5], position of 3 in P is **2**, then we move 3 to the beginning of P resulting in P=[3,1,2,4,5]. \nFor i=1: queries[i]=1, P=[3,1,2,4,5], position of 1 in P is **1**, then we move 1 to the beginning of P resulting in P=[1,3,2,4,5]. \nFor i=2: queries[i]=2, P=[1,3,2,4,5], position of 2 in P is **2**, then we move 2 to the beginning of P resulting in P=[2,1,3,4,5]. \nFor i=3: queries[i]=1, P=[2,1,3,4,5], position of 1 in P is **1**, then we move 1 to the beginning of P resulting in P=[1,2,3,4,5]. \nTherefore, the array containing the result is [2,1,2,1]."
            },
            {
                "Input": "** queries = [4,1,2,2], m = 4",
                "Output": "** [3,1,2,0]",
                "Explanation": null
            },
            {
                "Input": "** queries = [7,5,5,8,3], m = 8",
                "Output": "** [6,5,0,7,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "HTML Entity Parser",
        "slug": "html-entity-parser",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** text = \"&amp; is an HTML entity but &ambassador; is not.\"",
                "Output": "** \"& is an HTML entity but &ambassador; is not.\"",
                "Explanation": "** The parser will replace the &amp; entity by &"
            },
            {
                "Input": "** text = \"and I quote: &quot;...&quot;\"",
                "Output": "** \"and I quote: \\\"...\\\"\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Ways to Paint N \u00d7 3 Grid",
        "slug": "number-of-ways-to-paint-n-3-grid",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** 12",
                "Explanation": "** There are 12 possible way to paint the grid as shown."
            }
        ]
    },
    {
        "Title": "Minimum Value to Get Positive Step by Step Sum",
        "slug": "minimum-value-to-get-positive-step-by-step-sum",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [-3,2,-3,4,2]",
                "Output": "** 5",
                "Explanation": "** If you choose startValue = 4, in the third iteration your step by step sum is less than 1.\n**step by step sum**\n**startValue = 4 | startValue = 5 | nums**\n  (4 **-3** ) = 1  | (5 **-3** ) = 2    |  -3\n  (1 **+2** ) = 3  | (2 **+2** ) = 4    |   2\n  (3 **-3** ) = 0  | (4 **-3** ) = 1    |  -3\n  (0 **+4** ) = 4  | (1 **+4** ) = 5    |   4\n  (4 **+2** ) = 6  | (5 **+2** ) = 7    |   2"
            },
            {
                "Input": "** nums = [1,2]",
                "Output": "** 1",
                "Explanation": "** Minimum start value should be positive."
            },
            {
                "Input": "** nums = [1,-2,-3]",
                "Output": "** 5",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find the Minimum Number of Fibonacci Numbers Whose Sum Is K",
        "slug": "find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** k = 7",
                "Output": "** 2",
                "Explanation": "** The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ... \nFor k = 7 we can use 2 + 5 = 7."
            },
            {
                "Input": "** k = 10",
                "Output": "** 2",
                "Explanation": "** For k = 10 we can use 2 + 8 = 10."
            },
            {
                "Input": "** k = 19",
                "Output": "** 3",
                "Explanation": "** For k = 19 we can use 1 + 5 + 13 = 19."
            }
        ]
    },
    {
        "Title": "The k-th Lexicographical String of All Happy Strings of Length n",
        "slug": "the-k-th-lexicographical-string-of-all-happy-strings-of-length-n",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 1, k = 3",
                "Output": "** \"c\"",
                "Explanation": "** The list [\"a\", \"b\", \"c\"] contains all happy strings of length 1. The third string is \"c\"."
            },
            {
                "Input": "** n = 1, k = 4",
                "Output": "** \"\"",
                "Explanation": "** There are only 3 happy strings of length 1."
            },
            {
                "Input": "** n = 3, k = 9",
                "Output": "** \"cab\"",
                "Explanation": "** There are 12 different happy string of length 3 [\"aba\", \"abc\", \"aca\", \"acb\", \"bab\", \"bac\", \"bca\", \"bcb\", \"cab\", \"cac\", \"cba\", \"cbc\"]. You will find the 9th string = \"cab\""
            }
        ]
    },
    {
        "Title": "Restore The Array",
        "slug": "restore-the-array",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"1000\", k = 10000",
                "Output": "** 1",
                "Explanation": "** The only possible array is [1000]"
            },
            {
                "Input": "** s = \"1000\", k = 10",
                "Output": "** 0",
                "Explanation": "** There cannot be an array that was printed this way and has all integer >= 1 and <= 10."
            },
            {
                "Input": "** s = \"1317\", k = 2000",
                "Output": "** 8",
                "Explanation": "** Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]"
            }
        ]
    },
    {
        "Title": "Reformat The String",
        "slug": "reformat-the-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"a0b1c2\"",
                "Output": "** \"0a1b2c\"",
                "Explanation": "** No two adjacent characters have the same type in \"0a1b2c\". \"a0b1c2\", \"0a1b2c\", \"0c2a1b\" are also valid permutations."
            },
            {
                "Input": "** s = \"leetcode\"",
                "Output": "** \"\"",
                "Explanation": "** \"leetcode\" has only characters so we cannot separate them by digits."
            },
            {
                "Input": "** s = \"1229857369\"",
                "Output": "** \"\"",
                "Explanation": "** \"1229857369\" has only digits so we cannot separate them by characters."
            }
        ]
    },
    {
        "Title": "Display Table of Food Orders in a Restaurant",
        "slug": "display-table-of-food-orders-in-a-restaurant",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** orders = [[\"David\",\"3\",\"Ceviche\"],[\"Corina\",\"10\",\"Beef Burrito\"],[\"David\",\"3\",\"Fried Chicken\"],[\"Carla\",\"5\",\"Water\"],[\"Carla\",\"5\",\"Ceviche\"],[\"Rous\",\"3\",\"Ceviche\"]]",
                "Output": "** [[\"Table\",\"Beef Burrito\",\"Ceviche\",\"Fried Chicken\",\"Water\"],[\"3\",\"0\",\"2\",\"1\",\"0\"],[\"5\",\"0\",\"1\",\"0\",\"1\"],[\"10\",\"1\",\"0\",\"0\",\"0\"]]",
                "Explanation": "**The displaying table looks like:\r\n**Table,Beef Burrito,Ceviche,Fried Chicken,Water**\r\n3    ,0           ,2      ,1            ,0\r\n5    ,0           ,1      ,0            ,1\r\n10   ,1           ,0      ,0            ,0\r\nFor the table 3: David orders \"Ceviche\" and \"Fried Chicken\", and Rous orders \"Ceviche\".\r\nFor the table 5: Carla orders \"Water\" and \"Ceviche\".\r\nFor the table 10: Corina orders \"Beef Burrito\"."
            },
            {
                "Input": "** orders = [[\"James\",\"12\",\"Fried Chicken\"],[\"Ratesh\",\"12\",\"Fried Chicken\"],[\"Amadeus\",\"12\",\"Fried Chicken\"],[\"Adam\",\"1\",\"Canadian Waffles\"],[\"Brianna\",\"1\",\"Canadian Waffles\"]]",
                "Output": "** [[\"Table\",\"Canadian Waffles\",\"Fried Chicken\"],[\"1\",\"2\",\"0\"],[\"12\",\"0\",\"3\"]]",
                "Explanation": "** \r\nFor the table 1: Adam and Brianna order \"Canadian Waffles\".\r\nFor the table 12: James, Ratesh and Amadeus order \"Fried Chicken\"."
            },
            {
                "Input": "** orders = [[\"Laura\",\"2\",\"Bean Burrito\"],[\"Jhon\",\"2\",\"Beef Burrito\"],[\"Melissa\",\"2\",\"Soda\"]]",
                "Output": "** [[\"Table\",\"Bean Burrito\",\"Beef Burrito\",\"Soda\"],[\"2\",\"1\",\"1\",\"1\"]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Number of Frogs Croaking",
        "slug": "minimum-number-of-frogs-croaking",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** croakOfFrogs = \"croakcroak\"",
                "Output": "** 1",
                "Explanation": "** One frog yelling \"croak**\"** twice."
            },
            {
                "Input": "** croakOfFrogs = \"crcoakroak\"",
                "Output": "** 2",
                "Explanation": "** The minimum number of frogs is two. \nThe first frog could yell \"**cr**c**oak**roak\".\nThe second frog could yell later \"cr**c**oak**roak**\"."
            },
            {
                "Input": "** croakOfFrogs = \"croakcrook\"",
                "Output": "** -1",
                "Explanation": "** The given string is an invalid combination of \"croak**\"** from different frogs."
            }
        ]
    },
    {
        "Title": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
        "slug": "build-array-where-you-can-find-the-maximum-exactly-k-comparisons",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 2, m = 3, k = 1",
                "Output": "** 6",
                "Explanation": "** The possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2] [3, 3]"
            },
            {
                "Input": "** n = 5, m = 2, k = 3",
                "Output": "** 0",
                "Explanation": "** There are no possible arrays that satisfy the mentioned conditions."
            },
            {
                "Input": "** n = 9, m = 1, k = 1",
                "Output": "** 1",
                "Explanation": "** The only possible array is [1, 1, 1, 1, 1, 1, 1, 1, 1]"
            }
        ]
    },
    {
        "Title": "Maximum Score After Splitting a String",
        "slug": "maximum-score-after-splitting-a-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"011101\"",
                "Output": "** 5",
                "Explanation": "** \nAll possible ways of splitting s into two non-empty substrings are:\nleft = \"0\" and right = \"11101\", score = 1 + 4 = 5 \nleft = \"01\" and right = \"1101\", score = 1 + 3 = 4 \nleft = \"011\" and right = \"101\", score = 1 + 2 = 3 \nleft = \"0111\" and right = \"01\", score = 1 + 1 = 2 \nleft = \"01110\" and right = \"1\", score = 2 + 1 = 3"
            },
            {
                "Input": "** s = \"00111\"",
                "Output": "** 5",
                "Explanation": "** When left = \"00\" and right = \"111\", we get the maximum score = 2 + 3 = 5"
            },
            {
                "Input": "** s = \"1111\"",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Points You Can Obtain from Cards",
        "slug": "maximum-points-you-can-obtain-from-cards",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** cardPoints = [1,2,3,4,5,6,1], k = 3",
                "Output": "** 12",
                "Explanation": "** After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12."
            },
            {
                "Input": "** cardPoints = [2,2,2], k = 2",
                "Output": "** 4",
                "Explanation": "** Regardless of which two cards you take, your score will always be 4."
            },
            {
                "Input": "** cardPoints = [9,7,7,9,7,7,9], k = 7",
                "Output": "** 55",
                "Explanation": "** You have to take all the cards. Your score is the sum of points of all cards."
            }
        ]
    },
    {
        "Title": "Diagonal Traverse II",
        "slug": "diagonal-traverse-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [[1,2,3],[4,5,6],[7,8,9]]",
                "Output": "** [1,4,2,7,5,3,8,6,9]",
                "Explanation": null
            },
            {
                "Input": "** nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]",
                "Output": "** [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Constrained Subsequence Sum",
        "slug": "constrained-subsequence-sum",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [10,2,-10,5,20], k = 2",
                "Output": "** 37",
                "Explanation": "** The subsequence is [10, 2, 5, 20]."
            },
            {
                "Input": "** nums = [-1,-2,-3], k = 1",
                "Output": "** -1",
                "Explanation": "** The subsequence must be non-empty, so we choose the largest number."
            },
            {
                "Input": "** nums = [10,-2,-10,-5,20], k = 2",
                "Output": "** 23",
                "Explanation": "** The subsequence is [10, -2, -5, 20]."
            }
        ]
    },
    {
        "Title": "Kids With the Greatest Number of Candies",
        "slug": "kids-with-the-greatest-number-of-candies",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** candies = [2,3,5,1,3], extraCandies = 3",
                "Output": "** [true,true,true,false,true]",
                "Explanation": "** If you give all extraCandies to:\n- Kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids.\n- Kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids.\n- Kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids.\n- Kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids.\n- Kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids."
            },
            {
                "Input": "** candies = [4,2,1,1,2], extraCandies = 1",
                "Output": "** [true,false,false,false,false]",
                "Explanation": "** There is only 1 extra candy.\nKid 1 will always have the greatest number of candies, even if a different kid is given the extra candy."
            },
            {
                "Input": "** candies = [12,1,12], extraCandies = 10",
                "Output": "** [true,false,true]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Max Difference You Can Get From Changing an Integer",
        "slug": "max-difference-you-can-get-from-changing-an-integer",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** num = 555",
                "Output": "** 888",
                "Explanation": "** The first time pick x = 5 and y = 9 and store the new integer in a.\nThe second time pick x = 5 and y = 1 and store the new integer in b.\nWe have now a = 999 and b = 111 and max difference = 888"
            },
            {
                "Input": "** num = 9",
                "Output": "** 8",
                "Explanation": "** The first time pick x = 9 and y = 9 and store the new integer in a.\nThe second time pick x = 9 and y = 1 and store the new integer in b.\nWe have now a = 9 and b = 1 and max difference = 8"
            }
        ]
    },
    {
        "Title": "Check If a String Can Break Another String",
        "slug": "check-if-a-string-can-break-another-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s1 = \"abc\", s2 = \"xya\"",
                "Output": "** true",
                "Explanation": "** \"ayx\" is a permutation of s2=\"xya\" which can break to string \"abc\" which is a permutation of s1=\"abc\"."
            },
            {
                "Input": "** s1 = \"abe\", s2 = \"acd\"",
                "Output": "** false",
                "Explanation": "** All permutations for s1=\"abe\" are: \"abe\", \"aeb\", \"bae\", \"bea\", \"eab\" and \"eba\" and all permutation for s2=\"acd\" are: \"acd\", \"adc\", \"cad\", \"cda\", \"dac\" and \"dca\". However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa."
            },
            {
                "Input": "** s1 = \"leetcodee\", s2 = \"interview\"",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Ways to Wear Different Hats to Each Other",
        "slug": "number-of-ways-to-wear-different-hats-to-each-other",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** hats = [[3,4],[4,5],[5]]",
                "Output": "** 1",
                "Explanation": "** There is only one way to choose hats given the conditions. \nFirst person choose hat 3, Second person choose hat 4 and last one hat 5."
            },
            {
                "Input": "** hats = [[3,5,1],[3,5]]",
                "Output": "** 4",
                "Explanation": "** There are 4 ways to choose hats:\n(3,5), (5,3), (1,3) and (1,5)"
            },
            {
                "Input": "** hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]",
                "Output": "** 24",
                "Explanation": "** Each person can choose hats labeled from 1 to 4.\nNumber of Permutations of (1,2,3,4) = 24."
            }
        ]
    },
    {
        "Title": "Destination City",
        "slug": "destination-city",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** paths = [[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]",
                "Output": "** \"Sao Paulo\"",
                "Explanation": "** Starting at \"London\" city you will reach \"Sao Paulo\" city which is the destination city. Your trip consist of: \"London\" -> \"New York\" -> \"Lima\" -> \"Sao Paulo\"."
            },
            {
                "Input": "** paths = [[\"B\",\"C\"],[\"D\",\"B\"],[\"C\",\"A\"]]",
                "Output": "** \"A\"",
                "Explanation": "** All possible trips are:\u00a0\n\"D\" -> \"B\" -> \"C\" -> \"A\".\u00a0\n\"B\" -> \"C\" -> \"A\".\u00a0\n\"C\" -> \"A\".\u00a0\n\"A\".\u00a0\nClearly the destination city is \"A\"."
            },
            {
                "Input": "** paths = [[\"A\",\"Z\"]]",
                "Output": "** \"Z\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Check If All 1's Are at Least Length K Places Away",
        "slug": "check-if-all-1s-are-at-least-length-k-places-away",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,0,0,0,1,0,0,1], k = 2",
                "Output": "** true",
                "Explanation": "** Each of the 1s are at least 2 places away from each other."
            },
            {
                "Input": "** nums = [1,0,0,1,0,1], k = 2",
                "Output": "** false",
                "Explanation": "** The second 1 and third 1 are only one apart from each other."
            }
        ]
    },
    {
        "Title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
        "slug": "longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [8,2,4,7], limit = 4",
                "Output": "** 2",
                "Explanation": "** All subarrays are: \n[8] with maximum absolute diff |8-8| = 0 <= 4.\n[8,2] with maximum absolute diff |8-2| = 6 > 4. \n[8,2,4] with maximum absolute diff |8-2| = 6 > 4.\n[8,2,4,7] with maximum absolute diff |8-2| = 6 > 4.\n[2] with maximum absolute diff |2-2| = 0 <= 4.\n[2,4] with maximum absolute diff |2-4| = 2 <= 4.\n[2,4,7] with maximum absolute diff |2-7| = 5 > 4.\n[4] with maximum absolute diff |4-4| = 0 <= 4.\n[4,7] with maximum absolute diff |4-7| = 3 <= 4.\n[7] with maximum absolute diff |7-7| = 0 <= 4. \nTherefore, the size of the longest subarray is 2."
            },
            {
                "Input": "** nums = [10,1,2,4,7,2], limit = 5",
                "Output": "** 4",
                "Explanation": "** The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5."
            },
            {
                "Input": "** nums = [4,2,2,2,4,4,2,2], limit = 0",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find the Kth Smallest Sum of a Matrix With Sorted Rows",
        "slug": "find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** mat = [[1,3,11],[2,4,6]], k = 5",
                "Output": "** 7",
                "Explanation": "** Choosing one element from each row, the first k smallest sum are:\n[1,2], [1,4], [3,2], [3,4], [1,6]. Where the 5th sum is 7."
            },
            {
                "Input": "** mat = [[1,3,11],[2,4,6]], k = 9",
                "Output": "** 17",
                "Explanation": null
            },
            {
                "Input": "** mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7",
                "Output": "** 9",
                "Explanation": "** Choosing one element from each row, the first k smallest sum are:\n[1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]. Where the 7th sum is 9."
            }
        ]
    },
    {
        "Title": "Build an Array With Stack Operations",
        "slug": "build-an-array-with-stack-operations",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** target = [1,3], n = 3",
                "Output": "** [\"Push\",\"Push\",\"Pop\",\"Push\"]",
                "Explanation": "** Initially the stack s is empty. The last element is the top of the stack.\nRead 1 from the stream and push it to the stack. s = [1].\nRead 2 from the stream and push it to the stack. s = [1,2].\nPop the integer on the top of the stack. s = [1].\nRead 3 from the stream and push it to the stack. s = [1,3]."
            },
            {
                "Input": "** target = [1,2,3], n = 3",
                "Output": "** [\"Push\",\"Push\",\"Push\"]",
                "Explanation": "** Initially the stack s is empty. The last element is the top of the stack.\nRead 1 from the stream and push it to the stack. s = [1].\nRead 2 from the stream and push it to the stack. s = [1,2].\nRead 3 from the stream and push it to the stack. s = [1,2,3]."
            },
            {
                "Input": "** target = [1,2], n = 4",
                "Output": "** [\"Push\",\"Push\"]",
                "Explanation": "** Initially the stack s is empty. The last element is the top of the stack.\nRead 1 from the stream and push it to the stack. s = [1].\nRead 2 from the stream and push it to the stack. s = [1,2].\nSince the stack (from the bottom to the top) is equal to target, we stop the stack operations.\nThe answers that read integer 3 from the stream are not accepted."
            }
        ]
    },
    {
        "Title": "Count Triplets That Can Form Two Arrays of Equal XOR",
        "slug": "count-triplets-that-can-form-two-arrays-of-equal-xor",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [2,3,1,6,7]",
                "Output": "** 4",
                "Explanation": "** The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4)"
            },
            {
                "Input": "** arr = [1,1,1,1,1]",
                "Output": "** 10",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Time to Collect All Apples in a Tree",
        "slug": "minimum-time-to-collect-all-apples-in-a-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]",
                "Output": "** 8",
                "Explanation": "** The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows."
            },
            {
                "Input": "** n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,false,true,false]",
                "Output": "** 6",
                "Explanation": "** The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows."
            }
        ]
    },
    {
        "Title": "Number of Ways of Cutting a Pizza",
        "slug": "number-of-ways-of-cutting-a-pizza",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** pizza = [\"A..\",\"AA.\",\"...\"], k = 3",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** pizza = [\"A..\",\"A..\",\"...\"], k = 1",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Simplified Fractions",
        "slug": "simplified-fractions",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** [\"1/2\"]",
                "Explanation": "** \"1/2\" is the only unique fraction with a denominator less-than-or-equal-to 2."
            },
            {
                "Input": "** n = 3",
                "Output": "** [\"1/2\",\"1/3\",\"2/3\"]",
                "Explanation": null
            },
            {
                "Input": "** n = 4",
                "Output": "** [\"1/2\",\"1/3\",\"1/4\",\"2/3\",\"3/4\"]",
                "Explanation": "** \"2/4\" is not a simplified fraction because it can be simplified to \"1/2\"."
            }
        ]
    },
    {
        "Title": "Count Good Nodes in Binary Tree",
        "slug": "count-good-nodes-in-binary-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1]",
                "Output": "** 1",
                "Explanation": "** Root is considered as **good**."
            }
        ]
    },
    {
        "Title": "Form Largest Integer With Digits That Add up to Target",
        "slug": "form-largest-integer-with-digits-that-add-up-to-target",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** cost = [4,3,2,5,6,7,2,5,5], target = 9",
                "Output": "** \"7772\"",
                "Explanation": "** The cost to paint the digit '7' is 2, and the digit '2' is 3. Then cost(\"7772\") = 2*3+ 3*1 = 9. You could also paint \"977\", but \"7772\" is the largest number.\n**Digit cost**\n  1  ->   4\n  2  ->   3\n  3  ->   2\n  4  ->   5\n  5  ->   6\n  6  ->   7\n  7  ->   2\n  8  ->   5\n  9  ->   5"
            },
            {
                "Input": "** cost = [7,6,5,5,5,6,8,7,8], target = 12",
                "Output": "** \"85\"",
                "Explanation": "** The cost to paint the digit '8' is 7, and the digit '5' is 5. Then cost(\"85\") = 7 + 5 = 12."
            },
            {
                "Input": "** cost = [2,4,6,2,4,6,4,4,4], target = 5",
                "Output": "** \"0\"",
                "Explanation": "** It is impossible to paint any integer with total cost equal to target."
            }
        ]
    },
    {
        "Title": "Number of Students Doing Homework at a Given Time",
        "slug": "number-of-students-doing-homework-at-a-given-time",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** startTime = [1,2,3], endTime = [3,2,7], queryTime = 4",
                "Output": "** 1",
                "Explanation": "** We have 3 students where:\nThe first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4.\nThe second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4.\nThe third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4."
            },
            {
                "Input": "** startTime = [4], endTime = [4], queryTime = 4",
                "Output": "** 1",
                "Explanation": "** The only student was doing their homework at the queryTime."
            }
        ]
    },
    {
        "Title": "Rearrange Words in a Sentence",
        "slug": "rearrange-words-in-a-sentence",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** text = \"Leetcode is cool\"",
                "Output": "** \"Is cool leetcode\"",
                "Explanation": "** There are 3 words, \"Leetcode\" of length 8, \"is\" of length 2 and \"cool\" of length 4.\nOutput is ordered by length and the new first word starts with capital letter."
            },
            {
                "Input": "** text = \"Keep calm and code on\"",
                "Output": "** \"On and keep calm code\"",
                "Explanation": "** Output is ordered as follows:\n\"On\" 2 letters.\n\"and\" 3 letters.\n\"keep\" 4 letters in case of tie order by position in original text.\n\"calm\" 4 letters.\n\"code\" 4 letters."
            },
            {
                "Input": "** text = \"To be or not to be\"",
                "Output": "** \"To be or to be not\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "People Whose List of Favorite Companies Is Not a Subset of Another List",
        "slug": "people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"google\",\"microsoft\"],[\"google\",\"facebook\"],[\"google\"],[\"amazon\"]]",
                "Output": "** [0,1,4]",
                "Explanation": "** \nPerson with index=2 has favoriteCompanies[2]=[\"google\",\"facebook\"] which is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] corresponding to the person with index 0. \nPerson with index=3 has favoriteCompanies[3]=[\"google\"] which is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] and favoriteCompanies[1]=[\"google\",\"microsoft\"]. \nOther lists of favorite companies are not a subset of another list, therefore, the answer is [0,1,4]."
            },
            {
                "Input": "** favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"leetcode\",\"amazon\"],[\"facebook\",\"google\"]]",
                "Output": "** [0,1]",
                "Explanation": "** In this case favoriteCompanies[2]=[\"facebook\",\"google\"] is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"], therefore, the answer is [0,1]."
            },
            {
                "Input": "** favoriteCompanies = [[\"leetcode\"],[\"google\"],[\"facebook\"],[\"amazon\"]]",
                "Output": "** [0,1,2,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Number of Darts Inside of a Circular Dartboard",
        "slug": "maximum-number-of-darts-inside-of-a-circular-dartboard",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** darts = [[-2,0],[2,0],[0,2],[0,-2]], r = 2",
                "Output": "** 4",
                "Explanation": "** Circle dartboard with center in (0,0) and radius = 2 contain all points."
            },
            {
                "Input": "** darts = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5",
                "Output": "** 5",
                "Explanation": "** Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8)."
            }
        ]
    },
    {
        "Title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence",
        "slug": "check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** sentence = \"i love eating burger\", searchWord = \"burg\"",
                "Output": "** 4",
                "Explanation": "** \"burg\" is prefix of \"burger\" which is the 4th word in the sentence."
            },
            {
                "Input": "** sentence = \"this problem is an easy problem\", searchWord = \"pro\"",
                "Output": "** 2",
                "Explanation": "** \"pro\" is prefix of \"problem\" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index."
            },
            {
                "Input": "** sentence = \"i am tired\", searchWord = \"you\"",
                "Output": "** -1",
                "Explanation": "** \"you\" is not a prefix of any word in the sentence."
            }
        ]
    },
    {
        "Title": "Maximum Number of Vowels in a Substring of Given Length",
        "slug": "maximum-number-of-vowels-in-a-substring-of-given-length",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"abciiidef\", k = 3",
                "Output": "** 3",
                "Explanation": "** The substring \"iii\" contains 3 vowel letters."
            },
            {
                "Input": "** s = \"aeiou\", k = 2",
                "Output": "** 2",
                "Explanation": "** Any substring of length 2 contains 2 vowels."
            },
            {
                "Input": "** s = \"leetcode\", k = 3",
                "Output": "** 2",
                "Explanation": "** \"lee\", \"eet\" and \"ode\" contain 2 vowels."
            }
        ]
    },
    {
        "Title": "Pseudo-Palindromic Paths in a Binary Tree",
        "slug": "pseudo-palindromic-paths-in-a-binary-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [2,3,1,3,1,null,1]",
                "Output": "** 2",
                "Explanation": "** The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome)."
            }
        ]
    },
    {
        "Title": "Max Dot Product of Two Subsequences",
        "slug": "max-dot-product-of-two-subsequences",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums1 = [2,1,-2,5], nums2 = [3,0,-6]",
                "Output": "** 18",
                "Explanation": "** Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2.\nTheir dot product is (2*3 + (-2)*(-6)) = 18."
            },
            {
                "Input": "** nums1 = [3,-2], nums2 = [2,-6,7]",
                "Output": "** 21",
                "Explanation": "** Take subsequence [3] from nums1 and subsequence [7] from nums2.\nTheir dot product is (3*7) = 21."
            },
            {
                "Input": "** nums1 = [-1,-1], nums2 = [1,1]",
                "Output": "** -1",
                "Explanation": "** Take subsequence [-1] from nums1 and subsequence [1] from nums2.\nTheir dot product is -1."
            }
        ]
    },
    {
        "Title": "Make Two Arrays Equal by Reversing Subarrays",
        "slug": "make-two-arrays-equal-by-reversing-subarrays",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** target = [1,2,3,4], arr = [2,4,1,3]",
                "Output": "** true",
                "Explanation": "** You can follow the next steps to convert arr to target:\n1- Reverse subarray [2,4,1], arr becomes [1,4,2,3]\n2- Reverse subarray [4,2], arr becomes [1,2,4,3]\n3- Reverse subarray [4,3], arr becomes [1,2,3,4]\nThere are multiple ways to convert arr to target, this is not the only way to do so."
            },
            {
                "Input": "** target = [7], arr = [7]",
                "Output": "** true",
                "Explanation": "** arr is equal to target without any reverses."
            },
            {
                "Input": "** target = [3,7,9], arr = [3,7,11]",
                "Output": "** false",
                "Explanation": "** arr does not have value 9 and it can never be converted to target."
            }
        ]
    },
    {
        "Title": "Check If a String Contains All Binary Codes of Size K",
        "slug": "check-if-a-string-contains-all-binary-codes-of-size-k",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"00110110\", k = 2",
                "Output": "** true",
                "Explanation": "** The binary codes of length 2 are \"00\", \"01\", \"10\" and \"11\". They can be all found as substrings at indices 0, 1, 3 and 2 respectively."
            },
            {
                "Input": "** s = \"0110\", k = 1",
                "Output": "** true",
                "Explanation": "** The binary codes of length 1 are \"0\" and \"1\", it is clear that both exist as a substring."
            },
            {
                "Input": "** s = \"0110\", k = 2",
                "Output": "** false",
                "Explanation": "** The binary code \"00\" is of length 2 and does not exist in the array."
            }
        ]
    },
    {
        "Title": "Course Schedule IV",
        "slug": "course-schedule-iv",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** numCourses = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]]",
                "Output": "** [false,true]",
                "Explanation": "** The pair [1, 0] indicates that you have to take course 1 before you can take course 0.\nCourse 0 is not a prerequisite of course 1, but the opposite is true."
            },
            {
                "Input": "** numCourses = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]]",
                "Output": "** [true,true]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Cherry Pickup II",
        "slug": "cherry-pickup-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]]",
                "Output": "** 24",
                "Explanation": "** Path of robot #1 and #2 are described in color green and blue respectively.\nCherries taken by Robot #1, (3 + 2 + 5 + 2) = 12.\nCherries taken by Robot #2, (1 + 5 + 5 + 1) = 12.\nTotal of cherries: 12 + 12 = 24."
            },
            {
                "Input": "** grid = [[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]]",
                "Output": "** 28",
                "Explanation": "** Path of robot #1 and #2 are described in color green and blue respectively.\nCherries taken by Robot #1, (1 + 9 + 5 + 2) = 17.\nCherries taken by Robot #2, (1 + 3 + 4 + 3) = 11.\nTotal of cherries: 17 + 11 = 28."
            }
        ]
    },
    {
        "Title": "Maximum Product of Two Elements in an Array",
        "slug": "maximum-product-of-two-elements-in-an-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [3,4,5,2]",
                "Output": "** 12",
                "Explanation": "** If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12."
            },
            {
                "Input": "** nums = [1,5,4,5]",
                "Output": "** 16",
                "Explanation": "** Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16."
            },
            {
                "Input": "** nums = [3,7]",
                "Output": "** 12",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
        "slug": "maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]",
                "Output": "** 4",
                "Explanation": "** The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green piece of cake has the maximum area."
            },
            {
                "Input": "** h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]",
                "Output": "** 6",
                "Explanation": "** The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green and yellow pieces of cake have the maximum area."
            }
        ]
    },
    {
        "Title": "Reorder Routes to Make All Paths Lead to the City Zero",
        "slug": "reorder-routes-to-make-all-paths-lead-to-the-city-zero",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]",
                "Output": "** 3",
                "Explanation": "** Change the direction of edges show in red such that each node can reach the node 0 (capital)."
            },
            {
                "Input": "** n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]",
                "Output": "** 2",
                "Explanation": "** Change the direction of edges show in red such that each node can reach the node 0 (capital)."
            }
        ]
    },
    {
        "Title": "Probability of a Two Boxes Having The Same Number of Distinct Balls",
        "slug": "probability-of-a-two-boxes-having-the-same-number-of-distinct-balls",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** balls = [1,1]",
                "Output": "** 1.00000",
                "Explanation": "** Only 2 ways to divide the balls equally:\n- A ball of color 1 to box 1 and a ball of color 2 to box 2\n- A ball of color 2 to box 1 and a ball of color 1 to box 2\nIn both ways, the number of distinct colors in each box is equal. The probability is 2/2 = 1"
            },
            {
                "Input": "** balls = [2,1,1]",
                "Output": "** 0.66667",
                "Explanation": "** We have the set of balls [1, 1, 2, 3]\nThis set of balls will be shuffled randomly and we may have one of the 12 distinct shuffles with equal probability (i.e. 1/12):\n[1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]\nAfter that, we add the first two balls to the first box and the second two balls to the second box.\nWe can see that 8 of these 12 possible random distributions have the same number of distinct colors of balls in each box.\nProbability is 8/12 = 0.66667"
            },
            {
                "Input": "** balls = [1,2,1,2]",
                "Output": "** 0.60000",
                "Explanation": "** The set of balls is [1, 2, 2, 3, 4, 4]. It is hard to display all the 180 possible random shuffles of this set but it is easy to check that 108 of them will have the same number of distinct colors in each box.\nProbability = 108 / 180 = 0.6"
            }
        ]
    },
    {
        "Title": "Shuffle the Array",
        "slug": "shuffle-the-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [2,5,1,3,4,7], n = 3",
                "Output": "** [2,3,5,4,1,7]",
                "Explanation": "** Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7]."
            },
            {
                "Input": "** nums = [1,2,3,4,4,3,2,1], n = 4",
                "Output": "** [1,4,2,3,3,2,4,1]",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,1,2,2], n = 2",
                "Output": "** [1,2,1,2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "The k Strongest Values in an Array",
        "slug": "the-k-strongest-values-in-an-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [1,2,3,4,5], k = 2",
                "Output": "** [5,1]",
                "Explanation": "** Median is 3, the elements of the array sorted by the strongest are [5,1,4,2,3]. The strongest 2 elements are [5, 1]. [1, 5] is also **accepted** answer.\nPlease note that although |5 - 3| == |1 - 3| but 5 is stronger than 1 because 5 > 1."
            },
            {
                "Input": "** arr = [1,1,3,5,5], k = 2",
                "Output": "** [5,5]",
                "Explanation": "** Median is 3, the elements of the array sorted by the strongest are [5,5,1,1,3]. The strongest 2 elements are [5, 5]."
            },
            {
                "Input": "** arr = [6,7,11,7,6,8], k = 5",
                "Output": "** [11,8,6,6,7]",
                "Explanation": "** Median is 7, the elements of the array sorted by the strongest are [11,8,6,6,7,7].\nAny permutation of [11,8,6,6,7] is **accepted**."
            }
        ]
    },
    {
        "Title": "Paint House III",
        "slug": "paint-house-iii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3",
                "Output": "** 9",
                "Explanation": "** Paint houses of this way [1,2,2,1,1]\nThis array contains target = 3 neighborhoods, [{1}, {2,2}, {1,1}].\nCost of paint all houses (1 + 1 + 1 + 1 + 5) = 9."
            },
            {
                "Input": "** houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3",
                "Output": "** 11",
                "Explanation": "** Some houses are already painted, Paint the houses of this way [2,2,1,2,2]\nThis array contains target = 3 neighborhoods, [{2,2}, {1}, {2,2}]. \nCost of paint the first and last house (10 + 1) = 11."
            },
            {
                "Input": "** houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3",
                "Output": "** -1",
                "Explanation": "** Houses are already painted with a total of 4 neighborhoods [{3},{1},{2},{3}] different of target = 3."
            }
        ]
    },
    {
        "Title": "Final Prices With a Special Discount in a Shop",
        "slug": "final-prices-with-a-special-discount-in-a-shop",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** prices = [8,4,6,2,3]",
                "Output": "** [4,2,4,2,3]",
                "Explanation": "** \nFor item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4.\nFor item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2.\nFor item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4.\nFor items 3 and 4 you will not receive any discount at all."
            },
            {
                "Input": "** prices = [1,2,3,4,5]",
                "Output": "** [1,2,3,4,5]",
                "Explanation": "** In this case, for all items, you will not receive any discount at all."
            },
            {
                "Input": "** prices = [10,1,1,6]",
                "Output": "** [9,0,1,6]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Subrectangle Queries",
        "slug": "subrectangle-queries",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\"]\n[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]",
                "Output": "[null,1,null,5,5,null,10,5]",
                "Explanation": "SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);  \n// The initial rectangle (4x3) looks like:\n// 1 2 1\n// 4 3 4\n// 3 2 1\n// 1 1 1\nsubrectangleQueries.getValue(0, 2); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 3, 2, 5);\n// After this update the rectangle looks like:\n// 5 5 5\n// 5 5 5\n// 5 5 5\n// 5 5 5 \nsubrectangleQueries.getValue(0, 2); // return 5\nsubrectangleQueries.getValue(3, 1); // return 5\nsubrectangleQueries.updateSubrectangle(3, 0, 3, 2, 10);\n// After this update the rectangle looks like:\n// 5   5   5\n// 5   5   5\n// 5   5   5\n// 10  10  10 \nsubrectangleQueries.getValue(3, 1); // return 10\nsubrectangleQueries.getValue(0, 2); // return 5"
            },
            {
                "Input": "[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\"]\n[[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]",
                "Output": "[null,1,null,100,100,null,20]",
                "Explanation": "SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,1,1],[2,2,2],[3,3,3]]);\nsubrectangleQueries.getValue(0, 0); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 2, 2, 100);\nsubrectangleQueries.getValue(0, 0); // return 100\nsubrectangleQueries.getValue(2, 2); // return 100\nsubrectangleQueries.updateSubrectangle(1, 1, 2, 2, 20);\nsubrectangleQueries.getValue(2, 2); // return 20"
            }
        ]
    },
    {
        "Title": "Find Two Non-overlapping Sub-arrays Each With Target Sum",
        "slug": "find-two-non-overlapping-sub-arrays-each-with-target-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [3,2,2,4,3], target = 3",
                "Output": "** 2",
                "Explanation": "** Only two sub-arrays have sum = 3 ([3] and [3]). The sum of their lengths is 2."
            },
            {
                "Input": "** arr = [7,3,4,7], target = 7",
                "Output": "** 2",
                "Explanation": "** Although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2."
            },
            {
                "Input": "** arr = [4,3,2,6,2,3,4], target = 6",
                "Output": "** -1",
                "Explanation": "** We have only one sub-array of sum = 6."
            }
        ]
    },
    {
        "Title": "Allocate Mailboxes",
        "slug": "allocate-mailboxes",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** houses = [1,4,8,10,20], k = 3",
                "Output": "** 5",
                "Explanation": "** Allocate mailboxes in position 3, 9 and 20.\nMinimum total distance from each houses to nearest mailboxes is |3-1| + |4-3| + |9-8| + |10-9| + |20-20| = 5"
            },
            {
                "Input": "** houses = [2,3,5,12,18], k = 2",
                "Output": "** 9",
                "Explanation": "** Allocate mailboxes in position 3 and 14.\nMinimum total distance from each houses to nearest mailboxes is |2-3| + |3-3| + |5-3| + |12-14| + |18-14| = 9."
            }
        ]
    },
    {
        "Title": "Running Sum of 1d Array",
        "slug": "running-sum-of-1d-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** [1,3,6,10]",
                "Explanation": "** Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4]."
            },
            {
                "Input": "** nums = [1,1,1,1,1]",
                "Output": "** [1,2,3,4,5]",
                "Explanation": "** Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1]."
            },
            {
                "Input": "** nums = [3,1,2,10,1]",
                "Output": "** [3,4,6,16,17]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Least Number of Unique Integers after K Removals",
        "slug": "least-number-of-unique-integers-after-k-removals",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [5,5,4], k = 1",
                "Output": "** 1",
                "Explanation": "Remove the single 4, only 5 is left."
            },
            {
                "Input": "** arr = [4,3,1,1,3,3,2], k = 3",
                "Output": "** 2",
                "Explanation": "Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left."
            }
        ]
    },
    {
        "Title": "Minimum Number of Days to Make m Bouquets",
        "slug": "minimum-number-of-days-to-make-m-bouquets",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** bloomDay = [1,10,3,10,2], m = 3, k = 1",
                "Output": "** 3",
                "Explanation": "** Let us see what happened in the first three days. x means flower bloomed and _ means flower did not bloom in the garden.\nWe need 3 bouquets each should contain 1 flower.\nAfter day 1: [x, _, _, _, _]   // we can only make one bouquet.\nAfter day 2: [x, _, _, _, x]   // we can only make two bouquets.\nAfter day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3."
            },
            {
                "Input": "** bloomDay = [1,10,3,10,2], m = 3, k = 2",
                "Output": "** -1",
                "Explanation": "** We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1."
            },
            {
                "Input": "** bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3",
                "Output": "** 12",
                "Explanation": "** We need 2 bouquets each should have 3 flowers.\nHere is the garden after the 7 and 12 days:\nAfter day 7: [x, x, x, x, _, x, x]\nWe can make one bouquet of the first three flowers that bloomed. We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent.\nAfter day 12: [x, x, x, x, x, x, x]\nIt is obvious that we can make two bouquets in different ways."
            }
        ]
    },
    {
        "Title": "Kth Ancestor of a Tree Node",
        "slug": "kth-ancestor-of-a-tree-node",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"TreeAncestor\", \"getKthAncestor\", \"getKthAncestor\", \"getKthAncestor\"]\n[[7, [-1, 0, 0, 1, 1, 2, 2]], [3, 1], [5, 2], [6, 3]]",
                "Output": "[null, 1, 0, -1]",
                "Explanation": "TreeAncestor treeAncestor = new TreeAncestor(7, [-1, 0, 0, 1, 1, 2, 2]);\ntreeAncestor.getKthAncestor(3, 1); // returns 1 which is the parent of 3\ntreeAncestor.getKthAncestor(5, 2); // returns 0 which is the grandparent of 5\ntreeAncestor.getKthAncestor(6, 3); // returns -1 because there is no such ancestor"
            }
        ]
    },
    {
        "Title": "Group Sold Products By The Date",
        "slug": "group-sold-products-by-the-date",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nActivities table:\n+------------+------------+\n| sell_date  | product     |\n+------------+------------+\n| 2020-05-30 | Headphone  |\n| 2020-06-01 | Pencil     |\n| 2020-06-02 | Mask       |\n| 2020-05-30 | Basketball |\n| 2020-06-01 | Bible      |\n| 2020-06-02 | Mask       |\n| 2020-05-30 | T-Shirt    |\n+------------+------------+",
                "Output": "** \n+------------+----------+------------------------------+\n| sell_date  | num_sold | products                     |\n+------------+----------+------------------------------+\n| 2020-05-30 | 3        | Basketball,Headphone,T-shirt |\n| 2020-06-01 | 2        | Bible,Pencil                 |\n| 2020-06-02 | 1        | Mask                         |\n+------------+----------+------------------------------+",
                "Explanation": "** \nFor 2020-05-30, Sold items were (Headphone, Basketball, T-shirt), we sort them lexicographically and separate them by a comma.\nFor 2020-06-01, Sold items were (Pencil, Bible), we sort them lexicographically and separate them by a comma.\nFor 2020-06-02, the Sold item is (Mask), we just return it."
            }
        ]
    },
    {
        "Title": "XOR Operation in an Array",
        "slug": "xor-operation-in-an-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 5, start = 0",
                "Output": "** 8",
                "Explanation": "** Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.\nWhere \"^\" corresponds to bitwise XOR operator."
            },
            {
                "Input": "** n = 4, start = 3",
                "Output": "** 8",
                "Explanation": "** Array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8."
            }
        ]
    },
    {
        "Title": "Making File Names Unique",
        "slug": "making-file-names-unique",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** names = [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]",
                "Output": "** [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]",
                "Explanation": "** Let's see how the file system creates folder names:\n\"pes\" --> not assigned before, remains \"pes\"\n\"fifa\" --> not assigned before, remains \"fifa\"\n\"gta\" --> not assigned before, remains \"gta\"\n\"pes(2019)\" --> not assigned before, remains \"pes(2019)\""
            },
            {
                "Input": "** names = [\"gta\",\"gta(1)\",\"gta\",\"avalon\"]",
                "Output": "** [\"gta\",\"gta(1)\",\"gta(2)\",\"avalon\"]",
                "Explanation": "** Let's see how the file system creates folder names:\n\"gta\" --> not assigned before, remains \"gta\"\n\"gta(1)\" --> not assigned before, remains \"gta(1)\"\n\"gta\" --> the name is reserved, system adds (k), since \"gta(1)\" is also reserved, systems put k = 2. it becomes \"gta(2)\"\n\"avalon\" --> not assigned before, remains \"avalon\""
            },
            {
                "Input": "** names = [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece\"]",
                "Output": "** [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece(4)\"]",
                "Explanation": "** When the last folder is created, the smallest positive valid k is 4, and it becomes \"onepiece(4)\"."
            }
        ]
    },
    {
        "Title": "Avoid Flood in The City",
        "slug": "avoid-flood-in-the-city",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** rains = [1,2,3,4]",
                "Output": "** [-1,-1,-1,-1]",
                "Explanation": "** After the first day full lakes are [1]\nAfter the second day full lakes are [1,2]\nAfter the third day full lakes are [1,2,3]\nAfter the fourth day full lakes are [1,2,3,4]\nThere's no day to dry any lake and there is no flood in any lake."
            },
            {
                "Input": "** rains = [1,2,0,0,2,1]",
                "Output": "** [-1,-1,2,1,-1,-1]",
                "Explanation": "** After the first day full lakes are [1]\nAfter the second day full lakes are [1,2]\nAfter the third day, we dry lake 2. Full lakes are [1]\nAfter the fourth day, we dry lake 1. There is no full lakes.\nAfter the fifth day, full lakes are [2].\nAfter the sixth day, full lakes are [1,2].\nIt is easy that this scenario is flood-free. [-1,-1,1,2,-1,-1] is another acceptable scenario."
            },
            {
                "Input": "** rains = [1,2,0,1,2]",
                "Output": "** []",
                "Explanation": "** After the second day, full lakes are  [1,2]. We have to dry one lake in the third day.\nAfter that, it will rain over lakes [1,2]. It's easy to prove that no matter which lake you choose to dry in the 3rd day, the other one will flood."
            }
        ]
    },
    {
        "Title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
        "slug": "find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]",
                "Output": "** [[0,1],[2,3,4,5]]",
                "Explanation": "** The figure above describes the graph.\nThe following figure shows all the possible MSTs:\n![](https://assets.leetcode.com/uploads/2020/06/04/msts.png)\nNotice that the two edges 0 and 1 appear in all MSTs, therefore they are critical edges, so we return them in the first list of the output.\nThe edges 2, 3, 4, and 5 are only part of some MSTs, therefore they are considered pseudo-critical edges. We add them to the second list of the output."
            },
            {
                "Input": "** n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]]",
                "Output": "** [[],[0,1,2,3]]",
                "Explanation": "** We can observe that since all 4 edges have equal weight, choosing any 3 edges from the given 4 will yield an MST. Therefore all 4 edges are pseudo-critical."
            }
        ]
    },
    {
        "Title": "Average Salary Excluding the Minimum and Maximum Salary",
        "slug": "average-salary-excluding-the-minimum-and-maximum-salary",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** salary = [4000,3000,1000,2000]",
                "Output": "** 2500.00000",
                "Explanation": "** Minimum salary and maximum salary are 1000 and 4000 respectively.\nAverage salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500"
            },
            {
                "Input": "** salary = [1000,2000,3000]",
                "Output": "** 2000.00000",
                "Explanation": "** Minimum salary and maximum salary are 1000 and 3000 respectively.\nAverage salary excluding minimum and maximum salary is (2000) / 1 = 2000"
            }
        ]
    },
    {
        "Title": "The kth Factor of n",
        "slug": "the-kth-factor-of-n",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 12, k = 3",
                "Output": "** 3",
                "Explanation": "** Factors list is [1, 2, 3, 4, 6, 12], the 3rd factor is 3."
            },
            {
                "Input": "** n = 7, k = 2",
                "Output": "** 7",
                "Explanation": "** Factors list is [1, 7], the 2nd factor is 7."
            },
            {
                "Input": "** n = 4, k = 4",
                "Output": "** -1",
                "Explanation": "** Factors list is [1, 2, 4], there is only 3 factors. We should return -1."
            }
        ]
    },
    {
        "Title": "Longest Subarray of 1's After Deleting One Element",
        "slug": "longest-subarray-of-1s-after-deleting-one-element",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,1,0,1]",
                "Output": "** 3",
                "Explanation": "** After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's."
            },
            {
                "Input": "** nums = [0,1,1,1,0,1,1,0,1]",
                "Output": "** 5",
                "Explanation": "** After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1]."
            },
            {
                "Input": "** nums = [1,1,1]",
                "Output": "** 2",
                "Explanation": "** You must delete one element."
            }
        ]
    },
    {
        "Title": "Parallel Courses II",
        "slug": "parallel-courses-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 4, relations = [[2,1],[3,1],[1,4]], k = 2",
                "Output": "** 3",
                "Explanation": "** The figure above represents the given graph.\nIn the first semester, you can take courses 2 and 3.\nIn the second semester, you can take course 1.\nIn the third semester, you can take course 4."
            },
            {
                "Input": "** n = 5, relations = [[2,1],[3,1],[4,1],[1,5]], k = 2",
                "Output": "** 4",
                "Explanation": "** The figure above represents the given graph.\nIn the first semester, you can only take courses 2 and 3 since you cannot take more than two per semester.\nIn the second semester, you can take course 4.\nIn the third semester, you can take course 1.\nIn the fourth semester, you can take course 5."
            }
        ]
    },
    {
        "Title": "Path Crossing",
        "slug": "path-crossing",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** path = \"NES\"",
                "Output": "** false",
                "Explanation": "** Notice that the path doesn't cross any point more than once."
            },
            {
                "Input": "** path = \"NESWW\"",
                "Output": "** true",
                "Explanation": "** Notice that the path visits the origin twice."
            }
        ]
    },
    {
        "Title": "Check If Array Pairs Are Divisible by k",
        "slug": "check-if-array-pairs-are-divisible-by-k",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [1,2,3,4,5,10,6,7,8,9], k = 5",
                "Output": "** true",
                "Explanation": "** Pairs are (1,9),(2,8),(3,7),(4,6) and (5,10)."
            },
            {
                "Input": "** arr = [1,2,3,4,5,6], k = 7",
                "Output": "** true",
                "Explanation": "** Pairs are (1,6),(2,5) and(3,4)."
            },
            {
                "Input": "** arr = [1,2,3,4,5,6], k = 10",
                "Output": "** false",
                "Explanation": "** You can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10."
            }
        ]
    },
    {
        "Title": "Number of Subsequences That Satisfy the Given Sum Condition",
        "slug": "number-of-subsequences-that-satisfy-the-given-sum-condition",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,5,6,7], target = 9",
                "Output": "** 4",
                "Explanation": "** There are 4 subsequences that satisfy the condition.\n[3] -> Min value + max value <= target (3 + 3 <= 9)\n[3,5] -> (3 + 5 <= 9)\n[3,5,6] -> (3 + 6 <= 9)\n[3,6] -> (3 + 6 <= 9)"
            },
            {
                "Input": "** nums = [3,3,6,8], target = 10",
                "Output": "** 6",
                "Explanation": "** There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).\n[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]"
            },
            {
                "Input": "** nums = [2,3,3,4,6,7], target = 12",
                "Output": "** 61",
                "Explanation": "** There are 63 non-empty subsequences, two of them do not satisfy the condition ([6,7], [7]).\nNumber of valid subsequences (63 - 2 = 61)."
            }
        ]
    },
    {
        "Title": "Max Value of Equation",
        "slug": "max-value-of-equation",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** points = [[1,3],[2,0],[5,10],[6,-10]], k = 1",
                "Output": "** 4",
                "Explanation": "** The first two points satisfy the condition |xi - xj| <= 1 and if we calculate the equation we get 3 + 0 + |1 - 2| = 4. Third and fourth points also satisfy the condition and give a value of 10 + -10 + |5 - 6| = 1.\nNo other pairs satisfy the condition, so we return the max of 4 and 1."
            },
            {
                "Input": "** points = [[0,0],[3,0],[9,2]], k = 3",
                "Output": "** 3",
                "Explanation": "** Only the first two points have an absolute difference of 3 or less in the x-values, and give the value of 0 + 0 + |0 - 3| = 3."
            }
        ]
    },
    {
        "Title": "Can Make Arithmetic Progression From Sequence",
        "slug": "can-make-arithmetic-progression-from-sequence",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [3,5,1]",
                "Output": "** true",
                "Explanation": "** We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements."
            },
            {
                "Input": "** arr = [1,2,4]",
                "Output": "** false",
                "Explanation": "** There is no way to reorder the elements to obtain an arithmetic progression."
            }
        ]
    },
    {
        "Title": "Last Moment Before All Ants Fall Out of a Plank",
        "slug": "last-moment-before-all-ants-fall-out-of-a-plank",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 4, left = [4,3], right = [0,1]",
                "Output": "** 4",
                "Explanation": "** In the image above:\n-The ant at index 0 is named A and going to the right.\n-The ant at index 1 is named B and going to the right.\n-The ant at index 3 is named C and going to the left.\n-The ant at index 4 is named D and going to the left.\nThe last moment when an ant was on the plank is t = 4 seconds. After that, it falls immediately out of the plank. (i.e., We can say that at t = 4.0000000001, there are no ants on the plank)."
            },
            {
                "Input": "** n = 7, left = [], right = [0,1,2,3,4,5,6,7]",
                "Output": "** 7",
                "Explanation": "** All ants are going to the right, the ant at index 0 needs 7 seconds to fall."
            },
            {
                "Input": "** n = 7, left = [0,1,2,3,4,5,6,7], right = []",
                "Output": "** 7",
                "Explanation": "** All ants are going to the left, the ant at index 7 needs 7 seconds to fall."
            }
        ]
    },
    {
        "Title": "Count Submatrices With All Ones",
        "slug": "count-submatrices-with-all-ones",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** mat = [[1,0,1],[1,1,0],[1,1,0]]",
                "Output": "** 13",
                "Explanation": "** \nThere are 6 rectangles of side 1x1.\nThere are 2 rectangles of side 1x2.\nThere are 3 rectangles of side 2x1.\nThere is 1 rectangle of side 2x2. \nThere is 1 rectangle of side 3x1.\nTotal number of rectangles = 6 + 2 + 3 + 1 + 1 = 13."
            },
            {
                "Input": "** mat = [[0,1,1,0],[0,1,1,1],[1,1,1,0]]",
                "Output": "** 24",
                "Explanation": "** \nThere are 8 rectangles of side 1x1.\nThere are 5 rectangles of side 1x2.\nThere are 2 rectangles of side 1x3. \nThere are 4 rectangles of side 2x1.\nThere are 2 rectangles of side 2x2. \nThere are 2 rectangles of side 3x1. \nThere is 1 rectangle of side 3x2. \nTotal number of rectangles = 8 + 5 + 2 + 4 + 2 + 2 + 1 = 24."
            }
        ]
    },
    {
        "Title": "Minimum Possible Integer After at Most K Adjacent Swaps On Digits",
        "slug": "minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** num = \"4321\", k = 4",
                "Output": "** \"1342\"",
                "Explanation": "** The steps to obtain the minimum integer from 4321 with 4 adjacent swaps are shown."
            }
        ]
    },
    {
        "Title": "Reformat Date",
        "slug": "reformat-date",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** date = \"20th Oct 2052\"",
                "Output": "** \"2052-10-20\"",
                "Explanation": null
            },
            {
                "Input": "** date = \"6th Jun 1933\"",
                "Output": "** \"1933-06-06\"",
                "Explanation": null
            },
            {
                "Input": "** date = \"26th May 1960\"",
                "Output": "** \"1960-05-26\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Range Sum of Sorted Subarray Sums",
        "slug": "range-sum-of-sorted-subarray-sums",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4], n = 4, left = 1, right = 5",
                "Output": "** 13",
                "Explanation": "** All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13."
            },
            {
                "Input": "** nums = [1,2,3,4], n = 4, left = 3, right = 4",
                "Output": "** 6",
                "Explanation": "** The given array is the same as example 1. We have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6."
            },
            {
                "Input": "** nums = [1,2,3,4], n = 4, left = 1, right = 10",
                "Output": "** 50",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Difference Between Largest and Smallest Value in Three Moves",
        "slug": "minimum-difference-between-largest-and-smallest-value-in-three-moves",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [5,3,2,4]",
                "Output": "** 0",
                "Explanation": "** We can make at most 3 moves.\nIn the first move, change 2 to 3. nums becomes [5,3,3,4].\nIn the second move, change 4 to 3. nums becomes [5,3,3,3].\nIn the third move, change 5 to 3. nums becomes [3,3,3,3].\nAfter performing 3 moves, the difference between the minimum and maximum is 3 - 3 = 0."
            },
            {
                "Input": "** nums = [1,5,0,10,14]",
                "Output": "** 1",
                "Explanation": "** We can make at most 3 moves.\nIn the first move, change 5 to 0. nums becomes [1,0,0,10,14].\nIn the second move, change 10 to 0. nums becomes [1,0,0,0,14].\nIn the third move, change 14 to 1. nums becomes [1,0,0,0,1].\nAfter performing 3 moves, the difference between the minimum and maximum is 1 - 0 = 1.\nIt can be shown that there is no way to make the difference 0 in 3 moves."
            },
            {
                "Input": "** nums = [3,100,20]",
                "Output": "** 0",
                "Explanation": "** We can make at most 3 moves.\nIn the first move, change 100 to 7. nums becomes [3,7,20].\nIn the second move, change 20 to 7. nums becomes [3,7,7].\nIn the third move, change 3 to 7. nums becomes [7,7,7].\nAfter performing 3 moves, the difference between the minimum and maximum is 7 - 7 = 0."
            }
        ]
    },
    {
        "Title": "Stone Game IV",
        "slug": "stone-game-iv",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** true",
                "Explanation": "** Alice can remove 1 stone winning the game because Bob doesn't have any moves."
            },
            {
                "Input": "** n = 2",
                "Output": "** false",
                "Explanation": "** Alice can only remove 1 stone, after that Bob removes the last one winning the game (2 -> 1 -> 0)."
            },
            {
                "Input": "** n = 4",
                "Output": "** true",
                "Explanation": "** n is already a perfect square, Alice can win with one move, removing 4 stones (4 -> 0)."
            }
        ]
    },
    {
        "Title": "Number of Good Pairs",
        "slug": "number-of-good-pairs",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,3,1,1,3]",
                "Output": "** 4",
                "Explanation": "** There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed."
            },
            {
                "Input": "** nums = [1,1,1,1]",
                "Output": "** 6",
                "Explanation": "** Each pair in the array are *good*."
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Substrings With Only 1s",
        "slug": "number-of-substrings-with-only-1s",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"0110111\"",
                "Output": "** 9",
                "Explanation": "** There are 9 substring in total with only 1's characters.\n\"1\" -> 5 times.\n\"11\" -> 3 times.\n\"111\" -> 1 time."
            },
            {
                "Input": "** s = \"101\"",
                "Output": "** 2",
                "Explanation": "** Substring \"1\" is shown 2 times in s."
            },
            {
                "Input": "** s = \"111111\"",
                "Output": "** 21",
                "Explanation": "** Each substring contains only 1's characters."
            }
        ]
    },
    {
        "Title": "Best Position for a Service Centre",
        "slug": "best-position-for-a-service-centre",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** positions = [[0,1],[1,0],[1,2],[2,1]]",
                "Output": "** 4.00000",
                "Explanation": "** As shown, you can see that choosing [xcentre, ycentre] = [1, 1] will make the distance to each customer = 1, the sum of all distances is 4 which is the minimum possible we can achieve."
            },
            {
                "Input": "** positions = [[1,1],[3,3]]",
                "Output": "** 2.82843",
                "Explanation": "** The minimum possible sum of distances = sqrt(2) + sqrt(2) = 2.82843"
            }
        ]
    },
    {
        "Title": "Find Users With Valid E-Mails",
        "slug": "find-users-with-valid-e-mails",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nUsers table:\n+---------+-----------+-------------------------+\n| user_id | name      | mail                    |\n+---------+-----------+-------------------------+\n| 1       | Winston   | winston@leetcode.com    |\n| 2       | Jonathan  | jonathanisgreat         |\n| 3       | Annabelle | bella-@leetcode.com     |\n| 4       | Sally     | sally.come@leetcode.com |\n| 5       | Marwan    | quarz#2020@leetcode.com |\n| 6       | David     | david69@gmail.com       |\n| 7       | Shapiro   | .shapo@leetcode.com     |\n+---------+-----------+-------------------------+",
                "Output": "** \n+---------+-----------+-------------------------+\n| user_id | name      | mail                    |\n+---------+-----------+-------------------------+\n| 1       | Winston   | winston@leetcode.com    |\n| 3       | Annabelle | bella-@leetcode.com     |\n| 4       | Sally     | sally.come@leetcode.com |\n+---------+-----------+-------------------------+",
                "Explanation": "** \nThe mail of user 2 does not have a domain.\nThe mail of user 5 has the # sign which is not allowed.\nThe mail of user 6 does not have the leetcode domain.\nThe mail of user 7 starts with a period."
            }
        ]
    },
    {
        "Title": "Water Bottles",
        "slug": "water-bottles",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** numBottles = 9, numExchange = 3",
                "Output": "** 13",
                "Explanation": "** You can exchange 3 empty bottles to get 1 full water bottle.\nNumber of water bottles you can drink: 9 + 3 + 1 = 13."
            },
            {
                "Input": "** numBottles = 15, numExchange = 4",
                "Output": "** 19",
                "Explanation": "** You can exchange 4 empty bottles to get 1 full water bottle. \nNumber of water bottles you can drink: 15 + 3 + 1 = 19."
            }
        ]
    },
    {
        "Title": "Number of Nodes in the Sub-Tree With the Same Label",
        "slug": "number-of-nodes-in-the-sub-tree-with-the-same-label",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], labels = \"abaedcd\"",
                "Output": "** [2,1,1,1,1,1,1]",
                "Explanation": "** Node 0 has label 'a' and its sub-tree has node 2 with label 'a' as well, thus the answer is 2. Notice that any node is part of its sub-tree.\nNode 1 has a label 'b'. The sub-tree of node 1 contains nodes 1,4 and 5, as nodes 4 and 5 have different labels than node 1, the answer is just 1 (the node itself)."
            },
            {
                "Input": "** n = 4, edges = [[0,1],[1,2],[0,3]], labels = \"bbbb\"",
                "Output": "** [4,2,1,1]",
                "Explanation": "** The sub-tree of node 2 contains only node 2, so the answer is 1.\nThe sub-tree of node 3 contains only node 3, so the answer is 1.\nThe sub-tree of node 1 contains nodes 1 and 2, both have label 'b', thus the answer is 2.\nThe sub-tree of node 0 contains nodes 0, 1, 2 and 3, all with label 'b', thus the answer is 4."
            },
            {
                "Input": "** n = 5, edges = [[0,1],[0,2],[1,3],[0,4]], labels = \"aabab\"",
                "Output": "** [3,2,1,1,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Number of Non-Overlapping Substrings",
        "slug": "maximum-number-of-non-overlapping-substrings",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"adefaddaccc\"",
                "Output": "** [\"e\",\"f\",\"ccc\"]",
                "Explanation": "**\u00a0The following are all the possible substrings that meet the conditions:\n[\n\u00a0 \"adefaddaccc\"\n\u00a0 \"adefadda\",\n\u00a0 \"ef\",\n\u00a0 \"e\",\n  \"f\",\n\u00a0 \"ccc\",\n]\nIf we choose the first string, we cannot choose anything else and we'd get only 1. If we choose \"adefadda\", we are left with \"ccc\" which is the only one that doesn't overlap, thus obtaining 2 substrings. Notice also, that it's not optimal to choose \"ef\" since it can be split into two. Therefore, the optimal way is to choose [\"e\",\"f\",\"ccc\"] which gives us 3 substrings. No other solution of the same number of substrings exist."
            },
            {
                "Input": "** s = \"abbaccd\"",
                "Output": "** [\"d\",\"bb\",\"cc\"]",
                "Explanation": "** Notice that while the set of substrings [\"d\",\"abba\",\"cc\"] also has length 3, it's considered incorrect since it has larger total length."
            }
        ]
    },
    {
        "Title": "Find a Value of a Mysterious Function Closest to Target",
        "slug": "find-a-value-of-a-mysterious-function-closest-to-target",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** arr = [9,12,3,7,15], target = 5",
                "Output": "** 2",
                "Explanation": "** Calling func with all the pairs of [l,r] = [[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]], Winston got the following results [9,12,3,7,15,8,0,3,7,0,0,3,0,0,0]. The value closest to 5 is 7 and 3, thus the minimum difference is 2."
            },
            {
                "Input": "** arr = [1000000,1000000,1000000], target = 1",
                "Output": "** 999999",
                "Explanation": "** Winston called the func with all possible values of [l,r] and he always got 1000000, thus the min difference is 999999."
            },
            {
                "Input": "** arr = [1,2,4,8,16], target = 0",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count Odd Numbers in an Interval Range",
        "slug": "count-odd-numbers-in-an-interval-range",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** low = 3, high = 7",
                "Output": "** 3",
                "Explanation": "** The odd numbers between 3 and 7 are [3,5,7]."
            },
            {
                "Input": "** low = 8, high = 10",
                "Output": "** 1",
                "Explanation": "** The odd numbers between 8 and 10 are [9]."
            }
        ]
    },
    {
        "Title": "Number of Sub-arrays With Odd Sum",
        "slug": "number-of-sub-arrays-with-odd-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [1,3,5]",
                "Output": "** 4",
                "Explanation": "** All subarrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]\nAll sub-arrays sum are [1,4,9,3,8,5].\nOdd sums are [1,9,3,5] so the answer is 4."
            },
            {
                "Input": "** arr = [2,4,6]",
                "Output": "** 0",
                "Explanation": "** All subarrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]\nAll sub-arrays sum are [2,6,12,4,10,6].\nAll sub-arrays have even sum and the answer is 0."
            },
            {
                "Input": "** arr = [1,2,3,4,5,6,7]",
                "Output": "** 16",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Good Ways to Split a String",
        "slug": "number-of-good-ways-to-split-a-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"aacaba\"",
                "Output": "** 2",
                "Explanation": "** There are 5 ways to split \"aacaba\" and 2 of them are good. \n(\"a\", \"acaba\") Left string and right string contains 1 and 3 different letters respectively.\n(\"aa\", \"caba\") Left string and right string contains 1 and 3 different letters respectively.\n(\"aac\", \"aba\") Left string and right string contains 2 and 2 different letters respectively (good split).\n(\"aaca\", \"ba\") Left string and right string contains 2 and 2 different letters respectively (good split).\n(\"aacab\", \"a\") Left string and right string contains 3 and 1 different letters respectively."
            },
            {
                "Input": "** s = \"abcd\"",
                "Output": "** 1",
                "Explanation": "** Split the string as follows (\"ab\", \"cd\")."
            }
        ]
    },
    {
        "Title": "Minimum Number of Increments on Subarrays to Form a Target Array",
        "slug": "minimum-number-of-increments-on-subarrays-to-form-a-target-array",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** target = [1,2,3,2,1]",
                "Output": "** 3",
                "Explanation": "** We need at least 3 operations to form the target array from the initial array.\n[**0,0,0,0,0**] increment 1 from index 0 to 4 (inclusive).\n[1,**1,1,1**,1] increment 1 from index 1 to 3 (inclusive).\n[1,2,**2**,2,1] increment 1 at index 2.\n[1,2,3,2,1] target array is formed."
            },
            {
                "Input": "** target = [3,1,1,2]",
                "Output": "** 4",
                "Explanation": "** [**0,0,0,0**] -> [1,1,1,**1**] -> [**1**,1,1,2] -> [**2**,1,1,2] -> [3,1,1,2]"
            },
            {
                "Input": "** target = [3,1,5,4,2]",
                "Output": "** 7",
                "Explanation": "** [**0,0,0,0,0**] -> [**1**,1,1,1,1] -> [**2**,1,1,1,1] -> [3,1,**1,1,1**] -> [3,1,**2,2**,2] -> [3,1,**3,3**,2] -> [3,1,**4**,4,2] -> [3,1,5,4,2]."
            }
        ]
    },
    {
        "Title": "Patients With a Condition",
        "slug": "patients-with-a-condition",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nPatients table:\n+------------+--------------+--------------+\n| patient_id | patient_name | conditions   |\n+------------+--------------+--------------+\n| 1          | Daniel       | YFEV COUGH   |\n| 2          | Alice        |              |\n| 3          | Bob          | DIAB100 MYOP |\n| 4          | George       | ACNE DIAB100 |\n| 5          | Alain        | DIAB201      |\n+------------+--------------+--------------+",
                "Output": "** \n+------------+--------------+--------------+\n| patient_id | patient_name | conditions   |\n+------------+--------------+--------------+\n| 3          | Bob          | DIAB100 MYOP |\n| 4          | George       | ACNE DIAB100 | \n+------------+--------------+--------------+",
                "Explanation": "** Bob and George both have a condition that starts with DIAB1."
            }
        ]
    },
    {
        "Title": "Shuffle String",
        "slug": "shuffle-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"codeleet\", indices = [4,5,6,7,0,2,1,3]",
                "Output": "** \"leetcode\"",
                "Explanation": "** As shown, \"codeleet\" becomes \"leetcode\" after shuffling."
            }
        ]
    },
    {
        "Title": "Minimum Suffix Flips",
        "slug": "minimum-suffix-flips",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** target = \"10111\"",
                "Output": "** 3",
                "Explanation": "** Initially, s = \"00000\".\nChoose index i = 2: \"00000\" -> \"00111\"\nChoose index i = 0: \"00111\" -> \"11000\"\nChoose index i = 1: \"11000\" -> \"10111\"\nWe need at least 3 flip operations to form target."
            },
            {
                "Input": "** target = \"101\"",
                "Output": "** 3",
                "Explanation": "** Initially, s = \"000\".\nChoose index i = 0: \"000\" -> \"111\"\nChoose index i = 1: \"111\" -> \"100\"\nChoose index i = 2: \"100\" -> \"101\"\nWe need at least 3 flip operations to form target."
            },
            {
                "Input": "** target = \"00000\"",
                "Output": "** 0",
                "Explanation": "** We do not need any operations since the initial s already equals target."
            }
        ]
    },
    {
        "Title": "Number of Good Leaf Nodes Pairs",
        "slug": "number-of-good-leaf-nodes-pairs",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,2,3,null,4], distance = 3",
                "Output": "** 1",
                "Explanation": "** The leaf nodes of the tree are 3 and 4 and the length of the shortest path between them is 3. This is the only good pair."
            },
            {
                "Input": "** root = [1,2,3,4,5,6,7], distance = 3",
                "Output": "** 2",
                "Explanation": "** The good pairs are [4,5] and [6,7] with shortest path = 2. The pair [4,6] is not good because the length of ther shortest path between them is 4."
            }
        ]
    },
    {
        "Title": "String Compression II",
        "slug": "string-compression-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"aaabcccd\", k = 2",
                "Output": "** 4",
                "Explanation": "** Compressing s without deleting anything will give us \"a3bc3d\" of length 6. Deleting any of the characters 'a' or 'c' would at most decrease the length of the compressed string to 5, for instance delete 2 'a' then we will have s = \"abcccd\" which compressed is abc3d. Therefore, the optimal way is to delete 'b' and 'd', then the compressed version of s will be \"a3c3\" of length 4."
            },
            {
                "Input": "** s = \"aabbaa\", k = 2",
                "Output": "** 2",
                "Explanation": "** If we delete both 'b' characters, the resulting compressed string would be \"a4\" of length 2."
            },
            {
                "Input": "** s = \"aaaaaaaaaaa\", k = 0",
                "Output": "** 3",
                "Explanation": "** Since k is zero, we cannot delete anything. The compressed string is \"a11\" of length 3."
            }
        ]
    },
    {
        "Title": "Count Good Triplets",
        "slug": "count-good-triplets",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3",
                "Output": "** 4",
                "Explanation": "**\u00a0There are 4 good triplets: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)]."
            },
            {
                "Input": "** arr = [1,1,2,2,3], a = 0, b = 0, c = 1",
                "Output": "** 0",
                "Explanation": "** No triplet satisfies all conditions."
            }
        ]
    },
    {
        "Title": "Find the Winner of an Array Game",
        "slug": "find-the-winner-of-an-array-game",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [2,1,3,5,4,6,7], k = 2",
                "Output": "** 5",
                "Explanation": "** Let's see the rounds of the game:\nRound |       arr       | winner | win_count\n  1   | [2,1,3,5,4,6,7] | 2      | 1\n  2   | [2,3,5,4,6,7,1] | 3      | 1\n  3   | [3,5,4,6,7,1,2] | 5      | 1\n  4   | [5,4,6,7,1,2,3] | 5      | 2\nSo we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games."
            },
            {
                "Input": "** arr = [3,2,1], k = 10",
                "Output": "** 3",
                "Explanation": "** 3 will win the first 10 rounds consecutively."
            }
        ]
    },
    {
        "Title": "Minimum Swaps to Arrange a Binary Grid",
        "slug": "minimum-swaps-to-arrange-a-binary-grid",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[0,0,1],[1,1,0],[1,0,0]]",
                "Output": "** 3",
                "Explanation": null
            },
            {
                "Input": "** grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]",
                "Output": "** -1",
                "Explanation": "** All rows are similar, swaps have no effect on the grid."
            },
            {
                "Input": "** grid = [[1,0,0],[1,1,0],[1,1,1]]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Get the Maximum Score",
        "slug": "get-the-maximum-score",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]",
                "Output": "** 30",
                "Explanation": "** Valid paths:\n[2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10],  (starting from nums1)\n[4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10]    (starting from nums2)\nThe maximum is obtained with the path in green **[2,4,6,8,10]**."
            }
        ]
    },
    {
        "Title": "Kth Missing Positive Number",
        "slug": "kth-missing-positive-number",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [2,3,4,7,11], k = 5",
                "Output": "** 9",
                "Explanation": "** The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th\u00a0missing positive integer is 9."
            },
            {
                "Input": "** arr = [1,2,3,4], k = 2",
                "Output": "** 6",
                "Explanation": "** The missing positive integers are [5,6,7,...]. The 2nd missing positive integer is 6."
            }
        ]
    },
    {
        "Title": "Can Convert String in K Moves",
        "slug": "can-convert-string-in-k-moves",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"input\", t = \"ouput\", k = 9",
                "Output": "** true",
                "Explanation": "** In the 6th move, we shift 'i' 6 times to get 'o'. And in the 7th move we shift 'n' to get 'u'."
            },
            {
                "Input": "** s = \"abc\", t = \"bcd\", k = 10",
                "Output": "** false",
                "Explanation": "** We need to shift each character in s one time to convert it into t. We can shift 'a' to 'b' during the 1st move. However, there is no way to shift the other characters in the remaining moves to obtain t from s."
            },
            {
                "Input": "** s = \"aab\", t = \"bbb\", k = 27",
                "Output": "** true",
                "Explanation": "** In the 1st move, we shift the first 'a' 1 time to get 'b'. In the 27th move, we shift the second 'a' 27 times to get 'b'."
            }
        ]
    },
    {
        "Title": "Minimum Insertions to Balance a Parentheses String",
        "slug": "minimum-insertions-to-balance-a-parentheses-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"(()))\"",
                "Output": "** 1",
                "Explanation": "** The second '(' has two matching '))', but the first '(' has only ')' matching. We need to add one more ')' at the end of the string to be \"(())))\" which is balanced."
            },
            {
                "Input": "** s = \"())\"",
                "Output": "** 0",
                "Explanation": "** The string is already balanced."
            },
            {
                "Input": "** s = \"))())(\"",
                "Output": "** 3",
                "Explanation": "** Add '(' to match the first '))', Add '))' to match the last '('."
            }
        ]
    },
    {
        "Title": "Find Longest Awesome Substring",
        "slug": "find-longest-awesome-substring",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"3242415\"",
                "Output": "** 5",
                "Explanation": "** \"24241\" is the longest awesome substring, we can form the palindrome \"24142\" with some swaps."
            },
            {
                "Input": "** s = \"12345678\"",
                "Output": "** 1",
                "Explanation": null
            },
            {
                "Input": "** s = \"213123\"",
                "Output": "** 6",
                "Explanation": "** \"213123\" is the longest awesome substring, we can form the palindrome \"231132\" with some swaps."
            }
        ]
    },
    {
        "Title": "Make The String Great",
        "slug": "make-the-string-great",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"leEeetcode\"",
                "Output": "** \"leetcode\"",
                "Explanation": "** In the first step, either you choose i = 1 or i = 2, both will result \"leEeetcode\" to be reduced to \"leetcode\"."
            },
            {
                "Input": "** s = \"abBAcC\"",
                "Output": "** \"\"",
                "Explanation": "** We have many possible scenarios, and all lead to the same answer. For example:\n\"abBAcC\" --> \"aAcC\" --> \"cC\" --> \"\"\n\"abBAcC\" --> \"abBA\" --> \"aA\" --> \"\""
            },
            {
                "Input": "** s = \"s\"",
                "Output": "** \"s\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Kth Bit in Nth Binary String",
        "slug": "find-kth-bit-in-nth-binary-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3, k = 1",
                "Output": "** \"0\"",
                "Explanation": "** S3 is \"**0**111001\".\nThe 1st bit is \"0\"."
            },
            {
                "Input": "** n = 4, k = 11",
                "Output": "** \"1\"",
                "Explanation": "** S4 is \"0111001101**1**0001\".\nThe 11th bit is \"1\"."
            }
        ]
    },
    {
        "Title": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
        "slug": "maximum-number-of-non-overlapping-subarrays-with-sum-equals-target",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,1,1,1,1], target = 2",
                "Output": "** 2",
                "Explanation": "** There are 2 non-overlapping subarrays [**1,1**,1,**1,1**] with sum equals to target(2)."
            },
            {
                "Input": "** nums = [-1,3,5,1,4,2,-9], target = 6",
                "Output": "** 2",
                "Explanation": "** There are 3 subarrays with sum equal to 6.\n([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Cut a Stick",
        "slug": "minimum-cost-to-cut-a-stick",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 7, cuts = [1,3,4,5]",
                "Output": "** 16",
                "Explanation": "** Using cuts order = [1, 3, 4, 5] as in the input leads to the following scenario:\n![](https://assets.leetcode.com/uploads/2020/07/21/e11.jpg)\nThe first cut is done to a rod of length 7 so the cost is 7. The second cut is done to a rod of length 6 (i.e. the second part of the first cut), the third is done to a rod of length 4 and the last cut is to a rod of length 3. The total cost is 7 + 6 + 4 + 3 = 20.\nRearranging the cuts to be [3, 5, 1, 4] for example will lead to a scenario with total cost = 16 (as shown in the example photo 7 + 4 + 3 + 2 = 16)."
            }
        ]
    },
    {
        "Title": "Three Consecutive Odds",
        "slug": "three-consecutive-odds",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [2,6,4,1]",
                "Output": "** false",
                "Explanation": "** There are no three consecutive odds."
            },
            {
                "Input": "** arr = [1,2,34,3,4,5,7,23,12]",
                "Output": "** true",
                "Explanation": "** [5,7,23] are three consecutive odds."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Make Array Equal",
        "slug": "minimum-operations-to-make-array-equal",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** 2",
                "Explanation": "** arr = [1, 3, 5]\nFirst operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]\nIn the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3]."
            },
            {
                "Input": "** n = 6",
                "Output": "** 9",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Magnetic Force Between Two Balls",
        "slug": "magnetic-force-between-two-balls",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** position = [1,2,3,4,7], m = 3",
                "Output": "** 3",
                "Explanation": "** Distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs [3, 3, 6]. The minimum magnetic force is 3. We cannot achieve a larger minimum magnetic force than 3."
            }
        ]
    },
    {
        "Title": "Minimum Number of Days to Eat N Oranges",
        "slug": "minimum-number-of-days-to-eat-n-oranges",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 10",
                "Output": "** 4",
                "Explanation": "** You have 10 oranges.\nDay 1: Eat 1 orange,  10 - 1 = 9.  \nDay 2: Eat 6 oranges, 9 - 2*(9/3) = 9 - 6 = 3. (Since 9 is divisible by 3)\nDay 3: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. \nDay 4: Eat the last orange  1 - 1  = 0.\nYou need at least 4 days to eat the 10 oranges."
            },
            {
                "Input": "** n = 6",
                "Output": "** 3",
                "Explanation": "** You have 6 oranges.\nDay 1: Eat 3 oranges, 6 - 6/2 = 6 - 3 = 3. (Since 6 is divisible by 2).\nDay 2: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. (Since 3 is divisible by 3)\nDay 3: Eat the last orange  1 - 1  = 0.\nYou need at least 3 days to eat the 6 oranges."
            }
        ]
    },
    {
        "Title": "Thousand Separator",
        "slug": "thousand-separator",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 987",
                "Output": "** \"987\"",
                "Explanation": null
            },
            {
                "Input": "** n = 1234",
                "Output": "** \"1.234\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Number of Vertices to Reach All Nodes",
        "slug": "minimum-number-of-vertices-to-reach-all-nodes",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]",
                "Output": "** [0,3]",
                "Explanation": "** It's not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3]."
            },
            {
                "Input": "** n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]",
                "Output": "** [0,2,3]",
                "Explanation": "** Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4."
            }
        ]
    },
    {
        "Title": "Minimum Numbers of Function Calls to Make Target Array",
        "slug": "minimum-numbers-of-function-calls-to-make-target-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,5]",
                "Output": "** 5",
                "Explanation": "** Increment by 1 (second element): [0, 0] to get [0, 1] (1 operation).\nDouble all the elements: [0, 1] -> [0, 2] -> [0, 4] (2 operations).\nIncrement by 1 (both elements)  [0, 4] -> [1, 4] -> **[1, 5]** (2 operations).\nTotal of operations: 1 + 2 + 2 = 5."
            },
            {
                "Input": "** nums = [2,2]",
                "Output": "** 3",
                "Explanation": "** Increment by 1 (both elements) [0, 0] -> [0, 1] -> [1, 1] (2 operations).\nDouble all the elements: [1, 1] -> **[2, 2]** (1 operation).\nTotal of operations: 2 + 1 = 3."
            },
            {
                "Input": "** nums = [4,2,5]",
                "Output": "** 6",
                "Explanation": "** (initial)[0,0,0] -> [1,0,0] -> [1,0,1] -> [2,0,2] -> [2,1,2] -> [4,2,4] -> **[4,2,5]**(nums)."
            }
        ]
    },
    {
        "Title": "Most Visited Sector in  a Circular Track",
        "slug": "most-visited-sector-in-a-circular-track",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 4, rounds = [1,3,1,2]",
                "Output": "** [1,2]",
                "Explanation": "** The marathon starts at sector 1. The order of the visited sectors is as follows:\n1 --> 2 --> 3 (end of round 1) --> 4 --> 1 (end of round 2) --> 2 (end of round 3 and the marathon)\nWe can see that both sectors 1 and 2 are visited twice and they are the most visited sectors. Sectors 3 and 4 are visited only once."
            }
        ]
    },
    {
        "Title": "Maximum Number of Coins You Can Get",
        "slug": "maximum-number-of-coins-you-can-get",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** piles = [2,4,1,2,7,8]",
                "Output": "** 9",
                "Explanation": "** Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with **7** coins and Bob the last one.\nChoose the triplet (1, 2, 4), Alice Pick the pile with 4 coins, you the pile with **2** coins and Bob the last one.\nThe maximum number of coins which you can have are: 7 + 2 = 9.\nOn the other hand if we choose this arrangement (1, **2**, 8), (2, **4**, 7) you only get 2 + 4 = 6 coins which is not optimal."
            },
            {
                "Input": "** piles = [2,4,5]",
                "Output": "** 4",
                "Explanation": null
            },
            {
                "Input": "** piles = [9,8,7,6,5,1,2,3,4]",
                "Output": "** 18",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Latest Group of Size M",
        "slug": "find-latest-group-of-size-m",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [3,5,1,2,4], m = 1",
                "Output": "** 4",
                "Explanation": "** \nStep 1: \"00100\", groups: [\"1\"]\nStep 2: \"00101\", groups: [\"1\", \"1\"]\nStep 3: \"10101\", groups: [\"1\", \"1\", \"1\"]\nStep 4: \"11101\", groups: [\"111\", \"1\"]\nStep 5: \"11111\", groups: [\"11111\"]\nThe latest step at which there exists a group of size 1 is step 4."
            },
            {
                "Input": "** arr = [3,1,5,4,2], m = 2",
                "Output": "** -1",
                "Explanation": "** \nStep 1: \"00100\", groups: [\"1\"]\nStep 2: \"10100\", groups: [\"1\", \"1\"]\nStep 3: \"10101\", groups: [\"1\", \"1\", \"1\"]\nStep 4: \"10111\", groups: [\"1\", \"111\"]\nStep 5: \"11111\", groups: [\"11111\"]\nNo group of size 2 exists during any step."
            }
        ]
    },
    {
        "Title": "Stone Game V",
        "slug": "stone-game-v",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** stoneValue = [6,2,3,4,5,5]",
                "Output": "** 18",
                "Explanation": "** In the first round, Alice divides the row to [6,2,3], [4,5,5]. The left row has the value 11 and the right row has value 14. Bob throws away the right row and Alice's score is now 11.\nIn the second round Alice divides the row to [6], [2,3]. This time Bob throws away the left row and Alice's score becomes 16 (11 + 5).\nThe last round Alice has only one choice to divide the row which is [2], [3]. Bob throws away the right row and Alice's score is now 18 (16 + 2). The game ends because only one stone is remaining in the row."
            },
            {
                "Input": "** stoneValue = [7,7,7,7,7,7,7]",
                "Output": "** 28",
                "Explanation": null
            },
            {
                "Input": "** stoneValue = [4]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Detect Pattern of Length M Repeated K or More Times",
        "slug": "detect-pattern-of-length-m-repeated-k-or-more-times",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [1,2,4,4,4,4], m = 1, k = 3",
                "Output": "** true",
                "Explanation": "** The pattern **(4)** of length 1 is repeated 4 consecutive times. Notice that pattern can be repeated k or more times but not less."
            },
            {
                "Input": "** arr = [1,2,1,2,1,1,1,3], m = 2, k = 2",
                "Output": "** true",
                "Explanation": "** The pattern **(1,2)** of length 2 is repeated 2 consecutive times. Another valid pattern **(2,1) is** also repeated 2 times."
            },
            {
                "Input": "** arr = [1,2,1,2,1,3], m = 2, k = 3",
                "Output": "** false",
                "Explanation": "** The pattern (1,2) is of length 2 but is repeated only 2 times. There is no pattern of length 2 that is repeated 3 or more times."
            }
        ]
    },
    {
        "Title": "Maximum Length of Subarray With Positive Product",
        "slug": "maximum-length-of-subarray-with-positive-product",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,-2,-3,4]",
                "Output": "** 4",
                "Explanation": "** The array nums already has a positive product of 24."
            },
            {
                "Input": "** nums = [0,1,-2,-3,-4]",
                "Output": "** 3",
                "Explanation": "** The longest subarray with positive product is [1,-2,-3] which has a product of 6.\nNotice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive."
            },
            {
                "Input": "** nums = [-1,-2,-3,0,1]",
                "Output": "** 2",
                "Explanation": "** The longest subarray with positive product is [-1,-2] or [-2,-3]."
            }
        ]
    },
    {
        "Title": "Minimum Number of Days to Disconnect Island",
        "slug": "minimum-number-of-days-to-disconnect-island",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]",
                "Output": "** 2",
                "Explanation": "** We need at least 2 days to get a disconnected grid.\nChange land grid[1][1] and grid[0][2] to water and get 2 disconnected island."
            },
            {
                "Input": "** grid = [[1,1]]",
                "Output": "** 2",
                "Explanation": "** Grid of full water is also disconnected ([[1,1]] -> [[0,0]]), 0 islands."
            }
        ]
    },
    {
        "Title": "Number of Ways to Reorder Array to Get Same BST",
        "slug": "number-of-ways-to-reorder-array-to-get-same-bst",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [2,1,3]",
                "Output": "** 1",
                "Explanation": "** We can reorder nums to be [2,3,1] which will yield the same BST. There are no other ways to reorder nums which will yield the same BST."
            },
            {
                "Input": "** nums = [3,4,5,1,2]",
                "Output": "** 5",
                "Explanation": "** The following 5 arrays will yield the same BST: \n[3,1,2,4,5]\n[3,1,4,2,5]\n[3,1,4,5,2]\n[3,4,1,2,5]\n[3,4,1,5,2]"
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 0",
                "Explanation": "** There are no other orderings of nums that will yield the same BST."
            }
        ]
    },
    {
        "Title": "Matrix Diagonal Sum",
        "slug": "matrix-diagonal-sum",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** mat = [[**1**,2,**3**],\n\u00a0             [4,**5**,6],\n\u00a0             [**7**,8,**9**]]",
                "Output": "** 25",
                "Explanation": "** Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25\nNotice that element mat[1][1] = 5 is counted only once."
            }
        ]
    },
    {
        "Title": "Number of Ways to Split a String",
        "slug": "number-of-ways-to-split-a-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"10101\"",
                "Output": "** 4",
                "Explanation": "** There are four ways to split s in 3 parts where each part contain the same number of letters '1'.\n\"1|010|1\"\n\"1|01|01\"\n\"10|10|1\"\n\"10|1|01\""
            },
            {
                "Input": "** s = \"1001\"",
                "Output": "** 0",
                "Explanation": null
            },
            {
                "Input": "** s = \"0000\"",
                "Output": "** 3",
                "Explanation": "** There are three ways to split s in 3 parts.\n\"0|0|00\"\n\"0|00|0\"\n\"00|0|0\""
            }
        ]
    },
    {
        "Title": "Shortest Subarray to be Removed to Make Array Sorted",
        "slug": "shortest-subarray-to-be-removed-to-make-array-sorted",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [1,2,3,10,4,2,3,5]",
                "Output": "** 3",
                "Explanation": "** The shortest subarray we can remove is [10,4,2] of length 3. The remaining elements after that will be [1,2,3,3,5] which are sorted.\nAnother correct solution is to remove the subarray [3,10,4]."
            },
            {
                "Input": "** arr = [5,4,3,2,1]",
                "Output": "** 4",
                "Explanation": "** Since the array is strictly decreasing, we can only keep a single element. Therefore we need to remove a subarray of length 4, either [5,4,3,2] or [4,3,2,1]."
            },
            {
                "Input": "** arr = [1,2,3]",
                "Output": "** 0",
                "Explanation": "** The array is already non-decreasing. We do not need to remove any elements."
            }
        ]
    },
    {
        "Title": "Count All Possible Routes",
        "slug": "count-all-possible-routes",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5",
                "Output": "** 4",
                "Explanation": "** The following are all possible routes, each uses 5 units of fuel:\n1 -> 3\n1 -> 2 -> 3\n1 -> 4 -> 3\n1 -> 4 -> 2 -> 3"
            },
            {
                "Input": "** locations = [4,3,1], start = 1, finish = 0, fuel = 6",
                "Output": "** 5",
                "Explanation": "** The following are all possible routes:\n1 -> 0, used fuel = 1\n1 -> 2 -> 0, used fuel = 5\n1 -> 2 -> 1 -> 0, used fuel = 5\n1 -> 0 -> 1 -> 0, used fuel = 3\n1 -> 0 -> 1 -> 0 -> 1 -> 0, used fuel = 5"
            },
            {
                "Input": "** locations = [5,2,1], start = 0, finish = 2, fuel = 3",
                "Output": "** 0",
                "Explanation": "** It is impossible to get from 0 to 2 using only 3 units of fuel since the shortest route needs 4 units of fuel."
            }
        ]
    },
    {
        "Title": "Replace All ?'s to Avoid Consecutive Repeating Characters",
        "slug": "replace-all-s-to-avoid-consecutive-repeating-characters",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"?zs\"",
                "Output": "** \"azs\"",
                "Explanation": "** There are 25 solutions for this problem. From \"azs\" to \"yzs\", all are valid. Only \"z\" is an invalid modification as the string will consist of consecutive repeating characters in \"zzs\"."
            },
            {
                "Input": "** s = \"ubv?w\"",
                "Output": "** \"ubvaw\"",
                "Explanation": "** There are 24 solutions for this problem. Only \"v\" and \"w\" are invalid modifications as the strings will consist of consecutive repeating characters in \"ubvvw\" and \"ubvww\"."
            }
        ]
    },
    {
        "Title": "Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
        "slug": "number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums1 = [7,4], nums2 = [5,2,8,9]",
                "Output": "** 1",
                "Explanation": "** Type 1: (1, 1, 2), nums1[1]2 = nums2[1] * nums2[2]. (42 = 2 * 8)."
            },
            {
                "Input": "** nums1 = [1,1], nums2 = [1,1,1]",
                "Output": "** 9",
                "Explanation": "** All Triplets are valid, because 12 = 1 * 1.\nType 1: (0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2).  nums1[i]2 = nums2[j] * nums2[k].\nType 2: (0,0,1), (1,0,1), (2,0,1). nums2[i]2 = nums1[j] * nums1[k]."
            },
            {
                "Input": "** nums1 = [7,7,8,3], nums2 = [1,2,9,7]",
                "Output": "** 2",
                "Explanation": "** There are 2 valid triplets.\nType 1: (3,0,2).  nums1[3]2 = nums2[0] * nums2[2].\nType 2: (3,0,1).  nums2[3]2 = nums1[0] * nums1[1]."
            }
        ]
    },
    {
        "Title": "Minimum Time to Make Rope Colorful",
        "slug": "minimum-time-to-make-rope-colorful",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** colors = \"abaac\", neededTime = [1,2,3,4,5]",
                "Output": "** 3",
                "Explanation": "** In the above image, 'a' is blue, 'b' is red, and 'c' is green.\nBob can remove the blue balloon at index 2. This takes 3 seconds.\nThere are no longer two consecutive balloons of the same color. Total time = 3."
            },
            {
                "Input": "** colors = \"abc\", neededTime = [1,2,3]",
                "Output": "** 0",
                "Explanation": "** The rope is already colorful. Bob does not need to remove any balloons from the rope."
            },
            {
                "Input": "** colors = \"aabaa\", neededTime = [1,2,3,4,1]",
                "Output": "** 2",
                "Explanation": "** Bob will remove the balloons at indices 0 and 4. Each balloons takes 1 second to remove.\nThere are no longer two consecutive balloons of the same color. Total time = 1 + 1 = 2."
            }
        ]
    },
    {
        "Title": "Customer Who Visited but Did Not Make Any Transactions",
        "slug": "customer-who-visited-but-did-not-make-any-transactions",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nVisits\n+----------+-------------+\n| visit_id | customer_id |\n+----------+-------------+\n| 1        | 23          |\n| 2        | 9           |\n| 4        | 30          |\n| 5        | 54          |\n| 6        | 96          |\n| 7        | 54          |\n| 8        | 54          |\n+----------+-------------+\nTransactions\n+----------------+----------+--------+\n| transaction_id | visit_id | amount |\n+----------------+----------+--------+\n| 2              | 5        | 310    |\n| 3              | 5        | 300    |\n| 9              | 5        | 200    |\n| 12             | 1        | 910    |\n| 13             | 2        | 970    |\n+----------------+----------+--------+",
                "Output": "** \n+-------------+----------------+\n| customer_id | count_no_trans |\n+-------------+----------------+\n| 54          | 2              |\n| 30          | 1              |\n| 96          | 1              |\n+-------------+----------------+",
                "Explanation": "** \nCustomer with id = 23 visited the mall once and made one transaction during the visit with id = 12.\nCustomer with id = 9 visited the mall once and made one transaction during the visit with id = 13.\nCustomer with id = 30 visited the mall once and did not make any transactions.\nCustomer with id = 54 visited the mall three times. During 2 visits they did not make any transactions, and during one visit they made 3 transactions.\nCustomer with id = 96 visited the mall once and did not make any transactions.\nAs we can see, users with IDs 30 and 96 visited the mall one time without making any transactions. Also, user 54 visited the mall twice and did not make any transactions."
            }
        ]
    },
    {
        "Title": "Special Positions in a Binary Matrix",
        "slug": "special-positions-in-a-binary-matrix",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** mat = [[1,0,0],[0,0,1],[1,0,0]]",
                "Output": "** 1",
                "Explanation": "** (1, 2) is a special position because mat[1][2] == 1 and all other elements in row 1 and column 2 are 0."
            },
            {
                "Input": "** mat = [[1,0,0],[0,1,0],[0,0,1]]",
                "Output": "** 3",
                "Explanation": "** (0, 0), (1, 1) and (2, 2) are special positions."
            }
        ]
    },
    {
        "Title": "Count Unhappy Friends",
        "slug": "count-unhappy-friends",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]",
                "Output": "** 2",
                "Explanation": "**\nFriend 1 is unhappy because:\n- 1 is paired with 0 but prefers 3 over 0, and\n- 3 prefers 1 over 2.\nFriend 3 is unhappy because:\n- 3 is paired with 2 but prefers 1 over 2, and\n- 1 prefers 3 over 0.\nFriends 0 and 2 are happy."
            },
            {
                "Input": "** n = 2, preferences = [[1], [0]], pairs = [[1, 0]]",
                "Output": "** 0",
                "Explanation": "** Both friends 0 and 1 are happy."
            },
            {
                "Input": "** n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Min Cost to Connect All Points",
        "slug": "min-cost-to-connect-all-points",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** points = [[0,0],[2,2],[3,10],[5,2],[7,0]]",
                "Output": "** 20",
                "Explanation": "** \n![](https://assets.leetcode.com/uploads/2020/08/26/c.png)\nWe can connect the points as shown above to get the minimum cost of 20.\nNotice that there is a unique path between every pair of points."
            }
        ]
    },
    {
        "Title": "Check If String Is Transformable With Substring Sort Operations",
        "slug": "check-if-string-is-transformable-with-substring-sort-operations",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"84532\", t = \"34852\"",
                "Output": "** true",
                "Explanation": "** You can transform s into t using the following sort operations:\n\"84532\" (from index 2 to 3) -> \"84352\"\n\"84352\" (from index 0 to 2) -> \"34852\""
            },
            {
                "Input": "** s = \"34521\", t = \"23415\"",
                "Output": "** true",
                "Explanation": "** You can transform s into t using the following sort operations:\n\"34521\" -> \"23451\"\n\"23451\" -> \"23415\""
            },
            {
                "Input": "** s = \"12345\", t = \"12435\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Bank Account Summary II",
        "slug": "bank-account-summary-ii",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nUsers table:\n+------------+--------------+\n| account    | name         |\n+------------+--------------+\n| 900001     | Alice        |\n| 900002     | Bob          |\n| 900003     | Charlie      |\n+------------+--------------+\nTransactions table:\n+------------+------------+------------+---------------+\n| trans_id   | account    | amount     | transacted_on |\n+------------+------------+------------+---------------+\n| 1          | 900001     | 7000       |  2020-08-01   |\n| 2          | 900001     | 7000       |  2020-09-01   |\n| 3          | 900001     | -3000      |  2020-09-02   |\n| 4          | 900002     | 1000       |  2020-09-12   |\n| 5          | 900003     | 6000       |  2020-08-07   |\n| 6          | 900003     | 6000       |  2020-09-07   |\n| 7          | 900003     | -4000      |  2020-09-11   |\n+------------+------------+------------+---------------+",
                "Output": "** \n+------------+------------+\n| name       | balance    |\n+------------+------------+\n| Alice      | 11000      |\n+------------+------------+",
                "Explanation": "** \nAlice's balance is (7000 + 7000 - 3000) = 11000.\nBob's balance is 1000.\nCharlie's balance is (6000 + 6000 - 4000) = 8000."
            }
        ]
    },
    {
        "Title": "Sum of All Odd Length Subarrays",
        "slug": "sum-of-all-odd-length-subarrays",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [1,4,2,5,3]",
                "Output": "** 58",
                "Explanation": "** The odd-length subarrays of arr and their sums are:\n[1] = 1\n[4] = 4\n[2] = 2\n[5] = 5\n[3] = 3\n[1,4,2] = 7\n[4,2,5] = 11\n[2,5,3] = 10\n[1,4,2,5,3] = 15\nIf we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58"
            },
            {
                "Input": "** arr = [1,2]",
                "Output": "** 3",
                "Explanation": "** There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3."
            },
            {
                "Input": "** arr = [10,11,12]",
                "Output": "** 66",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Sum Obtained of Any Permutation",
        "slug": "maximum-sum-obtained-of-any-permutation",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5], requests = [[1,3],[0,1]]",
                "Output": "** 19",
                "Explanation": "** One permutation of nums is [2,1,3,4,5] with the following result: \nrequests[0] -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8\nrequests[1] -> nums[0] + nums[1] = 2 + 1 = 3\nTotal sum: 8 + 3 = 11.\nA permutation with a higher total sum is [3,5,4,2,1] with the following result:\nrequests[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11\nrequests[1] -> nums[0] + nums[1] = 3 + 5  = 8\nTotal sum: 11 + 8 = 19, which is the best that you can do."
            },
            {
                "Input": "** nums = [1,2,3,4,5,6], requests = [[0,1]]",
                "Output": "** 11",
                "Explanation": "** A permutation with the max total sum is [6,5,4,3,2,1] with request sums [11]."
            },
            {
                "Input": "** nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]",
                "Output": "** 47",
                "Explanation": "** A permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10]."
            }
        ]
    },
    {
        "Title": "Make Sum Divisible by P",
        "slug": "make-sum-divisible-by-p",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,1,4,2], p = 6",
                "Output": "** 1",
                "Explanation": "** The sum of the elements in nums is 10, which is not divisible by 6. We can remove the subarray [4], and the sum of the remaining elements is 6, which is divisible by 6."
            },
            {
                "Input": "** nums = [6,3,5,2], p = 9",
                "Output": "** 2",
                "Explanation": "** We cannot remove a single element to get a sum divisible by 9. The best way is to remove the subarray [5,2], leaving us with [6,3] with sum 9."
            },
            {
                "Input": "** nums = [1,2,3], p = 3",
                "Output": "** 0",
                "Explanation": "** Here the sum is 6. which is already divisible by 3. Thus we do not need to remove anything."
            }
        ]
    },
    {
        "Title": "Strange Printer II",
        "slug": "strange-printer-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]",
                "Output": "** true",
                "Explanation": null
            },
            {
                "Input": "** targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Rearrange Spaces Between Words",
        "slug": "rearrange-spaces-between-words",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** text = \"  this   is  a sentence \"",
                "Output": "** \"this   is   a   sentence\"",
                "Explanation": "** There are a total of 9 spaces and 4 words. We can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces."
            },
            {
                "Input": "** text = \" practice   makes   perfect\"",
                "Output": "** \"practice   makes   perfect \"",
                "Explanation": "** There are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. We place this extra space at the end of the string."
            }
        ]
    },
    {
        "Title": "Split a String Into the Max Number of Unique Substrings",
        "slug": "split-a-string-into-the-max-number-of-unique-substrings",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"ababccc\"",
                "Output": "** 5",
                "Explanation": "One way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. Splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times."
            },
            {
                "Input": "** s = \"aba\"",
                "Output": "** 2",
                "Explanation": "One way to split maximally is ['a', 'ba']."
            },
            {
                "Input": "** s = \"aa\"",
                "Output": "** 1",
                "Explanation": "It is impossible to split the string any further."
            }
        ]
    },
    {
        "Title": "Maximum Non Negative Product in a Matrix",
        "slug": "maximum-non-negative-product-in-a-matrix",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[-1,-2,-3],[-2,-3,-3],[-3,-3,-2]]",
                "Output": "** -1",
                "Explanation": "** It is not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1."
            },
            {
                "Input": "** grid = [[1,-2,1],[1,-2,1],[3,-4,1]]",
                "Output": "** 8",
                "Explanation": "** Maximum non-negative product is shown (1 * 1 * -2 * -4 * 1 = 8)."
            },
            {
                "Input": "** grid = [[1,3],[0,-4]]",
                "Output": "** 0",
                "Explanation": "** Maximum non-negative product is shown (1 * 0 * -4 = 0)."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Connect Two Groups of Points",
        "slug": "minimum-cost-to-connect-two-groups-of-points",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** cost = [[15, 96], [36, 2]]",
                "Output": "** 17",
                "Explanation": "The optimal way of connecting the groups is:\n1--A\n2--B\nThis results in a total cost of 17."
            },
            {
                "Input": "** cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]]",
                "Output": "** 4",
                "Explanation": "The optimal way of connecting the groups is:\n1--A\n2--B\n2--C\n3--A\nThis results in a total cost of 4.\nNote that there are multiple points connected to point 2 in the first group and point A in the second group. This does not matter as there is no limit to the number of points that can be connected. We only care about the minimum total cost."
            }
        ]
    },
    {
        "Title": "Crawler Log Folder",
        "slug": "crawler-log-folder",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** logs = [\"d1/\",\"d2/\",\"../\",\"d21/\",\"./\"]",
                "Output": "** 2",
                "Explanation": "** Use this change folder operation \"../\" 2 times and go back to the main folder."
            },
            {
                "Input": "** logs = [\"d1/\",\"d2/\",\"./\",\"d3/\",\"../\",\"d31/\"]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Profit of Operating a Centennial Wheel",
        "slug": "maximum-profit-of-operating-a-centennial-wheel",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** customers = [8,3], boardingCost = 5, runningCost = 6",
                "Output": "** 3",
                "Explanation": "** The numbers written on the gondolas are the number of people currently there.\n1. 8 customers arrive, 4 board and 4 wait for the next gondola, the wheel rotates. Current profit is 4 * $5 - 1 * $6 = $14.\n2. 3 customers arrive, the 4 waiting board the wheel and the other 3 wait, the wheel rotates. Current profit is 8 * $5 - 2 * $6 = $28.\n3. The final 3 customers board the gondola, the wheel rotates. Current profit is 11 * $5 - 3 * $6 = $37.\nThe highest profit was $37 after rotating the wheel 3 times."
            }
        ]
    },
    {
        "Title": "Throne Inheritance",
        "slug": "throne-inheritance",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"ThroneInheritance\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"getInheritanceOrder\", \"death\", \"getInheritanceOrder\"]\n[[\"king\"], [\"king\", \"andy\"], [\"king\", \"bob\"], [\"king\", \"catherine\"], [\"andy\", \"matthew\"], [\"bob\", \"alex\"], [\"bob\", \"asha\"], [null], [\"bob\"], [null]]",
                "Output": "[null, null, null, null, null, null, null, [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"], null, [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]]",
                "Explanation": "ThroneInheritance t= new ThroneInheritance(\"king\"); // order: **king**\nt.birth(\"king\", \"andy\"); // order: king > **andy**\nt.birth(\"king\", \"bob\"); // order: king > andy > **bob**\nt.birth(\"king\", \"catherine\"); // order: king > andy > bob > **catherine**\nt.birth(\"andy\", \"matthew\"); // order: king > andy > **matthew** > bob > catherine\nt.birth(\"bob\", \"alex\"); // order: king > andy > matthew > bob > **alex** > catherine\nt.birth(\"bob\", \"asha\"); // order: king > andy > matthew > bob > alex > **asha** > catherine\nt.getInheritanceOrder(); // return [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"]\nt.death(\"bob\"); // order: king > andy > matthew > **~~bob~~** > alex > asha > catherine\nt.getInheritanceOrder(); // return [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]"
            }
        ]
    },
    {
        "Title": "Maximum Number of Achievable Transfer Requests",
        "slug": "maximum-number-of-achievable-transfer-requests",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]",
                "Output": "** 5\n**Explantion:** Let's see the requests:\nFrom building 0 we have employees x and y and both want to move to building 1.\nFrom building 1 we have employees a and b and they want to move to buildings 2 and 0 respectively.\nFrom building 2 we have employee z and they want to move to building 0.\nFrom building 3 we have employee c and they want to move to building 4.\nFrom building 4 we don't have any requests.\nWe can achieve the requests of users x and b by swapping their places.\nWe can achieve the requests of users y, a and z by swapping the places in the 3 buildings.",
                "Explanation": null
            },
            {
                "Input": "** n = 3, requests = [[0,0],[1,2],[2,1]]",
                "Output": "** 3\n**Explantion:** Let's see the requests:\nFrom building 0 we have employee x and they want to stay in the same building 0.\nFrom building 1 we have employee y and they want to move to building 2.\nFrom building 2 we have employee z and they want to move to building 1.\nWe can achieve all the requests.",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Design Parking System",
        "slug": "design-parking-system",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "[\"ParkingSystem\", \"addCar\", \"addCar\", \"addCar\", \"addCar\"]\n[[1, 1, 0], [1], [2], [3], [1]]",
                "Output": "[null, true, true, false, false]",
                "Explanation": "ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);\nparkingSystem.addCar(1); // return true because there is 1 available slot for a big car\nparkingSystem.addCar(2); // return true because there is 1 available slot for a medium car\nparkingSystem.addCar(3); // return false because there is no available slot for a small car\nparkingSystem.addCar(1); // return false because there is no available slot for a big car. It is already occupied."
            }
        ]
    },
    {
        "Title": "Alert Using Same Key-Card Three or More Times in a One Hour Period",
        "slug": "alert-using-same-key-card-three-or-more-times-in-a-one-hour-period",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** keyName = [\"daniel\",\"daniel\",\"daniel\",\"luis\",\"luis\",\"luis\",\"luis\"], keyTime = [\"10:00\",\"10:40\",\"11:00\",\"09:00\",\"11:00\",\"13:00\",\"15:00\"]",
                "Output": "** [\"daniel\"]",
                "Explanation": "** \"daniel\" used the keycard 3 times in a one-hour period (\"10:00\",\"10:40\", \"11:00\")."
            },
            {
                "Input": "** keyName = [\"alice\",\"alice\",\"alice\",\"bob\",\"bob\",\"bob\",\"bob\"], keyTime = [\"12:01\",\"12:00\",\"18:00\",\"21:00\",\"21:20\",\"21:30\",\"23:00\"]",
                "Output": "** [\"bob\"]",
                "Explanation": "** \"bob\" used the keycard 3 times in a one-hour period (\"21:00\",\"21:20\", \"21:30\")."
            }
        ]
    },
    {
        "Title": "Find Valid Matrix Given Row and Column Sums",
        "slug": "find-valid-matrix-given-row-and-column-sums",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** rowSum = [3,8], colSum = [4,7]",
                "Output": "** [[3,0],\n         [1,7]]",
                "Explanation": "** \n0th row: 3 + 0 = 3 == rowSum[0]\n1st row: 1 + 7 = 8 == rowSum[1]\n0th column: 3 + 1 = 4 == colSum[0]\n1st column: 0 + 7 = 7 == colSum[1]\nThe row and column sums match, and all matrix elements are non-negative.\nAnother possible matrix is: [[1,2],\n                             [3,5]]"
            },
            {
                "Input": "** rowSum = [5,7,10], colSum = [8,6,8]",
                "Output": "** [[0,5,0],\n         [6,1,0],\n         [2,0,8]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Servers That Handled Most Number of Requests",
        "slug": "find-servers-that-handled-most-number-of-requests",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3]",
                "Output": "** [1]",
                "Explanation": "** \nAll of the servers start out available.\nThe first 3 requests are handled by the first 3 servers in order.\nRequest 3 comes in. Server 0 is busy, so it's assigned to the next available server, which is 1.\nRequest 4 comes in. It cannot be handled since all servers are busy, so it is dropped.\nServers 0 and 2 handled one request each, while server 1 handled two requests. Hence server 1 is the busiest server."
            }
        ]
    },
    {
        "Title": "Special Array With X Elements Greater Than or Equal X",
        "slug": "special-array-with-x-elements-greater-than-or-equal-x",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [3,5]",
                "Output": "** 2",
                "Explanation": "** There are 2 values (3 and 5) that are greater than or equal to 2."
            },
            {
                "Input": "** nums = [0,0]",
                "Output": "** -1",
                "Explanation": "** No numbers fit the criteria for x.\nIf x = 0, there should be 0 numbers >= x, but there are 2.\nIf x = 1, there should be 1 number >= x, but there are 0.\nIf x = 2, there should be 2 numbers >= x, but there are 0.\nx cannot be greater since there are only 2 numbers in nums."
            },
            {
                "Input": "** nums = [0,4,3,0,4]",
                "Output": "** 3",
                "Explanation": "** There are 3 values that are greater than or equal to 3."
            }
        ]
    },
    {
        "Title": "Even Odd Tree",
        "slug": "even-odd-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,10,4,3,null,7,9,12,8,6,null,null,2]",
                "Output": "** true",
                "Explanation": "** The node values on each level are:\nLevel 0: [1]\nLevel 1: [10,4]\nLevel 2: [3,7,9]\nLevel 3: [12,8,6,2]\nSince levels 0 and 2 are all odd and increasing and levels 1 and 3 are all even and decreasing, the tree is Even-Odd."
            },
            {
                "Input": "** root = [5,4,2,3,3,7]",
                "Output": "** false",
                "Explanation": "** The node values on each level are:\nLevel 0: [5]\nLevel 1: [4,2]\nLevel 2: [3,3,7]\nNode values in level 2 must be in strictly increasing order, so the tree is not Even-Odd."
            },
            {
                "Input": "** root = [5,9,1,3,5,7]",
                "Output": "** false",
                "Explanation": "** Node values in the level 1 should be even integers."
            }
        ]
    },
    {
        "Title": "Maximum Number of Visible Points",
        "slug": "maximum-number-of-visible-points",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1]",
                "Output": "** 3",
                "Explanation": "** The shaded region represents your field of view. All points can be made visible in your field of view, including [3,3] even though [2,2] is in front and in the same line of sight."
            },
            {
                "Input": "** points = [[1,0],[2,1]], angle = 13, location = [1,1]",
                "Output": "** 1",
                "Explanation": "** You can only see one of the two points, as shown above."
            }
        ]
    },
    {
        "Title": "Minimum One Bit Operations to Make Integers Zero",
        "slug": "minimum-one-bit-operations-to-make-integers-zero",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** 2",
                "Explanation": "** The binary representation of 3 is \"11\".\n\"11\" -> \"01\" with the 2nd operation since the 0th bit is 1.\n\"01\" -> \"00\" with the 1st operation."
            },
            {
                "Input": "** n = 6",
                "Output": "** 4",
                "Explanation": "** The binary representation of 6 is \"110\".\n\"110\" -> \"010\" with the 2nd operation since the 1st bit is 1 and 0th through 0th bits are 0.\n\"010\" -> \"011\" with the 1st operation.\n\"011\" -> \"001\" with the 2nd operation since the 0th bit is 1.\n\"001\" -> \"000\" with the 1st operation."
            }
        ]
    },
    {
        "Title": "Maximum Nesting Depth of the Parentheses",
        "slug": "maximum-nesting-depth-of-the-parentheses",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"(1+(2\\*3)+((8)/4))+1\"",
                "Output": "** 3",
                "Explanation": "**\n\n\nDigit 8 is inside of 3 nested parentheses in the string."
            },
            {
                "Input": "** s = \"(1)+((2))+(((3)))\"",
                "Output": "** 3",
                "Explanation": "**\n\n\nDigit 3 is inside of 3 nested parentheses in the string."
            },
            {
                "Input": "** s = \"()(())((()()))\"",
                "Output": "** 3\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 100`\n* `s` consists of digits `0-9` and characters `'+'`, `'-'`, `'*'`, `'/'`, `'('`, and `')'`.\n* It is guaranteed that parentheses expression `s` is a VPS.\n\n\nSimilarQuestions: [1111]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximal Network Rank",
        "slug": "maximal-network-rank",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]",
                "Output": "** 5",
                "Explanation": "** The network rank of 2 and 5 is 5. Notice that all the cities do not have to be connected."
            }
        ]
    },
    {
        "Title": "Split Two Strings to Make Palindrome",
        "slug": "split-two-strings-to-make-palindrome",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** a = \"x\", b = \"y\"",
                "Output": "** true\n**Explaination:** If either a or b are palindromes the answer is true since you can split in the following way:\naprefix = \"\", asuffix = \"x\"\nbprefix = \"\", bsuffix = \"y\"\nThen, aprefix + bsuffix = \"\" + \"y\" = \"y\", which is a palindrome.",
                "Explanation": null
            },
            {
                "Input": "** a = \"xbdef\", b = \"xecab\"",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** a = \"ulacfd\", b = \"jizalu\"",
                "Output": "** true\n**Explaination:** Split them at index 3:\naprefix = \"ula\", asuffix = \"cfd\"\nbprefix = \"jiz\", bsuffix = \"alu\"\nThen, aprefix + bsuffix = \"ula\" + \"alu\" = \"ulaalu\", which is a palindrome.",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count Subtrees With Max Distance Between Cities",
        "slug": "count-subtrees-with-max-distance-between-cities",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 2, edges = [[1,2]]",
                "Output": "** [1]",
                "Explanation": null
            },
            {
                "Input": "** n = 3, edges = [[1,2],[2,3]]",
                "Output": "** [2,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Mean of Array After Removing Some Elements",
        "slug": "mean-of-array-after-removing-some-elements",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]",
                "Output": "** 2.00000",
                "Explanation": "** After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2."
            },
            {
                "Input": "** arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]",
                "Output": "** 4.00000",
                "Explanation": null
            },
            {
                "Input": "** arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]",
                "Output": "** 4.77778",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Coordinate With Maximum Network Quality",
        "slug": "coordinate-with-maximum-network-quality",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2",
                "Output": "** [2,1]",
                "Explanation": "** At coordinate (2, 1) the total quality is 13.\n- Quality of 7 from (2, 1) results in \u230a7 / (1 + sqrt(0)\u230b = \u230a7\u230b = 7\n- Quality of 5 from (1, 2) results in \u230a5 / (1 + sqrt(2)\u230b = \u230a2.07\u230b = 2\n- Quality of 9 from (3, 1) results in \u230a9 / (1 + sqrt(1)\u230b = \u230a4.5\u230b = 4\nNo other coordinate has a higher network quality."
            }
        ]
    },
    {
        "Title": "Number of Sets of K Non-Overlapping Line Segments",
        "slug": "number-of-sets-of-k-non-overlapping-line-segments",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 4, k = 2",
                "Output": "** 5",
                "Explanation": "** The two line segments are shown in red and blue.\nThe image above shows the 5 different ways {(0,2),(2,3)}, {(0,1),(1,3)}, {(0,1),(2,3)}, {(1,2),(2,3)}, {(0,1),(1,2)}."
            }
        ]
    },
    {
        "Title": "Fancy Sequence",
        "slug": "fancy-sequence",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"Fancy\", \"append\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"getIndex\", \"getIndex\"]\n[[], [2], [3], [7], [2], [0], [3], [10], [2], [0], [1], [2]]",
                "Output": "[null, null, null, null, null, 10, null, null, null, 26, 34, 20]",
                "Explanation": "Fancy fancy = new Fancy();\nfancy.append(2);   // fancy sequence: [2]\nfancy.addAll(3);   // fancy sequence: [2+3] -> [5]\nfancy.append(7);   // fancy sequence: [5, 7]\nfancy.multAll(2);  // fancy sequence: [5*2, 7*2] -> [10, 14]\nfancy.getIndex(0); // return 10\nfancy.addAll(3);   // fancy sequence: [10+3, 14+3] -> [13, 17]\nfancy.append(10);  // fancy sequence: [13, 17, 10]\nfancy.multAll(2);  // fancy sequence: [13*2, 17*2, 10*2] -> [26, 34, 20]\nfancy.getIndex(0); // return 26\nfancy.getIndex(1); // return 34\nfancy.getIndex(2); // return 20"
            }
        ]
    },
    {
        "Title": "Largest Substring Between Two Equal Characters",
        "slug": "largest-substring-between-two-equal-characters",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"aa\"",
                "Output": "** 0",
                "Explanation": "** The optimal substring here is an empty substring between the two 'a's."
            },
            {
                "Input": "** s = \"abca\"",
                "Output": "** 2",
                "Explanation": "** The optimal substring here is \"bc\"."
            },
            {
                "Input": "** s = \"cbzxy\"",
                "Output": "** -1",
                "Explanation": "** There are no characters that appear twice in s."
            }
        ]
    },
    {
        "Title": "Lexicographically Smallest String After Applying Operations",
        "slug": "lexicographically-smallest-string-after-applying-operations",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"5525\", a = 9, b = 2",
                "Output": "** \"2050\"",
                "Explanation": "** We can apply the following operations:\nStart:  \"5525\"\nRotate: \"2555\"\nAdd:    \"2454\"\nAdd:    \"2353\"\nRotate: \"5323\"\nAdd:    \"5222\"\nAdd:    \"5121\"\nRotate: \"2151\"\nAdd:    \"2050\"\u200b\u200b\u200b\u200b\u200b\nThere is no way to obtain a string that is lexicographically smaller than \"2050\"."
            },
            {
                "Input": "** s = \"74\", a = 5, b = 1",
                "Output": "** \"24\"",
                "Explanation": "** We can apply the following operations:\nStart:  \"74\"\nRotate: \"47\"\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bAdd:    \"42\"\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bRotate: \"24\"\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\nThere is no way to obtain a string that is lexicographically smaller than \"24\"."
            },
            {
                "Input": "** s = \"0011\", a = 4, b = 2",
                "Output": "** \"0011\"",
                "Explanation": "** There are no sequence of operations that will give us a lexicographically smaller string than \"0011\"."
            }
        ]
    },
    {
        "Title": "Best Team With No Conflicts",
        "slug": "best-team-with-no-conflicts",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** scores = [1,3,5,10,15], ages = [1,2,3,4,5]",
                "Output": "** 34",
                "Explanation": "**\u00a0You can choose all the players."
            },
            {
                "Input": "** scores = [4,5,6,5], ages = [2,1,2,1]",
                "Output": "** 16",
                "Explanation": "**\u00a0It is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age."
            },
            {
                "Input": "** scores = [1,2,3,5], ages = [8,9,10,1]",
                "Output": "** 6",
                "Explanation": "**\u00a0It is best to choose the first 3 players."
            }
        ]
    },
    {
        "Title": "Graph Connectivity With Threshold",
        "slug": "graph-connectivity-with-threshold",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]",
                "Output": "** [false,false,true]",
                "Explanation": "** The divisors for each number:\n1:   1\n2:   1, 2\n3:   1, 3\n4:   1, 2, 4\n5:   1, 5\n6:   1, 2, 3, 6\nUsing the underlined divisors above the threshold, only cities 3 and 6 share a common divisor, so they are the\nonly ones directly connected. The result of each query:\n[1,4]   1 is not connected to 4\n[2,5]   2 is not connected to 5\n[3,6]   3 is connected to 6 through path 3--6"
            },
            {
                "Input": "** n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]",
                "Output": "** [true,true,true,true,true]",
                "Explanation": "** The divisors for each number are the same as the previous example. However, since the threshold is 0,\nall divisors can be used. Since all numbers share 1 as a divisor, all cities are connected."
            },
            {
                "Input": "** n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]",
                "Output": "** [false,false,false,false,false]",
                "Explanation": "** Only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected.\nPlease notice that there can be multiple queries for the same pair of nodes [x, y], and that the query [x, y] is equivalent to the query [y, x]."
            }
        ]
    },
    {
        "Title": "Slowest Key",
        "slug": "slowest-key",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** releaseTimes = [9,29,49,50], keysPressed = \"cbcd\"",
                "Output": "** \"c\"",
                "Explanation": "** The keypresses were as follows:\nKeypress for 'c' had a duration of 9 (pressed at time 0 and released at time 9).\nKeypress for 'b' had a duration of 29 - 9 = 20 (pressed at time 9 right after the release of the previous character and released at time 29).\nKeypress for 'c' had a duration of 49 - 29 = 20 (pressed at time 29 right after the release of the previous character and released at time 49).\nKeypress for 'd' had a duration of 50 - 49 = 1 (pressed at time 49 right after the release of the previous character and released at time 50).\nThe longest of these was the keypress for 'b' and the second keypress for 'c', both with duration 20.\n'c' is lexicographically larger than 'b', so the answer is 'c'."
            },
            {
                "Input": "** releaseTimes = [12,23,36,46,62], keysPressed = \"spuda\"",
                "Output": "** \"a\"",
                "Explanation": "** The keypresses were as follows:\nKeypress for 's' had a duration of 12.\nKeypress for 'p' had a duration of 23 - 12 = 11.\nKeypress for 'u' had a duration of 36 - 23 = 13.\nKeypress for 'd' had a duration of 46 - 36 = 10.\nKeypress for 'a' had a duration of 62 - 46 = 16.\nThe longest of these was the keypress for 'a' with duration 16."
            }
        ]
    },
    {
        "Title": "Arithmetic Subarrays",
        "slug": "arithmetic-subarrays",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [4,6,5,9,3,7], l = [0,0,2], r = [2,3,5]",
                "Output": "** [true,false,true]",
                "Explanation": "**\nIn the 0th query, the subarray is [4,6,5]. This can be rearranged as [6,5,4], which is an arithmetic sequence.\nIn the 1st query, the subarray is [4,6,5,9]. This cannot be rearranged as an arithmetic sequence.\nIn the 2nd query, the subarray is [5,9,3,7]. This can be rearranged as [3,5,7,9], which is an arithmetic sequence."
            },
            {
                "Input": "** nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8,7], r = [4,4,9,7,9,10]",
                "Output": "** [false,true,false,false,true,true]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Path With Minimum Effort",
        "slug": "path-with-minimum-effort",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** heights = [[1,2,2],[3,8,2],[5,3,5]]",
                "Output": "** 2",
                "Explanation": "** The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.\nThis is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3."
            },
            {
                "Input": "** heights = [[1,2,3],[3,8,4],[5,3,5]]",
                "Output": "** 1",
                "Explanation": "** The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5]."
            },
            {
                "Input": "** heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]",
                "Output": "** 0",
                "Explanation": "** This route does not require any effort."
            }
        ]
    },
    {
        "Title": "Rank Transform of a Matrix",
        "slug": "rank-transform-of-a-matrix",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** matrix = [[1,2],[3,4]]",
                "Output": "** [[1,2],[2,3]]",
                "Explanation": "**\nThe rank of matrix[0][0] is 1 because it is the smallest integer in its row and column.\nThe rank of matrix[0][1] is 2 because matrix[0][1] > matrix[0][0] and matrix[0][0] is rank 1.\nThe rank of matrix[1][0] is 2 because matrix[1][0] > matrix[0][0] and matrix[0][0] is rank 1.\nThe rank of matrix[1][1] is 3 because matrix[1][1] > matrix[0][1], matrix[1][1] > matrix[1][0], and both matrix[0][1] and matrix[1][0] are rank 2."
            },
            {
                "Input": "** matrix = [[7,7],[7,7]]",
                "Output": "** [[1,1],[1,1]]",
                "Explanation": null
            },
            {
                "Input": "** matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]",
                "Output": "** [[4,2,3],[1,3,4],[5,1,6],[1,3,4]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Percentage of Users Attended a Contest",
        "slug": "percentage-of-users-attended-a-contest",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nUsers table:\n+---------+-----------+\n| user_id | user_name |\n+---------+-----------+\n| 6       | Alice     |\n| 2       | Bob       |\n| 7       | Alex      |\n+---------+-----------+\nRegister table:\n+------------+---------+\n| contest_id | user_id |\n+------------+---------+\n| 215        | 6       |\n| 209        | 2       |\n| 208        | 2       |\n| 210        | 6       |\n| 208        | 6       |\n| 209        | 7       |\n| 209        | 6       |\n| 215        | 7       |\n| 208        | 7       |\n| 210        | 2       |\n| 207        | 2       |\n| 210        | 7       |\n+------------+---------+",
                "Output": "** \n+------------+------------+\n| contest_id | percentage |\n+------------+------------+\n| 208        | 100.0      |\n| 209        | 100.0      |\n| 210        | 100.0      |\n| 215        | 66.67      |\n| 207        | 33.33      |\n+------------+------------+",
                "Explanation": "** \nAll the users registered in contests 208, 209, and 210. The percentage is 100% and we sort them in the answer table by contest_id in ascending order.\nAlice and Alex registered in contest 215 and the percentage is ((2/3) * 100) = 66.67%\nBob registered in contest 207 and the percentage is ((1/3) * 100) = 33.33%"
            }
        ]
    },
    {
        "Title": "Sort Array by Increasing Frequency",
        "slug": "sort-array-by-increasing-frequency",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,1,2,2,2,3]",
                "Output": "** [3,1,1,2,2,2]",
                "Explanation": "** '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3."
            },
            {
                "Input": "** nums = [2,3,1,3,2]",
                "Output": "** [1,3,3,2,2]",
                "Explanation": "** '2' and '3' both have a frequency of 2, so they are sorted in decreasing order."
            },
            {
                "Input": "** nums = [-1,1,-6,4,5,-6,1,4,1]",
                "Output": "** [5,-1,4,4,-6,-6,1,1,1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Widest Vertical Area Between Two Points Containing No Points",
        "slug": "widest-vertical-area-between-two-points-containing-no-points",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** points = [[8,7],[9,9],[7,4],[9,7]]",
                "Output": "** 1",
                "Explanation": "** Both the red and the blue area are optimal."
            }
        ]
    },
    {
        "Title": "Count Substrings That Differ by One Character",
        "slug": "count-substrings-that-differ-by-one-character",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"aba\", t = \"baba\"",
                "Output": "** 6",
                "Explanation": "** The following are the pairs of substrings from s and t that differ by exactly 1 character:\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\nThe underlined portions are the substrings that are chosen from s and t."
            },
            {
                "Input": "** s = \"ab\", t = \"bb\"",
                "Output": "** 3",
                "Explanation": "** The following are the pairs of substrings from s and t that differ by 1 character:\n(\"ab\", \"bb\")\n(\"ab\", \"bb\")\n(\"ab\", \"bb\")\n\u200b\u200b\u200b\u200bThe underlined portions are the substrings that are chosen from s and t."
            }
        ]
    },
    {
        "Title": "Number of Ways to Form a Target String Given a Dictionary",
        "slug": "number-of-ways-to-form-a-target-string-given-a-dictionary",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** words = [\"acca\",\"bbbb\",\"caca\"], target = \"aba\"",
                "Output": "** 6",
                "Explanation": "** There are 6 ways to form target.\n\"aba\" -> index 0 (\"acca\"), index 1 (\"bbbb\"), index 3 (\"caca\")\n\"aba\" -> index 0 (\"acca\"), index 2 (\"bbbb\"), index 3 (\"caca\")\n\"aba\" -> index 0 (\"acca\"), index 1 (\"bbbb\"), index 3 (\"acca\")\n\"aba\" -> index 0 (\"acca\"), index 2 (\"bbbb\"), index 3 (\"acca\")\n\"aba\" -> index 1 (\"caca\"), index 2 (\"bbbb\"), index 3 (\"acca\")\n\"aba\" -> index 1 (\"caca\"), index 2 (\"bbbb\"), index 3 (\"caca\")"
            },
            {
                "Input": "** words = [\"abba\",\"baab\"], target = \"bab\"",
                "Output": "** 4",
                "Explanation": "** There are 4 ways to form target.\n\"bab\" -> index 0 (\"baab\"), index 1 (\"baab\"), index 2 (\"abba\")\n\"bab\" -> index 0 (\"baab\"), index 1 (\"baab\"), index 3 (\"baab\")\n\"bab\" -> index 0 (\"baab\"), index 2 (\"baab\"), index 3 (\"baab\")\n\"bab\" -> index 1 (\"abba\"), index 2 (\"baab\"), index 3 (\"baab\")"
            }
        ]
    },
    {
        "Title": "Check Array Formation Through Concatenation",
        "slug": "check-array-formation-through-concatenation",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [15,88], pieces = [[88],[15]]",
                "Output": "** true",
                "Explanation": "** Concatenate [15] then [88]"
            },
            {
                "Input": "** arr = [49,18,16], pieces = [[16,18,49]]",
                "Output": "** false",
                "Explanation": "** Even though the numbers match, we cannot reorder pieces[0]."
            },
            {
                "Input": "** arr = [91,4,64,78], pieces = [[78],[4,64],[91]]",
                "Output": "** true",
                "Explanation": "** Concatenate [91] then [4,64] then [78]"
            }
        ]
    },
    {
        "Title": "Count Sorted Vowel Strings",
        "slug": "count-sorted-vowel-strings",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** 5",
                "Explanation": "** The 5 sorted strings that consist of vowels only are [\"a\",\"e\",\"i\",\"o\",\"u\"]."
            },
            {
                "Input": "** n = 2",
                "Output": "** 15",
                "Explanation": "** The 15 sorted strings that consist of vowels only are\n[\"aa\",\"ae\",\"ai\",\"ao\",\"au\",\"ee\",\"ei\",\"eo\",\"eu\",\"ii\",\"io\",\"iu\",\"oo\",\"ou\",\"uu\"].\nNote that \"ea\" is not a valid string since 'e' comes after 'a' in the alphabet."
            },
            {
                "Input": "** n = 33",
                "Output": "** 66045",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Furthest Building You Can Reach",
        "slug": "furthest-building-you-can-reach",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1",
                "Output": "** 4",
                "Explanation": "** Starting at building 0, you can follow these steps:\n- Go to building 1 without using ladders nor bricks since 4 >= 2.\n- Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 < 7.\n- Go to building 3 without using ladders nor bricks since 7 >= 6.\n- Go to building 4 using your only ladder. You must use either bricks or ladders because 6 < 9.\nIt is impossible to go beyond building 4 because you do not have any more bricks or ladders."
            }
        ]
    },
    {
        "Title": "Kth Smallest Instructions",
        "slug": "kth-smallest-instructions",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** destination = [2,3], k = 1",
                "Output": "** \"HHHVV\"",
                "Explanation": "** All the instructions that reach (2, 3) in lexicographic order are as follows:\n[\"HHHVV\", \"HHVHV\", \"HHVVH\", \"HVHHV\", \"HVHVH\", \"HVVHH\", \"VHHHV\", \"VHHVH\", \"VHVHH\", \"VVHHH\"]."
            }
        ]
    },
    {
        "Title": "Get Maximum in Generated Array",
        "slug": "get-maximum-in-generated-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 7",
                "Output": "** 3",
                "Explanation": "** According to the given rules:\n  nums[0] = 0\n  nums[1] = 1\n  nums[(1 * 2) = 2] = nums[1] = 1\n  nums[(1 * 2) + 1 = 3] = nums[1] + nums[2] = 1 + 1 = 2\n  nums[(2 * 2) = 4] = nums[2] = 1\n  nums[(2 * 2) + 1 = 5] = nums[2] + nums[3] = 1 + 2 = 3\n  nums[(3 * 2) = 6] = nums[3] = 2\n  nums[(3 * 2) + 1 = 7] = nums[3] + nums[4] = 2 + 1 = 3\nHence, nums = [0,1,1,2,1,3,2,3], and the maximum is max(0,1,1,2,1,3,2,3) = 3."
            },
            {
                "Input": "** n = 2",
                "Output": "** 1",
                "Explanation": "** According to the given rules, nums = [0,1,1]. The maximum is max(0,1,1) = 1."
            },
            {
                "Input": "** n = 3",
                "Output": "** 2",
                "Explanation": "** According to the given rules, nums = [0,1,1,2]. The maximum is max(0,1,1,2) = 2."
            }
        ]
    },
    {
        "Title": "Minimum Deletions to Make Character Frequencies Unique",
        "slug": "minimum-deletions-to-make-character-frequencies-unique",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"aab\"",
                "Output": "** 0",
                "Explanation": "** s is already good."
            },
            {
                "Input": "** s = \"aaabbbcc\"",
                "Output": "** 2",
                "Explanation": "** You can delete two 'b's resulting in the good string \"aaabcc\".\nAnother way it to delete one 'b' and one 'c' resulting in the good string \"aaabbc\"."
            },
            {
                "Input": "** s = \"ceabaacb\"",
                "Output": "** 2",
                "Explanation": "** You can delete both 'c's resulting in the good string \"eabaab\".\nNote that we only care about characters that are still in the string at the end (i.e. frequency of 0 is ignored)."
            }
        ]
    },
    {
        "Title": "Sell Diminishing-Valued Colored Balls",
        "slug": "sell-diminishing-valued-colored-balls",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** inventory = [2,5], orders = 4",
                "Output": "** 14",
                "Explanation": "** Sell the 1st color 1 time (2) and the 2nd color 3 times (5 + 4 + 3).\nThe maximum total value is 2 + 5 + 4 + 3 = 14."
            }
        ]
    },
    {
        "Title": "Create Sorted Array through Instructions",
        "slug": "create-sorted-array-through-instructions",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** instructions = [1,5,6,2]",
                "Output": "** 1",
                "Explanation": "** Begin with nums = [].\r\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\r\nInsert 5 with cost min(1, 0) = 0, now nums = [1,5].\r\nInsert 6 with cost min(2, 0) = 0, now nums = [1,5,6].\r\nInsert 2 with cost min(1, 2) = 1, now nums = [1,2,5,6].\r\nThe total cost is 0 + 0 + 0 + 1 = 1."
            },
            {
                "Input": "** instructions = [1,2,3,6,5,4]",
                "Output": "** 3",
                "Explanation": "** Begin with nums = [].\r\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\r\nInsert 2 with cost min(1, 0) = 0, now nums = [1,2].\r\nInsert 3 with cost min(2, 0) = 0, now nums = [1,2,3].\r\nInsert 6 with cost min(3, 0) = 0, now nums = [1,2,3,6].\r\nInsert 5 with cost min(3, 1) = 1, now nums = [1,2,3,5,6].\r\nInsert 4 with cost min(3, 2) = 2, now nums = [1,2,3,4,5,6].\r\nThe total cost is 0 + 0 + 0 + 0 + 1 + 2 = 3."
            },
            {
                "Input": "** instructions = [1,3,3,3,2,4,2,1,2]",
                "Output": "** 4",
                "Explanation": "** Begin with nums = [].\r\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\r\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3].\r\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3,3].\r\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3,3,3].\r\nInsert 2 with cost min(1, 3) = 1, now nums = [1,2,3,3,3].\r\nInsert 4 with cost min(5, 0) = 0, now nums = [1,2,3,3,3,4].\r\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 2 with cost min(1, 4) = 1, now nums = [1,2,2,3,3,3,4].\r\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 1 with cost min(0, 6) = 0, now nums = [1,1,2,2,3,3,3,4].\r\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 2 with cost min(2, 4) = 2, now nums = [1,1,2,2,2,3,3,3,4].\r\nThe total cost is 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4."
            }
        ]
    },
    {
        "Title": "Defuse the Bomb",
        "slug": "defuse-the-bomb",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** code = [5,7,1,4], k = 3",
                "Output": "** [12,10,16,13]",
                "Explanation": "** Each number is replaced by the sum of the next 3 numbers. The decrypted code is [7+1+4, 1+4+5, 4+5+7, 5+7+1]. Notice that the numbers wrap around."
            },
            {
                "Input": "** code = [1,2,3,4], k = 0",
                "Output": "** [0,0,0,0]",
                "Explanation": "** When k is zero, the numbers are replaced by 0."
            },
            {
                "Input": "** code = [2,4,9,3], k = -2",
                "Output": "** [12,5,6,13]",
                "Explanation": "** The decrypted code is [3+9, 2+3, 4+2, 9+4]. Notice that the numbers wrap around again. If k is negative, the sum is of the **previous** numbers."
            }
        ]
    },
    {
        "Title": "Minimum Deletions to Make String Balanced",
        "slug": "minimum-deletions-to-make-string-balanced",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"aababbab\"",
                "Output": "** 2",
                "Explanation": "** You can either:\nDelete the characters at 0-indexed positions 2 and 6 (\"aababbab\" -> \"aaabbb\"), or\nDelete the characters at 0-indexed positions 3 and 6 (\"aababbab\" -> \"aabbbb\")."
            },
            {
                "Input": "** s = \"bbaaaaabb\"",
                "Output": "** 2",
                "Explanation": "** The only solution is to delete the first two characters."
            }
        ]
    },
    {
        "Title": "Minimum Jumps to Reach Home",
        "slug": "minimum-jumps-to-reach-home",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9",
                "Output": "** 3",
                "Explanation": "** 3 jumps forward (0 -> 3 -> 6 -> 9) will get the bug home."
            },
            {
                "Input": "** forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11",
                "Output": "** -1",
                "Explanation": null
            },
            {
                "Input": "** forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7",
                "Output": "** 2",
                "Explanation": "** One jump forward (0 -> 16) then one jump backward (16 -> 7) will get the bug home."
            }
        ]
    },
    {
        "Title": "Distribute Repeating Integers",
        "slug": "distribute-repeating-integers",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4], quantity = [2]",
                "Output": "** false",
                "Explanation": "** The 0th customer cannot be given two different integers."
            },
            {
                "Input": "** nums = [1,2,3,3], quantity = [2]",
                "Output": "** true",
                "Explanation": "** The 0th customer is given [3,3]. The integers [1,2] are not used."
            },
            {
                "Input": "** nums = [1,1,2,2], quantity = [2,2]",
                "Output": "** true",
                "Explanation": "** The 0th customer is given [1,1], and the 1st customer is given [2,2]."
            }
        ]
    },
    {
        "Title": "Determine if Two Strings Are Close",
        "slug": "determine-if-two-strings-are-close",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** word1 = \"abc\", word2 = \"bca\"",
                "Output": "** true",
                "Explanation": "** You can attain word2 from word1 in 2 operations.\nApply Operation 1: \"abc\" -> \"acb\"\nApply Operation 1: \"acb\" -> \"bca\""
            },
            {
                "Input": "** word1 = \"a\", word2 = \"aa\"",
                "Output": "** false",
                "Explanation": "** It is impossible to attain word2 from word1, or vice versa, in any number of operations."
            },
            {
                "Input": "** word1 = \"cabbba\", word2 = \"abbccc\"",
                "Output": "** true",
                "Explanation": "** You can attain word2 from word1 in 3 operations.\nApply Operation 1: \"cabbba\" -> \"caabbb\"\nApply Operation 2: \"caabbb\" -> \"baaccc\"\nApply Operation 2: \"baaccc\" -> \"abbccc\""
            }
        ]
    },
    {
        "Title": "Minimum Operations to Reduce X to Zero",
        "slug": "minimum-operations-to-reduce-x-to-zero",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,1,4,2,3], x = 5",
                "Output": "** 2",
                "Explanation": "** The optimal solution is to remove the last two elements to reduce x to zero."
            },
            {
                "Input": "** nums = [5,6,7,8,9], x = 4",
                "Output": "** -1",
                "Explanation": null
            },
            {
                "Input": "** nums = [3,2,20,1,1,3], x = 10",
                "Output": "** 5",
                "Explanation": "** The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero."
            }
        ]
    },
    {
        "Title": "Maximize Grid Happiness",
        "slug": "maximize-grid-happiness",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** m = 2, n = 3, introvertsCount = 1, extrovertsCount = 2",
                "Output": "** 240",
                "Explanation": "** Assume the grid is 1-indexed with coordinates (row, column).\nWe can put the introvert in cell (1,1) and put the extroverts in cells (1,3) and (2,3).\n- Introvert at (1,1) happiness: 120 (starting happiness) - (0 * 30) (0 neighbors) = 120\n- Extrovert at (1,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60\n- Extrovert at (2,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60\nThe grid happiness is 120 + 60 + 60 = 240.\nThe above figure shows the grid in this example with each person's happiness. The introvert stays in the light green cell while the extroverts live on the light purple cells."
            }
        ]
    },
    {
        "Title": "Average Time of Process per Machine",
        "slug": "average-time-of-process-per-machine",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nActivity table:\n+------------+------------+---------------+-----------+\n| machine_id | process_id | activity_type | timestamp |\n+------------+------------+---------------+-----------+\n| 0          | 0          | start         | 0.712     |\n| 0          | 0          | end           | 1.520     |\n| 0          | 1          | start         | 3.140     |\n| 0          | 1          | end           | 4.120     |\n| 1          | 0          | start         | 0.550     |\n| 1          | 0          | end           | 1.550     |\n| 1          | 1          | start         | 0.430     |\n| 1          | 1          | end           | 1.420     |\n| 2          | 0          | start         | 4.100     |\n| 2          | 0          | end           | 4.512     |\n| 2          | 1          | start         | 2.500     |\n| 2          | 1          | end           | 5.000     |\n+------------+------------+---------------+-----------+",
                "Output": "** \n+------------+-----------------+\n| machine_id | processing_time |\n+------------+-----------------+\n| 0          | 0.894           |\n| 1          | 0.995           |\n| 2          | 1.456           |\n+------------+-----------------+",
                "Explanation": "** \nThere are 3 machines running 2 processes each.\nMachine 0's average time is ((1.520 - 0.712) + (4.120 - 3.140)) / 2 = 0.894\nMachine 1's average time is ((1.550 - 0.550) + (1.420 - 0.430)) / 2 = 0.995\nMachine 2's average time is ((4.512 - 4.100) + (5.000 - 2.500)) / 2 = 1.456"
            }
        ]
    },
    {
        "Title": "Check If Two String Arrays are Equivalent",
        "slug": "check-if-two-string-arrays-are-equivalent",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** word1 = [\"ab\", \"c\"], word2 = [\"a\", \"bc\"]",
                "Output": "** true",
                "Explanation": "**\nword1 represents string \"ab\" + \"c\" -> \"abc\"\nword2 represents string \"a\" + \"bc\" -> \"abc\"\nThe strings are the same, so return true."
            },
            {
                "Input": "** word1 = [\"a\", \"cb\"], word2 = [\"ab\", \"c\"]",
                "Output": "** false",
                "Explanation": null
            },
            {
                "Input": "** word1  = [\"abc\", \"d\", \"defg\"], word2 = [\"abcddefg\"]",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Smallest String With A Given Numeric Value",
        "slug": "smallest-string-with-a-given-numeric-value",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3, k = 27",
                "Output": "** \"aay\"",
                "Explanation": "** The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3."
            },
            {
                "Input": "** n = 5, k = 73",
                "Output": "** \"aaszz\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Ways to Make a Fair Array",
        "slug": "ways-to-make-a-fair-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,1,6,4]",
                "Output": "** 1",
                "Explanation": "**\nRemove index 0: [1,6,4] -> Even sum: 1 + 4 = 5. Odd sum: 6. Not fair.\nRemove index 1: [2,6,4] -> Even sum: 2 + 4 = 6. Odd sum: 6. Fair.\nRemove index 2: [2,1,4] -> Even sum: 2 + 4 = 6. Odd sum: 1. Not fair.\nRemove index 3: [2,1,6] -> Even sum: 2 + 6 = 8. Odd sum: 1. Not fair.\nThere is 1 index that you can remove to make nums fair."
            },
            {
                "Input": "** nums = [1,1,1]",
                "Output": "** 3",
                "Explanation": "**\u00a0You can remove any index and the remaining array is fair."
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 0",
                "Explanation": "**\u00a0You cannot make a fair array after removing any index."
            }
        ]
    },
    {
        "Title": "Minimum Initial Energy to Finish Tasks",
        "slug": "minimum-initial-energy-to-finish-tasks",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** tasks = [[1,2],[2,4],[4,8]]",
                "Output": "** 8",
                "Explanation": "**\nStarting with 8 energy, we finish the tasks in the following order:\n    - 3rd task. Now energy = 8 - 4 = 4.\n    - 2nd task. Now energy = 4 - 2 = 2.\n    - 1st task. Now energy = 2 - 1 = 1.\nNotice that even though we have leftover energy, starting with 7 energy does not work because we cannot do the 3rd task."
            },
            {
                "Input": "** tasks = [[1,3],[2,4],[10,11],[10,12],[8,9]]",
                "Output": "** 32",
                "Explanation": "**\nStarting with 32 energy, we finish the tasks in the following order:\n    - 1st task. Now energy = 32 - 1 = 31.\n    - 2nd task. Now energy = 31 - 2 = 29.\n    - 3rd task. Now energy = 29 - 10 = 19.\n    - 4th task. Now energy = 19 - 10 = 9.\n    - 5th task. Now energy = 9 - 8 = 1."
            },
            {
                "Input": "** tasks = [[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]",
                "Output": "** 27",
                "Explanation": "**\nStarting with 27 energy, we finish the tasks in the following order:\n    - 5th task. Now energy = 27 - 5 = 22.\n    - 2nd task. Now energy = 22 - 2 = 20.\n    - 3rd task. Now energy = 20 - 3 = 17.\n    - 1st task. Now energy = 17 - 1 = 16.\n    - 4th task. Now energy = 16 - 4 = 12.\n    - 6th task. Now energy = 12 - 6 = 6."
            }
        ]
    },
    {
        "Title": "Fix Names in a Table",
        "slug": "fix-names-in-a-table",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nUsers table:\n+---------+-------+\n| user_id | name  |\n+---------+-------+\n| 1       | aLice |\n| 2       | bOB   |\n+---------+-------+",
                "Output": "** \n+---------+-------+\n| user_id | name  |\n+---------+-------+\n| 1       | Alice |\n| 2       | Bob   |\n+---------+-------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Repeating Substring",
        "slug": "maximum-repeating-substring",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** sequence = \"ababc\", word = \"ab\"",
                "Output": "** 2",
                "Explanation": "** \"abab\" is a substring in \"ababc\"."
            },
            {
                "Input": "** sequence = \"ababc\", word = \"ba\"",
                "Output": "** 1",
                "Explanation": "** \"ba\" is a substring in \"ababc\". \"baba\" is not a substring in \"ababc\"."
            },
            {
                "Input": "** sequence = \"ababc\", word = \"ac\"",
                "Output": "** 0",
                "Explanation": "** \"ac\" is not a substring in \"ababc\"."
            }
        ]
    },
    {
        "Title": "Merge In Between Linked Lists",
        "slug": "merge-in-between-linked-lists",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** list1 = [10,1,13,6,9,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]",
                "Output": "** [10,1,13,1000000,1000001,1000002,5]",
                "Explanation": "** We remove the nodes 3 and 4 and put the entire list2 in their place. The blue edges and nodes in the above figure indicate the result."
            },
            {
                "Input": "** list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004]",
                "Output": "** [0,1,1000000,1000001,1000002,1000003,1000004,6]",
                "Explanation": "** The blue edges and nodes in the above figure indicate the result."
            }
        ]
    },
    {
        "Title": "Design Front Middle Back Queue",
        "slug": "design-front-middle-back-queue",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "**\n[\"FrontMiddleBackQueue\", \"pushFront\", \"pushBack\", \"pushMiddle\", \"pushMiddle\", \"popFront\", \"popMiddle\", \"popMiddle\", \"popBack\", \"popFront\"]\n[[], [1], [2], [3], [4], [], [], [], [], []]",
                "Output": "**\n[null, null, null, null, null, 1, 3, 4, 2, -1]",
                "Explanation": "**\nFrontMiddleBackQueue q = new FrontMiddleBackQueue();\nq.pushFront(1);   // [1]\nq.pushBack(2);    // [1, 2]\nq.pushMiddle(3);  // [1, 3, 2]\nq.pushMiddle(4);  // [1, 4, 3, 2]\nq.popFront();     // return 1 -> [4, 3, 2]\nq.popMiddle();    // return 3 -> [4, 2]\nq.popMiddle();    // return 4 -> [2]\nq.popBack();      // return 2 -> []\nq.popFront();     // return -1 -> [] (The queue is empty)"
            }
        ]
    },
    {
        "Title": "Minimum Number of Removals to Make Mountain Array",
        "slug": "minimum-number-of-removals-to-make-mountain-array",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,3,1]",
                "Output": "** 0",
                "Explanation": "** The array itself is a mountain array so we do not need to remove any elements."
            },
            {
                "Input": "** nums = [2,1,1,5,6,2,3,1]",
                "Output": "** 3",
                "Explanation": "** One solution is to remove the elements at indices 0, 1, and 5, making the array nums = [1,5,6,3,1]."
            }
        ]
    },
    {
        "Title": "Richest Customer Wealth",
        "slug": "richest-customer-wealth",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** accounts = [[1,2,3],[3,2,1]]",
                "Output": "** 6",
                "Explanation": "**\n1st customer has wealth = 1 + 2 + 3 = 6\n2nd customer has wealth = 3 + 2 + 1 = 6\nBoth customers are considered the richest with a wealth of 6 each, so return 6."
            },
            {
                "Input": "** accounts = [[1,5],[7,3],[3,5]]",
                "Output": "** 10",
                "Explanation": "1st customer has wealth = 6\n2nd customer has wealth = 10 \n3rd customer has wealth = 8\nThe 2nd customer is the richest with a wealth of 10."
            },
            {
                "Input": "** accounts = [[2,8,7],[7,1,3],[1,9,5]]",
                "Output": "** 17",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find the Most Competitive Subsequence",
        "slug": "find-the-most-competitive-subsequence",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,5,2,6], k = 2",
                "Output": "** [2,6]",
                "Explanation": "** Among the set of every possible subsequence: {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}, [2,6] is the most competitive."
            },
            {
                "Input": "** nums = [2,4,3,3,5,4,9,6], k = 4",
                "Output": "** [2,3,3,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Moves to Make Array Complementary",
        "slug": "minimum-moves-to-make-array-complementary",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,4,3], limit = 4",
                "Output": "** 1",
                "Explanation": "** In 1 move, you can change nums to [1,2,2,3] (underlined elements are changed).\nnums[0] + nums[3] = 1 + 3 = 4.\nnums[1] + nums[2] = 2 + 2 = 4.\nnums[2] + nums[1] = 2 + 2 = 4.\nnums[3] + nums[0] = 3 + 1 = 4.\nTherefore, nums[i] + nums[n-1-i] = 4 for every i, so nums is complementary."
            },
            {
                "Input": "** nums = [1,2,2,1], limit = 2",
                "Output": "** 2",
                "Explanation": "** In 2 moves, you can change nums to [2,2,2,2]. You cannot change any number to 3 since 3 > limit."
            },
            {
                "Input": "** nums = [1,2,1,2], limit = 2",
                "Output": "** 0",
                "Explanation": "** nums is already complementary."
            }
        ]
    },
    {
        "Title": "Minimize Deviation in Array",
        "slug": "minimize-deviation-in-array",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 1",
                "Explanation": "** You can transform the array to [1,2,3,2], then to [2,2,3,2], then the deviation will be 3 - 2 = 1."
            },
            {
                "Input": "** nums = [4,1,5,20,3]",
                "Output": "** 3",
                "Explanation": "** You can transform the array after two operations to [4,2,5,5,3], then the deviation will be 5 - 2 = 3."
            },
            {
                "Input": "** nums = [2,10,8]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Goal Parser Interpretation",
        "slug": "goal-parser-interpretation",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** command = \"G()(al)\"",
                "Output": "** \"Goal\"",
                "Explanation": "**\u00a0The Goal Parser interprets the command as follows:\nG -> G\n() -> o\n(al) -> al\nThe final concatenated result is \"Goal\"."
            },
            {
                "Input": "** command = \"G()()()()(al)\"",
                "Output": "** \"Gooooal\"",
                "Explanation": null
            },
            {
                "Input": "** command = \"(al)G(al)()()G\"",
                "Output": "** \"alGalooG\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Max Number of K-Sum Pairs",
        "slug": "max-number-of-k-sum-pairs",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4], k = 5",
                "Output": "** 2",
                "Explanation": "** Starting with nums = [1,2,3,4]:\n- Remove numbers 1 and 4, then nums = [2,3]\n- Remove numbers 2 and 3, then nums = []\nThere are no more pairs that sum up to 5, hence a total of 2 operations."
            },
            {
                "Input": "** nums = [3,1,3,4,3], k = 6",
                "Output": "** 1",
                "Explanation": "** Starting with nums = [3,1,3,4,3]:\n- Remove the first two 3's, then nums = [1,4,3]\nThere are no more pairs that sum up to 6, hence a total of 1 operation."
            }
        ]
    },
    {
        "Title": "Concatenation of Consecutive Binary Numbers",
        "slug": "concatenation-of-consecutive-binary-numbers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** 1",
                "Explanation": "** \"1\" in binary corresponds to the decimal value 1."
            },
            {
                "Input": "** n = 3",
                "Output": "** 27",
                "Explanation": "** In binary, 1, 2, and 3 corresponds to \"1\", \"10\", and \"11\".\nAfter concatenating them, we have \"11011\", which corresponds to the decimal value 27."
            },
            {
                "Input": "** n = 12",
                "Output": "** 505379714",
                "Explanation": "The concatenation results in \"1101110010111011110001001101010111100\".\nThe decimal value of that is 118505380540.\nAfter modulo 109 + 7, the result is 505379714."
            }
        ]
    },
    {
        "Title": "Minimum Incompatibility",
        "slug": "minimum-incompatibility",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,1,4], k = 2",
                "Output": "** 4",
                "Explanation": "** The optimal distribution of subsets is [1,2] and [1,4].\nThe incompatibility is (2-1) + (4-1) = 4.\nNote that [1,1] and [2,4] would result in a smaller sum, but the first subset contains 2 equal elements."
            },
            {
                "Input": "** nums = [6,3,8,1,3,1,2,2], k = 4",
                "Output": "** 6",
                "Explanation": "** The optimal distribution of subsets is [1,2], [2,3], [6,8], and [1,3].\nThe incompatibility is (2-1) + (3-2) + (8-6) + (3-1) = 6."
            },
            {
                "Input": "** nums = [5,3,3,6,3,3], k = 3",
                "Output": "** -1",
                "Explanation": "** It is impossible to distribute nums into 3 subsets where no two elements are equal in the same subset."
            }
        ]
    },
    {
        "Title": "Invalid Tweets",
        "slug": "invalid-tweets",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nTweets table:\n+----------+----------------------------------+\n| tweet_id | content                          |\n+----------+----------------------------------+\n| 1        | Vote for Biden                   |\n| 2        | Let us make America great again! |\n+----------+----------------------------------+",
                "Output": "** \n+----------+\n| tweet_id |\n+----------+\n| 2        |\n+----------+",
                "Explanation": "** \nTweet 1 has length = 14. It is a valid tweet.\nTweet 2 has length = 32. It is an invalid tweet."
            }
        ]
    },
    {
        "Title": "Count the Number of Consistent Strings",
        "slug": "count-the-number-of-consistent-strings",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** allowed = \"ab\", words = [\"ad\",\"bd\",\"aaab\",\"baa\",\"badab\"]",
                "Output": "** 2",
                "Explanation": "** Strings \"aaab\" and \"baa\" are consistent since they only contain characters 'a' and 'b'."
            },
            {
                "Input": "** allowed = \"abc\", words = [\"a\",\"b\",\"c\",\"ab\",\"ac\",\"bc\",\"abc\"]",
                "Output": "** 7",
                "Explanation": "** All strings are consistent."
            },
            {
                "Input": "** allowed = \"cad\", words = [\"cc\",\"acd\",\"b\",\"ba\",\"bac\",\"bad\",\"ac\",\"d\"]",
                "Output": "** 4",
                "Explanation": "** Strings \"cc\", \"acd\", \"ac\", and \"d\" are consistent."
            }
        ]
    },
    {
        "Title": "Sum of Absolute Differences in a Sorted Array",
        "slug": "sum-of-absolute-differences-in-a-sorted-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,3,5]",
                "Output": "** [4,3,5]",
                "Explanation": "** Assuming the arrays are 0-indexed, then\nresult[0] = |2-2| + |2-3| + |2-5| = 0 + 1 + 3 = 4,\nresult[1] = |3-2| + |3-3| + |3-5| = 1 + 0 + 2 = 3,\nresult[2] = |5-2| + |5-3| + |5-5| = 3 + 2 + 0 = 5."
            },
            {
                "Input": "** nums = [1,4,6,8,10]",
                "Output": "** [24,15,13,15,21]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Stone Game VI",
        "slug": "stone-game-vi",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** aliceValues = [1,3], bobValues = [2,1]",
                "Output": "** 1",
                "Explanation": "**\nIf Alice takes stone 1 (0-indexed) first, Alice will receive 3 points.\nBob can only choose stone 0, and will only receive 2 points.\nAlice wins."
            },
            {
                "Input": "** aliceValues = [1,2], bobValues = [3,1]",
                "Output": "** 0",
                "Explanation": "**\nIf Alice takes stone 0, and Bob takes stone 1, they will both have 1 point.\nDraw."
            },
            {
                "Input": "** aliceValues = [2,4,3], bobValues = [1,6,7]",
                "Output": "** -1",
                "Explanation": "**\nRegardless of how Alice plays, Bob will be able to have more points than Alice.\nFor example, if Alice takes stone 1, Bob can take stone 2, and Alice takes stone 0, Alice will have 6 points to Bob's 7.\nBob wins."
            }
        ]
    },
    {
        "Title": "Delivering Boxes from Storage to Ports",
        "slug": "delivering-boxes-from-storage-to-ports",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** boxes = [[1,1],[2,1],[1,1]], portsCount = 2, maxBoxes = 3, maxWeight = 3",
                "Output": "** 4",
                "Explanation": "** The optimal strategy is as follows: \n- The ship takes all the boxes in the queue, goes to port 1, then port 2, then port 1 again, then returns to storage. 4 trips.\nSo the total number of trips is 4.\nNote that the first and third boxes cannot be delivered together because the boxes need to be delivered in order (i.e. the second box needs to be delivered at port 2 before the third box)."
            },
            {
                "Input": "** boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portsCount = 3, maxBoxes = 3, maxWeight = 6",
                "Output": "** 6",
                "Explanation": "** The optimal strategy is as follows: \n- The ship takes the first box, goes to port 1, then returns to storage. 2 trips.\n- The ship takes the second, third and fourth boxes, goes to port 3, then returns to storage. 2 trips.\n- The ship takes the fifth box, goes to port 2, then returns to storage. 2 trips.\nSo the total number of trips is 2 + 2 + 2 = 6."
            },
            {
                "Input": "** boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portsCount = 3, maxBoxes = 6, maxWeight = 7",
                "Output": "** 6",
                "Explanation": "** The optimal strategy is as follows:\n- The ship takes the first and second boxes, goes to port 1, then returns to storage. 2 trips.\n- The ship takes the third and fourth boxes, goes to port 2, then returns to storage. 2 trips.\n- The ship takes the fifth and sixth boxes, goes to port 3, then returns to storage. 2 trips.\nSo the total number of trips is 2 + 2 + 2 = 6."
            }
        ]
    },
    {
        "Title": "Count of Matches in Tournament",
        "slug": "count-of-matches-in-tournament",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 7",
                "Output": "** 6",
                "Explanation": "** Details of the tournament: \n- 1st Round: Teams = 7, Matches = 3, and 4 teams advance.\n- 2nd Round: Teams = 4, Matches = 2, and 2 teams advance.\n- 3rd Round: Teams = 2, Matches = 1, and 1 team is declared the winner.\nTotal number of matches = 3 + 2 + 1 = 6."
            },
            {
                "Input": "** n = 14",
                "Output": "** 13",
                "Explanation": "** Details of the tournament:\n- 1st Round: Teams = 14, Matches = 7, and 7 teams advance.\n- 2nd Round: Teams = 7, Matches = 3, and 4 teams advance.\n- 3rd Round: Teams = 4, Matches = 2, and 2 teams advance.\n- 4th Round: Teams = 2, Matches = 1, and 1 team is declared the winner.\nTotal number of matches = 7 + 3 + 2 + 1 = 13."
            }
        ]
    },
    {
        "Title": "Partitioning Into Minimum Number Of Deci-Binary Numbers",
        "slug": "partitioning-into-minimum-number-of-deci-binary-numbers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = \"32\"",
                "Output": "** 3",
                "Explanation": "** 10 + 11 + 11 = 32"
            },
            {
                "Input": "** n = \"82734\"",
                "Output": "** 8",
                "Explanation": null
            },
            {
                "Input": "** n = \"27346209830709182346\"",
                "Output": "** 9",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Stone Game VII",
        "slug": "stone-game-vii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** stones = [5,3,1,4,2]",
                "Output": "** 6",
                "Explanation": "** \n- Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob = 0, stones = [5,3,1,4].\n- Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8, stones = [3,1,4].\n- Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, stones = [1,4].\n- Bob removes 1 and gets 4 points. Alice = 18, Bob = 12, stones = [4].\n- Alice removes 4 and gets 0 points. Alice = 18, Bob = 12, stones = [].\nThe score difference is 18 - 12 = 6."
            },
            {
                "Input": "** stones = [7,90,5,1,100,10,10,2]",
                "Output": "** 122",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Height by Stacking Cuboids ",
        "slug": "maximum-height-by-stacking-cuboids",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** cuboids = [[38,25,45],[76,35,3]]",
                "Output": "** 76",
                "Explanation": "**\nYou can't place any of the cuboids on the other.\nWe choose cuboid 1 and rotate it so that the 35x3 side is facing down and its height is 76."
            },
            {
                "Input": "** cuboids = [[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]]",
                "Output": "** 102",
                "Explanation": "**\nAfter rearranging the cuboids, you can see that all cuboids have the same dimension.\nYou can place the 11x7 side down on all cuboids so their heights are 17.\nThe maximum height of stacked cuboids is 6 * 17 = 102."
            }
        ]
    },
    {
        "Title": "Daily Leads and Partners",
        "slug": "daily-leads-and-partners",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nDailySales table:\n+-----------+-----------+---------+------------+\n| date_id   | make_name | lead_id | partner_id |\n+-----------+-----------+---------+------------+\n| 2020-12-8 | toyota    | 0       | 1          |\n| 2020-12-8 | toyota    | 1       | 0          |\n| 2020-12-8 | toyota    | 1       | 2          |\n| 2020-12-7 | toyota    | 0       | 2          |\n| 2020-12-7 | toyota    | 0       | 1          |\n| 2020-12-8 | honda     | 1       | 2          |\n| 2020-12-8 | honda     | 2       | 1          |\n| 2020-12-7 | honda     | 0       | 1          |\n| 2020-12-7 | honda     | 1       | 2          |\n| 2020-12-7 | honda     | 2       | 1          |\n+-----------+-----------+---------+------------+",
                "Output": "** \n+-----------+-----------+--------------+-----------------+\n| date_id   | make_name | unique_leads | unique_partners |\n+-----------+-----------+--------------+-----------------+\n| 2020-12-8 | toyota    | 2            | 3               |\n| 2020-12-7 | toyota    | 1            | 2               |\n| 2020-12-8 | honda     | 2            | 2               |\n| 2020-12-7 | honda     | 3            | 2               |\n+-----------+-----------+--------------+-----------------+",
                "Explanation": "** \nFor 2020-12-8, toyota gets leads = [0, 1] and partners = [0, 1, 2] while honda gets leads = [1, 2] and partners = [1, 2].\nFor 2020-12-7, toyota gets leads = [0] and partners = [1, 2] while honda gets leads = [0, 1, 2] and partners = [1, 2]."
            }
        ]
    },
    {
        "Title": "Reformat Phone Number",
        "slug": "reformat-phone-number",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** number = \"1-23-45 6\"",
                "Output": "** \"123-456\"",
                "Explanation": "** The digits are \"123456\".\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is \"123\".\nStep 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is \"456\".\nJoining the blocks gives \"123-456\"."
            },
            {
                "Input": "** number = \"123 4-567\"",
                "Output": "** \"123-45-67\"",
                "Explanation": "** The digits are \"1234567\".\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is \"123\".\nStep 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are \"45\" and \"67\".\nJoining the blocks gives \"123-45-67\"."
            },
            {
                "Input": "** number = \"123 4-5678\"",
                "Output": "** \"123-456-78\"",
                "Explanation": "** The digits are \"12345678\".\nStep 1: The 1st block is \"123\".\nStep 2: The 2nd block is \"456\".\nStep 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is \"78\".\nJoining the blocks gives \"123-456-78\"."
            }
        ]
    },
    {
        "Title": "Maximum Erasure Value",
        "slug": "maximum-erasure-value",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [4,2,4,5,6]",
                "Output": "** 17",
                "Explanation": "** The optimal subarray here is [2,4,5,6]."
            },
            {
                "Input": "** nums = [5,2,1,2,5,2,1,2,5]",
                "Output": "** 8",
                "Explanation": "** The optimal subarray here is [5,2,1] or [1,2,5]."
            }
        ]
    },
    {
        "Title": "Jump Game VI",
        "slug": "jump-game-vi",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,-1,-2,4,-7,3], k = 2",
                "Output": "** 7",
                "Explanation": "** You can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). The sum is 7."
            },
            {
                "Input": "** nums = [10,-5,-2,4,0,3], k = 3",
                "Output": "** 17",
                "Explanation": "** You can choose your jumps forming the subsequence [10,4,3] (underlined above). The sum is 17."
            },
            {
                "Input": "** nums = [1,-5,-20,4,-1,3,-6,-3], k = 2",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Checking Existence of Edge Length Limited Paths",
        "slug": "checking-existence-of-edge-length-limited-paths",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]]",
                "Output": "** [false,true]",
                "Explanation": "** The above figure shows the given graph. Note that there are two overlapping edges between 0 and 1 with distances 2 and 16.\nFor the first query, between 0 and 1 there is no path where each distance is less than 2, thus we return false for this query.\nFor the second query, there is a path (0 -> 1 -> 2) of two edges with distances less than 5, thus we return true for this query."
            },
            {
                "Input": "** n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]]",
                "Output": "** [true,false]",
                "Explanation": "** The above figure shows the given graph."
            }
        ]
    },
    {
        "Title": "Number of Students Unable to Eat Lunch",
        "slug": "number-of-students-unable-to-eat-lunch",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** students = [1,1,0,0], sandwiches = [0,1,0,1]",
                "Output": "** 0",
                "Explanation": "**\n- Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].\n- Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].\n- Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [0,1].\n- Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].\n- Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].\nHence all students are able to eat."
            },
            {
                "Input": "** students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Average Waiting Time",
        "slug": "average-waiting-time",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** customers = [[1,2],[2,5],[4,3]]",
                "Output": "** 5.00000",
                "Explanation": "**1) The first customer arrives at time 1, the chef takes his order and starts preparing it immediately at time 1, and finishes at time 3, so the waiting time of the first customer is 3 - 1 = 2.\n2) The second customer arrives at time 2, the chef takes his order and starts preparing it at time 3, and finishes at time 8, so the waiting time of the second customer is 8 - 2 = 6.\n3) The third customer arrives at time 4, the chef takes his order and starts preparing it at time 8, and finishes at time 11, so the waiting time of the third customer is 11 - 4 = 7.\nSo the average waiting time = (2 + 6 + 7) / 3 = 5."
            },
            {
                "Input": "** customers = [[5,2],[5,4],[10,3],[20,1]]",
                "Output": "** 3.25000",
                "Explanation": "**1) The first customer arrives at time 5, the chef takes his order and starts preparing it immediately at time 5, and finishes at time 7, so the waiting time of the first customer is 7 - 5 = 2.\n2) The second customer arrives at time 5, the chef takes his order and starts preparing it at time 7, and finishes at time 11, so the waiting time of the second customer is 11 - 5 = 6.\n3) The third customer arrives at time 10, the chef takes his order and starts preparing it at time 11, and finishes at time 14, so the waiting time of the third customer is 14 - 10 = 4.\n4) The fourth customer arrives at time 20, the chef takes his order and starts preparing it immediately at time 20, and finishes at time 21, so the waiting time of the fourth customer is 21 - 20 = 1.\nSo the average waiting time = (2 + 6 + 4 + 1) / 4 = 3.25."
            }
        ]
    },
    {
        "Title": "Maximum Binary String After Change",
        "slug": "maximum-binary-string-after-change",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** binary = \"000110\"",
                "Output": "** \"111011\"",
                "Explanation": "** A valid transformation sequence can be:\n\"000110\" -> \"000101\" \n\"000101\" -> \"100101\" \n\"100101\" -> \"110101\" \n\"110101\" -> \"110011\" \n\"110011\" -> \"111011\""
            },
            {
                "Input": "** binary = \"01\"",
                "Output": "** \"01\"",
                "Explanation": "**\u00a0\"01\" cannot be transformed any further."
            }
        ]
    },
    {
        "Title": "Minimum Adjacent Swaps for K Consecutive Ones",
        "slug": "minimum-adjacent-swaps-for-k-consecutive-ones",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,0,0,1,0,1], k = 2",
                "Output": "** 1",
                "Explanation": "** In 1 move, nums could be [1,0,0,0,1,1] and have 2 consecutive 1's."
            },
            {
                "Input": "** nums = [1,0,0,0,0,0,1,1], k = 3",
                "Output": "** 5",
                "Explanation": "** In 5 moves, the leftmost 1 can be shifted right until nums = [0,0,0,0,0,1,1,1]."
            },
            {
                "Input": "** nums = [1,1,0,1], k = 2",
                "Output": "** 0",
                "Explanation": "** nums already has 2 consecutive 1's."
            }
        ]
    },
    {
        "Title": "Determine if String Halves Are Alike",
        "slug": "determine-if-string-halves-are-alike",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"book\"",
                "Output": "** true",
                "Explanation": "** a = \"bo\" and b = \"ok\". a has 1 vowel and b has 1 vowel. Therefore, they are alike."
            },
            {
                "Input": "** s = \"textbook\"",
                "Output": "** false",
                "Explanation": "** a = \"text\" and b = \"book\". a has 1 vowel whereas b has 2. Therefore, they are not alike.\nNotice that the vowel o is counted twice."
            }
        ]
    },
    {
        "Title": "Maximum Number of Eaten Apples",
        "slug": "maximum-number-of-eaten-apples",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** apples = [1,2,3,5,2], days = [3,2,1,4,2]",
                "Output": "** 7",
                "Explanation": "** You can eat 7 apples:\n- On the first day, you eat an apple that grew on the first day.\n- On the second day, you eat an apple that grew on the second day.\n- On the third day, you eat an apple that grew on the second day. After this day, the apples that grew on the third day rot.\n- On the fourth to the seventh days, you eat apples that grew on the fourth day."
            },
            {
                "Input": "** apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]",
                "Output": "** 5",
                "Explanation": "** You can eat 5 apples:\n- On the first to the third day you eat apples that grew on the first day.\n- Do nothing on the fouth and fifth days.\n- On the sixth and seventh days you eat apples that grew on the sixth day."
            }
        ]
    },
    {
        "Title": "Where Will the Ball Fall",
        "slug": "where-will-the-ball-fall",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[-1]]",
                "Output": "** [-1]",
                "Explanation": "** The ball gets stuck against the left wall."
            },
            {
                "Input": "** grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]",
                "Output": "** [0,1,2,3,4,-1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum XOR With an Element From Array",
        "slug": "maximum-xor-with-an-element-from-array",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]",
                "Output": "** [3,3,7]",
                "Explanation": "**\n1) 0 and 1 are the only two integers not greater than 1. 0 XOR 3 = 3 and 1 XOR 3 = 2. The larger of the two is 3.\n2) 1 XOR 2 = 3.\n3) 5 XOR 2 = 7."
            },
            {
                "Input": "** nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]]",
                "Output": "** [15,-1,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Units on a Truck",
        "slug": "maximum-units-on-a-truck",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4",
                "Output": "** 8",
                "Explanation": "** There are:\n- 1 box of the first type that contains 3 units.\n- 2 boxes of the second type that contain 2 units each.\n- 3 boxes of the third type that contain 1 unit each.\nYou can take all the boxes of the first and second types, and one box of the third type.\nThe total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8."
            },
            {
                "Input": "** boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10",
                "Output": "** 91",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count Good Meals",
        "slug": "count-good-meals",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** deliciousness = [1,3,5,7,9]",
                "Output": "** 4",
                "Explanation": "** The good meals are (1,3), (1,7), (3,5) and, (7,9).\nTheir respective sums are 4, 8, 8, and 16, all of which are powers of 2."
            },
            {
                "Input": "** deliciousness = [1,1,1,3,3,3,7]",
                "Output": "** 15",
                "Explanation": "** The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways."
            }
        ]
    },
    {
        "Title": "Ways to Split Array Into Three Subarrays",
        "slug": "ways-to-split-array-into-three-subarrays",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,1,1]",
                "Output": "** 1",
                "Explanation": "** The only good way to split nums is [1] [1] [1]."
            },
            {
                "Input": "** nums = [1,2,2,2,5,0]",
                "Output": "** 3",
                "Explanation": "** There are three good ways of splitting nums:\n[1] [2] [2,2,5,0]\n[1] [2,2] [2,5,0]\n[1,2] [2,2] [5,0]"
            },
            {
                "Input": "** nums = [3,2,1]",
                "Output": "** 0",
                "Explanation": "** There is no good way to split nums."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Make a Subsequence",
        "slug": "minimum-operations-to-make-a-subsequence",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** target = [5,1,3], arr = [9,4,2,3,4]",
                "Output": "** 2",
                "Explanation": "** You can add 5 and 1 in such a way that makes arr = [5,9,4,1,2,3,4], then target will be a subsequence of arr."
            },
            {
                "Input": "** target = [6,4,8,1,3,2], arr = [4,7,6,2,3,8,6,1]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Calculate Money in Leetcode Bank",
        "slug": "calculate-money-in-leetcode-bank",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** 10",
                "Explanation": "**\u00a0After the 4th day, the total is 1 + 2 + 3 + 4 = 10."
            },
            {
                "Input": "** n = 10",
                "Output": "** 37",
                "Explanation": "**\u00a0After the 10th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on the 2nd Monday, Hercy only puts in $2."
            },
            {
                "Input": "** n = 20",
                "Output": "** 96",
                "Explanation": "**\u00a0After the 20th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96."
            }
        ]
    },
    {
        "Title": "Maximum Score From Removing Substrings",
        "slug": "maximum-score-from-removing-substrings",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"cdbcbbaaabab\", x = 4, y = 5",
                "Output": "** 19",
                "Explanation": "**\n- Remove the \"ba\" underlined in \"cdbcbbaaabab\". Now, s = \"cdbcbbaaab\" and 5 points are added to the score.\n- Remove the \"ab\" underlined in \"cdbcbbaaab\". Now, s = \"cdbcbbaa\" and 4 points are added to the score.\n- Remove the \"ba\" underlined in \"cdbcbbaa\". Now, s = \"cdbcba\" and 5 points are added to the score.\n- Remove the \"ba\" underlined in \"cdbcba\". Now, s = \"cdbc\" and 5 points are added to the score.\nTotal score = 5 + 4 + 5 + 5 = 19."
            },
            {
                "Input": "** s = \"aabbaaxybbaabb\", x = 5, y = 4",
                "Output": "** 20",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Construct the Lexicographically Largest Valid Sequence",
        "slug": "construct-the-lexicographically-largest-valid-sequence",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** [3,1,2,3,2]",
                "Explanation": "** [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence."
            },
            {
                "Input": "** n = 5",
                "Output": "** [5,3,1,4,3,5,2,4,2]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number Of Ways To Reconstruct A Tree",
        "slug": "number-of-ways-to-reconstruct-a-tree",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** pairs = [[1,2],[2,3]]",
                "Output": "** 1",
                "Explanation": "** There is exactly one valid rooted tree, which is shown in the above figure."
            },
            {
                "Input": "** pairs = [[1,2],[2,3],[1,3]]",
                "Output": "** 2",
                "Explanation": "** There are multiple valid rooted trees. Three of them are shown in the above figures."
            }
        ]
    },
    {
        "Title": "Decode XORed Array",
        "slug": "decode-xored-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** encoded = [1,2,3], first = 1",
                "Output": "** [1,0,2,1]",
                "Explanation": "** If arr = [1,0,2,1], then first = 1 and encoded = [1 XOR 0, 0 XOR 2, 2 XOR 1] = [1,2,3]"
            },
            {
                "Input": "** encoded = [6,2,7,3], first = 4",
                "Output": "** [4,2,0,7,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Swapping Nodes in a Linked List",
        "slug": "swapping-nodes-in-a-linked-list",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [1,2,3,4,5], k = 2",
                "Output": "** [1,4,3,2,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimize Hamming Distance After Swap Operations",
        "slug": "minimize-hamming-distance-after-swap-operations",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** source = [1,2,3,4], target = [2,1,4,5], allowedSwaps = [[0,1],[2,3]]",
                "Output": "** 1",
                "Explanation": "** source can be transformed the following way:\n- Swap indices 0 and 1: source = [2,1,3,4]\n- Swap indices 2 and 3: source = [2,1,4,3]\nThe Hamming distance of source and target is 1 as they differ in 1 position: index 3."
            },
            {
                "Input": "** source = [1,2,3,4], target = [1,3,2,4], allowedSwaps = []",
                "Output": "** 2",
                "Explanation": "** There are no allowed swaps.\nThe Hamming distance of source and target is 2 as they differ in 2 positions: index 1 and index 2."
            },
            {
                "Input": "** source = [5,1,2,4,3], target = [1,5,4,2,3], allowedSwaps = [[0,4],[4,2],[1,3],[1,4]]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Minimum Time to Finish All Jobs",
        "slug": "find-minimum-time-to-finish-all-jobs",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** jobs = [3,2,3], k = 3",
                "Output": "** 3",
                "Explanation": "** By assigning each person one job, the maximum time is 3."
            },
            {
                "Input": "** jobs = [1,2,4,7,8], k = 2",
                "Output": "** 11",
                "Explanation": "** Assign the jobs the following way:\nWorker 1: 1, 2, 8 (working time = 1 + 2 + 8 = 11)\nWorker 2: 4, 7 (working time = 4 + 7 = 11)\nThe maximum working time is 11."
            }
        ]
    },
    {
        "Title": "Number Of Rectangles That Can Form The Largest Square",
        "slug": "number-of-rectangles-that-can-form-the-largest-square",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** rectangles = [[5,8],[3,9],[5,12],[16,5]]",
                "Output": "** 3",
                "Explanation": "** The largest squares you can get from each rectangle are of lengths [5,3,5,5].\r\nThe largest possible square is of length 5, and you can get it out of 3 rectangles."
            },
            {
                "Input": "** rectangles = [[2,3],[3,7],[4,3],[3,7]]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Tuple with Same Product",
        "slug": "tuple-with-same-product",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,3,4,6]",
                "Output": "** 8",
                "Explanation": "** There are 8 valid tuples:\n(2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)\n(3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)"
            },
            {
                "Input": "** nums = [1,2,4,5,10]",
                "Output": "** 16",
                "Explanation": "** There are 16 valid tuples:\n(1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)\n(2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)\n(2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,5,4)\n(4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)"
            }
        ]
    },
    {
        "Title": "Largest Submatrix With Rearrangements",
        "slug": "largest-submatrix-with-rearrangements",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** matrix = [[0,0,1],[1,1,1],[1,0,1]]",
                "Output": "** 4",
                "Explanation": "** You can rearrange the columns as shown above.\nThe largest submatrix of 1s, in bold, has an area of 4."
            },
            {
                "Input": "** matrix = [[1,0,1,0,1]]",
                "Output": "** 3",
                "Explanation": "** You can rearrange the columns as shown above.\nThe largest submatrix of 1s, in bold, has an area of 3."
            }
        ]
    },
    {
        "Title": "Cat and Mouse II",
        "slug": "cat-and-mouse-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [\"####F\",\"#C...\",\"M....\"], catJump = 1, mouseJump = 2",
                "Output": "** true",
                "Explanation": "** Cat cannot catch Mouse on its turn nor can it get the food before Mouse."
            },
            {
                "Input": "** grid = [\"M.C...F\"], catJump = 1, mouseJump = 4",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Followers Count",
        "slug": "find-followers-count",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nFollowers table:\n+---------+-------------+\n| user_id | follower_id |\n+---------+-------------+\n| 0       | 1           |\n| 1       | 0           |\n| 2       | 0           |\n| 2       | 1           |\n+---------+-------------+",
                "Output": "** \n+---------+----------------+\n| user_id | followers_count|\n+---------+----------------+\n| 0       | 1              |\n| 1       | 1              |\n| 2       | 2              |\n+---------+----------------+",
                "Explanation": "** \nThe followers of 0 are {1}\nThe followers of 1 are {0}\nThe followers of 2 are {0,1}"
            }
        ]
    },
    {
        "Title": "The Number of Employees Which Report to Each Employee",
        "slug": "the-number-of-employees-which-report-to-each-employee",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nEmployees table:\n+-------------+---------+------------+-----+\n| employee_id | name    | reports_to | age |\n+-------------+---------+------------+-----+\n| 9           | Hercy   | null       | 43  |\n| 6           | Alice   | 9          | 41  |\n| 4           | Bob     | 9          | 36  |\n| 2           | Winston | null       | 37  |\n+-------------+---------+------------+-----+",
                "Output": "** \n+-------------+-------+---------------+-------------+\n| employee_id | name  | reports_count | average_age |\n+-------------+-------+---------------+-------------+\n| 9           | Hercy | 2             | 39          |\n+-------------+-------+---------------+-------------+",
                "Explanation": "** Hercy has 2 people report directly to him, Alice and Bob. Their average age is (41+36)/2 = 38.5, which is 39 after rounding it to the nearest integer."
            },
            {
                "Input": "** \nEmployees table:\n+-------------+---------+------------+-----+ \n| employee_id | name \u00a0 \u00a0| reports_to | age |\n|-------------|---------|------------|-----|\n| 1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | Michael | null \u00a0 \u00a0 \u00a0 | 45 \u00a0|\n| 2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | Alice \u00a0 | 1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0| 38 \u00a0|\n| 3 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | Bob \u00a0 \u00a0 | 1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0| 42 \u00a0|\n| 4 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | Charlie | 2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0| 34 \u00a0|\n| 5 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | David \u00a0 | 2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0| 40 \u00a0|\n| 6 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | Eve \u00a0 \u00a0 | 3 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0| 37 \u00a0|\n| 7 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | Frank \u00a0 | null \u00a0 \u00a0 \u00a0 | 50 \u00a0|\n| 8 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | Grace \u00a0 | null \u00a0 \u00a0 \u00a0 | 48 \u00a0|\n+-------------+---------+------------+-----+",
                "Output": "** \n+-------------+---------+---------------+-------------+\n| employee_id | name \u00a0 \u00a0| reports_count | average_age |\n| ----------- | ------- | ------------- | ----------- |\n| 1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | Michael | 2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | 40 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0|\n| 2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | Alice \u00a0 | 2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | 37 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0|\n| 3 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | Bob \u00a0 \u00a0 | 1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | 37 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0|\n+-------------+---------+---------------+-------------+",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find the Highest Altitude",
        "slug": "find-the-highest-altitude",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** gain = [-5,1,5,0,-7]",
                "Output": "** 1",
                "Explanation": "** The altitudes are [0,-5,-4,1,1,-6]. The highest is 1."
            },
            {
                "Input": "** gain = [-4,-3,-2,-1,4,3,2]",
                "Output": "** 0",
                "Explanation": "** The altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. The highest is 0."
            }
        ]
    },
    {
        "Title": "Minimum Number of People to Teach",
        "slug": "minimum-number-of-people-to-teach",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]]",
                "Output": "** 1",
                "Explanation": "** You can either teach user 1 the second language or user 2 the first language."
            },
            {
                "Input": "** n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]]",
                "Output": "** 2",
                "Explanation": "** Teach the third language to users 1 and 3, yielding two users to teach."
            }
        ]
    },
    {
        "Title": "Decode XORed Permutation",
        "slug": "decode-xored-permutation",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** encoded = [3,1]",
                "Output": "** [1,2,3]",
                "Explanation": "** If perm = [1,2,3], then encoded = [1 XOR 2,2 XOR 3] = [3,1]"
            },
            {
                "Input": "** encoded = [6,5,4,6]",
                "Output": "** [2,4,1,5,3]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count Ways to Make Array With Product",
        "slug": "count-ways-to-make-array-with-product",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** queries = [[2,6],[5,1],[73,660]]",
                "Output": "** [4,1,50734910]",
                "Explanation": "**\u00a0Each query is independent.\n[2,6]: There are 4 ways to fill an array of size 2 that multiply to 6: [1,6], [2,3], [3,2], [6,1].\n[5,1]: There is 1 way to fill an array of size 5 that multiply to 1: [1,1,1,1,1].\n[73,660]: There are 1050734917 ways to fill an array of size 73 that multiply to 660. 1050734917 modulo 109 + 7 = 50734910."
            },
            {
                "Input": "** queries = [[1,1],[2,2],[3,3],[4,4],[5,5]]",
                "Output": "** [1,2,3,10,5]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Latest Time by Replacing Hidden Digits",
        "slug": "latest-time-by-replacing-hidden-digits",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** time = \"2?:?0\"",
                "Output": "** \"23:50\"",
                "Explanation": "** The latest hour beginning with the digit '2' is 23 and the latest minute ending with the digit '0' is 50."
            },
            {
                "Input": "** time = \"0?:3?\"",
                "Output": "** \"09:39\"",
                "Explanation": null
            },
            {
                "Input": "** time = \"1?:22\"",
                "Output": "** \"19:22\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Change Minimum Characters to Satisfy One of Three Conditions",
        "slug": "change-minimum-characters-to-satisfy-one-of-three-conditions",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** a = \"aba\", b = \"caa\"",
                "Output": "** 2",
                "Explanation": "** Consider the best way to make each condition true:\n1) Change b to \"ccc\" in 2 operations, then every letter in a is less than every letter in b.\n2) Change a to \"bbb\" and b to \"aaa\" in 3 operations, then every letter in b is less than every letter in a.\n3) Change a to \"aaa\" and b to \"aaa\" in 2 operations, then a and b consist of one distinct letter.\nThe best way was done in 2 operations (either condition 1 or condition 3)."
            },
            {
                "Input": "** a = \"dabadd\", b = \"cda\"",
                "Output": "** 3",
                "Explanation": "** The best way is to make condition 1 true by changing b to \"eee\"."
            }
        ]
    },
    {
        "Title": "Find Kth Largest XOR Coordinate Value",
        "slug": "find-kth-largest-xor-coordinate-value",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** matrix = [[5,2],[1,6]], k = 1",
                "Output": "** 7",
                "Explanation": "** The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value."
            },
            {
                "Input": "** matrix = [[5,2],[1,6]], k = 2",
                "Output": "** 5",
                "Explanation": "** The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value."
            },
            {
                "Input": "** matrix = [[5,2],[1,6]], k = 3",
                "Output": "** 4",
                "Explanation": "** The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value."
            }
        ]
    },
    {
        "Title": "Building Boxes",
        "slug": "building-boxes",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** 3",
                "Explanation": "** The figure above is for the placement of the three boxes.\nThese boxes are placed in the corner of the room, where the corner is on the left side."
            },
            {
                "Input": "** n = 4",
                "Output": "** 3",
                "Explanation": "** The figure above is for the placement of the four boxes.\nThese boxes are placed in the corner of the room, where the corner is on the left side."
            },
            {
                "Input": "** n = 10",
                "Output": "** 6",
                "Explanation": "** The figure above is for the placement of the ten boxes.\nThese boxes are placed in the corner of the room, where the corner is on the back side."
            }
        ]
    },
    {
        "Title": "Find Total Time Spent by Each Employee",
        "slug": "find-total-time-spent-by-each-employee",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nEmployees table:\n+--------+------------+---------+----------+\n| emp_id | event_day  | in_time | out_time |\n+--------+------------+---------+----------+\n| 1      | 2020-11-28 | 4       | 32       |\n| 1      | 2020-11-28 | 55      | 200      |\n| 1      | 2020-12-03 | 1       | 42       |\n| 2      | 2020-11-28 | 3       | 33       |\n| 2      | 2020-12-09 | 47      | 74       |\n+--------+------------+---------+----------+",
                "Output": "** \n+------------+--------+------------+\n| day        | emp_id | total_time |\n+------------+--------+------------+\n| 2020-11-28 | 1      | 173        |\n| 2020-11-28 | 2      | 30         |\n| 2020-12-03 | 1      | 41         |\n| 2020-12-09 | 2      | 27         |\n+------------+--------+------------+",
                "Explanation": "** \nEmployee 1 has three events: two on day 2020-11-28 with a total of (32 - 4) + (200 - 55) = 173, and one on day 2020-12-03 with a total of (42 - 1) = 41.\nEmployee 2 has two events: one on day 2020-11-28 with a total of (33 - 3) = 30, and one on day 2020-12-09 with a total of (74 - 47) = 27."
            }
        ]
    },
    {
        "Title": "Maximum Number of Balls in a Box",
        "slug": "maximum-number-of-balls-in-a-box",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** lowLimit = 1, highLimit = 10",
                "Output": "** 2",
                "Explanation": "**\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count:  2 1 1 1 1 1 1 1 1 0  0  ...\nBox 1 has the most number of balls with 2 balls."
            },
            {
                "Input": "** lowLimit = 5, highLimit = 15",
                "Output": "** 2",
                "Explanation": "**\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count:  1 1 1 1 2 2 1 1 1 0  0  ...\nBoxes 5 and 6 have the most number of balls with 2 balls in each."
            },
            {
                "Input": "** lowLimit = 19, highLimit = 28",
                "Output": "** 2",
                "Explanation": "**\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 12 ...\nBall Count:  0 1 1 1 1 1 1 1 1 2  0  0  ...\nBox 10 has the most number of balls with 2 balls."
            }
        ]
    },
    {
        "Title": "Restore the Array From Adjacent Pairs",
        "slug": "restore-the-array-from-adjacent-pairs",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** adjacentPairs = [[2,1],[3,4],[3,2]]",
                "Output": "** [1,2,3,4]",
                "Explanation": "** This array has all its adjacent pairs in adjacentPairs.\nNotice that adjacentPairs[i] may not be in left-to-right order."
            },
            {
                "Input": "** adjacentPairs = [[4,-2],[1,4],[-3,1]]",
                "Output": "** [-2,4,1,-3]",
                "Explanation": "** There can be negative numbers.\nAnother solution is [-3,1,4,-2], which would also be accepted."
            },
            {
                "Input": "** adjacentPairs = [[100000,-100000]]",
                "Output": "** [100000,-100000]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Can You Eat Your Favorite Candy on Your Favorite Day?",
        "slug": "can-you-eat-your-favorite-candy-on-your-favorite-day",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]]",
                "Output": "** [true,false,true]",
                "Explanation": "**\n1- If you eat 2 candies (type 0) on day 0 and 2 candies (type 0) on day 1, you will eat a candy of type 0 on day 2.\n2- You can eat at most 4 candies each day.\n   If you eat 4 candies every day, you will eat 4 candies (type 0) on day 0 and 4 candies (type 0 and type 1) on day 1.\n   On day 2, you can only eat 4 candies (type 1 and type 2), so you cannot eat a candy of type 4 on day 2.\n3- If you eat 1 candy each day, you will eat a candy of type 2 on day 13."
            },
            {
                "Input": "** candiesCount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]",
                "Output": "** [false,true,true,false,false]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Palindrome Partitioning IV",
        "slug": "palindrome-partitioning-iv",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"abcbdd\"",
                "Output": "** true",
                "Explanation": "** \"abcbdd\" = \"a\" + \"bcb\" + \"dd\", and all three substrings are palindromes."
            },
            {
                "Input": "** s = \"bcbddxy\"",
                "Output": "** false",
                "Explanation": "** s cannot be split into 3 palindromes."
            }
        ]
    },
    {
        "Title": "Sum of Unique Elements",
        "slug": "sum-of-unique-elements",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,3,2]",
                "Output": "** 4",
                "Explanation": "** The unique elements are [1,3], and the sum is 4."
            },
            {
                "Input": "** nums = [1,1,1,1,1]",
                "Output": "** 0",
                "Explanation": "** There are no unique elements, and the sum is 0."
            },
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** 15",
                "Explanation": "** The unique elements are [1,2,3,4,5], and the sum is 15."
            }
        ]
    },
    {
        "Title": "Maximum Absolute Sum of Any Subarray",
        "slug": "maximum-absolute-sum-of-any-subarray",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,-3,2,3,-4]",
                "Output": "** 5",
                "Explanation": "** The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5."
            },
            {
                "Input": "** nums = [2,-5,1,-4,3,-2]",
                "Output": "** 8",
                "Explanation": "** The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8."
            }
        ]
    },
    {
        "Title": "Minimum Length of String After Deleting Similar Ends",
        "slug": "minimum-length-of-string-after-deleting-similar-ends",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"ca\"",
                "Output": "** 2",
                "Explanation": "** You can't remove any characters, so the string stays as is."
            },
            {
                "Input": "** s = \"cabaabac\"",
                "Output": "** 0",
                "Explanation": "** An optimal sequence of operations is:\n- Take prefix = \"c\" and suffix = \"c\" and remove them, s = \"abaaba\".\n- Take prefix = \"a\" and suffix = \"a\" and remove them, s = \"baab\".\n- Take prefix = \"b\" and suffix = \"b\" and remove them, s = \"aa\".\n- Take prefix = \"a\" and suffix = \"a\" and remove them, s = \"\"."
            },
            {
                "Input": "** s = \"aabccabba\"",
                "Output": "** 3",
                "Explanation": "** An optimal sequence of operations is:\n- Take prefix = \"aa\" and suffix = \"a\" and remove them, s = \"bccabb\".\n- Take prefix = \"b\" and suffix = \"bb\" and remove them, s = \"cca\"."
            }
        ]
    },
    {
        "Title": "Maximum Number of Events That Can Be Attended II",
        "slug": "maximum-number-of-events-that-can-be-attended-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** events = [[1,2,4],[3,4,3],[2,3,1]], k = 2",
                "Output": "** 7",
                "Explanation": "** Choose the green events, 0 and 1 (0-indexed) for a total value of 4 + 3 = 7."
            },
            {
                "Input": "** events = [[1,2,4],[3,4,3],[2,3,10]], k = 2",
                "Output": "** 10",
                "Explanation": "** Choose event 2 for a total value of 10.\nNotice that you cannot attend any other event as they overlap, and that you do **not** have to attend k events."
            }
        ]
    },
    {
        "Title": "Check if Array Is Sorted and Rotated",
        "slug": "check-if-array-is-sorted-and-rotated",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [3,4,5,1,2]",
                "Output": "** true",
                "Explanation": "** [1,2,3,4,5] is the original sorted array.\nYou can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2]."
            },
            {
                "Input": "** nums = [2,1,3,4]",
                "Output": "** false",
                "Explanation": "** There is no sorted array once rotated that can make nums."
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** true",
                "Explanation": "** [1,2,3] is the original sorted array.\nYou can rotate the array by x = 0 positions (i.e. no rotation) to make nums."
            }
        ]
    },
    {
        "Title": "Maximum Score From Removing Stones",
        "slug": "maximum-score-from-removing-stones",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** a = 2, b = 4, c = 6",
                "Output": "** 6",
                "Explanation": "** The starting state is (2, 4, 6). One optimal set of moves is:\n- Take from 1st and 3rd piles, state is now (1, 4, 5)\n- Take from 1st and 3rd piles, state is now (0, 4, 4)\n- Take from 2nd and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 6 points."
            },
            {
                "Input": "** a = 4, b = 4, c = 6",
                "Output": "** 7",
                "Explanation": "** The starting state is (4, 4, 6). One optimal set of moves is:\n- Take from 1st and 2nd piles, state is now (3, 3, 6)\n- Take from 1st and 3rd piles, state is now (2, 3, 5)\n- Take from 1st and 3rd piles, state is now (1, 3, 4)\n- Take from 1st and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 7 points."
            },
            {
                "Input": "** a = 1, b = 8, c = 8",
                "Output": "** 8",
                "Explanation": "** One optimal set of moves is to take from the 2nd and 3rd piles for 8 turns until they are empty.\nAfter that, there are fewer than two non-empty piles, so the game ends."
            }
        ]
    },
    {
        "Title": "Largest Merge Of Two Strings",
        "slug": "largest-merge-of-two-strings",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** word1 = \"cabaa\", word2 = \"bcaaa\"",
                "Output": "** \"cbcabaaaaa\"",
                "Explanation": "** One way to get the lexicographically largest merge is:\n- Take from word1: merge = \"c\", word1 = \"abaa\", word2 = \"bcaaa\"\n- Take from word2: merge = \"cb\", word1 = \"abaa\", word2 = \"caaa\"\n- Take from word2: merge = \"cbc\", word1 = \"abaa\", word2 = \"aaa\"\n- Take from word1: merge = \"cbca\", word1 = \"baa\", word2 = \"aaa\"\n- Take from word1: merge = \"cbcab\", word1 = \"aa\", word2 = \"aaa\"\n- Append the remaining 5 a's from word1 and word2 at the end of merge."
            },
            {
                "Input": "** word1 = \"abcabc\", word2 = \"abdcaba\"",
                "Output": "** \"abdcabcabcaba\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Closest Subsequence Sum",
        "slug": "closest-subsequence-sum",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [5,-7,3,5], goal = 6",
                "Output": "** 0",
                "Explanation": "** Choose the whole array as a subsequence, with a sum of 6.\nThis is equal to the goal, so the absolute difference is 0."
            },
            {
                "Input": "** nums = [7,-9,15,-2], goal = -5",
                "Output": "** 1",
                "Explanation": "** Choose the subsequence [7,-9,-2], with a sum of -4.\nThe absolute difference is abs(-4 - (-5)) = abs(1) = 1, which is the minimum."
            },
            {
                "Input": "** nums = [1,2,3], goal = -7",
                "Output": "** 7",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Recyclable and Low Fat Products",
        "slug": "recyclable-and-low-fat-products",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nProducts table:\n+-------------+----------+------------+\n| product_id  | low_fats | recyclable |\n+-------------+----------+------------+\n| 0           | Y        | N          |\n| 1           | Y        | Y          |\n| 2           | N        | Y          |\n| 3           | Y        | Y          |\n| 4           | N        | N          |\n+-------------+----------+------------+",
                "Output": "** \n+-------------+\n| product_id  |\n+-------------+\n| 1           |\n| 3           |\n+-------------+",
                "Explanation": "** Only products 1 and 3 are both low fat and recyclable."
            }
        ]
    },
    {
        "Title": "Minimum Changes To Make Alternating Binary String",
        "slug": "minimum-changes-to-make-alternating-binary-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"0100\"",
                "Output": "** 1",
                "Explanation": "** If you change the last character to '1', s will be \"0101\", which is alternating."
            },
            {
                "Input": "** s = \"10\"",
                "Output": "** 0",
                "Explanation": "** s is already alternating."
            },
            {
                "Input": "** s = \"1111\"",
                "Output": "** 2",
                "Explanation": "** You need two operations to reach \"0101\" or \"1010\"."
            }
        ]
    },
    {
        "Title": "Count Number of Homogenous Substrings",
        "slug": "count-number-of-homogenous-substrings",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"abbcccaa\"",
                "Output": "** 13",
                "Explanation": "** The homogenous substrings are listed as below:\n\"a\"   appears 3 times.\n\"aa\"  appears 1 time.\n\"b\"   appears 2 times.\n\"bb\"  appears 1 time.\n\"c\"   appears 3 times.\n\"cc\"  appears 2 times.\n\"ccc\" appears 1 time.\n3 + 1 + 2 + 1 + 3 + 2 + 1 = 13."
            },
            {
                "Input": "** s = \"xy\"",
                "Output": "** 2",
                "Explanation": "** The homogenous substrings are \"x\" and \"y\"."
            },
            {
                "Input": "** s = \"zzzzz\"",
                "Output": "** 15",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Limit of Balls in a Bag",
        "slug": "minimum-limit-of-balls-in-a-bag",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [9], maxOperations = 2",
                "Output": "** 3",
                "Explanation": "** \n- Divide the bag with 9 balls into two bags of sizes 6 and 3. [**9**] -> [6,3].\n- Divide the bag with 6 balls into two bags of sizes 3 and 3. [**6**,3] -> [3,3,3].\nThe bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3."
            },
            {
                "Input": "** nums = [2,4,8,2], maxOperations = 4",
                "Output": "** 2",
                "Explanation": "**\n- Divide the bag with 8 balls into two bags of sizes 4 and 4. [2,4,**8**,2] -> [2,4,4,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,**4**,4,4,2] -> [2,2,2,4,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,**4**,4,2] -> [2,2,2,2,2,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,2,2,**4**,2] -> [2,2,2,2,2,2,2,2].\nThe bag with the most number of balls has 2 balls, so your penalty is 2, and you should return 2."
            }
        ]
    },
    {
        "Title": "Minimum Degree of a Connected Trio in a Graph",
        "slug": "minimum-degree-of-a-connected-trio-in-a-graph",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]",
                "Output": "** 3",
                "Explanation": "** There is exactly one trio, which is [1,2,3]. The edges that form its degree are bolded in the figure above."
            },
            {
                "Input": "** n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]",
                "Output": "** 0",
                "Explanation": "** There are exactly three trios:\n1) [1,4,3] with degree 0.\n2) [2,5,6] with degree 2.\n3) [5,6,7] with degree 2."
            }
        ]
    },
    {
        "Title": "Longest Nice Substring",
        "slug": "longest-nice-substring",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"YazaAay\"",
                "Output": "** \"aAa\"",
                "Explanation": "** \"aAa\" is a nice string because 'A/a' is the only letter of the alphabet in s, and both 'A' and 'a' appear.\n\"aAa\" is the longest nice substring."
            },
            {
                "Input": "** s = \"Bb\"",
                "Output": "** \"Bb\"",
                "Explanation": "** \"Bb\" is a nice string because both 'B' and 'b' appear. The whole string is a substring."
            },
            {
                "Input": "** s = \"c\"",
                "Output": "** \"\"",
                "Explanation": "** There are no nice substrings."
            }
        ]
    },
    {
        "Title": "Form Array by Concatenating Subarrays of Another Array",
        "slug": "form-array-by-concatenating-subarrays-of-another-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0]",
                "Output": "** true",
                "Explanation": "** You can choose the 0th subarray as [1,-1,0,**1,-1,-1**,3,-2,0] and the 1st one as [1,-1,0,1,-1,-1,**3,-2,0**].\nThese subarrays are disjoint as they share no common nums[k] element."
            },
            {
                "Input": "** groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2]",
                "Output": "** false",
                "Explanation": "** Note that choosing the subarrays [**1,2,3,4**,10,-2] and [1,2,3,4,**10,-2**] is incorrect because they are not in the same order as in groups.\n[10,-2] must come before [1,2,3,4]."
            },
            {
                "Input": "** groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7]",
                "Output": "** false",
                "Explanation": "** Note that choosing the subarrays [7,7,**1,2,3**,4,7,7] and [7,7,1,2,**3,4**,7,7] is invalid because they are not disjoint.\nThey share a common elements nums[4] (0-indexed)."
            }
        ]
    },
    {
        "Title": "Tree of Coprimes",
        "slug": "tree-of-coprimes",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]",
                "Output": "** [-1,0,-1,0,0,0,-1]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Merge Strings Alternately",
        "slug": "merge-strings-alternately",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** word1 = \"abc\", word2 = \"pqr\"",
                "Output": "** \"apbqcr\"",
                "Explanation": "**\u00a0The merged string will be merged as so:\r\nword1:  a   b   c\r\nword2:    p   q   r\r\nmerged: a p b q c r"
            },
            {
                "Input": "** word1 = \"ab\", word2 = \"pqrs\"",
                "Output": "** \"apbqrs\"",
                "Explanation": "**\u00a0Notice that as word2 is longer, \"rs\" is appended to the end.\r\nword1:  a   b \r\nword2:    p   q   r   s\r\nmerged: a p b q   r   s"
            },
            {
                "Input": "** word1 = \"abcd\", word2 = \"pq\"",
                "Output": "** \"apbqcd\"",
                "Explanation": "**\u00a0Notice that as word1 is longer, \"cd\" is appended to the end.\r\nword1:  a   b   c   d\r\nword2:    p   q \r\nmerged: a p b q c   d"
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Move All Balls to Each Box",
        "slug": "minimum-number-of-operations-to-move-all-balls-to-each-box",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** boxes = \"110\"",
                "Output": "** [1,1,3]",
                "Explanation": "** The answer for each box is as follows:\n1) First box: you will have to move one ball from the second box to the first box in one operation.\n2) Second box: you will have to move one ball from the first box to the second box in one operation.\n3) Third box: you will have to move one ball from the first box to the third box in two operations, and move one ball from the second box to the third box in one operation."
            },
            {
                "Input": "** boxes = \"001011\"",
                "Output": "** [11,8,5,4,3,4]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Score from Performing Multiplication Operations",
        "slug": "maximum-score-from-performing-multiplication-operations",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,3], multipliers = [3,2,1]",
                "Output": "** 14",
                "Explanation": "**\u00a0An optimal solution is as follows:\n- Choose from the end, [1,2,**3**], adding 3 * 3 = 9 to the score.\n- Choose from the end, [1,**2**], adding 2 * 2 = 4 to the score.\n- Choose from the end, [**1**], adding 1 * 1 = 1 to the score.\nThe total score is 9 + 4 + 1 = 14."
            },
            {
                "Input": "** nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]",
                "Output": "** 102",
                "Explanation": "** An optimal solution is as follows:\n- Choose from the start, [**-5**,-3,-3,-2,7,1], adding -5 * -10 = 50 to the score.\n- Choose from the start, [**-3**,-3,-2,7,1], adding -3 * -5 = 15 to the score.\n- Choose from the start, [**-3**,-2,7,1], adding -3 * 3 = -9 to the score.\n- Choose from the end, [-2,7,**1**], adding 1 * 4 = 4 to the score.\n- Choose from the end, [-2,**7**], adding 7 * 6 = 42 to the score. \nThe total score is 50 + 15 - 9 + 4 + 42 = 102."
            }
        ]
    },
    {
        "Title": "Maximize Palindrome Length From Subsequences",
        "slug": "maximize-palindrome-length-from-subsequences",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** word1 = \"cacb\", word2 = \"cbba\"",
                "Output": "** 5",
                "Explanation": "** Choose \"ab\" from word1 and \"cba\" from word2 to make \"abcba\", which is a palindrome."
            },
            {
                "Input": "** word1 = \"ab\", word2 = \"ab\"",
                "Output": "** 3",
                "Explanation": "** Choose \"ab\" from word1 and \"a\" from word2 to make \"aba\", which is a palindrome."
            },
            {
                "Input": "** word1 = \"aa\", word2 = \"bb\"",
                "Output": "** 0",
                "Explanation": "** You cannot construct a palindrome from the described method, so return 0."
            }
        ]
    },
    {
        "Title": "Count Items Matching a Rule",
        "slug": "count-items-matching-a-rule",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"lenovo\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"color\", ruleValue = \"silver\"",
                "Output": "** 1",
                "Explanation": "** There is only one item matching the given rule, which is [\"computer\",\"silver\",\"lenovo\"]."
            },
            {
                "Input": "** items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"phone\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"type\", ruleValue = \"phone\"",
                "Output": "** 2",
                "Explanation": "** There are only two items matching the given rule, which are [\"phone\",\"blue\",\"pixel\"] and [\"phone\",\"gold\",\"iphone\"]. Note that the item [\"computer\",\"silver\",\"phone\"] does not match."
            }
        ]
    },
    {
        "Title": "Closest Dessert Cost",
        "slug": "closest-dessert-cost",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** baseCosts = [1,7], toppingCosts = [3,4], target = 10",
                "Output": "** 10",
                "Explanation": "** Consider the following combination (all 0-indexed):\n- Choose base 1: cost 7\n- Take 1 of topping 0: cost 1 x 3 = 3\n- Take 0 of topping 1: cost 0 x 4 = 0\nTotal: 7 + 3 + 0 = 10."
            },
            {
                "Input": "** baseCosts = [2,3], toppingCosts = [4,5,100], target = 18",
                "Output": "** 17",
                "Explanation": "** Consider the following combination (all 0-indexed):\n- Choose base 1: cost 3\n- Take 1 of topping 0: cost 1 x 4 = 4\n- Take 2 of topping 1: cost 2 x 5 = 10\n- Take 0 of topping 2: cost 0 x 100 = 0\nTotal: 3 + 4 + 10 + 0 = 17. You cannot make a dessert with a total cost of 18."
            },
            {
                "Input": "** baseCosts = [3,10], toppingCosts = [2,5], target = 9",
                "Output": "** 8",
                "Explanation": "** It is possible to make desserts with cost 8 and 10. Return 8 as it is the lower cost."
            }
        ]
    },
    {
        "Title": "Equal Sum Arrays With Minimum Number of Operations",
        "slug": "equal-sum-arrays-with-minimum-number-of-operations",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]",
                "Output": "** 3",
                "Explanation": "** You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed.\n- Change nums2[0] to 6. nums1 = [1,2,3,4,5,6], nums2 = [**6**,1,2,2,2,2].\n- Change nums1[5] to 1. nums1 = [1,2,3,4,5,**1**], nums2 = [6,1,2,2,2,2].\n- Change nums1[2] to 2. nums1 = [1,2,**2**,4,5,1], nums2 = [6,1,2,2,2,2]."
            },
            {
                "Input": "** nums1 = [1,1,1,1,1,1,1], nums2 = [6]",
                "Output": "** -1",
                "Explanation": "** There is no way to decrease the sum of nums1 or to increase the sum of nums2 to make them equal."
            },
            {
                "Input": "** nums1 = [6,6], nums2 = [1]",
                "Output": "** 3",
                "Explanation": "** You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed. \n- Change nums1[0] to 2. nums1 = [**2**,6], nums2 = [1].\n- Change nums1[1] to 2. nums1 = [2,**2**], nums2 = [1].\n- Change nums2[0] to 4. nums1 = [2,2], nums2 = [**4**]."
            }
        ]
    },
    {
        "Title": "Car Fleet II",
        "slug": "car-fleet-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** cars = [[1,2],[2,1],[4,3],[7,2]]",
                "Output": "** [1.00000,-1.00000,3.00000,-1.00000]",
                "Explanation": "** After exactly one second, the first car will collide with the second car, and form a car fleet with speed 1 m/s. After exactly 3 seconds, the third car will collide with the fourth car, and form a car fleet with speed 2 m/s."
            },
            {
                "Input": "** cars = [[3,4],[5,4],[6,3],[9,1]]",
                "Output": "** [2.00000,1.00000,1.50000,-1.00000]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Find Nearest Point That Has the Same X or Y Coordinate",
        "slug": "find-nearest-point-that-has-the-same-x-or-y-coordinate",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]",
                "Output": "** 2",
                "Explanation": "** Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2."
            },
            {
                "Input": "** x = 3, y = 4, points = [[3,4]]",
                "Output": "** 0",
                "Explanation": "** The answer is allowed to be on the same location as your current location."
            },
            {
                "Input": "** x = 3, y = 4, points = [[2,3]]",
                "Output": "** -1",
                "Explanation": "** There are no valid points."
            }
        ]
    },
    {
        "Title": "Check if Number is a Sum of Powers of Three",
        "slug": "check-if-number-is-a-sum-of-powers-of-three",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 12",
                "Output": "** true",
                "Explanation": "** 12 = 31 + 32"
            },
            {
                "Input": "** n = 91",
                "Output": "** true",
                "Explanation": "** 91 = 30 + 32 + 34"
            },
            {
                "Input": "** n = 21",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sum of Beauty of All Substrings",
        "slug": "sum-of-beauty-of-all-substrings",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"aabcb\"",
                "Output": "** 5",
                "Explanation": "** The substrings with non-zero beauty are [\"aab\",\"aabc\",\"aabcb\",\"abcb\",\"bcb\"], each with beauty equal to 1."
            },
            {
                "Input": "** s = \"aabcbaa\"",
                "Output": "** 17",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count Pairs Of Nodes",
        "slug": "count-pairs-of-nodes",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3]",
                "Output": "** [6,5]",
                "Explanation": "** The calculations for incident(a, b) are shown in the table above.\nThe answers for each of the queries are as follows:\n- answers[0] = 6. All the pairs have an incident(a, b) value greater than 2.\n- answers[1] = 5. All the pairs except (3, 4) have an incident(a, b) value greater than 3."
            }
        ]
    },
    {
        "Title": "Check if Binary String Has at Most One Segment of Ones",
        "slug": "check-if-binary-string-has-at-most-one-segment-of-ones",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"1001\"",
                "Output": "** false",
                "Explanation": "** The ones do not form a contiguous segment."
            },
            {
                "Input": "** s = \"110\"",
                "Output": "** true",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Elements to Add to Form a Given Sum",
        "slug": "minimum-elements-to-add-to-form-a-given-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,-1,1], limit = 3, goal = -4",
                "Output": "** 2",
                "Explanation": "** You can add -2 and -3, then the sum of the array will be 1 - 1 + 1 - 2 - 3 = -4."
            },
            {
                "Input": "** nums = [1,-10,9,1], limit = 100, goal = 0",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Number of Restricted Paths From First to Last Node",
        "slug": "number-of-restricted-paths-from-first-to-last-node",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]",
                "Output": "** 3",
                "Explanation": "** Each circle contains the node number in black and its distanceToLastNode value in blue. The three restricted paths are:\n1) 1 --> 2 --> 5\n2) 1 --> 2 --> 3 --> 5\n3) 1 --> 3 --> 5"
            },
            {
                "Input": "** n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]]",
                "Output": "** 1",
                "Explanation": "** Each circle contains the node number in black and its distanceToLastNode value in blue. The only restricted path is 1 --> 3 --> 7."
            }
        ]
    },
    {
        "Title": "Make the XOR of All Segments Equal to Zero",
        "slug": "make-the-xor-of-all-segments-equal-to-zero",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,0,3,0], k = 1",
                "Output": "** 3",
                "Explanation": "** Modify the array from [**1**,**2**,0,**3**,0] to from [**0**,**0**,0,**0**,0]."
            },
            {
                "Input": "** nums = [3,4,5,2,1,7,3,4,7], k = 3",
                "Output": "** 3",
                "Explanation": "** Modify the array from [3,4,**5**,**2**,**1**,7,3,4,7] to [3,4,**7**,**3**,**4**,7,3,4,7]."
            },
            {
                "Input": "** nums = [1,2,4,1,2,5,1,2,6], k = 3",
                "Output": "** 3",
                "Explanation": "** Modify the array from [1,2,**4,**1,2,**5**,1,2,**6**] to [1,2,**3**,1,2,**3**,1,2,**3**]."
            }
        ]
    },
    {
        "Title": "Primary Department for Each Employee",
        "slug": "primary-department-for-each-employee",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nEmployee table:\n+-------------+---------------+--------------+\n| employee_id | department_id | primary_flag |\n+-------------+---------------+--------------+\n| 1           | 1             | N            |\n| 2           | 1             | Y            |\n| 2           | 2             | N            |\n| 3           | 3             | N            |\n| 4           | 2             | N            |\n| 4           | 3             | Y            |\n| 4           | 4             | N            |\n+-------------+---------------+--------------+",
                "Output": "** \n+-------------+---------------+\n| employee_id | department_id |\n+-------------+---------------+\n| 1           | 1             |\n| 2           | 1             |\n| 3           | 3             |\n| 4           | 3             |\n+-------------+---------------+",
                "Explanation": "** \n- The Primary department for employee 1 is 1.\n- The Primary department for employee 2 is 1.\n- The Primary department for employee 3 is 3.\n- The Primary department for employee 4 is 3."
            }
        ]
    },
    {
        "Title": "Check if One String Swap Can Make Strings Equal",
        "slug": "check-if-one-string-swap-can-make-strings-equal",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s1 = \"bank\", s2 = \"kanb\"",
                "Output": "** true",
                "Explanation": "** For example, swap the first character with the last character of s2 to make \"bank\"."
            },
            {
                "Input": "** s1 = \"attack\", s2 = \"defend\"",
                "Output": "** false",
                "Explanation": "** It is impossible to make them equal with one string swap."
            },
            {
                "Input": "** s1 = \"kelb\", s2 = \"kelb\"",
                "Output": "** true",
                "Explanation": "** The two strings are already equal, so no string swap operation is required."
            }
        ]
    },
    {
        "Title": "Find Center of Star Graph",
        "slug": "find-center-of-star-graph",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** edges = [[1,2],[2,3],[4,2]]",
                "Output": "** 2",
                "Explanation": "** As shown in the figure above, node 2 is connected to every other node, so 2 is the center."
            }
        ]
    },
    {
        "Title": "Maximum Average Pass Ratio",
        "slug": "maximum-average-pass-ratio",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** classes = [[1,2],[3,5],[2,2]], extraStudents = 2",
                "Output": "** 0.78333",
                "Explanation": "** You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333."
            },
            {
                "Input": "** classes = [[2,4],[3,9],[4,5],[2,10]], extraStudents = 4",
                "Output": "** 0.53485",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Score of a Good Subarray",
        "slug": "maximum-score-of-a-good-subarray",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,4,3,7,4,5], k = 3",
                "Output": "** 15",
                "Explanation": "** The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15."
            },
            {
                "Input": "** nums = [5,5,4,5,4,1,1,1], k = 0",
                "Output": "** 20",
                "Explanation": "** The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20."
            }
        ]
    },
    {
        "Title": "Rearrange Products Table",
        "slug": "rearrange-products-table",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nProducts table:\n+------------+--------+--------+--------+\n| product_id | store1 | store2 | store3 |\n+------------+--------+--------+--------+\n| 0          | 95     | 100    | 105    |\n| 1          | 70     | null   | 80     |\n+------------+--------+--------+--------+",
                "Output": "** \n+------------+--------+-------+\n| product_id | store  | price |\n+------------+--------+-------+\n| 0          | store1 | 95    |\n| 0          | store2 | 100   |\n| 0          | store3 | 105   |\n| 1          | store1 | 70    |\n| 1          | store3 | 80    |\n+------------+--------+-------+",
                "Explanation": "** \nProduct 0 is available in all three stores with prices 95, 100, and 105 respectively.\nProduct 1 is available in store1 with price 70 and store3 with price 80. The product is not available in store2."
            }
        ]
    },
    {
        "Title": "Second Largest Digit in a String",
        "slug": "second-largest-digit-in-a-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"dfa12321afd\"",
                "Output": "** 2",
                "Explanation": "** The digits that appear in s are [1, 2, 3]. The second largest digit is 2."
            },
            {
                "Input": "** s = \"abc1111\"",
                "Output": "** -1",
                "Explanation": "** The digits that appear in s are [1]. There is no second largest digit."
            }
        ]
    },
    {
        "Title": "Design Authentication Manager",
        "slug": "design-authentication-manager",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"AuthenticationManager\", \"renew\", \"generate\", \"countUnexpiredTokens\", \"generate\", \"renew\", \"renew\", \"countUnexpiredTokens\"]\n[[5], [\"aaa\", 1], [\"aaa\", 2], [6], [\"bbb\", 7], [\"aaa\", 8], [\"bbb\", 10], [15]]",
                "Output": "[null, null, null, 1, null, null, null, 0]",
                "Explanation": "AuthenticationManager authenticationManager = new AuthenticationManager(5); // Constructs the AuthenticationManager with timeToLive = 5 seconds.\nauthenticationManager.renew(\"aaa\", 1); // No token exists with tokenId \"aaa\" at time 1, so nothing happens.\nauthenticationManager.generate(\"aaa\", 2); // Generates a new token with tokenId \"aaa\" at time 2.\nauthenticationManager.countUnexpiredTokens(6); // The token with tokenId \"aaa\" is the only unexpired one at time 6, so return 1.\nauthenticationManager.generate(\"bbb\", 7); // Generates a new token with tokenId \"bbb\" at time 7.\nauthenticationManager.renew(\"aaa\", 8); // The token with tokenId \"aaa\" expired at time 7, and 8 >= 7, so at time 8 the renew request is ignored, and nothing happens.\nauthenticationManager.renew(\"bbb\", 10); // The token with tokenId \"bbb\" is unexpired at time 10, so the renew request is fulfilled and now the token will expire at time 15.\nauthenticationManager.countUnexpiredTokens(15); // The token with tokenId \"bbb\" expires at time 15, and the token with tokenId \"aaa\" expired at time 7, so currently no token is unexpired, so return 0."
            }
        ]
    },
    {
        "Title": "Maximum Number of Consecutive Values You Can Make",
        "slug": "maximum-number-of-consecutive-values-you-can-make",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** coins = [1,3]",
                "Output": "** 2",
                "Explanation": "** You can make the following values:\n- 0: take []\n- 1: take [1]\nYou can make 2 consecutive integer values starting from 0."
            },
            {
                "Input": "** coins = [1,1,1,4]",
                "Output": "** 8",
                "Explanation": "** You can make the following values:\n- 0: take []\n- 1: take [1]\n- 2: take [1,1]\n- 3: take [1,1,1]\n- 4: take [4]\n- 5: take [4,1]\n- 6: take [4,1,1]\n- 7: take [4,1,1,1]\nYou can make 8 consecutive integer values starting from 0."
            },
            {
                "Input": "** nums = [1,4,10,3,1]",
                "Output": "** 20",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximize Score After N Operations",
        "slug": "maximize-score-after-n-operations",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2]",
                "Output": "** 1",
                "Explanation": "**\u00a0The optimal choice of operations is:\n(1 * gcd(1, 2)) = 1"
            },
            {
                "Input": "** nums = [3,4,6,8]",
                "Output": "** 11",
                "Explanation": "**\u00a0The optimal choice of operations is:\n(1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11"
            },
            {
                "Input": "** nums = [1,2,3,4,5,6]",
                "Output": "** 14",
                "Explanation": "**\u00a0The optimal choice of operations is:\n(1 * gcd(1, 5)) + (2 * gcd(2, 4)) + (3 * gcd(3, 6)) = 1 + 4 + 9 = 14"
            }
        ]
    },
    {
        "Title": "Maximum Ascending Subarray Sum",
        "slug": "maximum-ascending-subarray-sum",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [10,20,30,5,10,50]",
                "Output": "** 65",
                "Explanation": "** [5,10,50] is the ascending subarray with the maximum sum of 65."
            },
            {
                "Input": "** nums = [10,20,30,40,50]",
                "Output": "** 150",
                "Explanation": "** [10,20,30,40,50] is the ascending subarray with the maximum sum of 150."
            },
            {
                "Input": "** nums = [12,17,15,13,10,11,12]",
                "Output": "** 33",
                "Explanation": "** [10,11,12] is the ascending subarray with the maximum sum of 33."
            }
        ]
    },
    {
        "Title": "Number of Orders in the Backlog",
        "slug": "number-of-orders-in-the-backlog",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]",
                "Output": "** 6",
                "Explanation": "** Here is what happens with the orders:\r\n- 5 orders of type buy with price 10 are placed. There are no sell orders, so the 5 orders are added to the backlog.\r\n- 2 orders of type sell with price 15 are placed. There are no buy orders with prices larger than or equal to 15, so the 2 orders are added to the backlog.\r\n- 1 order of type sell with price 25 is placed. There are no buy orders with prices larger than or equal to 25 in the backlog, so this order is added to the backlog.\r\n- 4 orders of type buy with price 30 are placed. The first 2 orders are matched with the 2 sell orders of the least price, which is 15 and these 2 sell orders are removed from the backlog. The 3rd order is matched with the sell order of the least price, which is 25 and this sell order is removed from the backlog. Then, there are no more sell orders in the backlog, so the 4th order is added to the backlog.\r\nFinally, the backlog has 5 buy orders with price 10, and 1 buy order with price 30. So the total number of orders in the backlog is 6."
            },
            {
                "Input": "** orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]",
                "Output": "** 999999984",
                "Explanation": "** Here is what happens with the orders:\r\n- 109 orders of type sell with price 7 are placed. There are no buy orders, so the 109 orders are added to the backlog.\r\n- 3 orders of type buy with price 15 are placed. They are matched with the 3 sell orders with the least price which is 7, and those 3 sell orders are removed from the backlog.\r\n- 999999995 orders of type buy with price 5 are placed. The least price of a sell order is 7, so the 999999995 orders are added to the backlog.\r\n- 1 order of type sell with price 5 is placed. It is matched with the buy order of the highest price, which is 5, and that buy order is removed from the backlog.\r\nFinally, the backlog has (1000000000-3) sell orders with price 7, and (999999995-1) buy orders with price 5. So the total number of orders = 1999999991, which is equal to 999999984 % (109 + 7)."
            }
        ]
    },
    {
        "Title": "Maximum Value at a Given Index in a Bounded Array",
        "slug": "maximum-value-at-a-given-index-in-a-bounded-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 4, index = 2,  maxSum = 6",
                "Output": "** 2",
                "Explanation": "** nums = [1,2,**2**,1] is one array that satisfies all the conditions.\nThere are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2]."
            },
            {
                "Input": "** n = 6, index = 1,  maxSum = 10",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Count Pairs With XOR in a Range",
        "slug": "count-pairs-with-xor-in-a-range",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,4,2,7], low = 2, high = 6",
                "Output": "** 6",
                "Explanation": "** All nice pairs (i, j) are as follows:\r\n    - (0, 1): nums[0] XOR nums[1] = 5 \r\n    - (0, 2): nums[0] XOR nums[2] = 3\r\n    - (0, 3): nums[0] XOR nums[3] = 6\r\n    - (1, 2): nums[1] XOR nums[2] = 6\r\n    - (1, 3): nums[1] XOR nums[3] = 3\r\n    - (2, 3): nums[2] XOR nums[3] = 5"
            },
            {
                "Input": "** nums = [9,8,4,2,1], low = 5, high = 14",
                "Output": "** 8",
                "Explanation": "** All nice pairs (i, j) are as follows:\r\n\u200b\u200b\u200b\u200b\u200b    - (0, 2): nums[0] XOR nums[2] = 13\r\n\u00a0   - (0, 3): nums[0] XOR nums[3] = 11\r\n\u00a0   - (0, 4): nums[0] XOR nums[4] = 8\r\n\u00a0   - (1, 2): nums[1] XOR nums[2] = 12\r\n\u00a0   - (1, 3): nums[1] XOR nums[3] = 10\r\n\u00a0   - (1, 4): nums[1] XOR nums[4] = 9\r\n\u00a0   - (2, 3): nums[2] XOR nums[3] = 6\r\n\u00a0   - (2, 4): nums[2] XOR nums[4] = 5"
            }
        ]
    },
    {
        "Title": "Number of Different Integers in a String",
        "slug": "number-of-different-integers-in-a-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** word = \"a123bc34d8ef34\"",
                "Output": "** 3",
                "Explanation": "** The three different integers are \"123\", \"34\", and \"8\". Notice that \"34\" is only counted once."
            },
            {
                "Input": "** word = \"leet1234code234\"",
                "Output": "** 2",
                "Explanation": null
            },
            {
                "Input": "** word = \"a1b01c001\"",
                "Output": "** 1",
                "Explanation": "** The three integers \"1\", \"01\", and \"001\" all represent the same integer because\nthe leading zeros are ignored when comparing their decimal values."
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Reinitialize a Permutation",
        "slug": "minimum-number-of-operations-to-reinitialize-a-permutation",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** 1",
                "Explanation": "** perm = [0,1] initially.\nAfter the 1st operation, perm = [0,1]\nSo it takes only 1 operation."
            },
            {
                "Input": "** n = 4",
                "Output": "** 2",
                "Explanation": "** perm = [0,1,2,3] initially.\nAfter the 1st operation, perm = [0,2,1,3]\nAfter the 2nd operation, perm = [0,1,2,3]\nSo it takes only 2 operations."
            },
            {
                "Input": "** n = 6",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Evaluate the Bracket Pairs of a String",
        "slug": "evaluate-the-bracket-pairs-of-a-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"(name)is(age)yearsold\", knowledge = [[\"name\",\"bob\"],[\"age\",\"two\"]]",
                "Output": "** \"bobistwoyearsold\"",
                "Explanation": "**\nThe key \"name\" has a value of \"bob\", so replace \"(name)\" with \"bob\".\nThe key \"age\" has a value of \"two\", so replace \"(age)\" with \"two\"."
            },
            {
                "Input": "** s = \"hi(name)\", knowledge = [[\"a\",\"b\"]]",
                "Output": "** \"hi?\"",
                "Explanation": "** As you do not know the value of the key \"name\", replace \"(name)\" with \"?\"."
            },
            {
                "Input": "** s = \"(a)(a)(a)aaa\", knowledge = [[\"a\",\"yes\"]]",
                "Output": "** \"yesyesyesaaa\"",
                "Explanation": "** The same key can appear multiple times.\nThe key \"a\" has a value of \"yes\", so replace all occurrences of \"(a)\" with \"yes\".\nNotice that the \"a\"s not in a bracket pair are not evaluated."
            }
        ]
    },
    {
        "Title": "Maximize Number of Nice Divisors",
        "slug": "maximize-number-of-nice-divisors",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** primeFactors = 5",
                "Output": "** 6",
                "Explanation": "** 200 is a valid value of n.\r\nIt has 5 prime factors: [2,2,2,5,5], and it has 6 nice divisors: [10,20,40,50,100,200].\r\nThere is not other value of n that has at most 5 prime factors and more nice divisors."
            },
            {
                "Input": "** primeFactors = 8",
                "Output": "** 18",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Determine Color of a Chessboard Square",
        "slug": "determine-color-of-a-chessboard-square",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** coordinates = \"a1\"",
                "Output": "** false",
                "Explanation": "** From the chessboard above, the square with coordinates \"a1\" is black, so return false."
            },
            {
                "Input": "** coordinates = \"h3\"",
                "Output": "** true",
                "Explanation": "** From the chessboard above, the square with coordinates \"h3\" is white, so return true."
            },
            {
                "Input": "** coordinates = \"c7\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sentence Similarity III",
        "slug": "sentence-similarity-iii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** sentence1 = \"My name is Haley\", sentence2 = \"My Haley\"",
                "Output": "** true",
                "Explanation": "** sentence2 can be turned to sentence1 by inserting \"name is\" between \"My\" and \"Haley\"."
            },
            {
                "Input": "** sentence1 = \"of\", sentence2 = \"A lot of words\"",
                "Output": "** false",
                "Explanation": "** No single sentence can be inserted inside one of the sentences to make it equal to the other."
            },
            {
                "Input": "** sentence1 = \"Eating right now\", sentence2 = \"Eating\"",
                "Output": "** true",
                "Explanation": "** sentence2 can be turned to sentence1 by inserting \"right now\" at the end of the sentence."
            }
        ]
    },
    {
        "Title": "Count Nice Pairs in an Array",
        "slug": "count-nice-pairs-in-an-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [42,11,1,97]",
                "Output": "** 2",
                "Explanation": "** The two pairs are:\n - (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121.\n - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12."
            },
            {
                "Input": "** nums = [13,10,35,24,76]",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Number of Groups Getting Fresh Donuts",
        "slug": "maximum-number-of-groups-getting-fresh-donuts",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** batchSize = 3, groups = [1,2,3,4,5,6]",
                "Output": "** 4",
                "Explanation": "** You can arrange the groups as [6,2,4,5,1,3]. Then the 1st, 2nd, 4th, and 6th groups will be happy."
            },
            {
                "Input": "** batchSize = 4, groups = [1,3,2,5,2,2,1,6]",
                "Output": "** 4",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Truncate Sentence",
        "slug": "truncate-sentence",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"Hello how are you Contestant\", k = 4",
                "Output": "** \"Hello how are you\"",
                "Explanation": "**\nThe words in s are [\"Hello\", \"how\" \"are\", \"you\", \"Contestant\"].\nThe first 4 words are [\"Hello\", \"how\", \"are\", \"you\"].\nHence, you should return \"Hello how are you\"."
            },
            {
                "Input": "** s = \"What is the solution to this problem\", k = 4",
                "Output": "** \"What is the solution\"",
                "Explanation": "**\nThe words in s are [\"What\", \"is\" \"the\", \"solution\", \"to\", \"this\", \"problem\"].\nThe first 4 words are [\"What\", \"is\", \"the\", \"solution\"].\nHence, you should return \"What is the solution\"."
            },
            {
                "Input": "** s = \"chopper is not a tanuki\", k = 5",
                "Output": "** \"chopper is not a tanuki\"",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Finding the Users Active Minutes",
        "slug": "finding-the-users-active-minutes",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** logs = [[0,5],[1,2],[0,2],[0,5],[1,3]], k = 5",
                "Output": "** [0,2,0,0,0]",
                "Explanation": "**\nThe user with ID=0 performed actions at minutes 5, 2, and 5 again. Hence, they have a UAM of 2 (minute 5 is only counted once).\nThe user with ID=1 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.\nSince both users have a UAM of 2, answer[2] is 2, and the remaining answer[j] values are 0."
            },
            {
                "Input": "** logs = [[1,1],[2,2],[2,3]], k = 4",
                "Output": "** [1,1,0,0]",
                "Explanation": "**\nThe user with ID=1 performed a single action at minute 1. Hence, they have a UAM of 1.\nThe user with ID=2 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.\nThere is one user with a UAM of 1 and one with a UAM of 2.\nHence, answer[1] = 1, answer[2] = 1, and the remaining values are 0."
            }
        ]
    },
    {
        "Title": "Minimum Absolute Sum Difference",
        "slug": "minimum-absolute-sum-difference",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums1 = [1,7,5], nums2 = [2,3,5]",
                "Output": "** 3",
                "Explanation": "** There are two possible optimal solutions:\n- Replace the second element with the first: [1,**7**,5] => [1,**1**,5], or\n- Replace the second element with the third: [1,**7**,5] => [1,**5**,5].\nBoth will yield an absolute sum difference of |1-2| + (|1-3| or |5-3|) + |5-5| = 3."
            },
            {
                "Input": "** nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10]",
                "Output": "** 0",
                "Explanation": "** nums1 is equal to nums2 so no replacement is needed. This will result in an \nabsolute sum difference of 0."
            },
            {
                "Input": "** nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4]",
                "Output": "** 20",
                "Explanation": "** Replace the first element with the second: [**1**,10,4,4,2,7] => [**10**,10,4,4,2,7].\nThis yields an absolute sum difference of |10-9| + |10-3| + |4-5| + |4-1| + |2-7| + |7-4| = 20"
            }
        ]
    },
    {
        "Title": "Number of Different Subsequences GCDs",
        "slug": "number-of-different-subsequences-gcds",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [6,10,3]",
                "Output": "** 5",
                "Explanation": "** The figure shows all the non-empty subsequences and their GCDs.\nThe different GCDs are 6, 10, 3, 2, and 1."
            }
        ]
    },
    {
        "Title": "Sign of the Product of an Array",
        "slug": "sign-of-the-product-of-an-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [-1,-2,-3,-4,3,2,1]",
                "Output": "** 1",
                "Explanation": "** The product of all values in the array is 144, and signFunc(144) = 1"
            },
            {
                "Input": "** nums = [1,5,0,2,-3]",
                "Output": "** 0",
                "Explanation": "** The product of all values in the array is 0, and signFunc(0) = 0"
            },
            {
                "Input": "** nums = [-1,1,-1,1,-1]",
                "Output": "** -1",
                "Explanation": "** The product of all values in the array is -1, and signFunc(-1) = -1"
            }
        ]
    },
    {
        "Title": "Find the Winner of the Circular Game",
        "slug": "find-the-winner-of-the-circular-game",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 5, k = 2",
                "Output": "** 3",
                "Explanation": "** Here are the steps of the game:\n1) Start at friend 1.\n2) Count 2 friends clockwise, which are friends 1 and 2.\n3) Friend 2 leaves the circle. Next start is friend 3.\n4) Count 2 friends clockwise, which are friends 3 and 4.\n5) Friend 4 leaves the circle. Next start is friend 5.\n6) Count 2 friends clockwise, which are friends 5 and 1.\n7) Friend 1 leaves the circle. Next start is friend 3.\n8) Count 2 friends clockwise, which are friends 3 and 5.\n9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner."
            }
        ]
    },
    {
        "Title": "Minimum Sideway Jumps",
        "slug": "minimum-sideway-jumps",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** obstacles = [0,1,2,3,0]",
                "Output": "** 2",
                "Explanation": "** The optimal solution is shown by the arrows above. There are 2 side jumps (red arrows).\nNote that the frog can jump over obstacles only when making side jumps (as shown at point 2)."
            },
            {
                "Input": "** obstacles = [0,1,1,3,3,0]",
                "Output": "** 0",
                "Explanation": "** There are no obstacles on lane 2. No side jumps are required."
            },
            {
                "Input": "** obstacles = [0,2,1,0,3,0]",
                "Output": "** 2",
                "Explanation": "** The optimal solution is shown by the arrows above. There are 2 side jumps."
            }
        ]
    },
    {
        "Title": "Finding MK Average",
        "slug": "finding-mk-average",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"MKAverage\", \"addElement\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"addElement\", \"addElement\", \"calculateMKAverage\"]\n[[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]",
                "Output": "[null, null, null, -1, null, 3, null, null, null, 5]",
                "Explanation": "MKAverage obj = new MKAverage(3, 1); \nobj.addElement(3);        // current elements are [3]\nobj.addElement(1);        // current elements are [3,1]\nobj.calculateMKAverage(); // return -1, because m = 3 and only 2 elements exist.\nobj.addElement(10);       // current elements are [3,1,10]\nobj.calculateMKAverage(); // The last 3 elements are [3,1,10].\n                          // After removing smallest and largest 1 element the container will be [3].\n                          // The average of [3] equals 3/1 = 3, return 3\nobj.addElement(5);        // current elements are [3,1,10,5]\nobj.addElement(5);        // current elements are [3,1,10,5,5]\nobj.addElement(5);        // current elements are [3,1,10,5,5,5]\nobj.calculateMKAverage(); // The last 3 elements are [5,5,5].\n                          // After removing smallest and largest 1 element the container will be [5].\n                          // The average of [5] equals 5/1 = 5, return 5"
            }
        ]
    },
    {
        "Title": "Minimum Operations to Make the Array Increasing",
        "slug": "minimum-operations-to-make-the-array-increasing",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,1,1]",
                "Output": "** 3",
                "Explanation": "** You can do the following operations:\r\n1) Increment nums[2], so nums becomes [1,1,**2**].\r\n2) Increment nums[1], so nums becomes [1,**2**,2].\r\n3) Increment nums[2], so nums becomes [1,2,**3**]."
            },
            {
                "Input": "** nums = [1,5,2,4,1]",
                "Output": "** 14",
                "Explanation": null
            },
            {
                "Input": "** nums = [8]",
                "Output": "** 0",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Queries on Number of Points Inside a Circle",
        "slug": "queries-on-number-of-points-inside-a-circle",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** points = [[1,3],[3,3],[5,3],[2,2]], queries = [[2,3,1],[4,3,1],[1,1,2]]",
                "Output": "** [3,2,2]",
                "Explanation": "** The points and circles are shown above.\nqueries[0] is the green circle, queries[1] is the red circle, and queries[2] is the blue circle."
            },
            {
                "Input": "** points = [[1,1],[2,2],[3,3],[4,4],[5,5]], queries = [[1,2,2],[2,2,2],[4,3,2],[4,3,3]]",
                "Output": "** [2,3,2,4]",
                "Explanation": "** The points and circles are shown above.\nqueries[0] is green, queries[1] is red, queries[2] is blue, and queries[3] is purple."
            }
        ]
    },
    {
        "Title": "Maximum XOR for Each Query",
        "slug": "maximum-xor-for-each-query",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [0,1,1,3], maximumBit = 2",
                "Output": "** [0,3,2,3]",
                "Explanation": "The queries are answered as follows:\n1st query: nums = [0,1,1,3], k = 0 since 0 XOR 1 XOR 1 XOR 3 XOR 0 = 3.\n2nd query: nums = [0,1,1], k = 3 since 0 XOR 1 XOR 1 XOR 3 = 3.\n3rd query: nums = [0,1], k = 2 since 0 XOR 1 XOR 2 = 3.\n4th query: nums = [0], k = 3 since 0 XOR 3 = 3."
            },
            {
                "Input": "** nums = [2,3,4,7], maximumBit = 3",
                "Output": "** [5,2,6,5]",
                "Explanation": "The queries are answered as follows:\n1st query: nums = [2,3,4,7], k = 5 since 2 XOR 3 XOR 4 XOR 7 XOR 5 = 7.\n2nd query: nums = [2,3,4], k = 2 since 2 XOR 3 XOR 4 XOR 2 = 7.\n3rd query: nums = [2,3], k = 6 since 2 XOR 3 XOR 6 = 7.\n4th query: nums = [2], k = 5 since 2 XOR 5 = 7."
            },
            {
                "Input": "** nums = [0,1,2,2,5,7], maximumBit = 3",
                "Output": "** [4,3,6,4,6,7]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Make String Sorted",
        "slug": "minimum-number-of-operations-to-make-string-sorted",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"cba\"",
                "Output": "** 5",
                "Explanation": "** The simulation goes as follows:\nOperation 1: i=2, j=2. Swap s[1] and s[2] to get s=\"cab\", then reverse the suffix starting at 2. Now, s=\"cab\".\nOperation 2: i=1, j=2. Swap s[0] and s[2] to get s=\"bac\", then reverse the suffix starting at 1. Now, s=\"bca\".\nOperation 3: i=2, j=2. Swap s[1] and s[2] to get s=\"bac\", then reverse the suffix starting at 2. Now, s=\"bac\".\nOperation 4: i=1, j=1. Swap s[0] and s[1] to get s=\"abc\", then reverse the suffix starting at 1. Now, s=\"acb\".\nOperation 5: i=2, j=2. Swap s[1] and s[2] to get s=\"abc\", then reverse the suffix starting at 2. Now, s=\"abc\"."
            },
            {
                "Input": "** s = \"aabaa\"",
                "Output": "** 2",
                "Explanation": "** The simulation goes as follows:\nOperation 1: i=3, j=4. Swap s[2] and s[4] to get s=\"aaaab\", then reverse the substring starting at 3. Now, s=\"aaaba\".\nOperation 2: i=4, j=4. Swap s[3] and s[4] to get s=\"aaaab\", then reverse the substring starting at 4. Now, s=\"aaaab\"."
            }
        ]
    },
    {
        "Title": "Check if the Sentence Is Pangram",
        "slug": "check-if-the-sentence-is-pangram",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** sentence = \"thequickbrownfoxjumpsoverthelazydog\"",
                "Output": "** true",
                "Explanation": "** sentence contains at least one of every letter of the English alphabet."
            },
            {
                "Input": "** sentence = \"leetcode\"",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Ice Cream Bars",
        "slug": "maximum-ice-cream-bars",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** costs = [1,3,2,4,1], coins = 7",
                "Output": "** 4",
                "Explanation": "** The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7."
            },
            {
                "Input": "** costs = [10,6,8,7,7,8], coins = 5",
                "Output": "** 0",
                "Explanation": "** The boy cannot afford any of the ice cream bars."
            },
            {
                "Input": "** costs = [1,6,3,1,2,5], coins = 20",
                "Output": "** 6",
                "Explanation": "** The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18."
            }
        ]
    },
    {
        "Title": "Single-Threaded CPU",
        "slug": "single-threaded-cpu",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** tasks = [[1,2],[2,4],[3,2],[4,1]]",
                "Output": "** [0,2,3,1]",
                "Explanation": "** The events go as follows: \n- At time = 1, task 0 is available to process. Available tasks = {0}.\n- Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}.\n- At time = 2, task 1 is available to process. Available tasks = {1}.\n- At time = 3, task 2 is available to process. Available tasks = {1, 2}.\n- Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}.\n- At time = 4, task 3 is available to process. Available tasks = {1, 3}.\n- At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}.\n- At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}.\n- At time = 10, the CPU finishes task 1 and becomes idle."
            },
            {
                "Input": "** tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]",
                "Output": "** [4,3,2,0,1]",
                "Explanation": "** The events go as follows:\n- At time = 7, all the tasks become available. Available tasks = {0,1,2,3,4}.\n- Also at time = 7, the idle CPU starts processing task 4. Available tasks = {0,1,2,3}.\n- At time = 9, the CPU finishes task 4 and starts processing task 3. Available tasks = {0,1,2}.\n- At time = 13, the CPU finishes task 3 and starts processing task 2. Available tasks = {0,1}.\n- At time = 18, the CPU finishes task 2 and starts processing task 0. Available tasks = {1}.\n- At time = 28, the CPU finishes task 0 and starts processing task 1. Available tasks = {}.\n- At time = 40, the CPU finishes task 1 and becomes idle."
            }
        ]
    },
    {
        "Title": "Find XOR Sum of All Pairs Bitwise AND",
        "slug": "find-xor-sum-of-all-pairs-bitwise-and",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** arr1 = [1,2,3], arr2 = [6,5]",
                "Output": "** 0",
                "Explanation": "** The list = [1 AND 6, 1 AND 5, 2 AND 6, 2 AND 5, 3 AND 6, 3 AND 5] = [0,1,2,0,2,1].\nThe XOR sum = 0 XOR 1 XOR 2 XOR 0 XOR 2 XOR 1 = 0."
            },
            {
                "Input": "** arr1 = [12], arr2 = [4]",
                "Output": "** 4",
                "Explanation": "** The list = [12 AND 4] = [4]. The XOR sum = 4."
            }
        ]
    },
    {
        "Title": "Sum of Digits in Base K",
        "slug": "sum-of-digits-in-base-k",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 34, k = 6",
                "Output": "** 9",
                "Explanation": "** 34 (base 10) expressed in base 6 is 54. 5 + 4 = 9."
            },
            {
                "Input": "** n = 10, k = 10",
                "Output": "** 1",
                "Explanation": "** n is already in base 10. 1 + 0 = 1."
            }
        ]
    },
    {
        "Title": "Frequency of the Most Frequent Element",
        "slug": "frequency-of-the-most-frequent-element",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,4], k = 5",
                "Output": "** 3",
                "Explanation": "** Increment the first element three times and the second element two times to make nums = [4,4,4].\n4 has a frequency of 3."
            },
            {
                "Input": "** nums = [1,4,8,13], k = 5",
                "Output": "** 2",
                "Explanation": "** There are multiple optimal solutions:\n- Increment the first element three times to make nums = [4,4,8,13]. 4 has a frequency of 2.\n- Increment the second element four times to make nums = [1,8,8,13]. 8 has a frequency of 2.\n- Increment the third element five times to make nums = [1,4,13,13]. 13 has a frequency of 2."
            },
            {
                "Input": "** nums = [3,9,6], k = 2",
                "Output": "** 1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Substring Of All Vowels in Order",
        "slug": "longest-substring-of-all-vowels-in-order",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** word = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\"",
                "Output": "** 13",
                "Explanation": "** The longest beautiful substring in word is \"aaaaeiiiiouuu\" of length 13."
            },
            {
                "Input": "** word = \"aeeeiiiioooauuuaeiou\"",
                "Output": "** 5",
                "Explanation": "** The longest beautiful substring in word is \"aeiou\" of length 5."
            },
            {
                "Input": "** word = \"a\"",
                "Output": "** 0",
                "Explanation": "** There is no beautiful substring, so return 0."
            }
        ]
    },
    {
        "Title": "Maximum Building Height",
        "slug": "maximum-building-height",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 5, restrictions = [[2,1],[4,1]]",
                "Output": "** 2",
                "Explanation": "** The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,1,2], and the tallest building has a height of 2."
            },
            {
                "Input": "** n = 6, restrictions = []",
                "Output": "** 5",
                "Explanation": "** The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,3,4,5], and the tallest building has a height of 5."
            },
            {
                "Input": "** n = 10, restrictions = [[5,3],[2,5],[7,4],[10,3]]",
                "Output": "** 5",
                "Explanation": "** The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,3,3,4,4,5,4,3], and the tallest building has a height of 5."
            }
        ]
    },
    {
        "Title": "Replace All Digits with Characters",
        "slug": "replace-all-digits-with-characters",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"a1c1e1\"",
                "Output": "** \"abcdef\"",
                "Explanation": "** The digits are replaced as follows:\n- s[1] -> shift('a',1) = 'b'\n- s[3] -> shift('c',1) = 'd'\n- s[5] -> shift('e',1) = 'f'"
            },
            {
                "Input": "** s = \"a1b2c3d4e\"",
                "Output": "** \"abbdcfdhe\"",
                "Explanation": "** The digits are replaced as follows:\n- s[1] -> shift('a',1) = 'b'\n- s[3] -> shift('b',2) = 'd'\n- s[5] -> shift('c',3) = 'f'\n- s[7] -> shift('d',4) = 'h'"
            }
        ]
    },
    {
        "Title": "Seat Reservation Manager",
        "slug": "seat-reservation-manager",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"SeatManager\", \"reserve\", \"reserve\", \"unreserve\", \"reserve\", \"reserve\", \"reserve\", \"reserve\", \"unreserve\"]\n[[5], [], [], [2], [], [], [], [], [5]]",
                "Output": "[null, 1, 2, null, 2, 3, 4, 5, null]",
                "Explanation": "SeatManager seatManager = new SeatManager(5); // Initializes a SeatManager with 5 seats.\nseatManager.reserve();    // All seats are available, so return the lowest numbered seat, which is 1.\nseatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.\nseatManager.unreserve(2); // Unreserve seat 2, so now the available seats are [2,3,4,5].\nseatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.\nseatManager.reserve();    // The available seats are [3,4,5], so return the lowest of them, which is 3.\nseatManager.reserve();    // The available seats are [4,5], so return the lowest of them, which is 4.\nseatManager.reserve();    // The only available seat is seat 5, so return 5.\nseatManager.unreserve(5); // Unreserve seat 5, so now the available seats are [5]."
            }
        ]
    },
    {
        "Title": "Maximum Element After Decreasing and Rearranging",
        "slug": "maximum-element-after-decreasing-and-rearranging",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [2,2,1,2,1]",
                "Output": "** 2",
                "Explanation": "** \nWe can satisfy the conditions by rearranging arr so it becomes [1,2,2,2,1].\nThe largest element in arr is 2."
            },
            {
                "Input": "** arr = [100,1,1000]",
                "Output": "** 3",
                "Explanation": "** \nOne possible way to satisfy the conditions is by doing the following:\n1. Rearrange arr so it becomes [1,100,1000].\n2. Decrease the value of the second element to 2.\n3. Decrease the value of the third element to 3.\nNow arr = [1,2,3], which satisfies the conditions.\nThe largest element in arr is 3."
            },
            {
                "Input": "** arr = [1,2,3,4,5]",
                "Output": "** 5",
                "Explanation": "** The array already satisfies the conditions, and the largest element is 5."
            }
        ]
    },
    {
        "Title": "Closest Room",
        "slug": "closest-room",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** rooms = [[2,2],[1,2],[3,2]], queries = [[3,1],[3,3],[5,2]]",
                "Output": "** [3,-1,3]",
                "Explanation": "** The answers to the queries are as follows:\nQuery = [3,1]: Room number 3 is the closest as abs(3 - 3) = 0, and its size of 2 is at least 1. The answer is 3.\nQuery = [3,3]: There are no rooms with a size of at least 3, so the answer is -1.\nQuery = [5,2]: Room number 3 is the closest as abs(3 - 5) = 2, and its size of 2 is at least 2. The answer is 3."
            },
            {
                "Input": "** rooms = [[1,4],[2,3],[3,5],[4,1],[5,2]], queries = [[2,3],[2,4],[2,5]]",
                "Output": "** [2,1,3]",
                "Explanation": "** The answers to the queries are as follows:\nQuery = [2,3]: Room number 2 is the closest as abs(2 - 2) = 0, and its size of 3 is at least 3. The answer is 2.\nQuery = [2,4]: Room numbers 1 and 3 both have sizes of at least 4. The answer is 1 since it is smaller.\nQuery = [2,5]: Room number 3 is the only room with a size of at least 5. The answer is 3."
            }
        ]
    },
    {
        "Title": "Minimum Distance to the Target Element",
        "slug": "minimum-distance-to-the-target-element",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5], target = 5, start = 3",
                "Output": "** 1",
                "Explanation": "** nums[4] = 5 is the only value equal to target, so the answer is abs(4 - 3) = 1."
            },
            {
                "Input": "** nums = [1], target = 1, start = 0",
                "Output": "** 0",
                "Explanation": "** nums[0] = 1 is the only value equal to target, so the answer is abs(0 - 0) = 0."
            },
            {
                "Input": "** nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start = 0",
                "Output": "** 0",
                "Explanation": "** Every value of nums is 1, but nums[0] minimizes abs(i - start), which is abs(0 - 0) = 0."
            }
        ]
    },
    {
        "Title": "Splitting a String Into Descending Consecutive Values",
        "slug": "splitting-a-string-into-descending-consecutive-values",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"1234\"",
                "Output": "** false",
                "Explanation": "** There is no valid way to split s."
            },
            {
                "Input": "** s = \"050043\"",
                "Output": "** true",
                "Explanation": "** s can be split into [\"05\", \"004\", \"3\"] with numerical values [5,4,3].\nThe values are in descending order with adjacent values differing by 1."
            },
            {
                "Input": "** s = \"9080701\"",
                "Output": "** false",
                "Explanation": "** There is no valid way to split s."
            }
        ]
    },
    {
        "Title": "Minimum Adjacent Swaps to Reach the Kth Smallest Number",
        "slug": "minimum-adjacent-swaps-to-reach-the-kth-smallest-number",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** num = \"5489355142\", k = 4",
                "Output": "** 2",
                "Explanation": "** The 4th smallest wonderful number is \"5489355421\". To get this number:\n- Swap index 7 with index 8: \"5489355142\" -> \"5489355412\"\n- Swap index 8 with index 9: \"5489355412\" -> \"5489355421\""
            },
            {
                "Input": "** num = \"11112\", k = 4",
                "Output": "** 4",
                "Explanation": "** The 4th smallest wonderful number is \"21111\". To get this number:\n- Swap index 3 with index 4: \"11112\" -> \"11121\"\n- Swap index 2 with index 3: \"11121\" -> \"11211\"\n- Swap index 1 with index 2: \"11211\" -> \"12111\"\n- Swap index 0 with index 1: \"12111\" -> \"21111\""
            },
            {
                "Input": "** num = \"00123\", k = 1",
                "Output": "** 1",
                "Explanation": "** The 1st smallest wonderful number is \"00132\". To get this number:\n- Swap index 3 with index 4: \"00123\" -> \"00132\""
            }
        ]
    },
    {
        "Title": "Minimum Interval to Include Each Query",
        "slug": "minimum-interval-to-include-each-query",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** intervals = [[1,4],[2,4],[3,6],[4,4]], queries = [2,3,4,5]",
                "Output": "** [3,3,1,4]",
                "Explanation": "** The queries are processed as follows:\n- Query = 2: The interval [2,4] is the smallest interval containing 2. The answer is 4 - 2 + 1 = 3.\n- Query = 3: The interval [2,4] is the smallest interval containing 3. The answer is 4 - 2 + 1 = 3.\n- Query = 4: The interval [4,4] is the smallest interval containing 4. The answer is 4 - 4 + 1 = 1.\n- Query = 5: The interval [3,6] is the smallest interval containing 5. The answer is 6 - 3 + 1 = 4."
            },
            {
                "Input": "** intervals = [[2,3],[2,5],[1,8],[20,25]], queries = [2,19,5,22]",
                "Output": "** [2,-1,4,6]",
                "Explanation": "** The queries are processed as follows:\n- Query = 2: The interval [2,3] is the smallest interval containing 2. The answer is 3 - 2 + 1 = 2.\n- Query = 19: None of the intervals contain 19. The answer is -1.\n- Query = 5: The interval [2,5] is the smallest interval containing 5. The answer is 5 - 2 + 1 = 4.\n- Query = 22: The interval [20,25] is the smallest interval containing 22. The answer is 25 - 20 + 1 = 6."
            }
        ]
    },
    {
        "Title": "Maximum Population Year",
        "slug": "maximum-population-year",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** logs = [[1993,1999],[2000,2010]]",
                "Output": "** 1993",
                "Explanation": "** The maximum population is 1, and 1993 is the earliest year with this population."
            },
            {
                "Input": "** logs = [[1950,1961],[1960,1971],[1970,1981]]",
                "Output": "** 1960",
                "Explanation": "** \nThe maximum population is 2, and it had happened in years 1960 and 1970.\nThe earlier year between them is 1960."
            }
        ]
    },
    {
        "Title": "Maximum Distance Between a Pair of Values",
        "slug": "maximum-distance-between-a-pair-of-values",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums1 = [55,30,5,4,2], nums2 = [100,20,10,10,5]",
                "Output": "** 2",
                "Explanation": "** The valid pairs are (0,0), (2,2), (2,3), (2,4), (3,3), (3,4), and (4,4).\nThe maximum distance is 2 with pair (2,4)."
            },
            {
                "Input": "** nums1 = [2,2,2], nums2 = [10,10,1]",
                "Output": "** 1",
                "Explanation": "** The valid pairs are (0,0), (0,1), and (1,1).\nThe maximum distance is 1 with pair (0,1)."
            },
            {
                "Input": "** nums1 = [30,29,19,5], nums2 = [25,25,25,25,25]",
                "Output": "** 2",
                "Explanation": "** The valid pairs are (2,2), (2,3), (2,4), (3,3), and (3,4).\nThe maximum distance is 2 with pair (2,4)."
            }
        ]
    },
    {
        "Title": "Maximum Subarray Min-Product",
        "slug": "maximum-subarray-min-product",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3,2]",
                "Output": "** 14",
                "Explanation": "** The maximum min-product is achieved with the subarray [2,3,2] (minimum value is 2).\n2 * (2+3+2) = 2 * 7 = 14."
            },
            {
                "Input": "** nums = [2,3,3,1,2]",
                "Output": "** 18",
                "Explanation": "** The maximum min-product is achieved with the subarray [3,3] (minimum value is 3).\n3 * (3+3) = 3 * 6 = 18."
            },
            {
                "Input": "** nums = [3,1,5,6,4,2]",
                "Output": "** 60",
                "Explanation": "** The maximum min-product is achieved with the subarray [5,6,4] (minimum value is 4).\n4 * (5+6+4) = 4 * 15 = 60."
            }
        ]
    },
    {
        "Title": "Largest Color Value in a Directed Graph",
        "slug": "largest-color-value-in-a-directed-graph",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** colors = \"abaca\", edges = [[0,1],[0,2],[2,3],[3,4]]",
                "Output": "** 3",
                "Explanation": "** The path 0 -> 2 -> 3 -> 4 contains 3 nodes that are colored \"a\" (red in the above image)."
            },
            {
                "Input": "** colors = \"a\", edges = [[0,0]]",
                "Output": "** -1",
                "Explanation": "** There is a cycle from 0 to 0."
            }
        ]
    },
    {
        "Title": "Sorting the Sentence",
        "slug": "sorting-the-sentence",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"is2 sentence4 This1 a3\"",
                "Output": "** \"This is a sentence\"",
                "Explanation": "** Sort the words in s to their original positions \"This1 is2 a3 sentence4\", then remove the numbers."
            },
            {
                "Input": "** s = \"Myself2 Me1 I4 and3\"",
                "Output": "** \"Me Myself and I\"",
                "Explanation": "** Sort the words in s to their original positions \"Me1 Myself2 and3 I4\", then remove the numbers."
            }
        ]
    },
    {
        "Title": "Incremental Memory Leak",
        "slug": "incremental-memory-leak",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** memory1 = 2, memory2 = 2",
                "Output": "** [3,1,0]",
                "Explanation": "** The memory is allocated as follows:\n- At the 1st second, 1 bit of memory is allocated to stick 1. The first stick now has 1 bit of available memory.\n- At the 2nd second, 2 bits of memory are allocated to stick 2. The second stick now has 0 bits of available memory.\n- At the 3rd second, the program crashes. The sticks have 1 and 0 bits available respectively."
            },
            {
                "Input": "** memory1 = 8, memory2 = 11",
                "Output": "** [6,0,4]",
                "Explanation": "** The memory is allocated as follows:\n- At the 1st second, 1 bit of memory is allocated to stick 2. The second stick now has 10 bit of available memory.\n- At the 2nd second, 2 bits of memory are allocated to stick 2. The second stick now has 8 bits of available memory.\n- At the 3rd second, 3 bits of memory are allocated to stick 1. The first stick now has 5 bits of available memory.\n- At the 4th second, 4 bits of memory are allocated to stick 2. The second stick now has 4 bits of available memory.\n- At the 5th second, 5 bits of memory are allocated to stick 1. The first stick now has 0 bits of available memory.\n- At the 6th second, the program crashes. The sticks have 0 and 4 bits available respectively."
            }
        ]
    },
    {
        "Title": "Rotating the Box",
        "slug": "rotating-the-box",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** box = [[\"#\",\".\",\"#\"]]",
                "Output": "** [[\".\"],\r\n\u00a0        [\"#\"],\r\n\u00a0        [\"#\"]]",
                "Explanation": null
            },
            {
                "Input": "** box = [[\"#\",\".\",\"*\",\".\"],\r\n\u00a0             [\"#\",\"#\",\"*\",\".\"]]",
                "Output": "** [[\"#\",\".\"],\r\n\u00a0        [\"#\",\"#\"],\r\n\u00a0        [\"*\",\"*\"],\r\n\u00a0        [\".\",\".\"]]",
                "Explanation": null
            },
            {
                "Input": "** box = [[\"#\",\"#\",\"*\",\".\",\"*\",\".\"],\r\n\u00a0             [\"#\",\"#\",\"#\",\"*\",\".\",\".\"],\r\n\u00a0             [\"#\",\"#\",\"#\",\".\",\"#\",\".\"]]",
                "Output": "** [[\".\",\"#\",\"#\"],\r\n\u00a0        [\".\",\"#\",\"#\"],\r\n\u00a0        [\"#\",\"#\",\"*\"],\r\n\u00a0        [\"#\",\"*\",\".\"],\r\n\u00a0        [\"#\",\".\",\"*\"],\r\n\u00a0        [\"#\",\".\",\".\"]]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sum of Floored Pairs",
        "slug": "sum-of-floored-pairs",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [2,5,9]",
                "Output": "** 10",
                "Explanation": "**\nfloor(2 / 5) = floor(2 / 9) = floor(5 / 9) = 0\nfloor(2 / 2) = floor(5 / 5) = floor(9 / 9) = 1\nfloor(5 / 2) = 2\nfloor(9 / 2) = 4\nfloor(9 / 5) = 1\nWe calculate the floor of the division for every pair of indices in the array then sum them up."
            },
            {
                "Input": "** nums = [7,7,7,7,7,7,7]",
                "Output": "** 49",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Sum of All Subset XOR Totals",
        "slug": "sum-of-all-subset-xor-totals",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,3]",
                "Output": "** 6",
                "Explanation": "** The 4 subsets of [1,3] are:\n- The empty subset has an XOR total of 0.\n- [1] has an XOR total of 1.\n- [3] has an XOR total of 3.\n- [1,3] has an XOR total of 1 XOR 3 = 2.\n0 + 1 + 3 + 2 = 6"
            },
            {
                "Input": "** nums = [5,1,6]",
                "Output": "** 28",
                "Explanation": "** The 8 subsets of [5,1,6] are:\n- The empty subset has an XOR total of 0.\n- [5] has an XOR total of 5.\n- [1] has an XOR total of 1.\n- [6] has an XOR total of 6.\n- [5,1] has an XOR total of 5 XOR 1 = 4.\n- [5,6] has an XOR total of 5 XOR 6 = 3.\n- [1,6] has an XOR total of 1 XOR 6 = 7.\n- [5,1,6] has an XOR total of 5 XOR 1 XOR 6 = 2.\n0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28"
            },
            {
                "Input": "** nums = [3,4,5,6,7,8]",
                "Output": "** 480",
                "Explanation": "** The sum of all XOR totals for every subset is 480."
            }
        ]
    },
    {
        "Title": "Minimum Number of Swaps to Make the Binary String Alternating",
        "slug": "minimum-number-of-swaps-to-make-the-binary-string-alternating",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"111000\"",
                "Output": "** 1",
                "Explanation": "** Swap positions 1 and 4: \"111000\" -> \"101010\"\nThe string is now alternating."
            },
            {
                "Input": "** s = \"010\"",
                "Output": "** 0",
                "Explanation": "** The string is already alternating, no swaps are needed."
            },
            {
                "Input": "** s = \"1110\"",
                "Output": "** -1",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Finding Pairs With a Certain Sum",
        "slug": "finding-pairs-with-a-certain-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"FindSumPairs\", \"count\", \"add\", \"count\", \"count\", \"add\", \"add\", \"count\"]\n[[[1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]], [7], [3, 2], [8], [4], [0, 1], [1, 1], [7]]",
                "Output": "[null, 8, null, 2, 1, null, null, 11]",
                "Explanation": "FindSumPairs findSumPairs = new FindSumPairs([1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]);\nfindSumPairs.count(7);  // return 8; pairs (2,2), (3,2), (4,2), (2,4), (3,4), (4,4) make 2 + 5 and pairs (5,1), (5,5) make 3 + 4\nfindSumPairs.add(3, 2); // now nums2 = [1,4,5,**4**,5,4]\nfindSumPairs.count(8);  // return 2; pairs (5,2), (5,4) make 3 + 5\nfindSumPairs.count(4);  // return 1; pair (5,0) makes 3 + 1\nfindSumPairs.add(0, 1); // now nums2 = [**`2`**,4,5,4,5,4]\nfindSumPairs.add(1, 1); // now nums2 = [2,**5**,5,4,5,4]\nfindSumPairs.count(7);  // return 11; pairs (2,1), (2,2), (2,4), (3,1), (3,2), (3,4), (4,1), (4,2), (4,4) make 2 + 5 and pairs (5,3), (5,5) make 3 + 4"
            }
        ]
    },
    {
        "Title": "Number of Ways to Rearrange Sticks With K Sticks Visible",
        "slug": "number-of-ways-to-rearrange-sticks-with-k-sticks-visible",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 3, k = 2",
                "Output": "** 3",
                "Explanation": "** [1,3,2], [2,3,1], and [2,1,3] are the only arrangements such that exactly 2 sticks are visible.\nThe visible sticks are underlined."
            },
            {
                "Input": "** n = 5, k = 5",
                "Output": "** 1",
                "Explanation": "** [1,2,3,4,5] is the only arrangement such that all 5 sticks are visible.\nThe visible sticks are underlined."
            },
            {
                "Input": "** n = 20, k = 11",
                "Output": "** 647427950",
                "Explanation": "** There are 647427950 (mod 109 + 7) ways to rearrange the sticks such that exactly 11 sticks are visible."
            }
        ]
    },
    {
        "Title": "Longer Contiguous Segments of Ones than Zeros",
        "slug": "longer-contiguous-segments-of-ones-than-zeros",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"1101\"",
                "Output": "** true",
                "Explanation": "**\nThe longest contiguous segment of 1s has length 2: \"1101\"\nThe longest contiguous segment of 0s has length 1: \"1101\"\nThe segment of 1s is longer, so return true."
            },
            {
                "Input": "** s = \"111000\"",
                "Output": "** false",
                "Explanation": "**\nThe longest contiguous segment of 1s has length 3: \"111000\"\nThe longest contiguous segment of 0s has length 3: \"111000\"\nThe segment of 1s is not longer, so return false."
            },
            {
                "Input": "** s = \"110100010\"",
                "Output": "** false",
                "Explanation": "**\nThe longest contiguous segment of 1s has length 2: \"110100010\"\nThe longest contiguous segment of 0s has length 3: \"110100010\"\nThe segment of 1s is not longer, so return false."
            }
        ]
    },
    {
        "Title": "Minimum Speed to Arrive on Time",
        "slug": "minimum-speed-to-arrive-on-time",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** dist = [1,3,2], hour = 6",
                "Output": "** 1",
                "Explanation": "** At speed 1:\n- The first train ride takes 1/1 = 1 hour.\n- Since we are already at an integer hour, we depart immediately at the 1 hour mark. The second train takes 3/1 = 3 hours.\n- Since we are already at an integer hour, we depart immediately at the 4 hour mark. The third train takes 2/1 = 2 hours.\n- You will arrive at exactly the 6 hour mark."
            },
            {
                "Input": "** dist = [1,3,2], hour = 2.7",
                "Output": "** 3",
                "Explanation": "** At speed 3:\n- The first train ride takes 1/3 = 0.33333 hours.\n- Since we are not at an integer hour, we wait until the 1 hour mark to depart. The second train ride takes 3/3 = 1 hour.\n- Since we are already at an integer hour, we depart immediately at the 2 hour mark. The third train takes 2/3 = 0.66667 hours.\n- You will arrive at the 2.66667 hour mark."
            },
            {
                "Input": "** dist = [1,3,2], hour = 1.9",
                "Output": "** -1",
                "Explanation": "** It is impossible because the earliest the third train can depart is at the 2 hour mark."
            }
        ]
    },
    {
        "Title": "Jump Game VII",
        "slug": "jump-game-vii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"011010\", minJump = 2, maxJump = 3",
                "Output": "** true",
                "Explanation": "**\nIn the first step, move from index 0 to index 3. \nIn the second step, move from index 3 to index 5."
            },
            {
                "Input": "** s = \"01101110\", minJump = 2, maxJump = 3",
                "Output": "** false",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Stone Game VIII",
        "slug": "stone-game-viii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** stones = [-1,2,-3,4,-5]",
                "Output": "** 5",
                "Explanation": "**\r\n- Alice removes the first 4 stones, adds (-1) + 2 + (-3) + 4 = 2 to her score, and places a stone of\r\n  value 2 on the left. stones = [2,-5].\r\n- Bob removes the first 2 stones, adds 2 + (-5) = -3 to his score, and places a stone of value -3 on\r\n  the left. stones = [-3].\r\nThe difference between their scores is 2 - (-3) = 5."
            },
            {
                "Input": "** stones = [7,-6,5,10,5,-2,-6]",
                "Output": "** 13",
                "Explanation": "**\r\n- Alice removes all stones, adds 7 + (-6) + 5 + 10 + 5 + (-2) + (-6) = 13 to her score, and places a\r\n  stone of value 13 on the left. stones = [13].\r\nThe difference between their scores is 13 - 0 = 13."
            },
            {
                "Input": "** stones = [-10,-12]",
                "Output": "** -22",
                "Explanation": "**\r\n- Alice can only make one move, which is to remove both stones. She adds (-10) + (-12) = -22 to her\r\n  score and places a stone of value -22 on the left. stones = [-22].\r\nThe difference between their scores is (-22) - 0 = -22."
            }
        ]
    },
    {
        "Title": "Calculate Special Bonus",
        "slug": "calculate-special-bonus",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nEmployees table:\n+-------------+---------+--------+\n| employee_id | name    | salary |\n+-------------+---------+--------+\n| 2           | Meir    | 3000   |\n| 3           | Michael | 3800   |\n| 7           | Addilyn | 7400   |\n| 8           | Juan    | 6100   |\n| 9           | Kannon  | 7700   |\n+-------------+---------+--------+",
                "Output": "** \n+-------------+-------+\n| employee_id | bonus |\n+-------------+-------+\n| 2           | 0     |\n| 3           | 0     |\n| 7           | 7400  |\n| 8           | 0     |\n| 9           | 7700  |\n+-------------+-------+",
                "Explanation": "** \nThe employees with IDs 2 and 8 get 0 bonus because they have an even employee_id.\nThe employee with ID 3 gets 0 bonus because their name starts with 'M'.\nThe rest of the employees get a 100% bonus."
            }
        ]
    },
    {
        "Title": "Substrings of Size Three with Distinct Characters",
        "slug": "substrings-of-size-three-with-distinct-characters",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"xyzzaz\"",
                "Output": "** 1",
                "Explanation": "** There are 4 substrings of size 3: \"xyz\", \"yzz\", \"zza\", and \"zaz\". \nThe only good substring of length 3 is \"xyz\"."
            },
            {
                "Input": "** s = \"aababcabc\"",
                "Output": "** 4",
                "Explanation": "** There are 7 substrings of size 3: \"aab\", \"aba\", \"bab\", \"abc\", \"bca\", \"cab\", and \"abc\".\nThe good substrings are \"abc\", \"bca\", \"cab\", and \"abc\"."
            }
        ]
    },
    {
        "Title": "Minimize Maximum Pair Sum in Array",
        "slug": "minimize-maximum-pair-sum-in-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,5,2,3]",
                "Output": "** 7",
                "Explanation": "** The elements can be paired up into pairs (3,3) and (5,2).\r\nThe maximum pair sum is max(3+3, 5+2) = max(6, 7) = 7."
            },
            {
                "Input": "** nums = [3,5,4,2,4,6]",
                "Output": "** 8",
                "Explanation": "** The elements can be paired up into pairs (3,5), (4,4), and (6,2).\r\nThe maximum pair sum is max(3+5, 4+4, 6+2) = max(8, 8, 8) = 8."
            }
        ]
    },
    {
        "Title": "Get Biggest Three Rhombus Sums in a Grid",
        "slug": "get-biggest-three-rhombus-sums-in-a-grid",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[3,4,5,1,3],[3,3,4,2,3],[20,30,200,40,10],[1,5,5,4,1],[4,3,2,2,5]]",
                "Output": "** [228,216,211]",
                "Explanation": "** The rhombus shapes for the three biggest distinct rhombus sums are depicted above.\n- Blue: 20 + 3 + 200 + 5 = 228\n- Red: 200 + 2 + 10 + 4 = 216\n- Green: 5 + 200 + 4 + 2 = 211"
            },
            {
                "Input": "** grid = [[1,2,3],[4,5,6],[7,8,9]]",
                "Output": "** [20,9,8]",
                "Explanation": "** The rhombus shapes for the three biggest distinct rhombus sums are depicted above.\n- Blue: 4 + 2 + 6 + 8 = 20\n- Red: 9 (area 0 rhombus in the bottom right corner)\n- Green: 8 (area 0 rhombus in the bottom middle)"
            }
        ]
    },
    {
        "Title": "Minimum XOR Sum of Two Arrays",
        "slug": "minimum-xor-sum-of-two-arrays",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums1 = [1,2], nums2 = [2,3]",
                "Output": "** 2",
                "Explanation": "** Rearrange nums2 so that it becomes [3,2].\nThe XOR sum is (1 XOR 3) + (2 XOR 2) = 2 + 0 = 2."
            },
            {
                "Input": "** nums1 = [1,0,3], nums2 = [5,3,4]",
                "Output": "** 8",
                "Explanation": "** Rearrange nums2 so that it becomes [5,4,3]. \nThe XOR sum is (1 XOR 5) + (0 XOR 4) + (3 XOR 3) = 4 + 4 + 0 = 8."
            }
        ]
    },
    {
        "Title": "Check if Word Equals Summation of Two Words",
        "slug": "check-if-word-equals-summation-of-two-words",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** firstWord = \"acb\", secondWord = \"cba\", targetWord = \"cdb\"",
                "Output": "** true",
                "Explanation": "**\nThe numerical value of firstWord is \"acb\" -> \"021\" -> 21.\nThe numerical value of secondWord is \"cba\" -> \"210\" -> 210.\nThe numerical value of targetWord is \"cdb\" -> \"231\" -> 231.\nWe return true because 21 + 210 == 231."
            },
            {
                "Input": "** firstWord = \"aaa\", secondWord = \"a\", targetWord = \"aab\"",
                "Output": "** false",
                "Explanation": "** \nThe numerical value of firstWord is \"aaa\" -> \"000\" -> 0.\nThe numerical value of secondWord is \"a\" -> \"0\" -> 0.\nThe numerical value of targetWord is \"aab\" -> \"001\" -> 1.\nWe return false because 0 + 0 != 1."
            },
            {
                "Input": "** firstWord = \"aaa\", secondWord = \"a\", targetWord = \"aaaa\"",
                "Output": "** true",
                "Explanation": "** \nThe numerical value of firstWord is \"aaa\" -> \"000\" -> 0.\nThe numerical value of secondWord is \"a\" -> \"0\" -> 0.\nThe numerical value of targetWord is \"aaaa\" -> \"0000\" -> 0.\nWe return true because 0 + 0 == 0."
            }
        ]
    },
    {
        "Title": "Maximum Value after Insertion",
        "slug": "maximum-value-after-insertion",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = \"99\", x = 9",
                "Output": "** \"999\"",
                "Explanation": "** The result is the same regardless of where you insert 9."
            },
            {
                "Input": "** n = \"-13\", x = 2",
                "Output": "** \"-123\"",
                "Explanation": "** You can make n one of {-213, -123, -132}, and the largest of those three is -123."
            }
        ]
    },
    {
        "Title": "Process Tasks Using Servers",
        "slug": "process-tasks-using-servers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** servers = [3,3,2], tasks = [1,2,3,2,1,2]",
                "Output": "** [2,2,0,2,1,2]",
                "Explanation": "** Events in chronological order go as follows:\n- At second 0, task 0 is added and processed using server 2 until second 1.\n- At second 1, server 2 becomes free. Task 1 is added and processed using server 2 until second 3.\n- At second 2, task 2 is added and processed using server 0 until second 5.\n- At second 3, server 2 becomes free. Task 3 is added and processed using server 2 until second 5.\n- At second 4, task 4 is added and processed using server 1 until second 5.\n- At second 5, all servers become free. Task 5 is added and processed using server 2 until second 7."
            },
            {
                "Input": "** servers = [5,1,4,3,2], tasks = [2,1,2,4,5,2,1]",
                "Output": "** [1,4,1,4,1,3,2]",
                "Explanation": "** Events in chronological order go as follows: \n- At second 0, task 0 is added and processed using server 1 until second 2.\n- At second 1, task 1 is added and processed using server 4 until second 2.\n- At second 2, servers 1 and 4 become free. Task 2 is added and processed using server 1 until second 4. \n- At second 3, task 3 is added and processed using server 4 until second 7.\n- At second 4, server 1 becomes free. Task 4 is added and processed using server 1 until second 9. \n- At second 5, task 5 is added and processed using server 3 until second 7.\n- At second 6, task 6 is added and processed using server 2 until second 7."
            }
        ]
    },
    {
        "Title": "Minimum Skips to Arrive at Meeting On Time",
        "slug": "minimum-skips-to-arrive-at-meeting-on-time",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** dist = [1,3,2], speed = 4, hoursBefore = 2",
                "Output": "** 1",
                "Explanation": "**\nWithout skipping any rests, you will arrive in (1/4 + 3/4) + (3/4 + 1/4) + (2/4) = 2.5 hours.\nYou can skip the first rest to arrive in ((1/4 + 0) + (3/4 + 0)) + (2/4) = 1.5 hours.\nNote that the second rest is shortened because you finish traveling the second road at an integer hour due to skipping the first rest."
            },
            {
                "Input": "** dist = [7,3,5,5], speed = 2, hoursBefore = 10",
                "Output": "** 2",
                "Explanation": "**\nWithout skipping any rests, you will arrive in (7/2 + 1/2) + (3/2 + 1/2) + (5/2 + 1/2) + (5/2) = 11.5 hours.\nYou can skip the first and third rest to arrive in ((7/2 + 0) + (3/2 + 0)) + ((5/2 + 0) + (5/2)) = 10 hours."
            },
            {
                "Input": "** dist = [7,3,5,5], speed = 1, hoursBefore = 10",
                "Output": "** -1",
                "Explanation": "** It is impossible to arrive at the meeting on time even if you skip all the rests."
            }
        ]
    },
    {
        "Title": "Egg Drop With 2 Eggs and N Floors",
        "slug": "egg-drop-with-2-eggs-and-n-floors",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** 2",
                "Explanation": "** We can drop the first egg from floor 1 and the second egg from floor 2.\nIf the first egg breaks, we know that f = 0.\nIf the second egg breaks but the first egg didn't, we know that f = 1.\nOtherwise, if both eggs survive, we know that f = 2."
            },
            {
                "Input": "** n = 100",
                "Output": "** 14",
                "Explanation": "** One optimal strategy is:\n- Drop the 1st egg at floor 9. If it breaks, we know f is between 0 and 8. Drop the 2nd egg starting from floor 1 and going up one at a time to find f within 8 more drops. Total drops is 1 + 8 = 9.\n- If the 1st egg does not break, drop the 1st egg again at floor 22. If it breaks, we know f is between 9 and 21. Drop the 2nd egg starting from floor 10 and going up one at a time to find f within 12 more drops. Total drops is 2 + 12 = 14.\n- If the 1st egg does not break again, follow a similar process dropping the 1st egg from floors 34, 45, 55, 64, 72, 79, 85, 90, 94, 97, 99, and 100.\nRegardless of the outcome, it takes at most 14 drops to determine f."
            }
        ]
    },
    {
        "Title": "Determine Whether Matrix Can Be Obtained By Rotation",
        "slug": "determine-whether-matrix-can-be-obtained-by-rotation",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** mat = [[0,1],[1,0]], target = [[1,0],[0,1]]",
                "Output": "** true",
                "Explanation": "** We can rotate mat 90 degrees clockwise to make mat equal target."
            },
            {
                "Input": "** mat = [[0,1],[1,1]], target = [[1,0],[0,1]]",
                "Output": "** false",
                "Explanation": "** It is impossible to make mat equal to target by rotating mat."
            },
            {
                "Input": "** mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]",
                "Output": "** true",
                "Explanation": "** We can rotate mat 90 degrees clockwise two times to make mat equal target."
            }
        ]
    },
    {
        "Title": "Reduction Operations to Make the Array Elements Equal",
        "slug": "reduction-operations-to-make-the-array-elements-equal",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [5,1,3]",
                "Output": "** 3",
                "Explanation": "**\u00a0It takes 3 operations to make all elements in nums equal:\n1. largest = 5 at index 0. nextLargest = 3. Reduce nums[0] to 3. nums = [3,1,3].\n2. largest = 3 at index 0. nextLargest = 1. Reduce nums[0] to 1. nums = [1,1,3].\n3. largest = 3 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1]."
            },
            {
                "Input": "** nums = [1,1,1]",
                "Output": "** 0",
                "Explanation": "**\u00a0All elements in nums are already equal."
            },
            {
                "Input": "** nums = [1,1,2,2,3]",
                "Output": "** 4",
                "Explanation": "**\u00a0It takes 4 operations to make all elements in nums equal:\n1. largest = 3 at index 4. nextLargest = 2. Reduce nums[4] to 2. nums = [1,1,2,2,2].\n2. largest = 2 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1,2,2].\n3. largest = 2 at index 3. nextLargest = 1. Reduce nums[3] to 1. nums = [1,1,1,1,2].\n4. largest = 2 at index 4. nextLargest = 1. Reduce nums[4] to 1. nums = [1,1,1,1,1]."
            }
        ]
    },
    {
        "Title": "Minimum Number of Flips to Make the Binary String Alternating",
        "slug": "minimum-number-of-flips-to-make-the-binary-string-alternating",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"111000\"",
                "Output": "** 2",
                "Explanation": "Use the first operation two times to make s = \"100011\".\nThen, use the second operation on the third and sixth elements to make s = \"101010\"."
            },
            {
                "Input": "** s = \"010\"",
                "Output": "** 0",
                "Explanation": "The string is already alternating."
            },
            {
                "Input": "** s = \"1110\"",
                "Output": "** 1",
                "Explanation": "Use the second operation on the second element to make s = \"1010\"."
            }
        ]
    },
    {
        "Title": "Minimum Space Wasted From Packaging",
        "slug": "minimum-space-wasted-from-packaging",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** packages = [2,3,5], boxes = [[4,8],[2,8]]",
                "Output": "** 6",
                "Explanation": "It is optimal to choose the first supplier, using two size-4 boxes and one size-8 box.\nThe total waste is (4-2) + (4-3) + (8-5) = 6."
            },
            {
                "Input": "** packages = [2,3,5], boxes = [[1,4],[2,3],[3,4]]",
                "Output": "** -1",
                "Explanation": "** There is no box that the package of size 5 can fit in."
            },
            {
                "Input": "** packages = [3,5,8,10,11,12], boxes = [[12],[11,9],[10,5,14]]",
                "Output": "** 9",
                "Explanation": "** It is optimal to choose the third supplier, using two size-5 boxes, two size-10 boxes, and two size-14 boxes.\nThe total waste is (5-3) + (5-5) + (10-8) + (10-10) + (14-11) + (14-12) = 9."
            }
        ]
    },
    {
        "Title": "The Latest Login in 2020",
        "slug": "the-latest-login-in-2020",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nLogins table:\n+---------+---------------------+\n| user_id | time_stamp          |\n+---------+---------------------+\n| 6       | 2020-06-30 15:06:07 |\n| 6       | 2021-04-21 14:06:06 |\n| 6       | 2019-03-07 00:18:15 |\n| 8       | 2020-02-01 05:10:53 |\n| 8       | 2020-12-30 00:46:50 |\n| 2       | 2020-01-16 02:49:50 |\n| 2       | 2019-08-25 07:59:08 |\n| 14      | 2019-07-14 09:00:00 |\n| 14      | 2021-01-06 11:59:59 |\n+---------+---------------------+",
                "Output": "** \n+---------+---------------------+\n| user_id | last_stamp          |\n+---------+---------------------+\n| 6       | 2020-06-30 15:06:07 |\n| 8       | 2020-12-30 00:46:50 |\n| 2       | 2020-01-16 02:49:50 |\n+---------+---------------------+",
                "Explanation": "** \nUser 6 logged into their account 3 times but only once in 2020, so we include this login in the result table.\nUser 8 logged into their account 2 times in 2020, once in February and once in December. We include only the latest one (December) in the result table.\nUser 2 logged into their account 2 times but only once in 2020, so we include this login in the result table.\nUser 14 did not login in 2020, so we do not include them in the result table."
            }
        ]
    },
    {
        "Title": "Check if All the Integers in a Range Are Covered",
        "slug": "check-if-all-the-integers-in-a-range-are-covered",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** ranges = [[1,2],[3,4],[5,6]], left = 2, right = 5",
                "Output": "** true",
                "Explanation": "** Every integer between 2 and 5 is covered:\n- 2 is covered by the first range.\n- 3 and 4 are covered by the second range.\n- 5 is covered by the third range."
            },
            {
                "Input": "** ranges = [[1,10],[10,20]], left = 21, right = 21",
                "Output": "** false",
                "Explanation": "** 21 is not covered by any range."
            }
        ]
    },
    {
        "Title": "Find the Student that Will Replace the Chalk",
        "slug": "find-the-student-that-will-replace-the-chalk",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** chalk = [5,1,5], k = 22",
                "Output": "** 0",
                "Explanation": "** The students go in turns as follows:\n- Student number 0 uses 5 chalk, so k = 17.\n- Student number 1 uses 1 chalk, so k = 16.\n- Student number 2 uses 5 chalk, so k = 11.\n- Student number 0 uses 5 chalk, so k = 6.\n- Student number 1 uses 1 chalk, so k = 5.\n- Student number 2 uses 5 chalk, so k = 0.\nStudent number 0 does not have enough chalk, so they will have to replace it."
            },
            {
                "Input": "** chalk = [3,4,1,2], k = 25",
                "Output": "** 1",
                "Explanation": "** The students go in turns as follows:\n- Student number 0 uses 3 chalk so k = 22.\n- Student number 1 uses 4 chalk so k = 18.\n- Student number 2 uses 1 chalk so k = 17.\n- Student number 3 uses 2 chalk so k = 15.\n- Student number 0 uses 3 chalk so k = 12.\n- Student number 1 uses 4 chalk so k = 8.\n- Student number 2 uses 1 chalk so k = 7.\n- Student number 3 uses 2 chalk so k = 5.\n- Student number 0 uses 3 chalk so k = 2.\nStudent number 1 does not have enough chalk, so they will have to replace it."
            }
        ]
    },
    {
        "Title": "Largest Magic Square",
        "slug": "largest-magic-square",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[7,1,4,5,6],[2,5,1,6,4],[1,5,4,3,2],[1,2,7,3,4]]",
                "Output": "** 3",
                "Explanation": "** The largest magic square has a size of 3.\nEvery row sum, column sum, and diagonal sum of this magic square is equal to 12.\n- Row sums: 5+1+6 = 5+4+3 = 2+7+3 = 12\n- Column sums: 5+5+2 = 1+4+7 = 6+3+3 = 12\n- Diagonal sums: 5+4+3 = 6+4+2 = 12"
            },
            {
                "Input": "** grid = [[5,1,3,1],[9,3,3,1],[1,3,3,8]]",
                "Output": "** 2",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Cost to Change the Final Value of Expression",
        "slug": "minimum-cost-to-change-the-final-value-of-expression",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** expression = \"1&(0|1)\"",
                "Output": "** 1",
                "Explanation": "** We can turn \"1&(0**|**1)\" into \"1&(0**&**1)\" by changing the '|' to a '&' using 1 operation.\nThe new expression evaluates to 0."
            },
            {
                "Input": "** expression = \"(0&0)&(0&0&0)\"",
                "Output": "** 3",
                "Explanation": "** We can turn \"(0**&0**)**&**(0&0&0)\" into \"(0**|1**)**|**(0&0&0)\" using 3 operations.\nThe new expression evaluates to 1."
            },
            {
                "Input": "** expression = \"(0|(1|0&1))\"",
                "Output": "** 1",
                "Explanation": "** We can turn \"(0|(**1**|0&1))\" into \"(0|(**0**|0&1))\" using 1 operation.\nThe new expression evaluates to 0."
            }
        ]
    },
    {
        "Title": "Redistribute Characters to Make All Strings Equal",
        "slug": "redistribute-characters-to-make-all-strings-equal",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** words = [\"abc\",\"aabc\",\"bc\"]",
                "Output": "** true",
                "Explanation": "** Move the first 'a' in words[1] to the front of words[2],\nto make words[1] = \"abc\" and words[2] = \"abc\".\nAll the strings are now equal to \"abc\", so return true."
            },
            {
                "Input": "** words = [\"ab\",\"a\"]",
                "Output": "** false",
                "Explanation": "** It is impossible to make all the strings equal using the operation."
            }
        ]
    },
    {
        "Title": "Maximum Number of Removable Characters",
        "slug": "maximum-number-of-removable-characters",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"abcacb\", p = \"ab\", removable = [3,1,0]",
                "Output": "** 2",
                "Explanation": "After removing the characters at indices 3 and 1, \"a~~**b**~~c~~**a**~~cb\" becomes \"accb\".\n\"ab\" is a subsequence of \"**a**cc**b**\".\nIf we remove the characters at indices 3, 1, and 0, \"~~**ab**~~c~~**a**~~cb\" becomes \"ccb\", and \"ab\" is no longer a subsequence.\nHence, the maximum k is 2."
            },
            {
                "Input": "** s = \"abcbddddd\", p = \"abcd\", removable = [3,2,1,4,5,6]",
                "Output": "** 1",
                "Explanation": "After removing the character at index 3, \"abc~~**b**~~ddddd\" becomes \"abcddddd\".\n\"abcd\" is a subsequence of \"**abcd**dddd\"."
            },
            {
                "Input": "** s = \"abcab\", p = \"abc\", removable = [0,1,2,3,4]",
                "Output": "** 0",
                "Explanation": "If you remove the first index in the array removable, \"abc\" is no longer a subsequence."
            }
        ]
    },
    {
        "Title": "Merge Triplets to Form Target Triplet",
        "slug": "merge-triplets-to-form-target-triplet",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** triplets = [[2,5,3],[1,8,4],[1,7,5]], target = [2,7,5]",
                "Output": "** true",
                "Explanation": "** Perform the following operations:\n- Choose the first and last triplets [[2,5,3],[1,8,4],[1,7,5]]. Update the last triplet to be [max(2,1), max(5,7), max(3,5)] = [2,7,5]. triplets = [[2,5,3],[1,8,4],[2,7,5]]\nThe target triplet [2,7,5] is now an element of triplets."
            },
            {
                "Input": "** triplets = [[3,4,5],[4,5,6]], target = [3,2,5]",
                "Output": "** false",
                "Explanation": "** It is impossible to have [3,2,5] as an element because there is no 2 in any of the triplets."
            },
            {
                "Input": "** triplets = [[2,5,3],[2,3,4],[1,2,5],[5,2,3]], target = [5,5,5]",
                "Output": "** true",
                "Explanation": "** Perform the following operations:\n- Choose the first and third triplets [[2,5,3],[2,3,4],[1,2,5],[5,2,3]]. Update the third triplet to be [max(2,1), max(5,2), max(3,5)] = [2,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,2,3]].\n- Choose the third and fourth triplets [[2,5,3],[2,3,4],[2,5,5],[5,2,3]]. Update the fourth triplet to be [max(2,5), max(5,2), max(5,3)] = [5,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,5,5]].\nThe target triplet [5,5,5] is now an element of triplets."
            }
        ]
    },
    {
        "Title": "The Earliest and Latest Rounds Where Players Compete",
        "slug": "the-earliest-and-latest-rounds-where-players-compete",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 11, firstPlayer = 2, secondPlayer = 4",
                "Output": "** [3,4]",
                "Explanation": "**\nOne possible scenario which leads to the earliest round number:\nFirst round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\nSecond round: 2, 3, 4, 5, 6, 11\nThird round: 2, 3, 4\nOne possible scenario which leads to the latest round number:\nFirst round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\nSecond round: 1, 2, 3, 4, 5, 6\nThird round: 1, 2, 4\nFourth round: 2, 4"
            },
            {
                "Input": "** n = 5, firstPlayer = 1, secondPlayer = 5",
                "Output": "** [1,1]",
                "Explanation": "** The players numbered 1 and 5 compete in the first round.\nThere is no way to make them compete in any other round."
            }
        ]
    },
    {
        "Title": "Find a Peak Element II",
        "slug": "find-a-peak-element-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** mat = [[1,4],[3,2]]",
                "Output": "** [0,1]",
                "Explanation": "**\u00a0Both 3 and 4 are peak elements so [1,0] and [0,1] are both acceptable answers."
            }
        ]
    },
    {
        "Title": "Largest Odd Number in String",
        "slug": "largest-odd-number-in-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num = \"52\"",
                "Output": "** \"5\"",
                "Explanation": "** The only non-empty substrings are \"5\", \"2\", and \"52\". \"5\" is the only odd number."
            },
            {
                "Input": "** num = \"4206\"",
                "Output": "** \"\"",
                "Explanation": "** There are no odd numbers in \"4206\"."
            },
            {
                "Input": "** num = \"35427\"",
                "Output": "** \"35427\"",
                "Explanation": "** \"35427\" is already an odd number."
            }
        ]
    },
    {
        "Title": "The Number of Full Rounds You Have Played",
        "slug": "the-number-of-full-rounds-you-have-played",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** loginTime = \"09:31\", logoutTime = \"10:14\"",
                "Output": "** 1",
                "Explanation": "** You played one full round from 09:45 to 10:00.\nYou did not play the full round from 09:30 to 09:45 because you logged in at 09:31 after it began.\nYou did not play the full round from 10:00 to 10:15 because you logged out at 10:14 before it ended."
            },
            {
                "Input": "** loginTime = \"21:30\", logoutTime = \"03:00\"",
                "Output": "** 22",
                "Explanation": "** You played 10 full rounds from 21:30 to 00:00 and 12 full rounds from 00:00 to 03:00.\n10 + 12 = 22."
            }
        ]
    },
    {
        "Title": "Count Sub Islands",
        "slug": "count-sub-islands",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid1 = [[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]], grid2 = [[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]",
                "Output": "** 3",
                "Explanation": "** In the picture above, the grid on the left is grid1 and the grid on the right is grid2.\nThe 1s colored red in grid2 are those considered to be part of a sub-island. There are three sub-islands."
            },
            {
                "Input": "** grid1 = [[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]], grid2 = [[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]]",
                "Output": "** 2",
                "Explanation": "** In the picture above, the grid on the left is grid1 and the grid on the right is grid2.\nThe 1s colored red in grid2 are those considered to be part of a sub-island. There are two sub-islands."
            }
        ]
    },
    {
        "Title": "Minimum Absolute Difference Queries",
        "slug": "minimum-absolute-difference-queries",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,3,4,8], queries = [[0,1],[1,2],[2,3],[0,3]]",
                "Output": "** [2,1,4,1]",
                "Explanation": "** The queries are processed as follows:\n- queries[0] = [0,1]: The subarray is [1,3] and the minimum absolute difference is |1-3| = 2.\n- queries[1] = [1,2]: The subarray is [3,4] and the minimum absolute difference is |3-4| = 1.\n- queries[2] = [2,3]: The subarray is [4,8] and the minimum absolute difference is |4-8| = 4.\n- queries[3] = [0,3]: The subarray is [1,3,4,8] and the minimum absolute difference is |3-4| = 1."
            },
            {
                "Input": "** nums = [4,5,2,2,7,10], queries = [[2,3],[0,2],[0,5],[3,5]]",
                "Output": "** [-1,1,1,3]",
                "Explanation": "** The queries are processed as follows:\n- queries[0] = [2,3]: The subarray is [2,2] and the minimum absolute difference is -1 because all the\n  elements are the same.\n- queries[1] = [0,2]: The subarray is [4,5,2] and the minimum absolute difference is |4-5| = 1.\n- queries[2] = [0,5]: The subarray is [4,5,2,2,7,10] and the minimum absolute difference is |4-5| = 1.\n- queries[3] = [3,5]: The subarray is [2,7,10] and the minimum absolute difference is |7-10| = 3."
            }
        ]
    },
    {
        "Title": "Count Salary Categories",
        "slug": "count-salary-categories",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nAccounts table:\n+------------+--------+\n| account_id | income |\n+------------+--------+\n| 3          | 108939 |\n| 2          | 12747  |\n| 8          | 87709  |\n| 6          | 91796  |\n+------------+--------+",
                "Output": "** \n+----------------+----------------+\n| category       | accounts_count |\n+----------------+----------------+\n| Low Salary     | 1              |\n| Average Salary | 0              |\n| High Salary    | 3              |\n+----------------+----------------+",
                "Explanation": "** \nLow Salary: Account 2.\nAverage Salary: No accounts.\nHigh Salary: Accounts 3, 6, and 8."
            }
        ]
    },
    {
        "Title": "Remove One Element to Make the Array Strictly Increasing",
        "slug": "remove-one-element-to-make-the-array-strictly-increasing",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,10,5,7]",
                "Output": "** true",
                "Explanation": "** By removing 10 at index 2 from nums, it becomes [1,2,5,7].\n[1,2,5,7] is strictly increasing, so return true."
            },
            {
                "Input": "** nums = [2,3,1,2]",
                "Output": "** false",
                "Explanation": "**\n[3,1,2] is the result of removing the element at index 0.\n[2,1,2] is the result of removing the element at index 1.\n[2,3,2] is the result of removing the element at index 2.\n[2,3,1] is the result of removing the element at index 3.\nNo resulting array is strictly increasing, so return false."
            },
            {
                "Input": "** nums = [1,1,1]",
                "Output": "** false",
                "Explanation": "** The result of removing any element is [1,1].\n[1,1] is not strictly increasing, so return false."
            }
        ]
    },
    {
        "Title": "Remove All Occurrences of a Substring",
        "slug": "remove-all-occurrences-of-a-substring",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"daabcbaabcbc\", part = \"abc\"",
                "Output": "** \"dab\"",
                "Explanation": "The following operations are done:\n- s = \"da**abc**baabcbc\", remove \"abc\" starting at index 2, so s = \"dabaabcbc\".\n- s = \"daba**abc**bc\", remove \"abc\" starting at index 4, so s = \"dababc\".\n- s = \"dab**abc**\", remove \"abc\" starting at index 3, so s = \"dab\".\nNow s has no occurrences of \"abc\"."
            },
            {
                "Input": "** s = \"axxxxyyyyb\", part = \"xy\"",
                "Output": "** \"ab\"",
                "Explanation": "The following operations are done:\n- s = \"axxx**xy**yyyb\", remove \"xy\" starting at index 4 so s = \"axxxyyyb\".\n- s = \"axx**xy**yyb\", remove \"xy\" starting at index 3 so s = \"axxyyb\".\n- s = \"ax**xy**yb\", remove \"xy\" starting at index 2 so s = \"axyb\".\n- s = \"a**xy**b\", remove \"xy\" starting at index 1 so s = \"ab\".\nNow s has no occurrences of \"xy\"."
            }
        ]
    },
    {
        "Title": "Maximum Alternating Subsequence Sum",
        "slug": "maximum-alternating-subsequence-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [4,2,5,3]",
                "Output": "** 7",
                "Explanation": "** It is optimal to choose the subsequence [4,2,5] with alternating sum (4 + 5) - 2 = 7."
            },
            {
                "Input": "** nums = [5,6,7,8]",
                "Output": "** 8",
                "Explanation": "** It is optimal to choose the subsequence [8] with alternating sum 8."
            },
            {
                "Input": "** nums = [6,2,1,2,4,5]",
                "Output": "** 10",
                "Explanation": "** It is optimal to choose the subsequence [6,1,5] with alternating sum (6 + 5) - 1 = 10."
            }
        ]
    },
    {
        "Title": "Design Movie Rental System",
        "slug": "design-movie-rental-system",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"MovieRentingSystem\", \"search\", \"rent\", \"rent\", \"report\", \"drop\", \"search\"]\n[[3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]], [1], [0, 1], [1, 2], [], [1, 2], [2]]",
                "Output": "[null, [1, 0, 2], null, null, [[0, 1], [1, 2]], null, [0, 1]]",
                "Explanation": "MovieRentingSystem movieRentingSystem = new MovieRentingSystem(3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]);\nmovieRentingSystem.search(1);  // return [1, 0, 2], Movies of ID 1 are unrented at shops 1, 0, and 2. Shop 1 is cheapest; shop 0 and 2 are the same price, so order by shop number.\nmovieRentingSystem.rent(0, 1); // Rent movie 1 from shop 0. Unrented movies at shop 0 are now [2,3].\nmovieRentingSystem.rent(1, 2); // Rent movie 2 from shop 1. Unrented movies at shop 1 are now [1].\nmovieRentingSystem.report();   // return [[0, 1], [1, 2]]. Movie 1 from shop 0 is cheapest, followed by movie 2 from shop 1.\nmovieRentingSystem.drop(1, 2); // Drop off movie 2 at shop 1. Unrented movies at shop 1 are now [1,2].\nmovieRentingSystem.search(2);  // return [0, 1]. Movies of ID 2 are unrented at shops 0 and 1. Shop 0 is cheapest, followed by shop 1."
            }
        ]
    },
    {
        "Title": "Maximum Product Difference Between Two Pairs",
        "slug": "maximum-product-difference-between-two-pairs",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [5,6,2,7,4]",
                "Output": "** 34",
                "Explanation": "** We can choose indices 1 and 3 for the first pair (6, 7) and indices 2 and 4 for the second pair (2, 4).\r\nThe product difference is (6 * 7) - (2 * 4) = 34."
            },
            {
                "Input": "** nums = [4,2,5,9,7,4,8]",
                "Output": "** 64",
                "Explanation": "** We can choose indices 3 and 6 for the first pair (9, 8) and indices 1 and 5 for the second pair (2, 4).\r\nThe product difference is (9 * 8) - (2 * 4) = 64."
            }
        ]
    },
    {
        "Title": "Cyclically Rotating a Grid",
        "slug": "cyclically-rotating-a-grid",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[40,10],[30,20]], k = 1",
                "Output": "** [[10,20],[40,30]]",
                "Explanation": "** The figures above represent the grid at every state."
            }
        ]
    },
    {
        "Title": "Number of Wonderful Substrings",
        "slug": "number-of-wonderful-substrings",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** word = \"aba\"",
                "Output": "** 4",
                "Explanation": "** The four wonderful substrings are underlined below:\r\n- \"**a**ba\" -> \"a\"\r\n- \"a**b**a\" -> \"b\"\r\n- \"ab**a**\" -> \"a\"\r\n- \"**aba**\" -> \"aba\""
            },
            {
                "Input": "** word = \"aabb\"",
                "Output": "** 9",
                "Explanation": "** The nine wonderful substrings are underlined below:\r\n- \"**a**abb\" -> \"a\"\r\n- \"**aa**bb\" -> \"aa\"\r\n- \"**aab**b\" -> \"aab\"\r\n- \"**aabb**\" -> \"aabb\"\r\n- \"a**a**bb\" -> \"a\"\r\n- \"a**abb**\" -> \"abb\"\r\n- \"aa**b**b\" -> \"b\"\r\n- \"aa**bb**\" -> \"bb\"\r\n- \"aab**b**\" -> \"b\""
            },
            {
                "Input": "** word = \"he\"",
                "Output": "** 2",
                "Explanation": "** The two wonderful substrings are underlined below:\r\n- \"**h**e\" -> \"h\"\r\n- \"h**e**\" -> \"e\""
            }
        ]
    },
    {
        "Title": "Count Ways to Build Rooms in an Ant Colony",
        "slug": "count-ways-to-build-rooms-in-an-ant-colony",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** prevRoom = [-1,0,1]",
                "Output": "** 1",
                "Explanation": "**\u00a0There is only one way to build the additional rooms: 0 \u2192 1 \u2192 2"
            }
        ]
    },
    {
        "Title": "Build Array from Permutation",
        "slug": "build-array-from-permutation",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [0,2,1,5,3,4]",
                "Output": "** [0,1,2,4,5,3]",
                "Explanation": "** The array ans is built as follows: \nans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]\n    = [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]\n    = [0,1,2,4,5,3]"
            },
            {
                "Input": "** nums = [5,0,1,2,3,4]",
                "Output": "** [4,5,0,1,2,3]",
                "Explanation": "** The array ans is built as follows:\nans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]\n    = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]\n    = [4,5,0,1,2,3]"
            }
        ]
    },
    {
        "Title": "Eliminate Maximum Number of Monsters",
        "slug": "eliminate-maximum-number-of-monsters",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** dist = [1,3,4], speed = [1,1,1]",
                "Output": "** 3",
                "Explanation": "**\nIn the beginning, the distances of the monsters are [1,3,4]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,2,3]. You eliminate the second monster.\nAfter a minute, the distances of the monsters are [X,X,2]. You eliminate the third monster.\nAll 3 monsters can be eliminated."
            },
            {
                "Input": "** dist = [1,1,2,3], speed = [1,1,1,1]",
                "Output": "** 1",
                "Explanation": "**\nIn the beginning, the distances of the monsters are [1,1,2,3]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,0,1,2], so you lose.\nYou can only eliminate 1 monster."
            },
            {
                "Input": "** dist = [3,2,4], speed = [5,3,2]",
                "Output": "** 1",
                "Explanation": "**\nIn the beginning, the distances of the monsters are [3,2,4]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,0,2], so you lose.\nYou can only eliminate 1 monster."
            }
        ]
    },
    {
        "Title": "Count Good Numbers",
        "slug": "count-good-numbers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** 5",
                "Explanation": "** The good numbers of length 1 are \"0\", \"2\", \"4\", \"6\", \"8\"."
            },
            {
                "Input": "** n = 4",
                "Output": "** 400",
                "Explanation": null
            },
            {
                "Input": "** n = 50",
                "Output": "** 564908303",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Longest Common Subpath",
        "slug": "longest-common-subpath",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 5, paths = [[0,1,2,3,4],\n                       [2,3,4],\n                       [4,0,1,2,3]]",
                "Output": "** 2",
                "Explanation": "** The longest common subpath is [2,3]."
            },
            {
                "Input": "** n = 3, paths = [[0],[1],[2]]",
                "Output": "** 0",
                "Explanation": "** There is no common subpath shared by the three paths."
            },
            {
                "Input": "** n = 5, paths = [[0,1,2,3,4],\n                       [4,3,2,1,0]]",
                "Output": "** 1",
                "Explanation": "** The possible longest common subpaths are [0], [1], [2], [3], and [4]. All have a length of 1."
            }
        ]
    },
    {
        "Title": "Count Square Sum Triples",
        "slug": "count-square-sum-triples",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 5",
                "Output": "** 2",
                "Explanation": "The square triples are (3,4,5) and (4,3,5)."
            },
            {
                "Input": "** n = 10",
                "Output": "** 4",
                "Explanation": "The square triples are (3,4,5), (4,3,5), (6,8,10), and (8,6,10)."
            }
        ]
    },
    {
        "Title": "Nearest Exit from Entrance in Maze",
        "slug": "nearest-exit-from-entrance-in-maze",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** maze = [[\"+\",\"+\",\".\",\"+\"],[\".\",\".\",\".\",\"+\"],[\"+\",\"+\",\"+\",\".\"]], entrance = [1,2]",
                "Output": "** 1",
                "Explanation": "** There are 3 exits in this maze at [1,0], [0,2], and [2,3].\nInitially, you are at the entrance cell [1,2].\n- You can reach [1,0] by moving 2 steps left.\n- You can reach [0,2] by moving 1 step up.\nIt is impossible to reach [2,3] from the entrance.\nThus, the nearest exit is [0,2], which is 1 step away."
            },
            {
                "Input": "** maze = [[\"+\",\"+\",\"+\"],[\".\",\".\",\".\"],[\"+\",\"+\",\"+\"]], entrance = [1,0]",
                "Output": "** 2",
                "Explanation": "** There is 1 exit in this maze at [1,2].\n[1,0] does not count as an exit since it is the entrance cell.\nInitially, you are at the entrance cell [1,0].\n- You can reach [1,2] by moving 2 steps right.\nThus, the nearest exit is [1,2], which is 2 steps away."
            },
            {
                "Input": "** maze = [[\".\",\"+\"]], entrance = [0,0]",
                "Output": "** -1",
                "Explanation": "** There are no exits in this maze."
            }
        ]
    },
    {
        "Title": "Sum Game",
        "slug": "sum-game",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** num = \"5023\"",
                "Output": "** false",
                "Explanation": "** There are no moves to be made.\nThe sum of the first half is equal to the sum of the second half: 5 + 0 = 2 + 3."
            },
            {
                "Input": "** num = \"25??\"",
                "Output": "** true",
                "Explanation": "** Alice can replace one of the '?'s with '9' and it will be impossible for Bob to make the sums equal."
            },
            {
                "Input": "** num = \"?3295???\"",
                "Output": "** false",
                "Explanation": "** It can be proven that Bob will always win. One possible outcome is:\n- Alice replaces the first '?' with '9'. num = \"93295???\".\n- Bob replaces one of the '?' in the right half with '9'. num = \"932959??\".\n- Alice replaces one of the '?' in the right half with '2'. num = \"9329592?\".\n- Bob replaces the last '?' in the right half with '7'. num = \"93295927\".\nBob wins because 9 + 3 + 2 + 9 = 5 + 9 + 2 + 7."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Reach Destination in Time",
        "slug": "minimum-cost-to-reach-destination-in-time",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** maxTime = 30, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]",
                "Output": "** 11",
                "Explanation": "** The path to take is 0 -> 1 -> 2 -> 5, which takes 30 minutes and has $11 worth of passing fees."
            }
        ]
    },
    {
        "Title": "Concatenation of Array",
        "slug": "concatenation-of-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,1]",
                "Output": "** [1,2,1,1,2,1]",
                "Explanation": "** The array ans is formed as follows:\n- ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]\n- ans = [1,2,1,1,2,1]"
            },
            {
                "Input": "** nums = [1,3,2,1]",
                "Output": "** [1,3,2,1,1,3,2,1]",
                "Explanation": "** The array ans is formed as follows:\n- ans = [nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]]\n- ans = [1,3,2,1,1,3,2,1]"
            }
        ]
    },
    {
        "Title": "Unique Length-3 Palindromic Subsequences",
        "slug": "unique-length-3-palindromic-subsequences",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"aabca\"",
                "Output": "** 3",
                "Explanation": "** The 3 palindromic subsequences of length 3 are:\n- \"aba\" (subsequence of \"aabca\")\n- \"aaa\" (subsequence of \"aabca\")\n- \"aca\" (subsequence of \"aabca\")"
            },
            {
                "Input": "** s = \"adc\"",
                "Output": "** 0",
                "Explanation": "** There are no palindromic subsequences of length 3 in \"adc\"."
            },
            {
                "Input": "** s = \"bbcbaba\"",
                "Output": "** 4",
                "Explanation": "** The 4 palindromic subsequences of length 3 are:\n- \"bbb\" (subsequence of \"bbcbaba\")\n- \"bcb\" (subsequence of \"bbcbaba\")\n- \"bab\" (subsequence of \"bbcbaba\")\n- \"aba\" (subsequence of \"bbcbaba\")"
            }
        ]
    },
    {
        "Title": "Painting a Grid With Three Different Colors",
        "slug": "painting-a-grid-with-three-different-colors",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** m = 1, n = 1",
                "Output": "** 3",
                "Explanation": "** The three possible colorings are shown in the image above."
            },
            {
                "Input": "** m = 1, n = 2",
                "Output": "** 6",
                "Explanation": "** The six possible colorings are shown in the image above."
            }
        ]
    },
    {
        "Title": "Merge BSTs to Create Single BST",
        "slug": "merge-bsts-to-create-single-bst",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** trees = [[2,1],[3,2,5],[5,4]]",
                "Output": "** [3,2,5,1,null,4]",
                "Explanation": "**\nIn the first operation, pick i=1 and j=0, and merge trees[0] into trees[1].\nDelete trees[0], so trees = [[3,2,5,1],[5,4]].\n![](https://assets.leetcode.com/uploads/2021/06/24/diagram.png)\nIn the second operation, pick i=0 and j=1, and merge trees[1] into trees[0].\nDelete trees[1], so trees = [[3,2,5,1,null,4]].\n![](https://assets.leetcode.com/uploads/2021/06/24/diagram-2.png)\nThe resulting tree, shown above, is a valid BST, so return its root."
            },
            {
                "Input": "** trees = [[5,3,8],[3,2,6]]",
                "Output": "** []",
                "Explanation": "**\nPick i=0 and j=1 and merge trees[1] into trees[0].\nDelete trees[1], so trees = [[5,3,8,2,6]].\n![](https://assets.leetcode.com/uploads/2021/06/24/diagram-3.png)\nThe resulting tree is shown above. This is the only valid operation that can be performed, but the resulting tree is not a valid BST, so return null."
            },
            {
                "Input": "** trees = [[5,4],[3]]",
                "Output": "** []",
                "Explanation": "** It is impossible to perform any operations."
            }
        ]
    },
    {
        "Title": "Confirmation Rate",
        "slug": "confirmation-rate",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nSignups table:\n+---------+---------------------+\n| user_id | time_stamp          |\n+---------+---------------------+\n| 3       | 2020-03-21 10:16:13 |\n| 7       | 2020-01-04 13:57:59 |\n| 2       | 2020-07-29 23:09:44 |\n| 6       | 2020-12-09 10:39:37 |\n+---------+---------------------+\nConfirmations table:\n+---------+---------------------+-----------+\n| user_id | time_stamp          | action    |\n+---------+---------------------+-----------+\n| 3       | 2021-01-06 03:30:46 | timeout   |\n| 3       | 2021-07-14 14:00:00 | timeout   |\n| 7       | 2021-06-12 11:57:29 | confirmed |\n| 7       | 2021-06-13 12:58:28 | confirmed |\n| 7       | 2021-06-14 13:59:27 | confirmed |\n| 2       | 2021-01-22 00:00:00 | confirmed |\n| 2       | 2021-02-28 23:59:59 | timeout   |\n+---------+---------------------+-----------+",
                "Output": "** \n+---------+-------------------+\n| user_id | confirmation_rate |\n+---------+-------------------+\n| 6       | 0.00              |\n| 3       | 0.00              |\n| 7       | 1.00              |\n| 2       | 0.50              |\n+---------+-------------------+",
                "Explanation": "** \nUser 6 did not request any confirmation messages. The confirmation rate is 0.\nUser 3 made 2 requests and both timed out. The confirmation rate is 0.\nUser 7 made 3 requests and all were confirmed. The confirmation rate is 1.\nUser 2 made 2 requests where one was confirmed and the other timed out. The confirmation rate is 1 / 2 = 0.5."
            }
        ]
    },
    {
        "Title": "Maximum Number of Words You Can Type",
        "slug": "maximum-number-of-words-you-can-type",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** text = \"hello world\", brokenLetters = \"ad\"",
                "Output": "** 1",
                "Explanation": "** We cannot type \"world\" because the 'd' key is broken."
            },
            {
                "Input": "** text = \"leet code\", brokenLetters = \"lt\"",
                "Output": "** 1",
                "Explanation": "** We cannot type \"leet\" because the 'l' and 't' keys are broken."
            },
            {
                "Input": "** text = \"leet code\", brokenLetters = \"e\"",
                "Output": "** 0",
                "Explanation": "** We cannot type either word because the 'e' key is broken."
            }
        ]
    },
    {
        "Title": "Add Minimum Number of Rungs",
        "slug": "add-minimum-number-of-rungs",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** rungs = [1,3,5,10], dist = 2",
                "Output": "** 2",
                "Explanation": "**You currently cannot reach the last rung.\nAdd rungs at heights 7 and 8 to climb this ladder. \nThe ladder will now have rungs at [1,3,5,7,8,10]."
            },
            {
                "Input": "** rungs = [3,6,8,10], dist = 3",
                "Output": "** 0",
                "Explanation": "**\nThis ladder can be climbed without adding additional rungs."
            },
            {
                "Input": "** rungs = [3,4,6,7], dist = 2",
                "Output": "** 1",
                "Explanation": "**\nYou currently cannot reach the first rung from the ground.\nAdd a rung at height 1 to climb this ladder.\nThe ladder will now have rungs at [1,3,4,6,7]."
            }
        ]
    },
    {
        "Title": "Maximum Number of Points with Cost",
        "slug": "maximum-number-of-points-with-cost",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** points = [[1,2,3],[1,5,1],[3,1,1]]",
                "Output": "** 9",
                "Explanation": "**\nThe blue cells denote the optimal cells to pick, which have coordinates (0, 2), (1, 1), and (2, 0).\nYou add 3 + 5 + 3 = 11 to your score.\nHowever, you must subtract abs(2 - 1) + abs(1 - 0) = 2 from your score.\nYour final score is 11 - 2 = 9."
            },
            {
                "Input": "** points = [[1,5],[2,3],[4,2]]",
                "Output": "** 11",
                "Explanation": "**\nThe blue cells denote the optimal cells to pick, which have coordinates (0, 1), (1, 1), and (2, 0).\nYou add 5 + 3 + 4 = 12 to your score.\nHowever, you must subtract abs(1 - 1) + abs(1 - 0) = 1 from your score.\nYour final score is 12 - 1 = 11."
            }
        ]
    },
    {
        "Title": "Maximum Genetic Difference Query",
        "slug": "maximum-genetic-difference-query",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** parents = [-1,0,1,1], queries = [[0,2],[3,2],[2,5]]",
                "Output": "** [2,3,7]",
                "Explanation": "** The queries are processed as follows:\n- [0,2]: The node with the maximum genetic difference is 0, with a difference of 2 XOR 0 = 2.\n- [3,2]: The node with the maximum genetic difference is 1, with a difference of 2 XOR 1 = 3.\n- [2,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7."
            },
            {
                "Input": "** parents = [3,7,-1,2,0,7,0,2], queries = [[4,6],[1,15],[0,5]]",
                "Output": "** [6,14,7]",
                "Explanation": "** The queries are processed as follows:\n- [4,6]: The node with the maximum genetic difference is 0, with a difference of 6 XOR 0 = 6.\n- [1,15]: The node with the maximum genetic difference is 1, with a difference of 15 XOR 1 = 14.\n- [0,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7."
            }
        ]
    },
    {
        "Title": "Check if All Characters Have Equal Number of Occurrences",
        "slug": "check-if-all-characters-have-equal-number-of-occurrences",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"abacbc\"",
                "Output": "** true",
                "Explanation": "** The characters that appear in s are 'a', 'b', and 'c'. All characters occur 2 times in s."
            },
            {
                "Input": "** s = \"aaabb\"",
                "Output": "** false",
                "Explanation": "** The characters that appear in s are 'a' and 'b'.\n'a' occurs 3 times while 'b' occurs 2 times, which is not the same number of times."
            }
        ]
    },
    {
        "Title": "The Number of the Smallest Unoccupied Chair",
        "slug": "the-number-of-the-smallest-unoccupied-chair",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** times = [[1,4],[2,3],[4,6]], targetFriend = 1",
                "Output": "** 1",
                "Explanation": "** \n- Friend 0 arrives at time 1 and sits on chair 0.\n- Friend 1 arrives at time 2 and sits on chair 1.\n- Friend 1 leaves at time 3 and chair 1 becomes empty.\n- Friend 0 leaves at time 4 and chair 0 becomes empty.\n- Friend 2 arrives at time 4 and sits on chair 0.\nSince friend 1 sat on chair 1, we return 1."
            },
            {
                "Input": "** times = [[3,10],[1,5],[2,6]], targetFriend = 0",
                "Output": "** 2",
                "Explanation": "** \n- Friend 1 arrives at time 1 and sits on chair 0.\n- Friend 2 arrives at time 2 and sits on chair 1.\n- Friend 0 arrives at time 3 and sits on chair 2.\n- Friend 1 leaves at time 5 and chair 0 becomes empty.\n- Friend 2 leaves at time 6 and chair 1 becomes empty.\n- Friend 0 leaves at time 10 and chair 2 becomes empty.\nSince friend 0 sat on chair 2, we return 2."
            }
        ]
    },
    {
        "Title": "Describe the Painting",
        "slug": "describe-the-painting",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** segments = [[1,4,5],[4,7,7],[1,7,9]]",
                "Output": "** [[1,4,14],[4,7,16]]",
                "Explanation": "** The painting can be described as follows:\n- [1,4) is colored {5,9} (with a sum of 14) from the first and third segments.\n- [4,7) is colored {7,9} (with a sum of 16) from the second and third segments."
            },
            {
                "Input": "** segments = [[1,7,9],[6,8,15],[8,10,7]]",
                "Output": "** [[1,6,9],[6,7,24],[7,8,15],[8,10,7]]",
                "Explanation": "** The painting can be described as follows:\n- [1,6) is colored 9 from the first segment.\n- [6,7) is colored {9,15} (with a sum of 24) from the first and second segments.\n- [7,8) is colored 15 from the second segment.\n- [8,10) is colored 7 from the third segment."
            },
            {
                "Input": "** segments = [[1,4,5],[1,4,7],[4,7,1],[4,7,11]]",
                "Output": "** [[1,4,12],[4,7,12]]",
                "Explanation": "** The painting can be described as follows:\n- [1,4) is colored {5,7} (with a sum of 12) from the first and second segments.\n- [4,7) is colored {1,11} (with a sum of 12) from the third and fourth segments.\nNote that returning a single segment [1,7) is incorrect because the mixed color sets are different."
            }
        ]
    },
    {
        "Title": "Number of Visible People in a Queue",
        "slug": "number-of-visible-people-in-a-queue",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** heights = [10,6,8,5,11,9]",
                "Output": "** [3,1,2,1,1,0]",
                "Explanation": "**\nPerson 0 can see person 1, 2, and 4.\nPerson 1 can see person 2.\nPerson 2 can see person 3 and 4.\nPerson 3 can see person 4.\nPerson 4 can see person 5.\nPerson 5 can see no one since nobody is to the right of them."
            }
        ]
    },
    {
        "Title": "Sum of Digits of String After Convert",
        "slug": "sum-of-digits-of-string-after-convert",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"iiii\", k = 1",
                "Output": "** 36",
                "Explanation": "** The operations are as follows:\n- Convert: \"iiii\" \u279d \"(9)(9)(9)(9)\" \u279d \"9999\" \u279d 9999\n- Transform #1: 9999 \u279d 9 + 9 + 9 + 9 \u279d 36\nThus the resulting integer is 36."
            },
            {
                "Input": "** s = \"leetcode\", k = 2",
                "Output": "** 6",
                "Explanation": "** The operations are as follows:\n- Convert: \"leetcode\" \u279d \"(12)(5)(5)(20)(3)(15)(4)(5)\" \u279d \"12552031545\" \u279d 12552031545\n- Transform #1: 12552031545 \u279d 1 + 2 + 5 + 5 + 2 + 0 + 3 + 1 + 5 + 4 + 5 \u279d 33\n- Transform #2: 33 \u279d 3 + 3 \u279d 6\nThus the resulting integer is 6."
            },
            {
                "Input": "** s = \"zbax\", k = 2",
                "Output": "** 8",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Largest Number After Mutating Substring",
        "slug": "largest-number-after-mutating-substring",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** num = \"132\", change = [9,8,5,0,3,6,4,2,6,8]",
                "Output": "** \"832\"",
                "Explanation": "** Replace the substring \"1\":\n- 1 maps to change[1] = 8.\nThus, \"132\" becomes \"832\".\n\"832\" is the largest number that can be created, so return it."
            },
            {
                "Input": "** num = \"021\", change = [9,4,3,5,7,2,1,9,0,6]",
                "Output": "** \"934\"",
                "Explanation": "** Replace the substring \"021\":\n- 0 maps to change[0] = 9.\n- 2 maps to change[2] = 3.\n- 1 maps to change[1] = 4.\nThus, \"021\" becomes \"934\".\n\"934\" is the largest number that can be created, so return it."
            },
            {
                "Input": "** num = \"5\", change = [1,4,7,5,3,2,5,6,9,4]",
                "Output": "** \"5\"",
                "Explanation": "** \"5\" is already the largest number that can be created, so return it."
            }
        ]
    },
    {
        "Title": "Maximum Compatibility Score Sum",
        "slug": "maximum-compatibility-score-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** students = [[1,1,0],[1,0,1],[0,0,1]], mentors = [[1,0,0],[0,0,1],[1,1,0]]",
                "Output": "** 8",
                "Explanation": "**\u00a0We assign students to mentors in the following way:\n- student 0 to mentor 2 with a compatibility score of 3.\n- student 1 to mentor 0 with a compatibility score of 2.\n- student 2 to mentor 1 with a compatibility score of 3.\nThe compatibility score sum is 3 + 2 + 3 = 8."
            },
            {
                "Input": "** students = [[0,0],[0,0],[0,0]], mentors = [[1,1],[1,1],[1,1]]",
                "Output": "** 0",
                "Explanation": "** The compatibility score of any student-mentor pair is 0."
            }
        ]
    },
    {
        "Title": "Delete Duplicate Folders in System",
        "slug": "delete-duplicate-folders-in-system",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** paths = [[\"a\"],[\"c\"],[\"d\"],[\"a\",\"b\"],[\"c\",\"b\"],[\"d\",\"a\"]]",
                "Output": "** [[\"d\"],[\"d\",\"a\"]]",
                "Explanation": "** The file structure is as shown.\nFolders \"/a\" and \"/c\" (and their subfolders) are marked for deletion because they both contain an empty\nfolder named \"b\"."
            },
            {
                "Input": "** paths = [[\"a\"],[\"c\"],[\"a\",\"b\"],[\"c\",\"b\"],[\"a\",\"b\",\"x\"],[\"a\",\"b\",\"x\",\"y\"],[\"w\"],[\"w\",\"y\"]]",
                "Output": "** [[\"c\"],[\"c\",\"b\"],[\"a\"],[\"a\",\"b\"]]",
                "Explanation": "** The file structure is as shown. \nFolders \"/a/b/x\" and \"/w\" (and their subfolders) are marked for deletion because they both contain an empty folder named \"y\".\nNote that folders \"/a\" and \"/c\" are identical after the deletion, but they are not deleted because they were not marked beforehand."
            },
            {
                "Input": "** paths = [[\"a\",\"b\"],[\"c\",\"d\"],[\"c\"],[\"a\"]]",
                "Output": "** [[\"c\"],[\"c\",\"d\"],[\"a\"],[\"a\",\"b\"]]",
                "Explanation": "** All folders are unique in the file system.\nNote that the returned array can be in a different order as the order does not matter."
            }
        ]
    },
    {
        "Title": "Three Divisors",
        "slug": "three-divisors",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** false\n**Explantion:** 2 has only two divisors: 1 and 2.",
                "Explanation": null
            },
            {
                "Input": "** n = 4",
                "Output": "** true\n**Explantion:** 4 has three divisors: 1, 2, and 4.",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Maximum Number of Weeks for Which You Can Work",
        "slug": "maximum-number-of-weeks-for-which-you-can-work",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** milestones = [1,2,3]",
                "Output": "** 6",
                "Explanation": "** One possible scenario is:\n\u200b\u200b\u200b\u200b- During the 1st week, you will work on a milestone of project 0.\n- During the 2nd week, you will work on a milestone of project 2.\n- During the 3rd week, you will work on a milestone of project 1.\n- During the 4th week, you will work on a milestone of project 2.\n- During the 5th week, you will work on a milestone of project 1.\n- During the 6th week, you will work on a milestone of project 2.\nThe total number of weeks is 6."
            },
            {
                "Input": "** milestones = [5,2,1]",
                "Output": "** 7",
                "Explanation": "** One possible scenario is:\n- During the 1st week, you will work on a milestone of project 0.\n- During the 2nd week, you will work on a milestone of project 1.\n- During the 3rd week, you will work on a milestone of project 0.\n- During the 4th week, you will work on a milestone of project 1.\n- During the 5th week, you will work on a milestone of project 0.\n- During the 6th week, you will work on a milestone of project 2.\n- During the 7th week, you will work on a milestone of project 0.\nThe total number of weeks is 7.\nNote that you cannot work on the last milestone of project 0 on 8th week because it would violate the rules.\nThus, one milestone in project 0 will remain unfinished."
            }
        ]
    },
    {
        "Title": "Minimum Garden Perimeter to Collect Enough Apples",
        "slug": "minimum-garden-perimeter-to-collect-enough-apples",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** neededApples = 1",
                "Output": "** 8",
                "Explanation": "** A square plot of side length 1 does not contain any apples.\nHowever, a square plot of side length 2 has 12 apples inside (as depicted in the image above).\nThe perimeter is 2 * 4 = 8."
            }
        ]
    },
    {
        "Title": "Count Number of Special Subsequences",
        "slug": "count-number-of-special-subsequences",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [0,1,2,2]",
                "Output": "** 3",
                "Explanation": "** The special subsequences are bolded [**0**,**1**,**2**,2], [**0**,**1**,2,**2**], and [**0**,**1**,**2**,**2**]."
            },
            {
                "Input": "** nums = [2,2,0,0]",
                "Output": "** 0",
                "Explanation": "** There are no special subsequences in [2,2,0,0]."
            },
            {
                "Input": "** nums = [0,1,2,0,1,2]",
                "Output": "** 7",
                "Explanation": "** The special subsequences are bolded:\n- [**0**,**1**,**2**,0,1,2]\n- [**0**,**1**,2,0,1,**2**]\n- [**0**,**1**,**2**,0,1,**2**]\n- [**0**,**1**,2,0,**1**,**2**]\n- [**0**,1,2,**0**,**1**,**2**]\n- [**0**,1,2,0,**1**,**2**]\n- [0,1,2,**0**,**1**,**2**]"
            }
        ]
    },
    {
        "Title": "Delete Characters to Make Fancy String",
        "slug": "delete-characters-to-make-fancy-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"leeetcode\"",
                "Output": "** \"leetcode\"",
                "Explanation": "**\nRemove an 'e' from the first group of 'e's to create \"leetcode\".\nNo three consecutive characters are equal, so return \"leetcode\"."
            },
            {
                "Input": "** s = \"aaabaaaa\"",
                "Output": "** \"aabaa\"",
                "Explanation": "**\nRemove an 'a' from the first group of 'a's to create \"aabaaaa\".\nRemove two 'a's from the second group of 'a's to create \"aabaa\".\nNo three consecutive characters are equal, so return \"aabaa\"."
            },
            {
                "Input": "** s = \"aab\"",
                "Output": "** \"aab\"",
                "Explanation": "** No three consecutive characters are equal, so return \"aab\"."
            }
        ]
    },
    {
        "Title": "Check if Move is Legal",
        "slug": "check-if-move-is-legal",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** board = [[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\"W\",\"B\",\"B\",\".\",\"W\",\"W\",\"W\",\"B\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"]], rMove = 4, cMove = 3, color = \"B\"",
                "Output": "** true",
                "Explanation": "** '.', 'W', and 'B' are represented by the colors blue, white, and black respectively, and cell (rMove, cMove) is marked with an 'X'.\nThe two good lines with the chosen cell as an endpoint are annotated above with the red rectangles."
            },
            {
                "Input": "** board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"B\",\".\",\".\",\"W\",\".\",\".\",\".\"],[\".\",\".\",\"W\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\"B\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\"B\",\"W\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\"W\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"B\"]], rMove = 4, cMove = 4, color = \"W\"",
                "Output": "** false",
                "Explanation": "** While there are good lines with the chosen cell as a middle cell, there are no good lines with the chosen cell as an endpoint."
            }
        ]
    },
    {
        "Title": "Minimum Total Space Wasted With K Resizing Operations",
        "slug": "minimum-total-space-wasted-with-k-resizing-operations",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [10,20], k = 0",
                "Output": "** 10",
                "Explanation": "** size = [20,20].\nWe can set the initial size to be 20.\nThe total wasted space is (20 - 10) + (20 - 20) = 10."
            },
            {
                "Input": "** nums = [10,20,30], k = 1",
                "Output": "** 10",
                "Explanation": "** size = [20,20,30].\nWe can set the initial size to be 20 and resize to 30 at time 2. \nThe total wasted space is (20 - 10) + (20 - 20) + (30 - 30) = 10."
            },
            {
                "Input": "** nums = [10,20,15,30,20], k = 2",
                "Output": "** 15",
                "Explanation": "** size = [10,20,20,30,30].\nWe can set the initial size to 10, resize to 20 at time 1, and resize to 30 at time 3.\nThe total wasted space is (10 - 10) + (20 - 20) + (20 - 15) + (30 - 30) + (30 - 20) = 15."
            }
        ]
    },
    {
        "Title": "Maximum Product of the Length of Two Palindromic Substrings",
        "slug": "maximum-product-of-the-length-of-two-palindromic-substrings",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"ababbb\"",
                "Output": "** 9",
                "Explanation": "** Substrings \"aba\" and \"bbb\" are palindromes with odd length. product = 3 * 3 = 9."
            },
            {
                "Input": "** s = \"zaaaxbbby\"",
                "Output": "** 9",
                "Explanation": "** Substrings \"aaa\" and \"bbb\" are palindromes with odd length. product = 3 * 3 = 9."
            }
        ]
    },
    {
        "Title": "Check If String Is a Prefix of Array",
        "slug": "check-if-string-is-a-prefix-of-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"iloveleetcode\", words = [\"i\",\"love\",\"leetcode\",\"apples\"]",
                "Output": "** true",
                "Explanation": "**\ns can be made by concatenating \"i\", \"love\", and \"leetcode\" together."
            },
            {
                "Input": "** s = \"iloveleetcode\", words = [\"apples\",\"i\",\"love\",\"leetcode\"]",
                "Output": "** false",
                "Explanation": "**\nIt is impossible to make s using a prefix of arr."
            }
        ]
    },
    {
        "Title": "Remove Stones to Minimize the Total",
        "slug": "remove-stones-to-minimize-the-total",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** piles = [5,4,9], k = 2",
                "Output": "** 12",
                "Explanation": "**\u00a0Steps of a possible scenario are:\n- Apply the operation on pile 2. The resulting piles are [5,4,5].\n- Apply the operation on pile 0. The resulting piles are [3,4,5].\nThe total number of stones in [3,4,5] is 12."
            },
            {
                "Input": "** piles = [4,3,6,7], k = 3",
                "Output": "** 12",
                "Explanation": "**\u00a0Steps of a possible scenario are:\n- Apply the operation on pile 2. The resulting piles are [4,3,3,7].\n- Apply the operation on pile 3. The resulting piles are [4,3,3,4].\n- Apply the operation on pile 0. The resulting piles are [2,3,3,4].\nThe total number of stones in [2,3,3,4] is 12."
            }
        ]
    },
    {
        "Title": "Minimum Number of Swaps to Make the String Balanced",
        "slug": "minimum-number-of-swaps-to-make-the-string-balanced",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"][][\"",
                "Output": "** 1",
                "Explanation": "** You can make the string balanced by swapping index 0 with index 3.\nThe resulting string is \"[[]]\"."
            },
            {
                "Input": "** s = \"]]][[[\"",
                "Output": "** 2",
                "Explanation": "** You can do the following to make the string balanced:\n- Swap index 0 with index 4. s = \"[]][][\".\n- Swap index 1 with index 5. s = \"[[][]]\".\nThe resulting string is \"[[][]]\"."
            },
            {
                "Input": "** s = \"[]\"",
                "Output": "** 0",
                "Explanation": "** The string is already balanced."
            }
        ]
    },
    {
        "Title": "Find the Longest Valid Obstacle Course at Each Position",
        "slug": "find-the-longest-valid-obstacle-course-at-each-position",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** obstacles = [1,2,3,2]",
                "Output": "** [1,2,3,3]",
                "Explanation": "** The longest valid obstacle course at each position is:\n- i = 0: [1], [1] has length 1.\n- i = 1: [1,2], [1,2] has length 2.\n- i = 2: [1,2,3], [1,2,3] has length 3.\n- i = 3: [1,2,3,2], [1,2,2] has length 3."
            },
            {
                "Input": "** obstacles = [2,2,1]",
                "Output": "** [1,2,1]",
                "Explanation": "** The longest valid obstacle course at each position is:\n- i = 0: [2], [2] has length 1.\n- i = 1: [2,2], [2,2] has length 2.\n- i = 2: [2,2,1], [1] has length 1."
            },
            {
                "Input": "** obstacles = [3,1,5,6,4,2]",
                "Output": "** [1,1,2,3,2,2]",
                "Explanation": "** The longest valid obstacle course at each position is:\n- i = 0: [3], [3] has length 1.\n- i = 1: [3,1], [1] has length 1.\n- i = 2: [3,1,5], [3,5] has length 2. [1,5] is also valid.\n- i = 3: [3,1,5,6], [3,5,6] has length 3. [1,5,6] is also valid.\n- i = 4: [3,1,5,6,4], [3,4] has length 2. [1,4] is also valid.\n- i = 5: [3,1,5,6,4,2], [1,2] has length 2."
            }
        ]
    },
    {
        "Title": "Employees With Missing Information",
        "slug": "employees-with-missing-information",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nEmployees table:\n+-------------+----------+\n| employee_id | name     |\n+-------------+----------+\n| 2           | Crew     |\n| 4           | Haven    |\n| 5           | Kristian |\n+-------------+----------+\nSalaries table:\n+-------------+--------+\n| employee_id | salary |\n+-------------+--------+\n| 5           | 76071  |\n| 1           | 22517  |\n| 4           | 63539  |\n+-------------+--------+",
                "Output": "** \n+-------------+\n| employee_id |\n+-------------+\n| 1           |\n| 2           |\n+-------------+",
                "Explanation": "** \nEmployees 1, 2, 4, and 5 are working at this company.\nThe name of employee 1 is missing.\nThe salary of employee 2 is missing."
            }
        ]
    },
    {
        "Title": "Number of Strings That Appear as Substrings in Word",
        "slug": "number-of-strings-that-appear-as-substrings-in-word",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** patterns = [\"a\",\"abc\",\"bc\",\"d\"], word = \"abc\"",
                "Output": "** 3",
                "Explanation": "**\n- \"a\" appears as a substring in \"abc\".\n- \"abc\" appears as a substring in \"abc\".\n- \"bc\" appears as a substring in \"abc\".\n- \"d\" does not appear as a substring in \"abc\".\n3 of the strings in patterns appear as a substring in word."
            },
            {
                "Input": "** patterns = [\"a\",\"b\",\"c\"], word = \"aaaaabbbbb\"",
                "Output": "** 2",
                "Explanation": "**\n- \"a\" appears as a substring in \"aaaaabbbbb\".\n- \"b\" appears as a substring in \"aaaaabbbbb\".\n- \"c\" does not appear as a substring in \"aaaaabbbbb\".\n2 of the strings in patterns appear as a substring in word."
            },
            {
                "Input": "** patterns = [\"a\",\"a\",\"a\"], word = \"ab\"",
                "Output": "** 3",
                "Explanation": "** Each of the patterns appears as a substring in word \"ab\"."
            }
        ]
    },
    {
        "Title": "Array With Elements Not Equal to Average of Neighbors",
        "slug": "array-with-elements-not-equal-to-average-of-neighbors",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** [1,2,4,5,3]",
                "Explanation": "**\nWhen i=1, nums[i] = 2, and the average of its neighbors is (1+4) / 2 = 2.5.\nWhen i=2, nums[i] = 4, and the average of its neighbors is (2+5) / 2 = 3.5.\nWhen i=3, nums[i] = 5, and the average of its neighbors is (4+3) / 2 = 3.5."
            },
            {
                "Input": "** nums = [6,2,0,9,7]",
                "Output": "** [9,7,6,2,0]",
                "Explanation": "**\nWhen i=1, nums[i] = 7, and the average of its neighbors is (9+6) / 2 = 7.5.\nWhen i=2, nums[i] = 6, and the average of its neighbors is (7+2) / 2 = 4.5.\nWhen i=3, nums[i] = 2, and the average of its neighbors is (6+0) / 2 = 3."
            }
        ]
    },
    {
        "Title": "Minimum Non-Zero Product of the Array Elements",
        "slug": "minimum-non-zero-product-of-the-array-elements",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** p = 1",
                "Output": "** 1",
                "Explanation": "** nums = [1].\nThere is only one element, so the product equals that element."
            },
            {
                "Input": "** p = 2",
                "Output": "** 6",
                "Explanation": "** nums = [01, 10, 11].\nAny swap would either make the product 0 or stay the same.\nThus, the array product of 1 * 2 * 3 = 6 is already minimized."
            },
            {
                "Input": "** p = 3",
                "Output": "** 1512",
                "Explanation": "** nums = [001, 010, 011, 100, 101, 110, 111]\n- In the first operation we can swap the leftmost bit of the second and fifth elements.\n    - The resulting array is [001, 110, 011, 100, 001, 110, 111].\n- In the second operation we can swap the middle bit of the third and fourth elements.\n    - The resulting array is [001, 110, 001, 110, 001, 110, 111].\nThe array product is 1 * 6 * 1 * 6 * 1 * 6 * 7 = 1512, which is the minimum possible product."
            }
        ]
    },
    {
        "Title": "Last Day Where You Can Still Cross",
        "slug": "last-day-where-you-can-still-cross",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]]",
                "Output": "** 2",
                "Explanation": "** The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 2."
            },
            {
                "Input": "** row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]]",
                "Output": "** 1",
                "Explanation": "** The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 1."
            },
            {
                "Input": "** row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]",
                "Output": "** 3",
                "Explanation": "** The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 3."
            }
        ]
    },
    {
        "Title": "Find if Path Exists in Graph",
        "slug": "find-if-path-exists-in-graph",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2",
                "Output": "** true",
                "Explanation": "** There are two paths from vertex 0 to vertex 2:\n- 0 \u2192 1 \u2192 2\n- 0 \u2192 2"
            },
            {
                "Input": "** n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5",
                "Output": "** false",
                "Explanation": "** There is no path from vertex 0 to vertex 5."
            }
        ]
    },
    {
        "Title": "Minimum Time to Type Word Using Special Typewriter",
        "slug": "minimum-time-to-type-word-using-special-typewriter",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** word = \"abc\"",
                "Output": "** 5",
                "Explanation": "**The characters are printed as follows:\n- Type the character 'a' in 1 second since the pointer is initially on 'a'.\n- Move the pointer clockwise to 'b' in 1 second.\n- Type the character 'b' in 1 second.\n- Move the pointer clockwise to 'c' in 1 second.\n- Type the character 'c' in 1 second."
            },
            {
                "Input": "** word = \"bza\"",
                "Output": "** 7",
                "Explanation": "**The characters are printed as follows:\n- Move the pointer clockwise to 'b' in 1 second.\n- Type the character 'b' in 1 second.\n- Move the pointer counterclockwise to 'z' in 2 seconds.\n- Type the character 'z' in 1 second.\n- Move the pointer clockwise to 'a' in 1 second.\n- Type the character 'a' in 1 second."
            },
            {
                "Input": "** word = \"zjpc\"",
                "Output": "** 34",
                "Explanation": "**\nThe characters are printed as follows:\n- Move the pointer counterclockwise to 'z' in 1 second.\n- Type the character 'z' in 1 second.\n- Move the pointer clockwise to 'j' in 10 seconds.\n- Type the character 'j' in 1 second.\n- Move the pointer clockwise to 'p' in 6 seconds.\n- Type the character 'p' in 1 second.\n- Move the pointer counterclockwise to 'c' in 13 seconds.\n- Type the character 'c' in 1 second."
            }
        ]
    },
    {
        "Title": "Maximum Matrix Sum",
        "slug": "maximum-matrix-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** matrix = [[1,-1],[-1,1]]",
                "Output": "** 4",
                "Explanation": "** We can follow the following steps to reach sum equals 4:\n- Multiply the 2 elements in the first row by -1.\n- Multiply the 2 elements in the first column by -1."
            },
            {
                "Input": "** matrix = [[1,2,3],[-1,-2,-3],[1,2,3]]",
                "Output": "** 16",
                "Explanation": "** We can follow the following step to reach sum equals 16:\n- Multiply the 2 last elements in the second row by -1."
            }
        ]
    },
    {
        "Title": "Number of Ways to Arrive at Destination",
        "slug": "number-of-ways-to-arrive-at-destination",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 7, roads = [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]",
                "Output": "** 4",
                "Explanation": "** The shortest amount of time it takes to go from intersection 0 to intersection 6 is 7 minutes.\nThe four ways to get there in 7 minutes are:\n- 0 \u279d 6\n- 0 \u279d 4 \u279d 6\n- 0 \u279d 1 \u279d 2 \u279d 5 \u279d 6\n- 0 \u279d 1 \u279d 3 \u279d 5 \u279d 6"
            }
        ]
    },
    {
        "Title": "Number of Ways to Separate Numbers",
        "slug": "number-of-ways-to-separate-numbers",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** num = \"327\"",
                "Output": "** 2",
                "Explanation": "** You could have written down the numbers:\n3, 27\n327"
            },
            {
                "Input": "** num = \"094\"",
                "Output": "** 0",
                "Explanation": "** No numbers can have leading zeros and all numbers must be positive."
            },
            {
                "Input": "** num = \"0\"",
                "Output": "** 0",
                "Explanation": "** No numbers can have leading zeros and all numbers must be positive."
            }
        ]
    },
    {
        "Title": "Employees Whose Manager Left the Company",
        "slug": "employees-whose-manager-left-the-company",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "**  \nEmployees table:\n+-------------+-----------+------------+--------+\n| employee_id | name      | manager_id | salary |\n+-------------+-----------+------------+--------+\n| 3           | Mila      | 9          | 60301  |\n| 12          | Antonella | null       | 31000  |\n| 13          | Emery     | null       | 67084  |\n| 1           | Kalel     | 11         | 21241  |\n| 9           | Mikaela   | null       | 50937  |\n| 11          | Joziah    | 6          | 28485  |\n+-------------+-----------+------------+--------+",
                "Output": "** \n+-------------+\n| employee_id |\n+-------------+\n| 11          |\n+-------------+",
                "Explanation": "** \nThe employees with a salary less than $30000 are 1 (Kalel) and 11 (Joziah).\nKalel's manager is employee 11, who is still in the company (Joziah).\nJoziah's manager is employee 6, who left the company because there is no row for employee 6 as it was deleted."
            }
        ]
    },
    {
        "Title": "Find Greatest Common Divisor of Array",
        "slug": "find-greatest-common-divisor-of-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [2,5,6,9,10]",
                "Output": "** 2",
                "Explanation": "**\nThe smallest number in nums is 2.\nThe largest number in nums is 10.\nThe greatest common divisor of 2 and 10 is 2."
            },
            {
                "Input": "** nums = [7,5,6,8,3]",
                "Output": "** 1",
                "Explanation": "**\nThe smallest number in nums is 3.\nThe largest number in nums is 8.\nThe greatest common divisor of 3 and 8 is 1."
            },
            {
                "Input": "** nums = [3,3]",
                "Output": "** 3",
                "Explanation": "**\nThe smallest number in nums is 3.\nThe largest number in nums is 3.\nThe greatest common divisor of 3 and 3 is 3."
            }
        ]
    },
    {
        "Title": "Find Unique Binary String",
        "slug": "find-unique-binary-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [\"01\",\"10\"]",
                "Output": "** \"11\"",
                "Explanation": "** \"11\" does not appear in nums. \"00\" would also be correct."
            },
            {
                "Input": "** nums = [\"00\",\"01\"]",
                "Output": "** \"11\"",
                "Explanation": "** \"11\" does not appear in nums. \"10\" would also be correct."
            },
            {
                "Input": "** nums = [\"111\",\"011\",\"001\"]",
                "Output": "** \"101\"",
                "Explanation": "** \"101\" does not appear in nums. \"000\", \"010\", \"100\", and \"110\" would also be correct."
            }
        ]
    },
    {
        "Title": "Minimize the Difference Between Target and Chosen Elements",
        "slug": "minimize-the-difference-between-target-and-chosen-elements",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** mat = [[1,2,3],[4,5,6],[7,8,9]], target = 13",
                "Output": "** 0",
                "Explanation": "** One possible choice is to:\n- Choose 1 from the first row.\n- Choose 5 from the second row.\n- Choose 7 from the third row.\nThe sum of the chosen elements is 13, which equals the target, so the absolute difference is 0."
            },
            {
                "Input": "** mat = [[1],[2],[3]], target = 100",
                "Output": "** 94",
                "Explanation": "** The best possible choice is to:\n- Choose 1 from the first row.\n- Choose 2 from the second row.\n- Choose 3 from the third row.\nThe sum of the chosen elements is 6, and the absolute difference is 94."
            },
            {
                "Input": "** mat = [[1,2,9,8,7]], target = 6",
                "Output": "** 1",
                "Explanation": "** The best choice is to choose 7 from the first row.\nThe absolute difference is 1."
            }
        ]
    },
    {
        "Title": "Find Array Given Subset Sums",
        "slug": "find-array-given-subset-sums",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 3, sums = [-3,-2,-1,0,0,1,2,3]",
                "Output": "** [1,2,-3]",
                "Explanation": "** [1,2,-3] is able to achieve the given subset sums:\n- []: sum is 0\n- [1]: sum is 1\n- [2]: sum is 2\n- [1,2]: sum is 3\n- [-3]: sum is -3\n- [1,-3]: sum is -2\n- [2,-3]: sum is -1\n- [1,2,-3]: sum is 0\nNote that any permutation of [1,2,-3] and also any permutation of [-1,-2,3] will also be accepted."
            },
            {
                "Input": "** n = 2, sums = [0,0,0,0]",
                "Output": "** [0,0]",
                "Explanation": "** The only correct answer is [0,0]."
            },
            {
                "Input": "** n = 4, sums = [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]",
                "Output": "** [0,-1,4,5]",
                "Explanation": "** [0,-1,4,5] is able to achieve the given subset sums."
            }
        ]
    },
    {
        "Title": "Minimum Difference Between Highest and Lowest of K Scores",
        "slug": "minimum-difference-between-highest-and-lowest-of-k-scores",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [90], k = 1",
                "Output": "** 0",
                "Explanation": "** There is one way to pick score(s) of one student:\n- [**90**]. The difference between the highest and lowest score is 90 - 90 = 0.\nThe minimum possible difference is 0."
            },
            {
                "Input": "** nums = [9,4,1,7], k = 2",
                "Output": "** 2",
                "Explanation": "** There are six ways to pick score(s) of two students:\n- [**9**,**4**,1,7]. The difference between the highest and lowest score is 9 - 4 = 5.\n- [**9**,4,**1**,7]. The difference between the highest and lowest score is 9 - 1 = 8.\n- [**9**,4,1,**7**]. The difference between the highest and lowest score is 9 - 7 = 2.\n- [9,**4**,**1**,7]. The difference between the highest and lowest score is 4 - 1 = 3.\n- [9,**4**,1,**7**]. The difference between the highest and lowest score is 7 - 4 = 3.\n- [9,4,**1**,**7**]. The difference between the highest and lowest score is 7 - 1 = 6.\nThe minimum possible difference is 2."
            }
        ]
    },
    {
        "Title": "Find the Kth Largest Integer in the Array",
        "slug": "find-the-kth-largest-integer-in-the-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [\"3\",\"6\",\"7\",\"10\"], k = 4",
                "Output": "** \"3\"",
                "Explanation": "**\nThe numbers in nums sorted in non-decreasing order are [\"3\",\"6\",\"7\",\"10\"].\nThe 4th largest integer in nums is \"3\"."
            },
            {
                "Input": "** nums = [\"2\",\"21\",\"12\",\"1\"], k = 3",
                "Output": "** \"2\"",
                "Explanation": "**\nThe numbers in nums sorted in non-decreasing order are [\"1\",\"2\",\"12\",\"21\"].\nThe 3rd largest integer in nums is \"2\"."
            },
            {
                "Input": "** nums = [\"0\",\"0\"], k = 2",
                "Output": "** \"0\"",
                "Explanation": "**\nThe numbers in nums sorted in non-decreasing order are [\"0\",\"0\"].\nThe 2nd largest integer in nums is \"0\"."
            }
        ]
    },
    {
        "Title": "Minimum Number of Work Sessions to Finish the Tasks",
        "slug": "minimum-number-of-work-sessions-to-finish-the-tasks",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** tasks = [1,2,3], sessionTime = 3",
                "Output": "** 2",
                "Explanation": "** You can finish the tasks in two work sessions.\n- First work session: finish the first and the second tasks in 1 + 2 = 3 hours.\n- Second work session: finish the third task in 3 hours."
            },
            {
                "Input": "** tasks = [3,1,3,1,1], sessionTime = 8",
                "Output": "** 2",
                "Explanation": "** You can finish the tasks in two work sessions.\n- First work session: finish all the tasks except the last one in 3 + 1 + 3 + 1 = 8 hours.\n- Second work session: finish the last task in 1 hour."
            },
            {
                "Input": "** tasks = [1,2,3,4,5], sessionTime = 15",
                "Output": "** 1",
                "Explanation": "** You can finish all the tasks in one work session."
            }
        ]
    },
    {
        "Title": "Number of Unique Good Subsequences",
        "slug": "number-of-unique-good-subsequences",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** binary = \"001\"",
                "Output": "** 2",
                "Explanation": "** The good subsequences of binary are [\"0\", \"0\", \"1\"].\nThe unique good subsequences are \"0\" and \"1\"."
            },
            {
                "Input": "** binary = \"11\"",
                "Output": "** 2",
                "Explanation": "** The good subsequences of binary are [\"1\", \"1\", \"11\"].\nThe unique good subsequences are \"1\" and \"11\"."
            },
            {
                "Input": "** binary = \"101\"",
                "Output": "** 5",
                "Explanation": "** The good subsequences of binary are [\"1\", \"0\", \"1\", \"10\", \"11\", \"101\"]. \nThe unique good subsequences are \"0\", \"1\", \"10\", \"11\", and \"101\"."
            }
        ]
    },
    {
        "Title": "Find the Middle Index in Array",
        "slug": "find-the-middle-index-in-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [2,3,-1,8,4]",
                "Output": "** 3",
                "Explanation": "** The sum of the numbers before index 3 is: 2 + 3 + -1 = 4\nThe sum of the numbers after index 3 is: 4 = 4"
            },
            {
                "Input": "** nums = [1,-1,4]",
                "Output": "** 2",
                "Explanation": "** The sum of the numbers before index 2 is: 1 + -1 = 0\nThe sum of the numbers after index 2 is: 0"
            },
            {
                "Input": "** nums = [2,5]",
                "Output": "** -1",
                "Explanation": "** There is no valid middleIndex."
            }
        ]
    },
    {
        "Title": "Find All Groups of Farmland",
        "slug": "find-all-groups-of-farmland",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** land = [[1,0,0],[0,1,1],[0,1,1]]",
                "Output": "** [[0,0,0,0],[1,1,2,2]]",
                "Explanation": "**\nThe first group has a top left corner at land[0][0] and a bottom right corner at land[0][0].\nThe second group has a top left corner at land[1][1] and a bottom right corner at land[2][2]."
            },
            {
                "Input": "** land = [[1,1],[1,1]]",
                "Output": "** [[0,0,1,1]]",
                "Explanation": "**\nThe first group has a top left corner at land[0][0] and a bottom right corner at land[1][1]."
            },
            {
                "Input": "** land = [[0]]",
                "Output": "** []",
                "Explanation": "**\nThere are no groups of farmland."
            }
        ]
    },
    {
        "Title": "Operations on Tree",
        "slug": "operations-on-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"LockingTree\", \"lock\", \"unlock\", \"unlock\", \"lock\", \"upgrade\", \"lock\"]\n[[[-1, 0, 0, 1, 1, 2, 2]], [2, 2], [2, 3], [2, 2], [4, 5], [0, 1], [0, 1]]",
                "Output": "[null, true, false, true, true, true, false]",
                "Explanation": "LockingTree lockingTree = new LockingTree([-1, 0, 0, 1, 1, 2, 2]);\nlockingTree.lock(2, 2);    // return true because node 2 is unlocked.\n                           // Node 2 will now be locked by user 2.\nlockingTree.unlock(2, 3);  // return false because user 3 cannot unlock a node locked by user 2.\nlockingTree.unlock(2, 2);  // return true because node 2 was previously locked by user 2.\n                           // Node 2 will now be unlocked.\nlockingTree.lock(4, 5);    // return true because node 4 is unlocked.\n                           // Node 4 will now be locked by user 5.\nlockingTree.upgrade(0, 1); // return true because node 0 is unlocked and has at least one locked descendant (node 4).\n                           // Node 0 will now be locked by user 1 and node 4 will now be unlocked.\nlockingTree.lock(0, 1);    // return false because node 0 is already locked."
            }
        ]
    },
    {
        "Title": "The Number of Good Subsets",
        "slug": "the-number-of-good-subsets",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 6",
                "Explanation": "** The good subsets are:\n- [1,2]: product is 2, which is the product of distinct prime 2.\n- [1,2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [1,3]: product is 3, which is the product of distinct prime 3.\n- [2]: product is 2, which is the product of distinct prime 2.\n- [2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [3]: product is 3, which is the product of distinct prime 3."
            },
            {
                "Input": "** nums = [4,2,3,15]",
                "Output": "** 5",
                "Explanation": "** The good subsets are:\n- [2]: product is 2, which is the product of distinct prime 2.\n- [2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [2,15]: product is 30, which is the product of distinct primes 2, 3, and 5.\n- [3]: product is 3, which is the product of distinct prime 3.\n- [15]: product is 15, which is the product of distinct primes 3 and 5."
            }
        ]
    },
    {
        "Title": "Count Special Quadruplets",
        "slug": "count-special-quadruplets",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,3,6]",
                "Output": "** 1",
                "Explanation": "** The only quadruplet that satisfies the requirement is (0, 1, 2, 3) because 1 + 2 + 3 == 6."
            },
            {
                "Input": "** nums = [3,3,6,4,5]",
                "Output": "** 0",
                "Explanation": "** There are no such quadruplets in [3,3,6,4,5]."
            },
            {
                "Input": "** nums = [1,1,1,3,5]",
                "Output": "** 4",
                "Explanation": "** The 4 quadruplets that satisfy the requirement are:\n- (0, 1, 2, 3): 1 + 1 + 1 == 3\n- (0, 1, 3, 4): 1 + 1 + 3 == 5\n- (0, 2, 3, 4): 1 + 1 + 3 == 5\n- (1, 2, 3, 4): 1 + 1 + 3 == 5"
            }
        ]
    },
    {
        "Title": "The Number of Weak Characters in the Game",
        "slug": "the-number-of-weak-characters-in-the-game",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** properties = [[5,5],[6,3],[3,6]]",
                "Output": "** 0",
                "Explanation": "** No character has strictly greater attack and defense than the other."
            },
            {
                "Input": "** properties = [[2,2],[3,3]]",
                "Output": "** 1",
                "Explanation": "** The first character is weak because the second character has a strictly greater attack and defense."
            },
            {
                "Input": "** properties = [[1,5],[10,4],[4,3]]",
                "Output": "** 1",
                "Explanation": "** The third character is weak because the second character has a strictly greater attack and defense."
            }
        ]
    },
    {
        "Title": "First Day Where You Have Been in All the Rooms",
        "slug": "first-day-where-you-have-been-in-all-the-rooms",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nextVisit = [0,0]",
                "Output": "** 2",
                "Explanation": "**\n- On day 0, you visit room 0. The total times you have been in room 0 is 1, which is odd.\n\u00a0 On the next day you will visit room nextVisit[0] = 0\n- On day 1, you visit room 0, The total times you have been in room 0 is 2, which is even.\n\u00a0 On the next day you will visit room (0 + 1) mod 2 = 1\n- On day 2, you visit room 1. This is the first day where you have been in all the rooms."
            },
            {
                "Input": "** nextVisit = [0,0,2]",
                "Output": "** 6",
                "Explanation": "**\nYour room visiting order for each day is: [0,0,1,0,0,1,2,...].\nDay 6 is the first day where you have been in all the rooms."
            },
            {
                "Input": "** nextVisit = [0,1,2,0]",
                "Output": "** 6",
                "Explanation": "**\nYour room visiting order for each day is: [0,0,1,1,2,2,3,...].\nDay 6 is the first day where you have been in all the rooms."
            }
        ]
    },
    {
        "Title": "GCD Sort of an Array",
        "slug": "gcd-sort-of-an-array",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [7,21,3]",
                "Output": "** true",
                "Explanation": "** We can sort [7,21,3] by performing the following operations:\n- Swap 7 and 21 because gcd(7,21) = 7. nums = [**21**,**7**,3]\n- Swap 21 and 3 because gcd(21,3) = 3. nums = [**3**,7,**21**]"
            },
            {
                "Input": "** nums = [5,2,6,2]",
                "Output": "** false",
                "Explanation": "** It is impossible to sort the array because 5 cannot be swapped with any other element."
            },
            {
                "Input": "** nums = [10,5,9,3,15]",
                "Output": "** true\nWe can sort [10,5,9,3,15] by performing the following operations:\n- Swap 10 and 15 because gcd(10,15) = 5. nums = [**15**,5,9,3,**10**]\n- Swap 15 and 3 because gcd(15,3) = 3. nums = [**3**,5,9,**15**,10]\n- Swap 10 and 15 because gcd(10,15) = 5. nums = [3,5,9,**10**,**15**]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Reverse Prefix of Word",
        "slug": "reverse-prefix-of-word",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** word = \"abcdefd\", ch = \"d\"",
                "Output": "** \"dcbaefd\"",
                "Explanation": "**\u00a0The first occurrence of \"d\" is at index 3. \nReverse the part of word from 0 to 3 (inclusive), the resulting string is \"dcbaefd\"."
            },
            {
                "Input": "** word = \"xyxzxe\", ch = \"z\"",
                "Output": "** \"zxyxxe\"",
                "Explanation": "**\u00a0The first and only occurrence of \"z\" is at index 3.\nReverse the part of word from 0 to 3 (inclusive), the resulting string is \"zxyxxe\"."
            },
            {
                "Input": "** word = \"abcd\", ch = \"z\"",
                "Output": "** \"abcd\"",
                "Explanation": "**\u00a0\"z\" does not exist in word.\nYou should not do any reverse operation, the resulting string is \"abcd\"."
            }
        ]
    },
    {
        "Title": "Number of Pairs of Interchangeable Rectangles",
        "slug": "number-of-pairs-of-interchangeable-rectangles",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** rectangles = [[4,8],[3,6],[10,20],[15,30]]",
                "Output": "** 6",
                "Explanation": "** The following are the interchangeable pairs of rectangles by index (0-indexed):\n- Rectangle 0 with rectangle 1: 4/8 == 3/6.\n- Rectangle 0 with rectangle 2: 4/8 == 10/20.\n- Rectangle 0 with rectangle 3: 4/8 == 15/30.\n- Rectangle 1 with rectangle 2: 3/6 == 10/20.\n- Rectangle 1 with rectangle 3: 3/6 == 15/30.\n- Rectangle 2 with rectangle 3: 10/20 == 15/30."
            },
            {
                "Input": "** rectangles = [[4,5],[7,8]]",
                "Output": "** 0",
                "Explanation": "** There are no interchangeable pairs of rectangles."
            }
        ]
    },
    {
        "Title": "Maximum Product of the Length of Two Palindromic Subsequences",
        "slug": "maximum-product-of-the-length-of-two-palindromic-subsequences",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"leetcodecom\"",
                "Output": "** 9",
                "Explanation": "An optimal solution is to choose \"ete\" for the 1st subsequence and \"cdc\" for the 2nd subsequence.\nThe product of their lengths is: 3 * 3 = 9."
            }
        ]
    },
    {
        "Title": "Smallest Missing Genetic Value in Each Subtree",
        "slug": "smallest-missing-genetic-value-in-each-subtree",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** parents = [-1,0,0,2], nums = [1,2,3,4]",
                "Output": "** [5,1,1,1]",
                "Explanation": "** The answer for each subtree is calculated as follows:\n- 0: The subtree contains nodes [0,1,2,3] with values [1,2,3,4]. 5 is the smallest missing value.\n- 1: The subtree contains only node 1 with value 2. 1 is the smallest missing value.\n- 2: The subtree contains nodes [2,3] with values [3,4]. 1 is the smallest missing value.\n- 3: The subtree contains only node 3 with value 4. 1 is the smallest missing value."
            },
            {
                "Input": "** parents = [-1,0,1,0,3,3], nums = [5,4,6,2,1,3]",
                "Output": "** [7,1,1,4,2,1]",
                "Explanation": "** The answer for each subtree is calculated as follows:\n- 0: The subtree contains nodes [0,1,2,3,4,5] with values [5,4,6,2,1,3]. 7 is the smallest missing value.\n- 1: The subtree contains nodes [1,2] with values [4,6]. 1 is the smallest missing value.\n- 2: The subtree contains only node 2 with value 6. 1 is the smallest missing value.\n- 3: The subtree contains nodes [3,4,5] with values [2,1,3]. 4 is the smallest missing value.\n- 4: The subtree contains only node 4 with value 1. 2 is the smallest missing value.\n- 5: The subtree contains only node 5 with value 3. 1 is the smallest missing value."
            }
        ]
    },
    {
        "Title": "Count Number of Pairs With Absolute Difference K",
        "slug": "count-number-of-pairs-with-absolute-difference-k",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,2,1], k = 1",
                "Output": "** 4",
                "Explanation": "** The pairs with an absolute difference of 1 are:\n- [**1**,**2**,2,1]\n- [**1**,2,**2**,1]\n- [1,**2**,2,**1**]\n- [1,2,**2**,**1**]"
            },
            {
                "Input": "** nums = [1,3], k = 3",
                "Output": "** 0",
                "Explanation": "** There are no pairs with an absolute difference of 3."
            },
            {
                "Input": "** nums = [3,2,1,5,4], k = 2",
                "Output": "** 3",
                "Explanation": "** The pairs with an absolute difference of 2 are:\n- [**3**,2,**1**,5,4]\n- [**3**,2,1,**5**,4]\n- [3,**2**,1,5,**4**]"
            }
        ]
    },
    {
        "Title": "Find Original Array From Doubled Array",
        "slug": "find-original-array-from-doubled-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** changed = [1,3,4,2,6,8]",
                "Output": "** [1,3,4]",
                "Explanation": "** One possible original array could be [1,3,4]:\n- Twice the value of 1 is 1 * 2 = 2.\n- Twice the value of 3 is 3 * 2 = 6.\n- Twice the value of 4 is 4 * 2 = 8.\nOther original arrays could be [4,3,1] or [3,1,4]."
            },
            {
                "Input": "** changed = [6,3,0,1]",
                "Output": "** []",
                "Explanation": "** changed is not a doubled array."
            },
            {
                "Input": "** changed = [1]",
                "Output": "** []",
                "Explanation": "** changed is not a doubled array."
            }
        ]
    },
    {
        "Title": "Maximum Earnings From Taxi",
        "slug": "maximum-earnings-from-taxi",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 5, rides = [[2,5,4],[1,5,1]]",
                "Output": "** 7",
                "Explanation": "** We can pick up passenger 0 to earn 5 - 2 + 4 = 7 dollars."
            },
            {
                "Input": "** n = 20, rides = [[1,6,1],[3,10,2],[10,12,3],[11,12,2],[12,15,2],[13,18,1]]",
                "Output": "** 20",
                "Explanation": "** We will pick up the following passengers:\n- Drive passenger 1 from point 3 to point 10 for a profit of 10 - 3 + 2 = 9 dollars.\n- Drive passenger 2 from point 10 to point 12 for a profit of 12 - 10 + 3 = 5 dollars.\n- Drive passenger 5 from point 13 to point 18 for a profit of 18 - 13 + 1 = 6 dollars.\nWe earn 9 + 5 + 6 = 20 dollars in total."
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Make Array Continuous",
        "slug": "minimum-number-of-operations-to-make-array-continuous",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [4,2,5,3]",
                "Output": "** 0",
                "Explanation": "**\u00a0nums is already continuous."
            },
            {
                "Input": "** nums = [1,2,3,5,6]",
                "Output": "** 1",
                "Explanation": "**\u00a0One possible solution is to change the last element to 4.\nThe resulting array is [1,2,3,5,4], which is continuous."
            },
            {
                "Input": "** nums = [1,10,100,1000]",
                "Output": "** 3",
                "Explanation": "**\u00a0One possible solution is to:\n- Change the second element to 2.\n- Change the third element to 3.\n- Change the fourth element to 4.\nThe resulting array is [1,2,3,4], which is continuous."
            }
        ]
    },
    {
        "Title": "Final Value of Variable After Performing Operations",
        "slug": "final-value-of-variable-after-performing-operations",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** operations = [\"--X\",\"X++\",\"X++\"]",
                "Output": "** 1",
                "Explanation": "**\u00a0The operations are performed as follows:\nInitially, X = 0.\n--X: X is decremented by 1, X =  0 - 1 = -1.\nX++: X is incremented by 1, X = -1 + 1 =  0.\nX++: X is incremented by 1, X =  0 + 1 =  1."
            },
            {
                "Input": "** operations = [\"++X\",\"++X\",\"X++\"]",
                "Output": "** 3",
                "Explanation": "** The operations are performed as follows:\nInitially, X = 0.\n++X: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\nX++: X is incremented by 1, X = 2 + 1 = 3."
            },
            {
                "Input": "** operations = [\"X++\",\"++X\",\"--X\",\"X--\"]",
                "Output": "** 0",
                "Explanation": "**\u00a0The operations are performed as follows:\nInitially, X = 0.\nX++: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\n--X: X is decremented by 1, X = 2 - 1 = 1.\nX--: X is decremented by 1, X = 1 - 1 = 0."
            }
        ]
    },
    {
        "Title": "Sum of Beauty in the Array",
        "slug": "sum-of-beauty-in-the-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 2",
                "Explanation": "** For each index i in the range 1 <= i <= 1:\n- The beauty of nums[1] equals 2."
            },
            {
                "Input": "** nums = [2,4,6,4]",
                "Output": "** 1",
                "Explanation": "** For each index i in the range 1 <= i <= 2:\n- The beauty of nums[1] equals 1.\n- The beauty of nums[2] equals 0."
            },
            {
                "Input": "** nums = [3,2,1]",
                "Output": "** 0",
                "Explanation": "** For each index i in the range 1 <= i <= 1:\n- The beauty of nums[1] equals 0."
            }
        ]
    },
    {
        "Title": "Detect Squares",
        "slug": "detect-squares",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"DetectSquares\", \"add\", \"add\", \"add\", \"count\", \"count\", \"add\", \"count\"]\n[[], [[3, 10]], [[11, 2]], [[3, 2]], [[11, 10]], [[14, 8]], [[11, 2]], [[11, 10]]]",
                "Output": "[null, null, null, null, 1, 0, null, 2]",
                "Explanation": "DetectSquares detectSquares = new DetectSquares();\ndetectSquares.add([3, 10]);\ndetectSquares.add([11, 2]);\ndetectSquares.add([3, 2]);\ndetectSquares.count([11, 10]); // return 1. You can choose:\n                               //   - The first, second, and third points\ndetectSquares.count([14, 8]);  // return 0. The query point cannot form a square with any points in the data structure.\ndetectSquares.add([11, 2]);    // Adding duplicate points is allowed.\ndetectSquares.count([11, 10]); // return 2. You can choose:\n                               //   - The first, second, and third points\n                               //   - The first, third, and fourth points"
            }
        ]
    },
    {
        "Title": "Longest Subsequence Repeated k Times",
        "slug": "longest-subsequence-repeated-k-times",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"letsleetcode\", k = 2",
                "Output": "** \"let\"",
                "Explanation": "** There are two longest subsequences repeated 2 times: \"let\" and \"ete\".\n\"let\" is the lexicographically largest one."
            }
        ]
    },
    {
        "Title": "Maximum Difference Between Increasing Elements",
        "slug": "maximum-difference-between-increasing-elements",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [7,**1**,**5**,4]",
                "Output": "** 4",
                "Explanation": "**\nThe maximum difference occurs with i = 1 and j = 2, nums[j] - nums[i] = 5 - 1 = 4.\nNote that with i = 1 and j = 0, the difference nums[j] - nums[i] = 7 - 1 = 6, but i > j, so it is not valid."
            },
            {
                "Input": "** nums = [9,4,3,2]",
                "Output": "** -1",
                "Explanation": "**\nThere is no i and j such that i < j and nums[i] < nums[j]."
            },
            {
                "Input": "** nums = [**1**,5,2,**10**]",
                "Output": "** 9",
                "Explanation": "**\nThe maximum difference occurs with i = 0 and j = 3, nums[j] - nums[i] = 10 - 1 = 9."
            }
        ]
    },
    {
        "Title": "Grid Game",
        "slug": "grid-game",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[2,5,4],[1,5,1]]",
                "Output": "** 4",
                "Explanation": "** The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.\nThe cells visited by the first robot are set to 0.\nThe second robot will collect 0 + 0 + 4 + 0 = 4 points."
            },
            {
                "Input": "** grid = [[3,3,1],[8,5,2]]",
                "Output": "** 4",
                "Explanation": "** The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.\nThe cells visited by the first robot are set to 0.\nThe second robot will collect 0 + 3 + 1 + 0 = 4 points."
            },
            {
                "Input": "** grid = [[1,3,1,15],[1,3,3,1]]",
                "Output": "** 7",
                "Explanation": "** The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.\nThe cells visited by the first robot are set to 0.\nThe second robot will collect 0 + 1 + 3 + 3 + 0 = 7 points."
            }
        ]
    },
    {
        "Title": "Check if Word Can Be Placed In Crossword",
        "slug": "check-if-word-can-be-placed-in-crossword",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** board = [[\"#\", \" \", \"#\"], [\" \", \" \", \"#\"], [\"#\", \"c\", \" \"]], word = \"abc\"",
                "Output": "** true",
                "Explanation": "** The word \"abc\" can be placed as shown above (top to bottom)."
            },
            {
                "Input": "** board = [[\" \", \"#\", \"a\"], [\" \", \"#\", \"c\"], [\" \", \"#\", \"a\"]], word = \"ac\"",
                "Output": "** false",
                "Explanation": "** It is impossible to place the word because there will always be a space/letter above or below it."
            },
            {
                "Input": "** board = [[\"#\", \" \", \"#\"], [\" \", \" \", \"#\"], [\"#\", \" \", \"c\"]], word = \"ca\"",
                "Output": "** true",
                "Explanation": "** The word \"ca\" can be placed as shown above (right to left)."
            }
        ]
    },
    {
        "Title": "The Score of Students Solving Math Expression",
        "slug": "the-score-of-students-solving-math-expression",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"7+3*1*2\", answers = [20,13,42]",
                "Output": "** 7",
                "Explanation": "** As illustrated above, the correct answer of the expression is 13, therefore one student is rewarded 5 points: [20,**13**,42]\nA student might have applied the operators in this wrong order: ((7+3)*1)*2 = 20. Therefore one student is rewarded 2 points: [**20**,13,42]\nThe points for the students are: [2,5,0]. The sum of the points is 2+5+0=7."
            }
        ]
    },
    {
        "Title": "Convert 1D Array Into 2D Array",
        "slug": "convert-1d-array-into-2d-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** original = [1,2,3,4], m = 2, n = 2",
                "Output": "** [[1,2],[3,4]]",
                "Explanation": "** The constructed 2D array should contain 2 rows and 2 columns.\nThe first group of n=2 elements in original, [1,2], becomes the first row in the constructed 2D array.\nThe second group of n=2 elements in original, [3,4], becomes the second row in the constructed 2D array."
            }
        ]
    },
    {
        "Title": "Number of Pairs of Strings With Concatenation Equal to Target",
        "slug": "number-of-pairs-of-strings-with-concatenation-equal-to-target",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [\"777\",\"7\",\"77\",\"77\"], target = \"7777\"",
                "Output": "** 4",
                "Explanation": "** Valid pairs are:\n- (0, 1): \"777\" + \"7\"\n- (1, 0): \"7\" + \"777\"\n- (2, 3): \"77\" + \"77\"\n- (3, 2): \"77\" + \"77\""
            },
            {
                "Input": "** nums = [\"123\",\"4\",\"12\",\"34\"], target = \"1234\"",
                "Output": "** 2",
                "Explanation": "** Valid pairs are:\n- (0, 1): \"123\" + \"4\"\n- (2, 3): \"12\" + \"34\""
            },
            {
                "Input": "** nums = [\"1\",\"1\",\"1\"], target = \"11\"",
                "Output": "** 6",
                "Explanation": "** Valid pairs are:\n- (0, 1): \"1\" + \"1\"\n- (1, 0): \"1\" + \"1\"\n- (0, 2): \"1\" + \"1\"\n- (2, 0): \"1\" + \"1\"\n- (1, 2): \"1\" + \"1\"\n- (2, 1): \"1\" + \"1\""
            }
        ]
    },
    {
        "Title": "Maximize the Confusion of an Exam",
        "slug": "maximize-the-confusion-of-an-exam",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** answerKey = \"TTFF\", k = 2",
                "Output": "** 4",
                "Explanation": "** We can replace both the 'F's with 'T's to make answerKey = \"TTTT\".\nThere are four consecutive 'T's."
            },
            {
                "Input": "** answerKey = \"TFFT\", k = 1",
                "Output": "** 3",
                "Explanation": "** We can replace the first 'T' with an 'F' to make answerKey = \"FFFT\".\nAlternatively, we can replace the second 'T' with an 'F' to make answerKey = \"TFFF\".\nIn both cases, there are three consecutive 'F's."
            },
            {
                "Input": "** answerKey = \"TTFTTFTT\", k = 1",
                "Output": "** 5",
                "Explanation": "** We can replace the first 'F' to make answerKey = \"TTTTTFTT\"\nAlternatively, we can replace the second 'F' to make answerKey = \"TTFTTTTT\". \nIn both cases, there are five consecutive 'T's."
            }
        ]
    },
    {
        "Title": "Maximum Number of Ways to Partition an Array",
        "slug": "maximum-number-of-ways-to-partition-an-array",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [2,-1,2], k = 3",
                "Output": "** 1",
                "Explanation": "** One optimal approach is to change nums[0] to k. The array becomes [**3**,-1,2].\nThere is one way to partition the array:\n- For pivot = 2, we have the partition [3,-1 | 2]: 3 + -1 == 2."
            },
            {
                "Input": "** nums = [0,0,0], k = 1",
                "Output": "** 2",
                "Explanation": "** The optimal approach is to leave the array unchanged.\nThere are two ways to partition the array:\n- For pivot = 1, we have the partition [0 | 0,0]: 0 == 0 + 0.\n- For pivot = 2, we have the partition [0,0 | 0]: 0 + 0 == 0."
            },
            {
                "Input": "** nums = [22,4,-25,-20,-15,15,-16,7,19,-10,0,-13,-14], k = -33",
                "Output": "** 4",
                "Explanation": "** One optimal approach is to change nums[2] to k. The array becomes [22,4,**-33**,-20,-15,15,-16,7,19,-10,0,-13,-14].\nThere are four ways to partition the array."
            }
        ]
    },
    {
        "Title": "Minimum Moves to Convert String",
        "slug": "minimum-moves-to-convert-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"XXX\"",
                "Output": "** 1",
                "Explanation": "** XXX -> OOO\nWe select all the 3 characters and convert them in one move."
            },
            {
                "Input": "** s = \"XXOX\"",
                "Output": "** 2",
                "Explanation": "** XXOX -> OOOX -> OOOO\nWe select the first 3 characters in the first move, and convert them to 'O'.\nThen we select the last 3 characters and convert them so that the final string contains all 'O's."
            },
            {
                "Input": "** s = \"OOOO\"",
                "Output": "** 0",
                "Explanation": "** There are no 'X's in s to convert."
            }
        ]
    },
    {
        "Title": "Find Missing Observations",
        "slug": "find-missing-observations",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** rolls = [3,2,4,3], mean = 4, n = 2",
                "Output": "** [6,6]",
                "Explanation": "** The mean of all n + m rolls is (3 + 2 + 4 + 3 + 6 + 6) / 6 = 4."
            },
            {
                "Input": "** rolls = [1,5,6], mean = 3, n = 4",
                "Output": "** [2,3,2,2]",
                "Explanation": "** The mean of all n + m rolls is (1 + 5 + 6 + 2 + 3 + 2 + 2) / 7 = 3."
            },
            {
                "Input": "** rolls = [1,2,3,4], mean = 6, n = 4",
                "Output": "** []",
                "Explanation": "** It is impossible for the mean to be 6 no matter what the 4 missing rolls are."
            }
        ]
    },
    {
        "Title": "Stone Game IX",
        "slug": "stone-game-ix",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** stones = [2,1]",
                "Output": "** true",
                "Explanation": "**\u00a0The game will be played as follows:\n- Turn 1: Alice can remove either stone.\n- Turn 2: Bob removes the remaining stone. \nThe sum of the removed stones is 1 + 2 = 3 and is divisible by 3. Therefore, Bob loses and Alice wins the game."
            },
            {
                "Input": "** stones = [2]",
                "Output": "** false",
                "Explanation": "**\u00a0Alice will remove the only stone, and the sum of the values on the removed stones is 2. \nSince all the stones are removed and the sum of values is not divisible by 3, Bob wins the game."
            },
            {
                "Input": "** stones = [5,1,2,4,3]",
                "Output": "** false",
                "Explanation": "** Bob will always win. One possible way for Bob to win is shown below:\n- Turn 1: Alice can remove the second stone with value 1. Sum of removed stones = 1.\n- Turn 2: Bob removes the fifth stone with value 3. Sum of removed stones = 1 + 3 = 4.\n- Turn 3: Alices removes the fourth stone with value 4. Sum of removed stones = 1 + 3 + 4 = 8.\n- Turn 4: Bob removes the third stone with value 2. Sum of removed stones = 1 + 3 + 4 + 2 = 10.\n- Turn 5: Alice removes the first stone with value 5. Sum of removed stones = 1 + 3 + 4 + 2 + 5 = 15.\nAlice loses the game because the sum of the removed stones (15) is divisible by 3. Bob wins the game."
            }
        ]
    },
    {
        "Title": "Smallest K-Length Subsequence With Occurrences of a Letter",
        "slug": "smallest-k-length-subsequence-with-occurrences-of-a-letter",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"leetcode\", k = 4, letter = \"e\", repetition = 2",
                "Output": "** \"ecde\"",
                "Explanation": "** \"ecde\" is the lexicographically smallest subsequence of length 4 that has the letter \"e\" appear at least 2 times."
            }
        ]
    },
    {
        "Title": "Two Out of Three",
        "slug": "two-out-of-three",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]",
                "Output": "** [3,2]",
                "Explanation": "** The values that are present in at least two arrays are:\n- 3, in all three arrays.\n- 2, in nums1 and nums2."
            },
            {
                "Input": "** nums1 = [3,1], nums2 = [2,3], nums3 = [1,2]",
                "Output": "** [2,3,1]",
                "Explanation": "** The values that are present in at least two arrays are:\n- 2, in nums2 and nums3.\n- 3, in nums1 and nums2.\n- 1, in nums1 and nums3."
            },
            {
                "Input": "** nums1 = [1,2,2], nums2 = [4,3,3], nums3 = [5]",
                "Output": "** []",
                "Explanation": "** No value is present in at least two arrays."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Make a Uni-Value Grid",
        "slug": "minimum-operations-to-make-a-uni-value-grid",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[2,4],[6,8]], x = 2",
                "Output": "** 4",
                "Explanation": "** We can make every element equal to 4 by doing the following: \n- Add x to 2 once.\n- Subtract x from 6 once.\n- Subtract x from 8 twice.\nA total of 4 operations were used."
            },
            {
                "Input": "** grid = [[1,5],[2,3]], x = 1",
                "Output": "** 5",
                "Explanation": "** We can make every element equal to 3."
            },
            {
                "Input": "** grid = [[1,2],[3,4]], x = 2",
                "Output": "** -1",
                "Explanation": "** It is impossible to make every element equal."
            }
        ]
    },
    {
        "Title": "Stock Price Fluctuation ",
        "slug": "stock-price-fluctuation",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"StockPrice\", \"update\", \"update\", \"current\", \"maximum\", \"update\", \"maximum\", \"update\", \"minimum\"]\n[[], [1, 10], [2, 5], [], [], [1, 3], [], [4, 2], []]",
                "Output": "[null, null, null, 5, 10, null, 5, null, 2]",
                "Explanation": "StockPrice stockPrice = new StockPrice();\nstockPrice.update(1, 10); // Timestamps are [1] with corresponding prices [10].\nstockPrice.update(2, 5);  // Timestamps are [1,2] with corresponding prices [10,5].\nstockPrice.current();     // return 5, the latest timestamp is 2 with the price being 5.\nstockPrice.maximum();     // return 10, the maximum price is 10 at timestamp 1.\nstockPrice.update(1, 3);  // The previous timestamp 1 had the wrong price, so it is updated to 3.\n                          // Timestamps are [1,2] with corresponding prices [3,5].\nstockPrice.maximum();     // return 5, the maximum price is 5 after the correction.\nstockPrice.update(4, 2);  // Timestamps are [1,2,4] with corresponding prices [3,5,2].\nstockPrice.minimum();     // return 2, the minimum price is 2 at timestamp 4."
            }
        ]
    },
    {
        "Title": "Partition Array Into Two Arrays to Minimize Sum Difference",
        "slug": "partition-array-into-two-arrays-to-minimize-sum-difference",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [3,9,7,3]",
                "Output": "** 2",
                "Explanation": "** One optimal partition is: [3,9] and [7,3].\nThe absolute difference between the sums of the arrays is abs((3 + 9) - (7 + 3)) = 2."
            },
            {
                "Input": "** nums = [2,-1,0,4,-2,-9]",
                "Output": "** 0",
                "Explanation": "** One optimal partition is: [2,4,-9] and [-1,0,-2].\nThe absolute difference between the sums of the arrays is abs((2 + 4 + -9) - (-1 + 0 + -2)) = 0."
            }
        ]
    },
    {
        "Title": "Minimum Number of Moves to Seat Everyone",
        "slug": "minimum-number-of-moves-to-seat-everyone",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** seats = [3,1,5], students = [2,7,4]",
                "Output": "** 4",
                "Explanation": "** The students are moved as follows:\n- The first student is moved from from position 2 to position 1 using 1 move.\n- The second student is moved from from position 7 to position 5 using 2 moves.\n- The third student is moved from from position 4 to position 3 using 1 move.\nIn total, 1 + 2 + 1 = 4 moves were used."
            },
            {
                "Input": "** seats = [4,1,5,9], students = [1,3,2,6]",
                "Output": "** 7",
                "Explanation": "** The students are moved as follows:\n- The first student is not moved.\n- The second student is moved from from position 3 to position 4 using 1 move.\n- The third student is moved from from position 2 to position 5 using 3 moves.\n- The fourth student is moved from from position 6 to position 9 using 3 moves.\nIn total, 0 + 1 + 3 + 3 = 7 moves were used."
            },
            {
                "Input": "** seats = [2,2,6,6], students = [1,3,2,6]",
                "Output": "** 4",
                "Explanation": "** Note that there are two seats at position 2 and two seats at position 6.\nThe students are moved as follows:\n- The first student is moved from from position 1 to position 2 using 1 move.\n- The second student is moved from from position 3 to position 6 using 3 moves.\n- The third student is not moved.\n- The fourth student is not moved.\nIn total, 1 + 3 + 0 + 0 = 4 moves were used."
            }
        ]
    },
    {
        "Title": "Remove Colored Pieces if Both Neighbors are the Same Color",
        "slug": "remove-colored-pieces-if-both-neighbors-are-the-same-color",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** colors = \"AAABABB\"",
                "Output": "** true",
                "Explanation": "**\nAAABABB -> AABABB\nAlice moves first.\nShe removes the second 'A' from the left since that is the only 'A' whose neighbors are both 'A'.\n\nNow it's Bob's turn.\nBob cannot make a move on his turn since there are no 'B's whose neighbors are both 'B'.\nThus, Alice wins, so return true."
            },
            {
                "Input": "** colors = \"AA\"",
                "Output": "** false",
                "Explanation": "**\nAlice has her turn first.\nThere are only two 'A's and both are on the edge of the line, so she cannot move on her turn.\nThus, Bob wins, so return false."
            },
            {
                "Input": "** colors = \"ABBBBBBBAAA\"",
                "Output": "** false",
                "Explanation": "**\nABBBBBBBAAA -> ABBBBBBBAA\nAlice moves first.\nHer only option is to remove the second to last 'A' from the right.\n\nABBBBBBBAA -> ABBBBBBAA\nNext is Bob's turn.\nHe has many options for which 'B' piece to remove. He can pick any.\n\nOn Alice's second turn, she has no more pieces that she can remove.\nThus, Bob wins, so return false."
            }
        ]
    },
    {
        "Title": "The Time When the Network Becomes Idle",
        "slug": "the-time-when-the-network-becomes-idle",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** edges = [[0,1],[1,2]], patience = [0,2,1]",
                "Output": "** 8",
                "Explanation": "**\nAt (the beginning of) second 0,\n- Data server 1 sends its message (denoted 1A) to the master server.\n- Data server 2 sends its message (denoted 2A) to the master server.\n\nAt second 1,\n- Message 1A arrives at the master server. Master server processes message 1A instantly and sends a reply 1A back.\n- Server 1 has not received any reply. 1 second (1 < patience[1] = 2) elapsed since this server has sent the message, therefore it does not resend the message.\n- Server 2 has not received any reply. 1 second (1 == patience[2] = 1) elapsed since this server has sent the message, therefore it resends the message (denoted 2B).\n\nAt second 2,\n- The reply 1A arrives at server 1. No more resending will occur from server 1.\n- Message 2A arrives at the master server. Master server processes message 2A instantly and sends a reply 2A back.\n- Server 2 resends the message (denoted 2C).\n...\nAt second 4,\n- The reply 2A arrives at server 2. No more resending will occur from server 2.\n...\nAt second 7, reply 2D arrives at server 2.\n\nStarting from the beginning of the second 8, there are no messages passing between servers or arriving at servers.\nThis is the time when the network becomes idle."
            },
            {
                "Input": "** edges = [[0,1],[0,2],[1,2]], patience = [0,10,10]",
                "Output": "** 3",
                "Explanation": "** Data servers 1 and 2 receive a reply back at the beginning of second 2.\nFrom the beginning of the second 3, the network becomes idle."
            }
        ]
    },
    {
        "Title": "Kth Smallest Product of Two Sorted Arrays",
        "slug": "kth-smallest-product-of-two-sorted-arrays",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums1 = [2,5], nums2 = [3,4], k = 2",
                "Output": "** 8",
                "Explanation": "** The 2 smallest products are:\n- nums1[0] * nums2[0] = 2 * 3 = 6\n- nums1[0] * nums2[1] = 2 * 4 = 8\nThe 2nd smallest product is 8."
            },
            {
                "Input": "** nums1 = [-4,-2,0,3], nums2 = [2,4], k = 6",
                "Output": "** 0",
                "Explanation": "** The 6 smallest products are:\n- nums1[0] * nums2[1] = (-4) * 4 = -16\n- nums1[0] * nums2[0] = (-4) * 2 = -8\n- nums1[1] * nums2[1] = (-2) * 4 = -8\n- nums1[1] * nums2[0] = (-2) * 2 = -4\n- nums1[2] * nums2[0] = 0 * 2 = 0\n- nums1[2] * nums2[1] = 0 * 4 = 0\nThe 6th smallest product is 0."
            },
            {
                "Input": "** nums1 = [-2,-1,0,1,2], nums2 = [-3,-1,2,4,5], k = 3",
                "Output": "** -6",
                "Explanation": "** The 3 smallest products are:\n- nums1[0] * nums2[4] = (-2) * 5 = -10\n- nums1[0] * nums2[3] = (-2) * 4 = -8\n- nums1[4] * nums2[0] = 2 * (-3) = -6\nThe 3rd smallest product is -6."
            }
        ]
    },
    {
        "Title": "Check if Numbers Are Ascending in a Sentence",
        "slug": "check-if-numbers-are-ascending-in-a-sentence",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"1 box has 3 blue 4 red 6 green and 12 yellow marbles\"",
                "Output": "** true",
                "Explanation": "** The numbers in s are: 1, 3, 4, 6, 12.\nThey are strictly increasing from left to right: 1 < 3 < 4 < 6 < 12."
            },
            {
                "Input": "** s = \"sunset is at 7 51 pm overnight lows will be in the low 50 and 60 s\"",
                "Output": "** false",
                "Explanation": "** The numbers in s are: 7, **51**, **50**, 60. They are not strictly increasing."
            }
        ]
    },
    {
        "Title": "Simple Bank System",
        "slug": "simple-bank-system",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"Bank\", \"withdraw\", \"transfer\", \"deposit\", \"transfer\", \"withdraw\"]\n[[[10, 100, 20, 50, 30]], [3, 10], [5, 1, 20], [5, 20], [3, 4, 15], [10, 50]]",
                "Output": "[null, true, true, true, false, false]",
                "Explanation": "Bank bank = new Bank([10, 100, 20, 50, 30]);\nbank.withdraw(3, 10);    // return true, account 3 has a balance of $20, so it is valid to withdraw $10.\n                         // Account 3 has $20 - $10 = $10.\nbank.transfer(5, 1, 20); // return true, account 5 has a balance of $30, so it is valid to transfer $20.\n                         // Account 5 has $30 - $20 = $10, and account 1 has $10 + $20 = $30.\nbank.deposit(5, 20);     // return true, it is valid to deposit $20 to account 5.\n                         // Account 5 has $10 + $20 = $30.\nbank.transfer(3, 4, 15); // return false, the current balance of account 3 is $10,\n                         // so it is invalid to transfer $15 from it.\nbank.withdraw(10, 50);   // return false, it is invalid because account 10 does not exist."
            }
        ]
    },
    {
        "Title": "Count Number of Maximum Bitwise-OR Subsets",
        "slug": "count-number-of-maximum-bitwise-or-subsets",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,1]",
                "Output": "** 2",
                "Explanation": "** The maximum possible bitwise OR of a subset is 3. There are 2 subsets with a bitwise OR of 3:\n- [3]\n- [3,1]"
            },
            {
                "Input": "** nums = [2,2,2]",
                "Output": "** 7",
                "Explanation": "** All non-empty subsets of [2,2,2] have a bitwise OR of 2. There are 23 - 1 = 7 total subsets."
            },
            {
                "Input": "** nums = [3,2,1,5]",
                "Output": "** 6",
                "Explanation": "** The maximum possible bitwise OR of a subset is 7. There are 6 subsets with a bitwise OR of 7:\n- [3,5]\n- [3,1,5]\n- [3,2,5]\n- [3,2,1,5]\n- [2,5]\n- [2,1,5]"
            }
        ]
    },
    {
        "Title": "Second Minimum Time to Reach Destination",
        "slug": "second-minimum-time-to-reach-destination",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 5, edges = [[1,2],[1,3],[1,4],[3,4],[4,5]], time = 3, change = 5",
                "Output": "** 13",
                "Explanation": "**\nThe figure on the left shows the given graph.\nThe blue path in the figure on the right is the minimum time path.\nThe time taken is:\n- Start at 1, time elapsed=0\n- 1 -> 4: 3 minutes, time elapsed=3\n- 4 -> 5: 3 minutes, time elapsed=6\nHence the minimum time needed is 6 minutes.\n\nThe red path shows the path to get the second minimum time.\n- Start at 1, time elapsed=0\n- 1 -> 3: 3 minutes, time elapsed=3\n- 3 -> 4: 3 minutes, time elapsed=6\n- Wait at 4 for 4 minutes, time elapsed=10\n- 4 -> 5: 3 minutes, time elapsed=13\nHence the second minimum time is 13 minutes."
            },
            {
                "Input": "** n = 2, edges = [[1,2]], time = 3, change = 2",
                "Output": "** 11",
                "Explanation": "**\nThe minimum time path is 1 -> 2 with time = 3 minutes.\nThe second minimum time path is 1 -> 2 -> 1 -> 2 with time = 11 minutes."
            }
        ]
    },
    {
        "Title": "Number of Valid Words in a Sentence",
        "slug": "number-of-valid-words-in-a-sentence",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** sentence = \"cat and  dog\"",
                "Output": "** 3",
                "Explanation": "** The valid words in the sentence are \"cat\", \"and\", and \"dog\"."
            },
            {
                "Input": "** sentence = \"!this  1-s b8d!\"",
                "Output": "** 0",
                "Explanation": "** There are no valid words in the sentence.\n\"!this\" is invalid because it starts with a punctuation mark.\n\"1-s\" and \"b8d\" are invalid because they contain digits."
            },
            {
                "Input": "** sentence = \"alice and  bob are playing stone-game10\"",
                "Output": "** 5",
                "Explanation": "** The valid words in the sentence are \"alice\", \"and\", \"bob\", \"are\", and \"playing\".\n\"stone-game10\" is invalid because it contains digits."
            }
        ]
    },
    {
        "Title": "Next Greater Numerically Balanced Number",
        "slug": "next-greater-numerically-balanced-number",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** 22",
                "Explanation": "** \n22 is numerically balanced since:\n- The digit 2 occurs 2 times. \nIt is also the smallest numerically balanced number strictly greater than 1."
            },
            {
                "Input": "** n = 1000",
                "Output": "** 1333",
                "Explanation": "** \n1333 is numerically balanced since:\n- The digit 1 occurs 1 time.\n- The digit 3 occurs 3 times. \nIt is also the smallest numerically balanced number strictly greater than 1000.\nNote that 1022 cannot be the answer because 0 appeared more than 0 times."
            },
            {
                "Input": "** n = 3000",
                "Output": "** 3133",
                "Explanation": "** \n3133 is numerically balanced since:\n- The digit 1 occurs 1 time.\n- The digit 3 occurs 3 times.\nIt is also the smallest numerically balanced number strictly greater than 3000."
            }
        ]
    },
    {
        "Title": "Count Nodes With the Highest Score",
        "slug": "count-nodes-with-the-highest-score",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** parents = [-1,2,0,2,0]",
                "Output": "** 3",
                "Explanation": "**\n- The score of node 0 is: 3 * 1 = 3\n- The score of node 1 is: 4 = 4\n- The score of node 2 is: 1 * 1 * 2 = 2\n- The score of node 3 is: 4 = 4\n- The score of node 4 is: 4 = 4\nThe highest score is 4, and three nodes (node 1, node 3, and node 4) have the highest score."
            },
            {
                "Input": "** parents = [-1,2,0]",
                "Output": "** 2",
                "Explanation": "**\n- The score of node 0 is: 2 = 2\n- The score of node 1 is: 2 = 2\n- The score of node 2 is: 1 * 1 = 1\nThe highest score is 2, and two nodes (node 0 and node 1) have the highest score."
            }
        ]
    },
    {
        "Title": "Kth Distinct String in an Array",
        "slug": "kth-distinct-string-in-an-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [\"d\",\"b\",\"c\",\"b\",\"c\",\"a\"], k = 2",
                "Output": "** \"a\"",
                "Explanation": "**\nThe only distinct strings in arr are \"d\" and \"a\".\n\"d\" appears 1st, so it is the 1st distinct string.\n\"a\" appears 2nd, so it is the 2nd distinct string.\nSince k == 2, \"a\" is returned."
            },
            {
                "Input": "** arr = [\"aaa\",\"aa\",\"a\"], k = 1",
                "Output": "** \"aaa\"",
                "Explanation": "**\nAll strings in arr are distinct, so the 1st string \"aaa\" is returned."
            },
            {
                "Input": "** arr = [\"a\",\"b\",\"a\"], k = 3",
                "Output": "** \"\"",
                "Explanation": "**\nThe only distinct string is \"b\". Since there are fewer than 3 distinct strings, we return an empty string \"\"."
            }
        ]
    },
    {
        "Title": "Two Best Non-Overlapping Events",
        "slug": "two-best-non-overlapping-events",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** events = [[1,3,2],[4,5,2],[2,4,3]]",
                "Output": "** 4",
                "Explanation": "** Choose the green events, 0 and 1 for a sum of 2 + 2 = 4."
            },
            {
                "Input": "** events = [[1,3,2],[4,5,2],[1,5,5]]",
                "Output": "** 5",
                "Explanation": "** Choose event 2 for a sum of 5."
            },
            {
                "Input": "** events = [[1,5,3],[1,5,1],[6,6,5]]",
                "Output": "** 8",
                "Explanation": "** Choose events 0 and 2 for a sum of 3 + 5 = 8."
            }
        ]
    },
    {
        "Title": "Plates Between Candles",
        "slug": "plates-between-candles",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"**|**|***|\", queries = [[2,5],[5,9]]",
                "Output": "** [2,3]",
                "Explanation": "**\n- queries[0] has two plates between candles.\n- queries[1] has three plates between candles."
            },
            {
                "Input": "** s = \"***|**|*****|**||**|*\", queries = [[1,17],[4,5],[14,17],[5,11],[15,16]]",
                "Output": "** [9,0,0,0,0]",
                "Explanation": "**\n- queries[0] has nine plates between candles.\n- The other queries have zero plates between candles."
            }
        ]
    },
    {
        "Title": "Number of Valid Move Combinations On Chessboard",
        "slug": "number-of-valid-move-combinations-on-chessboard",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** pieces = [\"rook\"], positions = [[1,1]]",
                "Output": "** 15",
                "Explanation": "** The image above shows the possible squares the piece can move to."
            },
            {
                "Input": "** pieces = [\"queen\"], positions = [[1,1]]",
                "Output": "** 22",
                "Explanation": "** The image above shows the possible squares the piece can move to."
            },
            {
                "Input": "** pieces = [\"bishop\"], positions = [[4,3]]",
                "Output": "** 12",
                "Explanation": "** The image above shows the possible squares the piece can move to."
            }
        ]
    },
    {
        "Title": "Smallest Index With Equal Value",
        "slug": "smallest-index-with-equal-value",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [0,1,2]",
                "Output": "** 0",
                "Explanation": "** \ni=0: 0 mod 10 = 0 == nums[0].\ni=1: 1 mod 10 = 1 == nums[1].\ni=2: 2 mod 10 = 2 == nums[2].\nAll indices have i mod 10 == nums[i], so we return the smallest index 0."
            },
            {
                "Input": "** nums = [4,3,2,1]",
                "Output": "** 2",
                "Explanation": "** \ni=0: 0 mod 10 = 0 != nums[0].\ni=1: 1 mod 10 = 1 != nums[1].\ni=2: 2 mod 10 = 2 == nums[2].\ni=3: 3 mod 10 = 3 != nums[3].\n2 is the only index which has i mod 10 == nums[i]."
            },
            {
                "Input": "** nums = [1,2,3,4,5,6,7,8,9,0]",
                "Output": "** -1",
                "Explanation": "** No index satisfies i mod 10 == nums[i]."
            }
        ]
    },
    {
        "Title": "Find the Minimum and Maximum Number of Nodes Between Critical Points",
        "slug": "find-the-minimum-and-maximum-number-of-nodes-between-critical-points",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [3,1]",
                "Output": "** [-1,-1]",
                "Explanation": "** There are no critical points in [3,1]."
            },
            {
                "Input": "** head = [5,3,1,2,5,1,2]",
                "Output": "** [1,3]",
                "Explanation": "** There are three critical points:\n- [5,3,**1**,2,5,1,2]: The third node is a local minima because 1 is less than 3 and 2.\n- [5,3,1,2,**5**,1,2]: The fifth node is a local maxima because 5 is greater than 2 and 1.\n- [5,3,1,2,5,**1**,2]: The sixth node is a local minima because 1 is less than 5 and 2.\nThe minimum distance is between the fifth and the sixth node. minDistance = 6 - 5 = 1.\nThe maximum distance is between the third and the sixth node. maxDistance = 6 - 3 = 3."
            },
            {
                "Input": "** head = [1,3,2,2,3,2,2,2,7]",
                "Output": "** [3,3]",
                "Explanation": "** There are two critical points:\n- [1,**3**,2,2,3,2,2,2,7]: The second node is a local maxima because 3 is greater than 1 and 2.\n- [1,3,2,2,**3**,2,2,2,7]: The fifth node is a local maxima because 3 is greater than 2 and 2.\nBoth the minimum and maximum distances are between the second and the fifth node.\nThus, minDistance and maxDistance is 5 - 2 = 3.\nNote that the last node is not considered a local maxima because it does not have a next node."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Convert Number",
        "slug": "minimum-operations-to-convert-number",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,4,12], start = 2, goal = 12",
                "Output": "** 2",
                "Explanation": "** We can go from 2 \u2192 14 \u2192 12 with the following 2 operations.\n- 2 + 12 = 14\n- 14 - 2 = 12"
            },
            {
                "Input": "** nums = [3,5,7], start = 0, goal = -4",
                "Output": "** 2",
                "Explanation": "** We can go from 0 \u2192 3 \u2192 -4 with the following 2 operations. \n- 0 + 3 = 3\n- 3 - 7 = -4\nNote that the last operation sets x out of the range 0 <= x <= 1000, which is valid."
            },
            {
                "Input": "** nums = [2,8,16], start = 0, goal = 1",
                "Output": "** -1",
                "Explanation": "** There is no way to convert 0 into 1."
            }
        ]
    },
    {
        "Title": "Check if an Original String Exists Given Two Encoded Strings",
        "slug": "check-if-an-original-string-exists-given-two-encoded-strings",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s1 = \"internationalization\", s2 = \"i18n\"",
                "Output": "** true",
                "Explanation": "** It is possible that \"internationalization\" was the original string.\n- \"internationalization\" \n  -> Split:       [\"internationalization\"]\n  -> Do not replace any element\n  -> Concatenate:  \"internationalization\", which is s1.\n- \"internationalization\"\n  -> Split:       [\"i\", \"nternationalizatio\", \"n\"]\n  -> Replace:     [\"i\", \"18\",                 \"n\"]\n  -> Concatenate:  \"i18n\", which is s2"
            },
            {
                "Input": "** s1 = \"l123e\", s2 = \"44\"",
                "Output": "** true",
                "Explanation": "** It is possible that \"leetcode\" was the original string.\n- \"leetcode\" \n  -> Split:      [\"l\", \"e\", \"et\", \"cod\", \"e\"]\n  -> Replace:    [\"l\", \"1\", \"2\",  \"3\",   \"e\"]\n  -> Concatenate: \"l123e\", which is s1.\n- \"leetcode\" \n  -> Split:      [\"leet\", \"code\"]\n  -> Replace:    [\"4\",    \"4\"]\n  -> Concatenate: \"44\", which is s2."
            },
            {
                "Input": "** s1 = \"a5b\", s2 = \"c5b\"",
                "Output": "** false",
                "Explanation": "** It is impossible.\n- The original string encoded as s1 must start with the letter 'a'.\n- The original string encoded as s2 must start with the letter 'c'."
            }
        ]
    },
    {
        "Title": "Count Vowel Substrings of a String",
        "slug": "count-vowel-substrings-of-a-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** word = \"aeiouu\"",
                "Output": "** 2",
                "Explanation": "** The vowel substrings of word are as follows (underlined):\n- \"**aeiou**u\"\n- \"**aeiouu**\""
            },
            {
                "Input": "** word = \"unicornarihan\"",
                "Output": "** 0",
                "Explanation": "** Not all 5 vowels are present, so there are no vowel substrings."
            },
            {
                "Input": "** word = \"cuaieuouac\"",
                "Output": "** 7",
                "Explanation": "** The vowel substrings of word are as follows (underlined):\n- \"c**uaieuo**uac\"\n- \"c**uaieuou**ac\"\n- \"c**uaieuoua**c\"\n- \"cu**aieuo**uac\"\n- \"cu**aieuou**ac\"\n- \"cu**aieuoua**c\"\n- \"cua**ieuoua**c\""
            }
        ]
    },
    {
        "Title": "Vowels of All Substrings",
        "slug": "vowels-of-all-substrings",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** word = \"aba\"",
                "Output": "** 6",
                "Explanation": "** \nAll possible substrings are: \"a\", \"ab\", \"aba\", \"b\", \"ba\", and \"a\".\n- \"b\" has 0 vowels in it\n- \"a\", \"ab\", \"ba\", and \"a\" have 1 vowel each\n- \"aba\" has 2 vowels in it\nHence, the total sum of vowels = 0 + 1 + 1 + 1 + 1 + 2 = 6."
            },
            {
                "Input": "** word = \"abc\"",
                "Output": "** 3",
                "Explanation": "** \nAll possible substrings are: \"a\", \"ab\", \"abc\", \"b\", \"bc\", and \"c\".\n- \"a\", \"ab\", and \"abc\" have 1 vowel each\n- \"b\", \"bc\", and \"c\" have 0 vowels each\nHence, the total sum of vowels = 1 + 1 + 1 + 0 + 0 + 0 = 3."
            },
            {
                "Input": "** word = \"ltcd\"",
                "Output": "** 0",
                "Explanation": "** There are no vowels in any substring of \"ltcd\"."
            }
        ]
    },
    {
        "Title": "Minimized Maximum of Products Distributed to Any Store",
        "slug": "minimized-maximum-of-products-distributed-to-any-store",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 6, quantities = [11,6]",
                "Output": "** 3",
                "Explanation": "** One optimal way is:\n- The 11 products of type 0 are distributed to the first four stores in these amounts: 2, 3, 3, 3\n- The 6 products of type 1 are distributed to the other two stores in these amounts: 3, 3\nThe maximum number of products given to any store is max(2, 3, 3, 3, 3, 3) = 3."
            },
            {
                "Input": "** n = 7, quantities = [15,10,10]",
                "Output": "** 5",
                "Explanation": "** One optimal way is:\n- The 15 products of type 0 are distributed to the first three stores in these amounts: 5, 5, 5\n- The 10 products of type 1 are distributed to the next two stores in these amounts: 5, 5\n- The 10 products of type 2 are distributed to the last two stores in these amounts: 5, 5\nThe maximum number of products given to any store is max(5, 5, 5, 5, 5, 5, 5) = 5."
            },
            {
                "Input": "** n = 1, quantities = [100000]",
                "Output": "** 100000",
                "Explanation": "** The only optimal way is:\n- The 100000 products of type 0 are distributed to the only store.\nThe maximum number of products given to any store is max(100000) = 100000."
            }
        ]
    },
    {
        "Title": "Maximum Path Quality of a Graph",
        "slug": "maximum-path-quality-of-a-graph",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** values = [0,32,10,43], edges = [[0,1,10],[1,2,15],[0,3,10]], maxTime = 49",
                "Output": "** 75",
                "Explanation": "**\nOne possible path is 0 -> 1 -> 0 -> 3 -> 0. The total time taken is 10 + 10 + 10 + 10 = 40 <= 49.\nThe nodes visited are 0, 1, and 3, giving a maximal path quality of 0 + 32 + 43 = 75."
            },
            {
                "Input": "** values = [5,10,15,20], edges = [[0,1,10],[1,2,10],[0,3,10]], maxTime = 30",
                "Output": "** 25",
                "Explanation": "**\nOne possible path is 0 -> 3 -> 0. The total time taken is 10 + 10 = 20 <= 30.\nThe nodes visited are 0 and 3, giving a maximal path quality of 5 + 20 = 25."
            },
            {
                "Input": "** values = [1,2,3,4], edges = [[0,1,10],[1,2,11],[2,3,12],[1,3,13]], maxTime = 50",
                "Output": "** 7",
                "Explanation": "**\nOne possible path is 0 -> 1 -> 3 -> 1 -> 0. The total time taken is 10 + 13 + 13 + 10 = 46 <= 50.\nThe nodes visited are 0, 1, and 3, giving a maximal path quality of 1 + 2 + 4 = 7."
            }
        ]
    },
    {
        "Title": "Check Whether Two Strings are Almost Equivalent",
        "slug": "check-whether-two-strings-are-almost-equivalent",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** word1 = \"aaaa\", word2 = \"bccb\"",
                "Output": "** false",
                "Explanation": "** There are 4 'a's in \"aaaa\" but 0 'a's in \"bccb\".\nThe difference is 4, which is more than the allowed 3."
            },
            {
                "Input": "** word1 = \"abcdeef\", word2 = \"abaaacc\"",
                "Output": "** true",
                "Explanation": "** The differences between the frequencies of each letter in word1 and word2 are at most 3:\n- 'a' appears 1 time in word1 and 4 times in word2. The difference is 3.\n- 'b' appears 1 time in word1 and 1 time in word2. The difference is 0.\n- 'c' appears 1 time in word1 and 2 times in word2. The difference is 1.\n- 'd' appears 1 time in word1 and 0 times in word2. The difference is 1.\n- 'e' appears 2 times in word1 and 0 times in word2. The difference is 2.\n- 'f' appears 1 time in word1 and 0 times in word2. The difference is 1."
            },
            {
                "Input": "** word1 = \"cccddabba\", word2 = \"babababab\"",
                "Output": "** true",
                "Explanation": "** The differences between the frequencies of each letter in word1 and word2 are at most 3:\n- 'a' appears 2 times in word1 and 4 times in word2. The difference is 2.\n- 'b' appears 2 times in word1 and 5 times in word2. The difference is 3.\n- 'c' appears 3 times in word1 and 0 times in word2. The difference is 3.\n- 'd' appears 2 times in word1 and 0 times in word2. The difference is 2."
            }
        ]
    },
    {
        "Title": "Walking Robot Simulation II",
        "slug": "walking-robot-simulation-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"Robot\", \"step\", \"step\", \"getPos\", \"getDir\", \"step\", \"step\", \"step\", \"getPos\", \"getDir\"]\n[[6, 3], [2], [2], [], [], [2], [1], [4], [], []]",
                "Output": "[null, null, null, [4, 0], \"East\", null, null, null, [1, 2], \"West\"]",
                "Explanation": "Robot robot = new Robot(6, 3); // Initialize the grid and the robot at (0, 0) facing East.\nrobot.step(2);  // It moves two steps East to (2, 0), and faces East.\nrobot.step(2);  // It moves two steps East to (4, 0), and faces East.\nrobot.getPos(); // return [4, 0]\nrobot.getDir(); // return \"East\"\nrobot.step(2);  // It moves one step East to (5, 0), and faces East.\n                // Moving the next step East would be out of bounds, so it turns and faces North.\n                // Then, it moves one step North to (5, 1), and faces North.\nrobot.step(1);  // It moves one step North to (5, 2), and faces **North** (not West).\nrobot.step(4);  // Moving the next step North would be out of bounds, so it turns and faces West.\n                // Then, it moves four steps West to (1, 2), and faces West.\nrobot.getPos(); // return [1, 2]\nrobot.getDir(); // return \"West\""
            }
        ]
    },
    {
        "Title": "Most Beautiful Item for Each Query",
        "slug": "most-beautiful-item-for-each-query",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** items = [[1,2],[3,2],[2,4],[5,6],[3,5]], queries = [1,2,3,4,5,6]",
                "Output": "** [2,4,5,5,6,6]",
                "Explanation": "**\n- For queries[0]=1, [1,2] is the only item which has price <= 1. Hence, the answer for this query is 2.\n- For queries[1]=2, the items which can be considered are [1,2] and [2,4]. \n  The maximum beauty among them is 4.\n- For queries[2]=3 and queries[3]=4, the items which can be considered are [1,2], [3,2], [2,4], and [3,5].\n  The maximum beauty among them is 5.\n- For queries[4]=5 and queries[5]=6, all items can be considered.\n  Hence, the answer for them is the maximum beauty of all items, i.e., 6."
            },
            {
                "Input": "** items = [[1,2],[1,2],[1,3],[1,4]], queries = [1]",
                "Output": "** [4]",
                "Explanation": "** \nThe price of every item is equal to 1, so we choose the item with the maximum beauty 4. \nNote that multiple items can have the same price and/or beauty."
            },
            {
                "Input": "** items = [[10,1000]], queries = [5]",
                "Output": "** [0]",
                "Explanation": "**\nNo item has a price less than or equal to 5, so no item can be chosen.\nHence, the answer to the query is 0."
            }
        ]
    },
    {
        "Title": "Maximum Number of Tasks You Can Assign",
        "slug": "maximum-number-of-tasks-you-can-assign",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** tasks = [**3**,**2**,**1**], workers = [**0**,**3**,**3**], pills = 1, strength = 1",
                "Output": "** 3",
                "Explanation": "**\nWe can assign the magical pill and tasks as follows:\n- Give the magical pill to worker 0.\n- Assign worker 0 to task 2 (0 + 1 >= 1)\n- Assign worker 1 to task 1 (3 >= 2)\n- Assign worker 2 to task 0 (3 >= 3)"
            },
            {
                "Input": "** tasks = [**5**,4], workers = [**0**,0,0], pills = 1, strength = 5",
                "Output": "** 1",
                "Explanation": "**\nWe can assign the magical pill and tasks as follows:\n- Give the magical pill to worker 0.\n- Assign worker 0 to task 0 (0 + 5 >= 5)"
            },
            {
                "Input": "** tasks = [**10**,**15**,30], workers = [**0**,**10**,10,10,10], pills = 3, strength = 10",
                "Output": "** 2",
                "Explanation": "**\nWe can assign the magical pills and tasks as follows:\n- Give the magical pill to worker 0 and worker 1.\n- Assign worker 0 to task 0 (0 + 10 >= 10)\n- Assign worker 1 to task 1 (10 + 10 >= 15)\nThe last pill is not given because it will not make any worker strong enough for the last task."
            }
        ]
    },
    {
        "Title": "Time Needed to Buy Tickets",
        "slug": "time-needed-to-buy-tickets",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** tickets = [2,3,2], k = 2",
                "Output": "** 6",
                "Explanation": "** \n- In the first pass, everyone in the line buys a ticket and the line becomes [1, 2, 1].\n- In the second pass, everyone in the line buys a ticket and the line becomes [0, 1, 0].\nThe person at\u00a0position 2 has successfully bought 2 tickets and it took 3 + 3 = 6 seconds."
            },
            {
                "Input": "** tickets = [5,1,1,1], k = 0",
                "Output": "** 8",
                "Explanation": "**\n- In the first pass, everyone in the line buys a ticket and the line becomes [4, 0, 0, 0].\n- In the next 4 passes, only the person in position 0 is buying tickets.\nThe person at\u00a0position 0 has successfully bought 5 tickets and it took 4 + 1 + 1 + 1 + 1 = 8 seconds."
            }
        ]
    },
    {
        "Title": "Reverse Nodes in Even Length Groups",
        "slug": "reverse-nodes-in-even-length-groups",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [5,2,6,3,9,1,7,3,8,4]",
                "Output": "** [5,6,2,3,9,1,4,8,3,7]",
                "Explanation": "**\n- The length of the first group is 1, which is odd, hence no reversal occurs.\n- The length of the second group is 2, which is even, hence the nodes are reversed.\n- The length of the third group is 3, which is odd, hence no reversal occurs.\n- The length of the last group is 4, which is even, hence the nodes are reversed."
            },
            {
                "Input": "** head = [1,1,0,6]",
                "Output": "** [1,0,1,6]",
                "Explanation": "**\n- The length of the first group is 1. No reversal occurs.\n- The length of the second group is 2. The nodes are reversed.\n- The length of the last group is 1. No reversal occurs."
            },
            {
                "Input": "** head = [1,1,0,6,5]",
                "Output": "** [1,0,1,5,6]",
                "Explanation": "**\n- The length of the first group is 1. No reversal occurs.\n- The length of the second group is 2. The nodes are reversed.\n- The length of the last group is 2. The nodes are reversed."
            }
        ]
    },
    {
        "Title": "Decode the Slanted Ciphertext",
        "slug": "decode-the-slanted-ciphertext",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** encodedText = \"iveo    eed   l te   olc\", rows = 4",
                "Output": "** \"i love leetcode\"",
                "Explanation": "** The figure above denotes the matrix that was used to encode originalText. \nThe blue arrows show how we can find originalText from encodedText."
            },
            {
                "Input": "** encodedText = \"coding\", rows = 1",
                "Output": "** \"coding\"",
                "Explanation": "** Since there is only 1 row, both originalText and encodedText are the same."
            }
        ]
    },
    {
        "Title": "Process Restricted Friend Requests",
        "slug": "process-restricted-friend-requests",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 3, restrictions = [[0,1]], requests = [[0,2],[2,1]]",
                "Output": "** [true,false]",
                "Explanation": "**Request 0: Person 0 and person 2 can be friends, so they become direct friends. \nRequest 1: Person 2 and person 1 cannot be friends since person 0 and person 1 would be indirect friends (1--2--0)."
            },
            {
                "Input": "** n = 3, restrictions = [[0,1]], requests = [[1,2],[0,2]]",
                "Output": "** [true,false]",
                "Explanation": "**Request 0: Person 1 and person 2 can be friends, so they become direct friends.\nRequest 1: Person 0 and person 2 cannot be friends since person 0 and person 1 would be indirect friends (0--2--1)."
            },
            {
                "Input": "** n = 5, restrictions = [[0,1],[1,2],[2,3]], requests = [[0,4],[1,2],[3,1],[3,4]]",
                "Output": "** [true,false,true,false]",
                "Explanation": "**Request 0: Person 0 and person 4 can be friends, so they become direct friends.\nRequest 1: Person 1 and person 2 cannot be friends since they are directly restricted.\nRequest 2: Person 3 and person 1 can be friends, so they become direct friends.\nRequest 3: Person 3 and person 4 cannot be friends since person 0 and person 1 would be indirect friends (0--4--3--1)."
            }
        ]
    },
    {
        "Title": "Two Furthest Houses With Different Colors",
        "slug": "two-furthest-houses-with-different-colors",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** colors = [**1**,1,1,**6**,1,1,1]",
                "Output": "** 3",
                "Explanation": "** In the above image, color 1 is blue, and color 6 is red.\nThe furthest two houses with different colors are house 0 and house 3.\nHouse 0 has color 1, and house 3 has color 6. The distance between them is abs(0 - 3) = 3.\nNote that houses 3 and 6 can also produce the optimal answer."
            },
            {
                "Input": "** colors = [**1**,8,3,8,**3**]",
                "Output": "** 4",
                "Explanation": "** In the above image, color 1 is blue, color 8 is yellow, and color 3 is green.\nThe furthest two houses with different colors are house 0 and house 4.\nHouse 0 has color 1, and house 4 has color 3. The distance between them is abs(0 - 4) = 4."
            }
        ]
    },
    {
        "Title": "Watering Plants",
        "slug": "watering-plants",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** plants = [2,2,3,3], capacity = 5",
                "Output": "** 14",
                "Explanation": "** Start at the river with a full watering can:\n- Walk to plant 0 (1 step) and water it. Watering can has 3 units of water.\n- Walk to plant 1 (1 step) and water it. Watering can has 1 unit of water.\n- Since you cannot completely water plant 2, walk back to the river to refill (2 steps).\n- Walk to plant 2 (3 steps) and water it. Watering can has 2 units of water.\n- Since you cannot completely water plant 3, walk back to the river to refill (3 steps).\n- Walk to plant 3 (4 steps) and water it.\nSteps needed = 1 + 1 + 2 + 3 + 3 + 4 = 14."
            },
            {
                "Input": "** plants = [1,1,1,4,2,3], capacity = 4",
                "Output": "** 30",
                "Explanation": "** Start at the river with a full watering can:\n- Water plants 0, 1, and 2 (3 steps). Return to river (3 steps).\n- Water plant 3 (4 steps). Return to river (4 steps).\n- Water plant 4 (5 steps). Return to river (5 steps).\n- Water plant 5 (6 steps).\nSteps needed = 3 + 3 + 4 + 4 + 5 + 5 + 6 = 30."
            },
            {
                "Input": "** plants = [7,7,7,7,7,7,7], capacity = 8",
                "Output": "** 49",
                "Explanation": "** You have to refill before watering each plant.\nSteps needed = 1 + 1 + 2 + 2 + 3 + 3 + 4 + 4 + 5 + 5 + 6 + 6 + 7 = 49."
            }
        ]
    },
    {
        "Title": "Range Frequency Queries",
        "slug": "range-frequency-queries",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"RangeFreqQuery\", \"query\", \"query\"]\n[[[12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]], [1, 2, 4], [0, 11, 33]]",
                "Output": "[null, 1, 2]",
                "Explanation": "RangeFreqQuery rangeFreqQuery = new RangeFreqQuery([12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]);\nrangeFreqQuery.query(1, 2, 4); // return 1. The value 4 occurs 1 time in the subarray [33, 4]\nrangeFreqQuery.query(0, 11, 33); // return 2. The value 33 occurs 2 times in the whole array."
            }
        ]
    },
    {
        "Title": "Sum of k-Mirror Numbers",
        "slug": "sum-of-k-mirror-numbers",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** k = 2, n = 5",
                "Output": "** 25",
                "Explanation": "**The 5 smallest 2-mirror numbers and their representations in base-2 are listed as follows:\n  base-10    base-2\n    1          1\n    3          11\n    5          101\n    7          111\n    9          1001\nTheir sum = 1 + 3 + 5 + 7 + 9 = 25."
            },
            {
                "Input": "** k = 3, n = 7",
                "Output": "** 499",
                "Explanation": "**The 7 smallest 3-mirror numbers are and their representations in base-3 are listed as follows:\n  base-10    base-3\n    1          1\n    2          2\n    4          11\n    8          22\n    121        11111\n    151        12121\n    212        21212\nTheir sum = 1 + 2 + 4 + 8 + 121 + 151 + 212 = 499."
            },
            {
                "Input": "** k = 7, n = 17",
                "Output": "** 20379000",
                "Explanation": "** The 17 smallest 7-mirror numbers are:\n1, 2, 3, 4, 5, 6, 8, 121, 171, 242, 292, 16561, 65656, 2137312, 4602064, 6597956, 6958596"
            }
        ]
    },
    {
        "Title": "Count Common Words With One Occurrence",
        "slug": "count-common-words-with-one-occurrence",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** words1 = [\"leetcode\",\"is\",\"amazing\",\"as\",\"is\"], words2 = [\"amazing\",\"leetcode\",\"is\"]",
                "Output": "** 2",
                "Explanation": "**\n- \"leetcode\" appears exactly once in each of the two arrays. We count this string.\n- \"amazing\" appears exactly once in each of the two arrays. We count this string.\n- \"is\" appears in each of the two arrays, but there are 2 occurrences of it in words1. We do not count this string.\n- \"as\" appears once in words1, but does not appear in words2. We do not count this string.\nThus, there are 2 strings that appear exactly once in each of the two arrays."
            },
            {
                "Input": "** words1 = [\"b\",\"bb\",\"bbb\"], words2 = [\"a\",\"aa\",\"aaa\"]",
                "Output": "** 0",
                "Explanation": "** There are no strings that appear in each of the two arrays."
            },
            {
                "Input": "** words1 = [\"a\",\"ab\"], words2 = [\"a\",\"a\",\"a\",\"ab\"]",
                "Output": "** 1",
                "Explanation": "** The only string that appears exactly once in each of the two arrays is \"ab\"."
            }
        ]
    },
    {
        "Title": "Minimum Number of Food Buckets to Feed the Hamsters",
        "slug": "minimum-number-of-food-buckets-to-feed-the-hamsters",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** hamsters = \"H..H\"",
                "Output": "** 2",
                "Explanation": "** We place two food buckets at indices 1 and 2.\nIt can be shown that if we place only one food bucket, one of the hamsters will not be fed."
            },
            {
                "Input": "** hamsters = \".H.H.\"",
                "Output": "** 1",
                "Explanation": "** We place one food bucket at index 2."
            },
            {
                "Input": "** hamsters = \".HHH.\"",
                "Output": "** -1",
                "Explanation": "** If we place a food bucket at every empty index as shown, the hamster at index 2 will not be able to eat."
            }
        ]
    },
    {
        "Title": "Minimum Cost Homecoming of a Robot in a Grid",
        "slug": "minimum-cost-homecoming-of-a-robot-in-a-grid",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** startPos = [1, 0], homePos = [2, 3], rowCosts = [5, 4, 3], colCosts = [8, 2, 6, 7]",
                "Output": "** 18",
                "Explanation": "** One optimal path is that:\nStarting from (1, 0)\n-> It goes down to (**2**, 0). This move costs rowCosts[2] = 3.\n-> It goes right to (2, **1**). This move costs colCosts[1] = 2.\n-> It goes right to (2, **2**). This move costs colCosts[2] = 6.\n-> It goes right to (2, **3**). This move costs colCosts[3] = 7.\nThe total cost is 3 + 2 + 6 + 7 = 18"
            }
        ]
    },
    {
        "Title": "Count Fertile Pyramids in a Land",
        "slug": "count-fertile-pyramids-in-a-land",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [[0,1,1,0],[1,1,1,1]]",
                "Output": "** 2",
                "Explanation": "** The 2 possible pyramidal plots are shown in blue and red respectively.\nThere are no inverse pyramidal plots in this grid. \nHence total number of pyramidal and inverse pyramidal plots is 2 + 0 = 2."
            },
            {
                "Input": "** grid = [[1,1,1],[1,1,1]]",
                "Output": "** 2",
                "Explanation": "** The pyramidal plot is shown in blue, and the inverse pyramidal plot is shown in red. \nHence the total number of plots is 1 + 1 = 2."
            },
            {
                "Input": "** grid = [[1,1,1,1,0],[1,1,1,1,1],[1,1,1,1,1],[0,1,0,0,1]]",
                "Output": "** 13",
                "Explanation": "** There are 7 pyramidal plots, 3 of which are shown in the 2nd and 3rd figures.\nThere are 6 inverse pyramidal plots, 2 of which are shown in the last figure.\nThe total number of plots is 7 + 6 = 13."
            }
        ]
    },
    {
        "Title": "Find Target Indices After Sorting Array",
        "slug": "find-target-indices-after-sorting-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,5,2,3], target = 2",
                "Output": "** [1,2]",
                "Explanation": "** After sorting, nums is [1,**2**,**2**,3,5].\nThe indices where nums[i] == 2 are 1 and 2."
            },
            {
                "Input": "** nums = [1,2,5,2,3], target = 3",
                "Output": "** [3]",
                "Explanation": "** After sorting, nums is [1,2,2,**3**,5].\nThe index where nums[i] == 3 is 3."
            },
            {
                "Input": "** nums = [1,2,5,2,3], target = 5",
                "Output": "** [4]",
                "Explanation": "** After sorting, nums is [1,2,2,3,**5**].\nThe index where nums[i] == 5 is 4."
            }
        ]
    },
    {
        "Title": "K Radius Subarray Averages",
        "slug": "k-radius-subarray-averages",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [7,4,3,9,1,8,5,2,6], k = 3",
                "Output": "** [-1,-1,-1,5,4,4,-1,-1,-1]",
                "Explanation": "**\n- avg[0], avg[1], and avg[2] are -1 because there are less than k elements **before** each index.\n- The sum of the subarray centered at index 3 with radius 3 is: 7 + 4 + 3 + 9 + 1 + 8 + 5 = 37.\n  Using **integer division**, avg[3] = 37 / 7 = 5.\n- For the subarray centered at index 4, avg[4] = (4 + 3 + 9 + 1 + 8 + 5 + 2) / 7 = 4.\n- For the subarray centered at index 5, avg[5] = (3 + 9 + 1 + 8 + 5 + 2 + 6) / 7 = 4.\n- avg[6], avg[7], and avg[8] are -1 because there are less than k elements **after** each index."
            }
        ]
    },
    {
        "Title": "Removing Minimum and Maximum From Array",
        "slug": "removing-minimum-and-maximum-from-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,**10**,7,5,4,**1**,8,6]",
                "Output": "** 5",
                "Explanation": "** \nThe minimum element in the array is nums[5], which is 1.\nThe maximum element in the array is nums[1], which is 10.\nWe can remove both the minimum and maximum by removing 2 elements from the front and 3 elements from the back.\nThis results in 2 + 3 = 5 deletions, which is the minimum number possible."
            },
            {
                "Input": "** nums = [0,**-4**,**19**,1,8,-2,-3,5]",
                "Output": "** 3",
                "Explanation": "** \nThe minimum element in the array is nums[1], which is -4.\nThe maximum element in the array is nums[2], which is 19.\nWe can remove both the minimum and maximum by removing 3 elements from the front.\nThis results in only 3 deletions, which is the minimum number possible."
            },
            {
                "Input": "** nums = [**101**]",
                "Output": "** 1",
                "Explanation": "**  \nThere is only one element in the array, which makes it both the minimum and maximum element.\nWe can remove it with 1 deletion."
            }
        ]
    },
    {
        "Title": "Find All People With Secret",
        "slug": "find-all-people-with-secret",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 6, meetings = [[1,2,5],[2,3,8],[1,5,10]], firstPerson = 1",
                "Output": "** [0,1,2,3,5]",
                "Explanation": "**At time 0, person 0 shares the secret with person 1.\nAt time 5, person 1 shares the secret with person 2.\nAt time 8, person 2 shares the secret with person 3.\nAt time 10, person 1 shares the secret with person 5.\u200b\u200b\u200b\u200b\nThus, people 0, 1, 2, 3, and 5 know the secret after all the meetings."
            },
            {
                "Input": "** n = 4, meetings = [[3,1,3],[1,2,2],[0,3,3]], firstPerson = 3",
                "Output": "** [0,1,3]",
                "Explanation": "**\nAt time 0, person 0 shares the secret with person 3.\nAt time 2, neither person 1 nor person 2 know the secret.\nAt time 3, person 3 shares the secret with person 0 and person 1.\nThus, people 0, 1, and 3 know the secret after all the meetings."
            },
            {
                "Input": "** n = 5, meetings = [[3,4,2],[1,2,1],[2,3,1]], firstPerson = 1",
                "Output": "** [0,1,2,3,4]",
                "Explanation": "**\nAt time 0, person 0 shares the secret with person 1.\nAt time 1, person 1 shares the secret with person 2, and person 2 shares the secret with person 3.\nNote that person 2 can share the secret at the same time as receiving it.\nAt time 2, person 3 shares the secret with person 4.\nThus, people 0, 1, 2, 3, and 4 know the secret after all the meetings."
            }
        ]
    },
    {
        "Title": "Finding 3-Digit Even Numbers",
        "slug": "finding-3-digit-even-numbers",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** digits = [2,1,3,0]",
                "Output": "** [102,120,130,132,210,230,302,310,312,320]",
                "Explanation": "** All the possible integers that follow the requirements are in the output array. \nNotice that there are no **odd** integers or integers with **leading zeros**."
            },
            {
                "Input": "** digits = [2,2,8,8,2]",
                "Output": "** [222,228,282,288,822,828,882]",
                "Explanation": "** The same digit can be used as many times as it appears in digits. \nIn this example, the digit 8 is used twice each time in 288, 828, and 882."
            },
            {
                "Input": "** digits = [3,7,5]",
                "Output": "** []",
                "Explanation": "** No **even** integers can be formed using the given digits."
            }
        ]
    },
    {
        "Title": "Delete the Middle Node of a Linked List",
        "slug": "delete-the-middle-node-of-a-linked-list",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [1,3,4,7,1,2,6]",
                "Output": "** [1,3,4,1,2,6]",
                "Explanation": "**\nThe above figure represents the given linked list. The indices of the nodes are written below.\nSince n = 7, node 3 with value 7 is the middle node, which is marked in red.\nWe return the new list after removing this node."
            },
            {
                "Input": "** head = [1,2,3,4]",
                "Output": "** [1,2,4]",
                "Explanation": "**\nThe above figure represents the given linked list.\nFor n = 4, node 2 with value 3 is the middle node, which is marked in red."
            },
            {
                "Input": "** head = [2,1]",
                "Output": "** [2]",
                "Explanation": "**\nThe above figure represents the given linked list.\nFor n = 2, node 1 with value 1 is the middle node, which is marked in red.\nNode 0 with value 2 is the only node remaining after removing node 1."
            }
        ]
    },
    {
        "Title": "Step-By-Step Directions From a Binary Tree Node to Another",
        "slug": "step-by-step-directions-from-a-binary-tree-node-to-another",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [5,1,2,3,null,6,4], startValue = 3, destValue = 6",
                "Output": "** \"UURL\"",
                "Explanation": "** The shortest path is: 3 \u2192 1 \u2192 5 \u2192 2 \u2192 6."
            },
            {
                "Input": "** root = [2,1], startValue = 2, destValue = 1",
                "Output": "** \"L\"",
                "Explanation": "** The shortest path is: 2 \u2192 1."
            }
        ]
    },
    {
        "Title": "Valid Arrangement of Pairs",
        "slug": "valid-arrangement-of-pairs",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** pairs = [[5,1],[4,5],[11,9],[9,4]]",
                "Output": "** [[11,9],[9,4],[4,5],[5,1]]",
                "Explanation": "**This is a valid arrangement since endi-1 always equals starti.\nend0 = 9 == 9 = start1 \nend1 = 4 == 4 = start2\nend2 = 5 == 5 = start3"
            },
            {
                "Input": "** pairs = [[1,3],[3,2],[2,1]]",
                "Output": "** [[1,3],[3,2],[2,1]]",
                "Explanation": "**\nThis is a valid arrangement since endi-1 always equals starti.\nend0 = 3 == 3 = start1\nend1 = 2 == 2 = start2\nThe arrangements [[2,1],[1,3],[3,2]] and [[3,2],[2,1],[1,3]] are also valid."
            },
            {
                "Input": "** pairs = [[1,2],[1,3],[2,1]]",
                "Output": "** [[1,2],[2,1],[1,3]]",
                "Explanation": "**\nThis is a valid arrangement since endi-1 always equals starti.\nend0 = 2 == 2 = start1\nend1 = 1 == 1 = start2"
            }
        ]
    },
    {
        "Title": "Find Subsequence of Length K With the Largest Sum",
        "slug": "find-subsequence-of-length-k-with-the-largest-sum",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [2,1,3,3], k = 2",
                "Output": "** [3,3]",
                "Explanation": "**\nThe subsequence has the largest sum of 3 + 3 = 6."
            },
            {
                "Input": "** nums = [-1,-2,3,4], k = 3",
                "Output": "** [-1,3,4]",
                "Explanation": "** \nThe subsequence has the largest sum of -1 + 3 + 4 = 6."
            },
            {
                "Input": "** nums = [3,4,3,3], k = 2",
                "Output": "** [3,4]",
                "Explanation": "**\nThe subsequence has the largest sum of 3 + 4 = 7. \nAnother possible subsequence is [4, 3]."
            }
        ]
    },
    {
        "Title": "Find Good Days to Rob the Bank",
        "slug": "find-good-days-to-rob-the-bank",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** security = [5,3,3,3,5,6,2], time = 2",
                "Output": "** [2,3]",
                "Explanation": "**\nOn day 2, we have security[0] >= security[1] >= security[2] <= security[3] <= security[4].\nOn day 3, we have security[1] >= security[2] >= security[3] <= security[4] <= security[5].\nNo other days satisfy this condition, so days 2 and 3 are the only good days to rob the bank."
            },
            {
                "Input": "** security = [1,1,1,1,1], time = 0",
                "Output": "** [0,1,2,3,4]",
                "Explanation": "**\nSince time equals 0, every day is a good day to rob the bank, so return every day."
            },
            {
                "Input": "** security = [1,2,3,4,5,6], time = 2",
                "Output": "** []",
                "Explanation": "**\nNo day has 2 days before it that have a non-increasing number of guards.\nThus, no day is a good day to rob the bank, so return an empty list."
            }
        ]
    },
    {
        "Title": "Detonate the Maximum Bombs",
        "slug": "detonate-the-maximum-bombs",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** bombs = [[2,1,3],[6,1,4]]",
                "Output": "** 2",
                "Explanation": "**\nThe above figure shows the positions and ranges of the 2 bombs.\nIf we detonate the left bomb, the right bomb will not be affected.\nBut if we detonate the right bomb, both bombs will be detonated.\nSo the maximum bombs that can be detonated is max(1, 2) = 2."
            },
            {
                "Input": "** bombs = [[1,1,5],[10,10,5]]",
                "Output": "** 1",
                "Explanation": "**Detonating either bomb will not detonate the other bomb, so the maximum number of bombs that can be detonated is 1."
            },
            {
                "Input": "** bombs = [[1,2,3],[2,3,1],[3,4,2],[4,5,3],[5,6,4]]",
                "Output": "** 5",
                "Explanation": "**\nThe best bomb to detonate is bomb 0 because:\n- Bomb 0 detonates bombs 1 and 2. The red circle denotes the range of bomb 0.\n- Bomb 2 detonates bomb 3. The blue circle denotes the range of bomb 2.\n- Bomb 3 detonates bomb 4. The green circle denotes the range of bomb 3.\nThus all 5 bombs are detonated."
            }
        ]
    },
    {
        "Title": "Sequentially Ordinal Rank Tracker",
        "slug": "sequentially-ordinal-rank-tracker",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"SORTracker\", \"add\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"get\"]\n[[], [\"bradford\", 2], [\"branford\", 3], [], [\"alps\", 2], [], [\"orland\", 2], [], [\"orlando\", 3], [], [\"alpine\", 2], [], []]",
                "Output": "[null, null, null, \"branford\", null, \"alps\", null, \"bradford\", null, \"bradford\", null, \"bradford\", \"orland\"]",
                "Explanation": "SORTracker tracker = new SORTracker(); // Initialize the tracker system.\ntracker.add(\"bradford\", 2); // Add location with name=\"bradford\" and score=2 to the system.\ntracker.add(\"branford\", 3); // Add location with name=\"branford\" and score=3 to the system.\ntracker.get();              // The sorted locations, from best to worst, are: branford, bradford.\n                            // Note that branford precedes bradford due to its **higher score** (3 > 2).\n                            // This is the 1st time get() is called, so return the best location: \"branford\".\ntracker.add(\"alps\", 2);     // Add location with name=\"alps\" and score=2 to the system.\ntracker.get();              // Sorted locations: branford, alps, bradford.\n                            // Note that alps precedes bradford even though they have the same score (2).\n                            // This is because \"alps\" is **lexicographically smaller** than \"bradford\".\n                            // Return the 2nd best location \"alps\", as it is the 2nd time get() is called.\ntracker.add(\"orland\", 2);   // Add location with name=\"orland\" and score=2 to the system.\ntracker.get();              // Sorted locations: branford, alps, bradford, orland.\n                            // Return \"bradford\", as it is the 3rd time get() is called.\ntracker.add(\"orlando\", 3);  // Add location with name=\"orlando\" and score=3 to the system.\ntracker.get();              // Sorted locations: branford, orlando, alps, bradford, orland.\n                            // Return \"bradford\".\ntracker.add(\"alpine\", 2);   // Add location with name=\"alpine\" and score=2 to the system.\ntracker.get();              // Sorted locations: branford, orlando, alpine, alps, bradford, orland.\n                            // Return \"bradford\".\ntracker.get();              // Sorted locations: branford, orlando, alpine, alps, bradford, orland.\n                            // Return \"orland\"."
            }
        ]
    },
    {
        "Title": "Rings and Rods",
        "slug": "rings-and-rods",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** rings = \"B0B6G0R6R0R6G9\"",
                "Output": "** 1",
                "Explanation": "** \n- The rod labeled 0 holds 3 rings with all colors: red, green, and blue.\n- The rod labeled 6 holds 3 rings, but it only has red and blue.\n- The rod labeled 9 holds only a green ring.\nThus, the number of rods with all three colors is 1."
            },
            {
                "Input": "** rings = \"B0R0G0R9R0B0G0\"",
                "Output": "** 1",
                "Explanation": "** \n- The rod labeled 0 holds 6 rings with all colors: red, green, and blue.\n- The rod labeled 9 holds only a red ring.\nThus, the number of rods with all three colors is 1."
            }
        ]
    },
    {
        "Title": "Sum of Subarray Ranges",
        "slug": "sum-of-subarray-ranges",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 4",
                "Explanation": "** The 6 subarrays of nums are the following:\n[1], range = largest - smallest = 1 - 1 = 0 \n[2], range = 2 - 2 = 0\n[3], range = 3 - 3 = 0\n[1,2], range = 2 - 1 = 1\n[2,3], range = 3 - 2 = 1\n[1,2,3], range = 3 - 1 = 2\nSo the sum of all ranges is 0 + 0 + 0 + 1 + 1 + 2 = 4."
            },
            {
                "Input": "** nums = [1,3,3]",
                "Output": "** 4",
                "Explanation": "** The 6 subarrays of nums are the following:\n[1], range = largest - smallest = 1 - 1 = 0\n[3], range = 3 - 3 = 0\n[3], range = 3 - 3 = 0\n[1,3], range = 3 - 1 = 2\n[3,3], range = 3 - 3 = 0\n[1,3,3], range = 3 - 1 = 2\nSo the sum of all ranges is 0 + 0 + 0 + 2 + 0 + 2 = 4."
            },
            {
                "Input": "** nums = [4,-2,-3,4,1]",
                "Output": "** 59",
                "Explanation": "** The sum of all subarray ranges of nums is 59."
            }
        ]
    },
    {
        "Title": "Watering Plants II",
        "slug": "watering-plants-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** plants = [2,2,3,3], capacityA = 5, capacityB = 5",
                "Output": "** 1",
                "Explanation": "**\n- Initially, Alice and Bob have 5 units of water each in their watering cans.\n- Alice waters plant 0, Bob waters plant 3.\n- Alice and Bob now have 3 units and 2 units of water respectively.\n- Alice has enough water for plant 1, so she waters it. Bob does not have enough water for plant 2, so he refills his can then waters it.\nSo, the total number of times they have to refill to water all the plants is 0 + 0 + 1 + 0 = 1."
            },
            {
                "Input": "** plants = [2,2,3,3], capacityA = 3, capacityB = 4",
                "Output": "** 2",
                "Explanation": "**\n- Initially, Alice and Bob have 3 units and 4 units of water in their watering cans respectively.\n- Alice waters plant 0, Bob waters plant 3.\n- Alice and Bob now have 1 unit of water each, and need to water plants 1 and 2 respectively.\n- Since neither of them have enough water for their current plants, they refill their cans and then water the plants.\nSo, the total number of times they have to refill to water all the plants is 0 + 1 + 1 + 0 = 2."
            },
            {
                "Input": "** plants = [5], capacityA = 10, capacityB = 8",
                "Output": "** 0",
                "Explanation": "**\n- There is only one plant.\n- Alice's watering can has 10 units of water, whereas Bob's can has 8 units. Since Alice has more water in her can, she waters this plant.\nSo, the total number of times they have to refill is 0."
            }
        ]
    },
    {
        "Title": "Maximum Fruits Harvested After at Most K Steps",
        "slug": "maximum-fruits-harvested-after-at-most-k-steps",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** fruits = [[2,8],[6,3],[8,6]], startPos = 5, k = 4",
                "Output": "** 9",
                "Explanation": "** \nThe optimal way is to:\n- Move right to position 6 and harvest 3 fruits\n- Move right to position 8 and harvest 6 fruits\nYou moved 3 steps and harvested 3 + 6 = 9 fruits in total."
            },
            {
                "Input": "** fruits = [[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]], startPos = 5, k = 4",
                "Output": "** 14",
                "Explanation": "** \nYou can move at most k = 4 steps, so you cannot reach position 0 nor 10.\nThe optimal way is to:\n- Harvest the 7 fruits at the starting position 5\n- Move left to position 4 and harvest 1 fruit\n- Move right to position 6 and harvest 2 fruits\n- Move right to position 7 and harvest 4 fruits\nYou moved 1 + 3 = 4 steps and harvested 7 + 1 + 2 + 4 = 14 fruits in total."
            },
            {
                "Input": "** fruits = [[0,3],[6,4],[8,5]], startPos = 3, k = 2",
                "Output": "** 0",
                "Explanation": "**\nYou can move at most k = 2 steps and cannot reach any position with fruits."
            }
        ]
    },
    {
        "Title": "Find First Palindromic String in the Array",
        "slug": "find-first-palindromic-string-in-the-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** words = [\"abc\",\"car\",\"ada\",\"racecar\",\"cool\"]",
                "Output": "** \"ada\"",
                "Explanation": "** The first string that is palindromic is \"ada\".\nNote that \"racecar\" is also palindromic, but it is not the first."
            },
            {
                "Input": "** words = [\"notapalindrome\",\"racecar\"]",
                "Output": "** \"racecar\"",
                "Explanation": "** The first and only string that is palindromic is \"racecar\"."
            },
            {
                "Input": "** words = [\"def\",\"ghi\"]",
                "Output": "** \"\"",
                "Explanation": "** There are no palindromic strings, so the empty string is returned."
            }
        ]
    },
    {
        "Title": "Adding Spaces to a String",
        "slug": "adding-spaces-to-a-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"LeetcodeHelpsMeLearn\", spaces = [8,13,15]",
                "Output": "** \"Leetcode Helps Me Learn\"",
                "Explanation": "** \nThe indices 8, 13, and 15 correspond to the underlined characters in \"Leetcode**H**elps**M**e**L**earn\".\nWe then place spaces before those characters."
            },
            {
                "Input": "** s = \"icodeinpython\", spaces = [1,5,7,9]",
                "Output": "** \"i code in py thon\"",
                "Explanation": "**\nThe indices 1, 5, 7, and 9 correspond to the underlined characters in \"i**c**ode**i**n**p**y**t**hon\".\nWe then place spaces before those characters."
            },
            {
                "Input": "** s = \"spacing\", spaces = [0,1,2,3,4,5,6]",
                "Output": "** \" s p a c i n g\"",
                "Explanation": "**\nWe are also able to place spaces before the first character of the string."
            }
        ]
    },
    {
        "Title": "Number of Smooth Descent Periods of a Stock",
        "slug": "number-of-smooth-descent-periods-of-a-stock",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** prices = [3,2,1,4]",
                "Output": "** 7",
                "Explanation": "** There are 7 smooth descent periods:\n[3], [2], [1], [4], [3,2], [2,1], and [3,2,1]\nNote that a period with one day is a smooth descent period by the definition."
            },
            {
                "Input": "** prices = [8,6,7,7]",
                "Output": "** 4",
                "Explanation": "** There are 4 smooth descent periods: [8], [6], [7], and [7]\nNote that [8,6] is not a smooth descent period as 8 - 6 \u2260 1."
            },
            {
                "Input": "** prices = [1]",
                "Output": "** 1",
                "Explanation": "** There is 1 smooth descent period: [1]"
            }
        ]
    },
    {
        "Title": "Minimum Operations to Make the Array K-Increasing",
        "slug": "minimum-operations-to-make-the-array-k-increasing",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** arr = [5,4,3,2,1], k = 1",
                "Output": "** 4",
                "Explanation": "**For k = 1, the resultant array has to be non-decreasing.\nSome of the K-increasing arrays that can be formed are [5,**6**,**7**,**8**,**9**], [**1**,**1**,**1**,**1**,1], [**2**,**2**,3,**4**,**4**]. All of them require 4 operations.\nIt is suboptimal to change the array to, for example, [**6**,**7**,**8**,**9**,**10**] because it would take 5 operations.\nIt can be shown that we cannot make the array K-increasing in less than 4 operations."
            },
            {
                "Input": "** arr = [4,1,5,2,6,2], k = 2",
                "Output": "** 0",
                "Explanation": "**\nThis is the same example as the one in the problem description.\nHere, for every index i where 2 <= i <= 5, arr[i-2] <=arr[i].\nSince the given array is already K-increasing, we do not need to perform any operations."
            },
            {
                "Input": "** arr = [4,1,5,2,6,2], k = 3",
                "Output": "** 2",
                "Explanation": "**\nIndices 3 and 5 are the only ones not satisfying arr[i-3] <= arr[i] for 3 <= i <= 5.\nOne of the ways we can make the array K-increasing is by changing arr[3] to 4 and arr[5] to 5.\nThe array will now be [4,1,5,**4**,6,**5**].\nNote that there can be other ways to make the array K-increasing, but none of them require less than 2 operations."
            }
        ]
    },
    {
        "Title": "Maximum Number of Words Found in Sentences",
        "slug": "maximum-number-of-words-found-in-sentences",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** sentences = [\"alice and bob love leetcode\", \"i think so too\", \"this is great thanks very much\"]",
                "Output": "** 6",
                "Explanation": "** \n- The first sentence, \"alice and bob love leetcode\", has 5 words in total.\n- The second sentence, \"i think so too\", has 4 words in total.\n- The third sentence, \"this is great thanks very much\", has 6 words in total.\nThus, the maximum number of words in a single sentence comes from the third sentence, which has 6 words."
            },
            {
                "Input": "** sentences = [\"please wait\", \"continue to fight\", \"continue to win\"]",
                "Output": "** 3",
                "Explanation": "** It is possible that multiple sentences contain the same number of words. \nIn this example, the second and third sentences (underlined) have the same number of words."
            }
        ]
    },
    {
        "Title": "Find All Possible Recipes from Given Supplies",
        "slug": "find-all-possible-recipes-from-given-supplies",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** recipes = [\"bread\"], ingredients = [[\"yeast\",\"flour\"]], supplies = [\"yeast\",\"flour\",\"corn\"]",
                "Output": "** [\"bread\"]",
                "Explanation": "**\nWe can create \"bread\" since we have the ingredients \"yeast\" and \"flour\"."
            },
            {
                "Input": "** recipes = [\"bread\",\"sandwich\"], ingredients = [[\"yeast\",\"flour\"],[\"bread\",\"meat\"]], supplies = [\"yeast\",\"flour\",\"meat\"]",
                "Output": "** [\"bread\",\"sandwich\"]",
                "Explanation": "**\nWe can create \"bread\" since we have the ingredients \"yeast\" and \"flour\".\nWe can create \"sandwich\" since we have the ingredient \"meat\" and can create the ingredient \"bread\"."
            },
            {
                "Input": "** recipes = [\"bread\",\"sandwich\",\"burger\"], ingredients = [[\"yeast\",\"flour\"],[\"bread\",\"meat\"],[\"sandwich\",\"meat\",\"bread\"]], supplies = [\"yeast\",\"flour\",\"meat\"]",
                "Output": "** [\"bread\",\"sandwich\",\"burger\"]",
                "Explanation": "**\nWe can create \"bread\" since we have the ingredients \"yeast\" and \"flour\".\nWe can create \"sandwich\" since we have the ingredient \"meat\" and can create the ingredient \"bread\".\nWe can create \"burger\" since we have the ingredient \"meat\" and can create the ingredients \"bread\" and \"sandwich\"."
            }
        ]
    },
    {
        "Title": "Check if a Parentheses String Can Be Valid",
        "slug": "check-if-a-parentheses-string-can-be-valid",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"))()))\", locked = \"010100\"",
                "Output": "** true",
                "Explanation": "** locked[1] == '1' and locked[3] == '1', so we cannot change s[1] or s[3].\nWe change s[0] and s[4] to '(' while leaving s[2] and s[5] unchanged to make s valid."
            }
        ]
    },
    {
        "Title": "Abbreviating the Product of a Range",
        "slug": "abbreviating-the-product-of-a-range",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** left = 1, right = 4",
                "Output": "** \"24e0\"",
                "Explanation": "** The product is 1 \u00d7 2 \u00d7 3 \u00d7 4 = 24.\nThere are no trailing zeros, so 24 remains the same. The abbreviation will end with \"e0\".\nSince the number of digits is 2, which is less than 10, we do not have to abbreviate it further.\nThus, the final representation is \"24e0\"."
            },
            {
                "Input": "** left = 2, right = 11",
                "Output": "** \"399168e2\"",
                "Explanation": "** The product is 39916800.\nThere are 2 trailing zeros, which we remove to get 399168. The abbreviation will end with \"e2\".\nThe number of digits after removing the trailing zeros is 6, so we do not abbreviate it further.\nHence, the abbreviated product is \"399168e2\"."
            },
            {
                "Input": "** left = 371, right = 375",
                "Output": "** \"7219856259e3\"",
                "Explanation": "** The product is 7219856259000."
            }
        ]
    },
    {
        "Title": "A Number After a Double Reversal",
        "slug": "a-number-after-a-double-reversal",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num = 526",
                "Output": "** true",
                "Explanation": "** Reverse num to get 625, then reverse 625 to get 526, which equals num."
            },
            {
                "Input": "** num = 1800",
                "Output": "** false",
                "Explanation": "** Reverse num to get 81, then reverse 81 to get 18, which does not equal num."
            },
            {
                "Input": "** num = 0",
                "Output": "** true",
                "Explanation": "** Reverse num to get 0, then reverse 0 to get 0, which equals num."
            }
        ]
    },
    {
        "Title": "Execution of All Suffix Instructions Staying in a Grid",
        "slug": "execution-of-all-suffix-instructions-staying-in-a-grid",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3, startPos = [0,1], s = \"RRDDLU\"",
                "Output": "** [1,5,4,3,1,0]",
                "Explanation": "** Starting from startPos and beginning execution from the ith instruction:\n- 0th: \"**R**RDDLU\". Only one instruction \"R\" can be executed before it moves off the grid.\n- 1st:  \"**RDDLU**\". All five instructions can be executed while it stays in the grid and ends at (1, 1).\n- 2nd:   \"**DDLU**\". All four instructions can be executed while it stays in the grid and ends at (1, 0).\n- 3rd:    \"**DLU**\". All three instructions can be executed while it stays in the grid and ends at (0, 0).\n- 4th:     \"**L**U\". Only one instruction \"L\" can be executed before it moves off the grid.\n- 5th:      \"U\". If moving up, it would move off the grid."
            },
            {
                "Input": "** n = 2, startPos = [1,1], s = \"LURD\"",
                "Output": "** [4,1,0,0]",
                "Explanation": "**\n- 0th: \"**LURD**\".\n- 1st:  \"**U**RD\".\n- 2nd:   \"RD\".\n- 3rd:    \"D\"."
            },
            {
                "Input": "** n = 1, startPos = [0,0], s = \"LRUD\"",
                "Output": "** [0,0,0,0]",
                "Explanation": "** No matter which instruction the robot begins execution from, it would move off the grid."
            }
        ]
    },
    {
        "Title": "Intervals Between Identical Elements",
        "slug": "intervals-between-identical-elements",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [2,1,3,1,2,3,3]",
                "Output": "** [4,2,7,2,4,4,5]",
                "Explanation": "**\n- Index 0: Another 2 is found at index 4. |0 - 4| = 4\n- Index 1: Another 1 is found at index 3. |1 - 3| = 2\n- Index 2: Two more 3s are found at indices 5 and 6. |2 - 5| + |2 - 6| = 7\n- Index 3: Another 1 is found at index 1. |3 - 1| = 2\n- Index 4: Another 2 is found at index 0. |4 - 0| = 4\n- Index 5: Two more 3s are found at indices 2 and 6. |5 - 2| + |5 - 6| = 4\n- Index 6: Two more 3s are found at indices 2 and 5. |6 - 2| + |6 - 5| = 5"
            },
            {
                "Input": "** arr = [10,5,10,10]",
                "Output": "** [5,0,3,4]",
                "Explanation": "**\n- Index 0: Two more 10s are found at indices 2 and 3. |0 - 2| + |0 - 3| = 5\n- Index 1: There is only one 5 in the array, so its sum of intervals to identical elements is 0.\n- Index 2: Two more 10s are found at indices 0 and 3. |2 - 0| + |2 - 3| = 3\n- Index 3: Two more 10s are found at indices 0 and 2. |3 - 0| + |3 - 2| = 4"
            }
        ]
    },
    {
        "Title": "Recover the Original Array",
        "slug": "recover-the-original-array",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [2,10,6,4,8,12]",
                "Output": "** [3,7,11]",
                "Explanation": "**\nIf arr = [3,7,11] and k = 1, we get lower = [2,6,10] and higher = [4,8,12].\nCombining lower and higher gives us [2,6,10,4,8,12], which is a permutation of nums.\nAnother valid possibility is that arr = [5,7,9] and k = 3. In that case, lower = [2,4,6] and higher = [8,10,12]."
            },
            {
                "Input": "** nums = [1,1,3,3]",
                "Output": "** [2,2]",
                "Explanation": "**\nIf arr = [2,2] and k = 1, we get lower = [1,1] and higher = [3,3].\nCombining lower and higher gives us [1,1,3,3], which is equal to nums.\nNote that arr cannot be [1,3] because in that case, the only possible way to obtain [1,1,3,3] is with k = 0.\nThis is invalid since k must be positive."
            },
            {
                "Input": "** nums = [5,435]",
                "Output": "** [220]",
                "Explanation": "**\nThe only possible combination is arr = [220] and k = 215. Using them, we get lower = [5] and higher = [435]."
            }
        ]
    },
    {
        "Title": "Check if All A's Appears Before All B's",
        "slug": "check-if-all-as-appears-before-all-bs",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"aaabbb\"",
                "Output": "** true",
                "Explanation": "**\nThe 'a's are at indices 0, 1, and 2, while the 'b's are at indices 3, 4, and 5.\nHence, every 'a' appears before every 'b' and we return true."
            },
            {
                "Input": "** s = \"abab\"",
                "Output": "** false",
                "Explanation": "**\nThere is an 'a' at index 2 and a 'b' at index 1.\nHence, not every 'a' appears before every 'b' and we return false."
            },
            {
                "Input": "** s = \"bbb\"",
                "Output": "** true",
                "Explanation": "**\nThere are no 'a's, hence, every 'a' appears before every 'b' and we return true."
            }
        ]
    },
    {
        "Title": "Number of Laser Beams in a Bank",
        "slug": "number-of-laser-beams-in-a-bank",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** bank = [\"011001\",\"000000\",\"010100\",\"001000\"]",
                "Output": "** 8",
                "Explanation": "** Between each of the following device pairs, there is one beam. In total, there are 8 beams:\n * bank[0][1] -- bank[2][1]\n * bank[0][1] -- bank[2][3]\n * bank[0][2] -- bank[2][1]\n * bank[0][2] -- bank[2][3]\n * bank[0][5] -- bank[2][1]\n * bank[0][5] -- bank[2][3]\n * bank[2][1] -- bank[3][2]\n * bank[2][3] -- bank[3][2]\nNote that there is no beam between any device on the 0th row with any on the 3rd row.\nThis is because the 2nd row contains security devices, which breaks the second condition."
            },
            {
                "Input": "** bank = [\"000\",\"111\",\"000\"]",
                "Output": "** 0",
                "Explanation": "** There does not exist two devices located on two different rows."
            }
        ]
    },
    {
        "Title": "Destroying Asteroids",
        "slug": "destroying-asteroids",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** mass = 10, asteroids = [3,9,19,5,21]",
                "Output": "** true",
                "Explanation": "** One way to order the asteroids is [9,19,5,3,21]:\n- The planet collides with the asteroid with a mass of 9. New planet mass: 10 + 9 = 19\n- The planet collides with the asteroid with a mass of 19. New planet mass: 19 + 19 = 38\n- The planet collides with the asteroid with a mass of 5. New planet mass: 38 + 5 = 43\n- The planet collides with the asteroid with a mass of 3. New planet mass: 43 + 3 = 46\n- The planet collides with the asteroid with a mass of 21. New planet mass: 46 + 21 = 67\nAll asteroids are destroyed."
            },
            {
                "Input": "** mass = 5, asteroids = [4,9,23,4]",
                "Output": "** false",
                "Explanation": "** \nThe planet cannot ever gain enough mass to destroy the asteroid with a mass of 23.\nAfter the planet destroys the other asteroids, it will have a mass of 5 + 4 + 9 + 4 = 22.\nThis is less than 23, so a collision would not destroy the last asteroid."
            }
        ]
    },
    {
        "Title": "Maximum Employees to Be Invited to a Meeting",
        "slug": "maximum-employees-to-be-invited-to-a-meeting",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** favorite = [2,2,1,2]",
                "Output": "** 3",
                "Explanation": "**\nThe above figure shows how the company can invite employees 0, 1, and 2, and seat them at the round table.\nAll employees cannot be invited because employee 2 cannot sit beside employees 0, 1, and 3, simultaneously.\nNote that the company can also invite employees 1, 2, and 3, and give them their desired seats.\nThe maximum number of employees that can be invited to the meeting is 3."
            },
            {
                "Input": "** favorite = [3,0,1,4,1]",
                "Output": "** 4",
                "Explanation": "**\nThe above figure shows how the company will invite employees 0, 1, 3, and 4, and seat them at the round table.\nEmployee 2 cannot be invited because the two spots next to their favorite employee 1 are taken.\nSo the company leaves them out of the meeting.\nThe maximum number of employees that can be invited to the meeting is 4."
            }
        ]
    },
    {
        "Title": "Capitalize the Title",
        "slug": "capitalize-the-title",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** title = \"capiTalIze tHe titLe\"",
                "Output": "** \"Capitalize The Title\"",
                "Explanation": "**\nSince all the words have a length of at least 3, the first letter of each word is uppercase, and the remaining letters are lowercase."
            },
            {
                "Input": "** title = \"First leTTeR of EACH Word\"",
                "Output": "** \"First Letter of Each Word\"",
                "Explanation": "**\nThe word \"of\" has length 2, so it is all lowercase.\nThe remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase."
            },
            {
                "Input": "** title = \"i lOve leetcode\"",
                "Output": "** \"i Love Leetcode\"",
                "Explanation": "**\nThe word \"i\" has length 1, so it is lowercase.\nThe remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase."
            }
        ]
    },
    {
        "Title": "Maximum Twin Sum of a Linked List",
        "slug": "maximum-twin-sum-of-a-linked-list",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [5,4,2,1]",
                "Output": "** 6",
                "Explanation": "**\nNodes 0 and 1 are the twins of nodes 3 and 2, respectively. All have twin sum = 6.\nThere are no other nodes with twins in the linked list.\nThus, the maximum twin sum of the linked list is 6."
            },
            {
                "Input": "** head = [4,2,2,3]",
                "Output": "** 7",
                "Explanation": "**\nThe nodes with twins present in this linked list are:\n- Node 0 is the twin of node 3 having a twin sum of 4 + 3 = 7.\n- Node 1 is the twin of node 2 having a twin sum of 2 + 2 = 4.\nThus, the maximum twin sum of the linked list is max(7, 4) = 7."
            },
            {
                "Input": "** head = [1,100000]",
                "Output": "** 100001",
                "Explanation": "**\nThere is only one node with a twin in the linked list having twin sum of 1 + 100000 = 100001."
            }
        ]
    },
    {
        "Title": "Longest Palindrome by Concatenating Two Letter Words",
        "slug": "longest-palindrome-by-concatenating-two-letter-words",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** words = [\"lc\",\"cl\",\"gg\"]",
                "Output": "** 6",
                "Explanation": "** One longest palindrome is \"lc\" + \"gg\" + \"cl\" = \"lcggcl\", of length 6.\nNote that \"clgglc\" is another longest palindrome that can be created."
            },
            {
                "Input": "** words = [\"ab\",\"ty\",\"yt\",\"lc\",\"cl\",\"ab\"]",
                "Output": "** 8",
                "Explanation": "** One longest palindrome is \"ty\" + \"lc\" + \"cl\" + \"yt\" = \"tylcclyt\", of length 8.\nNote that \"lcyttycl\" is another longest palindrome that can be created."
            },
            {
                "Input": "** words = [\"cc\",\"ll\",\"xx\"]",
                "Output": "** 2",
                "Explanation": "** One longest palindrome is \"cc\", of length 2.\nNote that \"ll\" is another longest palindrome that can be created, and so is \"xx\"."
            }
        ]
    },
    {
        "Title": "Stamping the Grid",
        "slug": "stamping-the-grid",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]], stampHeight = 4, stampWidth = 3",
                "Output": "** true",
                "Explanation": "** We have two overlapping stamps (labeled 1 and 2 in the image) that are able to cover all the empty cells."
            },
            {
                "Input": "** grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], stampHeight = 2, stampWidth = 2",
                "Output": "** false",
                "Explanation": "** There is no way to fit the stamps onto all the empty cells without the stamps going outside the grid."
            }
        ]
    },
    {
        "Title": "Check if Every Row and Column Contains All Numbers",
        "slug": "check-if-every-row-and-column-contains-all-numbers",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** matrix = [[1,2,3],[3,1,2],[2,3,1]]",
                "Output": "** true",
                "Explanation": "** In this case, n = 3, and every row and column contains the numbers 1, 2, and 3.\nHence, we return true."
            },
            {
                "Input": "** matrix = [[1,1,1],[1,2,3],[1,2,3]]",
                "Output": "** false",
                "Explanation": "** In this case, n = 3, but the first row and the first column do not contain the numbers 2 or 3.\nHence, we return false."
            }
        ]
    },
    {
        "Title": "Minimum Swaps to Group All 1's Together II",
        "slug": "minimum-swaps-to-group-all-1s-together-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [0,1,0,1,1,0,0]",
                "Output": "** 1",
                "Explanation": "** Here are a few of the ways to group all the 1's together:\n[0,0,1,1,1,0,0] using 1 swap.\n[0,1,1,1,0,0,0] using 1 swap.\n[1,1,0,0,0,0,1] using 2 swaps (using the circular property of the array).\nThere is no way to group all 1's together with 0 swaps.\nThus, the minimum number of swaps required is 1."
            },
            {
                "Input": "** nums = [0,1,1,1,0,0,1,1,0]",
                "Output": "** 2",
                "Explanation": "** Here are a few of the ways to group all the 1's together:\n[1,1,1,0,0,0,0,1,1] using 2 swaps (using the circular property of the array).\n[1,1,1,1,1,0,0,0,0] using 2 swaps.\nThere is no way to group all 1's together with 0 or 1 swaps.\nThus, the minimum number of swaps required is 2."
            },
            {
                "Input": "** nums = [1,1,0,0,1]",
                "Output": "** 0",
                "Explanation": "** All the 1's are already grouped together due to the circular property of the array.\nThus, the minimum number of swaps required is 0."
            }
        ]
    },
    {
        "Title": "Count Words Obtained After Adding a Letter",
        "slug": "count-words-obtained-after-adding-a-letter",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** startWords = [\"ant\",\"act\",\"tack\"], targetWords = [\"tack\",\"act\",\"acti\"]",
                "Output": "** 2",
                "Explanation": "**\n- In order to form targetWords[0] = \"tack\", we use startWords[1] = \"act\", append 'k' to it, and rearrange \"actk\" to \"tack\".\n- There is no string in startWords that can be used to obtain targetWords[1] = \"act\".\n  Note that \"act\" does exist in startWords, but we **must** append one letter to the string before rearranging it.\n- In order to form targetWords[2] = \"acti\", we use startWords[1] = \"act\", append 'i' to it, and rearrange \"acti\" to \"acti\" itself."
            },
            {
                "Input": "** startWords = [\"ab\",\"a\"], targetWords = [\"abc\",\"abcd\"]",
                "Output": "** 1",
                "Explanation": "**\n- In order to form targetWords[0] = \"abc\", we use startWords[0] = \"ab\", add 'c' to it, and rearrange it to \"abc\".\n- There is no string in startWords that can be used to obtain targetWords[1] = \"abcd\"."
            }
        ]
    },
    {
        "Title": "Earliest Possible Day of Full Bloom",
        "slug": "earliest-possible-day-of-full-bloom",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** plantTime = [1,4,3], growTime = [2,3,1]",
                "Output": "** 9",
                "Explanation": "** The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.\nOne optimal way is:\nOn day 0, plant the 0th seed. The seed grows for 2 full days and blooms on day 3.\nOn days 1, 2, 3, and 4, plant the 1st seed. The seed grows for 3 full days and blooms on day 8.\nOn days 5, 6, and 7, plant the 2nd seed. The seed grows for 1 full day and blooms on day 9.\nThus, on day 9, all the seeds are blooming."
            },
            {
                "Input": "** plantTime = [1,2,3,2], growTime = [2,1,2,1]",
                "Output": "** 9",
                "Explanation": "** The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.\nOne optimal way is:\nOn day 1, plant the 0th seed. The seed grows for 2 full days and blooms on day 4.\nOn days 0 and 3, plant the 1st seed. The seed grows for 1 full day and blooms on day 5.\nOn days 2, 4, and 5, plant the 2nd seed. The seed grows for 2 full days and blooms on day 8.\nOn days 6 and 7, plant the 3rd seed. The seed grows for 1 full day and blooms on day 9.\nThus, on day 9, all the seeds are blooming."
            }
        ]
    },
    {
        "Title": "Divide a String Into Groups of Size k",
        "slug": "divide-a-string-into-groups-of-size-k",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"abcdefghi\", k = 3, fill = \"x\"",
                "Output": "** [\"abc\",\"def\",\"ghi\"]",
                "Explanation": "**\nThe first 3 characters \"abc\" form the first group.\nThe next 3 characters \"def\" form the second group.\nThe last 3 characters \"ghi\" form the third group.\nSince all groups can be completely filled by characters from the string, we do not need to use fill.\nThus, the groups formed are \"abc\", \"def\", and \"ghi\"."
            },
            {
                "Input": "** s = \"abcdefghij\", k = 3, fill = \"x\"",
                "Output": "** [\"abc\",\"def\",\"ghi\",\"jxx\"]",
                "Explanation": "**\nSimilar to the previous example, we are forming the first three groups \"abc\", \"def\", and \"ghi\".\nFor the last group, we can only use the character 'j' from the string. To complete this group, we add 'x' twice.\nThus, the 4 groups formed are \"abc\", \"def\", \"ghi\", and \"jxx\"."
            }
        ]
    },
    {
        "Title": "Minimum Moves to Reach Target Score",
        "slug": "minimum-moves-to-reach-target-score",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** target = 5, maxDoubles = 0",
                "Output": "** 4",
                "Explanation": "** Keep incrementing by 1 until you reach target."
            },
            {
                "Input": "** target = 19, maxDoubles = 2",
                "Output": "** 7",
                "Explanation": "** Initially, x = 1\nIncrement 3 times so x = 4\nDouble once so x = 8\nIncrement once so x = 9\nDouble again so x = 18\nIncrement once so x = 19"
            },
            {
                "Input": "** target = 10, maxDoubles = 4",
                "Output": "** 4",
                "Explanation": "**Initially, x = 1\nIncrement once so x = 2\nDouble once so x = 4\nIncrement once so x = 5\nDouble again so x = 10"
            }
        ]
    },
    {
        "Title": "Solving Questions With Brainpower",
        "slug": "solving-questions-with-brainpower",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** questions = [[3,2],[4,3],[4,4],[2,5]]",
                "Output": "** 5",
                "Explanation": "** The maximum points can be earned by solving questions 0 and 3.\n- Solve question 0: Earn 3 points, will be unable to solve the next 2 questions\n- Unable to solve questions 1 and 2\n- Solve question 3: Earn 2 points\nTotal points earned: 3 + 2 = 5. There is no other way to earn 5 or more points."
            },
            {
                "Input": "** questions = [[1,1],[2,2],[3,3],[4,4],[5,5]]",
                "Output": "** 7",
                "Explanation": "** The maximum points can be earned by solving questions 1 and 4.\n- Skip question 0\n- Solve question 1: Earn 2 points, will be unable to solve the next 2 questions\n- Unable to solve questions 2 and 3\n- Solve question 4: Earn 5 points\nTotal points earned: 2 + 5 = 7. There is no other way to earn 7 or more points."
            }
        ]
    },
    {
        "Title": "Maximum Running Time of N Computers",
        "slug": "maximum-running-time-of-n-computers",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 2, batteries = [3,3,3]",
                "Output": "** 4",
                "Explanation": "** \nInitially, insert battery 0 into the first computer and battery 1 into the second computer.\nAfter two minutes, remove battery 1 from the second computer and insert battery 2 instead. Note that battery 1 can still run for one minute.\nAt the end of the third minute, battery 0 is drained, and you need to remove it from the first computer and insert battery 1 instead.\nBy the end of the fourth minute, battery 1 is also drained, and the first computer is no longer running.\nWe can run the two computers simultaneously for at most 4 minutes, so we return 4."
            },
            {
                "Input": "** n = 2, batteries = [1,1,1,1]",
                "Output": "** 2",
                "Explanation": "** \nInitially, insert battery 0 into the first computer and battery 2 into the second computer. \nAfter one minute, battery 0 and battery 2 are drained so you need to remove them and insert battery 1 into the first computer and battery 3 into the second computer. \nAfter another minute, battery 1 and battery 3 are also drained so the first and second computers are no longer running.\nWe can run the two computers simultaneously for at most 2 minutes, so we return 2."
            }
        ]
    },
    {
        "Title": "Minimum Cost of Buying Candies With Discount",
        "slug": "minimum-cost-of-buying-candies-with-discount",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** cost = [1,2,3]",
                "Output": "** 5",
                "Explanation": "** We buy the candies with costs 2 and 3, and take the candy with cost 1 for free.\nThe total cost of buying all candies is 2 + 3 = 5. This is the **only** way we can buy the candies.\nNote that we cannot buy candies with costs 1 and 3, and then take the candy with cost 2 for free.\nThe cost of the free candy has to be less than or equal to the minimum cost of the purchased candies."
            },
            {
                "Input": "** cost = [6,5,7,9,2,2]",
                "Output": "** 23",
                "Explanation": "** The way in which we can get the minimum cost is described below:\n- Buy candies with costs 9 and 7\n- Take the candy with cost 6 for free\n- We buy candies with costs 5 and 2\n- Take the last remaining candy with cost 2 for free\nHence, the minimum cost to buy all candies is 9 + 7 + 5 + 2 = 23."
            },
            {
                "Input": "** cost = [5,5]",
                "Output": "** 10",
                "Explanation": "** Since there are only 2 candies, we buy both of them. There is not a third candy we can take for free.\nHence, the minimum cost to buy all candies is 5 + 5 = 10."
            }
        ]
    },
    {
        "Title": "Count the Hidden Sequences",
        "slug": "count-the-hidden-sequences",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** differences = [1,-3,4], lower = 1, upper = 6",
                "Output": "** 2",
                "Explanation": "** The possible hidden sequences are:\n- [3, 4, 1, 5]\n- [4, 5, 2, 6]\nThus, we return 2."
            },
            {
                "Input": "** differences = [3,-4,5,1,-2], lower = -4, upper = 5",
                "Output": "** 4",
                "Explanation": "** The possible hidden sequences are:\n- [-3, 0, -4, 1, 2, 0]\n- [-2, 1, -3, 2, 3, 1]\n- [-1, 2, -2, 3, 4, 2]\n- [0, 3, -1, 4, 5, 3]\nThus, we return 4."
            },
            {
                "Input": "** differences = [4,-7,2], lower = 3, upper = 6",
                "Output": "** 0",
                "Explanation": "** There are no possible hidden sequences. Thus, we return 0."
            }
        ]
    },
    {
        "Title": "K Highest Ranked Items Within a Price Range",
        "slug": "k-highest-ranked-items-within-a-price-range",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[1,2,0,1],[1,3,0,1],[0,2,5,1]], pricing = [2,5], start = [0,0], k = 3",
                "Output": "** [[0,1],[1,1],[2,1]]",
                "Explanation": "** You start at (0,0).\nWith a price range of [2,5], we can take items from (0,1), (1,1), (2,1) and (2,2).\nThe ranks of these items are:\n- (0,1) with distance 1\n- (1,1) with distance 2\n- (2,1) with distance 3\n- (2,2) with distance 4\nThus, the 3 highest ranked items in the price range are (0,1), (1,1), and (2,1)."
            },
            {
                "Input": "** grid = [[1,2,0,1],[1,3,3,1],[0,2,5,1]], pricing = [2,3], start = [2,3], k = 2",
                "Output": "** [[2,1],[1,2]]",
                "Explanation": "** You start at (2,3).\nWith a price range of [2,3], we can take items from (0,1), (1,1), (1,2) and (2,1).\nThe ranks of these items are:\n- (2,1) with distance 2, price 2\n- (1,2) with distance 2, price 3\n- (1,1) with distance 3\n- (0,1) with distance 4\nThus, the 2 highest ranked items in the price range are (2,1) and (1,2)."
            },
            {
                "Input": "** grid = [[1,1,1],[0,0,1],[2,3,4]], pricing = [2,3], start = [0,0], k = 3",
                "Output": "** [[2,1],[2,0]]",
                "Explanation": "** You start at (0,0).\nWith a price range of [2,3], we can take items from (2,0) and (2,1). \nThe ranks of these items are: \n- (2,1) with distance 5\n- (2,0) with distance 6\nThus, the 2 highest ranked items in the price range are (2,1) and (2,0). \nNote that k = 3 but there are only 2 reachable items within the price range."
            }
        ]
    },
    {
        "Title": "Number of Ways to Divide a Long Corridor",
        "slug": "number-of-ways-to-divide-a-long-corridor",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** corridor = \"SSPPSPS\"",
                "Output": "** 3",
                "Explanation": "** There are 3 different ways to divide the corridor.\nThe black bars in the above image indicate the two room dividers already installed.\nNote that in each of the ways, **each** section has exactly **two** seats."
            },
            {
                "Input": "** corridor = \"PPSPSP\"",
                "Output": "** 1",
                "Explanation": "** There is only 1 way to divide the corridor, by not installing any additional dividers.\nInstalling any would create some section that does not have exactly two seats."
            },
            {
                "Input": "** corridor = \"S\"",
                "Output": "** 0",
                "Explanation": "** There is no way to divide the corridor because there will always be a section that does not have exactly two seats."
            }
        ]
    },
    {
        "Title": "Count Elements With Strictly Smaller and Greater Elements ",
        "slug": "count-elements-with-strictly-smaller-and-greater-elements",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [11,7,2,15]",
                "Output": "** 2",
                "Explanation": "** The element 7 has the element 2 strictly smaller than it and the element 11 strictly greater than it.\nElement 11 has element 7 strictly smaller than it and element 15 strictly greater than it.\nIn total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums."
            },
            {
                "Input": "** nums = [-3,3,3,90]",
                "Output": "** 2",
                "Explanation": "** The element 3 has the element -3 strictly smaller than it and the element 90 strictly greater than it.\nSince there are two elements with the value 3, in total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums."
            }
        ]
    },
    {
        "Title": "Rearrange Array Elements by Sign",
        "slug": "rearrange-array-elements-by-sign",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,1,-2,-5,2,-4]",
                "Output": "** [3,-2,1,-5,2,-4]",
                "Explanation": "**\nThe positive integers in nums are [3,1,2]. The negative integers are [-2,-5,-4].\nThe only possible way to rearrange them such that they satisfy all conditions is [3,-2,1,-5,2,-4].\nOther ways such as [1,-2,2,-5,3,-4], [3,1,2,-2,-5,-4], [-2,3,-5,1,-4,2] are incorrect because they do not satisfy one or more conditions."
            },
            {
                "Input": "** nums = [-1,1]",
                "Output": "** [1,-1]",
                "Explanation": "**\n1 is the only positive integer and -1 the only negative integer in nums.\nSo nums is rearranged to [1,-1]."
            }
        ]
    },
    {
        "Title": "Find All Lonely Numbers in the Array",
        "slug": "find-all-lonely-numbers-in-the-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [10,6,5,8]",
                "Output": "** [10,8]",
                "Explanation": "** \n- 10 is a lonely number since it appears exactly once and 9 and 11 does not appear in nums.\n- 8 is a lonely number since it appears exactly once and 7 and 9 does not appear in nums.\n- 5 is not a lonely number since 6 appears in nums and vice versa.\nHence, the lonely numbers in nums are [10, 8].\nNote that [8, 10] may also be returned."
            },
            {
                "Input": "** nums = [1,3,5,3]",
                "Output": "** [1,5]",
                "Explanation": "** \n- 1 is a lonely number since it appears exactly once and 0 and 2 does not appear in nums.\n- 5 is a lonely number since it appears exactly once and 4 and 6 does not appear in nums.\n- 3 is not a lonely number since it appears twice.\nHence, the lonely numbers in nums are [1, 5].\nNote that [5, 1] may also be returned."
            }
        ]
    },
    {
        "Title": "Maximum Good People Based on Statements",
        "slug": "maximum-good-people-based-on-statements",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** statements = [[2,1,2],[1,2,2],[2,0,2]]",
                "Output": "** 2",
                "Explanation": "** Each person makes a single statement.\n- Person 0 states that person 1 is good.\n- Person 1 states that person 0 is good.\n- Person 2 states that person 1 is bad.\nLet's take person 2 as the key.\n- Assuming that person 2 is a good person:\n    - Based on the statement made by person 2, person 1 is a bad person.\n    - Now we know for sure that person 1 is bad and person 2 is good.\n    - Based on the statement made by person 1, and since person 1 is bad, they could be:\n        - telling the truth. There will be a contradiction in this case and this assumption is invalid.\n        - lying. In this case, person 0 is also a bad person and lied in their statement.\n    - **Following that person 2 is a good person, there will be only one good person in the group**.\n- Assuming that person 2 is a bad person:\n    - Based on the statement made by person 2, and since person 2 is bad, they could be:\n        - telling the truth. Following this scenario, person 0 and 1 are both bad as explained before.\n            - **Following that person 2 is bad but told the truth, there will be no good persons in the group**.\n        - lying. In this case person 1 is a good person.\n            - Since person 1 is a good person, person 0 is also a good person.\n            - **Following that person 2 is bad and lied, there will be two good persons in the group**.\nWe can see that at most 2 persons are good in the best case, so we return 2.\nNote that there is more than one way to arrive at this conclusion."
            },
            {
                "Input": "** statements = [[2,0],[0,2]]",
                "Output": "** 1",
                "Explanation": "** Each person makes a single statement.\n- Person 0 states that person 1 is bad.\n- Person 1 states that person 0 is bad.\nLet's take person 0 as the key.\n- Assuming that person 0 is a good person:\n    - Based on the statement made by person 0, person 1 is a bad person and was lying.\n    - **Following that person 0 is a good person, there will be only one good person in the group**.\n- Assuming that person 0 is a bad person:\n    - Based on the statement made by person 0, and since person 0 is bad, they could be:\n        - telling the truth. Following this scenario, person 0 and 1 are both bad.\n            - **Following that person 0 is bad but told the truth, there will be no good persons in the group**.\n        - lying. In this case person 1 is a good person.\n            - **Following that person 0 is bad and lied, there will be only one good person in the group**.\nWe can see that at most, one person is good in the best case, so we return 1.\nNote that there is more than one way to arrive at this conclusion."
            }
        ]
    },
    {
        "Title": "Keep Multiplying Found Values by Two",
        "slug": "keep-multiplying-found-values-by-two",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [5,3,6,1,12], original = 3",
                "Output": "** 24",
                "Explanation": "** \n- 3 is found in nums. 3 is multiplied by 2 to obtain 6.\n- 6 is found in nums. 6 is multiplied by 2 to obtain 12.\n- 12 is found in nums. 12 is multiplied by 2 to obtain 24.\n- 24 is not found in nums. Thus, 24 is returned."
            },
            {
                "Input": "** nums = [2,7,9], original = 4",
                "Output": "** 4",
                "Explanation": "**\n- 4 is not found in nums. Thus, 4 is returned."
            }
        ]
    },
    {
        "Title": "All Divisions With the Highest Score of a Binary Array",
        "slug": "all-divisions-with-the-highest-score-of-a-binary-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [0,0,1,0]",
                "Output": "** [2,4]",
                "Explanation": "** Division at index\n- 0: numsleft is []. numsright is [0,0,**1**,0]. The score is 0 + 1 = 1.\n- 1: numsleft is [**0**]. numsright is [0,**1**,0]. The score is 1 + 1 = 2.\n- 2: numsleft is [**0**,**0**]. numsright is [**1**,0]. The score is 2 + 1 = 3.\n- 3: numsleft is [**0**,**0**,1]. numsright is [0]. The score is 2 + 0 = 2.\n- 4: numsleft is [**0**,**0**,1,**0**]. numsright is []. The score is 3 + 0 = 3.\nIndices 2 and 4 both have the highest possible division score 3.\nNote the answer [4,2] would also be accepted."
            },
            {
                "Input": "** nums = [0,0,0]",
                "Output": "** [3]",
                "Explanation": "** Division at index\n- 0: numsleft is []. numsright is [0,0,0]. The score is 0 + 0 = 0.\n- 1: numsleft is [**0**]. numsright is [0,0]. The score is 1 + 0 = 1.\n- 2: numsleft is [**0**,**0**]. numsright is [0]. The score is 2 + 0 = 2.\n- 3: numsleft is [**0**,**0**,**0**]. numsright is []. The score is 3 + 0 = 3.\nOnly index 3 has the highest possible division score 3."
            },
            {
                "Input": "** nums = [1,1]",
                "Output": "** [0]",
                "Explanation": "** Division at index\n- 0: numsleft is []. numsright is [**1**,**1**]. The score is 0 + 2 = 2.\n- 1: numsleft is [1]. numsright is [**1**]. The score is 0 + 1 = 1.\n- 2: numsleft is [1,1]. numsright is []. The score is 0 + 0 = 0.\nOnly index 0 has the highest possible division score 2."
            }
        ]
    },
    {
        "Title": "Find Substring With Given Hash Value",
        "slug": "find-substring-with-given-hash-value",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"leetcode\", power = 7, modulo = 20, k = 2, hashValue = 0",
                "Output": "** \"ee\"",
                "Explanation": "** The hash of \"ee\" can be computed to be hash(\"ee\", 7, 20) = (5 * 1 + 5 * 7) mod 20 = 40 mod 20 = 0. \n\"ee\" is the first substring of length 2 with hashValue 0. Hence, we return \"ee\"."
            },
            {
                "Input": "** s = \"fbxzaad\", power = 31, modulo = 100, k = 3, hashValue = 32",
                "Output": "** \"fbx\"",
                "Explanation": "** The hash of \"fbx\" can be computed to be hash(\"fbx\", 31, 100) = (6 * 1 + 2 * 31 + 24 * 312) mod 100 = 23132 mod 100 = 32. \nThe hash of \"bxz\" can be computed to be hash(\"bxz\", 31, 100) = (2 * 1 + 24 * 31 + 26 * 312) mod 100 = 25732 mod 100 = 32. \n\"fbx\" is the first substring of length 3 with hashValue 32. Hence, we return \"fbx\".\nNote that \"bxz\" also has a hash of 32 but it appears later than \"fbx\"."
            }
        ]
    },
    {
        "Title": "Groups of Strings",
        "slug": "groups-of-strings",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** words = [\"a\",\"b\",\"ab\",\"cde\"]",
                "Output": "** [2,3]",
                "Explanation": "**\n- words[0] can be used to obtain words[1] (by replacing 'a' with 'b'), and words[2] (by adding 'b'). So words[0] is connected to words[1] and words[2].\n- words[1] can be used to obtain words[0] (by replacing 'b' with 'a'), and words[2] (by adding 'a'). So words[1] is connected to words[0] and words[2].\n- words[2] can be used to obtain words[0] (by deleting 'b'), and words[1] (by deleting 'a'). So words[2] is connected to words[0] and words[1].\n- words[3] is not connected to any string in words.\nThus, words can be divided into 2 groups [\"a\",\"b\",\"ab\"] and [\"cde\"]. The size of the largest group is 3."
            },
            {
                "Input": "** words = [\"a\",\"ab\",\"abc\"]",
                "Output": "** [1,3]",
                "Explanation": "**\n- words[0] is connected to words[1].\n- words[1] is connected to words[0] and words[2].\n- words[2] is connected to words[1].\nSince all strings are connected to each other, they should be grouped together.\nThus, the size of the largest group is 3."
            }
        ]
    },
    {
        "Title": "Minimum Sum of Four Digit Number After Splitting Digits",
        "slug": "minimum-sum-of-four-digit-number-after-splitting-digits",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num = 2932",
                "Output": "** 52",
                "Explanation": "** Some possible pairs [new1, new2] are [29, 23], [223, 9], etc.\nThe minimum sum can be obtained by the pair [29, 23]: 29 + 23 = 52."
            },
            {
                "Input": "** num = 4009",
                "Output": "** 13",
                "Explanation": "** Some possible pairs [new1, new2] are [0, 49], [490, 0], etc. \nThe minimum sum can be obtained by the pair [4, 9]: 4 + 9 = 13."
            }
        ]
    },
    {
        "Title": "Partition Array According to Given Pivot",
        "slug": "partition-array-according-to-given-pivot",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [9,12,5,10,14,3,10], pivot = 10",
                "Output": "** [9,5,3,10,10,12,14]",
                "Explanation": "** \nThe elements 9, 5, and 3 are less than the pivot so they are on the left side of the array.\nThe elements 12 and 14 are greater than the pivot so they are on the right side of the array.\nThe relative ordering of the elements less than and greater than pivot is also maintained. [9, 5, 3] and [12, 14] are the respective orderings."
            },
            {
                "Input": "** nums = [-3,4,3,2], pivot = 2",
                "Output": "** [-3,2,4,3]",
                "Explanation": "** \nThe element -3 is less than the pivot so it is on the left side of the array.\nThe elements 4 and 3 are greater than the pivot so they are on the right side of the array.\nThe relative ordering of the elements less than and greater than pivot is also maintained. [-3] and [4, 3] are the respective orderings."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Set Cooking Time",
        "slug": "minimum-cost-to-set-cooking-time",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** startAt = 1, moveCost = 2, pushCost = 1, targetSeconds = 600",
                "Output": "** 6",
                "Explanation": "** The following are the possible ways to set the cooking time.\n- 1 0 0 0, interpreted as 10 minutes and 0 seconds.\n\u00a0 The finger is already on digit 1, pushes 1 (with cost 1), moves to 0 (with cost 2), pushes 0 (with cost 1), pushes 0 (with cost 1), and pushes 0 (with cost 1).\n\u00a0 The cost is: 1 + 2 + 1 + 1 + 1 = 6. This is the minimum cost.\n- 0 9 6 0, interpreted as 9 minutes and 60 seconds. That is also 600 seconds.\n\u00a0 The finger moves to 0 (with cost 2), pushes 0 (with cost 1), moves to 9 (with cost 2), pushes 9 (with cost 1), moves to 6 (with cost 2), pushes 6 (with cost 1), moves to 0 (with cost 2), and pushes 0 (with cost 1).\n\u00a0 The cost is: 2 + 1 + 2 + 1 + 2 + 1 + 2 + 1 = 12.\n- 9 6 0, normalized as 0960 and interpreted as 9 minutes and 60 seconds.\n\u00a0 The finger moves to 9 (with cost 2), pushes 9 (with cost 1), moves to 6 (with cost 2), pushes 6 (with cost 1), moves to 0 (with cost 2), and pushes 0 (with cost 1).\n\u00a0 The cost is: 2 + 1 + 2 + 1 + 2 + 1 = 9."
            },
            {
                "Input": "** startAt = 0, moveCost = 1, pushCost = 2, targetSeconds = 76",
                "Output": "** 6",
                "Explanation": "** The optimal way is to push two digits: 7 6, interpreted as 76 seconds.\nThe finger moves to 7 (with cost 1), pushes 7 (with cost 2), moves to 6 (with cost 1), and pushes 6 (with cost 2). The total cost is: 1 + 2 + 1 + 2 = 6\nNote other possible ways are 0076, 076, 0116, and 116, but none of them produces the minimum cost."
            }
        ]
    },
    {
        "Title": "Minimum Difference in Sums After Removal of Elements",
        "slug": "minimum-difference-in-sums-after-removal-of-elements",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [3,1,2]",
                "Output": "** -1",
                "Explanation": "** Here, nums has 3 elements, so n = 1. \nThus we have to remove 1 element from nums and divide the array into two equal parts.\n- If we remove nums[0] = 3, the array will be [1,2]. The difference in sums of the two parts will be 1 - 2 = -1.\n- If we remove nums[1] = 1, the array will be [3,2]. The difference in sums of the two parts will be 3 - 2 = 1.\n- If we remove nums[2] = 2, the array will be [3,1]. The difference in sums of the two parts will be 3 - 1 = 2.\nThe minimum difference between sums of the two parts is min(-1,1,2) = -1."
            },
            {
                "Input": "** nums = [7,9,5,8,1,3]",
                "Output": "** 1",
                "Explanation": "** Here n = 2. So we must remove 2 elements and divide the remaining array into two parts containing two elements each.\nIf we remove nums[2] = 5 and nums[3] = 8, the resultant array will be [7,9,1,3]. The difference in sums will be (7+9) - (1+3) = 12.\nTo obtain the minimum difference, we should remove nums[1] = 9 and nums[4] = 1. The resultant array becomes [7,5,8,3]. The difference in sums of the two parts is (7+5) - (8+3) = 1.\nIt can be shown that it is not possible to obtain a difference smaller than 1."
            }
        ]
    },
    {
        "Title": "Sort Even and Odd Indices Independently",
        "slug": "sort-even-and-odd-indices-independently",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [4,1,2,3]",
                "Output": "** [2,3,4,1]",
                "Explanation": "** \nFirst, we sort the values present at odd indices (1 and 3) in non-increasing order.\nSo, nums changes from [4,**1**,2,**3**] to [4,**3**,2,**1**].\nNext, we sort the values present at even indices (0 and 2) in non-decreasing order.\nSo, nums changes from [**4**,1,**2**,3] to [**2**,3,**4**,1].\nThus, the array formed after rearranging the values is [2,3,4,1]."
            },
            {
                "Input": "** nums = [2,1]",
                "Output": "** [2,1]",
                "Explanation": "** \nSince there is exactly one odd index and one even index, no rearrangement of values takes place.\nThe resultant array formed is [2,1], which is the same as the initial array."
            }
        ]
    },
    {
        "Title": "Smallest Value of the Rearranged Number",
        "slug": "smallest-value-of-the-rearranged-number",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** num = 310",
                "Output": "** 103",
                "Explanation": "** The possible arrangements for the digits of 310 are 013, 031, 103, 130, 301, 310. \nThe arrangement with the smallest value that does not contain any leading zeros is 103."
            },
            {
                "Input": "** num = -7605",
                "Output": "** -7650",
                "Explanation": "** Some possible arrangements for the digits of -7605 are -7650, -6705, -5076, -0567.\nThe arrangement with the smallest value that does not contain any leading zeros is -7650."
            }
        ]
    },
    {
        "Title": "Design Bitset",
        "slug": "design-bitset",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"Bitset\", \"fix\", \"fix\", \"flip\", \"all\", \"unfix\", \"flip\", \"one\", \"unfix\", \"count\", \"toString\"]\n[[5], [3], [1], [], [], [0], [], [], [0], [], []]",
                "Output": "[null, null, null, null, false, null, null, true, null, 2, \"01010\"]",
                "Explanation": "Bitset bs = new Bitset(5); // bitset = \"00000\".\nbs.fix(3);     // the value at idx = 3 is updated to 1, so bitset = \"00010\".\nbs.fix(1);     // the value at idx = 1 is updated to 1, so bitset = \"01010\". \nbs.flip();     // the value of each bit is flipped, so bitset = \"10101\". \nbs.all();      // return False, as not all values of the bitset are 1.\nbs.unfix(0);   // the value at idx = 0 is updated to 0, so bitset = \"00101\".\nbs.flip();     // the value of each bit is flipped, so bitset = \"11010\". \nbs.one();      // return True, as there is at least 1 index with value 1.\nbs.unfix(0);   // the value at idx = 0 is updated to 0, so bitset = \"01010\".\nbs.count();    // return 2, as there are 2 bits with value 1.\nbs.toString(); // return \"01010\", which is the composition of bitset."
            }
        ]
    },
    {
        "Title": "Minimum Time to Remove All Cars Containing Illegal Goods",
        "slug": "minimum-time-to-remove-all-cars-containing-illegal-goods",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"**11**00**1**0**1**\"",
                "Output": "** 5",
                "Explanation": "** \nOne way to remove all the cars containing illegal goods from the sequence is to\n- remove a car from the left end 2 times. Time taken is 2 * 1 = 2.\n- remove a car from the right end. Time taken is 1.\n- remove the car containing illegal goods found in the middle. Time taken is 2.\nThis obtains a total time of 2 + 1 + 2 = 5. \n\nAn alternative way is to\n- remove a car from the left end 2 times. Time taken is 2 * 1 = 2.\n- remove a car from the right end 3 times. Time taken is 3 * 1 = 3.\nThis also obtains a total time of 2 + 3 = 5.\n\n5 is the minimum time taken to remove all the cars containing illegal goods. \nThere are no other ways to remove them with less time."
            },
            {
                "Input": "** s = \"00**1**0\"",
                "Output": "** 2",
                "Explanation": "**\nOne way to remove all the cars containing illegal goods from the sequence is to\n- remove a car from the left end 3 times. Time taken is 3 * 1 = 3.\nThis obtains a total time of 3.\n\nAnother way to remove all the cars containing illegal goods from the sequence is to\n- remove the car containing illegal goods found in the middle. Time taken is 2.\nThis obtains a total time of 2.\n\nAnother way to remove all the cars containing illegal goods from the sequence is to \n- remove a car from the right end 2 times. Time taken is 2 * 1 = 2. \nThis obtains a total time of 2.\n\n2 is the minimum time taken to remove all the cars containing illegal goods. \nThere are no other ways to remove them with less time."
            }
        ]
    },
    {
        "Title": "Count Operations to Obtain Zero",
        "slug": "count-operations-to-obtain-zero",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num1 = 2, num2 = 3",
                "Output": "** 3",
                "Explanation": "** \n- Operation 1: num1 = 2, num2 = 3. Since num1 < num2, we subtract num1 from num2 and get num1 = 2, num2 = 3 - 2 = 1.\n- Operation 2: num1 = 2, num2 = 1. Since num1 > num2, we subtract num2 from num1.\n- Operation 3: num1 = 1, num2 = 1. Since num1 == num2, we subtract num2 from num1.\nNow num1 = 0 and num2 = 1. Since num1 == 0, we do not need to perform any further operations.\nSo the total number of operations required is 3."
            },
            {
                "Input": "** num1 = 10, num2 = 10",
                "Output": "** 1",
                "Explanation": "** \n- Operation 1: num1 = 10, num2 = 10. Since num1 == num2, we subtract num2 from num1 and get num1 = 10 - 10 = 0.\nNow num1 = 0 and num2 = 10. Since num1 == 0, we are done.\nSo the total number of operations required is 1."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Make the Array Alternating",
        "slug": "minimum-operations-to-make-the-array-alternating",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,1,3,2,4,3]",
                "Output": "** 3",
                "Explanation": "**\nOne way to make the array alternating is by converting it to [3,1,3,**1**,**3**,**1**].\nThe number of operations required in this case is 3.\nIt can be proven that it is not possible to make the array alternating in less than 3 operations."
            },
            {
                "Input": "** nums = [1,2,2,2,2]",
                "Output": "** 2",
                "Explanation": "**\nOne way to make the array alternating is by converting it to [1,2,**1**,2,**1**].\nThe number of operations required in this case is 2.\nNote that the array cannot be converted to [**2**,2,2,2,2] because in this case nums[0] == nums[1] which violates the conditions of an alternating array."
            }
        ]
    },
    {
        "Title": "Removing Minimum Number of Magic Beans",
        "slug": "removing-minimum-number-of-magic-beans",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** beans = [4,1,6,5]",
                "Output": "** 4",
                "Explanation": "** \n- We remove 1 bean from the bag with only 1 bean.\n  This results in the remaining bags: [4,**0**,6,5]\n- Then we remove 2 beans from the bag with 6 beans.\n  This results in the remaining bags: [4,0,**4**,5]\n- Then we remove 1 bean from the bag with 5 beans.\n  This results in the remaining bags: [4,0,4,**4**]\nWe removed a total of 1 + 2 + 1 = 4 beans to make the remaining non-empty bags have an equal number of beans.\nThere are no other solutions that remove 4 beans or fewer."
            },
            {
                "Input": "** beans = [2,10,3,2]",
                "Output": "** 7",
                "Explanation": "**\n- We remove 2 beans from one of the bags with 2 beans.\n  This results in the remaining bags: [**0**,10,3,2]\n- Then we remove 2 beans from the other bag with 2 beans.\n  This results in the remaining bags: [0,10,3,**0**]\n- Then we remove 3 beans from the bag with 3 beans. \n  This results in the remaining bags: [0,10,**0**,0]\nWe removed a total of 2 + 2 + 3 = 7 beans to make the remaining non-empty bags have an equal number of beans.\nThere are no other solutions that removes 7 beans or fewer."
            }
        ]
    },
    {
        "Title": "Maximum AND Sum of Array",
        "slug": "maximum-and-sum-of-array",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5,6], numSlots = 3",
                "Output": "** 9",
                "Explanation": "** One possible placement is [1, 4] into slot 1, [2, 6] into slot 2, and [3, 5] into slot 3. \nThis gives the maximum AND sum of (1 AND 1) + (4 AND 1) + (2 AND 2) + (6 AND 2) + (3 AND 3) + (5 AND 3) = 1 + 0 + 2 + 2 + 3 + 1 = 9."
            },
            {
                "Input": "** nums = [1,3,10,4,7,1], numSlots = 9",
                "Output": "** 24",
                "Explanation": "** One possible placement is [1, 1] into slot 1, [3] into slot 3, [4] into slot 4, [7] into slot 7, and [10] into slot 9.\nThis gives the maximum AND sum of (1 AND 1) + (1 AND 1) + (3 AND 3) + (4 AND 4) + (7 AND 7) + (10 AND 9) = 1 + 1 + 3 + 4 + 7 + 8 = 24.\nNote that slots 2, 5, 6, and 8 are empty which is permitted."
            }
        ]
    },
    {
        "Title": "Count Equal and Divisible Pairs in an Array",
        "slug": "count-equal-and-divisible-pairs-in-an-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [3,1,2,2,2,1,3], k = 2",
                "Output": "** 4",
                "Explanation": "**\nThere are 4 pairs that meet all the requirements:\n- nums[0] == nums[6], and 0 * 6 == 0, which is divisible by 2.\n- nums[2] == nums[3], and 2 * 3 == 6, which is divisible by 2.\n- nums[2] == nums[4], and 2 * 4 == 8, which is divisible by 2.\n- nums[3] == nums[4], and 3 * 4 == 12, which is divisible by 2."
            },
            {
                "Input": "** nums = [1,2,3,4], k = 1",
                "Output": "** 0",
                "Explanation": "** Since no value in nums is repeated, there are no pairs (i,j) that meet all the requirements."
            }
        ]
    },
    {
        "Title": "Find Three Consecutive Integers That Sum to a Given Number",
        "slug": "find-three-consecutive-integers-that-sum-to-a-given-number",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** num = 33",
                "Output": "** [10,11,12]",
                "Explanation": "** 33 can be expressed as 10 + 11 + 12 = 33.\n10, 11, 12 are 3 consecutive integers, so we return [10, 11, 12]."
            },
            {
                "Input": "** num = 4",
                "Output": "** []",
                "Explanation": "** There is no way to express 4 as the sum of 3 consecutive integers."
            }
        ]
    },
    {
        "Title": "Maximum Split of Positive Even Integers",
        "slug": "maximum-split-of-positive-even-integers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** finalSum = 12",
                "Output": "** [2,4,6]",
                "Explanation": "** The following are valid splits: (12), (2 + 10), (2 + 4 + 6), and (4 + 8).\n(2 + 4 + 6) has the maximum number of integers, which is 3. Thus, we return [2,4,6].\nNote that [2,6,4], [6,2,4], etc. are also accepted."
            },
            {
                "Input": "** finalSum = 7",
                "Output": "** []",
                "Explanation": "** There are no valid splits for the given finalSum.\nThus, we return an empty array."
            },
            {
                "Input": "** finalSum = 28",
                "Output": "** [6,8,2,12]",
                "Explanation": "** The following are valid splits: (2 + 26), (6 + 8 + 2 + 12), and (4 + 24). \n(6 + 8 + 2 + 12) has the maximum number of integers, which is 4. Thus, we return [6,8,2,12].\nNote that [10,2,4,12], [6,2,4,16], etc. are also accepted."
            }
        ]
    },
    {
        "Title": "Count Good Triplets in an Array",
        "slug": "count-good-triplets-in-an-array",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums1 = [2,0,1,3], nums2 = [0,1,2,3]",
                "Output": "** 1",
                "Explanation": "** \nThere are 4 triplets (x,y,z) such that pos1x < pos1y < pos1z. They are (2,0,1), (2,0,3), (2,1,3), and (0,1,3). \nOut of those triplets, only the triplet (0,1,3) satisfies pos2x < pos2y < pos2z. Hence, there is only 1 good triplet."
            },
            {
                "Input": "** nums1 = [4,0,1,3,2], nums2 = [4,1,0,2,3]",
                "Output": "** 4",
                "Explanation": "** The 4 good triplets are (4,0,3), (4,0,2), (4,1,3), and (4,1,2)."
            }
        ]
    },
    {
        "Title": "Count Integers With Even Digit Sum",
        "slug": "count-integers-with-even-digit-sum",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num = 4",
                "Output": "** 2",
                "Explanation": "**\nThe only integers less than or equal to 4 whose digit sums are even are 2 and 4."
            },
            {
                "Input": "** num = 30",
                "Output": "** 14",
                "Explanation": "**\nThe 14 integers less than or equal to 30 whose digit sums are even are\n2, 4, 6, 8, 11, 13, 15, 17, 19, 20, 22, 24, 26, and 28."
            }
        ]
    },
    {
        "Title": "Merge Nodes in Between Zeros",
        "slug": "merge-nodes-in-between-zeros",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [0,3,1,0,4,5,2,0]",
                "Output": "** [4,11]",
                "Explanation": "** \nThe above figure represents the given linked list. The modified list contains\n- The sum of the nodes marked in green: 3 + 1 = 4.\n- The sum of the nodes marked in red: 4 + 5 + 2 = 11."
            },
            {
                "Input": "** head = [0,1,0,3,0,2,2,0]",
                "Output": "** [1,3,4]",
                "Explanation": "** \nThe above figure represents the given linked list. The modified list contains\n- The sum of the nodes marked in green: 1 = 1.\n- The sum of the nodes marked in red: 3 = 3.\n- The sum of the nodes marked in yellow: 2 + 2 = 4."
            }
        ]
    },
    {
        "Title": "Construct String With Repeat Limit",
        "slug": "construct-string-with-repeat-limit",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"cczazcc\", repeatLimit = 3",
                "Output": "** \"zzcccac\"",
                "Explanation": "** We use all of the characters from s to construct the repeatLimitedString \"zzcccac\".\nThe letter 'a' appears at most 1 time in a row.\nThe letter 'c' appears at most 3 times in a row.\nThe letter 'z' appears at most 2 times in a row.\nHence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.\nThe string is the lexicographically largest repeatLimitedString possible so we return \"zzcccac\".\nNote that the string \"zzcccca\" is lexicographically larger but the letter 'c' appears more than 3 times in a row, so it is not a valid repeatLimitedString."
            },
            {
                "Input": "** s = \"aababab\", repeatLimit = 2",
                "Output": "** \"bbabaa\"",
                "Explanation": "** We use only some of the characters from s to construct the repeatLimitedString \"bbabaa\". \nThe letter 'a' appears at most 2 times in a row.\nThe letter 'b' appears at most 2 times in a row.\nHence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.\nThe string is the lexicographically largest repeatLimitedString possible so we return \"bbabaa\".\nNote that the string \"bbabaaa\" is lexicographically larger but the letter 'a' appears more than 2 times in a row, so it is not a valid repeatLimitedString."
            }
        ]
    },
    {
        "Title": "Count Array Pairs Divisible by K",
        "slug": "count-array-pairs-divisible-by-k",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5], k = 2",
                "Output": "** 7",
                "Explanation": "** \nThe 7 pairs of indices whose corresponding products are divisible by 2 are\n(0, 1), (0, 3), (1, 2), (1, 3), (1, 4), (2, 3), and (3, 4).\nTheir products are 2, 4, 6, 8, 10, 12, and 20 respectively.\nOther pairs such as (0, 2) and (2, 4) have products 3 and 15 respectively, which are not divisible by 2."
            },
            {
                "Input": "** nums = [1,2,3,4], k = 5",
                "Output": "** 0",
                "Explanation": "** There does not exist any pair of indices whose corresponding product is divisible by 5."
            }
        ]
    },
    {
        "Title": "Counting Words With a Given Prefix",
        "slug": "counting-words-with-a-given-prefix",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** words = [\"pay\",\"**at**tention\",\"practice\",\"**at**tend\"], pref = \"at\"",
                "Output": "** 2",
                "Explanation": "** The 2 strings that contain \"at\" as a prefix are: \"**at**tention\" and \"**at**tend\"."
            },
            {
                "Input": "** words = [\"leetcode\",\"win\",\"loops\",\"success\"], pref = \"code\"",
                "Output": "** 0",
                "Explanation": "** There are no strings that contain \"code\" as a prefix."
            }
        ]
    },
    {
        "Title": "Minimum Number of Steps to Make Two Strings Anagram II",
        "slug": "minimum-number-of-steps-to-make-two-strings-anagram-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"**lee**tco**de**\", t = \"co**a**t**s**\"",
                "Output": "** 7",
                "Explanation": "** \n- In 2 steps, we can append the letters in \"as\" onto s = \"leetcode\", forming s = \"leetcode**as**\".\n- In 5 steps, we can append the letters in \"leede\" onto t = \"coats\", forming t = \"coats**leede**\".\n\"leetcodeas\" and \"coatsleede\" are now anagrams of each other.\nWe used a total of 2 + 5 = 7 steps.\nIt can be shown that there is no way to make them anagrams of each other with less than 7 steps."
            },
            {
                "Input": "** s = \"night\", t = \"thing\"",
                "Output": "** 0",
                "Explanation": "** The given strings are already anagrams of each other. Thus, we do not need any further steps."
            }
        ]
    },
    {
        "Title": "Minimum Time to Complete Trips",
        "slug": "minimum-time-to-complete-trips",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** time = [1,2,3], totalTrips = 5",
                "Output": "** 3",
                "Explanation": "**\n- At time t = 1, the number of trips completed by each bus are [1,0,0]. \n  The total number of trips completed is 1 + 0 + 0 = 1.\n- At time t = 2, the number of trips completed by each bus are [2,1,0]. \n  The total number of trips completed is 2 + 1 + 0 = 3.\n- At time t = 3, the number of trips completed by each bus are [3,1,1]. \n  The total number of trips completed is 3 + 1 + 1 = 5.\nSo the minimum time needed for all buses to complete at least 5 trips is 3."
            },
            {
                "Input": "** time = [2], totalTrips = 1",
                "Output": "** 2",
                "Explanation": "**\nThere is only one bus, and it will complete its first trip at t = 2.\nSo the minimum time needed to complete 1 trip is 2."
            }
        ]
    },
    {
        "Title": "Minimum Time to Finish the Race",
        "slug": "minimum-time-to-finish-the-race",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** tires = [[2,3],[3,4]], changeTime = 5, numLaps = 4",
                "Output": "** 21",
                "Explanation": "** \nLap 1: Start with tire 0 and finish the lap in 2 seconds.\nLap 2: Continue with tire 0 and finish the lap in 2 * 3 = 6 seconds.\nLap 3: Change tires to a new tire 0 for 5 seconds and then finish the lap in another 2 seconds.\nLap 4: Continue with tire 0 and finish the lap in 2 * 3 = 6 seconds.\nTotal time = 2 + 6 + 5 + 2 + 6 = 21 seconds.\nThe minimum time to complete the race is 21 seconds."
            },
            {
                "Input": "** tires = [[1,10],[2,2],[3,4]], changeTime = 6, numLaps = 5",
                "Output": "** 25",
                "Explanation": "** \nLap 1: Start with tire 1 and finish the lap in 2 seconds.\nLap 2: Continue with tire 1 and finish the lap in 2 * 2 = 4 seconds.\nLap 3: Change tires to a new tire 1 for 6 seconds and then finish the lap in another 2 seconds.\nLap 4: Continue with tire 1 and finish the lap in 2 * 2 = 4 seconds.\nLap 5: Change tires to tire 0 for 6 seconds then finish the lap in another 1 second.\nTotal time = 2 + 4 + 6 + 2 + 4 + 6 + 1 = 25 seconds.\nThe minimum time to complete the race is 25 seconds."
            }
        ]
    },
    {
        "Title": "Most Frequent Number Following Key In an Array",
        "slug": "most-frequent-number-following-key-in-an-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,100,200,1,100], key = 1",
                "Output": "** 100",
                "Explanation": "** For target = 100, there are 2 occurrences at indices 1 and 4 which follow an occurrence of key.\nNo other integers follow an occurrence of key, so we return 100."
            },
            {
                "Input": "** nums = [2,2,2,2,3], key = 2",
                "Output": "** 2",
                "Explanation": "** For target = 2, there are 3 occurrences at indices 1, 2, and 3 which follow an occurrence of key.\nFor target = 3, there is only one occurrence at index 4 which follows an occurrence of key.\ntarget = 2 has the maximum number of occurrences following an occurrence of key, so we return 2."
            }
        ]
    },
    {
        "Title": "Sort the Jumbled Numbers",
        "slug": "sort-the-jumbled-numbers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** mapping = [8,9,4,0,2,1,3,5,7,6], nums = [991,338,38]",
                "Output": "** [338,38,991]",
                "Explanation": "** \nMap the number 991 as follows:\n1. mapping[9] = 6, so all occurrences of the digit 9 will become 6.\n2. mapping[1] = 9, so all occurrences of the digit 1 will become 9.\nTherefore, the mapped value of 991 is 669.\n338 maps to 007, or 7 after removing the leading zeros.\n38 maps to 07, which is also 7 after removing leading zeros.\nSince 338 and 38 share the same mapped value, they should remain in the same relative order, so 338 comes before 38.\nThus, the sorted array is [338,38,991]."
            },
            {
                "Input": "** mapping = [0,1,2,3,4,5,6,7,8,9], nums = [789,456,123]",
                "Output": "** [123,456,789]",
                "Explanation": "** 789 maps to 789, 456 maps to 456, and 123 maps to 123. Thus, the sorted array is [123,456,789]."
            }
        ]
    },
    {
        "Title": "All Ancestors of a Node in a Directed Acyclic Graph",
        "slug": "all-ancestors-of-a-node-in-a-directed-acyclic-graph",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 8, edgeList = [[0,3],[0,4],[1,3],[2,4],[2,7],[3,5],[3,6],[3,7],[4,6]]",
                "Output": "** [[],[],[],[0,1],[0,2],[0,1,3],[0,1,2,3,4],[0,1,2,3]]",
                "Explanation": "**\nThe above diagram represents the input graph.\n- Nodes 0, 1, and 2 do not have any ancestors.\n- Node 3 has two ancestors 0 and 1.\n- Node 4 has two ancestors 0 and 2.\n- Node 5 has three ancestors 0, 1, and 3.\n- Node 6 has five ancestors 0, 1, 2, 3, and 4.\n- Node 7 has four ancestors 0, 1, 2, and 3."
            },
            {
                "Input": "** n = 5, edgeList = [[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]",
                "Output": "** [[],[0],[0,1],[0,1,2],[0,1,2,3]]",
                "Explanation": "**\nThe above diagram represents the input graph.\n- Node 0 does not have any ancestor.\n- Node 1 has one ancestor 0.\n- Node 2 has two ancestors 0 and 1.\n- Node 3 has three ancestors 0, 1, and 2.\n- Node 4 has four ancestors 0, 1, 2, and 3."
            }
        ]
    },
    {
        "Title": "Minimum Number of Moves to Make Palindrome",
        "slug": "minimum-number-of-moves-to-make-palindrome",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"aabb\"",
                "Output": "** 2",
                "Explanation": "**\nWe can obtain two palindromes from s, \"abba\" and \"baab\". \n- We can obtain \"abba\" from s in 2 moves: \"a**ab**b\" -> \"ab**ab**\" -> \"abba\".\n- We can obtain \"baab\" from s in 2 moves: \"a**ab**b\" -> \"**ab**ab\" -> \"baab\".\nThus, the minimum number of moves needed to make s a palindrome is 2."
            },
            {
                "Input": "** s = \"letelt\"",
                "Output": "** 2",
                "Explanation": "**\nOne of the palindromes we can obtain from s in 2 moves is \"lettel\".\nOne of the ways we can obtain it is \"lete**lt**\" -> \"let**et**l\" -> \"lettel\".\nOther palindromes such as \"tleelt\" can also be obtained in 2 moves.\nIt can be shown that it is not possible to obtain a palindrome in less than 2 moves."
            }
        ]
    },
    {
        "Title": "Cells in a Range on an Excel Sheet",
        "slug": "cells-in-a-range-on-an-excel-sheet",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"K1:L2\"",
                "Output": "** [\"K1\",\"K2\",\"L1\",\"L2\"]",
                "Explanation": "**\nThe above diagram shows the cells which should be present in the list.\nThe red arrows denote the order in which the cells should be presented."
            },
            {
                "Input": "** s = \"A1:F1\"",
                "Output": "** [\"A1\",\"B1\",\"C1\",\"D1\",\"E1\",\"F1\"]",
                "Explanation": "**\nThe above diagram shows the cells which should be present in the list.\nThe red arrow denotes the order in which the cells should be presented."
            }
        ]
    },
    {
        "Title": "Append K Integers With Minimal Sum",
        "slug": "append-k-integers-with-minimal-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,4,25,10,25], k = 2",
                "Output": "** 5",
                "Explanation": "** The two unique positive integers that do not appear in nums which we append are 2 and 3.\nThe resulting sum of nums is 1 + 4 + 25 + 10 + 25 + 2 + 3 = 70, which is the minimum.\nThe sum of the two integers appended is 2 + 3 = 5, so we return 5."
            },
            {
                "Input": "** nums = [5,6], k = 6",
                "Output": "** 25",
                "Explanation": "** The six unique positive integers that do not appear in nums which we append are 1, 2, 3, 4, 7, and 8.\nThe resulting sum of nums is 5 + 6 + 1 + 2 + 3 + 4 + 7 + 8 = 36, which is the minimum. \nThe sum of the six integers appended is 1 + 2 + 3 + 4 + 7 + 8 = 25, so we return 25."
            }
        ]
    },
    {
        "Title": "Create Binary Tree From Descriptions",
        "slug": "create-binary-tree-from-descriptions",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** descriptions = [[20,15,1],[20,17,0],[50,20,1],[50,80,0],[80,19,1]]",
                "Output": "** [50,20,80,15,17,19]",
                "Explanation": "** The root node is the node with value 50 since it has no parent.\nThe resulting binary tree is shown in the diagram."
            },
            {
                "Input": "** descriptions = [[1,2,1],[2,3,0],[3,4,1]]",
                "Output": "** [1,2,null,null,3,4]",
                "Explanation": "** The root node is the node with value 1 since it has no parent.\nThe resulting binary tree is shown in the diagram."
            }
        ]
    },
    {
        "Title": "Replace Non-Coprime Numbers in Array",
        "slug": "replace-non-coprime-numbers-in-array",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [6,4,3,2,7,6,2]",
                "Output": "** [12,7,6]",
                "Explanation": "** \n- (6, 4) are non-coprime with LCM(6, 4) = 12. Now, nums = [**12**,3,2,7,6,2].\n- (12, 3) are non-coprime with LCM(12, 3) = 12. Now, nums = [**12**,2,7,6,2].\n- (12, 2) are non-coprime with LCM(12, 2) = 12. Now, nums = [**12**,7,6,2].\n- (6, 2) are non-coprime with LCM(6, 2) = 6. Now, nums = [12,7,**6**].\nThere are no more adjacent non-coprime numbers in nums.\nThus, the final modified array is [12,7,6].\nNote that there are other ways to obtain the same resultant array."
            },
            {
                "Input": "** nums = [2,2,1,1,3,3,3]",
                "Output": "** [2,1,1,3]",
                "Explanation": "** \n- (3, 3) are non-coprime with LCM(3, 3) = 3. Now, nums = [2,2,1,1,**3**,3].\n- (3, 3) are non-coprime with LCM(3, 3) = 3. Now, nums = [2,2,1,1,**3**].\n- (2, 2) are non-coprime with LCM(2, 2) = 2. Now, nums = [**2**,1,1,3].\nThere are no more adjacent non-coprime numbers in nums.\nThus, the final modified array is [2,1,1,3].\nNote that there are other ways to obtain the same resultant array."
            }
        ]
    },
    {
        "Title": "Find All K-Distant Indices in an Array",
        "slug": "find-all-k-distant-indices-in-an-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [3,4,9,1,3,9,5], key = 9, k = 1",
                "Output": "** [1,2,3,4,5,6]",
                "Explanation": "** Here, nums[2] == key and nums[5] == key.\n- For index 0, |0 - 2| > k and |0 - 5| > k, so there is no j where |0 - j| <= k and nums[j] == key. Thus, 0 is not a k-distant index.\n- For index 1, |1 - 2| <= k and nums[2] == key, so 1 is a k-distant index.\n- For index 2, |2 - 2| <= k and nums[2] == key, so 2 is a k-distant index.\n- For index 3, |3 - 2| <= k and nums[2] == key, so 3 is a k-distant index.\n- For index 4, |4 - 5| <= k and nums[5] == key, so 4 is a k-distant index.\n- For index 5, |5 - 5| <= k and nums[5] == key, so 5 is a k-distant index.\n- For index 6, |6 - 5| <= k and nums[5] == key, so 6 is a k-distant index.\nThus, we return [1,2,3,4,5,6] which is sorted in increasing order."
            },
            {
                "Input": "** nums = [2,2,2,2,2], key = 2, k = 2",
                "Output": "** [0,1,2,3,4]",
                "Explanation": "** For all indices i in nums, there exists some index j such that |i - j| <= k and nums[j] == key, so every index is a k-distant index. \nHence, we return [0,1,2,3,4]."
            }
        ]
    },
    {
        "Title": "Count Artifacts That Can Be Extracted",
        "slug": "count-artifacts-that-can-be-extracted",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1]]",
                "Output": "** 1",
                "Explanation": "** \nThe different colors represent different artifacts. Excavated cells are labeled with a 'D' in the grid.\nThere is 1 artifact that can be extracted, namely the red artifact.\nThe blue artifact has one part in cell (1,1) which remains uncovered, so we cannot extract it.\nThus, we return 1."
            },
            {
                "Input": "** n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1],[1,1]]",
                "Output": "** 2",
                "Explanation": "** Both the red and blue artifacts have all parts uncovered (labeled with a 'D') and can be extracted, so we return 2."
            }
        ]
    },
    {
        "Title": "Maximize the Topmost Element After K Moves",
        "slug": "maximize-the-topmost-element-after-k-moves",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [5,2,2,4,0,6], k = 4",
                "Output": "** 5",
                "Explanation": "**\nOne of the ways we can end with 5 at the top of the pile after 4 moves is as follows:\n- Step 1: Remove the topmost element = 5. The pile becomes [2,2,4,0,6].\n- Step 2: Remove the topmost element = 2. The pile becomes [2,4,0,6].\n- Step 3: Remove the topmost element = 2. The pile becomes [4,0,6].\n- Step 4: Add 5 back onto the pile. The pile becomes [5,4,0,6].\nNote that this is not the only way to end with 5 at the top of the pile. It can be shown that 5 is the largest answer possible after 4 moves."
            },
            {
                "Input": "** nums = [2], k = 1",
                "Output": "** -1",
                "Explanation": "** \nIn the first move, our only option is to pop the topmost element of the pile.\nSince it is not possible to obtain a non-empty pile after one move, we return -1."
            }
        ]
    },
    {
        "Title": "Minimum Weighted Subgraph With the Required Paths",
        "slug": "minimum-weighted-subgraph-with-the-required-paths",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 6, edges = [[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]], src1 = 0, src2 = 1, dest = 5",
                "Output": "** 9",
                "Explanation": "**\nThe above figure represents the input graph.\nThe blue edges represent one of the subgraphs that yield the optimal answer.\nNote that the subgraph [[1,0,3],[0,5,6]] also yields the optimal answer. It is not possible to get a subgraph with less weight satisfying all the constraints."
            },
            {
                "Input": "** n = 3, edges = [[0,1,1],[2,1,1]], src1 = 0, src2 = 1, dest = 2",
                "Output": "** -1",
                "Explanation": "**\nThe above figure represents the input graph.\nIt can be seen that there does not exist any path from node 1 to node 2, hence there are no subgraphs satisfying all the constraints."
            }
        ]
    },
    {
        "Title": "Divide Array Into Equal Pairs",
        "slug": "divide-array-into-equal-pairs",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [3,2,3,2,2,2]",
                "Output": "** true",
                "Explanation": "** \nThere are 6 elements in nums, so they should be divided into 6 / 2 = 3 pairs.\nIf nums is divided into the pairs (2, 2), (3, 3), and (2, 2), it will satisfy all the conditions."
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** false",
                "Explanation": "** \nThere is no way to divide nums into 4 / 2 = 2 pairs such that the pairs satisfy every condition."
            }
        ]
    },
    {
        "Title": "Maximize Number of Subsequences in a String",
        "slug": "maximize-number-of-subsequences-in-a-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** text = \"abdcdbc\", pattern = \"ac\"",
                "Output": "** 4",
                "Explanation": "**\nIf we add pattern[0] = 'a' in between text[1] and text[2], we get \"ab**a**dcdbc\". Now, the number of times \"ac\" occurs as a subsequence is 4.\nSome other strings which have 4 subsequences \"ac\" after adding a character to text are \"**a**abdcdbc\" and \"abd**a**cdbc\".\nHowever, strings such as \"abdc**a**dbc\", \"abd**c**cdbc\", and \"abdcdbc**c**\", although obtainable, have only 3 subsequences \"ac\" and are thus suboptimal.\nIt can be shown that it is not possible to get more than 4 subsequences \"ac\" by adding only one character."
            },
            {
                "Input": "** text = \"aabb\", pattern = \"ab\"",
                "Output": "** 6",
                "Explanation": "**\nSome of the strings which can be obtained from text and have 6 subsequences \"ab\" are \"**a**aabb\", \"aa**a**bb\", and \"aab**b**b\"."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Halve Array Sum",
        "slug": "minimum-operations-to-halve-array-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [5,19,8,1]",
                "Output": "** 3",
                "Explanation": "** The initial sum of nums is equal to 5 + 19 + 8 + 1 = 33.\nThe following is one of the ways to reduce the sum by at least half:\nPick the number 19 and reduce it to 9.5.\nPick the number 9.5 and reduce it to 4.75.\nPick the number 8 and reduce it to 4.\nThe final array is [5, 4.75, 4, 1] with a total sum of 5 + 4.75 + 4 + 1 = 14.75. \nThe sum of nums has been reduced by 33 - 14.75 = 18.25, which is at least half of the initial sum, 18.25 >= 33/2 = 16.5.\nOverall, 3 operations were used so we return 3.\nIt can be shown that we cannot reduce the sum by at least half in less than 3 operations."
            },
            {
                "Input": "** nums = [3,8,20]",
                "Output": "** 3",
                "Explanation": "** The initial sum of nums is equal to 3 + 8 + 20 = 31.\nThe following is one of the ways to reduce the sum by at least half:\nPick the number 20 and reduce it to 10.\nPick the number 10 and reduce it to 5.\nPick the number 3 and reduce it to 1.5.\nThe final array is [1.5, 8, 5] with a total sum of 1.5 + 8 + 5 = 14.5. \nThe sum of nums has been reduced by 31 - 14.5 = 16.5, which is at least half of the initial sum, 16.5 >= 31/2 = 15.5.\nOverall, 3 operations were used so we return 3.\nIt can be shown that we cannot reduce the sum by at least half in less than 3 operations."
            }
        ]
    },
    {
        "Title": "Minimum White Tiles After Covering With Carpets",
        "slug": "minimum-white-tiles-after-covering-with-carpets",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** floor = \"10110101\", numCarpets = 2, carpetLen = 2",
                "Output": "** 2",
                "Explanation": "** \nThe figure above shows one way of covering the tiles with the carpets such that only 2 white tiles are visible.\nNo other way of covering the tiles with the carpets can leave less than 2 white tiles visible."
            },
            {
                "Input": "** floor = \"11111\", numCarpets = 2, carpetLen = 3",
                "Output": "** 0",
                "Explanation": "** \nThe figure above shows one way of covering the tiles with the carpets such that no white tiles are visible.\nNote that the carpets are able to overlap one another."
            }
        ]
    },
    {
        "Title": "Count Hills and Valleys in an Array",
        "slug": "count-hills-and-valleys-in-an-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [2,4,1,1,6,5]",
                "Output": "** 3",
                "Explanation": "**\nAt index 0: There is no non-equal neighbor of 2 on the left, so index 0 is neither a hill nor a valley.\nAt index 1: The closest non-equal neighbors of 4 are 2 and 1. Since 4 > 2 and 4 > 1, index 1 is a hill. \nAt index 2: The closest non-equal neighbors of 1 are 4 and 6. Since 1 < 4 and 1 < 6, index 2 is a valley.\nAt index 3: The closest non-equal neighbors of 1 are 4 and 6. Since 1 < 4 and 1 < 6, index 3 is a valley, but note that it is part of the same valley as index 2.\nAt index 4: The closest non-equal neighbors of 6 are 1 and 5. Since 6 > 1 and 6 > 5, index 4 is a hill.\nAt index 5: There is no non-equal neighbor of 5 on the right, so index 5 is neither a hill nor a valley. \nThere are 3 hills and valleys so we return 3."
            },
            {
                "Input": "** nums = [6,6,5,5,4,1]",
                "Output": "** 0",
                "Explanation": "**\nAt index 0: There is no non-equal neighbor of 6 on the left, so index 0 is neither a hill nor a valley.\nAt index 1: There is no non-equal neighbor of 6 on the left, so index 1 is neither a hill nor a valley.\nAt index 2: The closest non-equal neighbors of 5 are 6 and 4. Since 5 < 6 and 5 > 4, index 2 is neither a hill nor a valley.\nAt index 3: The closest non-equal neighbors of 5 are 6 and 4. Since 5 < 6 and 5 > 4, index 3 is neither a hill nor a valley.\nAt index 4: The closest non-equal neighbors of 4 are 5 and 1. Since 4 < 5 and 4 > 1, index 4 is neither a hill nor a valley.\nAt index 5: There is no non-equal neighbor of 1 on the right, so index 5 is neither a hill nor a valley.\nThere are 0 hills and valleys so we return 0."
            }
        ]
    },
    {
        "Title": "Count Collisions on a Road",
        "slug": "count-collisions-on-a-road",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** directions = \"RLRSLL\"",
                "Output": "** 5",
                "Explanation": "**\nThe collisions that will happen on the road are:\n- Cars 0 and 1 will collide with each other. Since they are moving in opposite directions, the number of collisions becomes 0 + 2 = 2.\n- Cars 2 and 3 will collide with each other. Since car 3 is stationary, the number of collisions becomes 2 + 1 = 3.\n- Cars 3 and 4 will collide with each other. Since car 3 is stationary, the number of collisions becomes 3 + 1 = 4.\n- Cars 4 and 5 will collide with each other. After car 4 collides with car 3, it will stay at the point of collision and get hit by car 5. The number of collisions becomes 4 + 1 = 5.\nThus, the total number of collisions that will happen on the road is 5."
            },
            {
                "Input": "** directions = \"LLRR\"",
                "Output": "** 0",
                "Explanation": "**\nNo cars will collide with each other. Thus, the total number of collisions that will happen on the road is 0."
            }
        ]
    },
    {
        "Title": "Maximum Points in an Archery Competition",
        "slug": "maximum-points-in-an-archery-competition",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** numArrows = 9, aliceArrows = [1,1,0,1,0,0,2,1,0,1,2,0]",
                "Output": "** [0,0,0,0,1,1,0,0,1,2,3,1]",
                "Explanation": "** The table above shows how the competition is scored. \nBob earns a total point of 4 + 5 + 8 + 9 + 10 + 11 = 47.\nIt can be shown that Bob cannot obtain a score higher than 47 points."
            },
            {
                "Input": "** numArrows = 3, aliceArrows = [0,0,1,0,0,0,0,0,0,0,0,2]",
                "Output": "** [0,0,0,0,0,0,0,0,1,1,1,0]",
                "Explanation": "** The table above shows how the competition is scored.\nBob earns a total point of 8 + 9 + 10 = 27.\nIt can be shown that Bob cannot obtain a score higher than 27 points."
            }
        ]
    },
    {
        "Title": "Longest Substring of One Repeating Character",
        "slug": "longest-substring-of-one-repeating-character",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"babacc\", queryCharacters = \"bcb\", queryIndices = [1,3,3]",
                "Output": "** [3,3,4]",
                "Explanation": "** \n- 1st query updates s = \"b**b**bacc\". The longest substring consisting of one repeating character is \"bbb\" with length 3.\n- 2nd query updates s = \"bbb**c**cc\". \n  The longest substring consisting of one repeating character can be \"bbb\" or \"ccc\" with length 3.\n- 3rd query updates s = \"bbb**b**cc\". The longest substring consisting of one repeating character is \"bbbb\" with length 4.\nThus, we return [3,3,4]."
            },
            {
                "Input": "** s = \"abyzz\", queryCharacters = \"aa\", queryIndices = [2,1]",
                "Output": "** [2,3]",
                "Explanation": "**\n- 1st query updates s = \"ab**a**zz\". The longest substring consisting of one repeating character is \"zz\" with length 2.\n- 2nd query updates s = \"a**a**azz\". The longest substring consisting of one repeating character is \"aaa\" with length 3.\nThus, we return [2,3]."
            }
        ]
    },
    {
        "Title": "Find the Difference of Two Arrays",
        "slug": "find-the-difference-of-two-arrays",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums1 = [1,2,3], nums2 = [2,4,6]",
                "Output": "** [[1,3],[4,6]]",
                "Explanation": "**For nums1, nums1[1] = 2 is present at index 0 of nums2, whereas nums1[0] = 1 and nums1[2] = 3 are not present in nums2. Therefore, answer[0] = [1,3].\nFor nums2, nums2[0] = 2 is present at index 1 of nums1, whereas nums2[1] = 4 and nums2[2] = 6 are not present in nums2. Therefore, answer[1] = [4,6]."
            },
            {
                "Input": "** nums1 = [1,2,3,3], nums2 = [1,1,2,2]",
                "Output": "** [[3],[]]",
                "Explanation": "**For nums1, nums1[2] and nums1[3] are not present in nums2. Since nums1[2] == nums1[3], their value is only included once and answer[0] = [3].\nEvery integer in nums2 is present in nums1. Therefore, answer[1] = []."
            }
        ]
    },
    {
        "Title": "Minimum Deletions to Make Array Beautiful",
        "slug": "minimum-deletions-to-make-array-beautiful",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,1,2,3,5]",
                "Output": "** 1",
                "Explanation": "** You can delete either nums[0] or nums[1] to make nums = [1,2,3,5] which is beautiful. It can be proven you need at least 1 deletion to make nums beautiful."
            },
            {
                "Input": "** nums = [1,1,2,2,3,3]",
                "Output": "** 2",
                "Explanation": "** You can delete nums[0] and nums[5] to make nums = [1,2,2,3] which is beautiful. It can be proven you need at least 2 deletions to make nums beautiful."
            }
        ]
    },
    {
        "Title": "Find Palindrome With Fixed Length",
        "slug": "find-palindrome-with-fixed-length",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** queries = [1,2,3,4,5,90], intLength = 3",
                "Output": "** [101,111,121,131,141,999]",
                "Explanation": "**\nThe first few palindromes of length 3 are:\n101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, ...\nThe 90th palindrome of length 3 is 999."
            },
            {
                "Input": "** queries = [2,4,6], intLength = 4",
                "Output": "** [1111,1331,1551]",
                "Explanation": "**\nThe first six palindromes of length 4 are:\n1001, 1111, 1221, 1331, 1441, and 1551."
            }
        ]
    },
    {
        "Title": "Maximum Value of K Coins From Piles",
        "slug": "maximum-value-of-k-coins-from-piles",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** piles = [[1,100,3],[7,8,9]], k = 2",
                "Output": "** 101",
                "Explanation": "**\nThe above diagram shows the different ways we can choose k coins.\nThe maximum total we can obtain is 101."
            }
        ]
    },
    {
        "Title": "Minimum Bit Flips to Convert Number",
        "slug": "minimum-bit-flips-to-convert-number",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** start = 10, goal = 7",
                "Output": "** 3",
                "Explanation": "** The binary representation of 10 and 7 are 1010 and 0111 respectively. We can convert 10 to 7 in 3 steps:\n- Flip the first bit from the right: 1010 -> 1011.\n- Flip the third bit from the right: 1011 -> 1111.\n- Flip the fourth bit from the right: 1111 -> 0111.\nIt can be shown we cannot convert 10 to 7 in less than 3 steps. Hence, we return 3."
            },
            {
                "Input": "** start = 3, goal = 4",
                "Output": "** 3",
                "Explanation": "** The binary representation of 3 and 4 are 011 and 100 respectively. We can convert 3 to 4 in 3 steps:\n- Flip the first bit from the right: 011 -> 010.\n- Flip the second bit from the right: 010 -> 000.\n- Flip the third bit from the right: 000 -> 100.\nIt can be shown we cannot convert 3 to 4 in less than 3 steps. Hence, we return 3."
            }
        ]
    },
    {
        "Title": "Find Triangular Sum of an Array",
        "slug": "find-triangular-sum-of-an-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** 8",
                "Explanation": "**\nThe above diagram depicts the process from which we obtain the triangular sum of the array."
            }
        ]
    },
    {
        "Title": "Number of Ways to Select Buildings",
        "slug": "number-of-ways-to-select-buildings",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"001101\"",
                "Output": "** 6",
                "Explanation": "** \nThe following sets of indices selected are valid:\n- [0,2,4] from \"**0**0**1**1**0**1\" forms \"010\"\n- [0,3,4] from \"**0**01**10**1\" forms \"010\"\n- [1,2,4] from \"0**01**1**0**1\" forms \"010\"\n- [1,3,4] from \"0**0**1**10**1\" forms \"010\"\n- [2,4,5] from \"00**1**1**01**\" forms \"101\"\n- [3,4,5] from \"001**101**\" forms \"101\"\nNo other selection is valid. Thus, there are 6 total ways."
            },
            {
                "Input": "** s = \"11100\"",
                "Output": "** 0",
                "Explanation": "** It can be shown that there are no valid selections."
            }
        ]
    },
    {
        "Title": "Sum of Scores of Built Strings",
        "slug": "sum-of-scores-of-built-strings",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"babab\"",
                "Output": "** 9",
                "Explanation": "**\nFor s1 == \"b\", the longest common prefix is \"b\" which has a score of 1.\nFor s2 == \"ab\", there is no common prefix so the score is 0.\nFor s3 == \"bab\", the longest common prefix is \"bab\" which has a score of 3.\nFor s4 == \"abab\", there is no common prefix so the score is 0.\nFor s5 == \"babab\", the longest common prefix is \"babab\" which has a score of 5.\nThe sum of the scores is 1 + 0 + 3 + 0 + 5 = 9, so we return 9."
            },
            {
                "Input": "** s = \"azbazbzaz\"",
                "Output": "** 14",
                "Explanation": "** \nFor s2 == \"az\", the longest common prefix is \"az\" which has a score of 2.\nFor s6 == \"azbzaz\", the longest common prefix is \"azb\" which has a score of 3.\nFor s9 == \"azbazbzaz\", the longest common prefix is \"azbazbzaz\" which has a score of 9.\nFor all other si, the score is 0.\nThe sum of the scores is 2 + 3 + 9 = 14, so we return 14."
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Convert Time",
        "slug": "minimum-number-of-operations-to-convert-time",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** current = \"02:30\", correct = \"04:35\"",
                "Output": "** 3",
                "Explanation": "**We can convert current to correct in 3 operations as follows:\n- Add 60 minutes to current. current becomes \"03:30\".\n- Add 60 minutes to current. current becomes \"04:30\".\n- Add 5 minutes to current. current becomes \"04:35\".\nIt can be proven that it is not possible to convert current to correct in fewer than 3 operations."
            },
            {
                "Input": "** current = \"11:00\", correct = \"11:01\"",
                "Output": "** 1",
                "Explanation": "** We only have to add one minute to current, so the minimum number of operations needed is 1."
            }
        ]
    },
    {
        "Title": "Find Players With Zero or One Losses",
        "slug": "find-players-with-zero-or-one-losses",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** matches = [[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]",
                "Output": "** [[1,2,10],[4,5,7,8]]",
                "Explanation": "**\nPlayers 1, 2, and 10 have not lost any matches.\nPlayers 4, 5, 7, and 8 each have lost one match.\nPlayers 3, 6, and 9 each have lost two matches.\nThus, answer[0] = [1,2,10] and answer[1] = [4,5,7,8]."
            },
            {
                "Input": "** matches = [[2,3],[1,3],[5,4],[6,4]]",
                "Output": "** [[1,2,5,6],[]]",
                "Explanation": "**\nPlayers 1, 2, 5, and 6 have not lost any matches.\nPlayers 3 and 4 each have lost two matches.\nThus, answer[0] = [1,2,5,6] and answer[1] = []."
            }
        ]
    },
    {
        "Title": "Maximum Candies Allocated to K Children",
        "slug": "maximum-candies-allocated-to-k-children",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** candies = [5,8,6], k = 3",
                "Output": "** 5",
                "Explanation": "** We can divide candies[1] into 2 piles of size 5 and 3, and candies[2] into 2 piles of size 5 and 1. We now have five piles of candies of sizes 5, 5, 3, 5, and 1. We can allocate the 3 piles of size 5 to 3 children. It can be proven that each child cannot receive more than 5 candies."
            },
            {
                "Input": "** candies = [2,5], k = 11",
                "Output": "** 0",
                "Explanation": "** There are 11 children but only 7 candies in total, so it is impossible to ensure each child receives at least one candy. Thus, each child gets no candy and the answer is 0."
            }
        ]
    },
    {
        "Title": "Encrypt and Decrypt Strings",
        "slug": "encrypt-and-decrypt-strings",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"Encrypter\", \"encrypt\", \"decrypt\"]\n[[['a', 'b', 'c', 'd'], [\"ei\", \"zf\", \"ei\", \"am\"], [\"abcd\", \"acbd\", \"adbc\", \"badc\", \"dacb\", \"cadb\", \"cbda\", \"abad\"]], [\"abcd\"], [\"eizfeiam\"]]",
                "Output": "[null, \"eizfeiam\", 2]",
                "Explanation": "Encrypter encrypter = new Encrypter([['a', 'b', 'c', 'd'], [\"ei\", \"zf\", \"ei\", \"am\"], [\"abcd\", \"acbd\", \"adbc\", \"badc\", \"dacb\", \"cadb\", \"cbda\", \"abad\"]);\nencrypter.encrypt(\"abcd\"); // return \"eizfeiam\". \n\u00a0                          // 'a' maps to \"ei\", 'b' maps to \"zf\", 'c' maps to \"ei\", and 'd' maps to \"am\".\nencrypter.decrypt(\"eizfeiam\"); // return 2. \n                              // \"ei\" can map to 'a' or 'c', \"zf\" maps to 'b', and \"am\" maps to 'd'. \n                              // Thus, the possible strings after decryption are \"abad\", \"cbad\", \"abcd\", and \"cbcd\". \n                              // 2 of those strings, \"abad\" and \"abcd\", appear in dictionary, so the answer is 2."
            }
        ]
    },
    {
        "Title": "Largest Number After Digit Swaps by Parity",
        "slug": "largest-number-after-digit-swaps-by-parity",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num = 1234",
                "Output": "** 3412",
                "Explanation": "** Swap the digit 3 with the digit 1, this results in the number 3214.\nSwap the digit 2 with the digit 4, this results in the number 3412.\nNote that there may be other sequences of swaps but it can be shown that 3412 is the largest possible number.\nAlso note that we may not swap the digit 4 with the digit 1 since they are of different parities."
            },
            {
                "Input": "** num = 65875",
                "Output": "** 87655",
                "Explanation": "** Swap the digit 8 with the digit 6, this results in the number 85675.\nSwap the first digit 5 with the digit 7, this results in the number 87655.\nNote that there may be other sequences of swaps but it can be shown that 87655 is the largest possible number."
            }
        ]
    },
    {
        "Title": "Minimize Result by Adding Parentheses to Expression",
        "slug": "minimize-result-by-adding-parentheses-to-expression",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** expression = \"247+38\"",
                "Output": "** \"2(47+38)\"",
                "Explanation": "** The expression evaluates to 2 * (47 + 38) = 2 * 85 = 170.\nNote that \"2(4)7+38\" is invalid because the right parenthesis must be to the right of the '+'.\nIt can be shown that 170 is the smallest possible value."
            },
            {
                "Input": "** expression = \"12+34\"",
                "Output": "** \"1(2+3)4\"",
                "Explanation": "** The expression evaluates to 1 * (2 + 3) * 4 = 1 * 5 * 4 = 20."
            },
            {
                "Input": "** expression = \"999+999\"",
                "Output": "** \"(999+999)\"",
                "Explanation": "** The expression evaluates to 999 + 999 = 1998."
            }
        ]
    },
    {
        "Title": "Maximum Product After K Increments",
        "slug": "maximum-product-after-k-increments",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [0,4], k = 5",
                "Output": "** 20",
                "Explanation": "** Increment the first number 5 times.\nNow nums = [5, 4], with a product of 5 * 4 = 20.\nIt can be shown that 20 is maximum product possible, so we return 20.\nNote that there may be other ways to increment nums to have the maximum product."
            },
            {
                "Input": "** nums = [6,3,3,2], k = 2",
                "Output": "** 216",
                "Explanation": "** Increment the second number 1 time and increment the fourth number 1 time.\nNow nums = [6, 4, 3, 3], with a product of 6 * 4 * 3 * 3 = 216.\nIt can be shown that 216 is maximum product possible, so we return 216.\nNote that there may be other ways to increment nums to have the maximum product."
            }
        ]
    },
    {
        "Title": "Maximum Total Beauty of the Gardens",
        "slug": "maximum-total-beauty-of-the-gardens",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** flowers = [1,3,1,1], newFlowers = 7, target = 6, full = 12, partial = 1",
                "Output": "** 14",
                "Explanation": "** Alice can plant\n- 2 flowers in the 0th garden\n- 3 flowers in the 1st garden\n- 1 flower in the 2nd garden\n- 1 flower in the 3rd garden\nThe gardens will then be [3,6,2,2]. She planted a total of 2 + 3 + 1 + 1 = 7 flowers.\nThere is 1 garden that is complete.\nThe minimum number of flowers in the incomplete gardens is 2.\nThus, the total beauty is 1 * 12 + 2 * 1 = 12 + 2 = 14.\nNo other way of planting flowers can obtain a total beauty higher than 14."
            },
            {
                "Input": "** flowers = [2,4,5,3], newFlowers = 10, target = 5, full = 2, partial = 6",
                "Output": "** 30",
                "Explanation": "** Alice can plant\n- 3 flowers in the 0th garden\n- 0 flowers in the 1st garden\n- 0 flowers in the 2nd garden\n- 2 flowers in the 3rd garden\nThe gardens will then be [5,4,5,5]. She planted a total of 3 + 0 + 0 + 2 = 5 flowers.\nThere are 3 gardens that are complete.\nThe minimum number of flowers in the incomplete gardens is 4.\nThus, the total beauty is 3 * 2 + 4 * 6 = 6 + 24 = 30.\nNo other way of planting flowers can obtain a total beauty higher than 30.\nNote that Alice could make all the gardens complete but in this case, she would obtain a lower total beauty."
            }
        ]
    },
    {
        "Title": "Add Two Integers",
        "slug": "add-two-integers",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num1 = 12, num2 = 5",
                "Output": "** 17",
                "Explanation": "** num1 is 12, num2 is 5, and their sum is 12 + 5 = 17, so 17 is returned."
            },
            {
                "Input": "** num1 = -10, num2 = 4",
                "Output": "** -6",
                "Explanation": "** num1 + num2 = -6, so -6 is returned."
            }
        ]
    },
    {
        "Title": "Root Equals Sum of Children",
        "slug": "root-equals-sum-of-children",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [10,4,6]",
                "Output": "** true",
                "Explanation": "** The values of the root, its left child, and its right child are 10, 4, and 6, respectively.\n10 is equal to 4 + 6, so we return true."
            },
            {
                "Input": "** root = [5,3,1]",
                "Output": "** false",
                "Explanation": "** The values of the root, its left child, and its right child are 5, 3, and 1, respectively.\n5 is not equal to 3 + 1, so we return false."
            }
        ]
    },
    {
        "Title": "Find Closest Number to Zero",
        "slug": "find-closest-number-to-zero",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [-4,-2,1,4,8]",
                "Output": "** 1",
                "Explanation": "**\nThe distance from -4 to 0 is |-4| = 4.\nThe distance from -2 to 0 is |-2| = 2.\nThe distance from 1 to 0 is |1| = 1.\nThe distance from 4 to 0 is |4| = 4.\nThe distance from 8 to 0 is |8| = 8.\nThus, the closest number to 0 in the array is 1."
            },
            {
                "Input": "** nums = [2,-1,1]",
                "Output": "** 1",
                "Explanation": "** 1 and -1 are both the closest numbers to 0, so 1 being larger is returned."
            }
        ]
    },
    {
        "Title": "Number of Ways to Buy Pens and Pencils",
        "slug": "number-of-ways-to-buy-pens-and-pencils",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** total = 20, cost1 = 10, cost2 = 5",
                "Output": "** 9",
                "Explanation": "** The price of a pen is 10 and the price of a pencil is 5.\n- If you buy 0 pens, you can buy 0, 1, 2, 3, or 4 pencils.\n- If you buy 1 pen, you can buy 0, 1, or 2 pencils.\n- If you buy 2 pens, you cannot buy any pencils.\nThe total number of ways to buy pens and pencils is 5 + 3 + 1 = 9."
            },
            {
                "Input": "** total = 5, cost1 = 10, cost2 = 10",
                "Output": "** 1",
                "Explanation": "** The price of both pens and pencils are 10, which cost more than total, so you cannot buy any writing utensils. Therefore, there is only 1 way: buy 0 pens and 0 pencils."
            }
        ]
    },
    {
        "Title": "Design an ATM Machine",
        "slug": "design-an-atm-machine",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"ATM\", \"deposit\", \"withdraw\", \"deposit\", \"withdraw\", \"withdraw\"]\n[[], [[0,0,1,2,1]], [600], [[0,1,0,1,1]], [600], [550]]",
                "Output": "[null, null, [0,0,1,0,1], null, [-1], [0,1,0,0,1]]",
                "Explanation": "ATM atm = new ATM();\natm.deposit([0,0,1,2,1]); // Deposits 1 $100 banknote, 2 $200 banknotes,\n                          // and 1 $500 banknote.\natm.withdraw(600);        // Returns [0,0,1,0,1]. The machine uses 1 $100 banknote\n                          // and 1 $500 banknote. The banknotes left over in the\n                          // machine are [0,0,0,2,0].\natm.deposit([0,1,0,1,1]); // Deposits 1 $50, $200, and $500 banknote.\n                          // The banknotes in the machine are now [0,1,0,3,1].\natm.withdraw(600);        // Returns [-1]. The machine will try to use a $500 banknote\n                          // and then be unable to complete the remaining $100,\n                          // so the withdraw request will be rejected.\n                          // Since the request is rejected, the number of banknotes\n                          // in the machine is not modified.\natm.withdraw(550);        // Returns [0,1,0,0,1]. The machine uses 1 $50 banknote\n                          // and 1 $500 banknote."
            }
        ]
    },
    {
        "Title": "Maximum Score of a Node Sequence",
        "slug": "maximum-score-of-a-node-sequence",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** scores = [5,2,9,8,4], edges = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]",
                "Output": "** 24",
                "Explanation": "** The figure above shows the graph and the chosen node sequence [0,1,2,3].\nThe score of the node sequence is 5 + 2 + 9 + 8 = 24.\nIt can be shown that no other node sequence has a score of more than 24.\nNote that the sequences [3,1,2,0] and [1,0,2,3] are also valid and have a score of 24.\nThe sequence [0,3,2,4] is not valid since no edge connects nodes 0 and 3."
            },
            {
                "Input": "** scores = [9,20,6,4,11,12], edges = [[0,3],[5,3],[2,4],[1,3]]",
                "Output": "** -1",
                "Explanation": "** The figure above shows the graph.\nThere are no valid node sequences of length 4, so we return -1."
            }
        ]
    },
    {
        "Title": "Calculate Digit Sum of a String",
        "slug": "calculate-digit-sum-of-a-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"11111222223\", k = 3",
                "Output": "** \"135\"",
                "Explanation": "** \n- For the first round, we divide s into groups of size 3: \"111\", \"112\", \"222\", and \"23\".\n  \u200b\u200b\u200b\u200b\u200bThen we calculate the digit sum of each group: 1 + 1 + 1 = 3, 1 + 1 + 2 = 4, 2 + 2 + 2 = 6, and 2 + 3 = 5. \n\u00a0 So, s becomes \"3\" + \"4\" + \"6\" + \"5\" = \"3465\" after the first round.\n- For the second round, we divide s into \"346\" and \"5\".\n\u00a0 Then we calculate the digit sum of each group: 3 + 4 + 6 = 13, 5 = 5. \n\u00a0 So, s becomes \"13\" + \"5\" = \"135\" after second round. \nNow, s.length <= k, so we return \"135\" as the answer."
            },
            {
                "Input": "** s = \"00000000\", k = 3",
                "Output": "** \"000\"",
                "Explanation": "** \nWe divide s into \"000\", \"000\", and \"00\".\nThen we calculate the digit sum of each group: 0 + 0 + 0 = 0, 0 + 0 + 0 = 0, and 0 + 0 = 0. \ns becomes \"0\" + \"0\" + \"0\" = \"000\", whose length is equal to k, so we return \"000\"."
            }
        ]
    },
    {
        "Title": "Minimum Rounds to Complete All Tasks",
        "slug": "minimum-rounds-to-complete-all-tasks",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** tasks = [2,2,3,3,2,4,4,4,4,4]",
                "Output": "** 4",
                "Explanation": "** To complete all the tasks, a possible plan is:\n- In the first round, you complete 3 tasks of difficulty level 2. \n- In the second round, you complete 2 tasks of difficulty level 3. \n- In the third round, you complete 3 tasks of difficulty level 4. \n- In the fourth round, you complete 2 tasks of difficulty level 4.  \nIt can be shown that all the tasks cannot be completed in fewer than 4 rounds, so the answer is 4."
            },
            {
                "Input": "** tasks = [2,3,3]",
                "Output": "** -1",
                "Explanation": "** There is only 1 task of difficulty level 2, but in each round, you can only complete either 2 or 3 tasks of the same difficulty level. Hence, you cannot complete all the tasks, and the answer is -1."
            }
        ]
    },
    {
        "Title": "Maximum Trailing Zeros in a Cornered Path",
        "slug": "maximum-trailing-zeros-in-a-cornered-path",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[23,17,15,3,20],[8,1,20,27,11],[9,4,6,2,21],[40,9,1,10,6],[22,7,4,5,3]]",
                "Output": "** 3",
                "Explanation": "** The grid on the left shows a valid cornered path.\nIt has a product of 15 * 20 * 6 * 1 * 10 = 18000 which has 3 trailing zeros.\nIt can be shown that this is the maximum trailing zeros in the product of a cornered path.\n\nThe grid in the middle is not a cornered path as it has more than one turn.\nThe grid on the right is not a cornered path as it requires a return to a previously visited cell."
            },
            {
                "Input": "** grid = [[4,3,2],[7,6,1],[8,8,8]]",
                "Output": "** 0",
                "Explanation": "** The grid is shown in the figure above.\nThere are no cornered paths in the grid that result in a product with a trailing zero."
            }
        ]
    },
    {
        "Title": "Longest Path With Different Adjacent Characters",
        "slug": "longest-path-with-different-adjacent-characters",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** parent = [-1,0,0,1,1,2], s = \"abacbe\"",
                "Output": "** 3",
                "Explanation": "** The longest path where each two adjacent nodes have different characters in the tree is the path: 0 -> 1 -> 3. The length of this path is 3, so 3 is returned.\nIt can be proven that there is no longer path that satisfies the conditions."
            },
            {
                "Input": "** parent = [-1,0,0,0], s = \"aabc\"",
                "Output": "** 3",
                "Explanation": "** The longest path where each two adjacent nodes have different characters is the path: 2 -> 0 -> 3. The length of this path is 3, so 3 is returned."
            }
        ]
    },
    {
        "Title": "Intersection of Multiple Arrays",
        "slug": "intersection-of-multiple-arrays",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [[**3**,1,2,**4**,5],[1,2,**3**,**4**],[**3**,**4**,5,6]]",
                "Output": "** [3,4]",
                "Explanation": "** \nThe only integers present in each of nums[0] = [**3**,1,2,**4**,5], nums[1] = [1,2,**3**,**4**], and nums[2] = [**3**,**4**,5,6] are 3 and 4, so we return [3,4]."
            },
            {
                "Input": "** nums = [[1,2,3],[4,5,6]]",
                "Output": "** []",
                "Explanation": "** \nThere does not exist any integer present both in nums[0] and nums[1], so we return an empty list []."
            }
        ]
    },
    {
        "Title": "Count Lattice Points Inside a Circle",
        "slug": "count-lattice-points-inside-a-circle",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** circles = [[2,2,1]]",
                "Output": "** 5",
                "Explanation": "**\nThe figure above shows the given circle.\nThe lattice points present inside the circle are (1, 2), (2, 1), (2, 2), (2, 3), and (3, 2) and are shown in green.\nOther points such as (1, 1) and (1, 3), which are shown in red, are not considered inside the circle.\nHence, the number of lattice points present inside at least one circle is 5."
            },
            {
                "Input": "** circles = [[2,2,2],[3,4,1]]",
                "Output": "** 16",
                "Explanation": "**\nThe figure above shows the given circles.\nThere are exactly 16 lattice points which are present inside at least one circle. \nSome of them are (0, 2), (2, 0), (2, 4), (3, 2), and (4, 4)."
            }
        ]
    },
    {
        "Title": "Count Number of Rectangles Containing Each Point",
        "slug": "count-number-of-rectangles-containing-each-point",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** rectangles = [[1,2],[2,3],[2,5]], points = [[2,1],[1,4]]",
                "Output": "** [2,1]",
                "Explanation": "** \nThe first rectangle contains no points.\nThe second rectangle contains only the point (2, 1).\nThe third rectangle contains the points (2, 1) and (1, 4).\nThe number of rectangles that contain the point (2, 1) is 2.\nThe number of rectangles that contain the point (1, 4) is 1.\nTherefore, we return [2, 1]."
            },
            {
                "Input": "** rectangles = [[1,1],[2,2],[3,3]], points = [[1,3],[1,1]]",
                "Output": "** [1,3]",
                "Explanation": "**The first rectangle contains only the point (1, 1).\nThe second rectangle contains only the point (1, 1).\nThe third rectangle contains the points (1, 3) and (1, 1).\nThe number of rectangles that contain the point (1, 3) is 1.\nThe number of rectangles that contain the point (1, 1) is 3.\nTherefore, we return [1, 3]."
            }
        ]
    },
    {
        "Title": "Number of Flowers in Full Bloom",
        "slug": "number-of-flowers-in-full-bloom",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** flowers = [[1,6],[3,7],[9,12],[4,13]], people = [2,3,7,11]",
                "Output": "** [1,2,2,2]",
                "Explanation": "** The figure above shows the times when the flowers are in full bloom and when the people arrive.\nFor each person, we return the number of flowers in full bloom during their arrival."
            },
            {
                "Input": "** flowers = [[1,10],[3,3]], people = [3,3,2]",
                "Output": "** [2,2,1]",
                "Explanation": "** The figure above shows the times when the flowers are in full bloom and when the people arrive.\nFor each person, we return the number of flowers in full bloom during their arrival."
            }
        ]
    },
    {
        "Title": "Count Prefixes of a Given String",
        "slug": "count-prefixes-of-a-given-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** words = [\"a\",\"b\",\"c\",\"ab\",\"bc\",\"abc\"], s = \"abc\"",
                "Output": "** 3",
                "Explanation": "**\nThe strings in words which are a prefix of s = \"abc\" are:\n\"a\", \"ab\", and \"abc\".\nThus the number of strings in words which are a prefix of s is 3."
            },
            {
                "Input": "** words = [\"a\",\"a\"], s = \"aa\"",
                "Output": "** 2",
                "Explanation": "**Both of the strings are a prefix of s. \nNote that the same string can occur multiple times in words, and it should be counted each time."
            }
        ]
    },
    {
        "Title": "Minimum Average Difference",
        "slug": "minimum-average-difference",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,5,3,9,5,3]",
                "Output": "** 3",
                "Explanation": "**\n- The average difference of index 0 is: |2 / 1 - (5 + 3 + 9 + 5 + 3) / 5| = |2 / 1 - 25 / 5| = |2 - 5| = 3.\n- The average difference of index 1 is: |(2 + 5) / 2 - (3 + 9 + 5 + 3) / 4| = |7 / 2 - 20 / 4| = |3 - 5| = 2.\n- The average difference of index 2 is: |(2 + 5 + 3) / 3 - (9 + 5 + 3) / 3| = |10 / 3 - 17 / 3| = |3 - 5| = 2.\n- The average difference of index 3 is: |(2 + 5 + 3 + 9) / 4 - (5 + 3) / 2| = |19 / 4 - 8 / 2| = |4 - 4| = 0.\n- The average difference of index 4 is: |(2 + 5 + 3 + 9 + 5) / 5 - 3 / 1| = |24 / 5 - 3 / 1| = |4 - 3| = 1.\n- The average difference of index 5 is: |(2 + 5 + 3 + 9 + 5 + 3) / 6 - 0| = |27 / 6 - 0| = |4 - 0| = 4.\nThe average difference of index 3 is the minimum average difference so return 3."
            },
            {
                "Input": "** nums = [0]",
                "Output": "** 0",
                "Explanation": "**\nThe only index is 0 so return 0.\nThe average difference of index 0 is: |0 / 1 - 0| = |0 - 0| = 0."
            }
        ]
    },
    {
        "Title": "Count Unguarded Cells in the Grid",
        "slug": "count-unguarded-cells-in-the-grid",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** m = 4, n = 6, guards = [[0,0],[1,1],[2,3]], walls = [[0,1],[2,2],[1,4]]",
                "Output": "** 7",
                "Explanation": "** The guarded and unguarded cells are shown in red and green respectively in the above diagram.\nThere are a total of 7 unguarded cells, so we return 7."
            },
            {
                "Input": "** m = 3, n = 3, guards = [[1,1]], walls = [[0,1],[1,0],[2,1],[1,2]]",
                "Output": "** 4",
                "Explanation": "** The unguarded cells are shown in green in the above diagram.\nThere are a total of 4 unguarded cells, so we return 4."
            }
        ]
    },
    {
        "Title": "Escape the Spreading Fire",
        "slug": "escape-the-spreading-fire",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [[0,2,0,0,0,0,0],[0,0,0,2,2,1,0],[0,2,0,0,1,2,0],[0,0,2,2,2,0,2],[0,0,0,0,0,0,0]]",
                "Output": "** 3",
                "Explanation": "** The figure above shows the scenario where you stay in the initial position for 3 minutes.\nYou will still be able to safely reach the safehouse.\nStaying for more than 3 minutes will not allow you to safely reach the safehouse."
            },
            {
                "Input": "** grid = [[0,0,0,0],[0,1,2,0],[0,2,0,0]]",
                "Output": "** -1",
                "Explanation": "** The figure above shows the scenario where you immediately move towards the safehouse.\nFire will spread to any cell you move towards and it is impossible to safely reach the safehouse.\nThus, -1 is returned."
            },
            {
                "Input": "** grid = [[0,0,0],[2,2,0],[1,2,0]]",
                "Output": "** 1000000000",
                "Explanation": "** The figure above shows the initial grid.\nNotice that the fire is contained by walls and you will always be able to safely reach the safehouse.\nThus, 109 is returned."
            }
        ]
    },
    {
        "Title": "Remove Digit From Number to Maximize Result",
        "slug": "remove-digit-from-number-to-maximize-result",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** number = \"123\", digit = \"3\"",
                "Output": "** \"12\"",
                "Explanation": "** There is only one '3' in \"123\". After removing '3', the result is \"12\"."
            },
            {
                "Input": "** number = \"1231\", digit = \"1\"",
                "Output": "** \"231\"",
                "Explanation": "** We can remove the first '1' to get \"231\" or remove the second '1' to get \"123\".\nSince 231 > 123, we return \"231\"."
            },
            {
                "Input": "** number = \"551\", digit = \"5\"",
                "Output": "** \"51\"",
                "Explanation": "** We can remove either the first or second '5' from \"551\".\nBoth result in the string \"51\"."
            }
        ]
    },
    {
        "Title": "Minimum Consecutive Cards to Pick Up",
        "slug": "minimum-consecutive-cards-to-pick-up",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** cards = [3,4,2,3,4,7]",
                "Output": "** 4",
                "Explanation": "** We can pick up the cards [3,4,2,3] which contain a matching pair of cards with value 3. Note that picking up the cards [4,2,3,4] is also optimal."
            },
            {
                "Input": "** cards = [1,0,5,3]",
                "Output": "** -1",
                "Explanation": "** There is no way to pick up a set of consecutive cards that contain a pair of matching cards."
            }
        ]
    },
    {
        "Title": "K Divisible Elements Subarrays",
        "slug": "k-divisible-elements-subarrays",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [**2**,3,3,**2**,**2**], k = 2, p = 2",
                "Output": "** 11",
                "Explanation": "**\nThe elements at indices 0, 3, and 4 are divisible by p = 2.\nThe 11 distinct subarrays which have at most k = 2 elements divisible by 2 are:\n[2], [2,3], [2,3,3], [2,3,3,2], [3], [3,3], [3,3,2], [3,3,2,2], [3,2], [3,2,2], and [2,2].\nNote that the subarrays [2] and [3] occur more than once in nums, but they should each be counted only once.\nThe subarray [2,3,3,2,2] should not be counted because it has 3 elements that are divisible by 2."
            },
            {
                "Input": "** nums = [1,2,3,4], k = 4, p = 1",
                "Output": "** 10",
                "Explanation": "**\nAll element of nums are divisible by p = 1.\nAlso, every subarray of nums will have at most 4 elements that are divisible by 1.\nSince all subarrays are distinct, the total number of subarrays satisfying all the constraints is 10."
            }
        ]
    },
    {
        "Title": "Total Appeal of A String",
        "slug": "total-appeal-of-a-string",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"abbca\"",
                "Output": "** 28",
                "Explanation": "** The following are the substrings of \"abbca\":\n- Substrings of length 1: \"a\", \"b\", \"b\", \"c\", \"a\" have an appeal of 1, 1, 1, 1, and 1 respectively. The sum is 5.\n- Substrings of length 2: \"ab\", \"bb\", \"bc\", \"ca\" have an appeal of 2, 1, 2, and 2 respectively. The sum is 7.\n- Substrings of length 3: \"abb\", \"bbc\", \"bca\" have an appeal of 2, 2, and 3 respectively. The sum is 7.\n- Substrings of length 4: \"abbc\", \"bbca\" have an appeal of 3 and 3 respectively. The sum is 6.\n- Substrings of length 5: \"abbca\" has an appeal of 3. The sum is 3.\nThe total sum is 5 + 7 + 7 + 6 + 3 = 28."
            },
            {
                "Input": "** s = \"code\"",
                "Output": "** 20",
                "Explanation": "** The following are the substrings of \"code\":\n- Substrings of length 1: \"c\", \"o\", \"d\", \"e\" have an appeal of 1, 1, 1, and 1 respectively. The sum is 4.\n- Substrings of length 2: \"co\", \"od\", \"de\" have an appeal of 2, 2, and 2 respectively. The sum is 6.\n- Substrings of length 3: \"cod\", \"ode\" have an appeal of 3 and 3 respectively. The sum is 6.\n- Substrings of length 4: \"code\" has an appeal of 4. The sum is 4.\nThe total sum is 4 + 6 + 6 + 4 = 20."
            }
        ]
    },
    {
        "Title": "Largest 3-Same-Digit Number in String",
        "slug": "largest-3-same-digit-number-in-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num = \"6**777**133339\"",
                "Output": "** \"777\"",
                "Explanation": "** There are two distinct good integers: \"777\" and \"333\".\n\"777\" is the largest, so we return \"777\"."
            },
            {
                "Input": "** num = \"23**000**19\"",
                "Output": "** \"000\"",
                "Explanation": "** \"000\" is the only good integer."
            },
            {
                "Input": "** num = \"42352338\"",
                "Output": "** \"\"",
                "Explanation": "** No substring of length 3 consists of only one unique digit. Therefore, there are no good integers."
            }
        ]
    },
    {
        "Title": "Count Nodes Equal to Average of Subtree",
        "slug": "count-nodes-equal-to-average-of-subtree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [4,8,5,0,1,null,6]",
                "Output": "** 5",
                "Explanation": "** \nFor the node with value 4: The average of its subtree is (4 + 8 + 5 + 0 + 1 + 6) / 6 = 24 / 6 = 4.\nFor the node with value 5: The average of its subtree is (5 + 6) / 2 = 11 / 2 = 5.\nFor the node with value 0: The average of its subtree is 0 / 1 = 0.\nFor the node with value 1: The average of its subtree is 1 / 1 = 1.\nFor the node with value 6: The average of its subtree is 6 / 1 = 6."
            },
            {
                "Input": "** root = [1]",
                "Output": "** 1",
                "Explanation": "** For the node with value 1: The average of its subtree is 1 / 1 = 1."
            }
        ]
    },
    {
        "Title": "Count Number of Texts",
        "slug": "count-number-of-texts",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** pressedKeys = \"22233\"",
                "Output": "** 8",
                "Explanation": "**\nThe possible text messages Alice could have sent are:\n\"aaadd\", \"abdd\", \"badd\", \"cdd\", \"aaae\", \"abe\", \"bae\", and \"ce\".\nSince there are 8 possible messages, we return 8."
            },
            {
                "Input": "** pressedKeys = \"222222222222222222222222222222222222\"",
                "Output": "** 82876089",
                "Explanation": "**\nThere are 2082876103 possible text messages Alice could have sent.\nSince we need to return the answer modulo 109 + 7, we return 2082876103 % (109 + 7) = 82876089."
            }
        ]
    },
    {
        "Title": " Check if There Is a Valid Parentheses String Path",
        "slug": "check-if-there-is-a-valid-parentheses-string-path",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [[\"(\",\"(\",\"(\"],[\")\",\"(\",\")\"],[\"(\",\"(\",\")\"],[\"(\",\"(\",\")\"]]",
                "Output": "** true",
                "Explanation": "** The above diagram shows two possible paths that form valid parentheses strings.\nThe first path shown results in the valid parentheses string \"()(())\".\nThe second path shown results in the valid parentheses string \"((()))\".\nNote that there may be other valid parentheses string paths."
            },
            {
                "Input": "** grid = [[\")\",\")\"],[\"(\",\"(\"]]",
                "Output": "** false",
                "Explanation": "** The two possible paths form the parentheses strings \"))(\" and \")((\". Since neither of them are valid parentheses strings, we return false."
            }
        ]
    },
    {
        "Title": "Find the K-Beauty of a Number",
        "slug": "find-the-k-beauty-of-a-number",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num = 240, k = 2",
                "Output": "** 2",
                "Explanation": "** The following are the substrings of num of length k:\n- \"24\" from \"**24**0\": 24 is a divisor of 240.\n- \"40\" from \"2**40**\": 40 is a divisor of 240.\nTherefore, the k-beauty is 2."
            },
            {
                "Input": "** num = 430043, k = 2",
                "Output": "** 2",
                "Explanation": "** The following are the substrings of num of length k:\n- \"43\" from \"**43**0043\": 43 is a divisor of 430043.\n- \"30\" from \"4**30**043\": 30 is not a divisor of 430043.\n- \"00\" from \"43**00**43\": 0 is not a divisor of 430043.\n- \"04\" from \"430**04**3\": 4 is not a divisor of 430043.\n- \"43\" from \"4300**43**\": 43 is a divisor of 430043.\nTherefore, the k-beauty is 2."
            }
        ]
    },
    {
        "Title": "Number of Ways to Split Array",
        "slug": "number-of-ways-to-split-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [10,4,-8,7]",
                "Output": "** 2",
                "Explanation": "** \nThere are three ways of splitting nums into two non-empty parts:\n- Split nums at index 0. Then, the first part is [10], and its sum is 10. The second part is [4,-8,7], and its sum is 3. Since 10 >= 3, i = 0 is a valid split.\n- Split nums at index 1. Then, the first part is [10,4], and its sum is 14. The second part is [-8,7], and its sum is -1. Since 14 >= -1, i = 1 is a valid split.\n- Split nums at index 2. Then, the first part is [10,4,-8], and its sum is 6. The second part is [7], and its sum is 7. Since 6 < 7, i = 2 is not a valid split.\nThus, the number of valid splits in nums is 2."
            },
            {
                "Input": "** nums = [2,3,1,0]",
                "Output": "** 2",
                "Explanation": "** \nThere are two valid splits in nums:\n- Split nums at index 1. Then, the first part is [2,3], and its sum is 5. The second part is [1,0], and its sum is 1. Since 5 >= 1, i = 1 is a valid split. \n- Split nums at index 2. Then, the first part is [2,3,1], and its sum is 6. The second part is [0], and its sum is 0. Since 6 >= 0, i = 2 is a valid split."
            }
        ]
    },
    {
        "Title": "Maximum White Tiles Covered by a Carpet",
        "slug": "maximum-white-tiles-covered-by-a-carpet",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** tiles = [[1,5],[10,11],[12,18],[20,25],[30,32]], carpetLen = 10",
                "Output": "** 9",
                "Explanation": "** Place the carpet starting on tile 10. \nIt covers 9 white tiles, so we return 9.\nNote that there may be other places where the carpet covers 9 white tiles.\nIt can be shown that the carpet cannot cover more than 9 white tiles."
            },
            {
                "Input": "** tiles = [[10,11],[1,1]], carpetLen = 2",
                "Output": "** 2",
                "Explanation": "** Place the carpet starting on tile 10. \nIt covers 2 white tiles, so we return 2."
            }
        ]
    },
    {
        "Title": "Substring With Largest Variance",
        "slug": "substring-with-largest-variance",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"aababbb\"",
                "Output": "** 3",
                "Explanation": "**\nAll possible variances along with their respective substrings are listed below:\n- Variance 0 for substrings \"a\", \"aa\", \"ab\", \"abab\", \"aababb\", \"ba\", \"b\", \"bb\", and \"bbb\".\n- Variance 1 for substrings \"aab\", \"aba\", \"abb\", \"aabab\", \"ababb\", \"aababbb\", and \"bab\".\n- Variance 2 for substrings \"aaba\", \"ababbb\", \"abbb\", and \"babb\".\n- Variance 3 for substring \"babbb\".\nSince the largest possible variance is 3, we return it."
            },
            {
                "Input": "** s = \"abcde\"",
                "Output": "** 0",
                "Explanation": "**\nNo letter occurs more than once in s, so the variance of every substring is 0."
            }
        ]
    },
    {
        "Title": "Find Resultant Array After Removing Anagrams",
        "slug": "find-resultant-array-after-removing-anagrams",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** words = [\"abba\",\"baba\",\"bbaa\",\"cd\",\"cd\"]",
                "Output": "** [\"abba\",\"cd\"]",
                "Explanation": "**\nOne of the ways we can obtain the resultant array is by using the following operations:\n- Since words[2] = \"bbaa\" and words[1] = \"baba\" are anagrams, we choose index 2 and delete words[2].\n  Now words = [\"abba\",\"baba\",\"cd\",\"cd\"].\n- Since words[1] = \"baba\" and words[0] = \"abba\" are anagrams, we choose index 1 and delete words[1].\n  Now words = [\"abba\",\"cd\",\"cd\"].\n- Since words[2] = \"cd\" and words[1] = \"cd\" are anagrams, we choose index 2 and delete words[2].\n  Now words = [\"abba\",\"cd\"].\nWe can no longer perform any operations, so [\"abba\",\"cd\"] is the final answer."
            },
            {
                "Input": "** words = [\"a\",\"b\",\"c\",\"d\",\"e\"]",
                "Output": "** [\"a\",\"b\",\"c\",\"d\",\"e\"]",
                "Explanation": "**\nNo two adjacent strings in words are anagrams of each other, so no operations are performed."
            }
        ]
    },
    {
        "Title": "Maximum Consecutive Floors Without Special Floors",
        "slug": "maximum-consecutive-floors-without-special-floors",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** bottom = 2, top = 9, special = [4,6]",
                "Output": "** 3",
                "Explanation": "** The following are the ranges (inclusive) of consecutive floors without a special floor:\n- (2, 3) with a total amount of 2 floors.\n- (5, 5) with a total amount of 1 floor.\n- (7, 9) with a total amount of 3 floors.\nTherefore, we return the maximum number which is 3 floors."
            },
            {
                "Input": "** bottom = 6, top = 8, special = [7,6,8]",
                "Output": "** 0",
                "Explanation": "** Every floor rented is a special floor, so we return 0."
            }
        ]
    },
    {
        "Title": "Largest Combination With Bitwise AND Greater Than Zero",
        "slug": "largest-combination-with-bitwise-and-greater-than-zero",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** candidates = [16,17,71,62,12,24,14]",
                "Output": "** 4",
                "Explanation": "** The combination [16,17,62,24] has a bitwise AND of 16 & 17 & 62 & 24 = 16 > 0.\nThe size of the combination is 4.\nIt can be shown that no combination with a size greater than 4 has a bitwise AND greater than 0.\nNote that more than one combination may have the largest size.\nFor example, the combination [62,12,24,14] has a bitwise AND of 62 & 12 & 24 & 14 = 8 > 0."
            },
            {
                "Input": "** candidates = [8,8]",
                "Output": "** 2",
                "Explanation": "** The largest combination [8,8] has a bitwise AND of 8 & 8 = 8 > 0.\nThe size of the combination is 2, so we return 2."
            }
        ]
    },
    {
        "Title": "Count Integers in Intervals",
        "slug": "count-integers-in-intervals",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"CountIntervals\", \"add\", \"add\", \"count\", \"add\", \"count\"]\n[[], [2, 3], [7, 10], [], [5, 8], []]",
                "Output": "[null, null, null, 6, null, 8]",
                "Explanation": "CountIntervals countIntervals = new CountIntervals(); // initialize the object with an empty set of intervals. \ncountIntervals.add(2, 3);  // add [2, 3] to the set of intervals.\ncountIntervals.add(7, 10); // add [7, 10] to the set of intervals.\ncountIntervals.count();    // return 6\n                           // the integers 2 and 3 are present in the interval [2, 3].\n                           // the integers 7, 8, 9, and 10 are present in the interval [7, 10].\ncountIntervals.add(5, 8);  // add [5, 8] to the set of intervals.\ncountIntervals.count();    // return 8\n                           // the integers 2 and 3 are present in the interval [2, 3].\n                           // the integers 5 and 6 are present in the interval [5, 8].\n                           // the integers 7 and 8 are present in the intervals [5, 8] and [7, 10].\n                           // the integers 9 and 10 are present in the interval [7, 10]."
            }
        ]
    },
    {
        "Title": "Percentage of Letter in String",
        "slug": "percentage-of-letter-in-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"foobar\", letter = \"o\"",
                "Output": "** 33",
                "Explanation": "**\nThe percentage of characters in s that equal the letter 'o' is 2 / 6 * 100% = 33% when rounded down, so we return 33."
            },
            {
                "Input": "** s = \"jjjj\", letter = \"k\"",
                "Output": "** 0",
                "Explanation": "**\nThe percentage of characters in s that equal the letter 'k' is 0%, so we return 0."
            }
        ]
    },
    {
        "Title": "Maximum Bags With Full Capacity of Rocks",
        "slug": "maximum-bags-with-full-capacity-of-rocks",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** capacity = [2,3,4,5], rocks = [1,2,4,4], additionalRocks = 2",
                "Output": "** 3",
                "Explanation": "**\nPlace 1 rock in bag 0 and 1 rock in bag 1.\nThe number of rocks in each bag are now [2,3,4,4].\nBags 0, 1, and 2 have full capacity.\nThere are 3 bags at full capacity, so we return 3.\nIt can be shown that it is not possible to have more than 3 bags at full capacity.\nNote that there may be other ways of placing the rocks that result in an answer of 3."
            },
            {
                "Input": "** capacity = [10,2,2], rocks = [2,2,0], additionalRocks = 100",
                "Output": "** 3",
                "Explanation": "**\nPlace 8 rocks in bag 0 and 2 rocks in bag 2.\nThe number of rocks in each bag are now [10,2,2].\nBags 0, 1, and 2 have full capacity.\nThere are 3 bags at full capacity, so we return 3.\nIt can be shown that it is not possible to have more than 3 bags at full capacity.\nNote that we did not use all of the additional rocks."
            }
        ]
    },
    {
        "Title": "Minimum Lines to Represent a Line Chart",
        "slug": "minimum-lines-to-represent-a-line-chart",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** stockPrices = [[1,7],[2,6],[3,5],[4,4],[5,4],[6,3],[7,2],[8,1]]",
                "Output": "** 3",
                "Explanation": "**\nThe diagram above represents the input, with the X-axis representing the day and Y-axis representing the price.\nThe following 3 lines can be drawn to represent the line chart:\n- Line 1 (in red) from (1,7) to (4,4) passing through (1,7), (2,6), (3,5), and (4,4).\n- Line 2 (in blue) from (4,4) to (5,4).\n- Line 3 (in green) from (5,4) to (8,1) passing through (5,4), (6,3), (7,2), and (8,1).\nIt can be shown that it is not possible to represent the line chart using less than 3 lines."
            },
            {
                "Input": "** stockPrices = [[3,4],[1,2],[7,8],[2,3]]",
                "Output": "** 1",
                "Explanation": "**\nAs shown in the diagram above, the line chart can be represented with a single line."
            }
        ]
    },
    {
        "Title": "Sum of Total Strength of Wizards",
        "slug": "sum-of-total-strength-of-wizards",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** strength = [1,3,1,2]",
                "Output": "** 44",
                "Explanation": "** The following are all the contiguous groups of wizards:\n- [1] from [**1**,3,1,2] has a total strength of min([1]) * sum([1]) = 1 * 1 = 1\n- [3] from [1,**3**,1,2] has a total strength of min([3]) * sum([3]) = 3 * 3 = 9\n- [1] from [1,3,**1**,2] has a total strength of min([1]) * sum([1]) = 1 * 1 = 1\n- [2] from [1,3,1,**2**] has a total strength of min([2]) * sum([2]) = 2 * 2 = 4\n- [1,3] from [**1,3**,1,2] has a total strength of min([1,3]) * sum([1,3]) = 1 * 4 = 4\n- [3,1] from [1,**3,1**,2] has a total strength of min([3,1]) * sum([3,1]) = 1 * 4 = 4\n- [1,2] from [1,3,**1,2**] has a total strength of min([1,2]) * sum([1,2]) = 1 * 3 = 3\n- [1,3,1] from [**1,3,1**,2] has a total strength of min([1,3,1]) * sum([1,3,1]) = 1 * 5 = 5\n- [3,1,2] from [1,**3,1,2**] has a total strength of min([3,1,2]) * sum([3,1,2]) = 1 * 6 = 6\n- [1,3,1,2] from [**1,3,1,2**] has a total strength of min([1,3,1,2]) * sum([1,3,1,2]) = 1 * 7 = 7\nThe sum of all the total strengths is 1 + 9 + 1 + 4 + 4 + 4 + 3 + 5 + 6 + 7 = 44."
            },
            {
                "Input": "** strength = [5,4,6]",
                "Output": "** 213",
                "Explanation": "** The following are all the contiguous groups of wizards: \n- [5] from [**5**,4,6] has a total strength of min([5]) * sum([5]) = 5 * 5 = 25\n- [4] from [5,**4**,6] has a total strength of min([4]) * sum([4]) = 4 * 4 = 16\n- [6] from [5,4,**6**] has a total strength of min([6]) * sum([6]) = 6 * 6 = 36\n- [5,4] from [**5,4**,6] has a total strength of min([5,4]) * sum([5,4]) = 4 * 9 = 36\n- [4,6] from [5,**4,6**] has a total strength of min([4,6]) * sum([4,6]) = 4 * 10 = 40\n- [5,4,6] from [**5,4,6**] has a total strength of min([5,4,6]) * sum([5,4,6]) = 4 * 15 = 60\nThe sum of all the total strengths is 25 + 16 + 36 + 36 + 40 + 60 = 213."
            }
        ]
    },
    {
        "Title": "Check if Number Has Equal Digit Count and Digit Value",
        "slug": "check-if-number-has-equal-digit-count-and-digit-value",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num = \"1210\"",
                "Output": "** true",
                "Explanation": "**\nnum[0] = '1'. The digit 0 occurs once in num.\nnum[1] = '2'. The digit 1 occurs twice in num.\nnum[2] = '1'. The digit 2 occurs once in num.\nnum[3] = '0'. The digit 3 occurs zero times in num.\nThe condition holds true for every index in \"1210\", so return true."
            },
            {
                "Input": "** num = \"030\"",
                "Output": "** false",
                "Explanation": "**\nnum[0] = '0'. The digit 0 should occur zero times, but actually occurs twice in num.\nnum[1] = '3'. The digit 1 should occur three times, but actually occurs zero times in num.\nnum[2] = '0'. The digit 2 occurs zero times in num.\nThe indices 0 and 1 both violate the condition, so return false."
            }
        ]
    },
    {
        "Title": "Sender With Largest Word Count",
        "slug": "sender-with-largest-word-count",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** messages = [\"Hello userTwooo\",\"Hi userThree\",\"Wonderful day Alice\",\"Nice day userThree\"], senders = [\"Alice\",\"userTwo\",\"userThree\",\"Alice\"]",
                "Output": "** \"Alice\"",
                "Explanation": "** Alice sends a total of 2 + 3 = 5 words.\nuserTwo sends a total of 2 words.\nuserThree sends a total of 3 words.\nSince Alice has the largest word count, we return \"Alice\"."
            },
            {
                "Input": "** messages = [\"How is leetcode for everyone\",\"Leetcode is useful for practice\"], senders = [\"Bob\",\"Charlie\"]",
                "Output": "** \"Charlie\"",
                "Explanation": "** Bob sends a total of 5 words.\nCharlie sends a total of 5 words.\nSince there is a tie for the largest word count, we return the sender with the lexicographically larger name, Charlie."
            }
        ]
    },
    {
        "Title": "Maximum Total Importance of Roads",
        "slug": "maximum-total-importance-of-roads",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 5, roads = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]",
                "Output": "** 43",
                "Explanation": "** The figure above shows the country and the assigned values of [2,4,5,3,1].\n- The road (0,1) has an importance of 2 + 4 = 6.\n- The road (1,2) has an importance of 4 + 5 = 9.\n- The road (2,3) has an importance of 5 + 3 = 8.\n- The road (0,2) has an importance of 2 + 5 = 7.\n- The road (1,3) has an importance of 4 + 3 = 7.\n- The road (2,4) has an importance of 5 + 1 = 6.\nThe total importance of all roads is 6 + 9 + 8 + 7 + 7 + 6 = 43.\nIt can be shown that we cannot obtain a greater total importance than 43."
            },
            {
                "Input": "** n = 5, roads = [[0,3],[2,4],[1,3]]",
                "Output": "** 20",
                "Explanation": "** The figure above shows the country and the assigned values of [4,3,2,5,1].\n- The road (0,3) has an importance of 4 + 5 = 9.\n- The road (2,4) has an importance of 2 + 1 = 3.\n- The road (1,3) has an importance of 3 + 5 = 8.\nThe total importance of all roads is 9 + 3 + 8 = 20.\nIt can be shown that we cannot obtain a greater total importance than 20."
            }
        ]
    },
    {
        "Title": "Booking Concert Tickets in Groups",
        "slug": "booking-concert-tickets-in-groups",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"BookMyShow\", \"gather\", \"gather\", \"scatter\", \"scatter\"]\n[[2, 5], [4, 0], [2, 0], [5, 1], [5, 1]]",
                "Output": "[null, [0, 0], [], true, false]",
                "Explanation": "BookMyShow bms = new BookMyShow(2, 5); // There are 2 rows with 5 seats each \nbms.gather(4, 0); // return [0, 0]\n                  // The group books seats [0, 3] of row 0. \nbms.gather(2, 0); // return []\n                  // There is only 1 seat left in row 0,\n                  // so it is not possible to book 2 consecutive seats. \nbms.scatter(5, 1); // return True\n                   // The group books seat 4 of row 0 and seats [0, 3] of row 1. \nbms.scatter(5, 1); // return False\n                   // There is only one seat left in the hall."
            }
        ]
    },
    {
        "Title": "Rearrange Characters to Make Target String",
        "slug": "rearrange-characters-to-make-target-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"ilovecodingonleetcode\", target = \"code\"",
                "Output": "** 2",
                "Explanation": "**\nFor the first copy of \"code\", take the letters at indices 4, 5, 6, and 7.\nFor the second copy of \"code\", take the letters at indices 17, 18, 19, and 20.\nThe strings that are formed are \"ecod\" and \"code\" which can both be rearranged into \"code\".\nWe can make at most two copies of \"code\", so we return 2."
            },
            {
                "Input": "** s = \"abcba\", target = \"abc\"",
                "Output": "** 1",
                "Explanation": "**\nWe can make one copy of \"abc\" by taking the letters at indices 0, 1, and 2.\nWe can make at most one copy of \"abc\", so we return 1.\nNote that while there is an extra 'a' and 'b' at indices 3 and 4, we cannot reuse the letter 'c' at index 2, so we cannot make a second copy of \"abc\"."
            },
            {
                "Input": "** s = \"abbaccaddaeea\", target = \"aaaaa\"",
                "Output": "** 1",
                "Explanation": "**\nWe can make one copy of \"aaaaa\" by taking the letters at indices 0, 3, 6, 9, and 12.\nWe can make at most one copy of \"aaaaa\", so we return 1."
            }
        ]
    },
    {
        "Title": "Apply Discount to Prices",
        "slug": "apply-discount-to-prices",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** sentence = \"there are $1 $2 and 5$ candies in the shop\", discount = 50",
                "Output": "** \"there are $0.50 $1.00 and 5$ candies in the shop\"",
                "Explanation": "** \nThe words which represent prices are \"$1\" and \"$2\". \n- A 50% discount on \"$1\" yields \"$0.50\", so \"$1\" is replaced by \"$0.50\".\n- A 50% discount on \"$2\" yields \"$1\". Since we need to have exactly 2 decimal places after a price, we replace \"$2\" with \"$1.00\"."
            },
            {
                "Input": "** sentence = \"1 2 $3 4 $5 $6 7 8$ $9 $10$\", discount = 100",
                "Output": "** \"1 2 $0.00 4 $0.00 $0.00 7 8$ $0.00 $10$\"",
                "Explanation": "** \nApplying a 100% discount on any price will result in 0.\nThe words representing prices are \"$3\", \"$5\", \"$6\", and \"$9\".\nEach of them is replaced by \"$0.00\"."
            }
        ]
    },
    {
        "Title": "Steps to Make Array Non-decreasing",
        "slug": "steps-to-make-array-non-decreasing",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [5,3,4,4,7,3,6,11,8,5,11]",
                "Output": "** 3",
                "Explanation": "** The following are the steps performed:\n- Step 1: [5,**3**,4,4,7,**3**,6,11,**8**,**5**,11] becomes [5,4,4,7,6,11,11]\n- Step 2: [5,**4**,4,7,**6**,11,11] becomes [5,4,7,11,11]\n- Step 3: [5,**4**,7,11,11] becomes [5,7,11,11]\n[5,7,11,11] is a non-decreasing array. Therefore, we return 3."
            },
            {
                "Input": "** nums = [4,5,7,7,13]",
                "Output": "** 0",
                "Explanation": "** nums is already a non-decreasing array. Therefore, we return 0."
            }
        ]
    },
    {
        "Title": "Minimum Obstacle Removal to Reach Corner",
        "slug": "minimum-obstacle-removal-to-reach-corner",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [[0,1,1],[1,1,0],[1,1,0]]",
                "Output": "** 2",
                "Explanation": "** We can remove the obstacles at (0, 1) and (0, 2) to create a path from (0, 0) to (2, 2).\nIt can be shown that we need to remove at least 2 obstacles, so we return 2.\nNote that there may be other ways to remove 2 obstacles to create a path."
            },
            {
                "Input": "** grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]]",
                "Output": "** 0",
                "Explanation": "** We can move from (0, 0) to (2, 4) without removing any obstacles, so we return 0."
            }
        ]
    },
    {
        "Title": "Min Max Game",
        "slug": "min-max-game",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,3,5,2,4,8,2,2]",
                "Output": "** 1",
                "Explanation": "** The following arrays are the results of applying the algorithm repeatedly.\nFirst: nums = [1,5,4,2]\nSecond: nums = [1,4]\nThird: nums = [1]\n1 is the last remaining number, so we return 1."
            }
        ]
    },
    {
        "Title": "Partition Array Such That Maximum Difference Is K",
        "slug": "partition-array-such-that-maximum-difference-is-k",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,6,1,2,5], k = 2",
                "Output": "** 2",
                "Explanation": "**\nWe can partition nums into the two subsequences [3,1,2] and [6,5].\nThe difference between the maximum and minimum value in the first subsequence is 3 - 1 = 2.\nThe difference between the maximum and minimum value in the second subsequence is 6 - 5 = 1.\nSince two subsequences were created, we return 2. It can be shown that 2 is the minimum number of subsequences needed."
            },
            {
                "Input": "** nums = [1,2,3], k = 1",
                "Output": "** 2",
                "Explanation": "**\nWe can partition nums into the two subsequences [1,2] and [3].\nThe difference between the maximum and minimum value in the first subsequence is 2 - 1 = 1.\nThe difference between the maximum and minimum value in the second subsequence is 3 - 3 = 0.\nSince two subsequences were created, we return 2. Note that another optimal solution is to partition nums into the two subsequences [1] and [2,3]."
            },
            {
                "Input": "** nums = [2,2,4,5], k = 0",
                "Output": "** 3",
                "Explanation": "**\nWe can partition nums into the three subsequences [2,2], [4], and [5].\nThe difference between the maximum and minimum value in the first subsequences is 2 - 2 = 0.\nThe difference between the maximum and minimum value in the second subsequences is 4 - 4 = 0.\nThe difference between the maximum and minimum value in the third subsequences is 5 - 5 = 0.\nSince three subsequences were created, we return 3. It can be shown that 3 is the minimum number of subsequences needed."
            }
        ]
    },
    {
        "Title": "Replace Elements in an Array",
        "slug": "replace-elements-in-an-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,4,6], operations = [[1,3],[4,7],[6,1]]",
                "Output": "** [3,2,7,1]",
                "Explanation": "** We perform the following operations on nums:\n- Replace the number 1 with 3. nums becomes [**3**,2,4,6].\n- Replace the number 4 with 7. nums becomes [3,2,**7**,6].\n- Replace the number 6 with 1. nums becomes [3,2,7,**1**].\nWe return the final array [3,2,7,1]."
            },
            {
                "Input": "** nums = [1,2], operations = [[1,3],[2,1],[3,2]]",
                "Output": "** [2,1]",
                "Explanation": "** We perform the following operations to nums:\n- Replace the number 1 with 3. nums becomes [**3**,2].\n- Replace the number 2 with 1. nums becomes [3,**1**].\n- Replace the number 3 with 2. nums becomes [**2**,1].\nWe return the array [2,1]."
            }
        ]
    },
    {
        "Title": "Design a Text Editor",
        "slug": "design-a-text-editor",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"TextEditor\", \"addText\", \"deleteText\", \"addText\", \"cursorRight\", \"cursorLeft\", \"deleteText\", \"cursorLeft\", \"cursorRight\"]\n[[], [\"leetcode\"], [4], [\"practice\"], [3], [8], [10], [2], [6]]",
                "Output": "[null, null, 4, null, \"etpractice\", \"leet\", 4, \"\", \"practi\"]",
                "Explanation": "TextEditor textEditor = new TextEditor(); // The current text is \"|\". (The '|' character represents the cursor)\ntextEditor.addText(\"leetcode\"); // The current text is \"leetcode|\".\ntextEditor.deleteText(4); // return 4\n                          // The current text is \"leet|\". \n                          // 4 characters were deleted.\ntextEditor.addText(\"practice\"); // The current text is \"leetpractice|\". \ntextEditor.cursorRight(3); // return \"etpractice\"\n                           // The current text is \"leetpractice|\". \n                           // The cursor cannot be moved beyond the actual text and thus did not move.\n                           // \"etpractice\" is the last 10 characters to the left of the cursor.\ntextEditor.cursorLeft(8); // return \"leet\"\n                          // The current text is \"leet|practice\".\n                          // \"leet\" is the last min(10, 4) = 4 characters to the left of the cursor.\ntextEditor.deleteText(10); // return 4\n                           // The current text is \"|practice\".\n                           // Only 4 characters were deleted.\ntextEditor.cursorLeft(2); // return \"\"\n                          // The current text is \"|practice\".\n                          // The cursor cannot be moved beyond the actual text and thus did not move. \n                          // \"\" is the last min(10, 0) = 0 characters to the left of the cursor.\ntextEditor.cursorRight(6); // return \"practi\"\n                           // The current text is \"practi|ce\".\n                           // \"practi\" is the last min(10, 6) = 6 characters to the left of the cursor."
            }
        ]
    },
    {
        "Title": "Strong Password Checker II",
        "slug": "strong-password-checker-ii",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** password = \"IloveLe3tcode!\"",
                "Output": "** true",
                "Explanation": "** The password meets all the requirements. Therefore, we return true."
            },
            {
                "Input": "** password = \"Me+You--IsMyDream\"",
                "Output": "** false",
                "Explanation": "** The password does not contain a digit and also contains 2 of the same character in adjacent positions. Therefore, we return false."
            },
            {
                "Input": "** password = \"1aB!\"",
                "Output": "** false",
                "Explanation": "** The password does not meet the length requirement. Therefore, we return false."
            }
        ]
    },
    {
        "Title": "Successful Pairs of Spells and Potions",
        "slug": "successful-pairs-of-spells-and-potions",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** spells = [5,1,3], potions = [1,2,3,4,5], success = 7",
                "Output": "** [4,0,3]",
                "Explanation": "**\n- 0th spell: 5 * [1,2,3,4,5] = [5,**10**,**15**,**20**,**25**]. 4 pairs are successful.\n- 1st spell: 1 * [1,2,3,4,5] = [1,2,3,4,5]. 0 pairs are successful.\n- 2nd spell: 3 * [1,2,3,4,5] = [3,6,**9**,**12**,**15**]. 3 pairs are successful.\nThus, [4,0,3] is returned."
            },
            {
                "Input": "** spells = [3,1,2], potions = [8,5,8], success = 16",
                "Output": "** [2,0,2]",
                "Explanation": "**\n- 0th spell: 3 * [8,5,8] = [**24**,15,**24**]. 2 pairs are successful.\n- 1st spell: 1 * [8,5,8] = [8,5,8]. 0 pairs are successful. \n- 2nd spell: 2 * [8,5,8] = [**16**,10,**16**]. 2 pairs are successful. \nThus, [2,0,2] is returned."
            }
        ]
    },
    {
        "Title": "Match Substring After Replacement",
        "slug": "match-substring-after-replacement",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"fool3e7bar\", sub = \"leet\", mappings = [[\"e\",\"3\"],[\"t\",\"7\"],[\"t\",\"8\"]]",
                "Output": "** true",
                "Explanation": "** Replace the first 'e' in sub with '3' and 't' in sub with '7'.\nNow sub = \"l3e7\" is a substring of s, so we return true."
            },
            {
                "Input": "** s = \"fooleetbar\", sub = \"f00l\", mappings = [[\"o\",\"0\"]]",
                "Output": "** false",
                "Explanation": "** The string \"f00l\" is not a substring of s and no replacements can be made.\nNote that we cannot replace '0' with 'o'."
            },
            {
                "Input": "** s = \"Fool33tbaR\", sub = \"leetd\", mappings = [[\"e\",\"3\"],[\"t\",\"7\"],[\"t\",\"8\"],[\"d\",\"b\"],[\"p\",\"b\"]]",
                "Output": "** true",
                "Explanation": "** Replace the first and second 'e' in sub with '3' and 'd' in sub with 'b'.\nNow sub = \"l33tb\" is a substring of s, so we return true."
            }
        ]
    },
    {
        "Title": "Count Subarrays With Score Less Than K",
        "slug": "count-subarrays-with-score-less-than-k",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [2,1,4,3,5], k = 10",
                "Output": "** 6",
                "Explanation": "**\nThe 6 subarrays having scores less than 10 are:\n- [2] with score 2 * 1 = 2.\n- [1] with score 1 * 1 = 1.\n- [4] with score 4 * 1 = 4.\n- [3] with score 3 * 1 = 3. \n- [5] with score 5 * 1 = 5.\n- [2,1] with score (2 + 1) * 2 = 6.\nNote that subarrays such as [1,4] and [4,3,5] are not considered because their scores are 10 and 36 respectively, while we need scores strictly less than 10."
            },
            {
                "Input": "** nums = [1,1,1], k = 5",
                "Output": "** 5",
                "Explanation": "**\nEvery subarray except [1,1,1] has a score less than 5.\n[1,1,1] has a score (1 + 1 + 1) * 3 = 9, which is greater than 5.\nThus, there are 5 subarrays having scores less than 5."
            }
        ]
    },
    {
        "Title": "Calculate Amount Paid in Taxes",
        "slug": "calculate-amount-paid-in-taxes",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** brackets = [[3,50],[7,10],[12,25]], income = 10",
                "Output": "** 2.65000",
                "Explanation": "**\nBased on your income, you have 3 dollars in the 1st tax bracket, 4 dollars in the 2nd tax bracket, and 3 dollars in the 3rd tax bracket.\nThe tax rate for the three tax brackets is 50%, 10%, and 25%, respectively.\nIn total, you pay $3 * 50% + $4 * 10% + $3 * 25% = $2.65 in taxes."
            },
            {
                "Input": "** brackets = [[1,0],[4,25],[5,50]], income = 2",
                "Output": "** 0.25000",
                "Explanation": "**\nBased on your income, you have 1 dollar in the 1st tax bracket and 1 dollar in the 2nd tax bracket.\nThe tax rate for the two tax brackets is 0% and 25%, respectively.\nIn total, you pay $1 * 0% + $1 * 25% = $0.25 in taxes."
            },
            {
                "Input": "** brackets = [[2,50]], income = 0",
                "Output": "** 0.00000",
                "Explanation": "**\nYou have no income to tax, so you have to pay a total of $0 in taxes."
            }
        ]
    },
    {
        "Title": "Minimum Path Cost in a Grid",
        "slug": "minimum-path-cost-in-a-grid",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[5,3],[4,0],[2,1]], moveCost = [[9,8],[1,5],[10,12],[18,6],[2,4],[14,3]]",
                "Output": "** 17",
                "Explanation": "** The path with the minimum possible cost is the path 5 -> 0 -> 1.\n- The sum of the values of cells visited is 5 + 0 + 1 = 6.\n- The cost of moving from 5 to 0 is 3.\n- The cost of moving from 0 to 1 is 8.\nSo the total cost of the path is 6 + 3 + 8 = 17."
            }
        ]
    },
    {
        "Title": "Fair Distribution of Cookies",
        "slug": "fair-distribution-of-cookies",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** cookies = [8,15,10,20,8], k = 2",
                "Output": "** 31",
                "Explanation": "** One optimal distribution is [8,15,8] and [10,20]\n- The 1st child receives [8,15,8] which has a total of 8 + 15 + 8 = 31 cookies.\n- The 2nd child receives [10,20] which has a total of 10 + 20 = 30 cookies.\nThe unfairness of the distribution is max(31,30) = 31.\nIt can be shown that there is no distribution with an unfairness less than 31."
            },
            {
                "Input": "** cookies = [6,1,3,2,2,4,1,2], k = 3",
                "Output": "** 7",
                "Explanation": "** One optimal distribution is [6,1], [3,2,2], and [4,1,2]\n- The 1st child receives [6,1] which has a total of 6 + 1 = 7 cookies.\n- The 2nd child receives [3,2,2] which has a total of 3 + 2 + 2 = 7 cookies.\n- The 3rd child receives [4,1,2] which has a total of 4 + 1 + 2 = 7 cookies.\nThe unfairness of the distribution is max(7,7,7) = 7.\nIt can be shown that there is no distribution with an unfairness less than 7."
            }
        ]
    },
    {
        "Title": "Naming a Company",
        "slug": "naming-a-company",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** ideas = [\"coffee\",\"donuts\",\"time\",\"toffee\"]",
                "Output": "** 6",
                "Explanation": "** The following selections are valid:\n- (\"coffee\", \"donuts\"): The company name created is \"doffee conuts\".\n- (\"donuts\", \"coffee\"): The company name created is \"conuts doffee\".\n- (\"donuts\", \"time\"): The company name created is \"tonuts dime\".\n- (\"donuts\", \"toffee\"): The company name created is \"tonuts doffee\".\n- (\"time\", \"donuts\"): The company name created is \"dime tonuts\".\n- (\"toffee\", \"donuts\"): The company name created is \"doffee tonuts\".\nTherefore, there are a total of 6 distinct company names.\n\nThe following are some examples of invalid selections:\n- (\"coffee\", \"time\"): The name \"toffee\" formed after swapping already exists in the original array.\n- (\"time\", \"toffee\"): Both names are still the same after swapping and exist in the original array.\n- (\"coffee\", \"toffee\"): Both names formed after swapping already exist in the original array."
            },
            {
                "Input": "** ideas = [\"lack\",\"back\"]",
                "Output": "** 0",
                "Explanation": "** There are no valid selections. Therefore, 0 is returned."
            }
        ]
    },
    {
        "Title": "Greatest English Letter in Upper and Lower Case",
        "slug": "greatest-english-letter-in-upper-and-lower-case",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"l**Ee**TcOd**E**\"",
                "Output": "** \"E\"",
                "Explanation": "**\nThe letter 'E' is the only letter to appear in both lower and upper case."
            },
            {
                "Input": "** s = \"a**rR**AzFif\"",
                "Output": "** \"R\"",
                "Explanation": "**\nThe letter 'R' is the greatest letter to appear in both lower and upper case.\nNote that 'A' and 'F' also appear in both lower and upper case, but 'R' is greater than 'F' or 'A'."
            },
            {
                "Input": "** s = \"AbCdEfGhIjK\"",
                "Output": "** \"\"",
                "Explanation": "**\nThere is no letter that appears in both lower and upper case."
            }
        ]
    },
    {
        "Title": "Sum of Numbers With Units Digit K",
        "slug": "sum-of-numbers-with-units-digit-k",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** num = 58, k = 9",
                "Output": "** 2",
                "Explanation": "**\nOne valid set is [9,49], as the sum is 58 and each integer has a units digit of 9.\nAnother valid set is [19,39].\nIt can be shown that 2 is the minimum possible size of a valid set."
            },
            {
                "Input": "** num = 37, k = 2",
                "Output": "** -1",
                "Explanation": "** It is not possible to obtain a sum of 37 using only integers that have a units digit of 2."
            },
            {
                "Input": "** num = 0, k = 7",
                "Output": "** 0",
                "Explanation": "** The sum of an empty set is considered 0."
            }
        ]
    },
    {
        "Title": "Longest Binary Subsequence Less Than or Equal to K",
        "slug": "longest-binary-subsequence-less-than-or-equal-to-k",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"1001010\", k = 5",
                "Output": "** 5",
                "Explanation": "** The longest subsequence of s that makes up a binary number less than or equal to 5 is \"00010\", as this number is equal to 2 in decimal.\nNote that \"00100\" and \"00101\" are also possible, which are equal to 4 and 5 in decimal, respectively.\nThe length of this subsequence is 5, so 5 is returned."
            },
            {
                "Input": "** s = \"00101001\", k = 1",
                "Output": "** 6",
                "Explanation": "** \"000001\" is the longest subsequence of s that makes up a binary number less than or equal to 1, as this number is equal to 1 in decimal.\nThe length of this subsequence is 6, so 6 is returned."
            }
        ]
    },
    {
        "Title": "Selling Pieces of Wood",
        "slug": "selling-pieces-of-wood",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** m = 3, n = 5, prices = [[1,4,2],[2,2,7],[2,1,3]]",
                "Output": "** 19",
                "Explanation": "** The diagram above shows a possible scenario. It consists of:\n- 2 pieces of wood shaped 2 x 2, selling for a price of 2 * 7 = 14.\n- 1 piece of wood shaped 2 x 1, selling for a price of 1 * 3 = 3.\n- 1 piece of wood shaped 1 x 4, selling for a price of 1 * 2 = 2.\nThis obtains a total of 14 + 3 + 2 = 19 money earned.\nIt can be shown that 19 is the maximum amount of money that can be earned."
            },
            {
                "Input": "** m = 4, n = 6, prices = [[3,2,10],[1,4,2],[4,1,3]]",
                "Output": "** 32",
                "Explanation": "** The diagram above shows a possible scenario. It consists of:\n- 3 pieces of wood shaped 3 x 2, selling for a price of 3 * 10 = 30.\n- 1 piece of wood shaped 1 x 4, selling for a price of 1 * 2 = 2.\nThis obtains a total of 30 + 2 = 32 money earned.\nIt can be shown that 32 is the maximum amount of money that can be earned.\nNotice that we cannot rotate the 1 x 4 piece of wood to obtain a 4 x 1 piece of wood."
            }
        ]
    },
    {
        "Title": "Count Asterisks",
        "slug": "count-asterisks",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"l|*e*et|c**o|*de|\"",
                "Output": "** 2",
                "Explanation": "** The considered characters are underlined: \"l|*e*et|c\\*\\*o|*de|\".\nThe characters between the first and second '|' are excluded from the answer.\nAlso, the characters between the third and fourth '|' are excluded from the answer.\nThere are 2 asterisks considered. Therefore, we return 2."
            },
            {
                "Input": "** s = \"iamprogrammer\"",
                "Output": "** 0",
                "Explanation": "** In this example, there are no asterisks in s. Therefore, we return 0."
            },
            {
                "Input": "** s = \"yo|uar|e**|b|e***au|tifu|l\"",
                "Output": "** 5",
                "Explanation": "** The considered characters are underlined: \"yo|uar|e\\*\\*|b|e\\*\\*\\*au|tifu|l\". There are 5 asterisks considered. Therefore, we return 5."
            }
        ]
    },
    {
        "Title": "Count Unreachable Pairs of Nodes in an Undirected Graph",
        "slug": "count-unreachable-pairs-of-nodes-in-an-undirected-graph",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3, edges = [[0,1],[0,2],[1,2]]",
                "Output": "** 0",
                "Explanation": "** There are no pairs of nodes that are unreachable from each other. Therefore, we return 0."
            },
            {
                "Input": "** n = 7, edges = [[0,2],[0,5],[2,4],[1,6],[5,4]]",
                "Output": "** 14",
                "Explanation": "** There are 14 pairs of nodes that are unreachable from each other:\n[[0,1],[0,3],[0,6],[1,2],[1,3],[1,4],[1,5],[2,3],[2,6],[3,4],[3,5],[3,6],[4,6],[5,6]].\nTherefore, we return 14."
            }
        ]
    },
    {
        "Title": "Maximum XOR After Operations ",
        "slug": "maximum-xor-after-operations",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,2,4,6]",
                "Output": "** 7",
                "Explanation": "** Apply the operation with x = 4 and i = 3, num[3] = 6 AND (6 XOR 4) = 6 AND 2 = 2.\nNow, nums = [3, 2, 4, 2] and the bitwise XOR of all the elements = 3 XOR 2 XOR 4 XOR 2 = 7.\nIt can be shown that 7 is the maximum possible bitwise XOR.\nNote that other operations may be used to achieve a bitwise XOR of 7."
            },
            {
                "Input": "** nums = [1,2,3,9,2]",
                "Output": "** 11",
                "Explanation": "** Apply the operation zero times.\nThe bitwise XOR of all the elements = 1 XOR 2 XOR 3 XOR 9 XOR 2 = 11.\nIt can be shown that 11 is the maximum possible bitwise XOR."
            }
        ]
    },
    {
        "Title": "Number of Distinct Roll Sequences",
        "slug": "number-of-distinct-roll-sequences",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** 184",
                "Explanation": "** Some of the possible sequences are (1, 2, 3, 4), (6, 1, 2, 3), (1, 2, 3, 1), etc.\nSome invalid sequences are (1, 2, 1, 3), (1, 2, 3, 6).\n(1, 2, 1, 3) is invalid since the first and third roll have an equal value and abs(1 - 3) = 2 (i and j are 1-indexed).\n(1, 2, 3, 6) is invalid since the greatest common divisor of 3 and 6 = 3.\nThere are a total of 184 distinct sequences possible, so we return 184."
            },
            {
                "Input": "** n = 2",
                "Output": "** 22",
                "Explanation": "** Some of the possible sequences are (1, 2), (2, 1), (3, 2).\nSome invalid sequences are (3, 6), (2, 4) since the greatest common divisor is not equal to 1.\nThere are a total of 22 distinct sequences possible, so we return 22."
            }
        ]
    },
    {
        "Title": "Check if Matrix Is X-Matrix",
        "slug": "check-if-matrix-is-x-matrix",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** grid = [[2,0,0,1],[0,3,1,0],[0,5,2,0],[4,0,0,2]]",
                "Output": "** true",
                "Explanation": "** Refer to the diagram above. \nAn X-Matrix should have the green elements (diagonals) be non-zero and the red elements be 0.\nThus, grid is an X-Matrix."
            },
            {
                "Input": "** grid = [[5,7,0],[0,3,1],[0,5,0]]",
                "Output": "** false",
                "Explanation": "** Refer to the diagram above.\nAn X-Matrix should have the green elements (diagonals) be non-zero and the red elements be 0.\nThus, grid is not an X-Matrix."
            }
        ]
    },
    {
        "Title": "Count Number of Ways to Place Houses",
        "slug": "count-number-of-ways-to-place-houses",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 2",
                "Output": "** 9",
                "Explanation": "** The 9 possible arrangements are shown in the diagram above."
            }
        ]
    },
    {
        "Title": "Maximum Score Of Spliced Array",
        "slug": "maximum-score-of-spliced-array",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums1 = [60,60,60], nums2 = [10,90,10]",
                "Output": "** 210",
                "Explanation": "** Choosing left = 1 and right = 1, we have nums1 = [60,**90**,60] and nums2 = [10,**60**,10].\nThe score is max(sum(nums1), sum(nums2)) = max(210, 80) = 210."
            },
            {
                "Input": "** nums1 = [20,40,20,70,30], nums2 = [50,20,50,40,20]",
                "Output": "** 220",
                "Explanation": "** Choosing left = 3, right = 4, we have nums1 = [20,40,20,**40,20**] and nums2 = [50,20,50,**70,30**].\nThe score is max(sum(nums1), sum(nums2)) = max(140, 220) = 220."
            },
            {
                "Input": "** nums1 = [7,11,13], nums2 = [1,1,1]",
                "Output": "** 31",
                "Explanation": "** We choose not to swap any subarray.\nThe score is max(sum(nums1), sum(nums2)) = max(31, 3) = 31."
            }
        ]
    },
    {
        "Title": "Minimum Score After Removals on a Tree",
        "slug": "minimum-score-after-removals-on-a-tree",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,5,5,4,11], edges = [[0,1],[1,2],[1,3],[3,4]]",
                "Output": "** 9",
                "Explanation": "** The diagram above shows a way to make a pair of removals.\n- The 1st component has nodes [1,3,4] with values [5,4,11]. Its XOR value is 5 ^ 4 ^ 11 = 10.\n- The 2nd component has node [0] with value [1]. Its XOR value is 1 = 1.\n- The 3rd component has node [2] with value [5]. Its XOR value is 5 = 5.\nThe score is the difference between the largest and smallest XOR value which is 10 - 1 = 9.\nIt can be shown that no other pair of removals will obtain a smaller score than 9."
            },
            {
                "Input": "** nums = [5,5,2,4,4,2], edges = [[0,1],[1,2],[5,2],[4,3],[1,3]]",
                "Output": "** 0",
                "Explanation": "** The diagram above shows a way to make a pair of removals.\n- The 1st component has nodes [3,4] with values [4,4]. Its XOR value is 4 ^ 4 = 0.\n- The 2nd component has nodes [1,0] with values [5,5]. Its XOR value is 5 ^ 5 = 0.\n- The 3rd component has nodes [2,5] with values [2,2]. Its XOR value is 2 ^ 2 = 0.\nThe score is the difference between the largest and smallest XOR value which is 0 - 0 = 0.\nWe cannot obtain a smaller score than 0."
            }
        ]
    },
    {
        "Title": "Decode the Message",
        "slug": "decode-the-message",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** key = \"the quick brown fox jumps over the lazy dog\", message = \"vkbs bs t suepuv\"",
                "Output": "** \"this is a secret\"",
                "Explanation": "** The diagram above shows the substitution table.\nIt is obtained by taking the first appearance of each letter in \"**the** **quick** **brown** **f**o**x** **j**u**mps** o**v**er the **lazy** **d**o**g**\"."
            },
            {
                "Input": "** key = \"eljuxhpwnyrdgtqkviszcfmabo\", message = \"zwx hnfx lqantp mnoeius ycgk vcnjrdb\"",
                "Output": "** \"the five boxing wizards jump quickly\"",
                "Explanation": "** The diagram above shows the substitution table.\nIt is obtained by taking the first appearance of each letter in \"**eljuxhpwnyrdgtqkviszcfmabo**\"."
            }
        ]
    },
    {
        "Title": "Spiral Matrix IV",
        "slug": "spiral-matrix-iv",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** m = 3, n = 5, head = [3,0,2,6,8,1,7,9,4,2,5,5,0]",
                "Output": "** [[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]]",
                "Explanation": "** The diagram above shows how the values are printed in the matrix.\nNote that the remaining spaces in the matrix are filled with -1."
            },
            {
                "Input": "** m = 1, n = 4, head = [0,1,2]",
                "Output": "** [[0,1,2,-1]]",
                "Explanation": "** The diagram above shows how the values are printed from left to right in the matrix.\nThe last space in the matrix is set to -1."
            }
        ]
    },
    {
        "Title": "Number of People Aware of a Secret",
        "slug": "number-of-people-aware-of-a-secret",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 6, delay = 2, forget = 4",
                "Output": "** 5",
                "Explanation": "**\nDay 1: Suppose the first person is named A. (1 person)\nDay 2: A is the only person who knows the secret. (1 person)\nDay 3: A shares the secret with a new person, B. (2 people)\nDay 4: A shares the secret with a new person, C. (3 people)\nDay 5: A forgets the secret, and B shares the secret with a new person, D. (3 people)\nDay 6: B shares the secret with E, and C shares the secret with F. (5 people)"
            },
            {
                "Input": "** n = 4, delay = 1, forget = 3",
                "Output": "** 6",
                "Explanation": "**\nDay 1: The first person is named A. (1 person)\nDay 2: A shares the secret with B. (2 people)\nDay 3: A and B share the secret with 2 new people, C and D. (4 people)\nDay 4: A forgets the secret. B, C, and D share the secret with 3 new people. (6 people)"
            }
        ]
    },
    {
        "Title": "Number of Increasing Paths in a Grid",
        "slug": "number-of-increasing-paths-in-a-grid",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [[1,1],[3,4]]",
                "Output": "** 8",
                "Explanation": "** The strictly increasing paths are:\n- Paths with length 1: [1], [1], [3], [4].\n- Paths with length 2: [1 -> 3], [1 -> 4], [3 -> 4].\n- Paths with length 3: [1 -> 3 -> 4].\nThe total number of paths is 4 + 3 + 1 = 8."
            }
        ]
    },
    {
        "Title": "Evaluate Boolean Binary Tree",
        "slug": "evaluate-boolean-binary-tree",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** root = [2,1,3,null,null,0,1]",
                "Output": "** true",
                "Explanation": "** The above diagram illustrates the evaluation process.\nThe AND node evaluates to False AND True = False.\nThe OR node evaluates to True OR False = True.\nThe root node evaluates to True, so we return true."
            }
        ]
    },
    {
        "Title": "The Latest Time to Catch a Bus",
        "slug": "the-latest-time-to-catch-a-bus",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** buses = [10,20], passengers = [2,17,18,19], capacity = 2",
                "Output": "** 16",
                "Explanation": "** Suppose you arrive at time 16.\nAt time 10, the first bus departs with the 0th passenger. \nAt time 20, the second bus departs with you and the 1st passenger.\nNote that you may not arrive at the same time as another passenger, which is why you must arrive before the 1st passenger to catch the bus."
            },
            {
                "Input": "** buses = [20,30,10], passengers = [19,13,26,4,25,11,21], capacity = 2",
                "Output": "** 20",
                "Explanation": "** Suppose you arrive at time 20.\nAt time 10, the first bus departs with the 3rd passenger. \nAt time 20, the second bus departs with the 5th and 1st passengers.\nAt time 30, the third bus departs with the 0th passenger and you.\nNotice if you had arrived any later, then the 6th passenger would have taken your seat on the third bus."
            }
        ]
    },
    {
        "Title": "Minimum Sum of Squared Difference",
        "slug": "minimum-sum-of-squared-difference",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums1 = [1,2,3,4], nums2 = [2,10,20,19], k1 = 0, k2 = 0",
                "Output": "** 579",
                "Explanation": "** The elements in nums1 and nums2 cannot be modified because k1 = 0 and k2 = 0. \nThe sum of square difference will be: (1 - 2)2 + (2 - 10)2 + (3 - 20)2 + (4 - 19)2\u00a0= 579."
            },
            {
                "Input": "** nums1 = [1,4,10,12], nums2 = [5,8,6,9], k1 = 1, k2 = 1",
                "Output": "** 43",
                "Explanation": "** One way to obtain the minimum sum of square difference is: \n- Increase nums1[0] once.\n- Increase nums2[2] once.\nThe minimum of the sum of square difference will be: \n(2 - 5)2 + (4 - 8)2 + (10 - 7)2 + (12 - 9)2\u00a0= 43.\nNote that, there are other ways to obtain the minimum of the sum of square difference, but there is no way to obtain a sum smaller than 43."
            }
        ]
    },
    {
        "Title": "Subarray With Elements Greater Than Varying Threshold",
        "slug": "subarray-with-elements-greater-than-varying-threshold",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,3,4,3,1], threshold = 6",
                "Output": "** 3",
                "Explanation": "** The subarray [3,4,3] has a size of 3, and every element is greater than 6 / 3 = 2.\nNote that this is the only valid subarray."
            },
            {
                "Input": "** nums = [6,5,6,5,8], threshold = 7",
                "Output": "** 1",
                "Explanation": "** The subarray [8] has a size of 1, and 8 > 7 / 1 = 7. So 1 is returned.\nNote that the subarray [6,5] has a size of 2, and every element is greater than 7 / 2 = 3.5. \nSimilarly, the subarrays [6,5,6], [6,5,6,5], [6,5,6,5,8] also satisfy the given conditions.\nTherefore, 2, 3, 4, or 5 may also be returned."
            }
        ]
    },
    {
        "Title": "Minimum Amount of Time to Fill Cups",
        "slug": "minimum-amount-of-time-to-fill-cups",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** amount = [1,4,2]",
                "Output": "** 4",
                "Explanation": "** One way to fill up the cups is:\nSecond 1: Fill up a cold cup and a warm cup.\nSecond 2: Fill up a warm cup and a hot cup.\nSecond 3: Fill up a warm cup and a hot cup.\nSecond 4: Fill up a warm cup.\nIt can be proven that 4 is the minimum number of seconds needed."
            },
            {
                "Input": "** amount = [5,4,4]",
                "Output": "** 7",
                "Explanation": "** One way to fill up the cups is:\nSecond 1: Fill up a cold cup, and a hot cup.\nSecond 2: Fill up a cold cup, and a warm cup.\nSecond 3: Fill up a cold cup, and a warm cup.\nSecond 4: Fill up a warm cup, and a hot cup.\nSecond 5: Fill up a cold cup, and a hot cup.\nSecond 6: Fill up a cold cup, and a warm cup.\nSecond 7: Fill up a hot cup."
            },
            {
                "Input": "** amount = [5,0,0]",
                "Output": "** 5",
                "Explanation": "** Every second, we fill up a cold cup."
            }
        ]
    },
    {
        "Title": "Smallest Number in Infinite Set",
        "slug": "smallest-number-in-infinite-set",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"SmallestInfiniteSet\", \"addBack\", \"popSmallest\", \"popSmallest\", \"popSmallest\", \"addBack\", \"popSmallest\", \"popSmallest\", \"popSmallest\"]\n[[], [2], [], [], [], [1], [], [], []]",
                "Output": "[null, null, 1, 2, 3, null, 1, 4, 5]",
                "Explanation": "SmallestInfiniteSet smallestInfiniteSet = new SmallestInfiniteSet();\nsmallestInfiniteSet.addBack(2);    // 2 is already in the set, so no change is made.\nsmallestInfiniteSet.popSmallest(); // return 1, since 1 is the smallest number, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 2, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 3, and remove it from the set.\nsmallestInfiniteSet.addBack(1);    // 1 is added back to the set.\nsmallestInfiniteSet.popSmallest(); // return 1, since 1 was added back to the set and\n                                   // is the smallest number, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 4, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 5, and remove it from the set."
            }
        ]
    },
    {
        "Title": "Move Pieces to Obtain a String",
        "slug": "move-pieces-to-obtain-a-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** start = \"_L__R__R_\", target = \"L______RR\"",
                "Output": "** true",
                "Explanation": "** We can obtain the string target from start by doing the following moves:\n- Move the first piece one step to the left, start becomes equal to \"**L**___R__R_\".\n- Move the last piece one step to the right, start becomes equal to \"L___R___**R**\".\n- Move the second piece three steps to the right, start becomes equal to \"L______**R**R\".\nSince it is possible to get the string target from start, we return true."
            },
            {
                "Input": "** start = \"R_L_\", target = \"__LR\"",
                "Output": "** false",
                "Explanation": "** The 'R' piece in the string start can move one step to the right to obtain \"_**R**L_\".\nAfter that, no pieces can move anymore, so it is impossible to obtain the string target from start."
            },
            {
                "Input": "** start = \"_R\", target = \"R_\"",
                "Output": "** false",
                "Explanation": "** The piece in the string start can move only to the right, so it is impossible to obtain the string target from start."
            }
        ]
    },
    {
        "Title": "Count the Number of Ideal Arrays",
        "slug": "count-the-number-of-ideal-arrays",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 2, maxValue = 5",
                "Output": "** 10",
                "Explanation": "** The following are the possible ideal arrays:\n- Arrays starting with the value 1 (5 arrays): [1,1], [1,2], [1,3], [1,4], [1,5]\n- Arrays starting with the value 2 (2 arrays): [2,2], [2,4]\n- Arrays starting with the value 3 (1 array): [3,3]\n- Arrays starting with the value 4 (1 array): [4,4]\n- Arrays starting with the value 5 (1 array): [5,5]\nThere are a total of 5 + 2 + 1 + 1 + 1 = 10 distinct ideal arrays."
            },
            {
                "Input": "** n = 5, maxValue = 3",
                "Output": "** 11",
                "Explanation": "** The following are the possible ideal arrays:\n- Arrays starting with the value 1 (9 arrays): \n   - With no other distinct values (1 array): [1,1,1,1,1] \n   - With 2nd distinct value 2 (4 arrays): [1,1,1,1,2], [1,1,1,2,2], [1,1,2,2,2], [1,2,2,2,2]\n   - With 2nd distinct value 3 (4 arrays): [1,1,1,1,3], [1,1,1,3,3], [1,1,3,3,3], [1,3,3,3,3]\n- Arrays starting with the value 2 (1 array): [2,2,2,2,2]\n- Arrays starting with the value 3 (1 array): [3,3,3,3,3]\nThere are a total of 9 + 1 + 1 = 11 distinct ideal arrays."
            }
        ]
    },
    {
        "Title": "Maximum Number of Pairs in Array",
        "slug": "maximum-number-of-pairs-in-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,3,2,1,3,2,2]",
                "Output": "** [3,1]",
                "Explanation": "**\nForm a pair with nums[0] and nums[3] and remove them from nums. Now, nums = [3,2,3,2,2].\nForm a pair with nums[0] and nums[2] and remove them from nums. Now, nums = [2,2,2].\nForm a pair with nums[0] and nums[1] and remove them from nums. Now, nums = [2].\nNo more pairs can be formed. A total of 3 pairs have been formed, and there is 1 number leftover in nums."
            },
            {
                "Input": "** nums = [1,1]",
                "Output": "** [1,0]",
                "Explanation": "** Form a pair with nums[0] and nums[1] and remove them from nums. Now, nums = [].\nNo more pairs can be formed. A total of 1 pair has been formed, and there are 0 numbers leftover in nums."
            },
            {
                "Input": "** nums = [0]",
                "Output": "** [0,1]",
                "Explanation": "** No pairs can be formed, and there is 1 number leftover in nums."
            }
        ]
    },
    {
        "Title": "Max Sum of a Pair With Equal Sum of Digits",
        "slug": "max-sum-of-a-pair-with-equal-sum-of-digits",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [18,43,36,13,7]",
                "Output": "** 54",
                "Explanation": "** The pairs (i, j) that satisfy the conditions are:\n- (0, 2), both numbers have a sum of digits equal to 9, and their sum is 18 + 36 = 54.\n- (1, 4), both numbers have a sum of digits equal to 7, and their sum is 43 + 7 = 50.\nSo the maximum sum that we can obtain is 54."
            },
            {
                "Input": "** nums = [10,12,19,14]",
                "Output": "** -1",
                "Explanation": "** There are no two numbers that satisfy the conditions, so we return -1."
            }
        ]
    },
    {
        "Title": "Query Kth Smallest Trimmed Number",
        "slug": "query-kth-smallest-trimmed-number",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [\"102\",\"473\",\"251\",\"814\"], queries = [[1,1],[2,3],[4,2],[1,2]]",
                "Output": "** [2,2,1,0]",
                "Explanation": "**\n1. After trimming to the last digit, nums = [\"2\",\"3\",\"1\",\"4\"]. The smallest number is 1 at index 2.\n2. Trimmed to the last 3 digits, nums is unchanged. The 2nd smallest number is 251 at index 2.\n3. Trimmed to the last 2 digits, nums = [\"02\",\"73\",\"51\",\"14\"]. The 4th smallest number is 73.\n4. Trimmed to the last 2 digits, the smallest number is 2 at index 0.\n   Note that the trimmed number \"02\" is evaluated as 2."
            },
            {
                "Input": "** nums = [\"24\",\"37\",\"96\",\"04\"], queries = [[2,1],[2,2]]",
                "Output": "** [3,0]",
                "Explanation": "**\n1. Trimmed to the last digit, nums = [\"4\",\"7\",\"6\",\"4\"]. The 2nd smallest number is 4 at index 3.\n   There are two occurrences of 4, but the one at index 0 is considered smaller than the one at index 3.\n2. Trimmed to the last 2 digits, nums is unchanged. The 2nd smallest number is 24."
            }
        ]
    },
    {
        "Title": "Minimum Deletions to Make Array Divisible",
        "slug": "minimum-deletions-to-make-array-divisible",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [2,3,2,4,3], numsDivide = [9,6,9,3,15]",
                "Output": "** 2",
                "Explanation": "** \nThe smallest element in [2,3,2,4,3] is 2, which does not divide all the elements of numsDivide.\nWe use 2 deletions to delete the elements in nums that are equal to 2 which makes nums = [3,4,3].\nThe smallest element in [3,4,3] is 3, which divides all the elements of numsDivide.\nIt can be shown that 2 is the minimum number of deletions needed."
            },
            {
                "Input": "** nums = [4,3,6], numsDivide = [8,2,6,10]",
                "Output": "** -1",
                "Explanation": "** \nWe want the smallest element in nums to divide all the elements of numsDivide.\nThere is no way to delete elements from nums to allow this."
            }
        ]
    },
    {
        "Title": "Best Poker Hand",
        "slug": "best-poker-hand",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** ranks = [13,2,3,1,9], suits = [\"a\",\"a\",\"a\",\"a\",\"a\"]",
                "Output": "** \"Flush\"",
                "Explanation": "** The hand with all the cards consists of 5 cards with the same suit, so we have a \"Flush\"."
            },
            {
                "Input": "** ranks = [4,4,2,4,4], suits = [\"d\",\"a\",\"a\",\"b\",\"c\"]",
                "Output": "** \"Three of a Kind\"",
                "Explanation": "** The hand with the first, second, and fourth card consists of 3 cards with the same rank, so we have a \"Three of a Kind\".\nNote that we could also make a \"Pair\" hand but \"Three of a Kind\" is a better hand.\nAlso note that other cards could be used to make the \"Three of a Kind\" hand."
            },
            {
                "Input": "** ranks = [10,10,2,12,9], suits = [\"a\",\"b\",\"c\",\"a\",\"d\"]",
                "Output": "** \"Pair\"",
                "Explanation": "** The hand with the first and second card consists of 2 cards with the same rank, so we have a \"Pair\".\nNote that we cannot make a \"Flush\" or a \"Three of a Kind\"."
            }
        ]
    },
    {
        "Title": "Number of Zero-Filled Subarrays",
        "slug": "number-of-zero-filled-subarrays",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,3,0,0,2,0,0,4]",
                "Output": "** 6",
                "Explanation": "** \nThere are 4 occurrences of [0] as a subarray.\nThere are 2 occurrences of [0,0] as a subarray.\nThere is no occurrence of a subarray with a size more than 2 filled with 0. Therefore, we return 6."
            },
            {
                "Input": "** nums = [0,0,0,2,0,0]",
                "Output": "** 9",
                "Explanation": "**There are 5 occurrences of [0] as a subarray.\nThere are 3 occurrences of [0,0] as a subarray.\nThere is 1 occurrence of [0,0,0] as a subarray.\nThere is no occurrence of a subarray with a size more than 3 filled with 0. Therefore, we return 9."
            },
            {
                "Input": "** nums = [2,10,2019]",
                "Output": "** 0",
                "Explanation": "** There is no subarray filled with 0. Therefore, we return 0."
            }
        ]
    },
    {
        "Title": "Design a Number Container System",
        "slug": "design-a-number-container-system",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"NumberContainers\", \"find\", \"change\", \"change\", \"change\", \"change\", \"find\", \"change\", \"find\"]\n[[], [10], [2, 10], [1, 10], [3, 10], [5, 10], [10], [1, 20], [10]]",
                "Output": "[null, -1, null, null, null, null, 1, null, 2]",
                "Explanation": "NumberContainers nc = new NumberContainers();\nnc.find(10); // There is no index that is filled with number 10. Therefore, we return -1.\nnc.change(2, 10); // Your container at index 2 will be filled with number 10.\nnc.change(1, 10); // Your container at index 1 will be filled with number 10.\nnc.change(3, 10); // Your container at index 3 will be filled with number 10.\nnc.change(5, 10); // Your container at index 5 will be filled with number 10.\nnc.find(10); // Number 10 is at the indices 1, 2, 3, and 5. Since the smallest index that is filled with 10 is 1, we return 1.\nnc.change(1, 20); // Your container at index 1 will be filled with number 20. Note that index 1 was filled with 10 and then replaced with 20. \nnc.find(10); // Number 10 is at the indices 2, 3, and 5. The smallest index that is filled with 10 is 2. Therefore, we return 2."
            }
        ]
    },
    {
        "Title": "Shortest Impossible Sequence of Rolls",
        "slug": "shortest-impossible-sequence-of-rolls",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** rolls = [4,2,1,2,3,3,2,4,1], k = 4",
                "Output": "** 3",
                "Explanation": "** Every sequence of rolls of length 1, [1], [2], [3], [4], can be taken from rolls.\nEvery sequence of rolls of length 2, [1, 1], [1, 2], ..., [4, 4], can be taken from rolls.\nThe sequence [1, 4, 2] cannot be taken from rolls, so we return 3.\nNote that there are other sequences that cannot be taken from rolls."
            },
            {
                "Input": "** rolls = [1,1,2,2], k = 2",
                "Output": "** 2",
                "Explanation": "** Every sequence of rolls of length 1, [1], [2], can be taken from rolls.\nThe sequence [2, 1] cannot be taken from rolls, so we return 2.\nNote that there are other sequences that cannot be taken from rolls but [2, 1] is the shortest."
            },
            {
                "Input": "** rolls = [1,1,3,2,2,2,3,3], k = 4",
                "Output": "** 1",
                "Explanation": "** The sequence [4] cannot be taken from rolls, so we return 1.\nNote that there are other sequences that cannot be taken from rolls but [4] is the shortest."
            }
        ]
    },
    {
        "Title": "First Letter to Appear Twice",
        "slug": "first-letter-to-appear-twice",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"abccbaacz\"",
                "Output": "** \"c\"",
                "Explanation": "**\nThe letter 'a' appears on the indexes 0, 5 and 6.\nThe letter 'b' appears on the indexes 1 and 4.\nThe letter 'c' appears on the indexes 2, 3 and 7.\nThe letter 'z' appears on the index 8.\nThe letter 'c' is the first letter to appear twice, because out of all the letters the index of its second occurrence is the smallest."
            },
            {
                "Input": "** s = \"abcdd\"",
                "Output": "** \"d\"",
                "Explanation": "**\nThe only letter that appears twice is 'd' so we return 'd'."
            }
        ]
    },
    {
        "Title": "Equal Row and Column Pairs",
        "slug": "equal-row-and-column-pairs",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[3,2,1],[1,7,6],[2,7,7]]",
                "Output": "** 1",
                "Explanation": "** There is 1 equal row and column pair:\n- (Row 2, Column 1): [2,7,7]"
            },
            {
                "Input": "** grid = [[3,1,2,2],[1,4,4,5],[2,4,2,2],[2,4,2,2]]",
                "Output": "** 3",
                "Explanation": "** There are 3 equal row and column pairs:\n- (Row 0, Column 0): [3,1,2,2]\n- (Row 2, Column 2): [2,4,2,2]\n- (Row 3, Column 2): [2,4,2,2]"
            }
        ]
    },
    {
        "Title": "Design a Food Rating System",
        "slug": "design-a-food-rating-system",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"FoodRatings\", \"highestRated\", \"highestRated\", \"changeRating\", \"highestRated\", \"changeRating\", \"highestRated\"]\n[[[\"kimchi\", \"miso\", \"sushi\", \"moussaka\", \"ramen\", \"bulgogi\"], [\"korean\", \"japanese\", \"japanese\", \"greek\", \"japanese\", \"korean\"], [9, 12, 8, 15, 14, 7]], [\"korean\"], [\"japanese\"], [\"sushi\", 16], [\"japanese\"], [\"ramen\", 16], [\"japanese\"]]",
                "Output": "[null, \"kimchi\", \"ramen\", null, \"sushi\", null, \"ramen\"]",
                "Explanation": "FoodRatings foodRatings = new FoodRatings([\"kimchi\", \"miso\", \"sushi\", \"moussaka\", \"ramen\", \"bulgogi\"], [\"korean\", \"japanese\", \"japanese\", \"greek\", \"japanese\", \"korean\"], [9, 12, 8, 15, 14, 7]);\nfoodRatings.highestRated(\"korean\"); // return \"kimchi\"\n                                    // \"kimchi\" is the highest rated korean food with a rating of 9.\nfoodRatings.highestRated(\"japanese\"); // return \"ramen\"\n                                      // \"ramen\" is the highest rated japanese food with a rating of 14.\nfoodRatings.changeRating(\"sushi\", 16); // \"sushi\" now has a rating of 16.\nfoodRatings.highestRated(\"japanese\"); // return \"sushi\"\n                                      // \"sushi\" is the highest rated japanese food with a rating of 16.\nfoodRatings.changeRating(\"ramen\", 16); // \"ramen\" now has a rating of 16.\nfoodRatings.highestRated(\"japanese\"); // return \"ramen\"\n                                      // Both \"sushi\" and \"ramen\" have a rating of 16.\n                                      // However, \"ramen\" is lexicographically smaller than \"sushi\"."
            }
        ]
    },
    {
        "Title": "Number of Excellent Pairs",
        "slug": "number-of-excellent-pairs",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,3,1], k = 3",
                "Output": "** 5",
                "Explanation": "** The excellent pairs are the following:\n- (3, 3). (3 AND 3) and (3 OR 3) are both equal to (11) in binary. The total number of set bits is 2 + 2 = 4, which is greater than or equal to k = 3.\n- (2, 3) and (3, 2). (2 AND 3) is equal to (10) in binary, and (2 OR 3) is equal to (11) in binary. The total number of set bits is 1 + 2 = 3.\n- (1, 3) and (3, 1). (1 AND 3) is equal to (01) in binary, and (1 OR 3) is equal to (11) in binary. The total number of set bits is 1 + 2 = 3.\nSo the number of excellent pairs is 5."
            },
            {
                "Input": "** nums = [5,1,1], k = 10",
                "Output": "** 0",
                "Explanation": "** There are no excellent pairs for this array."
            }
        ]
    },
    {
        "Title": "Number of Unique Subjects Taught by Each Teacher",
        "slug": "number-of-unique-subjects-taught-by-each-teacher",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nTeacher table:\n+------------+------------+---------+\n| teacher_id | subject_id | dept_id |\n+------------+------------+---------+\n| 1          | 2          | 3       |\n| 1          | 2          | 4       |\n| 1          | 3          | 3       |\n| 2          | 1          | 1       |\n| 2          | 2          | 1       |\n| 2          | 3          | 1       |\n| 2          | 4          | 1       |\n+------------+------------+---------+",
                "Output": "**  \n+------------+-----+\n| teacher_id | cnt |\n+------------+-----+\n| 1          | 2   |\n| 2          | 4   |\n+------------+-----+",
                "Explanation": "** \nTeacher 1:\n  - They teach subject 2 in departments 3 and 4.\n  - They teach subject 3 in department 3.\nTeacher 2:\n  - They teach subject 1 in department 1.\n  - They teach subject 2 in department 1.\n  - They teach subject 3 in department 1.\n  - They teach subject 4 in department 1."
            }
        ]
    },
    {
        "Title": "Make Array Zero by Subtracting Equal Amounts",
        "slug": "make-array-zero-by-subtracting-equal-amounts",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,5,0,3,5]",
                "Output": "** 3",
                "Explanation": "**\nIn the first operation, choose x = 1. Now, nums = [0,4,0,2,4].\nIn the second operation, choose x = 2. Now, nums = [0,2,0,0,2].\nIn the third operation, choose x = 2. Now, nums = [0,0,0,0,0]."
            },
            {
                "Input": "** nums = [0]",
                "Output": "** 0",
                "Explanation": "** Each element in nums is already 0 so no operations are needed."
            }
        ]
    },
    {
        "Title": "Maximum Number of Groups Entering a Competition",
        "slug": "maximum-number-of-groups-entering-a-competition",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grades = [10,6,12,7,3,5]",
                "Output": "** 3",
                "Explanation": "** The following is a possible way to form 3 groups of students:\n- 1st group has the students with grades = [12]. Sum of grades: 12. Student count: 1\n- 2nd group has the students with grades = [6,7]. Sum of grades: 6 + 7 = 13. Student count: 2\n- 3rd group has the students with grades = [10,3,5]. Sum of grades: 10 + 3 + 5 = 18. Student count: 3\nIt can be shown that it is not possible to form more than 3 groups."
            },
            {
                "Input": "** grades = [8,8]",
                "Output": "** 1",
                "Explanation": "** We can only form 1 group, since forming 2 groups would lead to an equal number of students in both groups."
            }
        ]
    },
    {
        "Title": "Find Closest Node to Given Two Nodes",
        "slug": "find-closest-node-to-given-two-nodes",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** edges = [2,2,3,-1], node1 = 0, node2 = 1",
                "Output": "** 2",
                "Explanation": "** The distance from node 0 to node 2 is 1, and the distance from node 1 to node 2 is 1.\nThe maximum of those two distances is 1. It can be proven that we cannot get a node with a smaller maximum distance than 1, so we return node 2."
            },
            {
                "Input": "** edges = [1,2,-1], node1 = 0, node2 = 2",
                "Output": "** 2",
                "Explanation": "** The distance from node 0 to node 2 is 2, and the distance from node 2 to itself is 0.\nThe maximum of those two distances is 2. It can be proven that we cannot get a node with a smaller maximum distance than 2, so we return node 2."
            }
        ]
    },
    {
        "Title": "Longest Cycle in a Graph",
        "slug": "longest-cycle-in-a-graph",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** edges = [3,3,4,2,3]",
                "Output": "** 3",
                "Explanation": "** The longest cycle in the graph is the cycle: 2 -> 4 -> 3 -> 2.\nThe length of this cycle is 3, so 3 is returned."
            },
            {
                "Input": "** edges = [2,-1,3,1]",
                "Output": "** -1",
                "Explanation": "** There are no cycles in this graph."
            }
        ]
    },
    {
        "Title": "Merge Similar Items",
        "slug": "merge-similar-items",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** items1 = [[1,1],[4,5],[3,8]], items2 = [[3,1],[1,5]]",
                "Output": "** [[1,6],[3,9],[4,5]]",
                "Explanation": "** \nThe item with value = 1 occurs in items1 with weight = 1 and in items2 with weight = 5, total weight = 1 + 5 = 6.\nThe item with value = 3 occurs in items1 with weight = 8 and in items2 with weight = 1, total weight = 8 + 1 = 9.\nThe item with value = 4 occurs in items1 with weight = 5, total weight = 5.  \nTherefore, we return [[1,6],[3,9],[4,5]]."
            },
            {
                "Input": "** items1 = [[1,1],[3,2],[2,3]], items2 = [[2,1],[3,2],[1,3]]",
                "Output": "** [[1,4],[2,4],[3,4]]",
                "Explanation": "** \nThe item with value = 1 occurs in items1 with weight = 1 and in items2 with weight = 3, total weight = 1 + 3 = 4.\nThe item with value = 2 occurs in items1 with weight = 3 and in items2 with weight = 1, total weight = 3 + 1 = 4.\nThe item with value = 3 occurs in items1 with weight = 2 and in items2 with weight = 2, total weight = 2 + 2 = 4.\nTherefore, we return [[1,4],[2,4],[3,4]]."
            },
            {
                "Input": "** items1 = [[1,3],[2,2]], items2 = [[7,1],[2,2],[1,4]]",
                "Output": "** [[1,7],[2,4],[7,1]]",
                "Explanation": "**The item with value = 1 occurs in items1 with weight = 3 and in items2 with weight = 4, total weight = 3 + 4 = 7. \nThe item with value = 2 occurs in items1 with weight = 2 and in items2 with weight = 2, total weight = 2 + 2 = 4. \nThe item with value = 7 occurs in items2 with weight = 1, total weight = 1.\nTherefore, we return [[1,7],[2,4],[7,1]]."
            }
        ]
    },
    {
        "Title": "Count Number of Bad Pairs",
        "slug": "count-number-of-bad-pairs",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [4,1,3,3]",
                "Output": "** 5",
                "Explanation": "** The pair (0, 1) is a bad pair since 1 - 0 != 1 - 4.\nThe pair (0, 2) is a bad pair since 2 - 0 != 3 - 4, 2 != -1.\nThe pair (0, 3) is a bad pair since 3 - 0 != 3 - 4, 3 != -1.\nThe pair (1, 2) is a bad pair since 2 - 1 != 3 - 1, 1 != 2.\nThe pair (2, 3) is a bad pair since 3 - 2 != 3 - 3, 1 != 0.\nThere are a total of 5 bad pairs, so we return 5."
            },
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** 0",
                "Explanation": "** There are no bad pairs."
            }
        ]
    },
    {
        "Title": "Task Scheduler II",
        "slug": "task-scheduler-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** tasks = [1,2,1,2,3,1], space = 3",
                "Output": "** 9",
                "Explanation": "**\nOne way to complete all tasks in 9 days is as follows:\nDay 1: Complete the 0th task.\nDay 2: Complete the 1st task.\nDay 3: Take a break.\nDay 4: Take a break.\nDay 5: Complete the 2nd task.\nDay 6: Complete the 3rd task.\nDay 7: Take a break.\nDay 8: Complete the 4th task.\nDay 9: Complete the 5th task.\nIt can be shown that the tasks cannot be completed in less than 9 days."
            },
            {
                "Input": "** tasks = [5,8,8,5], space = 2",
                "Output": "** 6",
                "Explanation": "**\nOne way to complete all tasks in 6 days is as follows:\nDay 1: Complete the 0th task.\nDay 2: Complete the 1st task.\nDay 3: Take a break.\nDay 4: Take a break.\nDay 5: Complete the 2nd task.\nDay 6: Complete the 3rd task.\nIt can be shown that the tasks cannot be completed in less than 6 days."
            }
        ]
    },
    {
        "Title": "Minimum Replacements to Sort the Array",
        "slug": "minimum-replacements-to-sort-the-array",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [3,9,3]",
                "Output": "** 2",
                "Explanation": "** Here are the steps to sort the array in non-decreasing order:\n- From [3,9,3], replace the 9 with 3 and 6 so the array becomes [3,3,6,3]\n- From [3,3,6,3], replace the 6 with 3 and 3 so the array becomes [3,3,3,3,3]\nThere are 2 steps to sort the array in non-decreasing order. Therefore, we return 2."
            },
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** 0",
                "Explanation": "** The array is already in non-decreasing order. Therefore, we return 0."
            }
        ]
    },
    {
        "Title": "Number of Arithmetic Triplets",
        "slug": "number-of-arithmetic-triplets",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [0,1,4,6,7,10], diff = 3",
                "Output": "** 2",
                "Explanation": "**\n(1, 2, 4) is an arithmetic triplet because both 7 - 4 == 3 and 4 - 1 == 3.\n(2, 4, 5) is an arithmetic triplet because both 10 - 7 == 3 and 7 - 4 == 3."
            },
            {
                "Input": "** nums = [4,5,6,7,8,9], diff = 2",
                "Output": "** 2",
                "Explanation": "**\n(0, 2, 4) is an arithmetic triplet because both 8 - 6 == 2 and 6 - 4 == 2.\n(1, 3, 5) is an arithmetic triplet because both 9 - 7 == 2 and 7 - 5 == 2."
            }
        ]
    },
    {
        "Title": "Reachable Nodes With Restrictions",
        "slug": "reachable-nodes-with-restrictions",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 7, edges = [[0,1],[1,2],[3,1],[4,0],[0,5],[5,6]], restricted = [4,5]",
                "Output": "** 4",
                "Explanation": "** The diagram above shows the tree.\nWe have that [0,1,2,3] are the only nodes that can be reached from node 0 without visiting a restricted node."
            },
            {
                "Input": "** n = 7, edges = [[0,1],[0,2],[0,5],[0,4],[3,2],[6,5]], restricted = [4,2,1]",
                "Output": "** 3",
                "Explanation": "** The diagram above shows the tree.\nWe have that [0,5,6] are the only nodes that can be reached from node 0 without visiting a restricted node."
            }
        ]
    },
    {
        "Title": "Check if There is a Valid Partition For The Array",
        "slug": "check-if-there-is-a-valid-partition-for-the-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [4,4,4,5,6]",
                "Output": "** true",
                "Explanation": "** The array can be partitioned into the subarrays [4,4] and [4,5,6].\nThis partition is valid, so we return true."
            },
            {
                "Input": "** nums = [1,1,1,2]",
                "Output": "** false",
                "Explanation": "** There is no valid partition for this array."
            }
        ]
    },
    {
        "Title": "Longest Ideal Subsequence",
        "slug": "longest-ideal-subsequence",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"acfgbd\", k = 2",
                "Output": "** 4",
                "Explanation": "** The longest ideal string is \"acbd\". The length of this string is 4, so 4 is returned.\nNote that \"acfgbd\" is not ideal because 'c' and 'f' have a difference of 3 in alphabet order."
            },
            {
                "Input": "** s = \"abcd\", k = 3",
                "Output": "** 4",
                "Explanation": "** The longest ideal string is \"abcd\". The length of this string is 4, so 4 is returned."
            }
        ]
    },
    {
        "Title": "Largest Local Values in a Matrix",
        "slug": "largest-local-values-in-a-matrix",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** grid = [[9,9,8,1],[5,6,2,6],[8,2,6,4],[6,2,2,2]]",
                "Output": "** [[9,9],[8,6]]",
                "Explanation": "** The diagram above shows the original matrix and the generated matrix.\nNotice that each value in the generated matrix corresponds to the largest value of a contiguous 3 x 3 matrix in grid."
            },
            {
                "Input": "** grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,2,1,1],[1,1,1,1,1],[1,1,1,1,1]]",
                "Output": "** [[2,2,2],[2,2,2],[2,2,2]]",
                "Explanation": "** Notice that the 2 is contained within every contiguous 3 x 3 matrix in grid."
            }
        ]
    },
    {
        "Title": "Node With Highest Edge Score",
        "slug": "node-with-highest-edge-score",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** edges = [1,0,0,0,0,7,7,5]",
                "Output": "** 7",
                "Explanation": "**\n- The nodes 1, 2, 3 and 4 have an edge pointing to node 0. The edge score of node 0 is 1 + 2 + 3 + 4 = 10.\n- The node 0 has an edge pointing to node 1. The edge score of node 1 is 0.\n- The node 7 has an edge pointing to node 5. The edge score of node 5 is 7.\n- The nodes 5 and 6 have an edge pointing to node 7. The edge score of node 7 is 5 + 6 = 11.\nNode 7 has the highest edge score so return 7."
            },
            {
                "Input": "** edges = [2,0,0,2]",
                "Output": "** 0",
                "Explanation": "**\n- The nodes 1 and 2 have an edge pointing to node 0. The edge score of node 0 is 1 + 2 = 3.\n- The nodes 0 and 3 have an edge pointing to node 2. The edge score of node 2 is 0 + 3 = 3.\nNodes 0 and 2 both have an edge score of 3. Since node 0 has a smaller index, we return 0."
            }
        ]
    },
    {
        "Title": "Construct Smallest Number From DI String",
        "slug": "construct-smallest-number-from-di-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** pattern = \"IIIDIDDD\"",
                "Output": "** \"123549876\"",
                "Explanation": "**At indices 0, 1, 2, and 4 we must have that num[i] < num[i+1].\nAt indices 3, 5, 6, and 7 we must have that num[i] > num[i+1].\nSome possible values of num are \"245639871\", \"135749862\", and \"123849765\".\nIt can be proven that \"123549876\" is the smallest possible num that meets the conditions.\nNote that \"123414321\" is not possible because the digit '1' is used more than once."
            },
            {
                "Input": "** pattern = \"DDD\"",
                "Output": "** \"4321\"",
                "Explanation": "**\nSome possible values of num are \"9876\", \"7321\", and \"8742\".\nIt can be proven that \"4321\" is the smallest possible num that meets the conditions."
            }
        ]
    },
    {
        "Title": "Count Special Integers",
        "slug": "count-special-integers",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 20",
                "Output": "** 19",
                "Explanation": "** All the integers from 1 to 20, except 11, are special. Thus, there are 19 special integers."
            },
            {
                "Input": "** n = 5",
                "Output": "** 5",
                "Explanation": "** All the integers from 1 to 5 are special."
            },
            {
                "Input": "** n = 135",
                "Output": "** 110",
                "Explanation": "** There are 110 integers from 1 to 135 that are special.\nSome of the integers that are not special are: 22, 114, and 131."
            }
        ]
    },
    {
        "Title": "Minimum Recolors to Get K Consecutive Black Blocks",
        "slug": "minimum-recolors-to-get-k-consecutive-black-blocks",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** blocks = \"WBBWWBBWBW\", k = 7",
                "Output": "** 3",
                "Explanation": "**\nOne way to achieve 7 consecutive black blocks is to recolor the 0th, 3rd, and 4th blocks\nso that blocks = \"BBBBBBBWBW\". \nIt can be shown that there is no way to achieve 7 consecutive black blocks in less than 3 operations.\nTherefore, we return 3."
            },
            {
                "Input": "** blocks = \"WBWBBBW\", k = 2",
                "Output": "** 0",
                "Explanation": "**\nNo changes need to be made, since 2 consecutive black blocks already exist.\nTherefore, we return 0."
            }
        ]
    },
    {
        "Title": "Time Needed to Rearrange a Binary String",
        "slug": "time-needed-to-rearrange-a-binary-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"0110101\"",
                "Output": "** 4",
                "Explanation": "** \nAfter one second, s becomes \"1011010\".\nAfter another second, s becomes \"1101100\".\nAfter the third second, s becomes \"1110100\".\nAfter the fourth second, s becomes \"1111000\".\nNo occurrence of \"01\" exists any longer, and the process needed 4 seconds to complete,\nso we return 4."
            },
            {
                "Input": "** s = \"11100\"",
                "Output": "** 0",
                "Explanation": "**\nNo occurrence of \"01\" exists in s, and the processes needed 0 seconds to complete,\nso we return 0."
            }
        ]
    },
    {
        "Title": "Shifting Letters II",
        "slug": "shifting-letters-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"abc\", shifts = [[0,1,0],[1,2,1],[0,2,1]]",
                "Output": "** \"ace\"",
                "Explanation": "** Firstly, shift the characters from index 0 to index 1 backward. Now s = \"zac\".\nSecondly, shift the characters from index 1 to index 2 forward. Now s = \"zbd\".\nFinally, shift the characters from index 0 to index 2 forward. Now s = \"ace\"."
            },
            {
                "Input": "** s = \"dztz\", shifts = [[0,0,0],[1,1,1]]",
                "Output": "** \"catz\"",
                "Explanation": "** Firstly, shift the characters from index 0 to index 0 backward. Now s = \"cztz\".\nFinally, shift the characters from index 1 to index 1 forward. Now s = \"catz\"."
            }
        ]
    },
    {
        "Title": "Maximum Segment Sum After Removals",
        "slug": "maximum-segment-sum-after-removals",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,5,6,1], removeQueries = [0,3,2,4,1]",
                "Output": "** [14,7,2,2,0]",
                "Explanation": "** Using 0 to indicate a removed element, the answer is as follows:\nQuery 1: Remove the 0th element, nums becomes [0,2,5,6,1] and the maximum segment sum is 14 for segment [2,5,6,1].\nQuery 2: Remove the 3rd element, nums becomes [0,2,5,0,1] and the maximum segment sum is 7 for segment [2,5].\nQuery 3: Remove the 2nd element, nums becomes [0,2,0,0,1] and the maximum segment sum is 2 for segment [2]. \nQuery 4: Remove the 4th element, nums becomes [0,2,0,0,0] and the maximum segment sum is 2 for segment [2]. \nQuery 5: Remove the 1st element, nums becomes [0,0,0,0,0] and the maximum segment sum is 0, since there are no segments.\nFinally, we return [14,7,2,2,0]."
            },
            {
                "Input": "** nums = [3,2,11,1], removeQueries = [3,2,1,0]",
                "Output": "** [16,5,3,0]",
                "Explanation": "** Using 0 to indicate a removed element, the answer is as follows:\nQuery 1: Remove the 3rd element, nums becomes [3,2,11,0] and the maximum segment sum is 16 for segment [3,2,11].\nQuery 2: Remove the 2nd element, nums becomes [3,2,0,0] and the maximum segment sum is 5 for segment [3,2].\nQuery 3: Remove the 1st element, nums becomes [3,0,0,0] and the maximum segment sum is 3 for segment [3].\nQuery 4: Remove the 0th element, nums becomes [0,0,0,0] and the maximum segment sum is 0, since there are no segments.\nFinally, we return [16,5,3,0]."
            }
        ]
    },
    {
        "Title": "Minimum Hours of Training to Win a Competition",
        "slug": "minimum-hours-of-training-to-win-a-competition",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** initialEnergy = 5, initialExperience = 3, energy = [1,4,3,2], experience = [2,6,3,1]",
                "Output": "** 8",
                "Explanation": "** You can increase your energy to 11 after 6 hours of training, and your experience to 5 after 2 hours of training.\nYou face the opponents in the following order:\n- You have more energy and experience than the 0th opponent so you win.\n  Your energy becomes 11 - 1 = 10, and your experience becomes 5 + 2 = 7.\n- You have more energy and experience than the 1st opponent so you win.\n  Your energy becomes 10 - 4 = 6, and your experience becomes 7 + 6 = 13.\n- You have more energy and experience than the 2nd opponent so you win.\n  Your energy becomes 6 - 3 = 3, and your experience becomes 13 + 3 = 16.\n- You have more energy and experience than the 3rd opponent so you win.\n  Your energy becomes 3 - 2 = 1, and your experience becomes 16 + 1 = 17.\nYou did a total of 6 + 2 = 8 hours of training before the competition, so we return 8.\nIt can be proven that no smaller answer exists."
            },
            {
                "Input": "** initialEnergy = 2, initialExperience = 4, energy = [1], experience = [3]",
                "Output": "** 0",
                "Explanation": "** You do not need any additional energy or experience to win the competition, so we return 0."
            }
        ]
    },
    {
        "Title": "Largest Palindromic Number",
        "slug": "largest-palindromic-number",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** num = \"444947137\"",
                "Output": "** \"7449447\"",
                "Explanation": "** \nUse the digits \"4449477\" from \"**44494****7**13**7**\" to form the palindromic integer \"7449447\".\nIt can be shown that \"7449447\" is the largest palindromic integer that can be formed."
            },
            {
                "Input": "** num = \"00009\"",
                "Output": "** \"9\"",
                "Explanation": "** \nIt can be shown that \"9\" is the largest palindromic integer that can be formed.\nNote that the integer returned should not contain leading zeroes."
            }
        ]
    },
    {
        "Title": "Amount of Time for Binary Tree to Be Infected",
        "slug": "amount-of-time-for-binary-tree-to-be-infected",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,5,3,null,4,10,6,9,2], start = 3",
                "Output": "** 4",
                "Explanation": "** The following nodes are infected during:\n- Minute 0: Node 3\n- Minute 1: Nodes 1, 10 and 6\n- Minute 2: Node 5\n- Minute 3: Node 4\n- Minute 4: Nodes 9 and 2\nIt takes 4 minutes for the whole tree to be infected so we return 4."
            },
            {
                "Input": "** root = [1], start = 1",
                "Output": "** 0",
                "Explanation": "** At minute 0, the only node in the tree is infected so we return 0."
            }
        ]
    },
    {
        "Title": "Find the K-Sum of an Array",
        "slug": "find-the-k-sum-of-an-array",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [2,4,-2], k = 5",
                "Output": "** 2",
                "Explanation": "** All the possible subsequence sums that we can obtain are the following sorted in decreasing order:\n- 6, 4, 4, 2, 2, 0, 0, -2.\nThe 5-Sum of the array is 2."
            },
            {
                "Input": "** nums = [1,-2,3,4,-10,12], k = 16",
                "Output": "** 10",
                "Explanation": "** The 16-Sum of the array is 10."
            }
        ]
    },
    {
        "Title": "Longest Subsequence With Limited Sum",
        "slug": "longest-subsequence-with-limited-sum",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [4,5,2,1], queries = [3,10,21]",
                "Output": "** [2,3,4]",
                "Explanation": "** We answer the queries as follows:\n- The subsequence [2,1] has a sum less than or equal to 3. It can be proven that 2 is the maximum size of such a subsequence, so answer[0] = 2.\n- The subsequence [4,5,1] has a sum less than or equal to 10. It can be proven that 3 is the maximum size of such a subsequence, so answer[1] = 3.\n- The subsequence [4,5,2,1] has a sum less than or equal to 21. It can be proven that 4 is the maximum size of such a subsequence, so answer[2] = 4."
            },
            {
                "Input": "** nums = [2,3,4,5], queries = [1]",
                "Output": "** [0]",
                "Explanation": "** The empty subsequence is the only subsequence that has a sum less than or equal to 1, so answer[0] = 0."
            }
        ]
    },
    {
        "Title": "Removing Stars From a String",
        "slug": "removing-stars-from-a-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"leet**cod*e\"",
                "Output": "** \"lecoe\"",
                "Explanation": "** Performing the removals from left to right:\n- The closest character to the 1st star is 't' in \"lee**t****cod*e\". s becomes \"lee*cod*e\".\n- The closest character to the 2nd star is 'e' in \"le**e***cod*e\". s becomes \"lecod*e\".\n- The closest character to the 3rd star is 'd' in \"leco**d***e\". s becomes \"lecoe\".\nThere are no more stars, so we return \"lecoe\"."
            },
            {
                "Input": "** s = \"erase*****\"",
                "Output": "** \"\"",
                "Explanation": "** The entire string is removed, so we return an empty string."
            }
        ]
    },
    {
        "Title": "Minimum Amount of Time to Collect Garbage",
        "slug": "minimum-amount-of-time-to-collect-garbage",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** garbage = [\"G\",\"P\",\"GP\",\"GG\"], travel = [2,4,3]",
                "Output": "** 21",
                "Explanation": "**\nThe paper garbage truck:\n1. Travels from house 0 to house 1\n2. Collects the paper garbage at house 1\n3. Travels from house 1 to house 2\n4. Collects the paper garbage at house 2\nAltogether, it takes 8 minutes to pick up all the paper garbage.\nThe glass garbage truck:\n1. Collects the glass garbage at house 0\n2. Travels from house 0 to house 1\n3. Travels from house 1 to house 2\n4. Collects the glass garbage at house 2\n5. Travels from house 2 to house 3\n6. Collects the glass garbage at house 3\nAltogether, it takes 13 minutes to pick up all the glass garbage.\nSince there is no metal garbage, we do not need to consider the metal garbage truck.\nTherefore, it takes a total of 8 + 13 = 21 minutes to collect all the garbage."
            },
            {
                "Input": "** garbage = [\"MMM\",\"PGM\",\"GP\"], travel = [3,10]",
                "Output": "** 37",
                "Explanation": "**\nThe metal garbage truck takes 7 minutes to pick up all the metal garbage.\nThe paper garbage truck takes 15 minutes to pick up all the paper garbage.\nThe glass garbage truck takes 15 minutes to pick up all the glass garbage.\nIt takes a total of 7 + 15 + 15 = 37 minutes to collect all the garbage."
            }
        ]
    },
    {
        "Title": "Build a Matrix With Conditions",
        "slug": "build-a-matrix-with-conditions",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** k = 3, rowConditions = [[1,2],[3,2]], colConditions = [[2,1],[3,2]]",
                "Output": "** [[3,0,0],[0,0,1],[0,2,0]]",
                "Explanation": "** The diagram above shows a valid example of a matrix that satisfies all the conditions.\nThe row conditions are the following:\n- Number 1 is in row 1, and number 2 is in row 2, so 1 is above 2 in the matrix.\n- Number 3 is in row 0, and number 2 is in row 2, so 3 is above 2 in the matrix.\nThe column conditions are the following:\n- Number 2 is in column 1, and number 1 is in column 2, so 2 is left of 1 in the matrix.\n- Number 3 is in column 0, and number 2 is in column 1, so 3 is left of 2 in the matrix.\nNote that there may be multiple correct answers."
            }
        ]
    },
    {
        "Title": "Find Subarrays With Equal Sum",
        "slug": "find-subarrays-with-equal-sum",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [4,2,4]",
                "Output": "** true",
                "Explanation": "** The subarrays with elements [4,2] and [2,4] have the same sum of 6."
            },
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** false",
                "Explanation": "** No two subarrays of size 2 have the same sum."
            },
            {
                "Input": "** nums = [0,0,0]",
                "Output": "** true",
                "Explanation": "** The subarrays [nums[0],nums[1]] and [nums[1],nums[2]] have the same sum of 0. \nNote that even though the subarrays have the same content, the two subarrays are considered different because they are in different positions in the original array."
            }
        ]
    },
    {
        "Title": "Strictly Palindromic Number",
        "slug": "strictly-palindromic-number",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 9",
                "Output": "** false",
                "Explanation": "** In base 2: 9 = 1001 (base 2), which is palindromic.\nIn base 3: 9 = 100 (base 3), which is not palindromic.\nTherefore, 9 is not strictly palindromic so we return false.\nNote that in bases 4, 5, 6, and 7, n = 9 is also not palindromic."
            },
            {
                "Input": "** n = 4",
                "Output": "** false",
                "Explanation": "** We only consider base 2: 4 = 100 (base 2), which is not palindromic.\nTherefore, we return false."
            }
        ]
    },
    {
        "Title": "Maximum Rows Covered by Columns",
        "slug": "maximum-rows-covered-by-columns",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** matrix = [[0,0,0],[1,0,1],[0,1,1],[0,0,1]], numSelect = 2",
                "Output": "** 3",
                "Explanation": "** One possible way to cover 3 rows is shown in the diagram above.\nWe choose s = {0, 2}.\n- Row 0 is covered because it has no occurrences of 1.\n- Row 1 is covered because the columns with value 1, i.e. 0 and 2 are present in s.\n- Row 2 is not covered because matrix[2][1] == 1 but 1 is not present in s.\n- Row 3 is covered because matrix[2][2] == 1 and 2 is present in s.\nThus, we can cover three rows.\nNote that s = {1, 2} will also cover 3 rows, but it can be shown that no more than three rows can be covered."
            },
            {
                "Input": "** matrix = [[1],[0]], numSelect = 1",
                "Output": "** 2",
                "Explanation": "** Selecting the only column will result in both rows being covered since the entire matrix is selected.\nTherefore, we return 2."
            }
        ]
    },
    {
        "Title": "Maximum Number of Robots Within Budget",
        "slug": "maximum-number-of-robots-within-budget",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** chargeTimes = [3,6,1,3,4], runningCosts = [2,1,3,4,5], budget = 25",
                "Output": "** 3",
                "Explanation": "** \nIt is possible to run all individual and consecutive pairs of robots within budget.\nTo obtain answer 3, consider the first 3 robots. The total cost will be max(3,6,1) + 3 * sum(2,1,3) = 6 + 3 * 6 = 24 which is less than 25.\nIt can be shown that it is not possible to run more than 3 consecutive robots within budget, so we return 3."
            },
            {
                "Input": "** chargeTimes = [11,12,19], runningCosts = [10,8,7], budget = 19",
                "Output": "** 0",
                "Explanation": "** No robot can be run that does not exceed the budget, so we return 0."
            }
        ]
    },
    {
        "Title": "Check Distances Between Same Letters",
        "slug": "check-distances-between-same-letters",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"abaccb\", distance = [1,3,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                "Output": "** true",
                "Explanation": "**\n- 'a' appears at indices 0 and 2 so it satisfies distance[0] = 1.\n- 'b' appears at indices 1 and 5 so it satisfies distance[1] = 3.\n- 'c' appears at indices 3 and 4 so it satisfies distance[2] = 0.\nNote that distance[3] = 5, but since 'd' does not appear in s, it can be ignored.\nReturn true because s is a well-spaced string."
            },
            {
                "Input": "** s = \"aa\", distance = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                "Output": "** false",
                "Explanation": "**\n- 'a' appears at indices 0 and 1 so there are zero letters between them.\nBecause distance[0] = 1, s is not a well-spaced string."
            }
        ]
    },
    {
        "Title": "Number of Ways to Reach a Position After Exactly k Steps",
        "slug": "number-of-ways-to-reach-a-position-after-exactly-k-steps",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** startPos = 1, endPos = 2, k = 3",
                "Output": "** 3",
                "Explanation": "** We can reach position 2 from 1 in exactly 3 steps in three ways:\n- 1 -> 2 -> 3 -> 2.\n- 1 -> 2 -> 1 -> 2.\n- 1 -> 0 -> 1 -> 2.\nIt can be proven that no other way is possible, so we return 3."
            },
            {
                "Input": "** startPos = 2, endPos = 5, k = 10",
                "Output": "** 0",
                "Explanation": "** It is impossible to reach position 5 from position 2 in exactly 10 steps."
            }
        ]
    },
    {
        "Title": "Longest Nice Subarray",
        "slug": "longest-nice-subarray",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,3,8,48,10]",
                "Output": "** 3",
                "Explanation": "** The longest nice subarray is [3,8,48]. This subarray satisfies the conditions:\n- 3 AND 8 = 0.\n- 3 AND 48 = 0.\n- 8 AND 48 = 0.\nIt can be proven that no longer nice subarray can be obtained, so we return 3."
            },
            {
                "Input": "** nums = [3,1,5,11,13]",
                "Output": "** 1",
                "Explanation": "** The length of the longest nice subarray is 1. Any subarray of length 1 can be chosen."
            }
        ]
    },
    {
        "Title": "Meeting Rooms III",
        "slug": "meeting-rooms-iii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 2, meetings = [[0,10],[1,5],[2,7],[3,4]]",
                "Output": "** 0",
                "Explanation": "**\n- At time 0, both rooms are not being used. The first meeting starts in room 0.\n- At time 1, only room 1 is not being used. The second meeting starts in room 1.\n- At time 2, both rooms are being used. The third meeting is delayed.\n- At time 3, both rooms are being used. The fourth meeting is delayed.\n- At time 5, the meeting in room 1 finishes. The third meeting starts in room 1 for the time period [5,10).\n- At time 10, the meetings in both rooms finish. The fourth meeting starts in room 0 for the time period [10,11).\nBoth rooms 0 and 1 held 2 meetings, so we return 0."
            },
            {
                "Input": "** n = 3, meetings = [[1,20],[2,10],[3,5],[4,9],[6,8]]",
                "Output": "** 1",
                "Explanation": "**\n- At time 1, all three rooms are not being used. The first meeting starts in room 0.\n- At time 2, rooms 1 and 2 are not being used. The second meeting starts in room 1.\n- At time 3, only room 2 is not being used. The third meeting starts in room 2.\n- At time 4, all three rooms are being used. The fourth meeting is delayed.\n- At time 5, the meeting in room 2 finishes. The fourth meeting starts in room 2 for the time period [5,10).\n- At time 6, all three rooms are being used. The fifth meeting is delayed.\n- At time 10, the meetings in rooms 1 and 2 finish. The fifth meeting starts in room 1 for the time period [10,12).\nRoom 0 held 1 meeting while rooms 1 and 2 each held 2 meetings, so we return 1."
            }
        ]
    },
    {
        "Title": "Most Frequent Even Element",
        "slug": "most-frequent-even-element",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [0,1,2,2,4,4,1]",
                "Output": "** 2",
                "Explanation": "**\nThe even elements are 0, 2, and 4. Of these, 2 and 4 appear the most.\nWe return the smallest one, which is 2."
            },
            {
                "Input": "** nums = [4,4,4,9,2,4]",
                "Output": "** 4",
                "Explanation": "** 4 is the even element appears the most."
            },
            {
                "Input": "** nums = [29,47,21,41,13,37,25,7]",
                "Output": "** -1",
                "Explanation": "** There is no even element."
            }
        ]
    },
    {
        "Title": "Optimal Partition of String",
        "slug": "optimal-partition-of-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"abacaba\"",
                "Output": "** 4",
                "Explanation": "**\nTwo possible partitions are (\"a\",\"ba\",\"cab\",\"a\") and (\"ab\",\"a\",\"ca\",\"ba\").\nIt can be shown that 4 is the minimum number of substrings needed."
            },
            {
                "Input": "** s = \"ssssss\"",
                "Output": "** 6",
                "Explanation": "**The only valid partition is (\"s\",\"s\",\"s\",\"s\",\"s\",\"s\")."
            }
        ]
    },
    {
        "Title": "Divide Intervals Into Minimum Number of Groups",
        "slug": "divide-intervals-into-minimum-number-of-groups",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** intervals = [[5,10],[6,8],[1,5],[2,3],[1,10]]",
                "Output": "** 3",
                "Explanation": "** We can divide the intervals into the following groups:\n- Group 1: [1, 5], [6, 8].\n- Group 2: [2, 3], [5, 10].\n- Group 3: [1, 10].\nIt can be proven that it is not possible to divide the intervals into fewer than 3 groups."
            },
            {
                "Input": "** intervals = [[1,3],[5,6],[8,10],[11,13]]",
                "Output": "** 1",
                "Explanation": "** None of the intervals overlap, so we can put all of them in one group."
            }
        ]
    },
    {
        "Title": "Longest Increasing Subsequence II",
        "slug": "longest-increasing-subsequence-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [4,2,1,4,3,4,5,8,15], k = 3",
                "Output": "** 5",
                "Explanation": "**\nThe longest subsequence that meets the requirements is [1,3,4,5,8].\nThe subsequence has a length of 5, so we return 5.\nNote that the subsequence [1,3,4,5,8,15] does not meet the requirements because 15 - 8 = 7 is larger than 3."
            },
            {
                "Input": "** nums = [7,4,5,1,8,12,4,7], k = 5",
                "Output": "** 4",
                "Explanation": "**\nThe longest subsequence that meets the requirements is [4,5,8,12].\nThe subsequence has a length of 4, so we return 4."
            },
            {
                "Input": "** nums = [1,5], k = 1",
                "Output": "** 1",
                "Explanation": "**\nThe longest subsequence that meets the requirements is [1].\nThe subsequence has a length of 1, so we return 1."
            }
        ]
    },
    {
        "Title": "Count Days Spent Together",
        "slug": "count-days-spent-together",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arriveAlice = \"08-15\", leaveAlice = \"08-18\", arriveBob = \"08-16\", leaveBob = \"08-19\"",
                "Output": "** 3",
                "Explanation": "** Alice will be in Rome from August 15 to August 18. Bob will be in Rome from August 16 to August 19. They are both in Rome together on August 16th, 17th, and 18th, so the answer is 3."
            },
            {
                "Input": "** arriveAlice = \"10-01\", leaveAlice = \"10-31\", arriveBob = \"11-01\", leaveBob = \"12-31\"",
                "Output": "** 0",
                "Explanation": "** There is no day when Alice and Bob are in Rome together, so we return 0."
            }
        ]
    },
    {
        "Title": "Maximum Matching of Players With Trainers",
        "slug": "maximum-matching-of-players-with-trainers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** players = [4,7,9], trainers = [8,2,5,8]",
                "Output": "** 2",
                "Explanation": "**\nOne of the ways we can form two matchings is as follows:\n- players[0] can be matched with trainers[0] since 4 <= 8.\n- players[1] can be matched with trainers[3] since 7 <= 8.\nIt can be proven that 2 is the maximum number of matchings that can be formed."
            },
            {
                "Input": "** players = [1,1,1], trainers = [10]",
                "Output": "** 1",
                "Explanation": "**\nThe trainer can be matched with any of the 3 players.\nEach player can only be matched with one trainer, so the maximum answer is 1."
            }
        ]
    },
    {
        "Title": "Smallest Subarrays With Maximum Bitwise OR",
        "slug": "smallest-subarrays-with-maximum-bitwise-or",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,0,2,1,3]",
                "Output": "** [3,3,2,2,1]",
                "Explanation": "**\nThe maximum possible bitwise OR starting at any index is 3. \n- Starting at index 0, the shortest subarray that yields it is [1,0,2].\n- Starting at index 1, the shortest subarray that yields the maximum bitwise OR is [0,2,1].\n- Starting at index 2, the shortest subarray that yields the maximum bitwise OR is [2,1].\n- Starting at index 3, the shortest subarray that yields the maximum bitwise OR is [1,3].\n- Starting at index 4, the shortest subarray that yields the maximum bitwise OR is [3].\nTherefore, we return [3,3,2,2,1]."
            },
            {
                "Input": "** nums = [1,2]",
                "Output": "** [2,1]",
                "Explanation": "**Starting at index 0, the shortest subarray that yields the maximum bitwise OR is of length 2.\nStarting at index 1, the shortest subarray that yields the maximum bitwise OR is of length 1.\nTherefore, we return [2,1]."
            }
        ]
    },
    {
        "Title": "Minimum Money Required Before Transactions",
        "slug": "minimum-money-required-before-transactions",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** transactions = [[2,1],[5,0],[4,2]]",
                "Output": "** 10",
                "Explanation": "**Starting with money = 10, the transactions can be performed in any order.\nIt can be shown that starting with money < 10 will fail to complete all transactions in some order."
            },
            {
                "Input": "** transactions = [[3,0],[0,3]]",
                "Output": "** 3",
                "Explanation": "**\n- If transactions are in the order [[3,0],[0,3]], the minimum money required to complete the transactions is 3.\n- If transactions are in the order [[0,3],[3,0]], the minimum money required to complete the transactions is 0.\nThus, starting with money = 3, the transactions can be performed in any order."
            }
        ]
    },
    {
        "Title": "Smallest Even Multiple",
        "slug": "smallest-even-multiple",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 5",
                "Output": "** 10",
                "Explanation": "** The smallest multiple of both 5 and 2 is 10."
            },
            {
                "Input": "** n = 6",
                "Output": "** 6",
                "Explanation": "** The smallest multiple of both 6 and 2 is 6. Note that a number is a multiple of itself."
            }
        ]
    },
    {
        "Title": "Length of the Longest Alphabetical Continuous Substring",
        "slug": "length-of-the-longest-alphabetical-continuous-substring",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"abacaba\"",
                "Output": "** 2",
                "Explanation": "** There are 4 distinct continuous substrings: \"a\", \"b\", \"c\" and \"ab\".\n\"ab\" is the longest continuous substring."
            },
            {
                "Input": "** s = \"abcde\"",
                "Output": "** 5",
                "Explanation": "** \"abcde\" is the longest continuous substring."
            }
        ]
    },
    {
        "Title": "Reverse Odd Levels of Binary Tree",
        "slug": "reverse-odd-levels-of-binary-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [2,3,5,8,13,21,34]",
                "Output": "** [2,5,3,8,13,21,34]",
                "Explanation": "** \nThe tree has only one odd level.\nThe nodes at level 1 are 3, 5 respectively, which are reversed and become 5, 3."
            },
            {
                "Input": "** root = [7,13,11]",
                "Output": "** [7,11,13]",
                "Explanation": "** \nThe nodes at level 1 are 13, 11, which are reversed and become 11, 13."
            }
        ]
    },
    {
        "Title": "Sum of Prefix Scores of Strings",
        "slug": "sum-of-prefix-scores-of-strings",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** words = [\"abc\",\"ab\",\"bc\",\"b\"]",
                "Output": "** [5,4,3,2]",
                "Explanation": "** The answer for each string is the following:\n- \"abc\" has 3 prefixes: \"a\", \"ab\", and \"abc\".\n- There are 2 strings with the prefix \"a\", 2 strings with the prefix \"ab\", and 1 string with the prefix \"abc\".\nThe total is answer[0] = 2 + 2 + 1 = 5.\n- \"ab\" has 2 prefixes: \"a\" and \"ab\".\n- There are 2 strings with the prefix \"a\", and 2 strings with the prefix \"ab\".\nThe total is answer[1] = 2 + 2 = 4.\n- \"bc\" has 2 prefixes: \"b\" and \"bc\".\n- There are 2 strings with the prefix \"b\", and 1 string with the prefix \"bc\".\nThe total is answer[2] = 2 + 1 = 3.\n- \"b\" has 1 prefix: \"b\".\n- There are 2 strings with the prefix \"b\".\nThe total is answer[3] = 2."
            },
            {
                "Input": "** words = [\"abcd\"]",
                "Output": "** [4]",
                "Explanation": "**\n\"abcd\" has 4 prefixes: \"a\", \"ab\", \"abc\", and \"abcd\".\nEach prefix has a score of one, so the total is answer[0] = 1 + 1 + 1 + 1 = 4."
            }
        ]
    },
    {
        "Title": "Sort the People",
        "slug": "sort-the-people",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** names = [\"Mary\",\"John\",\"Emma\"], heights = [180,165,170]",
                "Output": "** [\"Mary\",\"Emma\",\"John\"]",
                "Explanation": "** Mary is the tallest, followed by Emma and John."
            },
            {
                "Input": "** names = [\"Alice\",\"Bob\",\"Bob\"], heights = [155,185,150]",
                "Output": "** [\"Bob\",\"Alice\",\"Bob\"]",
                "Explanation": "** The first Bob is the tallest, followed by Alice and the second Bob."
            }
        ]
    },
    {
        "Title": "Longest Subarray With Maximum Bitwise AND",
        "slug": "longest-subarray-with-maximum-bitwise-and",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3,3,2,2]",
                "Output": "** 2",
                "Explanation": "**\nThe maximum possible bitwise AND of a subarray is 3.\nThe longest subarray with that value is [3,3], so we return 2."
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 1",
                "Explanation": "**\nThe maximum possible bitwise AND of a subarray is 4.\nThe longest subarray with that value is [4], so we return 1."
            }
        ]
    },
    {
        "Title": "Find All Good Indices",
        "slug": "find-all-good-indices",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,1,1,1,3,4,1], k = 2",
                "Output": "** [2,3]",
                "Explanation": "** There are two good indices in the array:\n- Index 2. The subarray [2,1] is in non-increasing order, and the subarray [1,3] is in non-decreasing order.\n- Index 3. The subarray [1,1] is in non-increasing order, and the subarray [3,4] is in non-decreasing order.\nNote that the index 4 is not good because [4,1] is not non-decreasing."
            },
            {
                "Input": "** nums = [2,1,1,2], k = 2",
                "Output": "** []",
                "Explanation": "** There are no good indices in this array."
            }
        ]
    },
    {
        "Title": "Number of Good Paths",
        "slug": "number-of-good-paths",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** vals = [1,3,2,1,3], edges = [[0,1],[0,2],[2,3],[2,4]]",
                "Output": "** 6",
                "Explanation": "** There are 5 good paths consisting of a single node.\nThere is 1 additional good path: 1 -> 0 -> 2 -> 4.\n(The reverse path 4 -> 2 -> 0 -> 1 is treated as the same as 1 -> 0 -> 2 -> 4.)\nNote that 0 -> 2 -> 3 is not a good path because vals[2] > vals[0]."
            },
            {
                "Input": "** vals = [1,1,2,2,3], edges = [[0,1],[1,2],[2,3],[2,4]]",
                "Output": "** 7",
                "Explanation": "** There are 5 good paths consisting of a single node.\nThere are 2 additional good paths: 0 -> 1 and 2 -> 3."
            },
            {
                "Input": "** vals = [1], edges = []",
                "Output": "** 1",
                "Explanation": "** The tree consists of only one node, so there is one good path."
            }
        ]
    },
    {
        "Title": "Remove Letter To Equalize Frequency",
        "slug": "remove-letter-to-equalize-frequency",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** word = \"abcc\"",
                "Output": "** true",
                "Explanation": "** Select index 3 and delete it: word becomes \"abc\" and each character has a frequency of 1."
            },
            {
                "Input": "** word = \"aazz\"",
                "Output": "** false",
                "Explanation": "** We must delete a character, so either the frequency of \"a\" is 1 and the frequency of \"z\" is 2, or vice versa. It is impossible to make all present letters have equal frequency."
            }
        ]
    },
    {
        "Title": "Longest Uploaded Prefix",
        "slug": "longest-uploaded-prefix",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"LUPrefix\", \"upload\", \"longest\", \"upload\", \"longest\", \"upload\", \"longest\"]\n[[4], [3], [], [1], [], [2], []]",
                "Output": "[null, null, 0, null, 1, null, 3]",
                "Explanation": "LUPrefix server = new LUPrefix(4);   // Initialize a stream of 4 videos.\nserver.upload(3);                    // Upload video 3.\nserver.longest();                    // Since video 1 has not been uploaded yet, there is no prefix.\n                                     // So, we return 0.\nserver.upload(1);                    // Upload video 1.\nserver.longest();                    // The prefix [1] is the longest uploaded prefix, so we return 1.\nserver.upload(2);                    // Upload video 2.\nserver.longest();                    // The prefix [1,2,3] is the longest uploaded prefix, so we return 3."
            }
        ]
    },
    {
        "Title": "Bitwise XOR of All Pairings",
        "slug": "bitwise-xor-of-all-pairings",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums1 = [2,1,3], nums2 = [10,2,5,0]",
                "Output": "** 13",
                "Explanation": "**\nA possible nums3 array is [8,0,7,2,11,3,4,1,9,1,6,3].\nThe bitwise XOR of all these numbers is 13, so we return 13."
            },
            {
                "Input": "** nums1 = [1,2], nums2 = [3,4]",
                "Output": "** 0",
                "Explanation": "**\nAll possible pairs of bitwise XORs are nums1[0] ^ nums2[0], nums1[0] ^ nums2[1], nums1[1] ^ nums2[0],\nand nums1[1] ^ nums2[1].\nThus, one possible nums3 array is [2,5,1,6].\n2 ^ 5 ^ 1 ^ 6 = 0, so we return 0."
            }
        ]
    },
    {
        "Title": "Number of Pairs Satisfying Inequality",
        "slug": "number-of-pairs-satisfying-inequality",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums1 = [3,2,5], nums2 = [2,2,1], diff = 1",
                "Output": "** 3",
                "Explanation": "**\nThere are 3 pairs that satisfy the conditions:\n1. i = 0, j = 1: 3 - 2 <= 2 - 2 + 1. Since i < j and 1 <= 1, this pair satisfies the conditions.\n2. i = 0, j = 2: 3 - 5 <= 2 - 1 + 1. Since i < j and -2 <= 2, this pair satisfies the conditions.\n3. i = 1, j = 2: 2 - 5 <= 2 - 1 + 1. Since i < j and -3 <= 2, this pair satisfies the conditions.\nTherefore, we return 3."
            },
            {
                "Input": "** nums1 = [3,-1], nums2 = [-2,2], diff = -1",
                "Output": "** 0",
                "Explanation": "**\nSince there does not exist any pair that satisfies the conditions, we return 0."
            }
        ]
    },
    {
        "Title": "Number of Common Factors",
        "slug": "number-of-common-factors",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** a = 12, b = 6",
                "Output": "** 4",
                "Explanation": "** The common factors of 12 and 6 are 1, 2, 3, 6."
            },
            {
                "Input": "** a = 25, b = 30",
                "Output": "** 2",
                "Explanation": "** The common factors of 25 and 30 are 1, 5."
            }
        ]
    },
    {
        "Title": "Maximum Sum of an Hourglass",
        "slug": "maximum-sum-of-an-hourglass",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[6,2,1,3],[4,2,1,5],[9,2,8,7],[4,1,2,9]]",
                "Output": "** 30",
                "Explanation": "** The cells shown above represent the hourglass with the maximum sum: 6 + 2 + 1 + 2 + 9 + 2 + 8 = 30."
            },
            {
                "Input": "** grid = [[1,2,3],[4,5,6],[7,8,9]]",
                "Output": "** 35",
                "Explanation": "** There is only one hourglass in the matrix, with the sum: 1 + 2 + 3 + 5 + 7 + 8 + 9 = 35."
            }
        ]
    },
    {
        "Title": "Minimize XOR",
        "slug": "minimize-xor",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** num1 = 3, num2 = 5",
                "Output": "** 3",
                "Explanation": "**\nThe binary representations of num1 and num2 are 0011 and 0101, respectively.\nThe integer **3** has the same number of set bits as num2, and the value 3 XOR 3 = 0 is minimal."
            },
            {
                "Input": "** num1 = 1, num2 = 12",
                "Output": "** 3",
                "Explanation": "**\nThe binary representations of num1 and num2 are 0001 and 1100, respectively.\nThe integer **3** has the same number of set bits as num2, and the value 3 XOR 1 = 2 is minimal."
            }
        ]
    },
    {
        "Title": "Maximum Deletions on a String",
        "slug": "maximum-deletions-on-a-string",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"abcabcdabc\"",
                "Output": "** 2",
                "Explanation": "**\n- Delete the first 3 letters (\"abc\") since the next 3 letters are equal. Now, s = \"abcdabc\".\n- Delete all the letters.\nWe used 2 operations so return 2. It can be proven that 2 is the maximum number of operations needed.\nNote that in the second operation we cannot delete \"abc\" again because the next occurrence of \"abc\" does not happen in the next 3 letters."
            },
            {
                "Input": "** s = \"aaabaab\"",
                "Output": "** 4",
                "Explanation": "**\n- Delete the first letter (\"a\") since the next letter is equal. Now, s = \"aabaab\".\n- Delete the first 3 letters (\"aab\") since the next 3 letters are equal. Now, s = \"aab\".\n- Delete the first letter (\"a\") since the next letter is equal. Now, s = \"ab\".\n- Delete all the letters.\nWe used 4 operations so return 4. It can be proven that 4 is the maximum number of operations needed."
            },
            {
                "Input": "** s = \"aaaaa\"",
                "Output": "** 5",
                "Explanation": "** In each operation, we can delete the first letter of s."
            }
        ]
    },
    {
        "Title": "The Employee That Worked on the Longest Task",
        "slug": "the-employee-that-worked-on-the-longest-task",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 10, logs = [[0,3],[2,5],[0,9],[1,15]]",
                "Output": "** 1",
                "Explanation": "** \nTask 0 started at 0 and ended at 3 with 3 units of times.\nTask 1 started at 3 and ended at 5 with 2 units of times.\nTask 2 started at 5 and ended at 9 with 4 units of times.\nTask 3 started at 9 and ended at 15 with 6 units of times.\nThe task with the longest time is task 3 and the employee with id 1 is the one that worked on it, so we return 1."
            },
            {
                "Input": "** n = 26, logs = [[1,1],[3,7],[2,12],[7,17]]",
                "Output": "** 3",
                "Explanation": "** \nTask 0 started at 0 and ended at 1 with 1 unit of times.\nTask 1 started at 1 and ended at 7 with 6 units of times.\nTask 2 started at 7 and ended at 12 with 5 units of times.\nTask 3 started at 12 and ended at 17 with 5 units of times.\nThe tasks with the longest time is task 1. The employee that worked on it is 3, so we return 3."
            },
            {
                "Input": "** n = 2, logs = [[0,10],[1,20]]",
                "Output": "** 0",
                "Explanation": "** \nTask 0 started at 0 and ended at 10 with 10 units of times.\nTask 1 started at 10 and ended at 20 with 10 units of times.\nThe tasks with the longest time are tasks 0 and 1. The employees that worked on them are 0 and 1, so we return the smallest id 0."
            }
        ]
    },
    {
        "Title": "Find The Original Array of Prefix Xor",
        "slug": "find-the-original-array-of-prefix-xor",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** pref = [5,2,0,3,1]",
                "Output": "** [5,7,2,3,2]",
                "Explanation": "** From the array [5,7,2,3,2] we have the following:\n- pref[0] = 5.\n- pref[1] = 5 ^ 7 = 2.\n- pref[2] = 5 ^ 7 ^ 2 = 0.\n- pref[3] = 5 ^ 7 ^ 2 ^ 3 = 3.\n- pref[4] = 5 ^ 7 ^ 2 ^ 3 ^ 2 = 1."
            },
            {
                "Input": "** pref = [13]",
                "Output": "** [13]",
                "Explanation": "** We have pref[0] = arr[0] = 13."
            }
        ]
    },
    {
        "Title": "Using a Robot to Print the Lexicographically Smallest String",
        "slug": "using-a-robot-to-print-the-lexicographically-smallest-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"zza\"",
                "Output": "** \"azz\"",
                "Explanation": "** Let p denote the written string.\nInitially p=\"\", s=\"zza\", t=\"\".\nPerform first operation three times p=\"\", s=\"\", t=\"zza\".\nPerform second operation three times p=\"azz\", s=\"\", t=\"\"."
            },
            {
                "Input": "** s = \"bac\"",
                "Output": "** \"abc\"",
                "Explanation": "** Let p denote the written string.\nPerform first operation twice p=\"\", s=\"c\", t=\"ba\". \nPerform second operation twice p=\"ab\", s=\"c\", t=\"\". \nPerform first operation p=\"ab\", s=\"\", t=\"c\". \nPerform second operation p=\"abc\", s=\"\", t=\"\"."
            },
            {
                "Input": "** s = \"bdda\"",
                "Output": "** \"addb\"",
                "Explanation": "** Let p denote the written string.\nInitially p=\"\", s=\"bdda\", t=\"\".\nPerform first operation four times p=\"\", s=\"\", t=\"bdda\".\nPerform second operation four times p=\"addb\", s=\"\", t=\"\"."
            }
        ]
    },
    {
        "Title": "Paths in Matrix Whose Sum Is Divisible by K",
        "slug": "paths-in-matrix-whose-sum-is-divisible-by-k",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [[5,2,4],[3,0,5],[0,7,2]], k = 3",
                "Output": "** 2",
                "Explanation": "** There are two paths where the sum of the elements on the path is divisible by k.\nThe first path highlighted in red has a sum of 5 + 2 + 4 + 5 + 2 = 18 which is divisible by 3.\nThe second path highlighted in blue has a sum of 5 + 3 + 0 + 5 + 2 = 15 which is divisible by 3."
            },
            {
                "Input": "** grid = [[0,0]], k = 5",
                "Output": "** 1",
                "Explanation": "** The path highlighted in red has a sum of 0 + 0 = 0 which is divisible by 5."
            },
            {
                "Input": "** grid = [[7,3,4,9],[2,3,6,2],[2,3,7,0]], k = 1",
                "Output": "** 10",
                "Explanation": "** Every integer is divisible by 1 so the sum of the elements on every possible path is divisible by k."
            }
        ]
    },
    {
        "Title": "Number of Valid Clock Times",
        "slug": "number-of-valid-clock-times",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** time = \"?5:00\"",
                "Output": "** 2",
                "Explanation": "** We can replace the ? with either a 0 or 1, producing \"05:00\" or \"15:00\". Note that we cannot replace it with a 2, since the time \"25:00\" is invalid. In total, we have two choices."
            },
            {
                "Input": "** time = \"0?:0?\"",
                "Output": "** 100",
                "Explanation": "** Each ? can be replaced by any digit from 0 to 9, so we have 100 total choices."
            },
            {
                "Input": "** time = \"??:??\"",
                "Output": "** 1440",
                "Explanation": "** There are 24 possible choices for the hours, and 60 possible choices for the minutes. In total, we have 24 * 60 = 1440 choices."
            }
        ]
    },
    {
        "Title": "Range Product Queries of Powers",
        "slug": "range-product-queries-of-powers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 15, queries = [[0,1],[2,2],[0,3]]",
                "Output": "** [2,4,64]",
                "Explanation": "**\nFor n = 15, powers = [1,2,4,8]. It can be shown that powers cannot be a smaller size.\nAnswer to 1st query: powers[0] * powers[1] = 1 * 2 = 2.\nAnswer to 2nd query: powers[2] = 4.\nAnswer to 3rd query: powers[0] * powers[1] * powers[2] * powers[3] = 1 * 2 * 4 * 8 = 64.\nEach answer modulo 109 + 7 yields the same answer, so [2,4,64] is returned."
            },
            {
                "Input": "** n = 2, queries = [[0,0]]",
                "Output": "** [2]",
                "Explanation": "**\nFor n = 2, powers = [2].\nThe answer to the only query is powers[0] = 2. The answer modulo 109 + 7 is the same, so [2] is returned."
            }
        ]
    },
    {
        "Title": "Minimize Maximum of Array",
        "slug": "minimize-maximum-of-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,7,1,6]",
                "Output": "** 5",
                "Explanation": "**\nOne set of optimal operations is as follows:\n1. Choose i = 1, and nums becomes [4,6,1,6].\n2. Choose i = 3, and nums becomes [4,6,2,5].\n3. Choose i = 1, and nums becomes [5,5,2,5].\nThe maximum integer of nums is 5. It can be shown that the maximum number cannot be less than 5.\nTherefore, we return 5."
            },
            {
                "Input": "** nums = [10,1]",
                "Output": "** 10",
                "Explanation": "**\nIt is optimal to leave nums as is, and since 10 is the maximum value, we return 10."
            }
        ]
    },
    {
        "Title": "Create Components With Same Value",
        "slug": "create-components-with-same-value",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [6,2,2,2,6], edges = [[0,1],[1,2],[1,3],[3,4]]",
                "Output": "** 2",
                "Explanation": "** The above figure shows how we can delete the edges [0,1] and [3,4]. The created components are nodes [0], [1,2,3] and [4]. The sum of the values in each component equals 6. It can be proven that no better deletion exists, so the answer is 2."
            }
        ]
    },
    {
        "Title": "Largest Positive Integer That Exists With Its Negative",
        "slug": "largest-positive-integer-that-exists-with-its-negative",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [-1,2,-3,3]",
                "Output": "** 3",
                "Explanation": "** 3 is the only valid k we can find in the array."
            },
            {
                "Input": "** nums = [-1,10,6,7,-7,1]",
                "Output": "** 7",
                "Explanation": "** Both 1 and 7 have their corresponding negative values in the array. 7 has a larger value."
            },
            {
                "Input": "** nums = [-10,8,6,7,-2,-3]",
                "Output": "** -1",
                "Explanation": "** There is no a single valid k, we return -1."
            }
        ]
    },
    {
        "Title": "Count Number of Distinct Integers After Reverse Operations",
        "slug": "count-number-of-distinct-integers-after-reverse-operations",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,13,10,12,31]",
                "Output": "** 6",
                "Explanation": "** After including the reverse of each number, the resulting array is [1,13,10,12,31,1,31,1,21,13].\nThe reversed integers that were added to the end of the array are underlined. Note that for the integer 10, after reversing it, it becomes 01 which is just 1.\nThe number of distinct integers in this array is 6 (The numbers 1, 10, 12, 13, 21, and 31)."
            },
            {
                "Input": "** nums = [2,2,2]",
                "Output": "** 1",
                "Explanation": "** After including the reverse of each number, the resulting array is [2,2,2,2,2,2].\nThe number of distinct integers in this array is 1 (The number 2)."
            }
        ]
    },
    {
        "Title": "Sum of Number and Its Reverse",
        "slug": "sum-of-number-and-its-reverse",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** num = 443",
                "Output": "** true",
                "Explanation": "** 172 + 271 = 443 so we return true."
            },
            {
                "Input": "** num = 63",
                "Output": "** false",
                "Explanation": "** 63 cannot be expressed as the sum of a non-negative integer and its reverse so we return false."
            },
            {
                "Input": "** num = 181",
                "Output": "** true",
                "Explanation": "** 140 + 041 = 181 so we return true. Note that when a number is reversed, there may be leading zeros."
            }
        ]
    },
    {
        "Title": "Count Subarrays With Fixed Bounds",
        "slug": "count-subarrays-with-fixed-bounds",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,3,5,2,7,5], minK = 1, maxK = 5",
                "Output": "** 2",
                "Explanation": "** The fixed-bound subarrays are [1,3,5] and [1,3,5,2]."
            },
            {
                "Input": "** nums = [1,1,1,1], minK = 1, maxK = 1",
                "Output": "** 10",
                "Explanation": "** Every subarray of nums is a fixed-bound subarray. There are 10 possible subarrays."
            }
        ]
    },
    {
        "Title": "Determine if Two Events Have Conflict",
        "slug": "determine-if-two-events-have-conflict",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** event1 = [\"01:15\",\"02:00\"], event2 = [\"02:00\",\"03:00\"]",
                "Output": "** true",
                "Explanation": "** The two events intersect at time 2:00."
            },
            {
                "Input": "** event1 = [\"01:00\",\"02:00\"], event2 = [\"01:20\",\"03:00\"]",
                "Output": "** true",
                "Explanation": "** The two events intersect starting from 01:20 to 02:00."
            },
            {
                "Input": "** event1 = [\"10:00\",\"11:00\"], event2 = [\"14:00\",\"15:00\"]",
                "Output": "** false",
                "Explanation": "** The two events do not intersect."
            }
        ]
    },
    {
        "Title": "Number of Subarrays With GCD Equal to K",
        "slug": "number-of-subarrays-with-gcd-equal-to-k",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [9,3,1,2,6,3], k = 3",
                "Output": "** 4",
                "Explanation": "** The subarrays of nums where 3 is the greatest common divisor of all the subarray's elements are:\n- [9,**3**,1,2,6,3]\n- [9,3,1,2,6,**3**]\n- [**9,3**,1,2,6,3]\n- [9,3,1,2,**6,3**]"
            },
            {
                "Input": "** nums = [4], k = 7",
                "Output": "** 0",
                "Explanation": "** There are no subarrays of nums where 7 is the greatest common divisor of all the subarray's elements."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Make Array Equal",
        "slug": "minimum-cost-to-make-array-equal",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,3,5,2], cost = [2,3,1,14]",
                "Output": "** 8",
                "Explanation": "** We can make all the elements equal to 2 in the following way:\n- Increase the 0th element one time. The cost is 2.\n- Decrease the 1st element one time. The cost is 3.\n- Decrease the 2nd element three times. The cost is 1 + 1 + 1 = 3.\nThe total cost is 2 + 3 + 3 = 8.\nIt can be shown that we cannot make the array equal with a smaller cost."
            },
            {
                "Input": "** nums = [2,2,2,2,2], cost = [4,2,8,1,3]",
                "Output": "** 0",
                "Explanation": "** All the elements are already equal, so no operations are needed."
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Make Arrays Similar",
        "slug": "minimum-number-of-operations-to-make-arrays-similar",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [8,12,6], target = [2,14,10]",
                "Output": "** 2",
                "Explanation": "** It is possible to make nums similar to target in two operations:\n- Choose i = 0 and j = 2, nums = [10,12,4].\n- Choose i = 1 and j = 2, nums = [10,14,2].\nIt can be shown that 2 is the minimum number of operations needed."
            },
            {
                "Input": "** nums = [1,2,5], target = [4,1,3]",
                "Output": "** 1",
                "Explanation": "** We can make nums similar to target in one operation:\n- Choose i = 1 and j = 2, nums = [1,4,3]."
            },
            {
                "Input": "** nums = [1,1,1,1,1], target = [1,1,1,1,1]",
                "Output": "** 0",
                "Explanation": "** The array nums is already similiar to target."
            }
        ]
    },
    {
        "Title": "Odd String Difference",
        "slug": "odd-string-difference",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** words = [\"adc\",\"wzy\",\"abc\"]",
                "Output": "** \"abc\"",
                "Explanation": "** \n- The difference integer array of \"adc\" is [3 - 0, 2 - 3] = [3, -1].\n- The difference integer array of \"wzy\" is [25 - 22, 24 - 25]= [3, -1].\n- The difference integer array of \"abc\" is [1 - 0, 2 - 1] = [1, 1]. \nThe odd array out is [1, 1], so we return the corresponding string, \"abc\"."
            },
            {
                "Input": "** words = [\"aaa\",\"bob\",\"ccc\",\"ddd\"]",
                "Output": "** \"bob\"",
                "Explanation": "** All the integer arrays are [0, 0] except for \"bob\", which corresponds to [13, -13]."
            }
        ]
    },
    {
        "Title": "Words Within Two Edits of Dictionary",
        "slug": "words-within-two-edits-of-dictionary",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** queries = [\"word\",\"note\",\"ants\",\"wood\"], dictionary = [\"wood\",\"joke\",\"moat\"]",
                "Output": "** [\"word\",\"note\",\"wood\"]",
                "Explanation": "**\n- Changing the 'r' in \"word\" to 'o' allows it to equal the dictionary word \"wood\".\n- Changing the 'n' to 'j' and the 't' to 'k' in \"note\" changes it to \"joke\".\n- It would take more than 2 edits for \"ants\" to equal a dictionary word.\n- \"wood\" can remain unchanged (0 edits) and match the corresponding dictionary word.\nThus, we return [\"word\",\"note\",\"wood\"]."
            },
            {
                "Input": "** queries = [\"yes\"], dictionary = [\"not\"]",
                "Output": "** []",
                "Explanation": "**\nApplying any two edits to \"yes\" cannot make it equal to \"not\". Thus, we return an empty array."
            }
        ]
    },
    {
        "Title": "Destroy Sequential Targets",
        "slug": "destroy-sequential-targets",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,7,8,1,1,5], space = 2",
                "Output": "** 1",
                "Explanation": "** If we seed the machine with nums[3], then we destroy all targets equal to 1,3,5,7,9,... \nIn this case, we would destroy 5 total targets (all except for nums[2]). \nIt is impossible to destroy more than 5 targets, so we return nums[3]."
            },
            {
                "Input": "** nums = [1,3,5,2,4,6], space = 2",
                "Output": "** 1",
                "Explanation": "** Seeding the machine with nums[0], or nums[3] destroys 3 targets. \nIt is not possible to destroy more than 3 targets.\nSince nums[0] is the minimal integer that can destroy 3 targets, we return 1."
            },
            {
                "Input": "** nums = [6,2,5], space = 100",
                "Output": "** 2",
                "Explanation": "** Whatever initial seed we select, we can only destroy 1 target. The minimal seed is nums[1]."
            }
        ]
    },
    {
        "Title": "Next Greater Element IV",
        "slug": "next-greater-element-iv",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [2,4,0,9,6]",
                "Output": "** [9,6,6,-1,-1]",
                "Explanation": "**\n0th index: 4 is the first integer greater than 2, and 9 is the second integer greater than 2, to the right of 2.\n1st index: 9 is the first, and 6 is the second integer greater than 4, to the right of 4.\n2nd index: 9 is the first, and 6 is the second integer greater than 0, to the right of 0.\n3rd index: There is no integer greater than 9 to its right, so the second greater integer is considered to be -1.\n4th index: There is no integer greater than 6 to its right, so the second greater integer is considered to be -1.\nThus, we return [9,6,6,-1,-1]."
            },
            {
                "Input": "** nums = [3,3]",
                "Output": "** [-1,-1]",
                "Explanation": "**\nWe return [-1,-1] since neither integer has any integer greater than it."
            }
        ]
    },
    {
        "Title": "Average Value of Even Numbers That Are Divisible by Three",
        "slug": "average-value-of-even-numbers-that-are-divisible-by-three",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,3,6,10,12,15]",
                "Output": "** 9",
                "Explanation": "** 6 and 12 are even numbers that are divisible by 3. (6 + 12) / 2 = 9."
            },
            {
                "Input": "** nums = [1,2,4,7,10]",
                "Output": "** 0",
                "Explanation": "** There is no single number that satisfies the requirement, so return 0."
            }
        ]
    },
    {
        "Title": "Most Popular Video Creator",
        "slug": "most-popular-video-creator",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** creators = [\"alice\",\"bob\",\"alice\",\"chris\"], ids = [\"one\",\"two\",\"three\",\"four\"], views = [5,10,5,4]",
                "Output": "** [[\"alice\",\"one\"],[\"bob\",\"two\"]]",
                "Explanation": "**\nThe popularity of alice is 5 + 5 = 10.\nThe popularity of bob is 10.\nThe popularity of chris is 4.\nalice and bob are the most popular creators.\nFor bob, the video with the highest view count is \"two\".\nFor alice, the videos with the highest view count are \"one\" and \"three\". Since \"one\" is lexicographically smaller than \"three\", it is included in the answer."
            },
            {
                "Input": "** creators = [\"alice\",\"alice\",\"alice\"], ids = [\"a\",\"b\",\"c\"], views = [1,2,2]",
                "Output": "** [[\"alice\",\"b\"]]",
                "Explanation": "**\nThe videos with id \"b\" and \"c\" have the highest view count.\nSince \"b\" is lexicographically smaller than \"c\", it is included in the answer."
            }
        ]
    },
    {
        "Title": "Minimum Addition to Make Integer Beautiful",
        "slug": "minimum-addition-to-make-integer-beautiful",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 16, target = 6",
                "Output": "** 4",
                "Explanation": "** Initially n is 16 and its digit sum is 1 + 6 = 7. After adding 4, n becomes 20 and digit sum becomes 2 + 0 = 2. It can be shown that we can not make n beautiful with adding non-negative integer less than 4."
            },
            {
                "Input": "** n = 467, target = 6",
                "Output": "** 33",
                "Explanation": "** Initially n is 467 and its digit sum is 4 + 6 + 7 = 17. After adding 33, n becomes 500 and digit sum becomes 5 + 0 + 0 = 5. It can be shown that we can not make n beautiful with adding non-negative integer less than 33."
            },
            {
                "Input": "** n = 1, target = 1",
                "Output": "** 0",
                "Explanation": "** Initially n is 1 and its digit sum is 1, which is already smaller than or equal to target."
            }
        ]
    },
    {
        "Title": "Height of Binary Tree After Subtree Removal Queries",
        "slug": "height-of-binary-tree-after-subtree-removal-queries",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** root = [1,3,4,2,null,6,5,null,null,null,null,null,7], queries = [4]",
                "Output": "** [2]",
                "Explanation": "** The diagram above shows the tree after removing the subtree rooted at node with value 4.\nThe height of the tree is 2 (The path 1 -> 3 -> 2)."
            },
            {
                "Input": "** root = [5,8,9,2,1,3,7,4,6], queries = [3,2,4,8]",
                "Output": "** [3,2,3,2]",
                "Explanation": "** We have the following queries:\n- Removing the subtree rooted at node with value 3. The height of the tree becomes 3 (The path 5 -> 8 -> 2 -> 4).\n- Removing the subtree rooted at node with value 2. The height of the tree becomes 2 (The path 5 -> 8 -> 1).\n- Removing the subtree rooted at node with value 4. The height of the tree becomes 3 (The path 5 -> 8 -> 2 -> 6).\n- Removing the subtree rooted at node with value 8. The height of the tree becomes 2 (The path 5 -> 9 -> 3)."
            }
        ]
    },
    {
        "Title": "Apply Operations to an Array",
        "slug": "apply-operations-to-an-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,2,1,1,0]",
                "Output": "** [1,4,2,0,0,0]",
                "Explanation": "** We do the following operations:\n- i = 0: nums[0] and nums[1] are not equal, so we skip this operation.\n- i = 1: nums[1] and nums[2] are equal, we multiply nums[1] by 2 and change nums[2] to 0. The array becomes [1,**4**,**0**,1,1,0].\n- i = 2: nums[2] and nums[3] are not equal, so we skip this operation.\n- i = 3: nums[3] and nums[4] are equal, we multiply nums[3] by 2 and change nums[4] to 0. The array becomes [1,4,0,**2**,**0**,0].\n- i = 4: nums[4] and nums[5] are equal, we multiply nums[4] by 2 and change nums[5] to 0. The array becomes [1,4,0,2,**0**,**0**].\nAfter that, we shift the 0's to the end, which gives the array [1,4,2,0,0,0]."
            },
            {
                "Input": "** nums = [0,1]",
                "Output": "** [1,0]",
                "Explanation": "** No operation can be applied, we just shift the 0 to the end."
            }
        ]
    },
    {
        "Title": "Maximum Sum of Distinct Subarrays With Length K",
        "slug": "maximum-sum-of-distinct-subarrays-with-length-k",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,5,4,2,9,9,9], k = 3",
                "Output": "** 15",
                "Explanation": "** The subarrays of nums with length 3 are:\n- [1,5,4] which meets the requirements and has a sum of 10.\n- [5,4,2] which meets the requirements and has a sum of 11.\n- [4,2,9] which meets the requirements and has a sum of 15.\n- [2,9,9] which does not meet the requirements because the element 9 is repeated.\n- [9,9,9] which does not meet the requirements because the element 9 is repeated.\nWe return 15 because it is the maximum subarray sum of all the subarrays that meet the conditions"
            },
            {
                "Input": "** nums = [4,4,4], k = 3",
                "Output": "** 0",
                "Explanation": "** The subarrays of nums with length 3 are:\n- [4,4,4] which does not meet the requirements because the element 4 is repeated.\nWe return 0 because no subarrays meet the conditions."
            }
        ]
    },
    {
        "Title": "Total Cost to Hire K Workers",
        "slug": "total-cost-to-hire-k-workers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** costs = [17,12,10,2,7,2,11,20,8], k = 3, candidates = 4",
                "Output": "** 11",
                "Explanation": "** We hire 3 workers in total. The total cost is initially 0.\n- In the first hiring round we choose the worker from [17,12,10,2,7,2,11,20,8]. The lowest cost is 2, and we break the tie by the smallest index, which is 3. The total cost = 0 + 2 = 2.\n- In the second hiring round we choose the worker from [17,12,10,7,2,11,20,8]. The lowest cost is 2 (index 4). The total cost = 2 + 2 = 4.\n- In the third hiring round we choose the worker from [17,12,10,7,11,20,8]. The lowest cost is 7 (index 3). The total cost = 4 + 7 = 11. Notice that the worker with index 3 was common in the first and last four workers.\nThe total hiring cost is 11."
            },
            {
                "Input": "** costs = [1,2,4,1], k = 3, candidates = 3",
                "Output": "** 4",
                "Explanation": "** We hire 3 workers in total. The total cost is initially 0.\n- In the first hiring round we choose the worker from [1,2,4,1]. The lowest cost is 1, and we break the tie by the smallest index, which is 0. The total cost = 0 + 1 = 1. Notice that workers with index 1 and 2 are common in the first and last 3 workers.\n- In the second hiring round we choose the worker from [2,4,1]. The lowest cost is 1 (index 2). The total cost = 1 + 1 = 2.\n- In the third hiring round there are less than three candidates. We choose the worker from the remaining workers [2,4]. The lowest cost is 2 (index 0). The total cost = 2 + 2 = 4.\nThe total hiring cost is 4."
            }
        ]
    },
    {
        "Title": "Minimum Total Distance Traveled",
        "slug": "minimum-total-distance-traveled",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** robot = [0,4,6], factory = [[2,2],[6,2]]",
                "Output": "** 4",
                "Explanation": "** As shown in the figure:\n- The first robot at position 0 moves in the positive direction. It will be repaired at the first factory.\n- The second robot at position 4 moves in the negative direction. It will be repaired at the first factory.\n- The third robot at position 6 will be repaired at the second factory. It does not need to move.\nThe limit of the first factory is 2, and it fixed 2 robots.\nThe limit of the second factory is 2, and it fixed 1 robot.\nThe total distance is |2 - 0| + |2 - 4| + |6 - 6| = 4. It can be shown that we cannot achieve a better total distance than 4."
            },
            {
                "Input": "** robot = [1,-1], factory = [[-2,1],[2,1]]",
                "Output": "** 2",
                "Explanation": "** As shown in the figure:\n- The first robot at position 1 moves in the positive direction. It will be repaired at the second factory.\n- The second robot at position -1 moves in the negative direction. It will be repaired at the first factory.\nThe limit of the first factory is 1, and it fixed 1 robot.\nThe limit of the second factory is 1, and it fixed 1 robot.\nThe total distance is |2 - 1| + |(-2) - (-1)| = 2. It can be shown that we cannot achieve a better total distance than 2."
            }
        ]
    },
    {
        "Title": "Number of Distinct Averages",
        "slug": "number-of-distinct-averages",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [4,1,4,0,3,5]",
                "Output": "** 2",
                "Explanation": "**\n1. Remove 0 and 5, and the average is (0 + 5) / 2 = 2.5. Now, nums = [4,1,4,3].\n2. Remove 1 and 4. The average is (1 + 4) / 2 = 2.5, and nums = [4,3].\n3. Remove 3 and 4, and the average is (3 + 4) / 2 = 3.5.\nSince there are 2 distinct numbers among 2.5, 2.5, and 3.5, we return 2."
            },
            {
                "Input": "** nums = [1,100]",
                "Output": "** 1",
                "Explanation": "**\nThere is only one average to be calculated after removing 1 and 100, so we return 1."
            }
        ]
    },
    {
        "Title": "Count Ways To Build Good Strings",
        "slug": "count-ways-to-build-good-strings",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** low = 3, high = 3, zero = 1, one = 1",
                "Output": "** 8",
                "Explanation": "** \nOne possible valid good string is \"011\". \nIt can be constructed as follows: \"\" -> \"0\" -> \"01\" -> \"011\". \nAll binary strings from \"000\" to \"111\" are good strings in this example."
            },
            {
                "Input": "** low = 2, high = 3, zero = 1, one = 2",
                "Output": "** 5",
                "Explanation": "** The good strings are \"00\", \"11\", \"000\", \"110\", and \"011\"."
            }
        ]
    },
    {
        "Title": "Most Profitable Path in a Tree",
        "slug": "most-profitable-path-in-a-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** edges = [[0,1],[1,2],[1,3],[3,4]], bob = 3, amount = [-2,4,2,-4,6]",
                "Output": "** 6",
                "Explanation": "** \nThe above diagram represents the given tree. The game goes as follows:\n- Alice is initially on node 0, Bob on node 3. They open the gates of their respective nodes.\n  Alice's net income is now -2.\n- Both Alice and Bob move to node 1. \n\u00a0 Since they reach here simultaneously, they open the gate together and share the reward.\n\u00a0 Alice's net income becomes -2 + (4 / 2) = 0.\n- Alice moves on to node 3. Since Bob already opened its gate, Alice's income remains unchanged.\n\u00a0 Bob moves on to node 0, and stops moving.\n- Alice moves on to node 4 and opens the gate there. Her net income becomes 0 + 6 = 6.\nNow, neither Alice nor Bob can make any further moves, and the game ends.\nIt is not possible for Alice to get a higher net income."
            },
            {
                "Input": "** edges = [[0,1]], bob = 1, amount = [-7280,2350]",
                "Output": "** -7280",
                "Explanation": "** \nAlice follows the path 0->1 whereas Bob follows the path 1->0.\nThus, Alice opens the gate at node 0 only. Hence, her net income is -7280."
            }
        ]
    },
    {
        "Title": "Split Message Based on Limit",
        "slug": "split-message-based-on-limit",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** message = \"this is really a very awesome message\", limit = 9",
                "Output": "** [\"thi<1/14>\",\"s i<2/14>\",\"s r<3/14>\",\"eal<4/14>\",\"ly <5/14>\",\"a v<6/14>\",\"ery<7/14>\",\" aw<8/14>\",\"eso<9/14>\",\"me<10/14>\",\" m<11/14>\",\"es<12/14>\",\"sa<13/14>\",\"ge<14/14>\"]",
                "Explanation": "**\nThe first 9 parts take 3 characters each from the beginning of message.\nThe next 5 parts take 2 characters each to finish splitting message. \nIn this example, each part, including the last, has length 9. \nIt can be shown it is not possible to split message into less than 14 parts."
            },
            {
                "Input": "** message = \"short message\", limit = 15",
                "Output": "** [\"short mess<1/2>\",\"age<2/2>\"]",
                "Explanation": "**\nUnder the given constraints, the string can be split into two parts: \n- The first part comprises of the first 10 characters, and has a length 15.\n- The next part comprises of the last 3 characters, and has a length 8."
            }
        ]
    },
    {
        "Title": "Convert the Temperature",
        "slug": "convert-the-temperature",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** celsius = 36.50",
                "Output": "** [309.65000,97.70000]",
                "Explanation": "** Temperature at 36.50 Celsius converted in Kelvin is 309.65 and converted in Fahrenheit is 97.70."
            },
            {
                "Input": "** celsius = 122.11",
                "Output": "** [395.26000,251.79800]",
                "Explanation": "** Temperature at 122.11 Celsius converted in Kelvin is 395.26 and converted in Fahrenheit is 251.798."
            }
        ]
    },
    {
        "Title": "Number of Subarrays With LCM Equal to K",
        "slug": "number-of-subarrays-with-lcm-equal-to-k",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,6,2,7,1], k = 6",
                "Output": "** 4",
                "Explanation": "** The subarrays of nums where 6 is the least common multiple of all the subarray's elements are:\n- [**3**,**6**,2,7,1]\n- [**3**,**6**,**2**,7,1]\n- [3,**6**,2,7,1]\n- [3,**6**,**2**,7,1]"
            },
            {
                "Input": "** nums = [3], k = 2",
                "Output": "** 0",
                "Explanation": "** There are no subarrays of nums where 2 is the least common multiple of all the subarray's elements."
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Sort a Binary Tree by Level",
        "slug": "minimum-number-of-operations-to-sort-a-binary-tree-by-level",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [1,4,3,7,6,8,5,null,null,null,null,9,null,10]",
                "Output": "** 3",
                "Explanation": "**\n- Swap 4 and 3. The 2nd level becomes [3,4].\n- Swap 7 and 5. The 3rd level becomes [5,6,8,7].\n- Swap 8 and 7. The 3rd level becomes [5,6,7,8].\nWe used 3 operations so return 3.\nIt can be proven that 3 is the minimum number of operations needed."
            },
            {
                "Input": "** root = [1,3,2,7,6,5,4]",
                "Output": "** 3",
                "Explanation": "**\n- Swap 3 and 2. The 2nd level becomes [2,3].\n- Swap 7 and 4. The 3rd level becomes [4,6,5,7].\n- Swap 6 and 5. The 3rd level becomes [4,5,6,7].\nWe used 3 operations so return 3.\nIt can be proven that 3 is the minimum number of operations needed."
            },
            {
                "Input": "** root = [1,2,3,4,5,6]",
                "Output": "** 0",
                "Explanation": "** Each level is already sorted in increasing order so return 0."
            }
        ]
    },
    {
        "Title": "Maximum Number of Non-overlapping Palindrome Substrings",
        "slug": "maximum-number-of-non-overlapping-palindrome-substrings",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"abaccdbbd\", k = 3",
                "Output": "** 2",
                "Explanation": "** We can select the substrings underlined in s = \"**aba**cc**dbbd**\". Both \"aba\" and \"dbbd\" are palindromes and have a length of at least k = 3.\nIt can be shown that we cannot find a selection with more than two valid substrings."
            },
            {
                "Input": "** s = \"adbcda\", k = 2",
                "Output": "** 0",
                "Explanation": "** There is no palindrome substring of length at least 2 in the string."
            }
        ]
    },
    {
        "Title": "Number of Unequal Triplets in Array",
        "slug": "number-of-unequal-triplets-in-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [4,4,2,4,3]",
                "Output": "** 3",
                "Explanation": "** The following triplets meet the conditions:\n- (0, 2, 4) because 4 != 2 != 3\n- (1, 2, 4) because 4 != 2 != 3\n- (2, 3, 4) because 2 != 4 != 3\nSince there are 3 triplets, we return 3.\nNote that (2, 0, 4) is not a valid triplet because 2 > 0."
            },
            {
                "Input": "** nums = [1,1,1,1,1]",
                "Output": "** 0",
                "Explanation": "** No triplets meet the conditions so we return 0."
            }
        ]
    },
    {
        "Title": "Closest Nodes Queries in a Binary Search Tree",
        "slug": "closest-nodes-queries-in-a-binary-search-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [6,2,13,1,4,9,15,null,null,null,null,null,null,14], queries = [2,5,16]",
                "Output": "** [[2,2],[4,6],[15,-1]]",
                "Explanation": "** We answer the queries in the following way:\n- The largest number that is smaller or equal than 2 in the tree is 2, and the smallest number that is greater or equal than 2 is still 2. So the answer for the first query is [2,2].\n- The largest number that is smaller or equal than 5 in the tree is 4, and the smallest number that is greater or equal than 5 is 6. So the answer for the second query is [4,6].\n- The largest number that is smaller or equal than 16 in the tree is 15, and the smallest number that is greater or equal than 16 does not exist. So the answer for the third query is [15,-1]."
            },
            {
                "Input": "** root = [4,null,9], queries = [3]",
                "Output": "** [[-1,4]]",
                "Explanation": "** The largest number that is smaller or equal to 3 in the tree does not exist, and the smallest number that is greater or equal to 3 is 4. So the answer for the query is [-1,4]."
            }
        ]
    },
    {
        "Title": "Minimum Fuel Cost to Report to the Capital",
        "slug": "minimum-fuel-cost-to-report-to-the-capital",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** roads = [[0,1],[0,2],[0,3]], seats = 5",
                "Output": "** 3",
                "Explanation": "** \n- Representative1 goes directly to the capital with 1 liter of fuel.\n- Representative2 goes directly to the capital with 1 liter of fuel.\n- Representative3 goes directly to the capital with 1 liter of fuel.\nIt costs 3 liters of fuel at minimum. \nIt can be proven that 3 is the minimum number of liters of fuel needed."
            },
            {
                "Input": "** roads = [[3,1],[3,2],[1,0],[0,4],[0,5],[4,6]], seats = 2",
                "Output": "** 7",
                "Explanation": "** \n- Representative2 goes directly to city 3 with 1 liter of fuel.\n- Representative2 and representative3 go together to city 1 with 1 liter of fuel.\n- Representative2 and representative3 go together to the capital with 1 liter of fuel.\n- Representative1 goes directly to the capital with 1 liter of fuel.\n- Representative5 goes directly to the capital with 1 liter of fuel.\n- Representative6 goes directly to city 4 with 1 liter of fuel.\n- Representative4 and representative6 go together to the capital with 1 liter of fuel.\nIt costs 7 liters of fuel at minimum. \nIt can be proven that 7 is the minimum number of liters of fuel needed."
            },
            {
                "Input": "** roads = [], seats = 1",
                "Output": "** 0",
                "Explanation": "** No representatives need to travel to the capital city."
            }
        ]
    },
    {
        "Title": "Number of Beautiful Partitions",
        "slug": "number-of-beautiful-partitions",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"23542185131\", k = 3, minLength = 2",
                "Output": "** 3",
                "Explanation": "** There exists three ways to create a beautiful partition:\n\"2354 | 218 | 5131\"\n\"2354 | 21851 | 31\"\n\"2354218 | 51 | 31\""
            },
            {
                "Input": "** s = \"23542185131\", k = 3, minLength = 3",
                "Output": "** 1",
                "Explanation": "** There exists one way to create a beautiful partition: \"2354 | 218 | 5131\"."
            },
            {
                "Input": "** s = \"3312958\", k = 3, minLength = 1",
                "Output": "** 1",
                "Explanation": "** There exists one way to create a beautiful partition: \"331 | 29 | 58\"."
            }
        ]
    },
    {
        "Title": "Minimum Cuts to Divide a Circle",
        "slug": "minimum-cuts-to-divide-a-circle",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** 2",
                "Explanation": "** \nThe above figure shows how cutting the circle twice through the middle divides it into 4 equal slices."
            },
            {
                "Input": "** n = 3",
                "Output": "** 3",
                "Explanation": "**\nAt least 3 cuts are needed to divide the circle into 3 equal slices. \nIt can be shown that less than 3 cuts cannot result in 3 slices of equal size and shape.\nAlso note that the first cut will not divide the circle into distinct parts."
            }
        ]
    },
    {
        "Title": "Difference Between Ones and Zeros in Row and Column",
        "slug": "difference-between-ones-and-zeros-in-row-and-column",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[0,1,1],[1,0,1],[0,0,1]]",
                "Output": "** [[0,0,4],[0,0,4],[-2,-2,2]]",
                "Explanation": "**\n- diff[0][0] = onesRow0 + onesCol0 - zerosRow0 - zerosCol0 = 2 + 1 - 1 - 2 = 0 \n- diff[0][1] = onesRow0 + onesCol1 - zerosRow0 - zerosCol1 = 2 + 1 - 1 - 2 = 0 \n- diff[0][2] = onesRow0 + onesCol2 - zerosRow0 - zerosCol2 = 2 + 3 - 1 - 0 = 4 \n- diff[1][0] = onesRow1 + onesCol0 - zerosRow1 - zerosCol0 = 2 + 1 - 1 - 2 = 0 \n- diff[1][1] = onesRow1 + onesCol1 - zerosRow1 - zerosCol1 = 2 + 1 - 1 - 2 = 0 \n- diff[1][2] = onesRow1 + onesCol2 - zerosRow1 - zerosCol2 = 2 + 3 - 1 - 0 = 4 \n- diff[2][0] = onesRow2 + onesCol0 - zerosRow2 - zerosCol0 = 1 + 1 - 2 - 2 = -2\n- diff[2][1] = onesRow2 + onesCol1 - zerosRow2 - zerosCol1 = 1 + 1 - 2 - 2 = -2\n- diff[2][2] = onesRow2 + onesCol2 - zerosRow2 - zerosCol2 = 1 + 3 - 2 - 0 = 2"
            },
            {
                "Input": "** grid = [[1,1,1],[1,1,1]]",
                "Output": "** [[5,5,5],[5,5,5]]",
                "Explanation": "**\n- diff[0][0] = onesRow0 + onesCol0 - zerosRow0 - zerosCol0 = 3 + 2 - 0 - 0 = 5\n- diff[0][1] = onesRow0 + onesCol1 - zerosRow0 - zerosCol1 = 3 + 2 - 0 - 0 = 5\n- diff[0][2] = onesRow0 + onesCol2 - zerosRow0 - zerosCol2 = 3 + 2 - 0 - 0 = 5\n- diff[1][0] = onesRow1 + onesCol0 - zerosRow1 - zerosCol0 = 3 + 2 - 0 - 0 = 5\n- diff[1][1] = onesRow1 + onesCol1 - zerosRow1 - zerosCol1 = 3 + 2 - 0 - 0 = 5\n- diff[1][2] = onesRow1 + onesCol2 - zerosRow1 - zerosCol2 = 3 + 2 - 0 - 0 = 5"
            }
        ]
    },
    {
        "Title": "Minimum Penalty for a Shop",
        "slug": "minimum-penalty-for-a-shop",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** customers = \"YYNY\"",
                "Output": "** 2",
                "Explanation": "** \n- Closing the shop at the 0th hour incurs in 1+1+0+1 = 3 penalty.\n- Closing the shop at the 1st hour incurs in 0+1+0+1 = 2 penalty.\n- Closing the shop at the 2nd hour incurs in 0+0+0+1 = 1 penalty.\n- Closing the shop at the 3rd hour incurs in 0+0+1+1 = 2 penalty.\n- Closing the shop at the 4th hour incurs in 0+0+1+0 = 1 penalty.\nClosing the shop at 2nd or 4th hour gives a minimum penalty. Since 2 is earlier, the optimal closing time is 2."
            },
            {
                "Input": "** customers = \"NNNNN\"",
                "Output": "** 0",
                "Explanation": "** It is best to close the shop at the 0th hour as no customers arrive."
            },
            {
                "Input": "** customers = \"YYYY\"",
                "Output": "** 4",
                "Explanation": "** It is best to close the shop at the 4th hour as customers arrive at each hour."
            }
        ]
    },
    {
        "Title": "Count Palindromic Subsequences",
        "slug": "count-palindromic-subsequences",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"103301\"",
                "Output": "** 2",
                "Explanation": "** \nThere are 6 possible subsequences of length 5: \"10330\",\"10331\",\"10301\",\"10301\",\"13301\",\"03301\". \nTwo of them (both equal to \"10301\") are palindromic."
            },
            {
                "Input": "** s = \"0000000\"",
                "Output": "** 21",
                "Explanation": "** All 21 subsequences are \"00000\", which is palindromic."
            },
            {
                "Input": "** s = \"9999900000\"",
                "Output": "** 2",
                "Explanation": "** The only two palindromic subsequences are \"99999\" and \"00000\"."
            }
        ]
    },
    {
        "Title": "Find the Pivot Integer",
        "slug": "find-the-pivot-integer",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 8",
                "Output": "** 6",
                "Explanation": "** 6 is the pivot integer since: 1 + 2 + 3 + 4 + 5 + 6 = 6 + 7 + 8 = 21."
            },
            {
                "Input": "** n = 1",
                "Output": "** 1",
                "Explanation": "** 1 is the pivot integer since: 1 = 1."
            },
            {
                "Input": "** n = 4",
                "Output": "** -1",
                "Explanation": "** It can be proved that no such integer exist."
            }
        ]
    },
    {
        "Title": "Append Characters to String to Make Subsequence",
        "slug": "append-characters-to-string-to-make-subsequence",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"coaching\", t = \"coding\"",
                "Output": "** 4",
                "Explanation": "** Append the characters \"ding\" to the end of s so that s = \"coachingding\".\nNow, t is a subsequence of s (\"**co**aching**ding**\").\nIt can be shown that appending any 3 characters to the end of s will never make t a subsequence."
            },
            {
                "Input": "** s = \"abcde\", t = \"a\"",
                "Output": "** 0",
                "Explanation": "** t is already a subsequence of s (\"**a**bcde\")."
            },
            {
                "Input": "** s = \"z\", t = \"abcde\"",
                "Output": "** 5",
                "Explanation": "** Append the characters \"abcde\" to the end of s so that s = \"zabcde\".\nNow, t is a subsequence of s (\"z**abcde**\").\nIt can be shown that appending any 4 characters to the end of s will never make t a subsequence."
            }
        ]
    },
    {
        "Title": "Remove Nodes From Linked List",
        "slug": "remove-nodes-from-linked-list",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [5,2,13,3,8]",
                "Output": "** [13,8]",
                "Explanation": "** The nodes that should be removed are 5, 2 and 3.\n- Node 13 is to the right of node 5.\n- Node 13 is to the right of node 2.\n- Node 8 is to the right of node 3."
            }
        ]
    },
    {
        "Title": "Count Subarrays With Median K",
        "slug": "count-subarrays-with-median-k",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [3,2,1,4,5], k = 4",
                "Output": "** 3",
                "Explanation": "** The subarrays that have a median equal to 4 are: [4], [4,5] and [1,4,5]."
            },
            {
                "Input": "** nums = [2,3,1], k = 3",
                "Output": "** 1",
                "Explanation": "** [3] is the only subarray that has a median equal to 3."
            }
        ]
    },
    {
        "Title": "Circular Sentence",
        "slug": "circular-sentence",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** sentence = \"leetcode exercises sound delightful\"",
                "Output": "** true",
                "Explanation": "** The words in sentence are [\"leetcode\", \"exercises\", \"sound\", \"delightful\"].\n- leetcode's\u00a0last character is equal to exercises's first character.\n- exercises's\u00a0last character is equal to sound's first character.\n- sound's\u00a0last character is equal to delightful's first character.\n- delightful's\u00a0last character is equal to leetcode's first character.\nThe sentence is circular."
            },
            {
                "Input": "** sentence = \"eetcode\"",
                "Output": "** true",
                "Explanation": "** The words in sentence are [\"eetcode\"].\n- eetcode's\u00a0last character is equal to eetcode's first character.\nThe sentence is circular."
            },
            {
                "Input": "** sentence = \"Leetcode is cool\"",
                "Output": "** false",
                "Explanation": "** The words in sentence are [\"Leetcode\", \"is\", \"cool\"].\n- Leetcode's\u00a0last character is **not** equal to is's first character.\nThe sentence is **not** circular."
            }
        ]
    },
    {
        "Title": "Divide Players Into Teams of Equal Skill",
        "slug": "divide-players-into-teams-of-equal-skill",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** skill = [3,2,5,1,3,4]",
                "Output": "** 22",
                "Explanation": "** \nDivide the players into the following teams: (1, 5), (2, 4), (3, 3), where each team has a total skill of 6.\nThe sum of the chemistry of all the teams is: 1 * 5 + 2 * 4 + 3 * 3 = 5 + 8 + 9 = 22."
            },
            {
                "Input": "** skill = [3,4]",
                "Output": "** 12",
                "Explanation": "** \nThe two players form a team with a total skill of 7.\nThe chemistry of the team is 3 * 4 = 12."
            },
            {
                "Input": "** skill = [1,1,2,3]",
                "Output": "** -1",
                "Explanation": "** \nThere is no way to divide the players into teams such that the total skill of each team is equal."
            }
        ]
    },
    {
        "Title": "Minimum Score of a Path Between Two Cities",
        "slug": "minimum-score-of-a-path-between-two-cities",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 4, roads = [[1,2,9],[2,3,6],[2,4,5],[1,4,7]]",
                "Output": "** 5",
                "Explanation": "** The path from city 1 to 4 with the minimum score is: 1 -> 2 -> 4. The score of this path is min(9,5) = 5.\nIt can be shown that no other path has less score."
            },
            {
                "Input": "** n = 4, roads = [[1,2,2],[1,3,4],[3,4,7]]",
                "Output": "** 2",
                "Explanation": "** The path from city 1 to 4 with the minimum score is: 1 -> 2 -> 1 -> 3 -> 4. The score of this path is min(2,2,4,7) = 2."
            }
        ]
    },
    {
        "Title": "Divide Nodes Into the Maximum Number of Groups",
        "slug": "divide-nodes-into-the-maximum-number-of-groups",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 6, edges = [[1,2],[1,4],[1,5],[2,6],[2,3],[4,6]]",
                "Output": "** 4",
                "Explanation": "** As shown in the image we:\n- Add node 5 to the first group.\n- Add node 1 to the second group.\n- Add nodes 2 and 4 to the third group.\n- Add nodes 3 and 6 to the fourth group.\nWe can see that every edge is satisfied.\nIt can be shown that that if we create a fifth group and move any node from the third or fourth group to it, at least on of the edges will not be satisfied."
            }
        ]
    },
    {
        "Title": "Maximum Value of a String in an Array",
        "slug": "maximum-value-of-a-string-in-an-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** strs = [\"alic3\",\"bob\",\"3\",\"4\",\"00000\"]",
                "Output": "** 5",
                "Explanation": "** \n- \"alic3\" consists of both letters and digits, so its value is its length, i.e. 5.\n- \"bob\" consists only of letters, so its value is also its length, i.e. 3.\n- \"3\" consists only of digits, so its value is its numeric equivalent, i.e. 3.\n- \"4\" also consists only of digits, so its value is 4.\n- \"00000\" consists only of digits, so its value is 0.\nHence, the maximum value is 5, of \"alic3\"."
            },
            {
                "Input": "** strs = [\"1\",\"01\",\"001\",\"0001\"]",
                "Output": "** 1",
                "Explanation": "** \nEach string in the array has value 1. Hence, we return 1."
            }
        ]
    },
    {
        "Title": "Maximum Star Sum of a Graph",
        "slug": "maximum-star-sum-of-a-graph",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** vals = [1,2,3,4,10,-10,-20], edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[3,6]], k = 2",
                "Output": "** 16",
                "Explanation": "** The above diagram represents the input graph.\nThe star graph with the maximum star sum is denoted by blue. It is centered at 3 and includes its neighbors 1 and 4.\nIt can be shown it is not possible to get a star graph with a sum greater than 16."
            }
        ]
    },
    {
        "Title": "Frog Jump II",
        "slug": "frog-jump-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** stones = [0,2,5,6,7]",
                "Output": "** 5",
                "Explanation": "** The above figure represents one of the optimal paths the frog can take.\nThe cost of this path is 5, which is the maximum length of a jump.\nSince it is not possible to achieve a cost of less than 5, we return it."
            },
            {
                "Input": "** stones = [0,3,9]",
                "Output": "** 9",
                "Explanation": "** \nThe frog can jump directly to the last stone and come back to the first stone. \nIn this case, the length of each jump will be 9. The cost for the path will be max(9, 9) = 9.\nIt can be shown that this is the minimum achievable cost."
            }
        ]
    },
    {
        "Title": "Minimum Total Cost to Make Arrays Unequal",
        "slug": "minimum-total-cost-to-make-arrays-unequal",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5]",
                "Output": "** 10",
                "Explanation": "** \nOne of the ways we can perform the operations is:\n- Swap values at indices 0 and 3, incurring cost = 0 + 3 = 3. Now, nums1 = [4,2,3,1,5]\n- Swap values at indices 1 and 2, incurring cost = 1 + 2 = 3. Now, nums1 = [4,3,2,1,5].\n- Swap values at indices 0 and 4, incurring cost = 0 + 4 = 4. Now, nums1 =[5,3,2,1,4].\nWe can see that for each index i, nums1[i] != nums2[i]. The cost required here is 10.\nNote that there are other ways to swap values, but it can be proven that it is not possible to obtain a cost less than 10."
            },
            {
                "Input": "** nums1 = [2,2,2,1,3], nums2 = [1,2,2,3,3]",
                "Output": "** 10",
                "Explanation": "** \nOne of the ways we can perform the operations is:\n- Swap values at indices 2 and 3, incurring cost = 2 + 3 = 5. Now, nums1 = [2,2,1,2,3].\n- Swap values at indices 1 and 4, incurring cost = 1 + 4 = 5. Now, nums1 = [2,3,1,2,2].\nThe total cost needed here is 10, which is the minimum possible."
            },
            {
                "Input": "** nums1 = [1,2,2], nums2 = [1,2,2]",
                "Output": "** -1",
                "Explanation": "** \nIt can be shown that it is not possible to satisfy the given conditions irrespective of the number of operations we perform.\nHence, we return -1."
            }
        ]
    },
    {
        "Title": "Delete Greatest Value in Each Row",
        "slug": "delete-greatest-value-in-each-row",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** grid = [[1,2,4],[3,3,1]]",
                "Output": "** 8",
                "Explanation": "** The diagram above shows the removed values in each step.\n- In the first operation, we remove 4 from the first row and 3 from the second row (notice that, there are two cells with value 3 and we can remove any of them). We add 4 to the answer.\n- In the second operation, we remove 2 from the first row and 3 from the second row. We add 3 to the answer.\n- In the third operation, we remove 1 from the first row and 1 from the second row. We add 1 to the answer.\nThe final answer = 4 + 3 + 1 = 8."
            },
            {
                "Input": "** grid = [[10]]",
                "Output": "** 10",
                "Explanation": "** The diagram above shows the removed values in each step.\n- In the first operation, we remove 10 from the first row. We add 10 to the answer.\nThe final answer = 10."
            }
        ]
    },
    {
        "Title": "Longest Square Streak in an Array",
        "slug": "longest-square-streak-in-an-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [4,3,6,16,8,2]",
                "Output": "** 3",
                "Explanation": "** Choose the subsequence [4,16,2]. After sorting it, it becomes [2,4,16].\n- 4 = 2 * 2.\n- 16 = 4 * 4.\nTherefore, [4,16,2] is a square streak.\nIt can be shown that every subsequence of length 4 is not a square streak."
            },
            {
                "Input": "** nums = [2,3,5,6,7]",
                "Output": "** -1",
                "Explanation": "** There is no square streak in nums so return -1."
            }
        ]
    },
    {
        "Title": "Design Memory Allocator",
        "slug": "design-memory-allocator",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"Allocator\", \"allocate\", \"allocate\", \"allocate\", \"free\", \"allocate\", \"allocate\", \"allocate\", \"free\", \"allocate\", \"free\"]\n[[10], [1, 1], [1, 2], [1, 3], [2], [3, 4], [1, 1], [1, 1], [1], [10, 2], [7]]",
                "Output": "[null, 0, 1, 2, 1, 3, 1, 6, 3, -1, 0]",
                "Explanation": "Allocator loc = new Allocator(10); // Initialize a memory array of size 10. All memory units are initially free.\nloc.allocate(1, 1); // The leftmost block's first index is 0. The memory array becomes [**1**,_,_,_,_,_,_,_,_,_]. We return 0.\nloc.allocate(1, 2); // The leftmost block's first index is 1. The memory array becomes [1,**2**,_,_,_,_,_,_,_,_]. We return 1.\nloc.allocate(1, 3); // The leftmost block's first index is 2. The memory array becomes [1,2,**3**,_,_,_,_,_,_,_]. We return 2.\nloc.free(2); // Free all memory units with mID 2. The memory array becomes [1,_, 3,_,_,_,_,_,_,_]. We return 1 since there is only 1 unit with mID 2.\nloc.allocate(3, 4); // The leftmost block's first index is 3. The memory array becomes [1,_,3,**4**,**4**,**4**,_,_,_,_]. We return 3.\nloc.allocate(1, 1); // The leftmost block's first index is 1. The memory array becomes [1,**1**,3,4,4,4,_,_,_,_]. We return 1.\nloc.allocate(1, 1); // The leftmost block's first index is 6. The memory array becomes [1,1,3,4,4,4,**1**,_,_,_]. We return 6.\nloc.free(1); // Free all memory units with mID 1. The memory array becomes [_,_,3,4,4,4,_,_,_,_]. We return 3 since there are 3 units with mID 1.\nloc.allocate(10, 2); // We can not find any free block with 10 consecutive free memory units, so we return -1.\nloc.free(7); // Free all memory units with mID 7. The memory array remains the same since there is no memory unit with mID 7. We return 0."
            }
        ]
    },
    {
        "Title": "Maximum Number of Points From Grid Queries",
        "slug": "maximum-number-of-points-from-grid-queries",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [[1,2,3],[2,5,7],[3,5,1]], queries = [5,6,2]",
                "Output": "** [5,8,1]",
                "Explanation": "** The diagrams above show which cells we visit to get points for each query."
            },
            {
                "Input": "** grid = [[5,2,1],[1,1,2]], queries = [3]",
                "Output": "** [0]",
                "Explanation": "** We can not get any points because the value of the top left cell is already greater than or equal to 3."
            }
        ]
    },
    {
        "Title": "Count Pairs Of Similar Strings",
        "slug": "count-pairs-of-similar-strings",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** words = [\"aba\",\"aabb\",\"abcd\",\"bac\",\"aabc\"]",
                "Output": "** 2",
                "Explanation": "** There are 2 pairs that satisfy the conditions:\n- i = 0 and j = 1 : both words[0] and words[1] only consist of characters 'a' and 'b'. \n- i = 3 and j = 4 : both words[3] and words[4] only consist of characters 'a', 'b', and 'c'."
            },
            {
                "Input": "** words = [\"aabb\",\"ab\",\"ba\"]",
                "Output": "** 3",
                "Explanation": "** There are 3 pairs that satisfy the conditions:\n- i = 0 and j = 1 : both words[0] and words[1] only consist of characters 'a' and 'b'. \n- i = 0 and j = 2 : both words[0] and words[2] only consist of characters 'a' and 'b'.\n- i = 1 and j = 2 : both words[1] and words[2] only consist of characters 'a' and 'b'."
            },
            {
                "Input": "** words = [\"nba\",\"cba\",\"dba\"]",
                "Output": "** 0",
                "Explanation": "** Since there does not exist any pair that satisfies the conditions, we return 0."
            }
        ]
    },
    {
        "Title": "Smallest Value After Replacing With Sum of Prime Factors",
        "slug": "smallest-value-after-replacing-with-sum-of-prime-factors",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 15",
                "Output": "** 5",
                "Explanation": "** Initially, n = 15.\n15 = 3 * 5, so replace n with 3 + 5 = 8.\n8 = 2 * 2 * 2, so replace n with 2 + 2 + 2 = 6.\n6 = 2 * 3, so replace n with 2 + 3 = 5.\n5 is the smallest value n will take on."
            },
            {
                "Input": "** n = 3",
                "Output": "** 3",
                "Explanation": "** Initially, n = 3.\n3 is the smallest value n will take on."
            }
        ]
    },
    {
        "Title": "Add Edges to Make Degrees of All Nodes Even",
        "slug": "add-edges-to-make-degrees-of-all-nodes-even",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 5, edges = [[1,2],[2,3],[3,4],[4,2],[1,4],[2,5]]",
                "Output": "** true",
                "Explanation": "** The above diagram shows a valid way of adding an edge.\nEvery node in the resulting graph is connected to an even number of edges."
            },
            {
                "Input": "** n = 4, edges = [[1,2],[3,4]]",
                "Output": "** true",
                "Explanation": "** The above diagram shows a valid way of adding two edges."
            },
            {
                "Input": "** n = 4, edges = [[1,2],[1,3],[1,4]]",
                "Output": "** false",
                "Explanation": "** It is not possible to obtain a valid graph with adding at most 2 edges."
            }
        ]
    },
    {
        "Title": "Cycle Length Queries in a Tree",
        "slug": "cycle-length-queries-in-a-tree",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 3, queries = [[5,3],[4,7],[2,3]]",
                "Output": "** [4,5,3]",
                "Explanation": "** The diagrams above show the tree of 23 - 1 nodes. Nodes colored in red describe the nodes in the cycle after adding the edge.\n- After adding the edge between nodes 3 and 5, the graph contains a cycle of nodes [5,2,1,3]. Thus answer to the first query is 4. We delete the added edge and process the next query.\n- After adding the edge between nodes 4 and 7, the graph contains a cycle of nodes [4,2,1,3,7]. Thus answer to the second query is 5. We delete the added edge and process the next query.\n- After adding the edge between nodes 2 and 3, the graph contains a cycle of nodes [2,1,3]. Thus answer to the third query is 3. We delete the added edge."
            },
            {
                "Input": "** n = 2, queries = [[1,2]]",
                "Output": "** [2]",
                "Explanation": "** The diagram above shows the tree of 22 - 1 nodes. Nodes colored in red describe the nodes in the cycle after adding the edge.\n- After adding the edge between nodes 1 and 2, the graph contains a cycle of nodes [2,1]. Thus answer for the first query is 2. We delete the added edge."
            }
        ]
    },
    {
        "Title": "Maximum Enemy Forts That Can Be Captured",
        "slug": "maximum-enemy-forts-that-can-be-captured",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** forts = [1,0,0,-1,0,0,0,0,1]",
                "Output": "** 4",
                "Explanation": "**\n- Moving the army from position 0 to position 3 captures 2 enemy forts, at 1 and 2.\n- Moving the army from position 8 to position 3 captures 4 enemy forts.\nSince 4 is the maximum number of enemy forts that can be captured, we return 4."
            },
            {
                "Input": "** forts = [0,0,1,-1]",
                "Output": "** 0",
                "Explanation": "** Since no enemy fort can be captured, 0 is returned."
            }
        ]
    },
    {
        "Title": "Reward Top K Students",
        "slug": "reward-top-k-students",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** positive_feedback = [\"smart\",\"brilliant\",\"studious\"], negative_feedback = [\"not\"], report = [\"this student is studious\",\"the student is smart\"], student_id = [1,2], k = 2",
                "Output": "** [1,2]",
                "Explanation": "** \nBoth the students have 1 positive feedback and 3 points but since student 1 has a lower ID he ranks higher."
            },
            {
                "Input": "** positive_feedback = [\"smart\",\"brilliant\",\"studious\"], negative_feedback = [\"not\"], report = [\"this student is not studious\",\"the student is smart\"], student_id = [1,2], k = 2",
                "Output": "** [2,1]",
                "Explanation": "** \n- The student with ID 1 has 1 positive feedback and 1 negative feedback, so he has 3-1=2 points. \n- The student with ID 2 has 1 positive feedback, so he has 3 points. \nSince student 2 has more points, [2,1] is returned."
            }
        ]
    },
    {
        "Title": "Minimize the Maximum of Two Arrays",
        "slug": "minimize-the-maximum-of-two-arrays",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** divisor1 = 2, divisor2 = 7, uniqueCnt1 = 1, uniqueCnt2 = 3",
                "Output": "** 4",
                "Explanation": "** \nWe can distribute the first 4 natural numbers into arr1 and arr2.\narr1 = [1] and arr2 = [2,3,4].\nWe can see that both arrays satisfy all the conditions.\nSince the maximum value is 4, we return it."
            },
            {
                "Input": "** divisor1 = 3, divisor2 = 5, uniqueCnt1 = 2, uniqueCnt2 = 1",
                "Output": "** 3",
                "Explanation": "** \nHere arr1 = [1,2], and arr2 = [3] satisfy all conditions.\nSince the maximum value is 3, we return it."
            },
            {
                "Input": "** divisor1 = 2, divisor2 = 4, uniqueCnt1 = 8, uniqueCnt2 = 2",
                "Output": "** 15",
                "Explanation": "** \nHere, the final possible arrays can be arr1 = [1,3,5,7,9,11,13,15], and arr2 = [2,6].\nIt can be shown that it is not possible to obtain a lower maximum satisfying all conditions."
            }
        ]
    },
    {
        "Title": "Count Anagrams",
        "slug": "count-anagrams",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"too hot\"",
                "Output": "** 18",
                "Explanation": "** Some of the anagrams of the given string are \"too hot\", \"oot hot\", \"oto toh\", \"too toh\", and \"too oht\"."
            },
            {
                "Input": "** s = \"aa\"",
                "Output": "** 1",
                "Explanation": "** There is only one anagram possible for the given string."
            }
        ]
    },
    {
        "Title": "Shortest Distance to Target String in a Circular Array",
        "slug": "shortest-distance-to-target-string-in-a-circular-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** words = [\"hello\",\"i\",\"am\",\"leetcode\",\"hello\"], target = \"hello\", startIndex = 1",
                "Output": "** 1",
                "Explanation": "** We start from index 1 and can reach \"hello\" by\n- moving 3 units to the right to reach index 4.\n- moving 2 units to the left to reach index 4.\n- moving 4 units to the right to reach index 0.\n- moving 1 unit to the left to reach index 0.\nThe shortest distance to reach \"hello\" is 1."
            },
            {
                "Input": "** words = [\"a\",\"b\",\"leetcode\"], target = \"leetcode\", startIndex = 0",
                "Output": "** 1",
                "Explanation": "** We start from index 0 and can reach \"leetcode\" by\n- moving 2 units to the right to reach index 3.\n- moving 1 unit to the left to reach index 3.\nThe shortest distance to reach \"leetcode\" is 1."
            },
            {
                "Input": "** words = [\"i\",\"eat\",\"leetcode\"], target = \"ate\", startIndex = 0",
                "Output": "** -1",
                "Explanation": "** Since \"ate\" does not exist in words, we return -1."
            }
        ]
    },
    {
        "Title": "Take K of Each Character From Left and Right",
        "slug": "take-k-of-each-character-from-left-and-right",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"aabaaaacaabc\", k = 2",
                "Output": "** 8",
                "Explanation": "** \nTake three characters from the left of s. You now have two 'a' characters, and one 'b' character.\nTake five characters from the right of s. You now have four 'a' characters, two 'b' characters, and two 'c' characters.\nA total of 3 + 5 = 8 minutes is needed.\nIt can be proven that 8 is the minimum number of minutes needed."
            },
            {
                "Input": "** s = \"a\", k = 1",
                "Output": "** -1",
                "Explanation": "** It is not possible to take one 'b' or 'c' so return -1."
            }
        ]
    },
    {
        "Title": "Maximum Tastiness of Candy Basket",
        "slug": "maximum-tastiness-of-candy-basket",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** price = [13,5,1,8,21,2], k = 3",
                "Output": "** 8",
                "Explanation": "** Choose the candies with the prices [13,5,21].\nThe tastiness of the candy basket is: min(|13 - 5|, |13 - 21|, |5 - 21|) = min(8, 8, 16) = 8.\nIt can be proven that 8 is the maximum tastiness that can be achieved."
            },
            {
                "Input": "** price = [1,3,1], k = 2",
                "Output": "** 2",
                "Explanation": "** Choose the candies with the prices [1,3].\nThe tastiness of the candy basket is: min(|1 - 3|) = min(2) = 2.\nIt can be proven that 2 is the maximum tastiness that can be achieved."
            },
            {
                "Input": "** price = [7,7,7,7], k = 2",
                "Output": "** 0",
                "Explanation": "** Choosing any two distinct candies from the candies we have will result in a tastiness of 0."
            }
        ]
    },
    {
        "Title": "Number of Great Partitions",
        "slug": "number-of-great-partitions",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4], k = 4",
                "Output": "** 6",
                "Explanation": "** The great partitions are: ([1,2,3], [4]), ([1,3], [2,4]), ([1,4], [2,3]), ([2,3], [1,4]), ([2,4], [1,3]) and ([4], [1,2,3])."
            },
            {
                "Input": "** nums = [3,3,3], k = 4",
                "Output": "** 0",
                "Explanation": "** There are no great partitions for this array."
            },
            {
                "Input": "** nums = [6,6], k = 2",
                "Output": "** 2",
                "Explanation": "** We can either put nums[0] in the first partition or in the second partition.\nThe great partitions will be ([6], [6]) and ([6], [6])."
            }
        ]
    },
    {
        "Title": "Count the Digits That Divide a Number",
        "slug": "count-the-digits-that-divide-a-number",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num = 7",
                "Output": "** 1",
                "Explanation": "** 7 divides itself, hence the answer is 1."
            },
            {
                "Input": "** num = 121",
                "Output": "** 2",
                "Explanation": "** 121 is divisible by 1, but not 2. Since 1 occurs twice as a digit, we return 2."
            },
            {
                "Input": "** num = 1248",
                "Output": "** 4",
                "Explanation": "** 1248 is divisible by all of its digits, hence the answer is 4."
            }
        ]
    },
    {
        "Title": "Distinct Prime Factors of Product of Array",
        "slug": "distinct-prime-factors-of-product-of-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,4,3,7,10,6]",
                "Output": "** 4",
                "Explanation": "**\nThe product of all the elements in nums is: 2 * 4 * 3 * 7 * 10 * 6 = 10080 = 25 * 32 * 5 * 7.\nThere are 4 distinct prime factors so we return 4."
            },
            {
                "Input": "** nums = [2,4,8,16]",
                "Output": "** 1",
                "Explanation": "**\nThe product of all the elements in nums is: 2 * 4 * 8 * 16 = 1024 = 210.\nThere is 1 distinct prime factor so we return 1."
            }
        ]
    },
    {
        "Title": "Partition String Into Substrings With Values at Most K",
        "slug": "partition-string-into-substrings-with-values-at-most-k",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"165462\", k = 60",
                "Output": "** 4",
                "Explanation": "** We can partition the string into substrings \"16\", \"54\", \"6\", and \"2\". Each substring has a value less than or equal to k = 60.\nIt can be shown that we cannot partition the string into less than 4 substrings."
            },
            {
                "Input": "** s = \"238182\", k = 5",
                "Output": "** -1",
                "Explanation": "** There is no good partition for this string."
            }
        ]
    },
    {
        "Title": "Closest Prime Numbers in Range",
        "slug": "closest-prime-numbers-in-range",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** left = 10, right = 19",
                "Output": "** [11,13]",
                "Explanation": "** The prime numbers between 10 and 19 are 11, 13, 17, and 19.\nThe closest gap between any pair is 2, which can be achieved by [11,13] or [17,19].\nSince 11 is smaller than 17, we return the first pair."
            },
            {
                "Input": "** left = 4, right = 6",
                "Output": "** [-1,-1]",
                "Explanation": "** There exists only one prime number in the given range, so the conditions cannot be satisfied."
            }
        ]
    },
    {
        "Title": "Categorize Box According to Criteria",
        "slug": "categorize-box-according-to-criteria",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** length = 1000, width = 35, height = 700, mass = 300",
                "Output": "** \"Heavy\"",
                "Explanation": "** \nNone of the dimensions of the box is greater or equal to 104. \nIts volume = 24500000 <= 109. So it cannot be categorized as \"Bulky\".\nHowever mass >= 100, so the box is \"Heavy\".\nSince the box is not \"Bulky\" but \"Heavy\", we return \"Heavy\"."
            },
            {
                "Input": "** length = 200, width = 50, height = 800, mass = 50",
                "Output": "** \"Neither\"",
                "Explanation": "** \nNone of the dimensions of the box is greater or equal to 104.\nIts volume = 8 * 106 <= 109. So it cannot be categorized as \"Bulky\".\nIts mass is also less than 100, so it cannot be categorized as \"Heavy\" either. \nSince its neither of the two above categories, we return \"Neither\"."
            }
        ]
    },
    {
        "Title": "Find Consecutive Integers from a Data Stream",
        "slug": "find-consecutive-integers-from-a-data-stream",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"DataStream\", \"consec\", \"consec\", \"consec\", \"consec\"]\n[[4, 3], [4], [4], [4], [3]]",
                "Output": "[null, false, false, true, false]",
                "Explanation": "DataStream dataStream = new DataStream(4, 3); //value = 4, k = 3 \ndataStream.consec(4); // Only 1 integer is parsed, so returns False. \ndataStream.consec(4); // Only 2 integers are parsed.\n                      // Since 2 is less than k, returns False. \ndataStream.consec(4); // The 3 integers parsed are all equal to value, so returns True. \ndataStream.consec(3); // The last k integers parsed in the stream are [4,4,3].\n                      // Since 3 is not equal to value, it returns False."
            }
        ]
    },
    {
        "Title": "Find Xor-Beauty of Array",
        "slug": "find-xor-beauty-of-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,4]",
                "Output": "** 5",
                "Explanation": "** \nThe triplets and their corresponding effective values are listed below:\n- (0,0,0) with effective value ((1 | 1) & 1) = 1\n- (0,0,1) with effective value ((1 | 1) & 4) = 0\n- (0,1,0) with effective value ((1 | 4) & 1) = 1\n- (0,1,1) with effective value ((1 | 4) & 4) = 4\n- (1,0,0) with effective value ((4 | 1) & 1) = 1\n- (1,0,1) with effective value ((4 | 1) & 4) = 4\n- (1,1,0) with effective value ((4 | 4) & 1) = 0\n- (1,1,1) with effective value ((4 | 4) & 4) = 4 \nXor-beauty of array will be bitwise XOR of all beauties = 1 ^ 0 ^ 1 ^ 4 ^ 1 ^ 4 ^ 0 ^ 4 = 5."
            },
            {
                "Input": "** nums = [15,45,20,2,34,35,5,44,32,30]",
                "Output": "** 34",
                "Explanation": "** The xor-beauty of the given array is 34."
            }
        ]
    },
    {
        "Title": "Maximize the Minimum Powered City",
        "slug": "maximize-the-minimum-powered-city",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** stations = [1,2,4,5,0], r = 1, k = 2",
                "Output": "** 5",
                "Explanation": "** \nOne of the optimal ways is to install both the power stations at city 1. \nSo stations will become [1,4,4,5,0].\n- City 0 is provided by 1 + 4 = 5 power stations.\n- City 1 is provided by 1 + 4 + 4 = 9 power stations.\n- City 2 is provided by 4 + 4 + 5 = 13 power stations.\n- City 3 is provided by 5 + 4 = 9 power stations.\n- City 4 is provided by 5 + 0 = 5 power stations.\nSo the minimum power of a city is 5.\nSince it is not possible to obtain a larger power, we return 5."
            },
            {
                "Input": "** stations = [4,4,4,4], r = 0, k = 3",
                "Output": "** 4",
                "Explanation": "** \nIt can be proved that we cannot make the minimum power of a city greater than 4."
            }
        ]
    },
    {
        "Title": "Maximum Count of Positive Integer and Negative Integer",
        "slug": "maximum-count-of-positive-integer-and-negative-integer",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [-2,-1,-1,1,2,3]",
                "Output": "** 3",
                "Explanation": "** There are 3 positive integers and 3 negative integers. The maximum count among them is 3."
            },
            {
                "Input": "** nums = [-3,-2,-1,0,0,1,2]",
                "Output": "** 3",
                "Explanation": "** There are 2 positive integers and 3 negative integers. The maximum count among them is 3."
            },
            {
                "Input": "** nums = [5,20,66,1314]",
                "Output": "** 4",
                "Explanation": "** There are 4 positive integers and 0 negative integers. The maximum count among them is 4."
            }
        ]
    },
    {
        "Title": "Maximal Score After Applying K Operations",
        "slug": "maximal-score-after-applying-k-operations",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [10,10,10,10,10], k = 5",
                "Output": "** 50",
                "Explanation": "** Apply the operation to each array element exactly once. The final score is 10 + 10 + 10 + 10 + 10 = 50."
            },
            {
                "Input": "** nums = [1,10,3,3,3], k = 3",
                "Output": "** 17",
                "Explanation": "** You can do the following operations:\nOperation 1: Select i = 1, so nums becomes [1,**4**,3,3,3]. Your score increases by 10.\nOperation 2: Select i = 1, so nums becomes [1,**2**,3,3,3]. Your score increases by 4.\nOperation 3: Select i = 2, so nums becomes [1,1,**1**,3,3]. Your score increases by 3.\nThe final score is 10 + 4 + 3 = 17."
            }
        ]
    },
    {
        "Title": "Make Number of Distinct Characters Equal",
        "slug": "make-number-of-distinct-characters-equal",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** word1 = \"ac\", word2 = \"b\"",
                "Output": "** false",
                "Explanation": "** Any pair of swaps would yield two distinct characters in the first string, and one in the second string."
            },
            {
                "Input": "** word1 = \"abcc\", word2 = \"aab\"",
                "Output": "** true",
                "Explanation": "** We swap index 2 of the first string with index 0 of the second string. The resulting strings are word1 = \"abac\" and word2 = \"cab\", which both have 3 distinct characters."
            },
            {
                "Input": "** word1 = \"abcde\", word2 = \"fghij\"",
                "Output": "** true",
                "Explanation": "** Both resulting strings will have 5 distinct characters, regardless of which indices we swap."
            }
        ]
    },
    {
        "Title": "Time to Cross a Bridge",
        "slug": "time-to-cross-a-bridge",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 1, k = 3, time = [[1,1,2,1],[1,1,3,1],[1,1,4,1]]",
                "Output": "** 6",
                "Explanation": "**\n\n\n\n```\n\nFrom 0 to 1 minutes: worker 2 crosses the bridge to the right.\nFrom 1 to 2 minutes: worker 2 picks up a box from the right warehouse.\nFrom 2 to 6 minutes: worker 2 crosses the bridge to the left.\nFrom 6 to 7 minutes: worker 2 puts a box at the left warehouse.\nThe whole process ends after 7 minutes. We return 6 because the problem asks for the instance of time at which the last worker reaches the left side of the bridge.\n\n```"
            },
            {
                "Input": "** n = 3, k = 2, time = [[1,9,1,8],[10,10,10,10]]",
                "Output": "** 50",
                "Explanation": "**\n\n\n\n```\n\nFrom 0  to 10: worker 1 crosses the bridge to the right.\nFrom 10 to 20: worker 1 picks up a box from the right warehouse.\nFrom 10 to 11: worker 0 crosses the bridge to the right.\nFrom 11 to 20: worker 0 picks up a box from the right warehouse.\nFrom 20 to 30: worker 1 crosses the bridge to the left.\nFrom 30 to 40: worker 1 puts a box at the left warehouse.\nFrom 30 to 31: worker 0 crosses the bridge to the left.\nFrom 31 to 39: worker 0 puts a box at the left warehouse.\nFrom 39 to 40: worker 0 crosses the bridge to the right.\nFrom 40 to 49: worker 0 picks up a box from the right warehouse.\nFrom 49 to 50: worker 0 crosses the bridge to the left.\n\n```\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n, k <= 104`\n* `time.length == k`\n* `time[i].length == 4`\n* `1 <= leftToRighti, pickOldi, rightToLefti, putNewi <= 1000`\n\n\nHints:\n    0. Try simulating this process.\n    1. We can use a priority queue to query over the least efficient worker.\nSimilarQuestions: [2332, 2462]"
            }
        ]
    },
    {
        "Title": "Difference Between Element Sum and Digit Sum of an Array",
        "slug": "difference-between-element-sum-and-digit-sum-of-an-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,15,6,3]",
                "Output": "** 9",
                "Explanation": "** \nThe element sum of nums is 1 + 15 + 6 + 3 = 25.\nThe digit sum of nums is 1 + 1 + 5 + 6 + 3 = 16.\nThe absolute difference between the element sum and digit sum is |25 - 16| = 9."
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 0",
                "Explanation": "**\nThe element sum of nums is 1 + 2 + 3 + 4 = 10.\nThe digit sum of nums is 1 + 2 + 3 + 4 = 10.\nThe absolute difference between the element sum and digit sum is |10 - 10| = 0."
            }
        ]
    },
    {
        "Title": "Increment Submatrices by One",
        "slug": "increment-submatrices-by-one",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3, queries = [[1,1,2,2],[0,0,1,1]]",
                "Output": "** [[1,1,0],[1,2,1],[0,1,1]]",
                "Explanation": "** The diagram above shows the initial matrix, the matrix after the first query, and the matrix after the second query.\n- In the first query, we add 1 to every element in the submatrix with the top left corner (1, 1) and bottom right corner (2, 2).\n- In the second query, we add 1 to every element in the submatrix with the top left corner (0, 0) and bottom right corner (1, 1)."
            },
            {
                "Input": "** n = 2, queries = [[0,0,1,1]]",
                "Output": "** [[1,1],[1,1]]",
                "Explanation": "** The diagram above shows the initial matrix and the matrix after the first query.\n- In the first query we add 1 to every element in the matrix."
            }
        ]
    },
    {
        "Title": "Count the Number of Good Subarrays",
        "slug": "count-the-number-of-good-subarrays",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,1,1,1,1], k = 10",
                "Output": "** 1",
                "Explanation": "** The only good subarray is the array nums itself."
            },
            {
                "Input": "** nums = [3,1,4,3,2,2,4], k = 2",
                "Output": "** 4",
                "Explanation": "** There are 4 different good subarrays:\n- [3,1,4,3,2,2] that has 2 pairs.\n- [3,1,4,3,2,2,4] that has 3 pairs.\n- [1,4,3,2,2,4] that has 2 pairs.\n- [4,3,2,2,4] that has 2 pairs."
            }
        ]
    },
    {
        "Title": "Difference Between Maximum and Minimum Price Sum",
        "slug": "difference-between-maximum-and-minimum-price-sum",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 6, edges = [[0,1],[1,2],[1,3],[3,4],[3,5]], price = [9,8,7,6,10,5]",
                "Output": "** 24",
                "Explanation": "** The diagram above denotes the tree after rooting it at node 2. The first part (colored in red) shows the path with the maximum price sum. The second part (colored in blue) shows the path with the minimum price sum.\n- The first path contains nodes [2,1,3,4]: the prices are [7,8,6,10], and the sum of the prices is 31.\n- The second path contains the node [2] with the price [7].\nThe difference between the maximum and minimum price sum is 24. It can be proved that 24 is the maximum cost."
            },
            {
                "Input": "** n = 3, edges = [[0,1],[1,2]], price = [1,1,1]",
                "Output": "** 2",
                "Explanation": "** The diagram above denotes the tree after rooting it at node 0. The first part (colored in red) shows the path with the maximum price sum. The second part (colored in blue) shows the path with the minimum price sum.\n- The first path contains nodes [0,1,2]: the prices are [1,1,1], and the sum of the prices is 3.\n- The second path contains node [0] with a price [1].\nThe difference between the maximum and minimum price sum is 2. It can be proved that 2 is the maximum cost."
            }
        ]
    },
    {
        "Title": "Minimum Common Value",
        "slug": "minimum-common-value",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums1 = [1,2,3], nums2 = [2,4]",
                "Output": "** 2",
                "Explanation": "** The smallest element common to both arrays is 2, so we return 2."
            },
            {
                "Input": "** nums1 = [1,2,3,6], nums2 = [2,3,4,5]",
                "Output": "** 2",
                "Explanation": "** There are two common elements in the array 2 and 3 out of which 2 is the smallest, so 2 is returned."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Make Array Equal II",
        "slug": "minimum-operations-to-make-array-equal-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums1 = [4,3,1,4], nums2 = [1,3,7,1], k = 3",
                "Output": "** 2",
                "Explanation": "** In 2 operations, we can transform nums1 to nums2.\n1st operation: i = 2, j = 0. After applying the operation, nums1 = [1,3,4,4].\n2nd operation: i = 2, j = 3. After applying the operation, nums1 = [1,3,7,1].\nOne can prove that it is impossible to make arrays equal in fewer operations."
            },
            {
                "Input": "** nums1 = [3,8,5,2], nums2 = [2,4,1,6], k = 1",
                "Output": "** -1",
                "Explanation": "** It can be proved that it is impossible to make the two arrays equal."
            }
        ]
    },
    {
        "Title": "Maximum Subsequence Score",
        "slug": "maximum-subsequence-score",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums1 = [1,3,3,2], nums2 = [2,1,3,4], k = 3",
                "Output": "** 12",
                "Explanation": "** \nThe four possible subsequence scores are:\n- We choose the indices 0, 1, and 2 with score = (1+3+3) * min(2,1,3) = 7.\n- We choose the indices 0, 1, and 3 with score = (1+3+2) * min(2,1,4) = 6. \n- We choose the indices 0, 2, and 3 with score = (1+3+2) * min(2,3,4) = 12. \n- We choose the indices 1, 2, and 3 with score = (3+3+2) * min(1,3,4) = 8.\nTherefore, we return the max score, which is 12."
            },
            {
                "Input": "** nums1 = [4,2,3,1,1], nums2 = [7,5,10,9,6], k = 1",
                "Output": "** 30",
                "Explanation": "** \nChoosing index 2 is optimal: nums1[2] * nums2[2] = 3 * 10 = 30 is the maximum possible score."
            }
        ]
    },
    {
        "Title": "Check if Point Is Reachable",
        "slug": "check-if-point-is-reachable",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** targetX = 6, targetY = 9",
                "Output": "** false",
                "Explanation": "** It is impossible to reach (6,9) from (1,1) using any sequence of moves, so false is returned."
            },
            {
                "Input": "** targetX = 4, targetY = 7",
                "Output": "** true",
                "Explanation": "** You can follow the path (1,1) -> (1,2) -> (1,4) -> (1,8) -> (1,7) -> (2,7) -> (4,7)."
            }
        ]
    },
    {
        "Title": "Alternating Digit Sum",
        "slug": "alternating-digit-sum",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 521",
                "Output": "** 4",
                "Explanation": "** (+5) + (-2) + (+1) = 4."
            },
            {
                "Input": "** n = 111",
                "Output": "** 1",
                "Explanation": "** (+1) + (-1) + (+1) = 1."
            },
            {
                "Input": "** n = 886996",
                "Output": "** 0",
                "Explanation": "** (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0."
            }
        ]
    },
    {
        "Title": "Sort the Students by Their Kth Score",
        "slug": "sort-the-students-by-their-kth-score",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** score = [[10,6,9,1],[7,5,11,2],[4,8,3,15]], k = 2",
                "Output": "** [[7,5,11,2],[10,6,9,1],[4,8,3,15]]",
                "Explanation": "** In the above diagram, S denotes the student, while E denotes the exam.\n- The student with index 1 scored 11 in exam 2, which is the highest score, so they got first place.\n- The student with index 0 scored 9 in exam 2, which is the second highest score, so they got second place.\n- The student with index 2 scored 3 in exam 2, which is the lowest score, so they got third place."
            },
            {
                "Input": "** score = [[3,4],[5,6]], k = 0",
                "Output": "** [[5,6],[3,4]]",
                "Explanation": "** In the above diagram, S denotes the student, while E denotes the exam.\n- The student with index 1 scored 5 in exam 0, which is the highest score, so they got first place.\n- The student with index 0 scored 3 in exam 0, which is the lowest score, so they got second place."
            }
        ]
    },
    {
        "Title": "Apply Bitwise Operations to Make Strings Equal",
        "slug": "apply-bitwise-operations-to-make-strings-equal",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"1010\", target = \"0110\"",
                "Output": "** true",
                "Explanation": "** We can do the following operations:\n- Choose i = 2 and j = 0. We have now s = \"**0**0**1**0\".\n- Choose i = 2 and j = 1. We have now s = \"0**11**0\".\nSince we can make s equal to target, we return true."
            },
            {
                "Input": "** s = \"11\", target = \"00\"",
                "Output": "** false",
                "Explanation": "** It is not possible to make s equal to target with any number of operations."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Split an Array",
        "slug": "minimum-cost-to-split-an-array",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,1,2,1,3,3], k = 2",
                "Output": "** 8",
                "Explanation": "** We split nums to have two subarrays: [1,2], [1,2,1,3,3].\nThe importance value of [1,2] is 2 + (0) = 2.\nThe importance value of [1,2,1,3,3] is 2 + (2 + 2) = 6.\nThe cost of the split is 2 + 6 = 8. It can be shown that this is the minimum possible cost among all the possible splits."
            },
            {
                "Input": "** nums = [1,2,1,2,1], k = 2",
                "Output": "** 6",
                "Explanation": "** We split nums to have two subarrays: [1,2], [1,2,1].\nThe importance value of [1,2] is 2 + (0) = 2.\nThe importance value of [1,2,1] is 2 + (2) = 4.\nThe cost of the split is 2 + 4 = 6. It can be shown that this is the minimum possible cost among all the possible splits."
            },
            {
                "Input": "** nums = [1,2,1,2,1], k = 5",
                "Output": "** 10",
                "Explanation": "** We split nums to have one subarray: [1,2,1,2,1].\nThe importance value of [1,2,1,2,1] is 5 + (3 + 2) = 10.\nThe cost of the split is 10. It can be shown that this is the minimum possible cost among all the possible splits."
            }
        ]
    },
    {
        "Title": "Count Distinct Numbers on Board",
        "slug": "count-distinct-numbers-on-board",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 5",
                "Output": "** 4",
                "Explanation": "** Initially, 5 is present on the board. \nThe next day, 2 and 4 will be added since 5 % 2 == 1 and 5 % 4 == 1. \nAfter that day, 3 will be added to the board because 4 % 3 == 1. \nAt the end of a billion days, the distinct numbers on the board will be 2, 3, 4, and 5."
            },
            {
                "Input": "** n = 3",
                "Output": "** 2",
                "Explanation": "** \nSince 3 % 2 == 1, 2 will be added to the board. \nAfter a billion days, the only two distinct numbers on the board are 2 and 3."
            }
        ]
    },
    {
        "Title": "Count Collisions of Monkeys on a Polygon",
        "slug": "count-collisions-of-monkeys-on-a-polygon",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3",
                "Output": "** 6",
                "Explanation": "**\n\n\nThere are 8 total possible movements.  \n\nTwo ways such that they collide at some point are:\n\n\n* Monkey 1 moves in a clockwise direction; monkey 2 moves in an anticlockwise direction; monkey 3 moves in a clockwise direction. Monkeys 1 and 2 collide.\n* Monkey 1 moves in an anticlockwise direction; monkey 2 moves in an anticlockwise direction; monkey 3 moves in a clockwise direction. Monkeys 1 and 3 collide."
            },
            {
                "Input": "** n = 4",
                "Output": "** 14\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `3 <= n <= 109`\n\n\nSimilarQuestions: [50]",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Put Marbles in Bags",
        "slug": "put-marbles-in-bags",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** weights = [1,3,5,1], k = 2",
                "Output": "** 4",
                "Explanation": "** \nThe distribution [1],[3,5,1] results in the minimal score of (1+1) + (3+1) = 6. \nThe distribution [1,3],[5,1], results in the maximal score of (1+3) + (5+1) = 10. \nThus, we return their difference 10 - 6 = 4."
            },
            {
                "Input": "** weights = [1, 3], k = 2",
                "Output": "** 0",
                "Explanation": "** The only distribution possible is [1],[3]. \nSince both the maximal and minimal score are the same, we return 0."
            }
        ]
    },
    {
        "Title": "Count Increasing Quadruplets",
        "slug": "count-increasing-quadruplets",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,3,2,4,5]",
                "Output": "** 2",
                "Explanation": "** \n- When i = 0, j = 1, k = 2, and l = 3, nums[i] < nums[k] < nums[j] < nums[l].\n- When i = 0, j = 1, k = 2, and l = 4, nums[i] < nums[k] < nums[j] < nums[l]. \nThere are no other quadruplets, so we return 2."
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 0",
                "Explanation": "** There exists only one quadruplet with i = 0, j = 1, k = 2, l = 3, but since nums[j] < nums[k], we return 0."
            }
        ]
    },
    {
        "Title": "Separate the Digits in an Array",
        "slug": "separate-the-digits-in-an-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [13,25,83,77]",
                "Output": "** [1,3,2,5,8,3,7,7]",
                "Explanation": "** \n- The separation of 13 is [1,3].\n- The separation of 25 is [2,5].\n- The separation of 83 is [8,3].\n- The separation of 77 is [7,7].\nanswer = [1,3,2,5,8,3,7,7]. Note that answer contains the separations in the same order."
            },
            {
                "Input": "** nums = [7,1,3,9]",
                "Output": "** [7,1,3,9]",
                "Explanation": "** The separation of each integer in nums is itself.\nanswer = [7,1,3,9]."
            }
        ]
    },
    {
        "Title": "Maximum Number of Integers to Choose From a Range I",
        "slug": "maximum-number-of-integers-to-choose-from-a-range-i",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** banned = [1,6,5], n = 5, maxSum = 6",
                "Output": "** 2",
                "Explanation": "** You can choose the integers 2 and 4.\n2 and 4 are from the range [1, 5], both did not appear in banned, and their sum is 6, which did not exceed maxSum."
            },
            {
                "Input": "** banned = [1,2,3,4,5,6,7], n = 8, maxSum = 1",
                "Output": "** 0",
                "Explanation": "** You cannot choose any integer while following the mentioned conditions."
            },
            {
                "Input": "** banned = [11], n = 7, maxSum = 50",
                "Output": "** 7",
                "Explanation": "** You can choose the integers 1, 2, 3, 4, 5, 6, and 7.\nThey are from the range [1, 7], all did not appear in banned, and their sum is 28, which did not exceed maxSum."
            }
        ]
    },
    {
        "Title": "Maximize Win From Two Segments",
        "slug": "maximize-win-from-two-segments",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** prizePositions = [1,1,2,2,3,3,5], k = 2",
                "Output": "** 7",
                "Explanation": "** In this example, you can win all 7 prizes by selecting two segments [1, 3] and [3, 5]."
            },
            {
                "Input": "** prizePositions = [1,2,3,4], k = 0",
                "Output": "** 2",
                "Explanation": "** For this example, **one choice** for the segments is [3, 3] and [4, 4], and you will be able to get 2 prizes."
            }
        ]
    },
    {
        "Title": "Disconnect Path in a Binary Matrix by at Most One Flip",
        "slug": "disconnect-path-in-a-binary-matrix-by-at-most-one-flip",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[1,1,1],[1,0,0],[1,1,1]]",
                "Output": "** true",
                "Explanation": "** We can change the cell shown in the diagram above. There is no path from (0, 0) to (2, 2) in the resulting grid."
            },
            {
                "Input": "** grid = [[1,1,1],[1,0,1],[1,1,1]]",
                "Output": "** false",
                "Explanation": "** It is not possible to change at most one cell such that there is not path from (0, 0) to (2, 2)."
            }
        ]
    },
    {
        "Title": "Take Gifts From the Richest Pile",
        "slug": "take-gifts-from-the-richest-pile",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** gifts = [25,64,9,4,100], k = 4",
                "Output": "** 29",
                "Explanation": "** \nThe gifts are taken in the following way:\n- In the first second, the last pile is chosen and 10 gifts are left behind.\n- Then the second pile is chosen and 8 gifts are left behind.\n- After that the first pile is chosen and 5 gifts are left behind.\n- Finally, the last pile is chosen again and 3 gifts are left behind.\nThe final remaining gifts are [5,8,9,4,3], so the total number of gifts remaining is 29."
            },
            {
                "Input": "** gifts = [1,1,1,1], k = 4",
                "Output": "** 4",
                "Explanation": "** \nIn this case, regardless which pile you choose, you have to leave behind 1 gift in each pile. \nThat is, you can't take any pile with you. \nSo, the total gifts remaining are 4."
            }
        ]
    },
    {
        "Title": "Count Vowel Strings in Ranges",
        "slug": "count-vowel-strings-in-ranges",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** words = [\"aba\",\"bcb\",\"ece\",\"aa\",\"e\"], queries = [[0,2],[1,4],[1,1]]",
                "Output": "** [2,3,0]",
                "Explanation": "** The strings starting and ending with a vowel are \"aba\", \"ece\", \"aa\" and \"e\".\nThe answer to the query [0,2] is 2 (strings \"aba\" and \"ece\").\nto query [1,4] is 3 (strings \"ece\", \"aa\", \"e\").\nto query [1,1] is 0.\nWe return [2,3,0]."
            },
            {
                "Input": "** words = [\"a\",\"e\",\"i\"], queries = [[0,2],[0,1],[2,2]]",
                "Output": "** [3,2,1]",
                "Explanation": "** Every string satisfies the conditions, so we return [3,2,1]."
            }
        ]
    },
    {
        "Title": "House Robber IV",
        "slug": "house-robber-iv",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,3,5,9], k = 2",
                "Output": "** 5",
                "Explanation": "** \nThere are three ways to rob at least 2 houses:\n- Rob the houses at indices 0 and 2. Capability is max(nums[0], nums[2]) = 5.\n- Rob the houses at indices 0 and 3. Capability is max(nums[0], nums[3]) = 9.\n- Rob the houses at indices 1 and 3. Capability is max(nums[1], nums[3]) = 9.\nTherefore, we return min(5, 9, 9) = 5."
            },
            {
                "Input": "** nums = [2,7,9,3,1], k = 2",
                "Output": "** 2",
                "Explanation": "** There are 7 ways to rob the houses. The way which leads to minimum capability is to rob the house at index 0 and 4. Return max(nums[0], nums[4]) = 2."
            }
        ]
    },
    {
        "Title": "Rearranging Fruits",
        "slug": "rearranging-fruits",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** basket1 = [4,2,2,2], basket2 = [1,4,1,2]",
                "Output": "** 1",
                "Explanation": "** Swap index 1 of basket1 with index 0 of basket2, which has cost 1. Now basket1 = [4,1,2,2] and basket2 = [2,4,1,2]. Rearranging both the arrays makes them equal."
            },
            {
                "Input": "** basket1 = [2,3,4,1], basket2 = [3,2,5,1]",
                "Output": "** -1",
                "Explanation": "** It can be shown that it is impossible to make both the baskets equal."
            }
        ]
    },
    {
        "Title": "Find the Array Concatenation Value",
        "slug": "find-the-array-concatenation-value",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [7,52,2,4]",
                "Output": "** 596",
                "Explanation": "** Before performing any operation, nums is [7,52,2,4] and concatenation value is 0.\n - In the first operation:\nWe pick the first element, 7, and the last element, 4.\nTheir concatenation is 74, and we add it to the concatenation value, so it becomes equal to 74.\nThen we delete them from nums, so nums becomes equal to [52,2].\n - In the second operation:\nWe pick the first element, 52, and the last element, 2.\nTheir concatenation is 522, and we add it to the concatenation value, so it becomes equal to 596.\nThen we delete them from the nums, so nums becomes empty.\nSince the concatenation value is 596 so the answer is 596."
            },
            {
                "Input": "** nums = [5,14,13,8,12]",
                "Output": "** 673",
                "Explanation": "** Before performing any operation, nums is [5,14,13,8,12] and concatenation value is 0.\n - In the first operation:\nWe pick the first element, 5, and the last element, 12.\nTheir concatenation is 512, and we add it to the concatenation value, so it becomes equal to 512.\nThen we delete them from the nums, so nums becomes equal to [14,13,8].\n - In the second operation:\nWe pick the first element, 14, and the last element, 8.\nTheir concatenation is 148, and we add it to the concatenation value, so it becomes equal to 660.\nThen we delete them from the nums, so nums becomes equal to [13].\n - In the third operation:\nnums has only one element, so we pick 13 and add it to the concatenation value, so it becomes equal to 673.\nThen we delete it from nums, so nums become empty.\nSince the concatenation value is 673 so the answer is 673."
            }
        ]
    },
    {
        "Title": "Count the Number of Fair Pairs",
        "slug": "count-the-number-of-fair-pairs",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [0,1,7,4,4,5], lower = 3, upper = 6",
                "Output": "** 6",
                "Explanation": "** There are 6 fair pairs: (0,3), (0,4), (0,5), (1,3), (1,4), and (1,5)."
            },
            {
                "Input": "** nums = [1,7,9,2,5], lower = 11, upper = 11",
                "Output": "** 1",
                "Explanation": "** There is a single fair pair: (2,3)."
            }
        ]
    },
    {
        "Title": "Substring XOR Queries",
        "slug": "substring-xor-queries",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"101101\", queries = [[0,5],[1,2]]",
                "Output": "** [[0,2],[2,3]]",
                "Explanation": "** For the first query the substring in range [0,2] is **\"101\"** which has a decimal value of **`5`**, and **`5 ^ 0 = 5`**, hence the answer to the first query is [0,2]. In the second query, the substring in range [2,3] is **\"11\",** and has a decimal value of **3**, and **3 `^ 1 = 2`**.\u00a0So, [2,3] is returned for the second query."
            },
            {
                "Input": "** s = \"0101\", queries = [[12,8]]",
                "Output": "** [[-1,-1]]",
                "Explanation": "** In this example there is no substring that answers the query, hence [-1,-1] is returned."
            },
            {
                "Input": "** s = \"1\", queries = [[4,5]]",
                "Output": "** [[0,0]]",
                "Explanation": "** For this example, the substring in range [0,0] has a decimal value of **`1`**, and **`1 ^ 4 = 5`**. So, the answer is [0,0]."
            }
        ]
    },
    {
        "Title": "Subsequence With the Minimum Score",
        "slug": "subsequence-with-the-minimum-score",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"abacaba\", t = \"bzaa\"",
                "Output": "** 1",
                "Explanation": "** In this example, we remove the character \"z\" at index 1 (0-indexed).\nThe string t becomes \"baa\" which is a subsequence of the string \"abacaba\" and the score is 1 - 1 + 1 = 1.\nIt can be proven that 1 is the minimum score that we can achieve."
            },
            {
                "Input": "** s = \"cde\", t = \"xyz\"",
                "Output": "** 3",
                "Explanation": "** In this example, we remove characters \"x\", \"y\" and \"z\" at indices 0, 1, and 2 (0-indexed).\nThe string t becomes \"\" which is a subsequence of the string \"cde\" and the score is 2 - 0 + 1 = 3.\nIt can be proven that 3 is the minimum score that we can achieve."
            }
        ]
    },
    {
        "Title": "Maximum Difference by Remapping a Digit",
        "slug": "maximum-difference-by-remapping-a-digit",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num = 11891",
                "Output": "** 99009",
                "Explanation": "** \nTo achieve the maximum value, Bob can remap the digit 1 to the digit 9 to yield 99899.\nTo achieve the minimum value, Bob can remap the digit 1 to the digit 0, yielding 890.\nThe difference between these two numbers is 99009."
            },
            {
                "Input": "** num = 90",
                "Output": "** 99",
                "Explanation": "**\nThe maximum value that can be returned by the function is 99 (if 0 is replaced by 9) and the minimum value that can be returned by the function is 0 (if 9 is replaced by 0).\nThus, we return 99."
            }
        ]
    },
    {
        "Title": "Minimum Score by Changing Two Elements",
        "slug": "minimum-score-by-changing-two-elements",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,4,7,8,5]",
                "Output": "** 3",
                "Explanation": "**\n\n\n* Change `nums[0]` and `nums[1]` to be 6 so that `nums` becomes [6,6,7,8,5].\n* The low score is the minimum absolute difference: |6 - 6| = 0.\n* The high score is the maximum absolute difference: |8 - 5| = 3.\n* The sum of high and low score is 3."
            },
            {
                "Input": "** nums = [1,4,3]",
                "Output": "** 0",
                "Explanation": "**\n\n\n* Change `nums[1]` and `nums[2]` to 1 so that `nums` becomes [1,1,1].\n* The sum of maximum absolute difference and minimum absolute difference is 0.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `3 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\nHints:\n    0. Changing the minimum or maximum values will only minimize the score.\n    1. Think about what all possible pairs of minimum and maximum values can be changed to form the minimum score."
            }
        ]
    },
    {
        "Title": "Minimum Impossible OR",
        "slug": "minimum-impossible-or",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,1]",
                "Output": "** 4",
                "Explanation": "** 1 and 2 are already present in the array. We know that 3 is expressible, since nums[0] | nums[1] = 2 | 1 = 3. Since 4 is not expressible, we return 4."
            },
            {
                "Input": "** nums = [5,3,2]",
                "Output": "** 1",
                "Explanation": "** We can show that 1 is the smallest number that is not expressible."
            }
        ]
    },
    {
        "Title": "Handling Sum Queries After Update",
        "slug": "handling-sum-queries-after-update",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums1 = [1,0,1], nums2 = [0,0,0], queries = [[1,1,1],[2,1,0],[3,0,0]]",
                "Output": "** [3]",
                "Explanation": "** After the first query nums1 becomes [1,1,1]. After the second query, nums2 becomes [1,1,1], so the answer to the third query is 3. Thus, [3] is returned."
            },
            {
                "Input": "** nums1 = [1], nums2 = [5], queries = [[2,0,0],[3,0,0]]",
                "Output": "** [5]",
                "Explanation": "** After the first query, nums2 remains [5], so the answer to the second query is 5. Thus, [5] is returned."
            }
        ]
    },
    {
        "Title": "Merge Two 2D Arrays by Summing Values",
        "slug": "merge-two-2d-arrays-by-summing-values",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums1 = [[1,2],[2,3],[4,5]], nums2 = [[1,4],[3,2],[4,1]]",
                "Output": "** [[1,6],[2,3],[3,2],[4,6]]",
                "Explanation": "** The resulting array contains the following:\n- id = 1, the value of this id is 2 + 4 = 6.\n- id = 2, the value of this id is 3.\n- id = 3, the value of this id is 2.\n- id = 4, the value of this id is 5 + 1 = 6."
            },
            {
                "Input": "** nums1 = [[2,4],[3,6],[5,5]], nums2 = [[1,3],[4,3]]",
                "Output": "** [[1,3],[2,4],[3,6],[4,3],[5,5]]",
                "Explanation": "** There are no common ids, so we just include each id with its value in the resulting list."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Reduce an Integer to 0",
        "slug": "minimum-operations-to-reduce-an-integer-to-0",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 39",
                "Output": "** 3",
                "Explanation": "** We can do the following operations:\n- Add 20 = 1 to n, so now n = 40.\n- Subtract 23 = 8 from n, so now n = 32.\n- Subtract 25 = 32 from n, so now n = 0.\nIt can be shown that 3 is the minimum number of operations we need to make n equal to 0."
            },
            {
                "Input": "** n = 54",
                "Output": "** 3",
                "Explanation": "** We can do the following operations:\n- Add 21 = 2 to n, so now n = 56.\n- Add 23 = 8 to n, so now n = 64.\n- Subtract 26 = 64 from n, so now n = 0.\nSo the minimum number of operations is 3."
            }
        ]
    },
    {
        "Title": "Count the Number of Square-Free Subsets",
        "slug": "count-the-number-of-square-free-subsets",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,4,4,5]",
                "Output": "** 3",
                "Explanation": "** There are 3 square-free subsets in this example:\n- The subset consisting of the 0th element [3]. The product of its elements is 3, which is a square-free integer.\n- The subset consisting of the 3rd element [5]. The product of its elements is 5, which is a square-free integer.\n- The subset consisting of 0th and 3rd elements [3,5]. The product of its elements is 15, which is a square-free integer.\nIt can be proven that there are no more than 3 square-free subsets in the given array."
            },
            {
                "Input": "** nums = [1]",
                "Output": "** 1",
                "Explanation": "** There is 1 square-free subset in this example:\n- The subset consisting of the 0th element [1]. The product of its elements is 1, which is a square-free integer.\nIt can be proven that there is no more than 1 square-free subset in the given array."
            }
        ]
    },
    {
        "Title": "Find the String with LCP",
        "slug": "find-the-string-with-lcp",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** lcp = [[4,0,2,0],[0,3,0,1],[2,0,2,0],[0,1,0,1]]",
                "Output": "** \"abab\"",
                "Explanation": "** lcp corresponds to any 4 letter string with two alternating letters. The lexicographically smallest of them is \"abab\"."
            },
            {
                "Input": "** lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,1]]",
                "Output": "** \"aaaa\"",
                "Explanation": "** lcp corresponds to any 4 letter string with a single distinct letter. The lexicographically smallest of them is \"aaaa\"."
            },
            {
                "Input": "** lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,3]]",
                "Output": "** \"\"",
                "Explanation": "** lcp[3][3] cannot be equal to 3 since word[3,...,3] consists of only a single letter; Thus, no answer exists."
            }
        ]
    },
    {
        "Title": "Left and Right Sum Differences",
        "slug": "left-and-right-sum-differences",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [10,4,8,3]",
                "Output": "** [15,1,11,22]",
                "Explanation": "** The array leftSum is [0,10,14,22] and the array rightSum is [15,11,3,0].\nThe array answer is [|0 - 15|,|10 - 11|,|14 - 3|,|22 - 0|] = [15,1,11,22]."
            },
            {
                "Input": "** nums = [1]",
                "Output": "** [0]",
                "Explanation": "** The array leftSum is [0] and the array rightSum is [0].\nThe array answer is [|0 - 0|] = [0]."
            }
        ]
    },
    {
        "Title": "Find the Divisibility Array of a String",
        "slug": "find-the-divisibility-array-of-a-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** word = \"998244353\", m = 3",
                "Output": "** [1,1,0,0,0,1,1,0,0]",
                "Explanation": "** There are only 4 prefixes that are divisible by 3: \"9\", \"99\", \"998244\", and \"9982443\"."
            },
            {
                "Input": "** word = \"1010\", m = 10",
                "Output": "** [0,1,0,1]",
                "Explanation": "** There are only 2 prefixes that are divisible by 10: \"10\", and \"1010\"."
            }
        ]
    },
    {
        "Title": "Find the Maximum Number of Marked Indices",
        "slug": "find-the-maximum-number-of-marked-indices",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,5,2,4]",
                "Output": "** 2",
                "Explanation": "** In the first operation: pick i = 2 and j = 1, the operation is allowed because 2 * nums[2] <= nums[1]. Then mark index 2 and 1.\nIt can be shown that there's no other valid operation so the answer is 2."
            },
            {
                "Input": "** nums = [9,2,5,4]",
                "Output": "** 4",
                "Explanation": "** In the first operation: pick i = 3 and j = 0, the operation is allowed because 2 * nums[3] <= nums[0]. Then mark index 3 and 0.\nIn the second operation: pick i = 1 and j = 2, the operation is allowed because 2 * nums[1] <= nums[2]. Then mark index 1 and 2.\nSince there is no other operation, the answer is 4."
            },
            {
                "Input": "** nums = [7,6,8]",
                "Output": "** 0",
                "Explanation": "** There is no valid operation to do, so the answer is 0."
            }
        ]
    },
    {
        "Title": "Minimum Time to Visit a Cell In a Grid",
        "slug": "minimum-time-to-visit-a-cell-in-a-grid",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [[0,1,3,2],[5,1,2,5],[4,3,8,6]]",
                "Output": "** 7",
                "Explanation": "** One of the paths that we can take is the following:\n- at t = 0, we are on the cell (0,0).\n- at t = 1, we move to the cell (0,1). It is possible because grid[0][1] <= 1.\n- at t = 2, we move to the cell (1,1). It is possible because grid[1][1] <= 2.\n- at t = 3, we move to the cell (1,2). It is possible because grid[1][2] <= 3.\n- at t = 4, we move to the cell (1,1). It is possible because grid[1][1] <= 4.\n- at t = 5, we move to the cell (1,2). It is possible because grid[1][2] <= 5.\n- at t = 6, we move to the cell (1,3). It is possible because grid[1][3] <= 6.\n- at t = 7, we move to the cell (2,3). It is possible because grid[2][3] <= 7.\nThe final time is 7. It can be shown that it is the minimum time possible."
            },
            {
                "Input": "** grid = [[0,2,4],[3,2,1],[1,0,4]]",
                "Output": "** -1",
                "Explanation": "** There is no path from the top left to the bottom-right cell."
            }
        ]
    },
    {
        "Title": "Split With Minimum Sum",
        "slug": "split-with-minimum-sum",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num = 4325",
                "Output": "** 59",
                "Explanation": "** We can split 4325 so that num1 is 24 and num2 is 35, giving a sum of 59. We can prove that 59 is indeed the minimal possible sum."
            },
            {
                "Input": "** num = 687",
                "Output": "** 75",
                "Explanation": "** We can split 687 so that num1 is 68 and num2 is 7, which would give an optimal sum of 75."
            }
        ]
    },
    {
        "Title": "Count Total Number of Colored Cells",
        "slug": "count-total-number-of-colored-cells",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 1",
                "Output": "** 1",
                "Explanation": "** After 1 minute, there is only 1 blue cell, so we return 1."
            },
            {
                "Input": "** n = 2",
                "Output": "** 5",
                "Explanation": "** After 2 minutes, there are 4 colored cells on the boundary and 1 in the center, so we return 5."
            }
        ]
    },
    {
        "Title": "Count Ways to Group Overlapping Ranges",
        "slug": "count-ways-to-group-overlapping-ranges",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** ranges = [[6,10],[5,15]]",
                "Output": "** 2",
                "Explanation": "** \nThe two ranges are overlapping, so they must be in the same group.\nThus, there are two possible ways:\n- Put both the ranges together in group 1.\n- Put both the ranges together in group 2."
            },
            {
                "Input": "** ranges = [[1,3],[10,20],[2,5],[4,8]]",
                "Output": "** 4",
                "Explanation": "** \nRanges [1,3], and [2,5] are overlapping. So, they must be in the same group.\nAgain, ranges [2,5] and [4,8] are also overlapping. So, they must also be in the same group. \nThus, there are four possible ways to group them:\n- All the ranges in group 1.\n- All the ranges in group 2.\n- Ranges [1,3], [2,5], and [4,8] in group 1 and [10,20] in group 2.\n- Ranges [1,3], [2,5], and [4,8] in group 2 and [10,20] in group 1."
            }
        ]
    },
    {
        "Title": "Count Number of Possible Root Nodes",
        "slug": "count-number-of-possible-root-nodes",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** edges = [[0,1],[1,2],[1,3],[4,2]], guesses = [[1,3],[0,1],[1,0],[2,4]], k = 3",
                "Output": "** 3",
                "Explanation": "** \nRoot = 0, correct guesses = [1,3], [0,1], [2,4]\nRoot = 1, correct guesses = [1,3], [1,0], [2,4]\nRoot = 2, correct guesses = [1,3], [1,0], [2,4]\nRoot = 3, correct guesses = [1,0], [2,4]\nRoot = 4, correct guesses = [1,3], [1,0]\nConsidering 0, 1, or 2 as root node leads to 3 correct guesses."
            },
            {
                "Input": "** edges = [[0,1],[1,2],[2,3],[3,4]], guesses = [[1,0],[3,4],[2,1],[3,2]], k = 1",
                "Output": "** 5",
                "Explanation": "** \nRoot = 0, correct guesses = [3,4]\nRoot = 1, correct guesses = [1,0], [3,4]\nRoot = 2, correct guesses = [1,0], [2,1], [3,4]\nRoot = 3, correct guesses = [1,0], [2,1], [3,2], [3,4]\nRoot = 4, correct guesses = [1,0], [2,1], [3,2]\nConsidering any node as root will give at least 1 correct guess."
            }
        ]
    },
    {
        "Title": "Pass the Pillow",
        "slug": "pass-the-pillow",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 4, time = 5",
                "Output": "** 2",
                "Explanation": "** People pass the pillow in the following way: 1 -> 2 -> 3 -> 4 -> 3 -> 2.\nAfer five seconds, the pillow is given to the 2nd person."
            },
            {
                "Input": "** n = 3, time = 2",
                "Output": "** 3",
                "Explanation": "** People pass the pillow in the following way: 1 -> 2 -> 3.\nAfer two seconds, the pillow is given to the 3rd person."
            }
        ]
    },
    {
        "Title": "Kth Largest Sum in a Binary Tree",
        "slug": "kth-largest-sum-in-a-binary-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [5,8,9,2,1,3,7,4,6], k = 2",
                "Output": "** 13",
                "Explanation": "** The level sums are the following:\n- Level 1: 5.\n- Level 2: 8 + 9 = 17.\n- Level 3: 2 + 1 + 3 + 7 = 13.\n- Level 4: 4 + 6 = 10.\nThe 2nd largest level sum is 13."
            },
            {
                "Input": "** root = [1,2,null,3], k = 1",
                "Output": "** 3",
                "Explanation": "** The largest level sum is 3."
            }
        ]
    },
    {
        "Title": "Split the Array to Make Coprime Products",
        "slug": "split-the-array-to-make-coprime-products",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [4,7,8,15,3,5]",
                "Output": "** 2",
                "Explanation": "** The table above shows the values of the product of the first i + 1 elements, the remaining elements, and their gcd at each index i.\nThe only valid split is at index 2."
            },
            {
                "Input": "** nums = [4,7,15,8,3,5]",
                "Output": "** -1",
                "Explanation": "** The table above shows the values of the product of the first i + 1 elements, the remaining elements, and their gcd at each index i.\nThere is no valid split."
            }
        ]
    },
    {
        "Title": "Number of Ways to Earn Points",
        "slug": "number-of-ways-to-earn-points",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** target = 6, types = [[6,1],[3,2],[2,3]]",
                "Output": "** 7",
                "Explanation": "** You can earn 6 points in one of the seven ways:\n- Solve 6 questions of the 0th type: 1 + 1 + 1 + 1 + 1 + 1 = 6\n- Solve 4 questions of the 0th type and 1 question of the 1st type: 1 + 1 + 1 + 1 + 2 = 6\n- Solve 2 questions of the 0th type and 2 questions of the 1st type: 1 + 1 + 2 + 2 = 6\n- Solve 3 questions of the 0th type and 1 question of the 2nd type: 1 + 1 + 1 + 3 = 6\n- Solve 1 question of the 0th type, 1 question of the 1st type and 1 question of the 2nd type: 1 + 2 + 3 = 6\n- Solve 3 questions of the 1st type: 2 + 2 + 2 = 6\n- Solve 2 questions of the 2nd type: 3 + 3 = 6"
            },
            {
                "Input": "** target = 5, types = [[50,1],[50,2],[50,5]]",
                "Output": "** 4",
                "Explanation": "** You can earn 5 points in one of the four ways:\n- Solve 5 questions of the 0th type: 1 + 1 + 1 + 1 + 1 = 5\n- Solve 3 questions of the 0th type and 1 question of the 1st type: 1 + 1 + 1 + 2 = 5\n- Solve 1 questions of the 0th type and 2 questions of the 1st type: 1 + 2 + 2 = 5\n- Solve 1 question of the 2nd type: 5"
            },
            {
                "Input": "** target = 18, types = [[6,1],[3,2],[2,3]]",
                "Output": "** 1",
                "Explanation": "** You can only earn 18 points by answering all questions."
            }
        ]
    },
    {
        "Title": "Count the Number of Vowel Strings in Range",
        "slug": "count-the-number-of-vowel-strings-in-range",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** words = [\"are\",\"amy\",\"u\"], left = 0, right = 2",
                "Output": "** 2",
                "Explanation": "** \n- \"are\" is a vowel string because it starts with 'a' and ends with 'e'.\n- \"amy\" is not a vowel string because it does not end with a vowel.\n- \"u\" is a vowel string because it starts with 'u' and ends with 'u'.\nThe number of vowel strings in the mentioned range is 2."
            },
            {
                "Input": "** words = [\"hey\",\"aeo\",\"mu\",\"ooo\",\"artro\"], left = 1, right = 4",
                "Output": "** 3",
                "Explanation": "** \n- \"aeo\" is a vowel string because it starts with 'a' and ends with 'o'.\n- \"mu\" is not a vowel string because it does not start with a vowel.\n- \"ooo\" is a vowel string because it starts with 'o' and ends with 'o'.\n- \"artro\" is a vowel string because it starts with 'a' and ends with 'o'.\nThe number of vowel strings in the mentioned range is 3."
            }
        ]
    },
    {
        "Title": "Rearrange Array to Maximize Prefix Score",
        "slug": "rearrange-array-to-maximize-prefix-score",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,-1,0,1,-3,3,-3]",
                "Output": "** 6",
                "Explanation": "** We can rearrange the array into nums = [2,3,1,-1,-3,0,-3].\nprefix = [2,5,6,5,2,2,-1], so the score is 6.\nIt can be shown that 6 is the maximum score we can obtain."
            },
            {
                "Input": "** nums = [-2,-3,0]",
                "Output": "** 0",
                "Explanation": "** Any rearrangement of the array will result in a score of 0."
            }
        ]
    },
    {
        "Title": "Count the Number of Beautiful Subarrays",
        "slug": "count-the-number-of-beautiful-subarrays",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [4,3,1,2,4]",
                "Output": "** 2",
                "Explanation": "** There are 2 beautiful subarrays in nums: [4,3,1,2,4] and [4,3,1,2,4].\n- We can make all elements in the subarray [3,1,2] equal to 0 in the following way:\n  - Choose [3, 1, 2] and k = 1. Subtract 21 from both numbers. The subarray becomes [1, 1, 0].\n  - Choose [1, 1, 0] and k = 0. Subtract 20 from both numbers. The subarray becomes [0, 0, 0].\n- We can make all elements in the subarray [4,3,1,2,4] equal to 0 in the following way:\n  - Choose [4, 3, 1, 2, 4] and k = 2. Subtract 22 from both numbers. The subarray becomes [0, 3, 1, 2, 0].\n  - Choose [0, 3, 1, 2, 0] and k = 0. Subtract 20 from both numbers. The subarray becomes [0, 2, 0, 2, 0].\n  - Choose [0, 2, 0, 2, 0] and k = 1. Subtract 21 from both numbers. The subarray becomes [0, 0, 0, 0, 0]."
            },
            {
                "Input": "** nums = [1,10,4]",
                "Output": "** 0",
                "Explanation": "** There are no beautiful subarrays in nums."
            }
        ]
    },
    {
        "Title": "Minimum Time to Complete All Tasks",
        "slug": "minimum-time-to-complete-all-tasks",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** tasks = [[2,3,1],[4,5,1],[1,5,2]]",
                "Output": "** 2",
                "Explanation": "** \n- The first task can be run in the inclusive time range [2, 2].\n- The second task can be run in the inclusive time range [5, 5].\n- The third task can be run in the two inclusive time ranges [2, 2] and [5, 5].\nThe computer will be on for a total of 2 seconds."
            },
            {
                "Input": "** tasks = [[1,3,2],[2,5,3],[5,6,2]]",
                "Output": "** 4",
                "Explanation": "** \n- The first task can be run in the inclusive time range [2, 3].\n- The second task can be run in the inclusive time ranges [2, 3] and [5, 5].\n- The third task can be run in the two inclusive time range [5, 6].\nThe computer will be on for a total of 4 seconds."
            }
        ]
    },
    {
        "Title": "Distribute Money to Maximum Children",
        "slug": "distribute-money-to-maximum-children",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** money = 20, children = 3",
                "Output": "** 1",
                "Explanation": "** \nThe maximum number of children with 8 dollars will be 1. One of the ways to distribute the money is:\n- 8 dollars to the first child.\n- 9 dollars to the second child. \n- 3 dollars to the third child.\nIt can be proven that no distribution exists such that number of children getting 8 dollars is greater than 1."
            },
            {
                "Input": "** money = 16, children = 2",
                "Output": "** 2",
                "Explanation": "** Each child can be given 8 dollars."
            }
        ]
    },
    {
        "Title": "Maximize Greatness of an Array",
        "slug": "maximize-greatness-of-an-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,3,5,2,1,3,1]",
                "Output": "** 4",
                "Explanation": "** One of the optimal rearrangements is perm = [2,5,1,3,3,1,1].\nAt indices = 0, 1, 3, and 4, perm[i] > nums[i]. Hence, we return 4."
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 3",
                "Explanation": "** We can prove the optimal perm is [2,3,4,1].\nAt indices = 0, 1, and 2, perm[i] > nums[i]. Hence, we return 3."
            }
        ]
    },
    {
        "Title": "Find Score of an Array After Marking All Elements",
        "slug": "find-score-of-an-array-after-marking-all-elements",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,1,3,4,5,2]",
                "Output": "** 7",
                "Explanation": "** We mark the elements as follows:\n- 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [2,1,3,4,5,2].\n- 2 is the smallest unmarked element, so we mark it and its left adjacent element: [2,1,3,4,5,2].\n- 4 is the only remaining unmarked element, so we mark it: [2,1,3,4,5,2].\nOur score is 1 + 2 + 4 = 7."
            },
            {
                "Input": "** nums = [2,3,5,1,3,2]",
                "Output": "** 5",
                "Explanation": "** We mark the elements as follows:\n- 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [2,3,5,1,3,2].\n- 2 is the smallest unmarked element, since there are two of them, we choose the left-most one, so we mark the one at index 0 and its right adjacent element: [2,3,5,1,3,2].\n- 2 is the only remaining unmarked element, so we mark it: [2,3,5,1,3,2].\nOur score is 1 + 2 + 2 = 5."
            }
        ]
    },
    {
        "Title": "Minimum Time to Repair Cars",
        "slug": "minimum-time-to-repair-cars",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** ranks = [4,2,3,1], cars = 10",
                "Output": "** 16",
                "Explanation": "** \n- The first mechanic will repair two cars. The time required is 4 * 2 * 2 = 16 minutes.\n- The second mechanic will repair two cars. The time required is 2 * 2 * 2 = 8 minutes.\n- The third mechanic will repair two cars. The time required is 3 * 2 * 2 = 12 minutes.\n- The fourth mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.\nIt can be proved that the cars cannot be repaired in less than 16 minutes.\u200b\u200b\u200b\u200b\u200b"
            },
            {
                "Input": "** ranks = [5,1,8], cars = 6",
                "Output": "** 16",
                "Explanation": "** \n- The first mechanic will repair one car. The time required is 5 * 1 * 1 = 5 minutes.\n- The second mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.\n- The third mechanic will repair one car. The time required is 8 * 1 * 1 = 8 minutes.\nIt can be proved that the cars cannot be repaired in less than 16 minutes.\u200b\u200b\u200b\u200b\u200b"
            }
        ]
    },
    {
        "Title": "Number of Even and Odd Bits",
        "slug": "number-of-even-and-odd-bits",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 50",
                "Output": "** [1,2]",
                "Explanation": "**\n\n\nThe binary representation of 50 is `110010`.\n\n\nIt contains 1 on indices 1, 4, and 5."
            },
            {
                "Input": "** n = 2",
                "Output": "** [0,1]",
                "Explanation": "**\n\n\nThe binary representation of 2 is `10`.\n\n\nIt contains 1 only on index 1.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 1000`\n\n\nHints:\n    0. Maintain two integer variables, even and odd, to count the number of even and odd indices in the binary representation of integer n.\n    1. Divide n by 2 while n is positive, and if n modulo 2 is 1, add 1 to its corresponding variable.\nSimilarQuestions: [1295]"
            }
        ]
    },
    {
        "Title": "Check Knight Tour Configuration",
        "slug": "check-knight-tour-configuration",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[0,11,16,5,20],[17,4,19,10,15],[12,1,8,21,6],[3,18,23,14,9],[24,13,2,7,22]]",
                "Output": "** true",
                "Explanation": "** The above diagram represents the grid. It can be shown that it is a valid configuration."
            },
            {
                "Input": "** grid = [[0,3,6],[5,8,1],[2,7,4]]",
                "Output": "** false",
                "Explanation": "** The above diagram represents the grid. The 8th move of the knight is not valid considering its position after the 7th move."
            }
        ]
    },
    {
        "Title": "The Number of Beautiful Subsets",
        "slug": "the-number-of-beautiful-subsets",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,4,6], k = 2",
                "Output": "** 4",
                "Explanation": "** The beautiful subsets of the array nums are: [2], [4], [6], [2, 6].\nIt can be proved that there are only 4 beautiful subsets in the array [2,4,6]."
            },
            {
                "Input": "** nums = [1], k = 1",
                "Output": "** 1",
                "Explanation": "** The beautiful subset of the array nums is [1].\nIt can be proved that there is only 1 beautiful subset in the array [1]."
            }
        ]
    },
    {
        "Title": "Smallest Missing Non-negative Integer After Operations",
        "slug": "smallest-missing-non-negative-integer-after-operations",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,-10,7,13,6,8], value = 5",
                "Output": "** 4",
                "Explanation": "** One can achieve this result by applying the following operations:\n- Add value to nums[1] twice to make nums = [1,**0**,7,13,6,8]\n- Subtract value from nums[2] once to make nums = [1,0,**2**,13,6,8]\n- Subtract value from nums[3] twice to make nums = [1,0,2,**3**,6,8]\nThe MEX of nums is 4. It can be shown that 4 is the maximum MEX we can achieve."
            },
            {
                "Input": "** nums = [1,-10,7,13,6,8], value = 7",
                "Output": "** 2",
                "Explanation": "** One can achieve this result by applying the following operation:\n- subtract value from nums[2] once to make nums = [1,-10,**0**,13,6,8]\nThe MEX of nums is 2. It can be shown that 2 is the maximum MEX we can achieve."
            }
        ]
    },
    {
        "Title": "K Items With the Maximum Sum",
        "slug": "k-items-with-the-maximum-sum",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** numOnes = 3, numZeros = 2, numNegOnes = 0, k = 2",
                "Output": "** 2",
                "Explanation": "** We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 2 items with 1 written on them and get a sum in a total of 2.\nIt can be proven that 2 is the maximum possible sum."
            },
            {
                "Input": "** numOnes = 3, numZeros = 2, numNegOnes = 0, k = 4",
                "Output": "** 3",
                "Explanation": "** We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 3 items with 1 written on them, and 1 item with 0 written on it, and get a sum in a total of 3.\nIt can be proven that 3 is the maximum possible sum."
            }
        ]
    },
    {
        "Title": "Prime Subtraction Operation",
        "slug": "prime-subtraction-operation",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [4,9,6,10]",
                "Output": "** true",
                "Explanation": "** In the first operation: Pick i = 0 and p = 3, and then subtract 3 from nums[0], so that nums becomes [1,9,6,10].\nIn the second operation: i = 1, p = 7, subtract 7 from nums[1], so nums becomes equal to [1,2,6,10].\nAfter the second operation, nums is sorted in strictly increasing order, so the answer is true."
            },
            {
                "Input": "** nums = [6,8,11,12]",
                "Output": "** true",
                "Explanation": "** Initially nums is sorted in strictly increasing order, so we don't need to make any operations."
            },
            {
                "Input": "** nums = [5,8,3]",
                "Output": "** false",
                "Explanation": "** It can be proven that there is no way to perform operations to make nums sorted in strictly increasing order, so the answer is false."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Make All Array Elements Equal",
        "slug": "minimum-operations-to-make-all-array-elements-equal",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,1,6,8], queries = [1,5]",
                "Output": "** [14,10]",
                "Explanation": "** For the first query we can do the following operations:\n- Decrease nums[0] 2 times, so that nums = [1,1,6,8].\n- Decrease nums[2] 5 times, so that nums = [1,1,1,8].\n- Decrease nums[3] 7 times, so that nums = [1,1,1,1].\nSo the total number of operations for the first query is 2 + 5 + 7 = 14.\nFor the second query we can do the following operations:\n- Increase nums[0] 2 times, so that nums = [5,1,6,8].\n- Increase nums[1] 4 times, so that nums = [5,5,6,8].\n- Decrease nums[2] 1 time, so that nums = [5,5,5,8].\n- Decrease nums[3] 3 times, so that nums = [5,5,5,5].\nSo the total number of operations for the second query is 2 + 4 + 1 + 3 = 10."
            },
            {
                "Input": "** nums = [2,9,6,3], queries = [10]",
                "Output": "** [20]",
                "Explanation": "** We can increase each value in the array to 10. The total number of operations will be 8 + 1 + 4 + 7 = 20."
            }
        ]
    },
    {
        "Title": "Collect Coins in a Tree",
        "slug": "collect-coins-in-a-tree",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** coins = [1,0,0,0,0,1], edges = [[0,1],[1,2],[2,3],[3,4],[4,5]]",
                "Output": "** 2",
                "Explanation": "** Start at vertex 2, collect the coin at vertex 0, move to vertex 3, collect the coin at vertex 5 then move back to vertex 2."
            },
            {
                "Input": "** coins = [0,0,0,1,1,0,0,1], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[5,6],[5,7]]",
                "Output": "** 2",
                "Explanation": "** Start at vertex 0, collect the coins at vertices 4 and 3, move to vertex 2,  collect the coin at vertex 7, then move back to vertex 0."
            }
        ]
    },
    {
        "Title": "Form Smallest Number From Two Digit Arrays",
        "slug": "form-smallest-number-from-two-digit-arrays",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums1 = [4,1,3], nums2 = [5,7]",
                "Output": "** 15",
                "Explanation": "** The number 15 contains the digit 1 from nums1 and the digit 5 from nums2. It can be proven that 15 is the smallest number we can have."
            },
            {
                "Input": "** nums1 = [3,5,2,6], nums2 = [3,1,7]",
                "Output": "** 3",
                "Explanation": "** The number 3 contains the digit 3 which exists in both arrays."
            }
        ]
    },
    {
        "Title": "Find the Substring With Maximum Cost",
        "slug": "find-the-substring-with-maximum-cost",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"adaa\", chars = \"d\", vals = [-1000]",
                "Output": "** 2",
                "Explanation": "** The value of the characters \"a\" and \"d\" is 1 and -1000 respectively.\nThe substring with the maximum cost is \"aa\" and its cost is 1 + 1 = 2.\nIt can be proven that 2 is the maximum cost."
            },
            {
                "Input": "** s = \"abc\", chars = \"abc\", vals = [-1,-1,-1]",
                "Output": "** 0",
                "Explanation": "** The value of the characters \"a\", \"b\" and \"c\" is -1, -1, and -1 respectively.\nThe substring with the maximum cost is the empty substring \"\" and its cost is 0.\nIt can be proven that 0 is the maximum cost."
            }
        ]
    },
    {
        "Title": "Make K-Subarray Sums Equal",
        "slug": "make-k-subarray-sums-equal",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [1,4,1,3], k = 2",
                "Output": "** 1",
                "Explanation": "** we can do one operation on index 1 to make its value equal to 3.\nThe array after the operation is [1,3,1,3]\n- Subarray starts at index 0 is [1, 3], and its sum is 4 \n- Subarray starts at index 1 is [3, 1], and its sum is 4 \n- Subarray starts at index 2 is [1, 3], and its sum is 4 \n- Subarray starts at index 3 is [3, 1], and its sum is 4"
            },
            {
                "Input": "** arr = [2,5,5,7], k = 3",
                "Output": "** 5",
                "Explanation": "** we can do three operations on index 0 to make its value equal to 5 and two operations on index 3 to make its value equal to 5.\nThe array after the operations is [5,5,5,5]\n- Subarray starts at index 0 is [5, 5, 5], and its sum is 15\n- Subarray starts at index 1 is [5, 5, 5], and its sum is 15\n- Subarray starts at index 2 is [5, 5, 5], and its sum is 15\n- Subarray starts at index 3 is [5, 5, 5], and its sum is 15"
            }
        ]
    },
    {
        "Title": "Shortest Cycle in a Graph",
        "slug": "shortest-cycle-in-a-graph",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 7, edges = [[0,1],[1,2],[2,0],[3,4],[4,5],[5,6],[6,3]]",
                "Output": "** 3",
                "Explanation": "** The cycle with the smallest length is : 0 -> 1 -> 2 -> 0"
            },
            {
                "Input": "** n = 4, edges = [[0,1],[0,2]]",
                "Output": "** -1",
                "Explanation": "** There are no cycles in this graph."
            }
        ]
    },
    {
        "Title": "Find the Longest Balanced Substring of a Binary String",
        "slug": "find-the-longest-balanced-substring-of-a-binary-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"01000111\"",
                "Output": "** 6",
                "Explanation": "** The longest balanced substring is \"000111\", which has length 6."
            },
            {
                "Input": "** s = \"00111\"",
                "Output": "** 4",
                "Explanation": "** The longest balanced substring is \"0011\", which has length 4."
            },
            {
                "Input": "** s = \"111\"",
                "Output": "** 0",
                "Explanation": "** There is no balanced substring except the empty substring, so the answer is 0."
            }
        ]
    },
    {
        "Title": "Convert an Array Into a 2D Array With Conditions",
        "slug": "convert-an-array-into-a-2d-array-with-conditions",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,3,4,1,2,3,1]",
                "Output": "** [[1,3,4,2],[1,3],[1]]",
                "Explanation": "** We can create a 2D array that contains the following rows:\n- 1,3,4,2\n- 1,3\n- 1\nAll elements of nums were used, and each row of the 2D array contains distinct integers, so it is a valid answer.\nIt can be shown that we cannot have less than 3 rows in a valid array."
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** [[4,3,2,1]]",
                "Explanation": "** All elements of the array are distinct, so we can keep all of them in the first row of the 2D array."
            }
        ]
    },
    {
        "Title": "Mice and Cheese",
        "slug": "mice-and-cheese",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** reward1 = [1,1,3,4], reward2 = [4,4,1,1], k = 2",
                "Output": "** 15",
                "Explanation": "** In this example, the first mouse eats the 2nd\u00a0(0-indexed) and the 3rd\u00a0types of cheese, and the second mouse eats the 0th\u00a0and the 1st types of cheese.\nThe total points are 4 + 4 + 3 + 4 = 15.\nIt can be proven that 15 is the maximum total points that the mice can achieve."
            },
            {
                "Input": "** reward1 = [1,1], reward2 = [1,1], k = 2",
                "Output": "** 2",
                "Explanation": "** In this example, the first mouse eats the 0th\u00a0(0-indexed) and 1st\u00a0types of cheese, and the second mouse does not eat any cheese.\nThe total points are 1 + 1 = 2.\nIt can be proven that 2 is the maximum total points that the mice can achieve."
            }
        ]
    },
    {
        "Title": "Minimum Reverse Operations",
        "slug": "minimum-reverse-operations",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 4, p = 0, banned = [1,2], k = 4",
                "Output": "** [0,-1,-1,1]",
                "Explanation": "**\n\n\n* Initially 1 is placed at position 0 so the number of operations we need for position 0 is 0.\n* We can never place 1 on the banned positions, so the answer for positions 1 and 2 is -1.\n* Perform the operation of size 4 to reverse the whole array.\n* After a single operation 1 is at position 3 so the answer for position 3 is 1."
            },
            {
                "Input": "** n = 5, p = 0, banned = [2,4], k = 3",
                "Output": "** [0,-1,-1,-1,-1]",
                "Explanation": "**\n\n\n* Initially 1 is placed at position 0 so the number of operations we need for position 0 is 0.\n* We cannot perform the operation on the subarray positions `[0, 2]` because position 2 is in banned.\n* Because 1 cannot be set at position 2, it is impossible to set 1 at other positions in more operations."
            },
            {
                "Input": "** n = 4, p = 2, banned = [0,1,3], k = 1",
                "Output": "** [-1,-1,0,-1]",
                "Explanation": "**\n\n\nPerform operations of size 1 and 1 never changes its position.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 105`\n* `0 <= p <= n - 1`\n* `0 <= banned.length <= n - 1`\n* `0 <= banned[i] <= n - 1`\n* `1 <= k <= n`\n* `banned[i] != p`\n* all values in `banned`\u00a0are **unique**\n\n\nHints:\n    0. Can we use a breadth-first search to find the minimum number of operations?\n    1. Find the beginning and end indices of the subarray of size k that can be reversed to bring 1 to a particular position.\n    2. Can we visit every index or do we need to consider the parity of k?"
            }
        ]
    },
    {
        "Title": "Prime In Diagonal",
        "slug": "prime-in-diagonal",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [[1,2,3],[5,6,7],[9,10,11]]",
                "Output": "** 11",
                "Explanation": "** The numbers 1, 3, 6, 9, and 11 are the only numbers present on at least one of the diagonals. Since 11 is the largest prime, we return 11."
            },
            {
                "Input": "** nums = [[1,2,3],[5,17,7],[9,11,10]]",
                "Output": "** 17",
                "Explanation": "** The numbers 1, 3, 9, 10, and 17 are all present on at least one of the diagonals. 17 is the largest prime, so we return 17."
            }
        ]
    },
    {
        "Title": "Sum of Distances",
        "slug": "sum-of-distances",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,3,1,1,2]",
                "Output": "** [5,0,3,4,0]",
                "Explanation": "** \nWhen i = 0, nums[0] == nums[2] and nums[0] == nums[3]. Therefore, arr[0] = |0 - 2| + |0 - 3| = 5. \nWhen i = 1, arr[1] = 0 because there is no other index with value 3.\nWhen i = 2, nums[2] == nums[0] and nums[2] == nums[3]. Therefore, arr[2] = |2 - 0| + |2 - 3| = 3. \nWhen i = 3, nums[3] == nums[0] and nums[3] == nums[2]. Therefore, arr[3] = |3 - 0| + |3 - 2| = 4. \nWhen i = 4, arr[4] = 0 because there is no other index with value 2."
            },
            {
                "Input": "** nums = [0,5,3]",
                "Output": "** [0,0,0]",
                "Explanation": "** Since each element in nums is distinct, arr[i] = 0 for all i."
            }
        ]
    },
    {
        "Title": "Minimize the Maximum Difference of Pairs",
        "slug": "minimize-the-maximum-difference-of-pairs",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [10,1,2,7,1,3], p = 2",
                "Output": "** 1",
                "Explanation": "** The first pair is formed from the indices 1 and 4, and the second pair is formed from the indices 2 and 5. \nThe maximum difference is max(|nums[1] - nums[4]|, |nums[2] - nums[5]|) = max(0, 1) = 1. Therefore, we return 1."
            },
            {
                "Input": "** nums = [4,2,1,2], p = 1",
                "Output": "** 0",
                "Explanation": "** Let the indices 1 and 3 form a pair. The difference of that pair is |2 - 2| = 0, which is the minimum we can attain."
            }
        ]
    },
    {
        "Title": "Minimum Number of Visited Cells in a Grid",
        "slug": "minimum-number-of-visited-cells-in-a-grid",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [[3,4,2,1],[4,2,3,1],[2,1,0,0],[2,4,0,0]]",
                "Output": "** 4",
                "Explanation": "** The image above shows one of the paths that visits exactly 4 cells."
            },
            {
                "Input": "** grid = [[3,4,2,1],[4,2,1,1],[2,1,1,0],[3,4,1,0]]",
                "Output": "** 3",
                "Explanation": "** The image above shows one of the paths that visits exactly 3 cells."
            },
            {
                "Input": "** grid = [[2,1,0],[1,0,0]]",
                "Output": "** -1",
                "Explanation": "** It can be proven that no path exists."
            }
        ]
    },
    {
        "Title": "Check if Object Instance of Class",
        "slug": "check-if-object-instance-of-class",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** func = () => checkIfInstanceOf(new Date(), Date)",
                "Output": "** true",
                "Explanation": "** The object returned by the Date constructor is, by definition, an instance of Date."
            },
            {
                "Input": "** func = () => { class Animal {}; class Dog extends Animal {}; return checkIfInstanceOf(new Dog(), Animal); }",
                "Output": "** true",
                "Explanation": "**\nclass Animal {};\nclass Dog extends Animal {};\ncheckIfInstanceOf(new Dog(), Animal); // true\n\nDog is a subclass of Animal. Therefore, a Dog object is an instance of both Dog and Animal."
            },
            {
                "Input": "** func = () => checkIfInstanceOf(Date, Date)",
                "Output": "** false",
                "Explanation": "** A date constructor cannot logically be an instance of itself."
            },
            {
                "Input": "** func = () => checkIfInstanceOf(5, Number)",
                "Output": "** true",
                "Explanation": "** 5 is a Number. Note that the \"instanceof\" keyword would return false. However, it is still considered an instance of Number because it accesses the Number methods. For example \"toFixed()\"."
            }
        ]
    },
    {
        "Title": "Array Prototype Last",
        "slug": "array-prototype-last",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [null, {}, 3]",
                "Output": "** 3",
                "Explanation": "** Calling nums.last() should return the last element: 3."
            },
            {
                "Input": "** nums = []",
                "Output": "** -1",
                "Explanation": "** Because there are no elements, return -1."
            }
        ]
    },
    {
        "Title": "Counter",
        "slug": "counter",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nn = 10 \n[\"call\",\"call\",\"call\"]",
                "Output": "** [10,11,12]",
                "Explanation": "**counter() = 10 // The first time counter() is called, it returns n.\ncounter() = 11 // Returns 1 more than the previous time.\ncounter() = 12 // Returns 1 more than the previous time."
            },
            {
                "Input": "** \nn = -2\n[\"call\",\"call\",\"call\",\"call\",\"call\"]",
                "Output": "** [-2,-1,0,1,2]",
                "Explanation": "** counter() initially returns -2. Then increases after each sebsequent call."
            }
        ]
    },
    {
        "Title": "Sleep",
        "slug": "sleep",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** millis = 100",
                "Output": "** 100",
                "Explanation": "** It should return a promise that resolves after 100ms.\nlet t = Date.now();\nsleep(100).then(() => {\n  console.log(Date.now() - t); // 100\n});"
            },
            {
                "Input": "** millis = 200",
                "Output": "** 200",
                "Explanation": "** It should return a promise that resolves after 200ms."
            }
        ]
    },
    {
        "Title": "Cache With Time Limit",
        "slug": "cache-with-time-limit",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nactions = [\"TimeLimitedCache\", \"set\", \"get\", \"count\", \"get\"]\nvalues = [[], [1, 42, 100], [1], [], [1]]\ntimeDelays = [0, 0, 50, 50, 150]",
                "Output": "** [null, false, 42, 1, -1]",
                "Explanation": "**\nAt t=0, the cache is constructed.\nAt t=0, a key-value pair (1: 42) is added with a time limit of 100ms. The value doesn't exist so false is returned.\nAt t=50, key=1 is requested and the value of 42 is returned.\nAt t=50, count() is called and there is one active key in the cache.\nAt t=100, key=1 expires.\nAt t=150, get(1) is called but -1 is returned because the cache is empty."
            },
            {
                "Input": "** \nactions = [\"TimeLimitedCache\", \"set\", \"set\", \"get\", \"get\", \"get\", \"count\"]\nvalues = [[], [1, 42, 50], [1, 50, 100], [1], [1], [1], []]\ntimeDelays = [0, 0, 40, 50, 120, 200, 250]",
                "Output": "** [null, false, true, 50, 50, -1, 0]",
                "Explanation": "**\nAt t=0, the cache is constructed.\nAt t=0, a key-value pair (1: 42) is added with a time limit of 50ms. The value doesn't exist so false is returned.\nAt t=40, a key-value pair (1: 50) is added with a time limit of 100ms. A non-expired value already existed so true is returned and the old value was overwritten.\nAt t=50, get(1) is called which returned 50.\nAt t=120, get(1) is called which returned 50.\nAt t=140, key=1 expires.\nAt t=200, get(1) is called but the cache is empty so -1 is returned.\nAt t=250, count() returns 0 because the cache is empty."
            }
        ]
    },
    {
        "Title": "Memoize",
        "slug": "memoize",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "**\nfnName = \"sum\"\nactions = [\"call\",\"call\",\"getCallCount\",\"call\",\"getCallCount\"]\nvalues = [[2,2],[2,2],[],[1,2],[]]",
                "Output": "** [4,4,1,3,2]",
                "Explanation": "**\nconst sum = (a, b) => a + b;\nconst memoizedSum = memoize(sum);\nmemoizedSum(2, 2); // \"call\" - returns 4. sum() was called as (2, 2) was not seen before.\nmemoizedSum(2, 2); // \"call\" - returns 4. However sum() was not called because the same inputs were seen before.\n// \"getCallCount\" - total call count: 1\nmemoizedSum(1, 2); // \"call\" - returns 3. sum() was called as (1, 2) was not seen before.\n// \"getCallCount\" - total call count: 2"
            },
            {
                "Input": "**fnName = \"factorial\"\nactions = [\"call\",\"call\",\"call\",\"getCallCount\",\"call\",\"getCallCount\"]\nvalues = [[2],[3],[2],[],[3],[]]",
                "Output": "** [2,6,2,2,6,2]",
                "Explanation": "**\nconst factorial = (n) => (n <= 1) ? 1 : (n * factorial(n - 1));\nconst memoFactorial = memoize(factorial);\nmemoFactorial(2); // \"call\" - returns 2.\nmemoFactorial(3); // \"call\" - returns 6.\nmemoFactorial(2); // \"call\" - returns 2. However factorial was not called because 2 was seen before.\n// \"getCallCount\" - total call count: 2\nmemoFactorial(3); // \"call\" - returns 6. However factorial was not called because 3 was seen before.\n// \"getCallCount\" - total call count: 2"
            },
            {
                "Input": "**fnName = \"fib\"\nactions = [\"call\",\"getCallCount\"]\nvalues = [[5],[]]",
                "Output": "** [8,1]",
                "Explanation": "**fib(5) = 8 // \"call\"\n// \"getCallCount\" - total call count: 1"
            }
        ]
    },
    {
        "Title": "Snail Traversal",
        "slug": "snail-traversal",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nnums = [19, 10, 3, 7, 9, 8, 5, 2, 1, 17, 16, 14, 12, 18, 6, 13, 11, 20, 4, 15]\nrowsCount = 5\ncolsCount = 4",
                "Output": "** \n[\n [19,17,16,15],\n\u00a0[10,1,14,4],\n\u00a0[3,2,12,20],\n\u00a0[7,5,18,11],\n\u00a0[9,8,6,13]\n]",
                "Explanation": null
            },
            {
                "Input": "** \nnums = [1,2,3,4]\nrowsCount = 1\ncolsCount = 4",
                "Output": "** [[1, 2, 3, 4]]",
                "Explanation": null
            },
            {
                "Input": "** \nnums = [1,3]\nrowsCount = 2\ncolsCount = 2",
                "Output": "** []",
                "Explanation": "** 2 multiplied by 2 is 4, and the original array [1,3] has a length of 2; therefore, the input is invalid."
            }
        ]
    },
    {
        "Title": "Flatten Deeply Nested Array",
        "slug": "flatten-deeply-nested-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "arr = [1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]]\nn = 0",
                "Output": "[1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]]",
                "Explanation": "Passing a depth of n=0 will always result in the original array. This is because the smallest possible depth of a subarray (0) is not less than n=0. Thus, no subarray should be flattened."
            },
            {
                "Input": "arr = [1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]]\nn = 1",
                "Output": "[1, 2, 3, 4, 5, 6, 7, 8, [9, 10, 11], 12, 13, 14, 15]",
                "Explanation": "The subarrays starting with 4, 7, and 13 are all flattened. This is because their depth of 0 is less than 1. However [9, 10, 11] remains unflattened because its depth is 1."
            },
            {
                "Input": "arr = [[1, 2, 3], [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]]\nn = 2",
                "Output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
                "Explanation": "The maximum depth of any subarray is 1. Thus, all of them are flattened."
            }
        ]
    },
    {
        "Title": "Array Reduce Transformation",
        "slug": "array-reduce-transformation",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nnums = [1,2,3,4]\nfn = function sum(accum, curr) { return accum + curr; }\ninit = 0",
                "Output": "** 10",
                "Explanation": "**\ninitially, the value is init=0.\n(0) + nums[0] = 1\n(1) + nums[1] = 3\n(3) + nums[2] = 6\n(6) + nums[3] = 10\nThe final answer is 10."
            },
            {
                "Input": "** \nnums = [1,2,3,4]\nfn = function sum(accum, curr) { return accum + curr * curr; }\ninit = 100",
                "Output": "** 130",
                "Explanation": "**\ninitially, the value is init=100.\n(100) + nums[0] * nums[0] = 101\n(101) + nums[1] * nums[1] = 105\n(105) + nums[2] * nums[2] = 114\n(114) + nums[3] * nums[3] = 130\nThe final answer is 130."
            },
            {
                "Input": "** \nnums = []\nfn = function sum(accum, curr) { return 0; }\ninit = 25",
                "Output": "** 25",
                "Explanation": "** For empty arrays, the answer is always init."
            }
        ]
    },
    {
        "Title": "Debounce",
        "slug": "debounce",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nt = 50\ncalls = [\n\u00a0 {\"t\": 50, inputs: [1]},\n\u00a0 {\"t\": 75, inputs: [2]}\n]",
                "Output": "** [{\"t\": 125, inputs: [2]}]",
                "Explanation": "**\nlet start = Date.now();\nfunction log(...inputs) { \n\u00a0 console.log([Date.now() - start, inputs ])\n}\nconst dlog = debounce(log, 50);\nsetTimeout(() => dlog(1), 50);\nsetTimeout(() => dlog(2), 75);\n\nThe 1st call is cancelled by the 2nd call because the 2nd call occurred before 100ms\nThe 2nd call is delayed by 50ms and executed at 125ms. The inputs were (2)."
            },
            {
                "Input": "** \nt = 20\ncalls = [\n\u00a0 {\"t\": 50, inputs: [1]},\n\u00a0 {\"t\": 100, inputs: [2]}\n]",
                "Output": "** [{\"t\": 70, inputs: [1]}, {\"t\": 120, inputs: [2]}]",
                "Explanation": "**\nThe 1st call is delayed until 70ms. The inputs were (1).\nThe 2nd call is delayed until 120ms. The inputs were (2)."
            },
            {
                "Input": "** \nt = 150\ncalls = [\n\u00a0 {\"t\": 50, inputs: [1, 2]},\n\u00a0 {\"t\": 300, inputs: [3, 4]},\n\u00a0 {\"t\": 300, inputs: [5, 6]}\n]",
                "Output": "** [{\"t\": 200, inputs: [1,2]}, {\"t\": 450, inputs: [5, 6]}]",
                "Explanation": "**\nThe 1st call is delayed by 150ms and ran at 200ms. The inputs were (1, 2).\nThe 2nd call is cancelled by the 3rd call\nThe 3rd call is delayed by 150ms and ran at 450ms. The inputs were (5, 6)."
            }
        ]
    },
    {
        "Title": "Function Composition",
        "slug": "function-composition",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** functions = [x => x + 1, x => x * x, x => 2 * x], x = 4",
                "Output": "** 65",
                "Explanation": "**\nEvaluating from right to left ...\nStarting with x = 4.\n2 * (4) = 8\n(8) * (8) = 64\n(64) + 1 = 65"
            },
            {
                "Input": "** functions = [x => 10 * x, x => 10 * x, x => 10 * x], x = 1",
                "Output": "** 1000",
                "Explanation": "**\nEvaluating from right to left ...\n10 * (1) = 10\n10 * (10) = 100\n10 * (100) = 1000"
            },
            {
                "Input": "** functions = [], x = 42",
                "Output": "** 42",
                "Explanation": "**\nThe composition of zero functions is the identity function"
            }
        ]
    },
    {
        "Title": "Memoize II",
        "slug": "memoize-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** \ngetInputs = () => [[2,2],[2,2],[1,2]]\nfn = function (a, b) { return a + b; }",
                "Output": "** [{\"val\":4,\"calls\":1},{\"val\":4,\"calls\":1},{\"val\":3,\"calls\":2}]",
                "Explanation": "**\nconst inputs = getInputs();\nconst memoized = memoize(fn);\nfor (const arr of inputs) {\n  memoized(...arr);\n}\n\nFor the inputs of (2, 2): 2 + 2 = 4, and it required a call to fn().\nFor the inputs of (2, 2): 2 + 2 = 4, but those inputs were seen before so no call to fn() was required.\nFor the inputs of (1, 2): 1 + 2 = 3, and it required another call to fn() for a total of 2."
            },
            {
                "Input": "** \ngetInputs = () => [[{},{}],[{},{}],[{},{}]] \nfn = function (a, b) { return ({...a, ...b}); }",
                "Output": "** [{\"val\":{},\"calls\":1},{\"val\":{},\"calls\":2},{\"val\":{},\"calls\":3}]",
                "Explanation": "**\nMerging two empty objects will always result in an empty object. It may seem like there should only be 1\u00a0call to fn() because of cache-hits, however none of those objects are === to each other."
            },
            {
                "Input": "** \ngetInputs = () => { const o = {}; return [[o,o],[o,o],[o,o]]; }\nfn = function (a, b) { return ({...a, ...b}); }",
                "Output": "** [{\"val\":{},\"calls\":1},{\"val\":{},\"calls\":1},{\"val\":{},\"calls\":1}]",
                "Explanation": "**\nMerging two empty objects will always result in an empty object. The 2nd and 3rd third function calls result in a cache-hit. This is because every object passed in is identical."
            }
        ]
    },
    {
        "Title": "Group By",
        "slug": "group-by",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \narray = [\n\u00a0 {\"id\":\"1\"},\n\u00a0 {\"id\":\"1\"},\n\u00a0 {\"id\":\"2\"}\n], \nfn = function (item) { \n\u00a0 return item.id; \n}",
                "Output": "** \n{ \n\u00a0 \"1\": [{\"id\": \"1\"}, {\"id\": \"1\"}], \u00a0 \n\u00a0 \"2\": [{\"id\": \"2\"}] \n}",
                "Explanation": "**\nOutput is from array.groupBy(fn).\nThe selector function gets the \"id\" out of each item in the array.\nThere are two objects with an \"id\" of 1. Both of those objects are put in the first array.\nThere is one object with an \"id\" of 2. That object is put in the second array."
            },
            {
                "Input": "** \narray = [\n\u00a0 [1, 2, 3],\n\u00a0 [1, 3, 5],\n\u00a0 [1, 5, 9]\n]\nfn = function (list) { \n\u00a0 return String(list[0]); \n}",
                "Output": "** \n{ \n\u00a0 \"1\": [[1, 2, 3], [1, 3, 5], [1, 5, 9]] \n}",
                "Explanation": "**\nThe array can be of any type. In this case, the selector function defines the key as being the first element in the array. \nAll the arrays have 1 as their first element so they are grouped together.\n{\n  \"1\": [[1, 2, 3], [1, 3, 5], [1, 5, 9]]\n}"
            },
            {
                "Input": "** \narray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfn = function (n) { \n\u00a0 return String(n > 5);\n}",
                "Output": "**\n{\n\u00a0 \"true\": [6, 7, 8, 9, 10],\n\u00a0 \"false\": [1, 2, 3, 4, 5]\n}",
                "Explanation": "**\nThe selector function splits the array by whether each number is greater than 5."
            }
        ]
    },
    {
        "Title": "Filter Elements from Array",
        "slug": "filter-elements-from-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [0,10,20,30], fn = function greaterThan10(n) { return n > 10; }",
                "Output": "** [20,30]",
                "Explanation": "**\nconst newArray = filter(arr, fn); // [20, 30]\nThe function filters out values that are not greater than 10"
            },
            {
                "Input": "** arr = [1,2,3], fn = function firstIndex(n, i) { return i === 0; }",
                "Output": "** [1]",
                "Explanation": "**\nfn can also accept the index of each element\nIn this case, the function removes elements not at index 0"
            },
            {
                "Input": "** arr = [-2,-1,0,1,2], fn = function plusOne(n) { return n + 1 }",
                "Output": "** [-2,0,1,2]",
                "Explanation": "**\nFalsey values such as 0 should be filtered out"
            }
        ]
    },
    {
        "Title": "Apply Transform Over Each Element in Array",
        "slug": "apply-transform-over-each-element-in-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [1,2,3], fn = function plusone(n) { return n + 1; }",
                "Output": "** [2,3,4]",
                "Explanation": "**\nconst newArray = map(arr, plusone); // [2,3,4]\nThe function increases each value in the array by one."
            },
            {
                "Input": "** arr = [1,2,3], fn = function plusI(n, i) { return n + i; }",
                "Output": "** [1,3,5]",
                "Explanation": "** The function increases each value by the index it resides in."
            },
            {
                "Input": "** arr = [10,20,30], fn = function constant() { return 42; }",
                "Output": "** [42,42,42]",
                "Explanation": "** The function always returns 42."
            }
        ]
    },
    {
        "Title": "Promise Time Limit",
        "slug": "promise-time-limit",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nfn = async (n) => { \n\u00a0 await new Promise(res => setTimeout(res, 100)); \n\u00a0 return n * n; \n}\ninputs = [5]\nt = 50",
                "Output": "** {\"rejected\":\"Time Limit Exceeded\",\"time\":50}",
                "Explanation": "**\nconst limited = timeLimit(fn, t)\nconst start = performance.now()\nlet result;\ntry {\n\u00a0 \u00a0const res = await limited(...inputs)\n\u00a0 \u00a0result = {\"resolved\": res, \"time\": Math.floor(performance.now() - start)};\n} catch (err) {\n\u00a0  result = {\"rejected\": err, \"time\": Math.floor(performance.now() - start)};\n}\nconsole.log(result) // Output\n\nThe provided function is set to resolve after 100ms. However, the time limit is set to 50ms. It rejects at t=50ms because the time limit was reached."
            },
            {
                "Input": "** \nfn = async (n) => { \n\u00a0 await new Promise(res => setTimeout(res, 100)); \n\u00a0 return n * n; \n}\ninputs = [5]\nt = 150",
                "Output": "** {\"resolved\":25,\"time\":100}",
                "Explanation": "**\nThe function resolved 5 * 5 = 25 at t=100ms. The time limit is never reached."
            },
            {
                "Input": "** \nfn = async (a, b) => { \n\u00a0 await new Promise(res => setTimeout(res, 120)); \n\u00a0 return a + b; \n}\ninputs = [5,10]\nt = 150",
                "Output": "** {\"resolved\":15,\"time\":120}",
                "Explanation": "**\n\u200b\u200b\u200b\u200bThe function resolved 5 + 10 = 15 at t=120ms. The time limit is never reached."
            },
            {
                "Input": "** \nfn = async () => { \n\u00a0 throw \"Error\";\n}\ninputs = []\nt = 1000",
                "Output": "** {\"rejected\":\"Error\",\"time\":0}",
                "Explanation": "**\nThe function immediately throws an error."
            }
        ]
    },
    {
        "Title": "Find the Width of Columns of a Grid",
        "slug": "find-the-width-of-columns-of-a-grid",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** grid = [[1],[22],[333]]",
                "Output": "** [3]",
                "Explanation": "** In the 0th column, 333 is of length 3."
            },
            {
                "Input": "** grid = [[-15,1,3],[15,7,12],[5,6,-2]]",
                "Output": "** [3,1,2]",
                "Explanation": "** \nIn the 0th column, only -15 is of length 3.\nIn the 1st column, all integers are of length 1. \nIn the 2nd column, both 12 and -2 are of length 2."
            }
        ]
    },
    {
        "Title": "Find the Score of All Prefixes of an Array",
        "slug": "find-the-score-of-all-prefixes-of-an-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,3,7,5,10]",
                "Output": "** [4,10,24,36,56]",
                "Explanation": "** \nFor the prefix [2], the conversion array is [4] hence the score is 4\nFor the prefix [2, 3], the conversion array is [4, 6] hence the score is 10\nFor the prefix [2, 3, 7], the conversion array is [4, 6, 14] hence the score is 24\nFor the prefix [2, 3, 7, 5], the conversion array is [4, 6, 14, 12] hence the score is 36\nFor the prefix [2, 3, 7, 5, 10], the conversion array is [4, 6, 14, 12, 20] hence the score is 56"
            },
            {
                "Input": "** nums = [1,1,2,4,8,16]",
                "Output": "** [2,4,8,16,32,64]",
                "Explanation": "** \nFor the prefix [1], the conversion array is [2] hence the score is 2\nFor the prefix [1, 1], the conversion array is [2, 2] hence the score is 4\nFor the prefix [1, 1, 2], the conversion array is [2, 2, 4] hence the score is 8\nFor the prefix [1, 1, 2, 4], the conversion array is [2, 2, 4, 8] hence the score is 16\nFor the prefix [1, 1, 2, 4, 8], the conversion array is [2, 2, 4, 8, 16] hence the score is 32\nFor the prefix [1, 1, 2, 4, 8, 16], the conversion array is [2, 2, 4, 8, 16, 32] hence the score is 64"
            }
        ]
    },
    {
        "Title": "Cousins in Binary Tree II",
        "slug": "cousins-in-binary-tree-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** root = [5,4,9,1,10,null,7]",
                "Output": "** [0,0,0,7,7,null,11]",
                "Explanation": "** The diagram above shows the initial binary tree and the binary tree after changing the value of each node.\n- Node with value 5 does not have any cousins so its sum is 0.\n- Node with value 4 does not have any cousins so its sum is 0.\n- Node with value 9 does not have any cousins so its sum is 0.\n- Node with value 1 has a cousin with value 7 so its sum is 7.\n- Node with value 10 has a cousin with value 7 so its sum is 7.\n- Node with value 7 has cousins with values 1 and 10 so its sum is 11."
            },
            {
                "Input": "** root = [3,1,2]",
                "Output": "** [0,0,0]",
                "Explanation": "** The diagram above shows the initial binary tree and the binary tree after changing the value of each node.\n- Node with value 3 does not have any cousins so its sum is 0.\n- Node with value 1 does not have any cousins so its sum is 0.\n- Node with value 2 does not have any cousins so its sum is 0."
            }
        ]
    },
    {
        "Title": "Design Graph With Shortest Path Calculator",
        "slug": "design-graph-with-shortest-path-calculator",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "[\"Graph\", \"shortestPath\", \"shortestPath\", \"addEdge\", \"shortestPath\"]\n[[4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]], [3, 2], [0, 3], [[1, 3, 4]], [0, 3]]",
                "Output": "[null, 6, -1, null, 6]",
                "Explanation": "Graph g = new Graph(4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]);\ng.shortestPath(3, 2); // return 6. The shortest path from 3 to 2 in the first diagram above is 3 -> 0 -> 1 -> 2 with a total cost of 3 + 2 + 1 = 6.\ng.shortestPath(0, 3); // return -1. There is no path from 0 to 3.\ng.addEdge([1, 3, 4]); // We add an edge from node 1 to node 3, and we get the second diagram above.\ng.shortestPath(0, 3); // return 6. The shortest path from 0 to 3 now is 0 -> 1 -> 3 with a total cost of 2 + 4 = 6."
            }
        ]
    },
    {
        "Title": "Row With Maximum Ones",
        "slug": "row-with-maximum-ones",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** mat = [[0,1],[1,0]]",
                "Output": "** [0,1]",
                "Explanation": "** Both rows have the same number of 1's. So we return the index of the smaller row, 0, and the maximum count of ones (1). So, the answer is [0,1]."
            },
            {
                "Input": "** mat = [[0,0,0],[0,1,1]]",
                "Output": "** [1,2]",
                "Explanation": "** The row indexed 1 has the maximum count of ones (2). So we return its index, 1, and the count. So, the answer is [1,2]."
            },
            {
                "Input": "** mat = [[0,0],[1,1],[0,0]]",
                "Output": "** [1,2]",
                "Explanation": "** The row indexed 1 has the maximum count of ones (2). So the answer is [1,2]."
            }
        ]
    },
    {
        "Title": "Find the Maximum Divisibility Score",
        "slug": "find-the-maximum-divisibility-score",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [2,9,15,50], divisors = [5,3,7,2]",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe divisibility score of `divisors[0]` is 2 since `nums[2]` and `nums[3]` are divisible by 5.\n\n\nThe divisibility score of `divisors[1]` is 1 since only `nums[1]` is divisible by 3.\n\n\nThe divisibility score of `divisors[2]` is 0 since none of the numbers in `nums` is divisible by 7.\n\n\nThe divisibility score of `divisors[3]` is 2 since `nums[0]` and `nums[3]` are divisible by 2.\n\n\nAs `divisors[0]` and `divisors[3]` have the same divisibility score, we return the smaller one which is `divisors[3]`."
            },
            {
                "Input": "** nums = [4,7,9,3,9], divisors = [5,2,3]",
                "Output": "** 3",
                "Explanation": "**\n\n\nThe divisibility score of `divisors[0]` is 0 since none of numbers in `nums` is divisible by 5.\n\n\nThe divisibility score of `divisors[1]` is 1 since only `nums[0]` is divisible by 2.\n\n\nThe divisibility score of `divisors[2]` is 3 since `nums[2]`, `nums[3]` and `nums[4]` are divisible by 3."
            },
            {
                "Input": "** nums = [20,14,21,10], divisors = [10,16,20]",
                "Output": "** 10",
                "Explanation": "**\n\n\nThe divisibility score of `divisors[0]` is 0 since none of the numbers in `nums` is divisible by 10.\n\n\nThe divisibility score of `divisors[1]` is 0 since none of the numbers in `nums` is divisible by 16.\n\n\nThe divisibility score of `divisors[2]` is 0 since none of the numbers in `nums` is divisible by 20.\n\n\nAs `divisors[0]`, `divisors[1]` and `divisors[2]` all have the same divisibility score, we return the smallest one which is `divisors[0]`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length, divisors.length <= 1000`\n* `1 <= nums[i], divisors[i] <= 109`\n\n\nHints:\n    0. Consider counting for each element in divisors the count of elements in nums divisible by it using bruteforce.\n    1. After counting for each divisor, take the one with the maximum count. In case of a tie, take the minimum one of them.\nSimilarQuestions: [1018]"
            }
        ]
    },
    {
        "Title": "Minimum Additions to Make Valid String",
        "slug": "minimum-additions-to-make-valid-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** word = \"b\"",
                "Output": "** 2",
                "Explanation": "** Insert the letter \"a\" right before \"b\", and the letter \"c\" right next to \"b\" to obtain the valid string \"**a**b**c**\"."
            },
            {
                "Input": "** word = \"aaa\"",
                "Output": "** 6",
                "Explanation": "** Insert letters \"b\" and \"c\" next to each \"a\" to obtain the valid string \"a**bc**a**bc**a**bc**\"."
            },
            {
                "Input": "** word = \"abc\"",
                "Output": "** 0",
                "Explanation": "** word is already valid. No modifications are needed."
            }
        ]
    },
    {
        "Title": "Minimize the Total Price of the Trips",
        "slug": "minimize-the-total-price-of-the-trips",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 4, edges = [[0,1],[1,2],[1,3]], price = [2,2,10,6], trips = [[0,3],[2,1],[2,3]]",
                "Output": "** 23",
                "Explanation": "** The diagram above denotes the tree after rooting it at node 2. The first part shows the initial tree and the second part shows the tree after choosing nodes 0, 2, and 3, and making their price half.\nFor the 1st trip, we choose path [0,1,3]. The price sum of that path is 1 + 2 + 3 = 6.\nFor the 2nd trip, we choose path [2,1]. The price sum of that path is 2 + 5 = 7.\nFor the 3rd trip, we choose path [2,1,3]. The price sum of that path is 5 + 2 + 3 = 10.\nThe total price sum of all trips is 6 + 7 + 10 = 23.\nIt can be proven, that 23 is the minimum answer that we can achieve."
            },
            {
                "Input": "** n = 2, edges = [[0,1]], price = [2,2], trips = [[0,0]]",
                "Output": "** 1",
                "Explanation": "** The diagram above denotes the tree after rooting it at node 0. The first part shows the initial tree and the second part shows the tree after choosing node 0, and making its price half.\nFor the 1st trip, we choose path [0]. The price sum of that path is 1.\nThe total price sum of all trips is 1. It can be proven, that 1 is the minimum answer that we can achieve."
            }
        ]
    },
    {
        "Title": "Generate Fibonacci Sequence",
        "slug": "generate-fibonacci-sequence",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** callCount = 5",
                "Output": "** [0,1,1,2,3]",
                "Explanation": "**\nconst gen = fibGenerator();\ngen.next().value; // 0\ngen.next().value; // 1\ngen.next().value; // 1\ngen.next().value; // 2\ngen.next().value; // 3"
            },
            {
                "Input": "** callCount = 0",
                "Output": "** []",
                "Explanation": "** gen.next() is never called so nothing is outputted"
            }
        ]
    },
    {
        "Title": "Nested Array Generator",
        "slug": "nested-array-generator",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [[[6]],[1,3],[]]",
                "Output": "** [6,1,3]",
                "Explanation": "**\nconst generator = inorderTraversal(arr);\ngenerator.next().value; // 6\ngenerator.next().value; // 1\ngenerator.next().value; // 3\ngenerator.next().done; // true"
            },
            {
                "Input": "** arr = []",
                "Output": "** []",
                "Explanation": "** There are no integers so the generator doesn't yield anything."
            }
        ]
    },
    {
        "Title": "Design Cancellable Function",
        "slug": "design-cancellable-function",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** \ngeneratorFunction = function*() { \n\u00a0 return 42; \n}\ncancelledAt = 100",
                "Output": "** {\"resolved\": 42}",
                "Explanation": "**\nconst generator = generatorFunction();\nconst [cancel, promise] = cancellable(generator);\nsetTimeout(cancel, 100);\npromise.then(console.log); // resolves 42 at t=0ms\n\nThe generator immediately yields 42 and finishes. Because of that, the returned promise immediately resolves 42. Note that cancelling a finished generator does nothing."
            },
            {
                "Input": "**\ngeneratorFunction = function*() { \n\u00a0 const msg = yield new Promise(res => res(\"Hello\")); \n\u00a0 throw `Error: ${msg}`; \n}\ncancelledAt = null",
                "Output": "** {\"rejected\": \"Error: Hello\"}",
                "Explanation": "**\nA promise is yielded. The function handles this by waiting for it to resolve and then passes the resolved value back to the generator. Then an error is thrown which has the effect of causing the promise to reject with the same thrown error."
            },
            {
                "Input": "** \ngeneratorFunction = function*() { \n\u00a0 yield new Promise(res => setTimeout(res, 200)); \n\u00a0 return \"Success\"; \n}\ncancelledAt = 100",
                "Output": "** {\"rejected\": \"Cancelled\"}",
                "Explanation": "**\nWhile the function is waiting for the yielded promise to resolve, cancel() is called. This causes an error message to be sent back to the generator. Since this error is uncaught, the returned promise rejected with this error."
            },
            {
                "Input": "**\ngeneratorFunction = function*() { \n\u00a0 let result = 0; \n\u00a0 yield new Promise(res => setTimeout(res, 100));\n\u00a0 result += yield new Promise(res => res(1)); \n\u00a0 yield new Promise(res => setTimeout(res, 100)); \n\u00a0 result += yield new Promise(res => res(1)); \n\u00a0 return result;\n}\ncancelledAt = null",
                "Output": "** {\"resolved\": 2}",
                "Explanation": "**\n4 promises are yielded. Two of those promises have their values added to the result. After 200ms, the generator finishes with a value of 2, and that value is resolved by the returned promise."
            },
            {
                "Input": "** \ngeneratorFunction = function*() { \n\u00a0 let result = 0; \n\u00a0 try { \n\u00a0   yield new Promise(res => setTimeout(res, 100)); \n\u00a0   result += yield new Promise(res => res(1)); \n\u00a0   yield new Promise(res => setTimeout(res, 100)); \n\u00a0   result += yield new Promise(res => res(1)); \n\u00a0 } catch(e) { \n\u00a0   return result; \n\u00a0 } \n\u00a0 return result; \n}\ncancelledAt = 150",
                "Output": "** {\"resolved\": 1}",
                "Explanation": "**\nThe first two yielded promises resolve and cause the result to increment. However, at t=150ms, the generator is cancelled. The error sent to the generator is caught and the result is returned and finally resolved by the returned promise."
            },
            {
                "Input": "** \ngeneratorFunction = function*() { \n\u00a0 try { \n\u00a0   yield new Promise((resolve, reject) => reject(\"Promise Rejected\")); \n\u00a0 } catch(e) { \n\u00a0   let a = yield new Promise(resolve => resolve(2));\n    let b = yield new Promise(resolve => resolve(2)); \n\u00a0   return a + b; \n\u00a0 }; \n}\ncancelledAt = null",
                "Output": "** {\"resolved\": 4}",
                "Explanation": "**\nThe first yielded promise immediately rejects. This error is caught. Because the generator hasn't been cancelled, execution continues as usual. It ends up resolving 2 + 2 = 4."
            }
        ]
    },
    {
        "Title": "Calculate Delayed Arrival Time",
        "slug": "calculate-delayed-arrival-time",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arrivalTime = 15, delayedTime = 5",
                "Output": "** 20",
                "Explanation": "** Arrival time of the train was 15:00 hours. It is delayed by 5 hours. Now it will reach at 15+5 = 20 (20:00 hours)."
            },
            {
                "Input": "** arrivalTime = 13, delayedTime = 11",
                "Output": "** 0",
                "Explanation": "** Arrival time of the train was 13:00 hours. It is delayed by 11 hours. Now it will reach at 13+11=24 (Which is denoted by 00:00 in 24 hours format so return 0)."
            }
        ]
    },
    {
        "Title": "Sum Multiples",
        "slug": "sum-multiples",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 7",
                "Output": "** 21",
                "Explanation": "** Numbers in the range [1, 7] that are divisible by 3, 5, or 7 are 3, 5, 6, 7. The sum of these numbers is 21."
            },
            {
                "Input": "** n = 10",
                "Output": "** 40",
                "Explanation": "** Numbers in the range [1, 10] that are divisible by 3, 5, or 7 are 3, 5, 6, 7, 9, 10. The sum of these numbers is 40."
            },
            {
                "Input": "** n = 9",
                "Output": "** 30",
                "Explanation": "** Numbers in the range [1, 9] that are divisible by 3, 5, or 7 are 3, 5, 6, 7, 9. The sum of these numbers is 30."
            }
        ]
    },
    {
        "Title": "Sliding Subarray Beauty",
        "slug": "sliding-subarray-beauty",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,-1,-3,-2,3], k = 3, x = 2",
                "Output": "** [-1,-2,-2]",
                "Explanation": "** There are 3 subarrays with size k = 3. \nThe first subarray is [1, -1, -3] and the 2nd smallest negative integer is -1.\u00a0\nThe second subarray is [-1, -3, -2] and the 2nd smallest negative integer is -2.\u00a0\nThe third subarray is [-3, -2, 3]\u00a0and the 2nd smallest negative integer is -2."
            },
            {
                "Input": "** nums = [-1,-2,-3,-4,-5], k = 2, x = 2",
                "Output": "** [-1,-2,-3,-4]",
                "Explanation": "** There are 4 subarrays with size k = 2.\nFor [-1, -2], the 2nd smallest negative integer is -1.\nFor [-2, -3], the 2nd smallest negative integer is -2.\nFor [-3, -4], the 2nd smallest negative integer is -3.\nFor [-4, -5], the 2nd smallest negative integer is -4."
            },
            {
                "Input": "** nums = [-3,1,2,-3,0,-3], k = 2, x = 1",
                "Output": "** [-3,0,-3,-3,-3]",
                "Explanation": "** There are 5 subarrays with size k = 2**.**\nFor [-3, 1], the 1st smallest negative integer is -3.\nFor [1, 2], there is no negative integer so the beauty is 0.\nFor [2, -3], the 1st smallest negative integer is -3.\nFor [-3, 0], the 1st smallest negative integer is -3.\nFor [0, -3], the 1st smallest negative integer is -3."
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Make All Array Elements Equal to 1",
        "slug": "minimum-number-of-operations-to-make-all-array-elements-equal-to-1",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,6,3,4]",
                "Output": "** 4",
                "Explanation": "** We can do the following operations:\n- Choose index i = 2 and replace nums[2] with gcd(3,4) = 1. Now we have nums = [2,6,1,4].\n- Choose index i = 1 and replace nums[1] with gcd(6,1) = 1. Now we have nums = [2,1,1,4].\n- Choose index i = 0 and replace nums[0] with gcd(2,1) = 1. Now we have nums = [1,1,1,4].\n- Choose index i = 2 and replace nums[3] with gcd(1,4) = 1. Now we have nums = [1,1,1,1]."
            },
            {
                "Input": "** nums = [2,10,6,14]",
                "Output": "** -1",
                "Explanation": "** It can be shown that it is impossible to make all the elements equal to 1."
            }
        ]
    },
    {
        "Title": "Maximum Sum With Exactly K Elements ",
        "slug": "maximum-sum-with-exactly-k-elements",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5], k = 3",
                "Output": "** 18",
                "Explanation": "** We need to choose exactly 3 elements from nums to maximize the sum.\nFor the first iteration, we choose 5. Then sum is 5 and nums = [1,2,3,4,6]\nFor the second iteration, we choose 6. Then sum is 5 + 6 and nums = [1,2,3,4,7]\nFor the third iteration, we choose 7. Then sum is 5 + 6 + 7 = 18 and nums = [1,2,3,4,8]\nSo, we will return 18.\nIt can be proven, that 18 is the maximum answer that we can achieve."
            },
            {
                "Input": "** nums = [5,5,5], k = 2",
                "Output": "** 11",
                "Explanation": "** We need to choose exactly 2 elements from nums to maximize the sum.\nFor the first iteration, we choose 5. Then sum is 5 and nums = [5,5,6]\nFor the second iteration, we choose 6. Then sum is 5 + 6 = 11 and nums = [5,5,7]\nSo, we will return 11.\nIt can be proven, that 11 is the maximum answer that we can achieve."
            }
        ]
    },
    {
        "Title": "Find the Prefix Common Array of Two Arrays",
        "slug": "find-the-prefix-common-array-of-two-arrays",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** A = [1,3,2,4], B = [3,1,2,4]",
                "Output": "** [0,2,3,4]",
                "Explanation": "** At i = 0: no number is common, so C[0] = 0.\nAt i = 1: 1 and 3 are common in A and B, so C[1] = 2.\nAt i = 2: 1, 2, and 3 are common in A and B, so C[2] = 3.\nAt i = 3: 1, 2, 3, and 4 are common in A and B, so C[3] = 4."
            },
            {
                "Input": "** A = [2,3,1], B = [3,1,2]",
                "Output": "** [0,1,3]",
                "Explanation": "** At i = 0: no number is common, so C[0] = 0.\nAt i = 1: only 3 is common in A and B, so C[1] = 1.\nAt i = 2: 1, 2, and 3 are common in A and B, so C[2] = 3."
            }
        ]
    },
    {
        "Title": "Maximum Number of Fish in a Grid",
        "slug": "maximum-number-of-fish-in-a-grid",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[0,2,1,0],[4,0,0,3],[1,0,0,4],[0,3,2,0]]",
                "Output": "** 7",
                "Explanation": "** The fisher can start at cell (1,3) and collect 3 fish, then move to cell (2,3)\u00a0and collect 4 fish."
            },
            {
                "Input": "** grid = [[1,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,1]]",
                "Output": "** 1",
                "Explanation": "** The fisher can start at cells (0,0) or (3,3) and collect a single fish."
            }
        ]
    },
    {
        "Title": "Make Array Empty",
        "slug": "make-array-empty",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [3,4,-1]",
                "Output": "** 5",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2,4,3]",
                "Output": "** 5",
                "Explanation": null
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 3",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Determine the Winner of a Bowling Game",
        "slug": "determine-the-winner-of-a-bowling-game",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** player1 = [5,10,3,2], player2 = [6,5,7,3]",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe score of player 1 is 5 + 10 + 2\\*3 + 2\\*2 = 25.\n\n\nThe score of player 2 is 6 + 5 + 7 + 3 = 21."
            },
            {
                "Input": "** player1 = [3,5,7,6], player2 = [8,10,10,2]",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe score of player 1 is 3 + 5 + 7 + 6 = 21.\n\n\nThe score of player 2 is 8 + 10 + 2\\*10 + 2\\*2 = 42."
            },
            {
                "Input": "** player1 = [2,3], player2 = [4,1]",
                "Output": "** 0",
                "Explanation": "**\n\n\nThe score of player1 is 2 + 3 = 5.\n\n\nThe score of player2 is 4 + 1 = 5."
            },
            {
                "Input": "** player1 = [1,1,1,10,10,10,10], player2 = [10,10,10,10,1,1,1]",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe score of player1 is 1 + 1 + 1 + 10 + 2\\*10 + 2\\*10 + 2\\*10 = 73.\n\n\nThe score of player2 is 10 + 2\\*10 + 2\\*10 + 2\\*10 + 2\\*1 + 2\\*1 + 1 = 75.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == player1.length == player2.length`\n* `1 <= n <= 1000`\n* `0 <= player1[i], player2[i] <= 10`\n\n\nHints:\n    0. Think about simulating the process to calculate the answer.\n    1. Iterate over each element and check the previous two elements. See if one of them is 10 and can affect the score.\nSimilarQuestions: [1086]"
            }
        ]
    },
    {
        "Title": "First Completely Painted Row or Column",
        "slug": "first-completely-painted-row-or-column",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [1,3,4,2], mat = [[1,4],[2,3]]",
                "Output": "** 2",
                "Explanation": "** The moves are shown in order, and both the first row and second column of the matrix become fully painted at arr[2]."
            },
            {
                "Input": "** arr = [2,8,7,4,1,3,5,6,9], mat = [[3,2,5],[1,4,6],[8,7,9]]",
                "Output": "** 3",
                "Explanation": "** The second column becomes fully painted at arr[3]."
            }
        ]
    },
    {
        "Title": "Minimum Cost of a Path With Special Roads",
        "slug": "minimum-cost-of-a-path-with-special-roads",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** start = [1,1], target = [4,5], specialRoads = [[1,2,3,3,2],[3,4,4,5,1]]",
                "Output": "** 5",
                "Explanation": "** The optimal path from (1,1) to (4,5) is the following:\n- (1,1) -> (1,2). This move has a cost of |1 - 1| + |2 - 1| = 1.\n- (1,2) -> (3,3). This move uses the first special edge, the cost is 2.\n- (3,3) -> (3,4). This move has a cost of |3 - 3| + |4 - 3| = 1.\n- (3,4) -> (4,5). This move uses the second special edge, the cost is 1.\nSo the total cost is 1 + 2 + 1 + 1 = 5.\nIt can be shown that we cannot achieve a smaller total cost than 5."
            },
            {
                "Input": "** start = [3,2], target = [5,7], specialRoads = [[3,2,3,4,4],[3,3,5,5,5],[3,4,5,6,6]]",
                "Output": "** 7",
                "Explanation": "** It is optimal to not use any special edges and go directly from the starting to the ending position with a cost |5 - 3| + |7 - 2| = 7."
            }
        ]
    },
    {
        "Title": "Lexicographically Smallest Beautiful String",
        "slug": "lexicographically-smallest-beautiful-string",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"abcz\", k = 26",
                "Output": "** \"abda\"",
                "Explanation": "** The string \"abda\" is beautiful and lexicographically larger than the string \"abcz\".\nIt can be proven that there is no string that is lexicographically larger than the string \"abcz\", beautiful, and lexicographically smaller than the string \"abda\"."
            },
            {
                "Input": "** s = \"dc\", k = 4",
                "Output": "** \"\"",
                "Explanation": "** It can be proven that there is no string that is lexicographically larger than the string \"dc\" and is beautiful."
            }
        ]
    },
    {
        "Title": "Counter II",
        "slug": "counter-ii",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** init = 5, calls = [\"increment\",\"reset\",\"decrement\"]",
                "Output": "** [6,5,4]",
                "Explanation": "**\nconst counter = createCounter(5);\ncounter.increment(); // 6\ncounter.reset(); // 5\ncounter.decrement(); // 4"
            },
            {
                "Input": "** init = 0, calls = [\"increment\",\"increment\",\"decrement\",\"reset\",\"reset\"]",
                "Output": "** [1,2,1,0,0]",
                "Explanation": "**\nconst counter = createCounter(0);\ncounter.increment(); // 1\ncounter.increment(); // 2\ncounter.decrement(); // 1\ncounter.reset(); // 0\ncounter.reset(); // 0"
            }
        ]
    },
    {
        "Title": "Allow One Function Call",
        "slug": "allow-one-function-call",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** fn = (a,b,c) => (a + b + c), calls = [[1,2,3],[2,3,6]]",
                "Output": "** [{\"calls\":1,\"value\":6}]",
                "Explanation": "**\nconst onceFn = once(fn);\nonceFn(1, 2, 3); // 6\nonceFn(2, 3, 6); // undefined, fn was not called"
            },
            {
                "Input": "** fn = (a,b,c) => (a * b * c), calls = [[5,7,4],[2,3,6],[4,6,8]]",
                "Output": "** [{\"calls\":1,\"value\":140}]",
                "Explanation": "**\nconst onceFn = once(fn);\nonceFn(5, 7, 4); // 140\nonceFn(2, 3, 6); // undefined, fn was not called\nonceFn(4, 6, 8); // undefined, fn was not called"
            }
        ]
    },
    {
        "Title": "Create Hello World Function",
        "slug": "create-hello-world-function",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** args = []",
                "Output": "** \"Hello World\"",
                "Explanation": "**\nconst f = createHelloWorld();\nf(); // \"Hello World\"\n\nThe function returned by createHelloWorld should always return \"Hello World\"."
            },
            {
                "Input": "** args = [{},null,42]",
                "Output": "** \"Hello World\"",
                "Explanation": "**\nconst f = createHelloWorld();\nf({}, null, 42); // \"Hello World\"\n\nAny arguments could be passed to the function but it should still always return \"Hello World\"."
            }
        ]
    },
    {
        "Title": "Find the Distinct Difference Array",
        "slug": "find-the-distinct-difference-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** [-3,-1,1,3,5]",
                "Explanation": "** For index i = 0, there is 1 element in the prefix and 4 distinct elements in the suffix. Thus, diff[0] = 1 - 4 = -3.\nFor index i = 1, there are 2 distinct elements in the prefix and 3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1.\nFor index i = 2, there are 3 distinct elements in the prefix and 2 distinct elements in the suffix. Thus, diff[2] = 3 - 2 = 1.\nFor index i = 3, there are 4 distinct elements in the prefix and 1 distinct element in the suffix. Thus, diff[3] = 4 - 1 = 3.\nFor index i = 4, there are 5 distinct elements in the prefix and no elements in the suffix. Thus, diff[4] = 5 - 0 = 5."
            },
            {
                "Input": "** nums = [3,2,3,4,2]",
                "Output": "** [-2,-1,0,2,3]",
                "Explanation": "** For index i = 0, there is 1 element in the prefix and 3 distinct elements in the suffix. Thus, diff[0] = 1 - 3 = -2.\nFor index i = 1, there are 2 distinct elements in the prefix and 3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1.\nFor index i = 2, there are 2 distinct elements in the prefix and 2 distinct elements in the suffix. Thus, diff[2] = 2 - 2 = 0.\nFor index i = 3, there are 3 distinct elements in the prefix and 1 distinct element in the suffix. Thus, diff[3] = 3 - 1 = 2.\nFor index i = 4, there are 3 distinct elements in the prefix and no elements in the suffix. Thus, diff[4] = 3 - 0 = 3."
            }
        ]
    },
    {
        "Title": "Frequency Tracker",
        "slug": "frequency-tracker",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "[\"FrequencyTracker\", \"add\", \"add\", \"hasFrequency\"]\n[[], [3], [3], [2]]",
                "Output": "[null, null, null, true]",
                "Explanation": "FrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.add(3); // The data structure now contains [3]\nfrequencyTracker.add(3); // The data structure now contains [3, 3]\nfrequencyTracker.hasFrequency(2); // Returns true, because 3 occurs twice"
            },
            {
                "Input": "[\"FrequencyTracker\", \"add\", \"deleteOne\", \"hasFrequency\"]\n[[], [1], [1], [1]]",
                "Output": "[null, null, null, false]",
                "Explanation": "FrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.add(1); // The data structure now contains [1]\nfrequencyTracker.deleteOne(1); // The data structure becomes empty []\nfrequencyTracker.hasFrequency(1); // Returns false, because the data structure is empty"
            },
            {
                "Input": "[\"FrequencyTracker\", \"hasFrequency\", \"add\", \"hasFrequency\"]\n[[], [2], [3], [1]]",
                "Output": "[null, false, null, true]",
                "Explanation": "FrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.hasFrequency(2); // Returns false, because the data structure is empty\nfrequencyTracker.add(3); // The data structure now contains [3]\nfrequencyTracker.hasFrequency(1); // Returns true, because 3 occurs once"
            }
        ]
    },
    {
        "Title": "Number of Adjacent Elements With the Same Color",
        "slug": "number-of-adjacent-elements-with-the-same-color",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]]",
                "Output": "** [0,1,1,0,2]",
                "Explanation": "**\n\n\n* Initially array colors = [0,0,0,0], where 0 denotes uncolored elements of the array.\n* After the 1st query colors = [2,0,0,0]. The count of adjacent pairs with the same color is 0.\n* After the 2nd query colors = [2,2,0,0]. The count of adjacent pairs with the same color is 1.\n* After the 3rd query colors = [2,2,0,1]. The count of adjacent pairs with the same color is 1.\n* After the 4th query colors = [2,1,0,1]. The count of adjacent pairs with the same color is 0.\n* After the 5th query colors = [2,1,1,1]. The count of adjacent pairs with the same color is 2."
            },
            {
                "Input": "** n = 1, queries = [[0,100000]]",
                "Output": "** [0]",
                "Explanation": "**\n\n\nAfter the 1st query colors = [100000]. The count of adjacent pairs with the same color is 0.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 105`\n* `1 <= queries.length <= 105`\n* `queries[i].length\u00a0== 2`\n* `0 <= indexi\u00a0<= n - 1`\n* `1 <=\u00a0 colori\u00a0<= 105`\n\n\nHints:\n    0. Since at each query, only one element is being recolored, we just need to focus on its neighbors.\n    1. If an element that is changed on the i-th query had the same color as its right element answer decreases by 1. Similarly contributes its left element too.\n    2. After changing the color, if the element has the same color as its right element answer increases by 1. Similarly contributes its left element too."
            }
        ]
    },
    {
        "Title": "Make Costs of Paths Equal in a Binary Tree",
        "slug": "make-costs-of-paths-equal-in-a-binary-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 7, cost = [1,5,2,2,3,3,1]",
                "Output": "** 6",
                "Explanation": "** We can do the following increments:\n- Increase the cost of node 4 one time.\n- Increase the cost of node 3 three times.\n- Increase the cost of node 7 two times.\nEach path from the root to a leaf will have a total cost of 9.\nThe total increments we did is 1 + 3 + 2 = 6.\nIt can be shown that this is the minimum answer we can achieve."
            },
            {
                "Input": "** n = 3, cost = [5,3,3]",
                "Output": "** 0",
                "Explanation": "** The two paths already have equal total costs, so no increments are needed."
            }
        ]
    },
    {
        "Title": "Chunk Array",
        "slug": "chunk-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [1,2,3,4,5], size = 1",
                "Output": "** [[1],[2],[3],[4],[5]]",
                "Explanation": "** The arr has been split into subarrays each with 1 element."
            },
            {
                "Input": "** arr = [1,9,6,3,2], size = 3",
                "Output": "** [[1,9,6],[3,2]]",
                "Explanation": "** The arr has been split into subarrays with 3 elements. However, only two elements are left for the 2nd subarray."
            },
            {
                "Input": "** arr = [8,5,3,2,6], size = 6",
                "Output": "** [[8,5,3,2,6]]",
                "Explanation": "** Size is greater than arr.length thus all elements are in the first subarray."
            },
            {
                "Input": "** arr = [], size = 1",
                "Output": "** []",
                "Explanation": "** There are no elements to be chunked so an empty array is returned."
            }
        ]
    },
    {
        "Title": "Number of Senior Citizens",
        "slug": "number-of-senior-citizens",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"]",
                "Output": "** 2",
                "Explanation": "** The passengers at indices 0, 1, and 2 have ages 75, 92, and 40. Thus, there are 2 people who are over 60 years old."
            },
            {
                "Input": "** details = [\"1313579440F2036\",\"2921522980M5644\"]",
                "Output": "** 0",
                "Explanation": "** None of the passengers are older than 60."
            }
        ]
    },
    {
        "Title": "Sum in a Matrix",
        "slug": "sum-in-a-matrix",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [[7,2,1],[6,4,2],[6,5,3],[3,2,1]]",
                "Output": "** 15",
                "Explanation": "** In the first operation, we remove 7, 6, 6, and 3. We then add 7 to our score. Next, we remove 2, 4, 5, and 2. We add 5 to our score. Lastly, we remove 1, 2, 3, and 1. We add 3 to our score. Thus, our final score is 7 + 5 + 3 = 15."
            },
            {
                "Input": "** nums = [[1]]",
                "Output": "** 1",
                "Explanation": "** We remove 1 and add it to the answer. We return 1."
            }
        ]
    },
    {
        "Title": "Maximum OR",
        "slug": "maximum-or",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [12,9], k = 1",
                "Output": "** 30",
                "Explanation": "** If we apply the operation to index 1, our new array nums will be equal to [12,18]. Thus, we return the bitwise or of 12 and 18, which is 30."
            },
            {
                "Input": "** nums = [8,1,2], k = 2",
                "Output": "** 35",
                "Explanation": "** If we apply the operation twice on index 0, we yield a new array of [32,1,2]. Thus, we return 32|1|2 = 35."
            }
        ]
    },
    {
        "Title": "Power of Heroes",
        "slug": "power-of-heroes",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [2,1,4]",
                "Output": "** 141",
                "Explanation": "** \n1st\u00a0group: [2] has power = 22\u00a0* 2 = 8.\n2nd\u00a0group: [1] has power = 12 * 1 = 1. \n3rd\u00a0group: [4] has power = 42 * 4 = 64. \n4th\u00a0group: [2,1] has power = 22 * 1 = 4. \n5th\u00a0group: [2,4] has power = 42 * 2 = 32. \n6th\u00a0group: [1,4] has power = 42 * 1 = 16. \n\u200b\u200b\u200b\u200b\u200b\u200b\u200b7th\u00a0group: [2,1,4] has power = 42\u200b\u200b\u200b\u200b\u200b\u200b\u200b * 1 = 16. \nThe sum of powers of all groups is 8 + 1 + 64 + 4 + 32 + 16 + 16 = 141."
            },
            {
                "Input": "** nums = [1,1,1]",
                "Output": "** 7",
                "Explanation": "** A total of 7 groups are possible, and the power of each group will be 1. Therefore, the sum of the powers of all groups is 7."
            }
        ]
    },
    {
        "Title": "Find the Losers of the Circular Game",
        "slug": "find-the-losers-of-the-circular-game",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 5, k = 2",
                "Output": "** [4,5]",
                "Explanation": "** The game goes as follows:\n1) Start at 1st\u00a0friend and pass the ball to the friend who is 2 steps away from them - 3rd\u00a0friend.\n2) 3rd\u00a0friend passes the ball to the friend who is 4 steps away from them - 2nd\u00a0friend.\n3) 2nd\u00a0friend passes the ball to the friend who is 6 steps away from them  - 3rd\u00a0friend.\n4) The game ends as 3rd\u00a0friend receives the ball for the second time."
            },
            {
                "Input": "** n = 4, k = 4",
                "Output": "** [2,3,4]",
                "Explanation": "** The game goes as follows:\n1) Start at the 1st\u00a0friend and pass the ball to the friend who is 4 steps away from them - 1st\u00a0friend.\n2) The game ends as 1st\u00a0friend receives the ball for the second time."
            }
        ]
    },
    {
        "Title": "Maximum Number of Moves in a Grid",
        "slug": "maximum-number-of-moves-in-a-grid",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[2,4,3,5],[5,4,9,3],[3,4,2,11],[10,9,13,15]]",
                "Output": "** 3",
                "Explanation": "** We can start at the cell (0, 0) and make the following moves:\n- (0, 0) -> (0, 1).\n- (0, 1) -> (1, 2).\n- (1, 2) -> (2, 3).\nIt can be shown that it is the maximum number of moves that can be made."
            }
        ]
    },
    {
        "Title": "Call Function with Custom Context",
        "slug": "call-function-with-custom-context",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "**\nfn = function add(b) {\n  return this.a + b;\n}\nargs = [{\"a\": 5}, 7]",
                "Output": "** 12",
                "Explanation": "**\nfn.callPolyfill({\"a\": 5}, 7); // 12\ncallPolyfill sets the \"this\" context to {\"a\": 5}. 7 is passed as an argument."
            },
            {
                "Input": "** \nfn = function tax(price, taxRate) { \n\u00a0return `The cost of the ${this.item} is ${price * taxRate}`; \n}\nargs = [{\"item\": \"burger\"}, 10, 1.1]",
                "Output": "** \"The cost of the burger is 11\"",
                "Explanation": "** callPolyfill sets the \"this\" context to {\"item\": \"burger\"}. 10 and 1.1 are passed as additional arguments."
            }
        ]
    },
    {
        "Title": "Event Emitter",
        "slug": "event-emitter",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \nactions = [\"EventEmitter\", \"emit\", \"subscribe\", \"subscribe\", \"emit\"], \nvalues = [[], [\"firstEvent\", \"function cb1() { return 5; }\"],  [\"firstEvent\", \"function cb1() { return 6; }\"], [\"firstEvent\"]]",
                "Output": "** [[],[\"emitted\",[]],[\"subscribed\"],[\"subscribed\"],[\"emitted\",[5,6]]]",
                "Explanation": "** \nconst emitter = new EventEmitter();\nemitter.emit(\"firstEvent\"); // [], no callback are subscribed yet\nemitter.subscribe(\"firstEvent\", function cb1() { return 5; });\nemitter.subscribe(\"firstEvent\", function cb2() { return 6; });\nemitter.emit(\"firstEvent\"); // [5, 6], returns the output of cb1 and cb2"
            },
            {
                "Input": "** \nactions = [\"EventEmitter\", \"subscribe\", \"emit\", \"emit\"], \nvalues = [[], [\"firstEvent\", \"function cb1(...args) { return args.join(','); }\"], [\"firstEvent\", [1,2,3]], [\"firstEvent\", [3,4,6]]]",
                "Output": "** [[],[\"subscribed\"],[\"emitted\",[\"1,2,3\"]],[\"emitted\",[\"3,4,6\"]]]",
                "Explanation": "** Note that the emit method should be able to accept an OPTIONAL array of arguments.\n\nconst emitter = new EventEmitter();\nemitter.subscribe(\"firstEvent, function cb1(...args) { return args.join(','); });\nemitter.emit(\"firstEvent\", [1, 2, 3]); // [\"1,2,3\"]\nemitter.emit(\"firstEvent\", [3, 4, 6]); // [\"3,4,6\"]"
            },
            {
                "Input": "** \nactions = [\"EventEmitter\", \"subscribe\", \"emit\", \"unsubscribe\", \"emit\"], \nvalues = [[], [\"firstEvent\", \"(...args) => args.join(',')\"], [\"firstEvent\", [1,2,3]], [0], [\"firstEvent\", [4,5,6]]]",
                "Output": "** [[],[\"subscribed\"],[\"emitted\",[\"1,2,3\"]],[\"unsubscribed\",0],[\"emitted\",[]]]",
                "Explanation": "**\nconst emitter = new EventEmitter();\nconst sub = emitter.subscribe(\"firstEvent\", (...args) => args.join(','));\nemitter.emit(\"firstEvent\", [1, 2, 3]); // [\"1,2,3\"]\nsub.unsubscribe(); // undefined\nemitter.emit(\"firstEvent\", [4, 5, 6]); // [], there are no subscriptions"
            },
            {
                "Input": "** \nactions = [\"EventEmitter\", \"subscribe\", \"subscribe\", \"unsubscribe\", \"emit\"], \nvalues = [[], [\"firstEvent\", \"x => x + 1\"], [\"firstEvent\", \"x => x + 2\"], [0], [\"firstEvent\", [5]]]",
                "Output": "** [[],[\"subscribed\"],[\"emitted\",[\"1,2,3\"]],[\"unsubscribed\",0],[\"emitted\",[7]]]",
                "Explanation": "**\nconst emitter = new EventEmitter();\nconst sub1 = emitter.subscribe(\"firstEvent\", x => x + 1);\nconst sub2 = emitter.subscribe(\"firstEvent\", x => x + 2);\nsub1.unsubscribe(); // undefined\nemitter.emit(\"firstEvent\", [5]); // [7]"
            }
        ]
    },
    {
        "Title": "Array Wrapper",
        "slug": "array-wrapper",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [[1,2],[3,4]], operation = \"Add\"",
                "Output": "** 10",
                "Explanation": "**\nconst obj1 = new ArrayWrapper([1,2]);\nconst obj2 = new ArrayWrapper([3,4]);\nobj1 + obj2; // 10"
            },
            {
                "Input": "** nums = [[23,98,42,70]], operation = \"String\"",
                "Output": "** \"[23,98,42,70]\"",
                "Explanation": "**\nconst obj = new ArrayWrapper([23,98,42,70]);\nString(obj); // \"[23,98,42,70]\""
            },
            {
                "Input": "** nums = [[],[]], operation = \"Add\"",
                "Output": "** 0",
                "Explanation": "**\nconst obj1 = new ArrayWrapper([]);\nconst obj2 = new ArrayWrapper([]);\nobj1 + obj2; // 0"
            }
        ]
    },
    {
        "Title": "Minimum String Length After Removing Substrings",
        "slug": "minimum-string-length-after-removing-substrings",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"ABFCACDB\"",
                "Output": "** 2",
                "Explanation": "** We can do the following operations:\n- Remove the substring \"ABFCACDB\", so s = \"FCACDB\".\n- Remove the substring \"FCACDB\", so s = \"FCAB\".\n- Remove the substring \"FCAB\", so s = \"FC\".\nSo the resulting length of the string is 2.\nIt can be shown that it is the minimum length that we can obtain."
            },
            {
                "Input": "** s = \"ACBBD\"",
                "Output": "** 5",
                "Explanation": "** We cannot do any operations on the string so the length remains the same."
            }
        ]
    },
    {
        "Title": "Lexicographically Smallest Palindrome",
        "slug": "lexicographically-smallest-palindrome",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"egcfe\"",
                "Output": "** \"efcfe\"",
                "Explanation": "** The minimum number of operations to make \"egcfe\" a palindrome is 1, and the lexicographically smallest palindrome string we can get by modifying one character is \"efcfe\", by changing 'g'."
            },
            {
                "Input": "** s = \"abcd\"",
                "Output": "** \"abba\"",
                "Explanation": "** The minimum number of operations to make \"abcd\" a palindrome is 2, and the lexicographically smallest palindrome string we can get by modifying two characters is \"abba\"."
            },
            {
                "Input": "** s = \"seven\"",
                "Output": "** \"neven\"",
                "Explanation": "** The minimum number of operations to make \"seven\" a palindrome is 1, and the lexicographically smallest palindrome string we can get by modifying one character is \"neven\"."
            }
        ]
    },
    {
        "Title": "Find the Punishment Number of an Integer",
        "slug": "find-the-punishment-number-of-an-integer",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 10",
                "Output": "** 182",
                "Explanation": "** There are exactly 3 integers i that satisfy the conditions in the statement:\n- 1 since 1 * 1 = 1\n- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1.\n- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0.\nHence, the punishment number of 10 is 1 + 81 + 100 = 182"
            },
            {
                "Input": "** n = 37",
                "Output": "** 1478",
                "Explanation": "** There are exactly 4 integers i that satisfy the conditions in the statement:\n- 1 since 1 * 1 = 1. \n- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1. \n- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0. \n- 36 since 36 * 36 = 1296 and 1296 can be partitioned into 1 + 29 + 6.\nHence, the punishment number of 37 is 1 + 81 + 100 + 1296 = 1478"
            }
        ]
    },
    {
        "Title": "Return Length of Arguments Passed",
        "slug": "return-length-of-arguments-passed",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** args = [5]",
                "Output": "** 1",
                "Explanation": "**\nargumentsLength(5); // 1\n\nOne value was passed to the function so it should return 1."
            },
            {
                "Input": "** args = [{}, null, \"3\"]",
                "Output": "** 3",
                "Explanation": "** \nargumentsLength({}, null, \"3\"); // 3\n\nThree values were passed to the function so it should return 3."
            }
        ]
    },
    {
        "Title": "To Be Or Not To Be",
        "slug": "to-be-or-not-to-be",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** func = () => expect(5).toBe(5)",
                "Output": "** {\"value\": true}",
                "Explanation": "** 5 === 5 so this expression returns true."
            },
            {
                "Input": "** func = () => expect(5).toBe(null)",
                "Output": "** {\"error\": \"Not Equal\"}",
                "Explanation": "** 5 !== null so this expression throw the error \"Not Equal\"."
            },
            {
                "Input": "** func = () => expect(5).notToBe(null)",
                "Output": "** {\"value\": true}",
                "Explanation": "** 5 !== null so this expression returns true."
            }
        ]
    },
    {
        "Title": "Compact Object",
        "slug": "compact-object",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** obj = [null, 0, false, 1]",
                "Output": "** [1]",
                "Explanation": "** All falsy values have been removed from the array."
            },
            {
                "Input": "** obj = {\"a\": null, \"b\": [false, 1]}",
                "Output": "** {\"b\": [1]}",
                "Explanation": "** obj[\"a\"] and obj[\"b\"][0] had falsy values and were removed."
            },
            {
                "Input": "** obj = [null, 0, 5, [0], [false, 16]]",
                "Output": "** [5, [], [16]]",
                "Explanation": "** obj[0], obj[1], obj[3][0], and obj[4][0] were falsy and removed."
            }
        ]
    },
    {
        "Title": "Buy Two Chocolates",
        "slug": "buy-two-chocolates",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** prices = [1,2,2], money = 3",
                "Output": "** 0",
                "Explanation": "** Purchase the chocolates priced at 1 and 2 units respectively. You will have 3 - 3 = 0 units of money afterwards. Thus, we return 0."
            },
            {
                "Input": "** prices = [3,2,3], money = 3",
                "Output": "** 3",
                "Explanation": "** You cannot buy 2 chocolates without going in debt, so we return 3."
            }
        ]
    },
    {
        "Title": "Extra Characters in a String",
        "slug": "extra-characters-in-a-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"leetscode\", dictionary = [\"leet\",\"code\",\"leetcode\"]",
                "Output": "** 1",
                "Explanation": "** We can break s in two substrings: \"leet\" from index 0 to 3 and \"code\" from index 5 to 8. There is only 1 unused character (at index 4), so we return 1."
            },
            {
                "Input": "** s = \"sayhelloworld\", dictionary = [\"hello\",\"world\"]",
                "Output": "** 3",
                "Explanation": "** We can break s in two substrings: \"hello\" from index 3 to 7 and \"world\" from index 8 to 12. The characters at indices 0, 1, 2 are not used in any substring and thus are considered as extra characters. Hence, we return 3."
            }
        ]
    },
    {
        "Title": "Maximum Strength of a Group",
        "slug": "maximum-strength-of-a-group",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,-1,-5,2,5,-9]",
                "Output": "** 1350",
                "Explanation": "** One way to form a group of maximal strength is to group the students at indices [0,2,3,4,5]. Their strength is 3 * (-5) * 2 * 5 * (-9) = 1350, which we can show is optimal."
            },
            {
                "Input": "** nums = [-4,-5,-4]",
                "Output": "** 20",
                "Explanation": "** Group the students at indices [0, 1] . Then, we\u2019ll have a resulting strength of 20. We cannot achieve greater strength."
            }
        ]
    },
    {
        "Title": "Greatest Common Divisor Traversal",
        "slug": "greatest-common-divisor-traversal",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [2,3,6]",
                "Output": "** true",
                "Explanation": "** In this example, there are 3 possible pairs of indices: (0, 1), (0, 2), and (1, 2).\nTo go from index 0 to index 1, we can use the sequence of traversals 0 -> 2 -> 1, where we move from index 0 to index 2 because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 > 1, and then move from index 2 to index 1 because gcd(nums[2], nums[1]) = gcd(6, 3) = 3 > 1.\nTo go from index 0 to index 2, we can just go directly because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 > 1. Likewise, to go from index 1 to index 2, we can just go directly because gcd(nums[1], nums[2]) = gcd(3, 6) = 3 > 1."
            },
            {
                "Input": "** nums = [3,9,5]",
                "Output": "** false",
                "Explanation": "** No sequence of traversals can take us from index 0 to index 2 in this example. So, we return false."
            },
            {
                "Input": "** nums = [4,3,12,8]",
                "Output": "** true",
                "Explanation": "** There are 6 possible pairs of indices to traverse between: (0, 1), (0, 2), (0, 3), (1, 2), (1, 3), and (2, 3). A valid sequence of traversals exists for each pair, so we return true."
            }
        ]
    },
    {
        "Title": "Remove Trailing Zeros From a String",
        "slug": "remove-trailing-zeros-from-a-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num = \"51230100\"",
                "Output": "** \"512301\"",
                "Explanation": "** Integer \"51230100\" has 2 trailing zeros, we remove them and return integer \"512301\"."
            },
            {
                "Input": "** num = \"123\"",
                "Output": "** \"123\"",
                "Explanation": "** Integer \"123\" has no trailing zeros, we return integer \"123\"."
            }
        ]
    },
    {
        "Title": "Difference of Number of Distinct Values on Diagonals",
        "slug": "difference-of-number-of-distinct-values-on-diagonals",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[1,2,3],[3,1,5],[3,2,1]]",
                "Output": "** Output: [[1,1,0],[1,0,1],[0,1,1]]",
                "Explanation": "**\n\n\nTo calculate the `answer` cells:\n\n\n\n\n| answer | left-above elements | leftAbove | right-below elements | rightBelow | |leftAbove - rightBelow| |\n| --- | --- | --- | --- | --- | --- |\n| [0][0] | [] | 0 | [grid[1][1], grid[2][2]] | |{1, 1}| = 1 | 1 |\n| [0][1] | [] | 0 | [grid[1][2]] | |{5}| = 1 | 1 |\n| [0][2] | [] | 0 | [] | 0 | 0 |\n| [1][0] | [] | 0 | [grid[2][1]] | |{2}| = 1 | 1 |\n| [1][1] | [grid[0][0]] | |{1}| = 1 | [grid[2][2]] | |{1}| = 1 | 0 |\n| [1][2] | [grid[0][1]] | |{2}| = 1 | [] | 0 | 1 |\n| [2][0] | [] | 0 | [] | 0 | 0 |\n| [2][1] | [grid[1][0]] | |{3}| = 1 | [] | 0 | 1 |\n| [2][2] | [grid[0][0], grid[1][1]] | |{1, 1}| = 1 | [] | 0 | 1 |"
            },
            {
                "Input": "** grid = [[1]]",
                "Output": "** Output: [[0]]\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `1 <= m, n, grid[i][j] <= 50`",
                "Explanation": null
            }
        ]
    },
    {
        "Title": "Minimum Cost to Make All Characters Equal",
        "slug": "minimum-cost-to-make-all-characters-equal",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"0011\"",
                "Output": "** 2",
                "Explanation": "** Apply the second operation with i = 2 to obtain s = \"0000\" for a cost of 2. It can be shown that 2 is the minimum cost to make all characters equal."
            },
            {
                "Input": "** s = \"010101\"",
                "Output": "** 9",
                "Explanation": "** Apply the first operation with i = 2 to obtain s = \"101101\" for a cost of 3.\nApply the first operation with i = 1 to obtain s = \"011101\" for a cost of 2. \nApply the first operation with i = 0 to obtain s = \"111101\" for a cost of 1. \nApply the second operation with i = 4 to obtain s = \"111110\" for a cost of 2.\nApply the second operation with i = 5 to obtain s = \"111111\" for a cost of 1. \nThe total cost to make all characters equal is 9. It can be shown that 9 is the minimum cost to make all characters equal."
            }
        ]
    },
    {
        "Title": "Timeout Cancellation",
        "slug": "timeout-cancellation",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** fn = (x) => x * 5, args = [2], t = 20",
                "Output": "** [{\"time\": 20, \"returned\": 10}]",
                "Explanation": "** \nconst cancelTimeMs = 50;\nconst cancelFn = cancellable((x) => x * 5, [2], 20);\nsetTimeout(cancelFn, cancelTimeMs);\n\nThe cancellation was scheduled to occur after a delay of cancelTimeMs (50ms), which happened after the execution of fn(2) at 20ms."
            },
            {
                "Input": "** fn = (x) => x**2, args = [2], t = 100",
                "Output": "** []",
                "Explanation": "** \nconst cancelTimeMs = 50;\nconst cancelFn = cancellable((x) => x**2, [2], 100);\nsetTimeout(cancelFn, cancelTimeMs);\n\nThe cancellation was scheduled to occur after a delay of cancelTimeMs (50ms), which happened before the execution of fn(2) at 100ms, resulting in fn(2) never being called."
            },
            {
                "Input": "** fn = (x1, x2) => x1 * x2, args = [2,4], t = 30",
                "Output": "** [{\"time\": 30, \"returned\": 8}]",
                "Explanation": "**const cancelTimeMs = 100;\nconst cancelFn = cancellable((x1, x2) => x1 * x2, [2,4], 30);\nsetTimeout(cancelFn, cancelTimeMs);\n\nThe cancellation was scheduled to occur after a delay of cancelTimeMs (100ms), which happened after the execution of fn(2,4) at 30ms."
            }
        ]
    },
    {
        "Title": "Minimize String Length",
        "slug": "minimize-string-length",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"aaabc\"",
                "Output": "** 3",
                "Explanation": "** In this example, s is \"aaabc\". We can start by selecting the character 'a' at index 1. We then remove the closest 'a' to the left of index 1, which is at index 0, and the closest 'a' to the right of index 1, which is at index 2. After this operation, the string becomes \"abc\". Any further operation we perform on the string will leave it unchanged. Therefore, the length of the minimized string is 3."
            },
            {
                "Input": "** s = \"cbbd\"",
                "Output": "** 3",
                "Explanation": "** For this we can start with character 'b' at index 1. There is no occurrence of 'b' to the left of index 1, but there is one to the right at index 2, so we delete the 'b' at index 2. The string becomes \"cbd\" and further operations will leave it unchanged. Hence, the minimized length is 3."
            },
            {
                "Input": "** s = \"dddaaa\"",
                "Output": "** 2",
                "Explanation": "** For this, we can start with the character 'd' at index 1. The closest occurrence of a 'd' to its left is at index 0, and the closest occurrence of a 'd' to its right is at index 2. We delete both index 0 and 2, so the string becomes \"daaa\". In the new string, we can select the character 'a' at index 2. The closest occurrence of an 'a' to its left is at index 1, and the closest occurrence of an 'a' to its right is at index 3. We delete both of them, and the string becomes \"da\". We cannot minimize this further, so the minimized length is 2."
            }
        ]
    },
    {
        "Title": "Semi-Ordered Permutation",
        "slug": "semi-ordered-permutation",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [2,1,4,3]",
                "Output": "** 2",
                "Explanation": "** We can make the permutation semi-ordered using these sequence of operations: \n1 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3].\n2 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4].\nIt can be proved that there is no sequence of less than two operations that make nums a semi-ordered permutation."
            },
            {
                "Input": "** nums = [2,4,1,3]",
                "Output": "** 3",
                "Explanation": "** We can make the permutation semi-ordered using these sequence of operations:\n1 - swap i = 1 and j = 2. The permutation becomes [2,1,4,3].\n2 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3].\n3 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4].\nIt can be proved that there is no sequence of less than three operations that make nums a semi-ordered permutation."
            },
            {
                "Input": "** nums = [1,3,4,2,5]",
                "Output": "** 0",
                "Explanation": "** The permutation is already a semi-ordered permutation."
            }
        ]
    },
    {
        "Title": "Sum of Matrix After Queries",
        "slug": "sum-of-matrix-after-queries",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3, queries = [[0,0,1],[1,2,2],[0,2,3],[1,0,4]]",
                "Output": "** 23",
                "Explanation": "** The image above describes the matrix after each query. The sum of the matrix after all queries are applied is 23."
            },
            {
                "Input": "** n = 3, queries = [[0,0,4],[0,1,2],[1,0,1],[0,2,3],[1,2,1]]",
                "Output": "** 17",
                "Explanation": "** The image above describes the matrix after each query. The sum of the matrix after all queries are applied is 17."
            }
        ]
    },
    {
        "Title": "Count of Integers",
        "slug": "count-of-integers",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** num1 = \"1\", num2 = \"12\", min_sum = 1, max_sum = 8",
                "Output": "** 11",
                "Explanation": "** There are 11 integers whose sum of digits lies between 1 and 8 are 1,2,3,4,5,6,7,8,10,11, and 12. Thus, we return 11."
            },
            {
                "Input": "** num1 = \"1\", num2 = \"5\", min_sum = 1, max_sum = 5",
                "Output": "** 5",
                "Explanation": "** The 5 integers whose sum of digits lies between 1 and 5 are 1,2,3,4, and 5. Thus, we return 5."
            }
        ]
    },
    {
        "Title": "Execute Asynchronous Functions in Parallel",
        "slug": "execute-asynchronous-functions-in-parallel",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** functions = [\n\u00a0 () => new Promise(resolve => setTimeout(() => resolve(5), 200))\n]",
                "Output": "** {\"t\": 200, \"resolved\": [5]}",
                "Explanation": "** \npromiseAll(functions).then(console.log); // [5]\n\nThe single function was resolved at 200ms with a value of 5."
            },
            {
                "Input": "** functions = [\n    () => new Promise(resolve => setTimeout(() => resolve(1), 200)), \n    () => new Promise((resolve, reject) => setTimeout(() => reject(\"Error\"), 100))\n]",
                "Output": "** {\"t\": 100, \"rejected\": \"Error\"}",
                "Explanation": "** Since one of the promises rejected, the returned promise also rejected with the same error at the same time."
            },
            {
                "Input": "** functions = [\n    () => new Promise(resolve => setTimeout(() => resolve(4), 50)), \n    () => new Promise(resolve => setTimeout(() => resolve(10), 150)), \n    () => new Promise(resolve => setTimeout(() => resolve(16), 100))\n]",
                "Output": "** {\"t\": 150, \"resolved\": [4, 10, 16]}",
                "Explanation": "** All the promises resolved with a value. The returned promise resolved when the last promise resolved."
            }
        ]
    },
    {
        "Title": "Join Two Arrays by ID",
        "slug": "join-two-arrays-by-id",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** \narr1 = [\n\u00a0   {\"id\": 1, \"x\": 1},\n\u00a0   {\"id\": 2, \"x\": 9}\n], \narr2 = [\n    {\"id\": 3, \"x\": 5}\n]",
                "Output": "** \n[\n\u00a0   {\"id\": 1, \"x\": 1},\n\u00a0   {\"id\": 2, \"x\": 9},\n    {\"id\": 3, \"x\": 5}\n]",
                "Explanation": "** There are no duplicate ids so arr1 is simply concatenated with arr2."
            },
            {
                "Input": "** \narr1 = [\n    {\"id\": 1, \"x\": 2, \"y\": 3},\n    {\"id\": 2, \"x\": 3, \"y\": 6}\n], \narr2 = [\n    {\"id\": 2, \"x\": 10, \"y\": 20},\n    {\"id\": 3, \"x\": 0, \"y\": 0}\n]",
                "Output": "** \n[\n    {\"id\": 1, \"x\": 2, \"y\": 3},\n    {\"id\": 2, \"x\": 10, \"y\": 20},\n\u00a0   {\"id\": 3, \"x\": 0, \"y\": 0}\n]",
                "Explanation": "** The two objects with id=1 and id=3 are included in the result array without modifiction. The two objects with id=2 are merged together. The keys from arr2 override the values in arr1."
            },
            {
                "Input": "** \narr1 = [\n    {\"id\": 1, \"b\": {\"b\": 94},\"v\": [4, 3], \"y\": 48}\n]\narr2 = [\n    {\"id\": 1, \"b\": {\"c\": 84}, \"v\": [1, 3]}\n]",
                "Output": "** [\n    {\"id\": 1, \"b\": {\"c\": 84}, \"v\": [1, 3], \"y\": 48}\n]",
                "Explanation": "** The two objects with id=1 are merged together. For the keys \"b\" and \"v\" the values from arr2 are used. Since the key \"y\" only exists in arr1, that value is taken form arr1."
            }
        ]
    },
    {
        "Title": "Add Two Promises",
        "slug": "add-two-promises",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \npromise1 = new Promise(resolve => setTimeout(() => resolve(2), 20)), \npromise2 = new Promise(resolve => setTimeout(() => resolve(5), 60))",
                "Output": "** 7",
                "Explanation": "** The two input promises resolve with the values of 2 and 5 respectively. The returned promise should resolve with a value of 2 + 5 = 7. The time the returned promise resolves is not judged for this problem."
            },
            {
                "Input": "** \npromise1 = new Promise(resolve => setTimeout(() => resolve(10), 50)), \npromise2 = new Promise(resolve => setTimeout(() => resolve(-12), 30))",
                "Output": "** -2",
                "Explanation": "** The two input promises resolve with the values of 10 and -12 respectively. The returned promise should resolve with a value of 10 + -12 = -2."
            }
        ]
    },
    {
        "Title": "Sort By",
        "slug": "sort-by",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** arr = [5, 4, 1, 2, 3], fn = (x) => x",
                "Output": "** [1, 2, 3, 4, 5]",
                "Explanation": "** fn simply returns the number passed to it so the array is sorted in ascending order."
            },
            {
                "Input": "** arr = [{\"x\": 1}, {\"x\": 0}, {\"x\": -1}], fn = (d) => d.x",
                "Output": "** [{\"x\": -1}, {\"x\": 0}, {\"x\": 1}]",
                "Explanation": "** fn returns the value for the \"x\" key. So the array is sorted based on that value."
            },
            {
                "Input": "** arr = [[3, 4], [5, 2], [10, 1]], fn = (x) => x[1]",
                "Output": "** [[10, 1], [5, 2], [3, 4]]",
                "Explanation": "** arr is sorted in ascending order by number at index=1."
            }
        ]
    },
    {
        "Title": "Interval Cancellation",
        "slug": "interval-cancellation",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** fn = (x) => x * 2, args = [4], t = 35",
                "Output": "** \n[\n   {\"time\": 0, \"returned\": 8},\n   {\"time\": 35, \"returned\": 8},\n   {\"time\": 70, \"returned\": 8},\n   {\"time\": 105, \"returned\": 8},\n   {\"time\": 140, \"returned\": 8},\n   {\"time\": 175, \"returned\": 8}\n]",
                "Explanation": "** \nconst cancelTimeMs = 190;\nconst cancelFn = cancellable((x) => x * 2, [4], 35);\nsetTimeout(cancelFn, cancelTimeMs);\n\nEvery 35ms, fn(4) is called. Until t=190ms, then it is cancelled.\n1st fn call is at 0ms. fn(4) returns 8.\n2nd fn call is at 35ms. fn(4) returns 8.\n3rd fn call is at 70ms. fn(4) returns 8.\n4th fn call is at\u00a0105ms. fn(4) returns 8.\n5th fn call is at 140ms. fn(4) returns 8.\n6th fn call is at 175ms. fn(4) returns 8.\nCancelled at 190ms"
            },
            {
                "Input": "** fn = (x1, x2) => (x1 * x2), args = [2, 5], t = 30",
                "Output": "** \n[\n   {\"time\": 0, \"returned\": 10},\n   {\"time\": 30, \"returned\": 10},\n   {\"time\": 60, \"returned\": 10},\n   {\"time\": 90, \"returned\": 10},\n   {\"time\": 120, \"returned\": 10},\n   {\"time\": 150, \"returned\": 10}\n]",
                "Explanation": "** \nconst cancelTimeMs = 165; \nconst cancelFn = cancellable((x1, x2) => (x1 * x2), [2, 5], 30) \nsetTimeout(cancelFn, cancelTimeMs)\n\nEvery 30ms, fn(2, 5) is called. Until t=165ms, then it is cancelled.\n1st fn call is at 0ms\u00a0\n2nd fn call is at 30ms\u00a0\n3rd fn call is at 60ms\u00a0\n4th fn call is at\u00a090ms\u00a0\n5th fn call is at 120ms\u00a0\n6th fn call is at 150ms\nCancelled at 165ms"
            },
            {
                "Input": "** fn = (x1, x2, x3) => (x1 + x2 + x3), args = [5, 1, 3], t = 50",
                "Output": "** \n[\n   {\"time\": 0, \"returned\": 9},\n   {\"time\": 50, \"returned\": 9},\n   {\"time\": 100, \"returned\": 9},\n   {\"time\": 150, \"returned\": 9}\n]",
                "Explanation": "** \nconst cancelTimeMs = 180;\nconst cancelFn = cancellable((x1, x2, x3) => (x1 + x2 + x3), [5, 1, 3], 50)\nsetTimeout(cancelFn, cancelTimeMs)\n\nEvery 50ms, fn(5, 1, 3) is called. Until t=180ms, then it is cancelled. \n1st fn call is at 0ms\n2nd fn call is at 50ms\n3rd fn call is at 100ms\n4th fn call is at\u00a0150ms\nCancelled at 180ms"
            }
        ]
    },
    {
        "Title": "Calculator with Method Chaining",
        "slug": "calculator-with-method-chaining",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nactions = [\"Calculator\", \"add\", \"subtract\", \"getResult\"], \nvalues = [10, 5, 7]",
                "Output": "** 8",
                "Explanation": "** \nnew Calculator(10).add(5).subtract(7).getResult() // 10 + 5 - 7 = 8"
            },
            {
                "Input": "** \nactions = [\"Calculator\", \"multiply\", \"power\", \"getResult\"], \nvalues = [2, 5, 2]",
                "Output": "** 100",
                "Explanation": "** \nnew Calculator(2).multiply(5).power(2).getResult() // (2 * 5) ^ 2 = 100"
            },
            {
                "Input": "** \nactions = [\"Calculator\", \"divide\", \"getResult\"], \nvalues = [20, 0]",
                "Output": "** \"Division by zero is not allowed\"",
                "Explanation": "** \nnew Calculator(20).divide(0).getResult() // 20 / 0 \n\nThe error should be thrown because we cannot divide by zero."
            }
        ]
    },
    {
        "Title": "Is Object Empty",
        "slug": "is-object-empty",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** obj = {\"x\": 5, \"y\": 42}",
                "Output": "** false",
                "Explanation": "** The object has 2 key-value pairs so it is not empty."
            },
            {
                "Input": "** obj = {}",
                "Output": "** true",
                "Explanation": "** The object doesn't have any key-value pairs so it is empty."
            },
            {
                "Input": "** obj = [null, false, 0]",
                "Output": "** false",
                "Explanation": "** The array has 3 elements so it is not empty."
            }
        ]
    },
    {
        "Title": "Check if The Number is Fascinating",
        "slug": "check-if-the-number-is-fascinating",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 192",
                "Output": "** true",
                "Explanation": "** We concatenate the numbers n = 192 and 2 * n = 384 and 3 * n = 576. The resulting number is 192384576. This number contains all the digits from 1 to 9 exactly once."
            },
            {
                "Input": "** n = 100",
                "Output": "** false",
                "Explanation": "** We concatenate the numbers n = 100 and 2 * n = 200 and 3 * n = 300. The resulting number is 100200300. This number does not satisfy any of the conditions."
            }
        ]
    },
    {
        "Title": "Find the Longest Semi-Repetitive Substring",
        "slug": "find-the-longest-semi-repetitive-substring",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"52233\"",
                "Output": "** 4",
                "Explanation": "**\n\n\nThe longest semi-repetitive substring is \"5223\". Picking the whole string \"52233\" has two adjacent same digit pairs 22 and 33, but at most one is allowed."
            },
            {
                "Input": "** s = \"5494\"",
                "Output": "** 4",
                "Explanation": "**\n\n\n`s` is a semi-repetitive string."
            },
            {
                "Input": "** s = \"1111111\"",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe longest semi-repetitive substring is \"11\". Picking the substring \"111\" has two adjacent same digit pairs, but at most one is allowed.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 50`\n* `'0' <= s[i] <= '9'`"
            }
        ]
    },
    {
        "Title": "Movement of Robots",
        "slug": "movement-of-robots",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [-2,0,2], s = \"RLL\", d = 3",
                "Output": "** 8",
                "Explanation": "** \nAfter 1 second, the positions are [-1,-1,1]. Now, the robot at index 0 will move left, and the robot at index 1 will move right.\nAfter 2 seconds, the positions are [-2,0,0]. Now, the robot at index 1 will move left, and the robot at index 2 will move right.\nAfter 3 seconds, the positions are [-3,-1,1].\nThe distance between the robot at index 0 and 1 is abs(-3 - (-1)) = 2.\nThe distance between the robot at index 0 and 2 is abs(-3 - 1) = 4.\nThe distance between the robot at index 1 and 2 is abs(-1 - 1) = 2.\nThe sum of the pairs of all distances = 2 + 4 + 2 = 8."
            },
            {
                "Input": "** nums = [1,0], s = \"RL\", d = 2",
                "Output": "** 5",
                "Explanation": "** \nAfter 1 second, the positions are [2,-1].\nAfter 2 seconds, the positions are [3,-2].\nThe distance between the two robots is abs(-2 - 3) = 5."
            }
        ]
    },
    {
        "Title": "Find a Good Subset of the Matrix",
        "slug": "find-a-good-subset-of-the-matrix",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** grid = [[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
                "Output": "** [0,1]",
                "Explanation": "** We can choose the 0th and 1st rows to create a good subset of rows.\nThe length of the chosen subset is 2.\n- The sum of the 0th\u00a0column is 0 + 0 = 0, which is at most half of the length of the subset.\n- The sum of the 1st\u00a0column is 1 + 0 = 1, which is at most half of the length of the subset.\n- The sum of the 2nd\u00a0column is 1 + 0 = 1, which is at most half of the length of the subset.\n- The sum of the 3rd\u00a0column is 0 + 1 = 1, which is at most half of the length of the subset."
            },
            {
                "Input": "** grid = [[0]]",
                "Output": "** [0]",
                "Explanation": "** We can choose the 0th row to create a good subset of rows.\nThe length of the chosen subset is 1.\n- The sum of the 0th\u00a0column is 0, which is at most half of the length of the subset."
            },
            {
                "Input": "** grid = [[1,1,1],[1,1,1]]",
                "Output": "** []",
                "Explanation": "** It is impossible to choose any subset of rows to create a good subset."
            }
        ]
    },
    {
        "Title": "Neither Minimum nor Maximum",
        "slug": "neither-minimum-nor-maximum",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [3,2,1,4]",
                "Output": "** 2",
                "Explanation": "** In this example, the minimum value is 1 and the maximum value is 4. Therefore, either 2 or 3 can be valid answers."
            },
            {
                "Input": "** nums = [1,2]",
                "Output": "** -1",
                "Explanation": "** Since there is no number in nums that is neither the maximum nor the minimum, we cannot select a number that satisfies the given condition. Therefore, there is no answer."
            },
            {
                "Input": "** nums = [2,1,3]",
                "Output": "** 2",
                "Explanation": "** Since 2 is neither the maximum nor the minimum value in nums, it is the only valid answer."
            }
        ]
    },
    {
        "Title": "Lexicographically Smallest String After Substring Operation",
        "slug": "lexicographically-smallest-string-after-substring-operation",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"cbabc\"",
                "Output": "** \"baabc\"",
                "Explanation": "**\n\n\nPerform the operation on the substring starting at index 0, and ending at index 1 inclusive."
            },
            {
                "Input": "** s = \"aa\"",
                "Output": "** \"az\"",
                "Explanation": "**\n\n\nPerform the operation on the last letter."
            },
            {
                "Input": "** s = \"acbbc\"",
                "Output": "** \"abaab\"",
                "Explanation": "**\n\n\nPerform the operation on the substring starting at index 1, and ending at index 4 inclusive."
            },
            {
                "Input": "** s = \"leetcode\"",
                "Output": "** \"kddsbncd\"",
                "Explanation": "**\n\n\nPerform the operation on the entire string.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 3 * 105`\n* `s` consists of lowercase English letters\n\n\nHints:\n    0. When a character is replaced by the one that comes before it on the alphabet, it makes the string lexicographically smaller, except for \u2018a'.\n    1. Find the leftmost substring that doesn\u2019t contain the character 'a' and change all characters in it.\nSimilarQuestions: [848, 1625, 3106, 3081]"
            }
        ]
    },
    {
        "Title": "Collecting Chocolates",
        "slug": "collecting-chocolates",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [20,1,15], x = 5",
                "Output": "** 13",
                "Explanation": "** Initially, the chocolate types are [0,1,2]. We will buy the 1st\u00a0type of chocolate at a cost of 1.\nNow, we will perform the operation at a cost of 5, and the types of chocolates will become [1,2,0]. We will buy the 2ndtype of chocolate at a cost of 1.\nNow, we will again perform the operation at a cost of 5, and the chocolate types will become [2,0,1]. We will buy the 0th type of chocolate at a cost of 1. \nThus, the total cost will become (1 + 5 + 1 + 5 + 1) = 13. We can prove that this is optimal."
            },
            {
                "Input": "** nums = [1,2,3], x = 4",
                "Output": "** 6",
                "Explanation": "** We will collect all three types of chocolates at their own price without performing any operations. Therefore, the total cost is 1 + 2 + 3 = 6."
            }
        ]
    },
    {
        "Title": "Maximum Sum Queries",
        "slug": "maximum-sum-queries",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums1 = [4,3,1,2], nums2 = [2,4,9,5], queries = [[4,1],[1,3],[2,5]]",
                "Output": "** [6,10,7]",
                "Explanation": "** \nFor the 1st query xi = 4\u00a0and\u00a0yi = 1, we can select index\u00a0j = 0\u00a0since\u00a0nums1[j] >= 4\u00a0and\u00a0nums2[j] >= 1. The sum\u00a0nums1[j] + nums2[j]\u00a0is 6, and we can show that 6 is the maximum we can obtain.\n\nFor the 2nd query xi = 1\u00a0and\u00a0yi = 3, we can select index\u00a0j = 2\u00a0since\u00a0nums1[j] >= 1\u00a0and\u00a0nums2[j] >= 3. The sum\u00a0nums1[j] + nums2[j]\u00a0is 10, and we can show that 10 is the maximum we can obtain. \n\nFor the 3rd query xi = 2\u00a0and\u00a0yi = 5, we can select index\u00a0j = 3\u00a0since\u00a0nums1[j] >= 2\u00a0and\u00a0nums2[j] >= 5. The sum\u00a0nums1[j] + nums2[j]\u00a0is 7, and we can show that 7 is the maximum we can obtain.\n\nTherefore, we return\u00a0[6,10,7]."
            },
            {
                "Input": "** nums1 = [3,2,5], nums2 = [2,3,4], queries = [[4,4],[3,2],[1,1]]",
                "Output": "** [9,9,9]",
                "Explanation": "** For this example, we can use index\u00a0j = 2\u00a0for all the queries since it satisfies the constraints for each query."
            },
            {
                "Input": "** nums1 = [2,1], nums2 = [2,3], queries = [[3,3]]",
                "Output": "** [-1]",
                "Explanation": "** There is one query in this example with xi = 3 and yi = 3. For every index, j, either nums1[j] < xi or nums2[j] < yi. Hence, there is no solution."
            }
        ]
    },
    {
        "Title": "Total Distance Traveled",
        "slug": "total-distance-traveled",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** mainTank = 5, additionalTank = 10",
                "Output": "** 60",
                "Explanation": "** \nAfter spending 5 litre of fuel, fuel remaining is (5 - 5 + 1) = 1 litre and distance traveled is 50km.\nAfter spending another 1 litre of fuel, no fuel gets injected in the main tank and the main tank becomes empty.\nTotal distance traveled is 60km."
            },
            {
                "Input": "** mainTank = 1, additionalTank = 2",
                "Output": "** 10",
                "Explanation": "** \nAfter spending 1 litre of fuel, the main tank becomes empty.\nTotal distance traveled is 10km."
            }
        ]
    },
    {
        "Title": "Find the Value of the Partition",
        "slug": "find-the-value-of-the-partition",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,3,2,4]",
                "Output": "** 1",
                "Explanation": "** We can partition the array nums into nums1 = [1,2] and nums2 = [3,4].\n- The maximum element of the array nums1 is equal to 2.\n- The minimum element of the array nums2 is equal to 3.\nThe value of the partition is |2 - 3| = 1. \nIt can be proven that 1 is the minimum value out of all partitions."
            },
            {
                "Input": "** nums = [100,1,10]",
                "Output": "** 9",
                "Explanation": "** We can partition the array nums into nums1 = [10] and nums2 = [100,1].\n- The maximum element of the array nums1 is equal to 10.\n- The minimum element of the array nums2 is equal to 1.\nThe value of the partition is |10 - 1| = 9.\nIt can be proven that 9 is the minimum value out of all partitions."
            }
        ]
    },
    {
        "Title": "Special Permutations",
        "slug": "special-permutations",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,3,6]",
                "Output": "** 2",
                "Explanation": "** [3,6,2] and [2,6,3] are the two special permutations of nums."
            },
            {
                "Input": "** nums = [1,4,3]",
                "Output": "** 2",
                "Explanation": "** [3,1,4] and [4,1,3] are the two special permutations of nums."
            }
        ]
    },
    {
        "Title": "Painting the Walls",
        "slug": "painting-the-walls",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** cost = [1,2,3,2], time = [1,2,3,2]",
                "Output": "** 3",
                "Explanation": "** The walls at index 0 and 1 will be painted by the paid painter, and it will take 3 units of time; meanwhile, the free painter will paint the walls at index 2 and 3, free of cost in 2 units of time. Thus, the total cost is 1 + 2 = 3."
            },
            {
                "Input": "** cost = [2,3,4,2], time = [1,1,1,1]",
                "Output": "** 4",
                "Explanation": "** The walls at index 0 and 3 will be painted by the paid painter, and it will take 2 units of time; meanwhile, the free painter will paint the walls at index 1 and 2, free of cost in 2 units of time. Thus, the total cost is 2 + 2 = 4."
            }
        ]
    },
    {
        "Title": "Find Maximum Number of String Pairs",
        "slug": "find-maximum-number-of-string-pairs",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"]",
                "Output": "** 2",
                "Explanation": "** In this example, we can form 2 pair of strings in the following way:\n- We pair the 0th string with the 2nd string, as the reversed string of word[0] is \"dc\" and is equal to words[2].\n- We pair the 1st string with the 3rd string, as the reversed string of word[1] is \"ca\" and is equal to words[3].\nIt can be proven that 2 is the maximum number of pairs that can be formed."
            },
            {
                "Input": "** words = [\"ab\",\"ba\",\"cc\"]",
                "Output": "** 1",
                "Explanation": "** In this example, we can form 1 pair of strings in the following way:\n- We pair the 0th string with the 1st string, as the reversed string of words[1] is \"ab\" and is equal to words[0].\nIt can be proven that 1 is the maximum number of pairs that can be formed."
            },
            {
                "Input": "** words = [\"aa\",\"ab\"]",
                "Output": "** 0",
                "Explanation": "** In this example, we are unable to form any pair of strings."
            }
        ]
    },
    {
        "Title": "Construct the Longest New String",
        "slug": "construct-the-longest-new-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** x = 2, y = 5, z = 1",
                "Output": "** 12",
                "Explanation": "** We can concactenate the strings \"BB\", \"AA\", \"BB\", \"AA\", \"BB\", and \"AB\" in that order. Then, our new string is \"BBAABBAABBAB\". \nThat string has length 12, and we can show that it is impossible to construct a string of longer length."
            },
            {
                "Input": "** x = 3, y = 2, z = 2",
                "Output": "** 14",
                "Explanation": "** We can concactenate the strings \"AB\", \"AB\", \"AA\", \"BB\", \"AA\", \"BB\", and \"AA\" in that order. Then, our new string is \"ABABAABBAABBAA\". \nThat string has length 14, and we can show that it is impossible to construct a string of longer length."
            }
        ]
    },
    {
        "Title": "Decremental String Concatenation",
        "slug": "decremental-string-concatenation",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** words = [\"aa\",\"ab\",\"bc\"]",
                "Output": "** 4",
                "Explanation": "** In this example, we can perform join operations in the following order to minimize the length of str2: \nstr0 = \"aa\"\nstr1 = join(str0, \"ab\") = \"aab\"\nstr2 = join(str1, \"bc\") = \"aabc\" \nIt can be shown that the minimum possible length of str2 is 4."
            },
            {
                "Input": "** words = [\"ab\",\"b\"]",
                "Output": "** 2",
                "Explanation": "** In this example, str0 = \"ab\", there are two ways to get str1: \njoin(str0, \"b\") = \"ab\" or join(\"b\", str0) = \"bab\". \nThe first string, \"ab\", has the minimum length. Hence, the answer is 2."
            },
            {
                "Input": "** words = [\"aaa\",\"c\",\"aba\"]",
                "Output": "** 6",
                "Explanation": "** In this example, we can perform join operations in the following order to minimize the length of str2: \nstr0 = \"aaa\"\nstr1 = join(str0, \"c\") = \"aaac\"\nstr2 = join(\"aba\", str1) = \"abaaac\"\nIt can be shown that the minimum possible length of str2 is 6."
            }
        ]
    },
    {
        "Title": "Count Zero Request Servers",
        "slug": "count-zero-request-servers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3, logs = [[1,3],[2,6],[1,5]], x = 5, queries = [10,11]",
                "Output": "** [1,2]",
                "Explanation": "** \nFor queries[0]: The servers with ids 1 and 2 get requests in the duration of [5, 10]. Hence, only server 3 gets zero requests.\nFor queries[1]: Only the server with id 2 gets a request in duration of [6,11]. Hence, the servers with ids 1 and 3 are the only servers that do not receive any requests during that time period."
            },
            {
                "Input": "** n = 3, logs = [[2,4],[2,1],[1,2],[3,1]], x = 2, queries = [3,4]",
                "Output": "** [0,1]",
                "Explanation": "** \nFor queries[0]: All servers get at least one request in the duration of [1, 3].\nFor queries[1]: Only server with id 3 gets no request in the duration [2,4]."
            }
        ]
    },
    {
        "Title": "Number of Beautiful Pairs",
        "slug": "number-of-beautiful-pairs",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [2,5,1,4]",
                "Output": "** 5",
                "Explanation": "** There are 5 beautiful pairs in nums:\nWhen i = 0 and j = 1: the first digit of nums[0] is 2, and the last digit of nums[1] is 5. We can confirm that 2 and 5 are coprime, since gcd(2,5) == 1.\nWhen i = 0 and j = 2: the first digit of nums[0] is 2, and the last digit of nums[2] is 1. Indeed, gcd(2,1) == 1.\nWhen i = 1 and j = 2: the first digit of nums[1] is 5, and the last digit of nums[2] is 1. Indeed, gcd(5,1) == 1.\nWhen i = 1 and j = 3: the first digit of nums[1] is 5, and the last digit of nums[3] is 4. Indeed, gcd(5,4) == 1.\nWhen i = 2 and j = 3: the first digit of nums[2] is 1, and the last digit of nums[3] is 4. Indeed, gcd(1,4) == 1.\nThus, we return 5."
            },
            {
                "Input": "** nums = [11,21,12]",
                "Output": "** 2",
                "Explanation": "** There are 2 beautiful pairs:\nWhen i = 0 and j = 1: the first digit of nums[0] is 1, and the last digit of nums[1] is 1. Indeed, gcd(1,1) == 1.\nWhen i = 0 and j = 2: the first digit of nums[0] is 1, and the last digit of nums[2] is 2. Indeed, gcd(1,2) == 1.\nThus, we return 2."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Make the Integer Zero",
        "slug": "minimum-operations-to-make-the-integer-zero",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** num1 = 3, num2 = -2",
                "Output": "** 3",
                "Explanation": "** We can make 3 equal to 0 with the following operations:\n- We choose i = 2 and substract 22 + (-2) from 3, 3 - (4 + (-2)) = 1.\n- We choose i = 2 and substract 22\u00a0+ (-2) from 1, 1 - (4 + (-2)) = -1.\n- We choose i = 0 and substract 20\u00a0+ (-2) from -1, (-1) - (1 + (-2)) = 0.\nIt can be proven, that 3 is the minimum number of operations that we need to perform."
            },
            {
                "Input": "** num1 = 5, num2 = 7",
                "Output": "** -1",
                "Explanation": "** It can be proven, that it is impossible to make 5 equal to 0 with the given operation."
            }
        ]
    },
    {
        "Title": "Ways to Split Array Into Good Subarrays",
        "slug": "ways-to-split-array-into-good-subarrays",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [0,1,0,0,1]",
                "Output": "** 3",
                "Explanation": "** There are 3 ways to split nums into good subarrays:\n- [0,1] [0,0,1]\n- [0,1,0] [0,1]\n- [0,1,0,0] [1]"
            },
            {
                "Input": "** nums = [0,1,0]",
                "Output": "** 1",
                "Explanation": "** There is 1 way to split nums into good subarrays:\n- [0,1,0]"
            }
        ]
    },
    {
        "Title": "Robot Collisions",
        "slug": "robot-collisions",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** positions = [5,4,3,2,1], healths = [2,17,9,15,10], directions = \"RRRRR\"",
                "Output": "** [2,17,9,15,10]",
                "Explanation": "** No collision occurs in this example, since all robots are moving in the same direction. So, the health of the robots in order from the first robot is returned, [2, 17, 9, 15, 10]."
            },
            {
                "Input": "** positions = [3,5,2,6], healths = [10,10,15,12], directions = \"RLRL\"",
                "Output": "** [14]",
                "Explanation": "** There are 2 collisions in this example. Firstly, robot 1 and robot 2 will collide, and since both have the same health, they will be removed from the line. Next, robot 3 and robot 4 will collide and since robot 4's health is smaller, it gets removed, and robot 3's health becomes 15 - 1 = 14. Only robot 3 remains, so we return [14]."
            },
            {
                "Input": "** positions = [1,2,5,6], healths = [10,10,11,11], directions = \"RLRL\"",
                "Output": "** []",
                "Explanation": "** Robot 1 and robot 2 will collide and since both have the same health, they are both removed. Robot 3 and 4 will collide and since both have the same health, they are both removed. So, we return an empty array, []."
            }
        ]
    },
    {
        "Title": "Longest Even Odd Subarray With Threshold",
        "slug": "longest-even-odd-subarray-with-threshold",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [3,2,5,4], threshold = 5",
                "Output": "** 3",
                "Explanation": "** In this example, we can select the subarray that starts at l = 1 and ends at r = 3 => [2,5,4]. This subarray satisfies the conditions.\nHence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length."
            },
            {
                "Input": "** nums = [1,2], threshold = 2",
                "Output": "** 1",
                "Explanation": "** In this example, we can select the subarray that starts at l = 1 and ends at r = 1 => [2]. \nIt satisfies all the conditions and we can show that 1 is the maximum possible achievable length."
            },
            {
                "Input": "** nums = [2,3,4,5], threshold = 4",
                "Output": "** 3",
                "Explanation": "** In this example, we can select the subarray that starts at l = 0 and ends at r = 2 => [2,3,4]. \nIt satisfies all the conditions.\nHence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length."
            }
        ]
    },
    {
        "Title": "Prime Pairs With Target Sum",
        "slug": "prime-pairs-with-target-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 10",
                "Output": "** [[3,7],[5,5]]",
                "Explanation": "** In this example, there are two prime pairs that satisfy the criteria. \nThese pairs are [3,7] and [5,5], and we return them in the sorted order as described in the problem statement."
            },
            {
                "Input": "** n = 2",
                "Output": "** []",
                "Explanation": "** We can show that there is no prime number pair that gives a sum of 2, so we return an empty array."
            }
        ]
    },
    {
        "Title": "Continuous Subarrays",
        "slug": "continuous-subarrays",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [5,4,2,4]",
                "Output": "** 8",
                "Explanation": "** \nContinuous subarray of size 1: [5], [4], [2], [4].\nContinuous subarray of size 2: [5,4], [4,2], [2,4].\nContinuous subarray of size 3: [4,2,4].\nThereare no subarrys of size 4.\nTotal continuous subarrays = 4 + 3 + 1 = 8.\nIt can be shown that there are no more continuous subarrays."
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 6",
                "Explanation": "** \nContinuous subarray of size 1: [1], [2], [3].\nContinuous subarray of size 2: [1,2], [2,3].\nContinuous subarray of size 3: [1,2,3].\nTotal continuous subarrays = 3 + 2 + 1 = 6."
            }
        ]
    },
    {
        "Title": "Sum of Imbalance Numbers of All Subarrays",
        "slug": "sum-of-imbalance-numbers-of-all-subarrays",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [2,3,1,4]",
                "Output": "** 3",
                "Explanation": "** There are 3 subarrays with non-zeroimbalance numbers:\n- Subarray [3, 1] with an imbalance number of 1.\n- Subarray [3, 1, 4] with an imbalance number of 1.\n- Subarray [1, 4] with an imbalance number of 1.\nThe imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 3."
            },
            {
                "Input": "** nums = [1,3,3,3,5]",
                "Output": "** 8",
                "Explanation": "** There are 7 subarrays with non-zero imbalance numbers:\n- Subarray [1, 3] with an imbalance number of 1.\n- Subarray [1, 3, 3] with an imbalance number of 1.\n- Subarray [1, 3, 3, 3] with an imbalance number of 1.\n- Subarray [1, 3, 3, 3, 5] with an imbalance number of 2. \n- Subarray [3, 3, 3, 5] with an imbalance number of 1. \n- Subarray [3, 3, 5] with an imbalance number of 1.\n- Subarray [3, 5] with an imbalance number of 1.\nThe imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 8."
            }
        ]
    },
    {
        "Title": "Longest Alternating Subarray",
        "slug": "longest-alternating-subarray",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [2,3,4,3,4]",
                "Output": "** 4",
                "Explanation": "** The alternating subarrays are [3,4], [3,4,3], and [3,4,3,4]. The longest of these is [3,4,3,4], which is of length 4."
            },
            {
                "Input": "** nums = [4,5,6]",
                "Output": "** 2",
                "Explanation": "** [4,5] and [5,6] are the only two alternating subarrays. They are both of length 2."
            }
        ]
    },
    {
        "Title": "Relocate Marbles",
        "slug": "relocate-marbles",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,6,7,8], moveFrom = [1,7,2], moveTo = [2,9,5]",
                "Output": "** [5,6,8,9]",
                "Explanation": "** Initially, the marbles are at positions 1,6,7,8.\nAt the i = 0th step, we move the marbles at position 1 to position 2. Then, positions 2,6,7,8 are occupied.\nAt the i = 1st step, we move the marbles at position 7 to position 9. Then, positions 2,6,8,9 are occupied.\nAt the i = 2nd step, we move the marbles at position 2 to position 5. Then, positions 5,6,8,9 are occupied.\nAt the end, the final positions containing at least one marbles are [5,6,8,9]."
            },
            {
                "Input": "** nums = [1,1,3,3], moveFrom = [1,3], moveTo = [2,2]",
                "Output": "** [2]",
                "Explanation": "** Initially, the marbles are at positions [1,1,3,3].\nAt the i = 0th step, we move all the marbles at position 1 to position 2. Then, the marbles are at positions [2,2,3,3].\nAt the i = 1st step, we move all the marbles at position 3 to position 2. Then, the marbles are at positions [2,2,2,2].\nSince 2 is the only occupied position, we return [2]."
            }
        ]
    },
    {
        "Title": "Partition String Into Minimum Beautiful Substrings",
        "slug": "partition-string-into-minimum-beautiful-substrings",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"1011\"",
                "Output": "** 2",
                "Explanation": "** We can paritition the given string into [\"101\", \"1\"].\n- The string \"101\" does not contain leading zeros and is the binary representation of integer 51 = 5.\n- The string \"1\" does not contain leading zeros and is the binary representation of integer 50 = 1.\nIt can be shown that 2 is the minimum number of beautiful substrings that s can be partitioned into."
            },
            {
                "Input": "** s = \"111\"",
                "Output": "** 3",
                "Explanation": "** We can paritition the given string into [\"1\", \"1\", \"1\"].\n- The string \"1\" does not contain leading zeros and is the binary representation of integer 50 = 1.\nIt can be shown that 3 is the minimum number of beautiful substrings that s can be partitioned into."
            },
            {
                "Input": "** s = \"0\"",
                "Output": "** -1",
                "Explanation": "** We can not partition the given string into beautiful substrings."
            }
        ]
    },
    {
        "Title": "Number of Black Blocks",
        "slug": "number-of-black-blocks",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** m = 3, n = 3, coordinates = [[0,0]]",
                "Output": "** [3,1,0,0,0]",
                "Explanation": "** The grid looks like this:\n![](https://assets.leetcode.com/uploads/2023/06/18/screen-shot-2023-06-18-at-44656-am.png)\nThere is only 1 block with one black cell, and it is the block starting with cell [0,0].\nThe other 3 blocks start with cells [0,1], [1,0] and [1,1]. They all have zero black cells. \nThus, we return [3,1,0,0,0]."
            },
            {
                "Input": "** m = 3, n = 3, coordinates = [[0,0],[1,1],[0,2]]",
                "Output": "** [0,2,2,0,0]",
                "Explanation": "** The grid looks like this:\n![](https://assets.leetcode.com/uploads/2023/06/18/screen-shot-2023-06-18-at-45018-am.png)\nThere are 2 blocks with two black cells (the ones starting with cell coordinates [0,0] and [0,1]).\nThe other 2 blocks have starting cell coordinates of [1,0] and [1,1]. They both have 1 black cell.\nTherefore, we return [0,2,2,0,0]."
            }
        ]
    },
    {
        "Title": "Find the Maximum Achievable Number",
        "slug": "find-the-maximum-achievable-number",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** num = 4, t = 1",
                "Output": "** 6",
                "Explanation": "**\n\n\nApply the following operation once to make the maximum achievable number equal to `num`:\n\n\n* Decrease the maximum achievable number by 1, and increase `num` by 1."
            },
            {
                "Input": "** num = 3, t = 2",
                "Output": "** 7",
                "Explanation": "**\n\n\nApply the following operation twice to make the maximum achievable number equal to `num`:\n\n\n* Decrease the maximum achievable number by 1, and increase `num` by 1.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num, t\u00a0<= 50`"
            }
        ]
    },
    {
        "Title": "Maximum Number of Jumps to Reach the Last Index",
        "slug": "maximum-number-of-jumps-to-reach-the-last-index",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,3,6,4,1,2], target = 2",
                "Output": "** 3",
                "Explanation": "** To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence:\n- Jump from index 0 to index 1. \n- Jump from index 1 to index 3.\n- Jump from index 3 to index 5.\nIt can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 3 jumps. Hence, the answer is 3."
            },
            {
                "Input": "** nums = [1,3,6,4,1,2], target = 3",
                "Output": "** 5",
                "Explanation": "** To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence:\n- Jump from index 0 to index 1.\n- Jump from index 1 to index 2.\n- Jump from index 2 to index 3.\n- Jump from index 3 to index 4.\n- Jump from index 4 to index 5.\nIt can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 5 jumps. Hence, the answer is 5."
            },
            {
                "Input": "** nums = [1,3,6,4,1,2], target = 0",
                "Output": "** -1",
                "Explanation": "** It can be proven that there is no jumping sequence that goes from 0 to n - 1. Hence, the answer is -1."
            }
        ]
    },
    {
        "Title": "Longest Non-decreasing Subarray From Two Arrays",
        "slug": "longest-non-decreasing-subarray-from-two-arrays",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums1 = [2,3,1], nums2 = [1,2,1]",
                "Output": "** 2",
                "Explanation": "** One way to construct nums3 is: \nnums3 = [nums1[0], nums2[1], nums2[2]] => [2,2,1]. \nThe subarray starting from index 0 and ending at index 1, [2,2], forms a non-decreasing subarray of length 2. \nWe can show that 2 is the maximum achievable length."
            },
            {
                "Input": "** nums1 = [1,3,2,1], nums2 = [2,2,3,4]",
                "Output": "** 4",
                "Explanation": "** One way to construct nums3 is: \nnums3 = [nums1[0], nums2[1], nums2[2], nums2[3]] => [1,2,3,4]. \nThe entire array forms a non-decreasing subarray of length 4, making it the maximum achievable length."
            },
            {
                "Input": "** nums1 = [1,1], nums2 = [2,2]",
                "Output": "** 2",
                "Explanation": "** One way to construct nums3 is: \nnums3 = [nums1[0], nums1[1]] => [1,1]. \nThe entire array forms a non-decreasing subarray of length 2, making it the maximum achievable length."
            }
        ]
    },
    {
        "Title": "Apply Operations to Make All Array Elements Equal to Zero",
        "slug": "apply-operations-to-make-all-array-elements-equal-to-zero",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,2,3,1,1,0], k = 3",
                "Output": "** true",
                "Explanation": "** We can do the following operations:\n- Choose the subarray [2,2,3]. The resulting array will be nums = [**1**,**1**,**2**,1,1,0].\n- Choose the subarray [2,1,1]. The resulting array will be nums = [1,1,**1**,**0**,**0**,0].\n- Choose the subarray [1,1,1]. The resulting array will be nums = [**0**,**0**,**0**,0,0,0]."
            },
            {
                "Input": "** nums = [1,3,1,1], k = 2",
                "Output": "** false",
                "Explanation": "** It is not possible to make all the array elements equal to 0."
            }
        ]
    },
    {
        "Title": "Sum of Squares of Special Elements ",
        "slug": "sum-of-squares-of-special-elements",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 21",
                "Explanation": "** There are exactly 3 special elements in nums: nums[1] since 1 divides 4, nums[2] since 2 divides 4, and nums[4] since 4 divides 4. \nHence, the sum of the squares of all special elements of nums is nums[1] * nums[1] + nums[2] * nums[2] + nums[4] * nums[4] = 1 * 1 + 2 * 2 + 4 * 4 = 21."
            },
            {
                "Input": "** nums = [2,7,1,19,18,3]",
                "Output": "** 63",
                "Explanation": "** There are exactly 4 special elements in nums: nums[1] since 1 divides 6, nums[2] since 2 divides 6, nums[3] since 3 divides 6, and nums[6] since 6 divides 6. \nHence, the sum of the squares of all special elements of nums is nums[1] * nums[1] + nums[2] * nums[2] + nums[3] * nums[3] + nums[6] * nums[6] = 2 * 2 + 7 * 7 + 1 * 1 + 3 * 3 = 63."
            }
        ]
    },
    {
        "Title": "Maximum Beauty of an Array After Applying Operation",
        "slug": "maximum-beauty-of-an-array-after-applying-operation",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [4,6,1,2], k = 2",
                "Output": "** 3",
                "Explanation": "** In this example, we apply the following operations:\n- Choose index 1, replace it with 4 (from range [4,8]), nums = [4,4,1,2].\n- Choose index 3, replace it with 4 (from range [0,4]), nums = [4,4,1,4].\nAfter the applied operations, the beauty of the array nums is 3 (subsequence consisting of indices 0, 1, and 3).\nIt can be proven that 3 is the maximum possible length we can achieve."
            },
            {
                "Input": "** nums = [1,1,1,1], k = 10",
                "Output": "** 4",
                "Explanation": "** In this example we don't have to apply any operations.\nThe beauty of the array nums is 4 (whole array)."
            }
        ]
    },
    {
        "Title": "Minimum Index of a Valid Split",
        "slug": "minimum-index-of-a-valid-split",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,2,2]",
                "Output": "** 2",
                "Explanation": "** We can split the array at index 2 to obtain arrays [1,2,2] and [2]. \nIn array [1,2,2], element 2 is dominant since it occurs twice in the array and 2 * 2 > 3. \nIn array [2], element 2 is dominant since it occurs once in the array and 1 * 2 > 1.\nBoth [1,2,2] and [2] have the same dominant element as nums, so this is a valid split. \nIt can be shown that index 2 is the minimum index of a valid split."
            },
            {
                "Input": "** nums = [2,1,3,1,1,1,7,1,2,1]",
                "Output": "** 4",
                "Explanation": "** We can split the array at index 4 to obtain arrays [2,1,3,1,1] and [1,7,1,2,1].\nIn array [2,1,3,1,1], element 1 is dominant since it occurs thrice in the array and 3 * 2 > 5.\nIn array [1,7,1,2,1], element 1 is dominant since it occurs thrice in the array and 3 * 2 > 5.\nBoth [2,1,3,1,1] and [1,7,1,2,1] have the same dominant element as nums, so this is a valid split.\nIt can be shown that index 4 is the minimum index of a valid split."
            },
            {
                "Input": "** nums = [3,3,3,3,7,2,2]",
                "Output": "** -1",
                "Explanation": "** It can be shown that there is no valid split."
            }
        ]
    },
    {
        "Title": "Length of the Longest Valid Substring",
        "slug": "length-of-the-longest-valid-substring",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** word = \"cbaaaabc\", forbidden = [\"aaa\",\"cb\"]",
                "Output": "** 4",
                "Explanation": "** There are 11 valid substrings in word: \"c\", \"b\", \"a\", \"ba\", \"aa\", \"bc\", \"baa\", \"aab\", \"ab\", \"abc\" and \"aabc\". The length of the longest valid substring is 4. \nIt can be shown that all other substrings contain either \"aaa\" or \"cb\" as a substring."
            },
            {
                "Input": "** word = \"leetcode\", forbidden = [\"de\",\"le\",\"e\"]",
                "Output": "** 4",
                "Explanation": "** There are 11 valid substrings in word: \"l\", \"t\", \"c\", \"o\", \"d\", \"tc\", \"co\", \"od\", \"tco\", \"cod\", and \"tcod\". The length of the longest valid substring is 4.\nIt can be shown that all other substrings contain either \"de\", \"le\", or \"e\" as a substring."
            }
        ]
    },
    {
        "Title": "Check if Array is Good",
        "slug": "check-if-array-is-good",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [2, 1, 3]",
                "Output": "** false",
                "Explanation": "** Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. However, base[3] has four elements but array nums has three. Therefore, it can not be a permutation of base[3] = [1, 2, 3, 3]. So the answer is false."
            },
            {
                "Input": "** nums = [1, 3, 3, 2]",
                "Output": "** true",
                "Explanation": "** Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. It can be seen that nums is a permutation of base[3] = [1, 2, 3, 3] (by swapping the second and fourth elements in nums, we reach base[3]). Therefore, the answer is true."
            },
            {
                "Input": "** nums = [1, 1]",
                "Output": "** true",
                "Explanation": "** Since the maximum element of the array is 1, the only candidate n for which this array could be a permutation of base[n], is n = 1. It can be seen that nums is a permutation of base[1] = [1, 1]. Therefore, the answer is true."
            },
            {
                "Input": "** nums = [3, 4, 4, 1, 2, 1]",
                "Output": "** false",
                "Explanation": "** Since the maximum element of the array is 4, the only candidate n for which this array could be a permutation of base[n], is n = 4. However, base[4] has five elements but array nums has six. Therefore, it can not be a permutation of base[4] = [1, 2, 3, 4, 4]. So the answer is false."
            }
        ]
    },
    {
        "Title": "Sort Vowels in a String",
        "slug": "sort-vowels-in-a-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"lEetcOde\"",
                "Output": "** \"lEOtcede\"",
                "Explanation": "** 'E', 'O', and 'e' are the vowels in s; 'l', 't', 'c', and 'd' are all consonants. The vowels are sorted according to their ASCII values, and the consonants remain in the same places."
            },
            {
                "Input": "** s = \"lYmpH\"",
                "Output": "** \"lYmpH\"",
                "Explanation": "** There are no vowels in s (all characters in s are consonants), so we return \"lYmpH\"."
            }
        ]
    },
    {
        "Title": "Visit Array Positions to Maximize Score",
        "slug": "visit-array-positions-to-maximize-score",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,3,6,1,9,2], x = 5",
                "Output": "** 13",
                "Explanation": "** We can visit the following positions in the array: 0 -> 2 -> 3 -> 4.\nThe corresponding values are 2, 6, 1 and 9. Since the integers 6 and 1 have different parities, the move 2 -> 3 will make you lose a score of x = 5.\nThe total score will be: 2 + 6 + 1 + 9 - 5 = 13."
            },
            {
                "Input": "** nums = [2,4,6,8], x = 3",
                "Output": "** 20",
                "Explanation": "** All the integers in the array have the same parities, so we can visit all of them without losing any score.\nThe total score is: 2 + 4 + 6 + 8 = 20."
            }
        ]
    },
    {
        "Title": "Ways to Express an Integer as Sum of Powers",
        "slug": "ways-to-express-an-integer-as-sum-of-powers",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 10, x = 2",
                "Output": "** 1",
                "Explanation": "** We can express n as the following: n = 32 + 12 = 10.\nIt can be shown that it is the only way to express 10 as the sum of the 2nd power of unique integers."
            },
            {
                "Input": "** n = 4, x = 1",
                "Output": "** 2",
                "Explanation": "** We can express n in the following ways:\n- n = 41 = 4.\n- n = 31 + 11 = 4."
            }
        ]
    },
    {
        "Title": "Split Strings by Separator",
        "slug": "split-strings-by-separator",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** words = [\"one.two.three\",\"four.five\",\"six\"], separator = \".\"",
                "Output": "** [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"]",
                "Explanation": "** In this example we split as follows:\n\n\"one.two.three\" splits into \"one\", \"two\", \"three\"\n\"four.five\" splits into \"four\", \"five\"\n\"six\" splits into \"six\" \n\nHence, the resulting array is [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"]."
            },
            {
                "Input": "** words = [\"$easy$\",\"$problem$\"], separator = \"$\"",
                "Output": "** [\"easy\",\"problem\"]",
                "Explanation": "** In this example we split as follows: \n\n\"$easy$\" splits into \"easy\" (excluding empty strings)\n\"$problem$\" splits into \"problem\" (excluding empty strings)\n\nHence, the resulting array is [\"easy\",\"problem\"]."
            },
            {
                "Input": "** words = [\"|||\"], separator = \"|\"",
                "Output": "** []",
                "Explanation": "** In this example the resulting split of \"|||\" will contain only empty strings, so we return an empty array []."
            }
        ]
    },
    {
        "Title": "Largest Element in an Array after Merge Operations",
        "slug": "largest-element-in-an-array-after-merge-operations",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,3,7,9,3]",
                "Output": "** 21",
                "Explanation": "** We can apply the following operations on the array:\n- Choose i = 0. The resulting array will be nums = [5,7,9,3].\n- Choose i = 1. The resulting array will be nums = [5,16,3].\n- Choose i = 0. The resulting array will be nums = [21,3].\nThe largest element in the final array is 21. It can be shown that we cannot obtain a larger element."
            },
            {
                "Input": "** nums = [5,3,3]",
                "Output": "** 11",
                "Explanation": "** We can do the following operations on the array:\n- Choose i = 1. The resulting array will be nums = [5,6].\n- Choose i = 0. The resulting array will be nums = [11].\nThere is only one element in the final array, which is 11."
            }
        ]
    },
    {
        "Title": "Maximum Number of Groups With Increasing Length",
        "slug": "maximum-number-of-groups-with-increasing-length",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** usageLimits = [1,2,5]",
                "Output": "** 3",
                "Explanation": "** In this example, we can use 0 at most once, 1 at most twice, and 2 at most five times.\nOne way of creating the maximum number of groups while satisfying the conditions is: \nGroup 1 contains the number [2].\nGroup 2 contains the numbers [1,2].\nGroup 3 contains the numbers [0,1,2]. \nIt can be shown that the maximum number of groups is 3. \nSo, the output is 3."
            },
            {
                "Input": "** usageLimits = [2,1,2]",
                "Output": "** 2",
                "Explanation": "** In this example, we can use 0 at most twice, 1 at most once, and 2 at most twice.\nOne way of creating the maximum number of groups while satisfying the conditions is:\nGroup 1 contains the number [0].\nGroup 2 contains the numbers [1,2].\nIt can be shown that the maximum number of groups is 2.\nSo, the output is 2."
            },
            {
                "Input": "** usageLimits = [1,1]",
                "Output": "** 1",
                "Explanation": "** In this example, we can use both 0 and 1 at most once.\nOne way of creating the maximum number of groups while satisfying the conditions is:\nGroup 1 contains the number [0].\nIt can be shown that the maximum number of groups is 1.\nSo, the output is 1."
            }
        ]
    },
    {
        "Title": "Count Paths That Can Form a Palindrome in a Tree",
        "slug": "count-paths-that-can-form-a-palindrome-in-a-tree",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** parent = [-1,0,0,1,1,2], s = \"acaabc\"",
                "Output": "** 8",
                "Explanation": "** The valid pairs are:\n- All the pairs (0,1), (0,2), (1,3), (1,4) and (2,5) result in one character which is always a palindrome.\n- The pair (2,3) result in the string \"aca\" which is a palindrome.\n- The pair (1,5) result in the string \"cac\" which is a palindrome.\n- The pair (3,5) result in the string \"acac\" which can be rearranged into the palindrome \"acca\"."
            }
        ]
    },
    {
        "Title": "Number of Employees Who Met the Target",
        "slug": "number-of-employees-who-met-the-target",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** hours = [0,1,2,3,4], target = 2",
                "Output": "** 3",
                "Explanation": "** The company wants each employee to work for at least 2 hours.\n- Employee 0 worked for 0 hours and didn't meet the target.\n- Employee 1 worked for 1 hours and didn't meet the target.\n- Employee 2 worked for 2 hours and met the target.\n- Employee 3 worked for 3 hours and met the target.\n- Employee 4 worked for 4 hours and met the target.\nThere are 3 employees who met the target."
            },
            {
                "Input": "** hours = [5,1,4,2,2], target = 6",
                "Output": "** 0",
                "Explanation": "** The company wants each employee to work for at least 6 hours.\nThere are 0 employees who met the target."
            }
        ]
    },
    {
        "Title": "Count Complete Subarrays in an Array",
        "slug": "count-complete-subarrays-in-an-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,3,1,2,2]",
                "Output": "** 4",
                "Explanation": "** The complete subarrays are the following: [1,3,1,2], [1,3,1,2,2], [3,1,2] and [3,1,2,2]."
            },
            {
                "Input": "** nums = [5,5,5,5]",
                "Output": "** 10",
                "Explanation": "** The array consists only of the integer 5, so any subarray is complete. The number of subarrays that we can choose is 10."
            }
        ]
    },
    {
        "Title": "Shortest String That Contains Three Strings",
        "slug": "shortest-string-that-contains-three-strings",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** a = \"abc\", b = \"bca\", c = \"aaa\"",
                "Output": "** \"aaabca\"",
                "Explanation": "**  We show that \"aaabca\" contains all the given strings: a = ans[2...4], b = ans[3..5], c = ans[0..2]. It can be shown that the length of the resulting string would be at least 6 and \"aaabca\" is the lexicographically smallest one."
            },
            {
                "Input": "** a = \"ab\", b = \"ba\", c = \"aba\"",
                "Output": "** \"aba\"",
                "Explanation": "** We show that the string \"aba\" contains all the given strings: a = ans[0..1], b = ans[1..2], c = ans[0..2]. Since the length of c is 3, the length of the resulting string would be at least 3. It can be shown that \"aba\" is the lexicographically smallest one."
            }
        ]
    },
    {
        "Title": "Count Stepping Numbers in Range",
        "slug": "count-stepping-numbers-in-range",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** low = \"1\", high = \"11\"",
                "Output": "** 10",
                "Explanation": "** The stepping numbers in the range [1,11] are 1, 2, 3, 4, 5, 6, 7, 8, 9 and 10. There are a total of 10 stepping numbers in the range. Hence, the output is 10."
            },
            {
                "Input": "** low = \"90\", high = \"101\"",
                "Output": "** 2",
                "Explanation": "** The stepping numbers in the range [90,101] are 98 and 101. There are a total of 2 stepping numbers in the range. Hence, the output is 2."
            }
        ]
    },
    {
        "Title": "Account Balance After Rounded Purchase",
        "slug": "account-balance-after-rounded-purchase",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** purchaseAmount = 9",
                "Output": "** 90",
                "Explanation": "** In this example, the nearest multiple of 10 to 9 is 10. Hence, your account balance becomes 100 - 10 = 90."
            },
            {
                "Input": "** purchaseAmount = 15",
                "Output": "** 80",
                "Explanation": "** In this example, there are two nearest multiples of 10 to 15: 10 and 20. So, the larger multiple, 20, is chosen.\nHence, your account balance becomes 100 - 20 = 80."
            }
        ]
    },
    {
        "Title": "Insert Greatest Common Divisors in Linked List",
        "slug": "insert-greatest-common-divisors-in-linked-list",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [18,6,10,3]",
                "Output": "** [18,6,6,2,10,1,3]",
                "Explanation": "** The 1st diagram denotes the initial linked list and the 2nd diagram denotes the linked list after inserting the new nodes (nodes in blue are the inserted nodes).\n- We insert the greatest common divisor of 18 and 6 = 6 between the 1st and the 2nd nodes.\n- We insert the greatest common divisor of 6 and 10 = 2 between the 2nd and the 3rd nodes.\n- We insert the greatest common divisor of 10 and 3 = 1 between the 3rd and the 4th nodes.\nThere are no more adjacent nodes, so we return the linked list."
            },
            {
                "Input": "** head = [7]",
                "Output": "** [7]",
                "Explanation": "** The 1st diagram denotes the initial linked list and the 2nd diagram denotes the linked list after inserting the new nodes.\nThere are no pairs of adjacent nodes, so we return the initial linked list."
            }
        ]
    },
    {
        "Title": "Minimum Seconds to Equalize a Circular Array",
        "slug": "minimum-seconds-to-equalize-a-circular-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,1,2]",
                "Output": "** 1",
                "Explanation": "** We can equalize the array in 1 second in the following way:\n- At 1st second, replace values at each index with [nums[3],nums[1],nums[3],nums[3]]. After replacement, nums = [2,2,2,2].\nIt can be proven that 1 second is the minimum amount of seconds needed for equalizing the array."
            },
            {
                "Input": "** nums = [2,1,3,3,2]",
                "Output": "** 2",
                "Explanation": "** We can equalize the array in 2 seconds in the following way:\n- At 1st second, replace values at each index with [nums[0],nums[2],nums[2],nums[2],nums[3]]. After replacement, nums = [2,3,3,3,3].\n- At 2nd second, replace values at each index with [nums[1],nums[1],nums[2],nums[3],nums[4]]. After replacement, nums = [3,3,3,3,3].\nIt can be proven that 2 seconds is the minimum amount of seconds needed for equalizing the array."
            },
            {
                "Input": "** nums = [5,5,5,5]",
                "Output": "** 0",
                "Explanation": "** We don't need to perform any operations as all elements in the initial array are the same."
            }
        ]
    },
    {
        "Title": "Minimum Time to Make Array Sum At Most x",
        "slug": "minimum-time-to-make-array-sum-at-most-x",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums1 = [1,2,3], nums2 = [1,2,3], x = 4",
                "Output": "** 3",
                "Explanation": "** \nFor the 1st second, we apply the operation on i = 0. Therefore nums1 = [0,2+2,3+3] = [0,4,6]. \nFor the 2nd second, we apply the operation on i = 1. Therefore nums1 = [0+1,0,6+3] = [1,0,9]. \nFor the 3rd second, we apply the operation on i = 2. Therefore nums1 = [1+1,0+2,0] = [2,2,0]. \nNow sum of nums1 = 4. It can be shown that these operations are optimal, so we return 3."
            },
            {
                "Input": "** nums1 = [1,2,3], nums2 = [3,3,3], x = 4",
                "Output": "** -1",
                "Explanation": "** It can be shown that the sum of nums1 will always be greater than x, no matter which operations are performed."
            }
        ]
    },
    {
        "Title": "Faulty Keyboard",
        "slug": "faulty-keyboard",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"string\"",
                "Output": "** \"rtsng\"",
                "Explanation": "** \nAfter typing first character, the text on the screen is \"s\".\nAfter the second character, the text is \"st\". \nAfter the third character, the text is \"str\".\nSince the fourth character is an 'i', the text gets reversed and becomes \"rts\".\nAfter the fifth character, the text is \"rtsn\". \nAfter the sixth character, the text is \"rtsng\". \nTherefore, we return \"rtsng\"."
            },
            {
                "Input": "** s = \"poiinter\"",
                "Output": "** \"ponter\"",
                "Explanation": "** \nAfter the first character, the text on the screen is \"p\".\nAfter the second character, the text is \"po\". \nSince the third character you type is an 'i', the text gets reversed and becomes \"op\". \nSince the fourth character you type is an 'i', the text gets reversed and becomes \"po\".\nAfter the fifth character, the text is \"pon\".\nAfter the sixth character, the text is \"pont\". \nAfter the seventh character, the text is \"ponte\". \nAfter the eighth character, the text is \"ponter\". \nTherefore, we return \"ponter\"."
            }
        ]
    },
    {
        "Title": "Check if it is Possible to Split Array",
        "slug": "check-if-it-is-possible-to-split-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2, 2, 1], m = 4",
                "Output": "** true",
                "Explanation": "** We can split the array into [2, 2] and [1] in the first step. Then, in the second step, we can split [2, 2] into [2] and [2]. As a result, the answer is true."
            },
            {
                "Input": "** nums = [2, 1, 3], m = 5",
                "Output": "** false",
                "Explanation": "** We can try splitting the array in two different ways: the first way is to have [2, 1] and [3], and the second way is to have [2] and [1, 3]. However, both of these ways are not valid. So, the answer is false."
            },
            {
                "Input": "** nums = [2, 3, 3, 2, 3], m = 6",
                "Output": "** true",
                "Explanation": "** We can split the array into [2, 3, 3, 2] and [3] in the first step. Then, in the second step, we can split [2, 3, 3, 2] into [2, 3, 3] and [2]. Then, in the third step, we can split [2, 3, 3] into [2] and [3, 3]. And in the last step we can split [3, 3] into [3] and [3]. As a result, the answer is true."
            }
        ]
    },
    {
        "Title": "Find the Safest Path in a Grid",
        "slug": "find-the-safest-path-in-a-grid",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[1,0,0],[0,0,0],[0,0,1]]",
                "Output": "** 0",
                "Explanation": "** All paths from (0, 0) to (n - 1, n - 1) go through the thieves in cells (0, 0) and (n - 1, n - 1)."
            },
            {
                "Input": "** grid = [[0,0,1],[0,0,0],[0,0,0]]",
                "Output": "** 2",
                "Explanation": "** The path depicted in the picture above has a safeness factor of 2 since:\n- The closest cell of the path to the thief at cell (0, 2) is cell (0, 0). The distance between them is | 0 - 0 | + | 0 - 2 | = 2.\nIt can be shown that there are no other paths with a higher safeness factor."
            },
            {
                "Input": "** grid = [[0,0,0,1],[0,0,0,0],[0,0,0,0],[1,0,0,0]]",
                "Output": "** 2",
                "Explanation": "** The path depicted in the picture above has a safeness factor of 2 since:\n- The closest cell of the path to the thief at cell (0, 3) is cell (1, 2). The distance between them is | 0 - 1 | + | 3 - 2 | = 2.\n- The closest cell of the path to the thief at cell (3, 0) is cell (3, 2). The distance between them is | 3 - 3 | + | 0 - 2 | = 2.\nIt can be shown that there are no other paths with a higher safeness factor."
            }
        ]
    },
    {
        "Title": "Maximum Elegance of a K-Length Subsequence",
        "slug": "maximum-elegance-of-a-k-length-subsequence",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** items = [[3,2],[5,1],[10,1]], k = 2",
                "Output": "** 17",
                "Explanation": "** In this example, we have to select a subsequence of size 2.\nWe can select items[0] = [3,2] and items[2] = [10,1].\nThe total profit in this subsequence is 3 + 10 = 13, and the subsequence contains 2 distinct categories [2,1].\nHence, the elegance is 13 + 22 = 17, and we can show that it is the maximum achievable elegance."
            },
            {
                "Input": "** items = [[3,1],[3,1],[2,2],[5,3]], k = 3",
                "Output": "** 19",
                "Explanation": "** In this example, we have to select a subsequence of size 3. \nWe can select items[0] = [3,1], items[2] = [2,2], and items[3] = [5,3]. \nThe total profit in this subsequence is 3 + 2 + 5 = 10, and the subsequence contains 3 distinct categories [1,2,3]. \nHence, the elegance is 10 + 32 = 19, and we can show that it is the maximum achievable elegance."
            },
            {
                "Input": "** items = [[1,1],[2,1],[3,1]], k = 3",
                "Output": "** 7",
                "Explanation": "** In this example, we have to select a subsequence of size 3. \nWe should select all the items. \nThe total profit will be 1 + 2 + 3 = 6, and the subsequence contains 1 distinct category [1]. \nHence, the maximum elegance is 6 + 12 = 7."
            }
        ]
    },
    {
        "Title": "Max Pair Sum in an Array",
        "slug": "max-pair-sum-in-an-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [112,131,411]",
                "Output": "** -1",
                "Explanation": "**\n\n\nEach numbers largest digit in order is [2,3,4]."
            },
            {
                "Input": "** nums = [2536,1613,3366,162]",
                "Output": "** 5902",
                "Explanation": "**\n\n\nAll the numbers have 6 as their largest digit, so the answer is 2536 + 3366 = 5902."
            },
            {
                "Input": "** nums = [51,71,17,24,42]",
                "Output": "** 88",
                "Explanation": "**\n\n\nEach number's largest digit in order is [5,7,7,4,4].\n\n\nSo we have only two possible pairs, 71 + 17 = 88 and 24 + 42 = 66.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 100`\n* `1 <= nums[i] <= 104`"
            }
        ]
    },
    {
        "Title": "Double a Number Represented as a Linked List",
        "slug": "double-a-number-represented-as-a-linked-list",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** head = [1,8,9]",
                "Output": "** [3,7,8]",
                "Explanation": "** The figure above corresponds to the given linked list which represents the number 189. Hence, the returned linked list represents the number 189 * 2 = 378."
            },
            {
                "Input": "** head = [9,9,9]",
                "Output": "** [1,9,9,8]",
                "Explanation": "** The figure above corresponds to the given linked list which represents the number 999. Hence, the returned linked list reprersents the number 999 * 2 = 1998."
            }
        ]
    },
    {
        "Title": "Minimum Absolute Difference Between Elements With Constraint",
        "slug": "minimum-absolute-difference-between-elements-with-constraint",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [4,3,2,4], x = 2",
                "Output": "** 0",
                "Explanation": "** We can select nums[0] = 4 and nums[3] = 4. \nThey are at least 2 indices apart, and their absolute difference is the minimum, 0. \nIt can be shown that 0 is the optimal answer."
            },
            {
                "Input": "** nums = [5,3,2,10,15], x = 1",
                "Output": "** 1",
                "Explanation": "** We can select nums[1] = 3 and nums[2] = 2.\nThey are at least 1 index apart, and their absolute difference is the minimum, 1.\nIt can be shown that 1 is the optimal answer."
            },
            {
                "Input": "** nums = [1,2,3,4], x = 3",
                "Output": "** 3",
                "Explanation": "** We can select nums[0] = 1 and nums[3] = 4.\nThey are at least 3 indices apart, and their absolute difference is the minimum, 3.\nIt can be shown that 3 is the optimal answer."
            }
        ]
    },
    {
        "Title": "Apply Operations to Maximize Score",
        "slug": "apply-operations-to-maximize-score",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [8,3,9,3,8], k = 2",
                "Output": "** 81",
                "Explanation": "** To get a score of 81, we can apply the following operations:\n- Choose subarray nums[2, ..., 2]. nums[2] is the only element in this subarray. Hence, we multiply the score by nums[2]. The score becomes 1 * 9 = 9.\n- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 1, but nums[2] has the smaller index. Hence, we multiply the score by nums[2]. The score becomes 9 * 9 = 81.\nIt can be proven that 81 is the highest score one can obtain."
            },
            {
                "Input": "** nums = [19,12,14,6,10,18], k = 3",
                "Output": "** 4788",
                "Explanation": "** To get a score of 4788, we can apply the following operations: \n- Choose subarray nums[0, ..., 0]. nums[0] is the only element in this subarray. Hence, we multiply the score by nums[0]. The score becomes 1 * 19 = 19.\n- Choose subarray nums[5, ..., 5]. nums[5] is the only element in this subarray. Hence, we multiply the score by nums[5]. The score becomes 19 * 18 = 342.\n- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 2, but nums[2] has the smaller index. Hence, we multipy the score by nums[2]. The score becomes 342 * 14 = 4788.\nIt can be proven that 4788 is the highest score one can obtain."
            }
        ]
    },
    {
        "Title": "Count Pairs Whose Sum is Less than Target",
        "slug": "count-pairs-whose-sum-is-less-than-target",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [-1,1,2,3,1], target = 2",
                "Output": "** 3",
                "Explanation": "** There are 3 pairs of indices that satisfy the conditions in the statement:\n- (0, 1) since 0 < 1 and nums[0] + nums[1] = 0 < target\n- (0, 2) since 0 < 2 and nums[0] + nums[2] = 1 < target \n- (0, 4) since 0 < 4 and nums[0] + nums[4] = 0 < target\nNote that (0, 3) is not counted since nums[0] + nums[3] is not strictly less than the target."
            },
            {
                "Input": "** nums = [-6,2,5,-2,-7,-1,3], target = -2",
                "Output": "** 10",
                "Explanation": "** There are 10 pairs of indices that satisfy the conditions in the statement:\n- (0, 1) since 0 < 1 and nums[0] + nums[1] = -4 < target\n- (0, 3) since 0 < 3 and nums[0] + nums[3] = -8 < target\n- (0, 4) since 0 < 4 and nums[0] + nums[4] = -13 < target\n- (0, 5) since 0 < 5 and nums[0] + nums[5] = -7 < target\n- (0, 6) since 0 < 6 and nums[0] + nums[6] = -3 < target\n- (1, 4) since 1 < 4 and nums[1] + nums[4] = -5 < target\n- (3, 4) since 3 < 4 and nums[3] + nums[4] = -9 < target\n- (3, 5) since 3 < 5 and nums[3] + nums[5] = -3 < target\n- (4, 5) since 4 < 5 and nums[4] + nums[5] = -8 < target\n- (4, 6) since 4 < 6 and nums[4] + nums[6] = -4 < target"
            }
        ]
    },
    {
        "Title": "Make String a Subsequence Using Cyclic Increments",
        "slug": "make-string-a-subsequence-using-cyclic-increments",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** str1 = \"abc\", str2 = \"ad\"",
                "Output": "** true",
                "Explanation": "** Select index 2 in str1.\nIncrement str1[2] to become 'd'. \nHence, str1 becomes \"abd\" and str2 is now a subsequence. Therefore, true is returned."
            },
            {
                "Input": "** str1 = \"zc\", str2 = \"ad\"",
                "Output": "** true",
                "Explanation": "** Select indices 0 and 1 in str1. \nIncrement str1[0] to become 'a'. \nIncrement str1[1] to become 'd'. \nHence, str1 becomes \"ad\" and str2 is now a subsequence. Therefore, true is returned."
            },
            {
                "Input": "** str1 = \"ab\", str2 = \"d\"",
                "Output": "** false",
                "Explanation": "** In this example, it can be shown that it is impossible to make str2 a subsequence of str1 using the operation at most once. \nTherefore, false is returned."
            }
        ]
    },
    {
        "Title": "Sorting Three Groups",
        "slug": "sorting-three-groups",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,1,3,2,1]",
                "Output": "** 3",
                "Explanation": "**\n\n\nOne of the optimal solutions is to remove `nums[0]`, `nums[2]` and `nums[3]`."
            },
            {
                "Input": "** nums = [1,3,2,1,3,3]",
                "Output": "** 2",
                "Explanation": "**\n\n\nOne of the optimal solutions is to remove `nums[1]` and `nums[2]`."
            },
            {
                "Input": "** nums = [2,2,2,2,3,3]",
                "Output": "** 0",
                "Explanation": "**\n\n\n`nums` is already non-decreasing.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 3`\n\n\n\u00a0\n\n\n**Follow-up:** Can you come up with an algorithm that runs in `O(n)` time complexity?Hints:\n    0. The problem asks to change the array nums to make it sorted (i.e., all the 1s are on the left of 2s, and all the 2s are on the left of 3s.).\n    1. We can try all the possibilities to make nums indices range in [0, i) to 0 and [i, j) to 1 and [j, n) to 2. Note the ranges are left-close and right-open; each might be empty. Namely, 0 <= i <= j <= n.\n    2. Count the changes we need for each possibility by comparing the expected and original values at each index position."
            }
        ]
    },
    {
        "Title": "Number of Beautiful Integers in the Range",
        "slug": "number-of-beautiful-integers-in-the-range",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** low = 10, high = 20, k = 3",
                "Output": "** 2",
                "Explanation": "** There are 2 beautiful integers in the given range: [12,18]. \n- 12 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 3.\n- 18 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 3.\nAdditionally we can see that:\n- 16 is not beautiful because it is not divisible by k = 3.\n- 15 is not beautiful because it does not contain equal counts even and odd digits.\nIt can be shown that there are only 2 beautiful integers in the given range."
            },
            {
                "Input": "** low = 1, high = 10, k = 1",
                "Output": "** 1",
                "Explanation": "** There is 1 beautiful integer in the given range: [10].\n- 10 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 1.\nIt can be shown that there is only 1 beautiful integer in the given range."
            },
            {
                "Input": "** low = 5, high = 5, k = 2",
                "Output": "** 0",
                "Explanation": "** There are 0 beautiful integers in the given range.\n- 5 is not beautiful because it is not divisible by k = 2 and it does not contain equal even and odd digits."
            }
        ]
    },
    {
        "Title": "Check if a String Is an Acronym of Words",
        "slug": "check-if-a-string-is-an-acronym-of-words",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** words = [\"alice\",\"bob\",\"charlie\"], s = \"abc\"",
                "Output": "** true",
                "Explanation": "** The first character in the words \"alice\", \"bob\", and \"charlie\" are 'a', 'b', and 'c', respectively. Hence, s = \"abc\" is the acronym."
            },
            {
                "Input": "** words = [\"an\",\"apple\"], s = \"a\"",
                "Output": "** false",
                "Explanation": "** The first character in the words \"an\" and \"apple\" are 'a' and 'a', respectively. \nThe acronym formed by concatenating these characters is \"aa\". \nHence, s = \"a\" is not the acronym."
            },
            {
                "Input": "** words = [\"never\",\"gonna\",\"give\",\"up\",\"on\",\"you\"], s = \"ngguoy\"",
                "Output": "** true",
                "Explanation": "** By concatenating the first character of the words in the array, we get the string \"ngguoy\". \nHence, s = \"ngguoy\" is the acronym."
            }
        ]
    },
    {
        "Title": "Determine the Minimum Sum of a k-avoiding Array",
        "slug": "determine-the-minimum-sum-of-a-k-avoiding-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 5, k = 4",
                "Output": "** 18",
                "Explanation": "** Consider the k-avoiding array [1,2,4,5,6], which has a sum of 18.\nIt can be proven that there is no k-avoiding array with a sum less than 18."
            },
            {
                "Input": "** n = 2, k = 6",
                "Output": "** 3",
                "Explanation": "** We can construct the array [1,2], which has a sum of 3.\nIt can be proven that there is no k-avoiding array with a sum less than 3."
            }
        ]
    },
    {
        "Title": "Maximize the Profit as the Salesman",
        "slug": "maximize-the-profit-as-the-salesman",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 5, offers = [[0,0,1],[0,2,2],[1,3,2]]",
                "Output": "** 3",
                "Explanation": "** There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.\nWe sell houses in the range [0,0] to 1st buyer for 1 gold and houses in the range [1,3] to 3rd buyer for 2 golds.\nIt can be proven that 3 is the maximum amount of gold we can achieve."
            },
            {
                "Input": "** n = 5, offers = [[0,0,1],[0,2,10],[1,3,2]]",
                "Output": "** 10",
                "Explanation": "** There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.\nWe sell houses in the range [0,2] to 2nd buyer for 10 golds.\nIt can be proven that 10 is the maximum amount of gold we can achieve."
            }
        ]
    },
    {
        "Title": "Find the Longest Equal Subarray",
        "slug": "find-the-longest-equal-subarray",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,3,2,3,1,3], k = 3",
                "Output": "** 3",
                "Explanation": "** It's optimal to delete the elements at index 2 and index 4.\nAfter deleting them, nums becomes equal to [1, 3, 3, 3].\nThe longest equal subarray starts at i = 1 and ends at j = 3 with length equal to 3.\nIt can be proven that no longer equal subarrays can be created."
            },
            {
                "Input": "** nums = [1,1,2,2,1,1], k = 2",
                "Output": "** 4",
                "Explanation": "** It's optimal to delete the elements at index 2 and index 3.\nAfter deleting them, nums becomes equal to [1, 1, 1, 1].\nThe array itself is an equal subarray, so the answer is 4.\nIt can be proven that no longer equal subarrays can be created."
            }
        ]
    },
    {
        "Title": "Furthest Point From Origin",
        "slug": "furthest-point-from-origin",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** moves = \"L_RL__R\"",
                "Output": "** 3",
                "Explanation": "** The furthest point we can reach from the origin 0 is point -3 through the following sequence of moves \"LLRLLLR\"."
            },
            {
                "Input": "** moves = \"_R__LL_\"",
                "Output": "** 5",
                "Explanation": "** The furthest point we can reach from the origin 0 is point -5 through the following sequence of moves \"LRLLLLL\"."
            },
            {
                "Input": "** moves = \"_______\"",
                "Output": "** 7",
                "Explanation": "** The furthest point we can reach from the origin 0 is point 7 through the following sequence of moves \"RRRRRRR\"."
            }
        ]
    },
    {
        "Title": "Find the Minimum Possible Sum of a Beautiful Array",
        "slug": "find-the-minimum-possible-sum-of-a-beautiful-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 2, target = 3",
                "Output": "** 4",
                "Explanation": "** We can see that nums = [1,3] is beautiful.\n- The array nums has length n = 2.\n- The array nums consists of pairwise distinct positive integers.\n- There doesn't exist two distinct indices, i and j, with nums[i] + nums[j] == 3.\nIt can be proven that 4 is the minimum possible sum that a beautiful array could have."
            },
            {
                "Input": "** n = 3, target = 3",
                "Output": "** 8",
                "Explanation": "** We can see that nums = [1,3,4] is beautiful.\n- The array nums has length n = 3.\n- The array nums consists of pairwise distinct positive integers.\n- There doesn't exist two distinct indices, i and j, with nums[i] + nums[j] == 3.\nIt can be proven that 8 is the minimum possible sum that a beautiful array could have."
            },
            {
                "Input": "** n = 1, target = 1",
                "Output": "** 1",
                "Explanation": "** We can see, that nums = [1] is beautiful."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Form Subsequence With Target Sum",
        "slug": "minimum-operations-to-form-subsequence-with-target-sum",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,8], target = 7",
                "Output": "** 1",
                "Explanation": "** In the first operation, we choose element nums[2]. The array becomes equal to nums = [1,2,4,4].\nAt this stage, nums contains the subsequence [1,2,4] which sums up to 7.\nIt can be shown that there is no shorter sequence of operations that results in a subsequnce that sums up to 7."
            },
            {
                "Input": "** nums = [1,32,1,2], target = 12",
                "Output": "** 2",
                "Explanation": "** In the first operation, we choose element nums[1]. The array becomes equal to nums = [1,1,2,16,16].\nIn the second operation, we choose element nums[3]. The array becomes equal to nums = [1,1,2,16,8,8]\nAt this stage, nums contains the subsequence [1,1,2,8] which sums up to 12.\nIt can be shown that there is no shorter sequence of operations that results in a subsequence that sums up to 12."
            },
            {
                "Input": "** nums = [1,32,1], target = 35",
                "Output": "** -1",
                "Explanation": "** It can be shown that no sequence of operations results in a subsequence that sums up to 35."
            }
        ]
    },
    {
        "Title": "Maximize Value of Function in a Ball Passing Game",
        "slug": "maximize-value-of-function-in-a-ball-passing-game",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** receiver = [2,0,1], k = 4",
                "Output": "** 6",
                "Explanation": "**\n\n\nStarting with player `i = 2` the initial score is 2:\n\n\n\n\n| Pass | Sender Index | Receiver Index | Score |\n| --- | --- | --- | --- |\n| 1 | 2 | 1 | 3 |\n| 2 | 1 | 0 | 3 |\n| 3 | 0 | 2 | 5 |\n| 4 | 2 | 1 | 6 |"
            },
            {
                "Input": "** receiver = [1,1,1,2,3], k = 3",
                "Output": "** 10",
                "Explanation": "**\n\n\nStarting with player `i = 4` the initial score is 4:\n\n\n\n\n| Pass | Sender Index | Receiver Index | Score |\n| --- | --- | --- | --- |\n| 1 | 4 | 3 | 7 |\n| 2 | 3 | 2 | 9 |\n| 3 | 2 | 1 | 10 |\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= receiver.length == n <= 105`\n* `0 <= receiver[i] <= n - 1`\n* `1 <= k <= 1010`\n\n\nHints:\n    0. <div class=\"_1l1MA\">We can solve the problem using binary lifting.</div>\n    1. <div class=\"_1l1MA\">For each player with id <code>x</code> and for every <code>i</code> in the range <code>[0, ceil(log<sub>2</sub>k)]</code>, we can determine the last receiver's id and compute the sum of player ids who receive the ball after <code>2<sup>i</sup></code> passes, starting from <code>x</code>.</div>\n    2. <div class=\"_1l1MA\">Let <code>last_receiver[x][i] =</code> the last receiver's id after <code>2<sup>i</sup></code> passes, and <code>sum[x][i] =</code> the sum of player ids who receive the ball after <code>2<sup>i</sup></code> passes. For all <code>x</code> in the range <code>[0, n - 1]</code>, <code>last_receiver[x][0] = receiver[x]</code>, and <code>sum[x][0] = receiver[x]</code>.</div>\n    3. <div class=\"_1l1MA\">Then for <code>i</code> in range <code>[1, ceil(log<sub>2</sub>k)]</code>,\u00a0<code>last_receiver[x][i] = last_receiver[last_receiver[x][i - 1]][i - 1]</code> and <code>sum[x][i] = sum[x][i - 1] + sum[last_receiver[x][i - 1]][i - 1]</code>, for all <code>x</code> in the range <code>[0, n - 1]</code>.</div>\n    4. <div class=\"_1l1MA\">Starting from each player id <code>x</code>, we can now go through the powers of <code>2</code> in the binary representation of <code>k</code> and make jumps corresponding to each power, using the pre-computed values, to compute <code>f(x)</code>.</div>\n    5. <div class=\"_1l1MA\">The answer is the maximum <code>f(x)</code> from each player id.</div>\nSimilarQuestions: [1696]"
            }
        ]
    },
    {
        "Title": "Check if Strings Can be Made Equal With Operations I",
        "slug": "check-if-strings-can-be-made-equal-with-operations-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s1 = \"abcd\", s2 = \"cdab\"",
                "Output": "** true",
                "Explanation": "** We can do the following operations on s1:\n- Choose the indices i = 0, j = 2. The resulting string is s1 = \"cbad\".\n- Choose the indices i = 1, j = 3. The resulting string is s1 = \"cdab\" = s2."
            },
            {
                "Input": "** s1 = \"abcd\", s2 = \"dacb\"",
                "Output": "** false",
                "Explanation": "** It is not possible to make the two strings equal."
            }
        ]
    },
    {
        "Title": "Check if Strings Can be Made Equal With Operations II",
        "slug": "check-if-strings-can-be-made-equal-with-operations-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s1 = \"abcdba\", s2 = \"cabdab\"",
                "Output": "** true",
                "Explanation": "** We can apply the following operations on s1:\n- Choose the indices i = 0, j = 2. The resulting string is s1 = \"cbadba\".\n- Choose the indices i = 2, j = 4. The resulting string is s1 = \"cbbdaa\".\n- Choose the indices i = 1, j = 5. The resulting string is s1 = \"cabdab\" = s2."
            },
            {
                "Input": "** s1 = \"abe\", s2 = \"bea\"",
                "Output": "** false",
                "Explanation": "** It is not possible to make the two strings equal."
            }
        ]
    },
    {
        "Title": "Maximum Sum of Almost Unique Subarray",
        "slug": "maximum-sum-of-almost-unique-subarray",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,6,7,3,1,7], m = 3, k = 4",
                "Output": "** 18",
                "Explanation": "** There are 3 almost unique subarrays of size k = 4. These subarrays are [2, 6, 7, 3], [6, 7, 3, 1], and [7, 3, 1, 7]. Among these subarrays, the one with the maximum sum is [2, 6, 7, 3] which has a sum of 18."
            },
            {
                "Input": "** nums = [5,9,9,2,4,5,4], m = 1, k = 3",
                "Output": "** 23",
                "Explanation": "** There are 5 almost unique subarrays of size k. These subarrays are [5, 9, 9], [9, 9, 2], [9, 2, 4], [2, 4, 5], and [4, 5, 4]. Among these subarrays, the one with the maximum sum is [5, 9, 9] which has a sum of 23."
            },
            {
                "Input": "** nums = [1,2,1,2,1,2,1], m = 3, k = 3",
                "Output": "** 0",
                "Explanation": "** There are no subarrays of size k = 3 that contain at least m = 3 distinct elements in the given array [1,2,1,2,1,2,1]. Therefore, no almost unique subarrays exist, and the maximum sum is 0."
            }
        ]
    },
    {
        "Title": "Count K-Subsequences of a String With Maximum Beauty",
        "slug": "count-k-subsequences-of-a-string-with-maximum-beauty",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"bcca\", k = 2",
                "Output": "** 4",
                "Explanation": "** From s we have f('a') = 1, f('b') = 1, and f('c') = 2.\nThe k-subsequences of s are: \n**bc**ca having a beauty of f('b') + f('c') = 3 \n**b**c**c**a having a beauty of f('b') + f('c') = 3 \n**b**cc**a** having a beauty of f('b') + f('a') = 2 \nb**c**c**a**having a beauty of f('c') + f('a') = 3\nbc**ca** having a beauty of f('c') + f('a') = 3 \nThere are 4 k-subsequences that have the maximum beauty, 3. \nHence, the answer is 4."
            },
            {
                "Input": "** s = \"abbcd\", k = 4",
                "Output": "** 2",
                "Explanation": "** From s we have f('a') = 1, f('b') = 2, f('c') = 1, and f('d') = 1. \nThe k-subsequences of s are: \n**ab**b**cd** having a beauty of f('a') + f('b') + f('c') + f('d') = 5\n**a**b**bcd** having a beauty of f('a') + f('b') + f('c') + f('d') = 5 \nThere are 2 k-subsequences that have the maximum beauty, 5. \nHence, the answer is 2."
            }
        ]
    },
    {
        "Title": "  Count Symmetric Integers",
        "slug": "count-symmetric-integers",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** low = 1, high = 100",
                "Output": "** 9",
                "Explanation": "** There are 9 symmetric integers between 1 and 100: 11, 22, 33, 44, 55, 66, 77, 88, and 99."
            },
            {
                "Input": "** low = 1200, high = 1230",
                "Output": "** 4",
                "Explanation": "** There are 4 symmetric integers between 1200 and 1230: 1203, 1212, 1221, and 1230."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Make a Special Number",
        "slug": "minimum-operations-to-make-a-special-number",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** num = \"2245047\"",
                "Output": "** 2",
                "Explanation": "** Delete digits num[5] and num[6]. The resulting number is \"22450\" which is special since it is divisible by 25.\nIt can be shown that 2 is the minimum number of operations required to get a special number."
            },
            {
                "Input": "** num = \"2908305\"",
                "Output": "** 3",
                "Explanation": "** Delete digits num[3], num[4], and num[6]. The resulting number is \"2900\" which is special since it is divisible by 25.\nIt can be shown that 3 is the minimum number of operations required to get a special number."
            },
            {
                "Input": "** num = \"10\"",
                "Output": "** 1",
                "Explanation": "** Delete digit num[0]. The resulting number is \"0\" which is special since it is divisible by 25.\nIt can be shown that 1 is the minimum number of operations required to get a special number."
            }
        ]
    },
    {
        "Title": "Count of Interesting Subarrays",
        "slug": "count-of-interesting-subarrays",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,2,4], modulo = 2, k = 1",
                "Output": "** 3",
                "Explanation": "** In this example the interesting subarrays are: \nThe subarray nums[0..0] which is [3]. \n- There is only one index, i = 0, in the range [0, 0] that satisfies nums[i] % modulo == k. \n- Hence, cnt = 1 and cnt % modulo == k.  \nThe subarray nums[0..1] which is [3,2].\n- There is only one index, i = 0, in the range [0, 1] that satisfies nums[i] % modulo == k.  \n- Hence, cnt = 1 and cnt % modulo == k.\nThe subarray nums[0..2] which is [3,2,4]. \n- There is only one index, i = 0, in the range [0, 2] that satisfies nums[i] % modulo == k. \n- Hence, cnt = 1 and cnt % modulo == k. \nIt can be shown that there are no other interesting subarrays. So, the answer is 3."
            },
            {
                "Input": "** nums = [3,1,9,6], modulo = 3, k = 0",
                "Output": "** 2",
                "Explanation": "** In this example the interesting subarrays are: \nThe subarray nums[0..3] which is [3,1,9,6]. \n- There are three indices, i = 0, 2, 3, in the range [0, 3] that satisfy nums[i] % modulo == k. \n- Hence, cnt = 3 and cnt % modulo == k. \nThe subarray nums[1..1] which is [1]. \n- There is no index, i, in the range [1, 1] that satisfies nums[i] % modulo == k. \n- Hence, cnt = 0 and cnt % modulo == k. \nIt can be shown that there are no other interesting subarrays. So, the answer is 2."
            }
        ]
    },
    {
        "Title": "Minimum Edge Weight Equilibrium Queries in a Tree",
        "slug": "minimum-edge-weight-equilibrium-queries-in-a-tree",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 7, edges = [[0,1,1],[1,2,1],[2,3,1],[3,4,2],[4,5,2],[5,6,2]], queries = [[0,3],[3,6],[2,6],[0,6]]",
                "Output": "** [0,0,1,3]",
                "Explanation": "** In the first query, all the edges in the path from 0 to 3 have a weight of 1. Hence, the answer is 0.\nIn the second query, all the edges in the path from 3 to 6 have a weight of 2. Hence, the answer is 0.\nIn the third query, we change the weight of edge [2,3] to 2. After this operation, all the edges in the path from 2 to 6 have a weight of 2. Hence, the answer is 1.\nIn the fourth query, we change the weights of edges [0,1], [1,2] and [2,3] to 2. After these operations, all the edges in the path from 0 to 6 have a weight of 2. Hence, the answer is 3.\nFor each queries[i], it can be shown that answer[i] is the minimum number of operations needed to equalize all the edge weights in the path from ai to bi."
            },
            {
                "Input": "** n = 8, edges = [[1,2,6],[1,3,4],[2,4,6],[2,5,3],[3,6,6],[3,0,8],[7,0,2]], queries = [[4,6],[0,4],[6,5],[7,4]]",
                "Output": "** [1,2,2,3]",
                "Explanation": "** In the first query, we change the weight of edge [1,3] to 6. After this operation, all the edges in the path from 4 to 6 have a weight of 6. Hence, the answer is 1.\nIn the second query, we change the weight of edges [0,3] and [3,1] to 6. After these operations, all the edges in the path from 0 to 4 have a weight of 6. Hence, the answer is 2.\nIn the third query, we change the weight of edges [1,3] and [5,2] to 6. After these operations, all the edges in the path from 6 to 5 have a weight of 6. Hence, the answer is 2.\nIn the fourth query, we change the weights of edges [0,7], [0,3] and [1,3] to 6. After these operations, all the edges in the path from 7 to 4 have a weight of 6. Hence, the answer is 3.\nFor each queries[i], it can be shown that answer[i] is the minimum number of operations needed to equalize all the edge weights in the path from ai to bi."
            }
        ]
    },
    {
        "Title": "Points That Intersect With Cars",
        "slug": "points-that-intersect-with-cars",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [[3,6],[1,5],[4,7]]",
                "Output": "** 7",
                "Explanation": "** All the points from 1 to 7 intersect at least one car, therefore the answer would be 7."
            },
            {
                "Input": "** nums = [[1,3],[5,8]]",
                "Output": "** 7",
                "Explanation": "** Points intersecting at least one car are 1, 2, 3, 5, 6, 7, 8. There are a total of 7 points, therefore the answer would be 7."
            }
        ]
    },
    {
        "Title": "Determine if a Cell Is Reachable at a Given Time",
        "slug": "determine-if-a-cell-is-reachable-at-a-given-time",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** sx = 2, sy = 4, fx = 7, fy = 7, t = 6",
                "Output": "** true",
                "Explanation": "** Starting at cell (2, 4), we can reach cell (7, 7) in exactly 6 seconds by going through the cells depicted in the picture above."
            },
            {
                "Input": "** sx = 3, sy = 1, fx = 7, fy = 3, t = 3",
                "Output": "** false",
                "Explanation": "** Starting at cell (3, 1), it takes at least 4 seconds to reach cell (7, 3) by going through the cells depicted in the picture above. Hence, we cannot reach cell (7, 3) at the third second."
            }
        ]
    },
    {
        "Title": "Minimum Moves to Spread Stones Over Grid",
        "slug": "minimum-moves-to-spread-stones-over-grid",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[1,1,0],[1,1,1],[1,2,1]]",
                "Output": "** 3",
                "Explanation": "** One possible sequence of moves to place one stone in each cell is: \n1- Move one stone from cell (2,1) to cell (2,2).\n2- Move one stone from cell (2,2) to cell (1,2).\n3- Move one stone from cell (1,2) to cell (0,2).\nIn total, it takes 3 moves to place one stone in each cell of the grid.\nIt can be shown that 3 is the minimum number of moves required to place one stone in each cell."
            },
            {
                "Input": "** grid = [[1,3,0],[1,0,0],[1,0,3]]",
                "Output": "** 4",
                "Explanation": "** One possible sequence of moves to place one stone in each cell is:\n1- Move one stone from cell (0,1) to cell (0,2).\n2- Move one stone from cell (0,1) to cell (1,1).\n3- Move one stone from cell (2,2) to cell (1,2).\n4- Move one stone from cell (2,2) to cell (2,1).\nIn total, it takes 4 moves to place one stone in each cell of the grid.\nIt can be shown that 4 is the minimum number of moves required to place one stone in each cell."
            }
        ]
    },
    {
        "Title": "String Transformation",
        "slug": "string-transformation",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"abcd\", t = \"cdab\", k = 2",
                "Output": "** 2",
                "Explanation": "** \nFirst way:\nIn first operation, choose suffix from index = 3, so resulting s = \"dabc\".\nIn second operation, choose suffix from index = 3, so resulting s = \"cdab\".\n\nSecond way:\nIn first operation, choose suffix from index = 1, so resulting s = \"bcda\".\nIn second operation, choose suffix from index = 1, so resulting s = \"cdab\"."
            },
            {
                "Input": "** s = \"ababab\", t = \"ababab\", k = 1",
                "Output": "** 2",
                "Explanation": "** \nFirst way:\nChoose suffix from index = 2, so resulting s = \"ababab\".\n\nSecond way:\nChoose suffix from index = 4, so resulting s = \"ababab\"."
            }
        ]
    },
    {
        "Title": "Minimum Right Shifts to Sort the Array",
        "slug": "minimum-right-shifts-to-sort-the-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [3,4,5,1,2]",
                "Output": "** 2",
                "Explanation": "** \nAfter the first right shift, nums = [2,3,4,5,1].\nAfter the second right shift, nums = [1,2,3,4,5].\nNow nums is sorted; therefore the answer is 2."
            },
            {
                "Input": "** nums = [1,3,5]",
                "Output": "** 0",
                "Explanation": "** nums is already sorted therefore, the answer is 0."
            },
            {
                "Input": "** nums = [2,1,4]",
                "Output": "** -1",
                "Explanation": "** It's impossible to sort the array using right shifts."
            }
        ]
    },
    {
        "Title": "Minimum Array Length After Pair Removals",
        "slug": "minimum-array-length-after-pair-removals",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 0",
                "Explanation": "**\n\n\n![](https://assets.leetcode.com/uploads/2024/05/18/tcase1.gif)"
            },
            {
                "Input": "** nums = [1,1,2,2,3,3]",
                "Output": "** 0",
                "Explanation": "**\n\n\n![](https://assets.leetcode.com/uploads/2024/05/19/tcase2.gif)"
            },
            {
                "Input": "** nums = [1000000000,1000000000]",
                "Output": "** 2",
                "Explanation": "**\n\n\nSince both numbers are equal, they cannot be removed."
            },
            {
                "Input": "** nums = [2,3,4,4,4]",
                "Output": "** 1",
                "Explanation": "**\n\n\n![](https://assets.leetcode.com/uploads/2024/05/19/tcase3.gif)\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* `nums` is sorted in **non-decreasing** order.\n\n\nHints:\n    0. To minimize the length of the array, we should maximize the number of operations performed.\n    1. To perform <code>k</code> operations, it is optimal to use the smallest <code>k</code> values and the largest <code>k</code> values in <code>nums</code>.\n    2. What is the best way to make pairs from the smallest <code>k</code> values and the largest <code>k</code> values so it is possible to remove all the pairs?\n    3. If we consider the smallest <code>k</code> values and the largest <code>k</code> values as two separate <strong>sorted 0-indexed</strong> arrays, <code>a</code> and <code>b</code>, It is optimal to pair <code>a[i]</code> and <code>b[i]</code>. So, a <code>k</code> is valid if <code>a[i] < b[i]</code> for all <code>i</code> in the range <code>[0, k - 1]</code>.\n    4. The greatest possible valid <code>k</code> can be found using binary search.\n    5. The answer is <code>nums.length - 2 * k</code>.\nSimilarQuestions: [2576]"
            }
        ]
    },
    {
        "Title": "Count Pairs of Points With Distance k",
        "slug": "count-pairs-of-points-with-distance-k",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** coordinates = [[1,2],[4,2],[1,3],[5,2]], k = 5",
                "Output": "** 2",
                "Explanation": "** We can choose the following pairs:\n- (0,1): Because we have (1 XOR 4) + (2 XOR 2) = 5.\n- (2,3): Because we have (1 XOR 5) + (3 XOR 2) = 5."
            },
            {
                "Input": "** coordinates = [[1,3],[1,3],[1,3],[1,3],[1,3]], k = 0",
                "Output": "** 10",
                "Explanation": "** Any two chosen pairs will have a distance of 0. There are 10 ways to choose two pairs."
            }
        ]
    },
    {
        "Title": "Minimum Edge Reversals So Every Node Is Reachable",
        "slug": "minimum-edge-reversals-so-every-node-is-reachable",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 4, edges = [[2,0],[2,1],[1,3]]",
                "Output": "** [1,1,0,2]",
                "Explanation": "** The image above shows the graph formed by the edges.\nFor node 0: after reversing the edge [2,0], it is possible to reach any other node starting from node 0.\nSo, answer[0] = 1.\nFor node 1: after reversing the edge [2,1], it is possible to reach any other node starting from node 1.\nSo, answer[1] = 1.\nFor node 2: it is already possible to reach any other node starting from node 2.\nSo, answer[2] = 0.\nFor node 3: after reversing the edges [1,3] and [2,1], it is possible to reach any other node starting from node 3.\nSo, answer[3] = 2."
            },
            {
                "Input": "** n = 3, edges = [[1,2],[2,0]]",
                "Output": "** [2,0,1]",
                "Explanation": "** The image above shows the graph formed by the edges.\nFor node 0: after reversing the edges [2,0] and [1,2], it is possible to reach any other node starting from node 0.\nSo, answer[0] = 2.\nFor node 1: it is already possible to reach any other node starting from node 1.\nSo, answer[1] = 0.\nFor node 2: after reversing the edge [1, 2], it is possible to reach any other node starting from node 2.\nSo, answer[2] = 1."
            }
        ]
    },
    {
        "Title": "Sum of Values at Indices With K Set Bits",
        "slug": "sum-of-values-at-indices-with-k-set-bits",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [5,10,1,5,2], k = 1",
                "Output": "** 13",
                "Explanation": "** The binary representation of the indices are: \n0 = 0002\n1 = 0012\n2 = 0102\n3 = 0112\n4 = 1002Indices 1, 2, and 4 have k = 1 set bits in their binary representation.\nHence, the answer is nums[1] + nums[2] + nums[4] = 13."
            },
            {
                "Input": "** nums = [4,3,2,1], k = 2",
                "Output": "** 1",
                "Explanation": "** The binary representation of the indices are:\n0 = 002\n1 = 012\n2 = 102\n3 = 112Only index 3 has k = 2 set bits in its binary representation.\nHence, the answer is nums[3] = 1."
            }
        ]
    },
    {
        "Title": "Happy Students",
        "slug": "happy-students",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,1]",
                "Output": "** 2",
                "Explanation": "** \nThe two possible ways are:\nThe class teacher selects no student.\nThe class teacher selects both students to form the group. \nIf the class teacher selects just one student to form a group then the both students will not be happy. Therefore, there are only two possible ways."
            },
            {
                "Input": "** nums = [6,0,3,3,6,7,2,7]",
                "Output": "** 3",
                "Explanation": "** \nThe three possible ways are:\nThe class teacher selects the student with index = 1 to form the group.\nThe class teacher selects the students with index = 1, 2, 3, 6 to form the group.\nThe class teacher selects all the students to form the group."
            }
        ]
    },
    {
        "Title": "Maximum Number of Alloys",
        "slug": "maximum-number-of-alloys",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3, k = 2, budget = 15, composition = [[1,1,1],[1,1,10]], stock = [0,0,0], cost = [1,2,3]",
                "Output": "** 2",
                "Explanation": "** It is optimal to use the 1st machine to create alloys.\nTo create 2 alloys we need to buy the:\n- 2 units of metal of the 1st type.\n- 2 units of metal of the 2nd type.\n- 2 units of metal of the 3rd type.\nIn total, we need 2 * 1 + 2 * 2 + 2 * 3 = 12 coins, which is smaller than or equal to budget = 15.\nNotice that we have 0 units of metal of each type and we have to buy all the required units of metal.\nIt can be proven that we can create at most 2 alloys."
            },
            {
                "Input": "** n = 3, k = 2, budget = 15, composition = [[1,1,1],[1,1,10]], stock = [0,0,100], cost = [1,2,3]",
                "Output": "** 5",
                "Explanation": "** It is optimal to use the 2nd machine to create alloys.\nTo create 5 alloys we need to buy:\n- 5 units of metal of the 1st type.\n- 5 units of metal of the 2nd type.\n- 0 units of metal of the 3rd type.\nIn total, we need 5 * 1 + 5 * 2 + 0 * 3 = 15 coins, which is smaller than or equal to budget = 15.\nIt can be proven that we can create at most 5 alloys."
            },
            {
                "Input": "** n = 2, k = 3, budget = 10, composition = [[2,1],[1,2],[1,1]], stock = [1,1], cost = [5,5]",
                "Output": "** 2",
                "Explanation": "** It is optimal to use the 3rd machine to create alloys.\nTo create 2 alloys we need to buy the:\n- 1 unit of metal of the 1st type.\n- 1 unit of metal of the 2nd type.\nIn total, we need 1 * 5 + 1 * 5 = 10 coins, which is smaller than or equal to budget = 10.\nIt can be proven that we can create at most 2 alloys."
            }
        ]
    },
    {
        "Title": "Maximum Element-Sum of a Complete Subset of Indices",
        "slug": "maximum-element-sum-of-a-complete-subset-of-indices",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [8,7,3,5,7,2,4,9]",
                "Output": "** 16",
                "Explanation": "**\n\n\nWe select elements at indices 2 and 8 and `1 * 4` is a perfect square."
            },
            {
                "Input": "** nums = [8,10,3,8,1,13,7,9,4]",
                "Output": "** 20",
                "Explanation": "**\n\n\nWe select elements at indices 1, 4, and 9. `1 * 4`, `1 * 9`, `4 * 9` are perfect squares.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == nums.length <= 104`\n* `1 <= nums[i] <= 109`\n\n\nHints:\n    0. Define <strong>P(x)</strong> as the product of primes <strong>p</strong> with odd exponents in <strong>x</strong>'s factorization. Examples: For <code>x = 18</code>, factorization <code>2<sup>1</sup> \u00d7 3<sup>2</sup></code>, <strong>P(18) = 2</strong>; for <code>x = 45</code>, factorization <code>3<sup>2</sup> \u00d7 5<sup>1</sup></code>, <strong>P(45) = 5</strong>; for <code>x = 50</code>, factorization <code>2<sup>1</sup> \u00d7 5<sup>2</sup></code>, <strong>P(50) = 2</strong>; for <code>x = 210</code>, factorization <code>2<sup>1</sup> \u00d7 3<sup>1</sup> \u00d7 5<sup>1</sup> \u00d7 7<sup>1</sup></code>, <strong>P(210) = 210</strong>.\n    1. If <code>P(nums[i]) = P(nums[j])</code>, <code>nums[i]</code> and <code>nums[j]</code> can be grouped together.\n    2. Pick the group with the largest sum.\nSimilarQuestions: [1425, 1911]"
            }
        ]
    },
    {
        "Title": "Maximum Odd Binary Number",
        "slug": "maximum-odd-binary-number",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"010\"",
                "Output": "** \"001\"",
                "Explanation": "** Because there is just one '1', it must be in the last position. So the answer is \"001\"."
            },
            {
                "Input": "** s = \"0101\"",
                "Output": "** \"1001\"",
                "Explanation": "** One of the '1's must be in the last position. The maximum number that can be made with the remaining digits is \"100\". So the answer is \"1001\"."
            }
        ]
    },
    {
        "Title": "Beautiful Towers I",
        "slug": "beautiful-towers-i",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** heights = [5,3,4,1,1]",
                "Output": "** 13",
                "Explanation": "**\n\n\nWe remove some bricks to make `heights =\u00a0[5,3,3,1,1]`, the peak is at index 0."
            },
            {
                "Input": "** heights = [6,5,3,9,2,7]",
                "Output": "** 22",
                "Explanation": "**\n\n\nWe remove some bricks to make `heights =\u00a0[3,3,3,9,2,2]`, the peak is at index 3."
            },
            {
                "Input": "** heights = [3,2,5,5,2,3]",
                "Output": "** 18",
                "Explanation": "**\n\n\nWe remove some bricks to make `heights = [2,2,5,5,2,2]`, the peak is at index 2 or 3.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == heights <= 103`\n* `1 <= heights[i] <= 109`\n\n\nHints:\n    0. Try all the possible indices <code>i</code> as the peak.\n    1. If <code>i</code> is the peak, <code>i-1<sup>th</sup></code> element, and <code>heights[j] = min(heights[j], heights[j + 1])</code> for <code>0 <= j < i </code>\n    2. If <code>i</code> is the peak, start from <code>i+1<sup>th</sup></code> element, heights[j] = min(heights[j], heights[j - 1]) for <code>i < j < heights.size()</code>\nSimilarQuestions: [941, 1671, 2355]"
            }
        ]
    },
    {
        "Title": "Beautiful Towers II",
        "slug": "beautiful-towers-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** maxHeights = [5,3,4,1,1]",
                "Output": "** 13",
                "Explanation": "** One beautiful configuration with a maximum sum is heights = [5,3,3,1,1]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]  \n- heights is a mountain of peak i = 0.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 13."
            },
            {
                "Input": "** maxHeights = [6,5,3,9,2,7]",
                "Output": "** 22",
                "Explanation": "** One beautiful configuration with a maximum sum is heights = [3,3,3,9,2,2]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]\n- heights is a mountain of peak i = 3.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 22."
            },
            {
                "Input": "** maxHeights = [3,2,5,5,2,3]",
                "Output": "** 18",
                "Explanation": "** One beautiful configuration with a maximum sum is heights = [2,2,5,5,2,2]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]\n- heights is a mountain of peak i = 2. \nNote that, for this configuration, i = 3 can also be considered a peak.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 18."
            }
        ]
    },
    {
        "Title": "Count Valid Paths in a Tree",
        "slug": "count-valid-paths-in-a-tree",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 5, edges = [[1,2],[1,3],[2,4],[2,5]]",
                "Output": "** 4",
                "Explanation": "** The pairs with exactly one prime number on the path between them are: \n- (1, 2) since the path from 1 to 2 contains prime number 2. \n- (1, 3) since the path from 1 to 3 contains prime number 3.\n- (1, 4) since the path from 1 to 4 contains prime number 2.\n- (2, 4) since the path from 2 to 4 contains prime number 2.\nIt can be shown that there are only 4 valid paths."
            },
            {
                "Input": "** n = 6, edges = [[1,2],[1,3],[2,4],[3,5],[3,6]]",
                "Output": "** 6",
                "Explanation": "** The pairs with exactly one prime number on the path between them are: \n- (1, 2) since the path from 1 to 2 contains prime number 2.\n- (1, 3) since the path from 1 to 3 contains prime number 3.\n- (1, 4) since the path from 1 to 4 contains prime number 2.\n- (1, 6) since the path from 1 to 6 contains prime number 3.\n- (2, 4) since the path from 2 to 4 contains prime number 2.\n- (3, 6) since the path from 3 to 6 contains prime number 3.\nIt can be shown that there are only 6 valid paths."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Collect Elements",
        "slug": "minimum-operations-to-collect-elements",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [3,1,5,4,2], k = 2",
                "Output": "** 4",
                "Explanation": "** After 4 operations, we collect elements 2, 4, 5, and 1, in this order. Our collection contains elements 1 and 2. Hence, the answer is 4."
            },
            {
                "Input": "** nums = [3,1,5,4,2], k = 5",
                "Output": "** 5",
                "Explanation": "** After 5 operations, we collect elements 2, 4, 5, 1, and 3, in this order. Our collection contains elements 1 through 5. Hence, the answer is 5."
            },
            {
                "Input": "** nums = [3,2,5,3,1], k = 3",
                "Output": "** 4",
                "Explanation": "** After 4 operations, we collect elements 1, 3, 5, and 2, in this order. Our collection contains elements 1 through 3. Hence, the answer is 4."
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Make Array Empty",
        "slug": "minimum-number-of-operations-to-make-array-empty",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,3,3,2,2,4,2,3,4]",
                "Output": "** 4",
                "Explanation": "** We can apply the following operations to make the array empty:\n- Apply the first operation on the elements at indices 0 and 3. The resulting array is nums = [3,3,2,4,2,3,4].\n- Apply the first operation on the elements at indices 2 and 4. The resulting array is nums = [3,3,4,3,4].\n- Apply the second operation on the elements at indices 0, 1, and 3. The resulting array is nums = [4,4].\n- Apply the first operation on the elements at indices 0 and 1. The resulting array is nums = [].\nIt can be shown that we cannot make the array empty in less than 4 operations."
            },
            {
                "Input": "** nums = [2,1,2,2,3,3]",
                "Output": "** -1",
                "Explanation": "** It is impossible to empty the array."
            }
        ]
    },
    {
        "Title": "Split Array Into Maximum Number of Subarrays",
        "slug": "split-array-into-maximum-number-of-subarrays",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,0,2,0,1,2]",
                "Output": "** 3",
                "Explanation": "** We can split the array into the following subarrays:\n- [1,0]. The score of this subarray is 1 AND 0 = 0.\n- [2,0]. The score of this subarray is 2 AND 0 = 0.\n- [1,2]. The score of this subarray is 1 AND 2 = 0.\nThe sum of scores is 0 + 0 + 0 = 0, which is the minimum possible score that we can obtain.\nIt can be shown that we cannot split the array into more than 3 subarrays with a total score of 0. So we return 3."
            },
            {
                "Input": "** nums = [5,7,1,3]",
                "Output": "** 1",
                "Explanation": "** We can split the array into one subarray: [5,7,1,3] with a score of 1, which is the minimum possible score that we can obtain.\nIt can be shown that we cannot split the array into more than 1 subarray with a total score of 1. So we return 1."
            }
        ]
    },
    {
        "Title": "Maximum Number of K-Divisible Components",
        "slug": "maximum-number-of-k-divisible-components",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 5, edges = [[0,2],[1,2],[1,3],[2,4]], values = [1,8,1,4,4], k = 6",
                "Output": "** 2",
                "Explanation": "** We remove the edge connecting node 1 with 2. The resulting split is valid because:\n- The value of the component containing nodes 1 and 3 is values[1] + values[3] = 12.\n- The value of the component containing nodes 0, 2, and 4 is values[0] + values[2] + values[4] = 6.\nIt can be shown that no other valid split has more than 2 connected components."
            },
            {
                "Input": "** n = 7, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [3,0,6,1,5,2,1], k = 3",
                "Output": "** 3",
                "Explanation": "** We remove the edge connecting node 0 with 2, and the edge connecting node 0 with 1. The resulting split is valid because:\n- The value of the component containing node 0 is values[0] = 3.\n- The value of the component containing nodes 2, 5, and 6 is values[2] + values[5] + values[6] = 9.\n- The value of the component containing nodes 1, 3, and 4 is values[1] + values[3] + values[4] = 6.\nIt can be shown that no other valid split has more than 3 connected components."
            }
        ]
    },
    {
        "Title": "Maximum Value of an Ordered Triplet I",
        "slug": "maximum-value-of-an-ordered-triplet-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [12,6,1,2,7]",
                "Output": "** 77",
                "Explanation": "** The value of the triplet (0, 2, 4) is (nums[0] - nums[2]) * nums[4] = 77.\nIt can be shown that there are no ordered triplets of indices with a value greater than 77."
            },
            {
                "Input": "** nums = [1,10,3,4,19]",
                "Output": "** 133",
                "Explanation": "** The value of the triplet (1, 2, 4) is (nums[1] - nums[2]) * nums[4] = 133.\nIt can be shown that there are no ordered triplets of indices with a value greater than 133."
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 0",
                "Explanation": "** The only ordered triplet of indices (0, 1, 2) has a negative value of (nums[0] - nums[1]) * nums[2] = -3. Hence, the answer would be 0."
            }
        ]
    },
    {
        "Title": "Maximum Value of an Ordered Triplet II",
        "slug": "maximum-value-of-an-ordered-triplet-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [12,6,1,2,7]",
                "Output": "** 77",
                "Explanation": "** The value of the triplet (0, 2, 4) is (nums[0] - nums[2]) * nums[4] = 77.\nIt can be shown that there are no ordered triplets of indices with a value greater than 77."
            },
            {
                "Input": "** nums = [1,10,3,4,19]",
                "Output": "** 133",
                "Explanation": "** The value of the triplet (1, 2, 4) is (nums[1] - nums[2]) * nums[4] = 133.\nIt can be shown that there are no ordered triplets of indices with a value greater than 133."
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 0",
                "Explanation": "** The only ordered triplet of indices (0, 1, 2) has a negative value of (nums[0] - nums[1]) * nums[2] = -3. Hence, the answer would be 0."
            }
        ]
    },
    {
        "Title": "Minimum Size Subarray in Infinite Array",
        "slug": "minimum-size-subarray-in-infinite-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3], target = 5",
                "Output": "** 2",
                "Explanation": "** In this example infinite_nums = [1,2,3,1,2,3,1,2,...].\nThe subarray in the range [1,2], has the sum equal to target = 5 and length = 2.\nIt can be proven that 2 is the shortest length of a subarray with sum equal to target = 5."
            },
            {
                "Input": "** nums = [1,1,1,2,3], target = 4",
                "Output": "** 2",
                "Explanation": "** In this example infinite_nums = [1,1,1,2,3,1,1,1,2,3,1,1,...].\nThe subarray in the range [4,5], has the sum equal to target = 4 and length = 2.\nIt can be proven that 2 is the shortest length of a subarray with sum equal to target = 4."
            },
            {
                "Input": "** nums = [2,4,6,8], target = 3",
                "Output": "** -1",
                "Explanation": "** In this example infinite_nums = [2,4,6,8,2,4,6,8,...].\nIt can be proven that there is no subarray with sum equal to target = 3."
            }
        ]
    },
    {
        "Title": "Count Visited Nodes in a Directed Graph",
        "slug": "count-visited-nodes-in-a-directed-graph",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** edges = [1,2,0,0]",
                "Output": "** [3,3,3,4]",
                "Explanation": "** We perform the process starting from each node in the following way:\n- Starting from node 0, we visit the nodes 0 -> 1 -> 2 -> 0. The number of different nodes we visit is 3.\n- Starting from node 1, we visit the nodes 1 -> 2 -> 0 -> 1. The number of different nodes we visit is 3.\n- Starting from node 2, we visit the nodes 2 -> 0 -> 1 -> 2. The number of different nodes we visit is 3.\n- Starting from node 3, we visit the nodes 3 -> 0 -> 1 -> 2 -> 0. The number of different nodes we visit is 4."
            },
            {
                "Input": "** edges = [1,2,3,4,0]",
                "Output": "** [5,5,5,5,5]",
                "Explanation": "** Starting from any node we can visit every node in the graph in the process."
            }
        ]
    },
    {
        "Title": "Create a DataFrame from List",
        "slug": "create-a-dataframe-from-list",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "**student_data:[\n  [1, 15],\n  [2, 11],\n  [3, 11],\n  [4, 20]\n]",
                "Output": "**\n+------------+-----+\n| student_id | age |\n+------------+-----+\n| 1          | 15  |\n| 2          | 11  |\n| 3          | 11  |\n| 4          | 20  |\n+------------+-----+",
                "Explanation": "**\nA DataFrame was created on top of student_data, with two columns named student_id and age."
            }
        ]
    },
    {
        "Title": "Get the Size of a DataFrame",
        "slug": "get-the-size-of-a-dataframe",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "**+-----------+----------+-----+-------------+--------------------+\n| player_id | name     | age | position    | team               |\n+-----------+----------+-----+-------------+--------------------+\n| 846       | Mason    | 21  | Forward     | RealMadrid         |\n| 749       | Riley    | 30  | Winger      | Barcelona          |\n| 155       | Bob      | 28  | Striker     | ManchesterUnited   |\n| 583       | Isabella | 32  | Goalkeeper  | Liverpool          |\n| 388       | Zachary  | 24  | Midfielder  | BayernMunich       |\n| 883       | Ava      | 23  | Defender    | Chelsea            |\n| 355       | Violet   | 18  | Striker     | Juventus           |\n| 247       | Thomas   | 27  | Striker     | ParisSaint-Germain |\n| 761       | Jack     | 33  | Midfielder  | ManchesterCity     |\n| 642       | Charlie  | 36  | Center-back | Arsenal            |\n+-----------+----------+-----+-------------+--------------------+",
                "Output": "**[10, 5]",
                "Explanation": "**\nThis DataFrame contains 10 rows and 5 columns."
            }
        ]
    },
    {
        "Title": "Display the First Three Rows",
        "slug": "display-the-first-three-rows",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "**DataFrame employees\n+-------------+-----------+-----------------------+--------+\n| employee_id | name      | department            | salary |\n+-------------+-----------+-----------------------+--------+\n| 3           | Bob       | Operations            | 48675  |\n| 90          | Alice     | Sales                 | 11096  |\n| 9           | Tatiana   | Engineering           | 33805  |\n| 60          | Annabelle | InformationTechnology | 37678  |\n| 49          | Jonathan  | HumanResources        | 23793  |\n| 43          | Khaled    | Administration        | 40454  |\n+-------------+-----------+-----------------------+--------+",
                "Output": "**\n+-------------+---------+-------------+--------+\n| employee_id | name    | department  | salary |\n+-------------+---------+-------------+--------+\n| 3           | Bob     | Operations  | 48675  |\n| 90          | Alice   | Sales       | 11096  |\n| 9           | Tatiana | Engineering | 33805  |\n+-------------+---------+-------------+--------+",
                "Explanation": "** \nOnly the first 3 rows are displayed."
            }
        ]
    },
    {
        "Title": "Create a New Column",
        "slug": "create-a-new-column",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "**\nDataFrame employees\n+---------+--------+\n| name    | salary |\n+---------+--------+\n| Piper   | 4548   |\n| Grace   | 28150  |\n| Georgia | 1103   |\n| Willow  | 6593   |\n| Finn    | 74576  |\n| Thomas  | 24433  |\n+---------+--------+",
                "Output": "**\n+---------+--------+--------+\n| name    | salary | bonus  |\n+---------+--------+--------+\n| Piper   | 4548   | 9096   |\n| Grace   | 28150  | 56300  |\n| Georgia | 1103   | 2206   |\n| Willow  | 6593   | 13186  |\n| Finn    | 74576  | 149152 |\n| Thomas  | 24433  | 48866  |\n+---------+--------+--------+",
                "Explanation": "** \nA new column bonus is created by doubling the value in the column salary."
            }
        ]
    },
    {
        "Title": "Drop Duplicate Rows",
        "slug": "drop-duplicate-rows",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "**\n+-------------+---------+---------------------+\n| customer_id | name    | email               |\n+-------------+---------+---------------------+\n| 1           | Ella    | emily@example.com   |\n| 2           | David   | michael@example.com |\n| 3           | Zachary | sarah@example.com   |\n| 4           | Alice   | john@example.com    |\n| 5           | Finn    | john@example.com    |\n| 6           | Violet  | alice@example.com   |\n+-------------+---------+---------------------+",
                "Output": "**  \n+-------------+---------+---------------------+\n| customer_id | name    | email               |\n+-------------+---------+---------------------+\n| 1           | Ella    | emily@example.com   |\n| 2           | David   | michael@example.com |\n| 3           | Zachary | sarah@example.com   |\n| 4           | Alice   | john@example.com    |\n| 6           | Violet  | alice@example.com   |\n+-------------+---------+---------------------+",
                "Explanation": "**\nAlic (customer_id = 4) and Finn (customer_id = 5) both use john@example.com, so only the first occurrence of this email is retained.\n\n```"
            }
        ]
    },
    {
        "Title": "Drop Missing Data",
        "slug": "drop-missing-data",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "**+------------+---------+-----+\n| student_id | name    | age |\n+------------+---------+-----+\n| 32         | Piper   | 5   |\n| 217        | None    | 19  |\n| 779        | Georgia | 20  |\n| 849        | Willow  | 14  |\n+------------+---------+-----+",
                "Output": "**+------------+---------+-----+\n| student_id | name    | age |\n+------------+---------+-----+\n| 32         | Piper   | 5   |\n| 779        | Georgia | 20  | \n| 849        | Willow  | 14  | \n+------------+---------+-----+",
                "Explanation": "** \nStudent with id 217 havs empty value in the name column, so it will be removed."
            }
        ]
    },
    {
        "Title": "Modify Columns",
        "slug": "modify-columns",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "**DataFrame employees\n+---------+--------+\n| name    | salary |\n+---------+--------+\n| Jack    | 19666  |\n| Piper   | 74754  |\n| Mia     | 62509  |\n| Ulysses | 54866  |\n+---------+--------+",
                "Output": "**+---------+--------+\n| name    | salary |\n+---------+--------+\n| Jack    | 39332  |\n| Piper   | 149508 |\n| Mia     | 125018 |\n| Ulysses | 109732 |\n+---------+--------+",
                "Explanation": "**Every salary has been doubled."
            }
        ]
    },
    {
        "Title": "Rename Columns",
        "slug": "rename-columns",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "**+----+---------+----------+-----+\n| id | first   | last     | age |\n+----+---------+----------+-----+\n| 1  | Mason   | King     | 6   |\n| 2  | Ava     | Wright   | 7   |\n| 3  | Taylor  | Hall     | 16  |\n| 4  | Georgia | Thompson | 18  |\n| 5  | Thomas  | Moore    | 10  |\n+----+---------+----------+-----+",
                "Output": "**\n+------------+------------+-----------+--------------+\n| student_id | first_name | last_name | age_in_years |\n+------------+------------+-----------+--------------+\n| 1          | Mason      | King      | 6            |\n| 2          | Ava        | Wright    | 7            |\n| 3          | Taylor     | Hall      | 16           |\n| 4          | Georgia    | Thompson  | 18           |\n| 5          | Thomas     | Moore     | 10           |\n+------------+------------+-----------+--------------+",
                "Explanation": "** \nThe column names are changed accordingly.\n```"
            }
        ]
    },
    {
        "Title": "Change Data Type",
        "slug": "change-data-type",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "**DataFrame students:\n+------------+------+-----+-------+\n| student_id | name | age | grade |\n+------------+------+-----+-------+\n| 1          | Ava  | 6   | 73.0  |\n| 2          | Kate | 15  | 87.0  |\n+------------+------+-----+-------+",
                "Output": "**+------------+------+-----+-------+\n| student_id | name | age | grade |\n+------------+------+-----+-------+\n| 1          | Ava  | 6   | 73    |\n| 2          | Kate | 15  | 87    |\n+------------+------+-----+-------+",
                "Explanation": "** \nThe data types of the column grade is converted to int.\n```"
            }
        ]
    },
    {
        "Title": "Fill Missing Data",
        "slug": "fill-missing-data",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "**+-----------------+----------+-------+\n| name            | quantity | price |\n+-----------------+----------+-------+\n| Wristwatch      | None     | 135   |\n| WirelessEarbuds | None     | 821   |\n| GolfClubs       | 779      | 9319  |\n| Printer         | 849      | 3051  |\n+-----------------+----------+-------+",
                "Output": "**+-----------------+----------+-------+\n| name            | quantity | price |\n+-----------------+----------+-------+\n| Wristwatch      | 0        | 135   |\n| WirelessEarbuds | 0        | 821   |\n| GolfClubs       | 779      | 9319  |\n| Printer         | 849      | 3051  |\n+-----------------+----------+-------+",
                "Explanation": "** \nThe quantity for Wristwatch and WirelessEarbuds are filled by 0.\n```"
            }
        ]
    },
    {
        "Title": "Reshape Data: Concatenate",
        "slug": "reshape-data-concatenate",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "df1**\n+------------+---------+-----+\n| student_id | name    | age |\n+------------+---------+-----+\n| 1          | Mason   | 8   |\n| 2          | Ava     | 6   |\n| 3          | Taylor  | 15  |\n| 4          | Georgia | 17  |\n+------------+---------+-----+\n**df2**+------------+------+-----+\n| student_id | name | age |\n+------------+------+-----+\n| 5          | Leo  | 7   |\n| 6          | Alex | 7   |\n+------------+------+-----+",
                "Output": "**\n+------------+---------+-----+\n| student_id | name    | age |\n+------------+---------+-----+\n| 1          | Mason   | 8   |\n| 2          | Ava     | 6   |\n| 3          | Taylor  | 15  |\n| 4          | Georgia | 17  |\n| 5          | Leo     | 7   |\n| 6          | Alex    | 7   |\n+------------+---------+-----+",
                "Explanation": "**The two DataFramess are stacked vertically, and their rows are combined."
            }
        ]
    },
    {
        "Title": "Reshape Data: Pivot",
        "slug": "reshape-data-pivot",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "**\n+--------------+----------+-------------+\n| city         | month    | temperature |\n+--------------+----------+-------------+\n| Jacksonville | January  | 13          |\n| Jacksonville | February | 23          |\n| Jacksonville | March    | 38          |\n| Jacksonville | April    | 5           |\n| Jacksonville | May      | 34          |\n| ElPaso       | January  | 20          |\n| ElPaso       | February | 6           |\n| ElPaso       | March    | 26          |\n| ElPaso       | April    | 2           |\n| ElPaso       | May      | 43          |\n+--------------+----------+-------------+",
                "Output": "**\n+----------+--------+--------------+\n| month    | ElPaso | Jacksonville |\n+----------+--------+--------------+\n| April    | 2      | 5            |\n| February | 6      | 23           |\n| January  | 20     | 13           |\n| March    | 26     | 38           |\n| May      | 43     | 34           |\n+----------+--------+--------------+",
                "Explanation": "**The table is pivoted, each column represents a city, and each row represents a specific month.\n```"
            }
        ]
    },
    {
        "Title": "Reshape Data: Melt",
        "slug": "reshape-data-melt",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "**+-------------+-----------+-----------+-----------+-----------+\n| product     | quarter_1 | quarter_2 | quarter_3 | quarter_4 |\n+-------------+-----------+-----------+-----------+-----------+\n| Umbrella    | 417       | 224       | 379       | 611       |\n| SleepingBag | 800       | 936       | 93        | 875       |\n+-------------+-----------+-----------+-----------+-----------+",
                "Output": "**\n+-------------+-----------+-------+\n| product     | quarter   | sales |\n+-------------+-----------+-------+\n| Umbrella    | quarter_1 | 417   |\n| SleepingBag | quarter_1 | 800   |\n| Umbrella    | quarter_2 | 224   |\n| SleepingBag | quarter_2 | 936   |\n| Umbrella    | quarter_3 | 379   |\n| SleepingBag | quarter_3 | 93    |\n| Umbrella    | quarter_4 | 611   |\n| SleepingBag | quarter_4 | 875   |\n+-------------+-----------+-------+",
                "Explanation": "**\nThe DataFrame is reshaped from wide to long format. Each row represents the sales of a product in a quarter."
            }
        ]
    },
    {
        "Title": "Method Chaining",
        "slug": "method-chaining",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** \nDataFrame animals:\n+----------+---------+-----+--------+\n| name     | species | age | weight |\n+----------+---------+-----+--------+\n| Tatiana  | Snake   | 98  | 464    |\n| Khaled   | Giraffe | 50  | 41     |\n| Alex     | Leopard | 6   | 328    |\n| Jonathan | Monkey  | 45  | 463    |\n| Stefan   | Bear    | 100 | 50     |\n| Tommy    | Panda   | 26  | 349    |\n+----------+---------+-----+--------+",
                "Output": "** \n+----------+\n| name     |\n+----------+\n| Tatiana  |\n| Jonathan |\n| Tommy    |\n| Alex     |\n+----------+",
                "Explanation": "** \nAll animals weighing more than 100 should be included in the results table.\nTatiana's weight is 464, Jonathan's weight is 463, Tommy's weight is 349, and Alex's weight is 328.\nThe results should be sorted in descending order of weight."
            }
        ]
    },
    {
        "Title": "Divisible and Non-divisible Sums Difference",
        "slug": "divisible-and-non-divisible-sums-difference",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 10, m = 3",
                "Output": "** 19",
                "Explanation": "** In the given example:\n- Integers in the range [1, 10] that are not divisible by 3 are [1,2,4,5,7,8,10], num1 is the sum of those integers = 37.\n- Integers in the range [1, 10] that are divisible by 3 are [3,6,9], num2 is the sum of those integers = 18.\nWe return 37 - 18 = 19 as the answer."
            },
            {
                "Input": "** n = 5, m = 6",
                "Output": "** 15",
                "Explanation": "** In the given example:\n- Integers in the range [1, 5] that are not divisible by 6 are [1,2,3,4,5], num1 is the sum of those integers = 15.\n- Integers in the range [1, 5] that are divisible by 6 are [], num2 is the sum of those integers = 0.\nWe return 15 - 0 = 15 as the answer."
            },
            {
                "Input": "** n = 5, m = 1",
                "Output": "** -15",
                "Explanation": "** In the given example:\n- Integers in the range [1, 5] that are not divisible by 1 are [], num1 is the sum of those integers = 0.\n- Integers in the range [1, 5] that are divisible by 1 are [1,2,3,4,5], num2 is the sum of those integers = 15.\nWe return 0 - 15 = -15 as the answer."
            }
        ]
    },
    {
        "Title": "Minimum Processing Time",
        "slug": "minimum-processing-time",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** processorTime = [8,10], tasks = [2,2,3,1,8,7,4,5]",
                "Output": "** 16",
                "Explanation": "**\n\n\nAssign the tasks at indices 4, 5, 6, 7 to the first processor which becomes available at `time = 8`, and the tasks at indices 0, 1, 2, 3 to the second processor which becomes available at `time = 10`.\u00a0\n\n\nThe time taken by the first processor to finish the execution of all tasks is\u00a0`max(8 + 8, 8 + 7, 8 + 4, 8 + 5) = 16`.\n\n\nThe time taken by the second processor to finish the execution of all tasks is\u00a0`max(10 + 2, 10 + 2, 10 + 3, 10 + 1) = 13`."
            },
            {
                "Input": "** processorTime = [10,20], tasks = [2,3,1,2,5,8,4,3]",
                "Output": "** 23",
                "Explanation": "**\n\n\nAssign the tasks at indices 1, 4, 5, 6 to the first processor and the others to the second processor.\n\n\nThe time taken by the first processor to finish the execution of all tasks is `max(10 + 3, 10 + 5, 10 + 8, 10 + 4) = 18`.\n\n\nThe time taken by the second processor to finish the execution of all tasks is `max(20 + 2, 20 + 1, 20 + 2, 20 + 3) = 23`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == processorTime.length <= 25000`\n* `1 <= tasks.length <= 105`\n* `0 <= processorTime[i] <= 109`\n* `1 <= tasks[i] <= 109`\n* `tasks.length == 4 * n`\n\n\nHints:\n    0. It\u2019s optimal to make the processor with earlier process time run 4 longer tasks.****\n    1. The largest <code>processTime[i] + tasks[j]</code> (when matched) is the answer."
            }
        ]
    },
    {
        "Title": "Apply Operations to Make Two Strings Equal",
        "slug": "apply-operations-to-make-two-strings-equal",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s1 = \"1100011000\", s2 = \"0101001010\", x = 2",
                "Output": "** 4",
                "Explanation": "** We can do the following operations:\n- Choose i = 3 and apply the second operation. The resulting string is s1 = \"110**11**11000\".\n- Choose i = 4 and apply the second operation. The resulting string is s1 = \"1101**00**1000\".\n- Choose i = 0 and j = 8 and apply the first operation. The resulting string is s1 = \"**0**1010010**1**0\" = s2.\nThe total cost is 1 + 1 + 2 = 4. It can be shown that it is the minimum cost possible."
            },
            {
                "Input": "** s1 = \"10110\", s2 = \"00011\", x = 4",
                "Output": "** -1",
                "Explanation": "** It is not possible to make the two strings equal."
            }
        ]
    },
    {
        "Title": "Apply Operations on Array to Maximize Sum of Squares",
        "slug": "apply-operations-on-array-to-maximize-sum-of-squares",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [2,6,5,8], k = 2",
                "Output": "** 261",
                "Explanation": "** We can do the following operations on the array:\n- Choose i = 0 and j = 3, then change nums[0] to (2 AND 8) = 0 and nums[3] to (2 OR 8) = 10. The resulting array is nums = [0,6,5,10].\n- Choose i = 2 and j = 3, then change nums[2] to (5 AND 10) = 0 and nums[3] to (5 OR 10) = 15. The resulting array is nums = [0,6,0,15].\nWe can choose the elements 15 and 6 from the final array. The sum of squares is 152 + 62 = 261.\nIt can be shown that this is the maximum value we can get."
            },
            {
                "Input": "** nums = [4,5,4,7], k = 3",
                "Output": "** 90",
                "Explanation": "** We do not need to apply any operations.\nWe can choose the elements 7, 5, and 4 with a sum of squares: 72 + 52 + 42 = 90.\nIt can be shown that this is the maximum value we can get."
            }
        ]
    },
    {
        "Title": "Last Visited Integers",
        "slug": "last-visited-integers",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,-1,-1,-1]",
                "Output": "** [2,1,-1]",
                "Explanation": "**\n\n\nStart with `seen = []` and `ans = []`.\n\n\n1. Process `nums[0]`: The first element in nums is `1`. We prepend it to the front of `seen`. Now, `seen == [1]`.\n2. Process `nums[1]`: The next element is `2`. We prepend it to the front of `seen`. Now, `seen == [2, 1]`.\n3. Process `nums[2]`: The next element is `-1`. This is the first occurrence of `-1`, so `k == 1`. We look for the first element in seen. We append `2` to `ans`. Now, `ans == [2]`.\n4. Process `nums[3]`: Another `-1`. This is the second consecutive `-1`, so `k == 2`. The second element in `seen` is `1`, so we append `1` to `ans`. Now, `ans == [2, 1]`.\n5. Process `nums[4]`: Another `-1`, the third in a row, making `k = 3`. However, `seen` only has two elements (`[2, 1]`). Since `k` is greater than the number of elements in `seen`, we append `-1` to `ans`. Finally, `ans == [2, 1, -1]`."
            },
            {
                "Input": "** nums = [1,-1,2,-1,-1]",
                "Output": "** [1,2,1]",
                "Explanation": "**\n\n\nStart with `seen = []` and `ans = []`.\n\n\n1. Process `nums[0]`: The first element in nums is `1`. We prepend it to the front of `seen`. Now, `seen == [1]`.\n2. Process `nums[1]`: The next element is `-1`. This is the first occurrence of `-1`, so `k == 1`. We look for the first element in `seen`, which is `1`. Append `1` to `ans`. Now, `ans == [1]`.\n3. Process `nums[2]`: The next element is `2`. Prepend this to the front of `seen`. Now, `seen == [2, 1]`.\n4. Process `nums[3]`: The next element is `-1`. This `-1` is not consecutive to the first `-1` since `2` was in between. Thus, `k` resets to `1`. The first element in `seen` is `2`, so append `2` to `ans`. Now, `ans == [1, 2]`.\n5. Process `nums[4]`: Another `-1`. This is consecutive to the previous `-1`, so `k == 2`. The second element in `seen` is `1`, append `1` to `ans`. Finally, `ans == [1, 2, 1]`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `nums[i] == -1` or `1 <= nums[i]\u00a0<= 100`"
            }
        ]
    },
    {
        "Title": "Longest Unequal Adjacent Groups Subsequence I",
        "slug": "longest-unequal-adjacent-groups-subsequence-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** words = [\"e\",\"a\",\"b\"], groups = [0,0,1]",
                "Output": "** [\"e\",\"b\"]",
                "Explanation": "** A subsequence that can be selected is `[\"e\",\"b\"]` because `groups[0] != groups[2]`. Another subsequence that can be selected is `[\"a\",\"b\"]` because `groups[1] != groups[2]`. It can be demonstrated that the length of the longest subsequence of indices that satisfies the condition is `2`."
            },
            {
                "Input": "** words = [\"a\",\"b\",\"c\",\"d\"], groups = [1,0,1,1]",
                "Output": "** [\"a\",\"b\",\"c\"]",
                "Explanation": "** A subsequence that can be selected is `[\"a\",\"b\",\"c\"]` because `groups[0] != groups[1]` and `groups[1] != groups[2]`. Another subsequence that can be selected is `[\"a\",\"b\",\"d\"]` because `groups[0] != groups[1]` and `groups[1] != groups[3]`. It can be shown that the length of the longest subsequence of indices that satisfies the condition is `3`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == words.length == groups.length <= 100`\n* `1 <= words[i].length <= 10`\n* `groups[i]` is either `0` or `1.`\n* `words` consists of **distinct** strings.\n* `words[i]` consists of lowercase English letters.\n\n\nHints:\n    0. This problem can be solved greedily.\n    1. Begin by constructing the answer starting with the first number in <code>groups</code>.\n    2. For each index <code>i</code> in the range <code>[1, n - 1]</code>, add <code>i</code> to the answer if <code>groups[i] != groups[i - 1]</code>."
            }
        ]
    },
    {
        "Title": "Longest Unequal Adjacent Groups Subsequence II",
        "slug": "longest-unequal-adjacent-groups-subsequence-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** words = [\"bab\",\"dab\",\"cab\"], groups = [1,2,2]",
                "Output": "** [\"bab\",\"cab\"]",
                "Explanation": "** A subsequence that can be selected is `[0,2]`.\n\n\n* `groups[0] != groups[2]`\n* `words[0].length == words[2].length`, and the hamming distance between them is 1.\n\n\nSo, a valid answer is `[words[0],words[2]] = [\"bab\",\"cab\"]`.\n\n\nAnother subsequence that can be selected is `[0,1]`.\n\n\n* `groups[0] != groups[1]`\n* `words[0].length == words[1].length`, and the hamming distance between them is `1`.\n\n\nSo, another valid answer is `[words[0],words[1]] = [\"bab\",\"dab\"]`.\n\n\nIt can be shown that the length of the longest subsequence of indices that satisfies the conditions is `2`."
            },
            {
                "Input": "** words = [\"a\",\"b\",\"c\",\"d\"], groups = [1,2,3,4]",
                "Output": "** [\"a\",\"b\",\"c\",\"d\"]",
                "Explanation": "** We can select the subsequence `[0,1,2,3]`.\n\n\nIt satisfies both conditions.\n\n\nHence, the answer is `[words[0],words[1],words[2],words[3]] = [\"a\",\"b\",\"c\",\"d\"]`.\n\n\nIt has the longest length among all subsequences of indices that satisfy the conditions.\n\n\nHence, it is the only answer.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == words.length == groups.length <= 1000`\n* `1 <= words[i].length <= 10`\n* `1 <= groups[i] <= n`\n* `words` consists of **distinct** strings.\n* `words[i]` consists of lowercase English letters.\n\n\nHints:\n    0. Let <code>dp[i]</code> represent the length of the longest subsequence ending with <code>words[i]</code> that satisfies the conditions.\n    1. <code>dp[i] =</code> (maximum value of <code>dp[j]</code>) <code>+ 1</code> for indices <code>j < i</code>, where <code>groups[i] != groups[j]</code>, <code>words[i]</code> and <code>words[j]</code> are equal in length, and the hamming distance between <code>words[i]</code> and <code>words[j]</code> is exactly <code>1</code>.\n    2. Keep track of the <code>j</code> values used to achieve the maximum <code>dp[i]</code> for each index <code>i</code>.\n    3. The expected array's length is <code>max(dp[0:n])</code>, and starting from the index having the maximum value in <code>dp</code>, we can trace backward to get the words."
            }
        ]
    },
    {
        "Title": "Count of Sub-Multisets With Bounded Sum",
        "slug": "count-of-sub-multisets-with-bounded-sum",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,2,3], l = 6, r = 6",
                "Output": "** 1",
                "Explanation": "** The only subset of nums that has a sum of 6 is {1, 2, 3}."
            },
            {
                "Input": "** nums = [2,1,4,2,7], l = 1, r = 5",
                "Output": "** 7",
                "Explanation": "** The subsets of nums that have a sum within the range [1, 5] are {1}, {2}, {4}, {2, 2}, {1, 2}, {1, 4}, and {1, 2, 2}."
            },
            {
                "Input": "** nums = [1,2,1,3,5,2], l = 3, r = 5",
                "Output": "** 9",
                "Explanation": "** The subsets of nums that have a sum within the range [3, 5] are {3}, {5}, {1, 2}, {1, 3}, {2, 2}, {2, 3}, {1, 1, 2}, {1, 1, 3}, and {1, 2, 2}."
            }
        ]
    },
    {
        "Title": "Find Indices With Index and Value Difference I",
        "slug": "find-indices-with-index-and-value-difference-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [5,1,4,1], indexDifference = 2, valueDifference = 4",
                "Output": "** [0,3]",
                "Explanation": "** In this example, i = 0 and j = 3 can be selected.\nabs(0 - 3) >= 2 and abs(nums[0] - nums[3]) >= 4.\nHence, a valid answer is [0,3].\n[3,0] is also a valid answer."
            },
            {
                "Input": "** nums = [2,1], indexDifference = 0, valueDifference = 0",
                "Output": "** [0,0]",
                "Explanation": "** In this example, i = 0 and j = 0 can be selected.\nabs(0 - 0) >= 0 and abs(nums[0] - nums[0]) >= 0.\nHence, a valid answer is [0,0].\nOther valid answers are [0,1], [1,0], and [1,1]."
            },
            {
                "Input": "** nums = [1,2,3], indexDifference = 2, valueDifference = 4",
                "Output": "** [-1,-1]",
                "Explanation": "** In this example, it can be shown that it is impossible to find two indices that satisfy both conditions.\nHence, [-1,-1] is returned."
            }
        ]
    },
    {
        "Title": "Shortest and Lexicographically Smallest Beautiful String",
        "slug": "shortest-and-lexicographically-smallest-beautiful-string",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"100011001\", k = 3",
                "Output": "** \"11001\"",
                "Explanation": "** There are 7 beautiful substrings in this example:\n1. The substring \"100011001\".\n2. The substring \"100011001\".\n3. The substring \"100011001\".\n4. The substring \"100011001\".\n5. The substring \"100011001\".\n6. The substring \"100011001\".\n7. The substring \"100011001\".\nThe length of the shortest beautiful substring is 5.\nThe lexicographically smallest beautiful substring with length 5 is the substring \"11001\"."
            },
            {
                "Input": "** s = \"1011\", k = 2",
                "Output": "** \"11\"",
                "Explanation": "** There are 3 beautiful substrings in this example:\n1. The substring \"1011\".\n2. The substring \"1011\".\n3. The substring \"1011\".\nThe length of the shortest beautiful substring is 2.\nThe lexicographically smallest beautiful substring with length 2 is the substring \"11\"."
            },
            {
                "Input": "** s = \"000\", k = 1",
                "Output": "** \"\"",
                "Explanation": "** There are no beautiful substrings in this example."
            }
        ]
    },
    {
        "Title": "Find Indices With Index and Value Difference II",
        "slug": "find-indices-with-index-and-value-difference-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [5,1,4,1], indexDifference = 2, valueDifference = 4",
                "Output": "** [0,3]",
                "Explanation": "** In this example, i = 0 and j = 3 can be selected.\nabs(0 - 3) >= 2 and abs(nums[0] - nums[3]) >= 4.\nHence, a valid answer is [0,3].\n[3,0] is also a valid answer."
            },
            {
                "Input": "** nums = [2,1], indexDifference = 0, valueDifference = 0",
                "Output": "** [0,0]",
                "Explanation": "** In this example, i = 0 and j = 0 can be selected.\nabs(0 - 0) >= 0 and abs(nums[0] - nums[0]) >= 0.\nHence, a valid answer is [0,0].\nOther valid answers are [0,1], [1,0], and [1,1]."
            },
            {
                "Input": "** nums = [1,2,3], indexDifference = 2, valueDifference = 4",
                "Output": "** [-1,-1]",
                "Explanation": "** In this example, it can be shown that it is impossible to find two indices that satisfy both conditions.\nHence, [-1,-1] is returned."
            }
        ]
    },
    {
        "Title": "Construct Product Matrix",
        "slug": "construct-product-matrix",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[1,2],[3,4]]",
                "Output": "** [[24,12],[8,6]]",
                "Explanation": "** p[0][0] = grid[0][1] * grid[1][0] * grid[1][1] = 2 * 3 * 4 = 24\np[0][1] = grid[0][0] * grid[1][0] * grid[1][1] = 1 * 3 * 4 = 12\np[1][0] = grid[0][0] * grid[0][1] * grid[1][1] = 1 * 2 * 4 = 8\np[1][1] = grid[0][0] * grid[0][1] * grid[1][0] = 1 * 2 * 3 = 6\nSo the answer is [[24,12],[8,6]]."
            },
            {
                "Input": "** grid = [[12345],[2],[1]]",
                "Output": "** [[2],[0],[0]]",
                "Explanation": "** p[0][0] = grid[0][1] * grid[0][2] = 2 * 1 = 2.\np[0][1] = grid[0][0] * grid[0][2] = 12345 * 1 = 12345. 12345 % 12345 = 0. So p[0][1] = 0.\np[0][2] = grid[0][0] * grid[0][1] = 12345 * 2 = 24690. 24690 % 12345 = 0. So p[0][2] = 0.\nSo the answer is [[2],[0],[0]]."
            }
        ]
    },
    {
        "Title": "Minimum Sum of Mountain Triplets I",
        "slug": "minimum-sum-of-mountain-triplets-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [8,6,1,5,3]",
                "Output": "** 9",
                "Explanation": "** Triplet (2, 3, 4) is a mountain triplet of sum 9 since: \n- 2 < 3 < 4\n- nums[2] < nums[3] and nums[4] < nums[3]\nAnd the sum of this triplet is nums[2] + nums[3] + nums[4] = 9. It can be shown that there are no mountain triplets with a sum of less than 9."
            },
            {
                "Input": "** nums = [5,4,8,7,10,2]",
                "Output": "** 13",
                "Explanation": "** Triplet (1, 3, 5) is a mountain triplet of sum 13 since: \n- 1 < 3 < 5\n- nums[1] < nums[3] and nums[5] < nums[3]\nAnd the sum of this triplet is nums[1] + nums[3] + nums[5] = 13. It can be shown that there are no mountain triplets with a sum of less than 13."
            },
            {
                "Input": "** nums = [6,5,4,3,4,5]",
                "Output": "** -1",
                "Explanation": "** It can be shown that there are no mountain triplets in nums."
            }
        ]
    },
    {
        "Title": "Minimum Sum of Mountain Triplets II",
        "slug": "minimum-sum-of-mountain-triplets-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [8,6,1,5,3]",
                "Output": "** 9",
                "Explanation": "** Triplet (2, 3, 4) is a mountain triplet of sum 9 since: \n- 2 < 3 < 4\n- nums[2] < nums[3] and nums[4] < nums[3]\nAnd the sum of this triplet is nums[2] + nums[3] + nums[4] = 9. It can be shown that there are no mountain triplets with a sum of less than 9."
            },
            {
                "Input": "** nums = [5,4,8,7,10,2]",
                "Output": "** 13",
                "Explanation": "** Triplet (1, 3, 5) is a mountain triplet of sum 13 since: \n- 1 < 3 < 5\n- nums[1] < nums[3] and nums[5] < nums[3]\nAnd the sum of this triplet is nums[1] + nums[3] + nums[5] = 13. It can be shown that there are no mountain triplets with a sum of less than 13."
            },
            {
                "Input": "** nums = [6,5,4,3,4,5]",
                "Output": "** -1",
                "Explanation": "** It can be shown that there are no mountain triplets in nums."
            }
        ]
    },
    {
        "Title": "Minimum Number of Groups to Create a Valid Assignment",
        "slug": "minimum-number-of-groups-to-create-a-valid-assignment",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "**   balls = [3,2,3,2,3]",
                "Output": "**   2",
                "Explanation": "**\n\n\nWe can sort `balls` into boxes as follows:\n\n\n* `[3,3,3]`\n* `[2,2]`\n\n\nThe size difference between the two boxes doesn't exceed one."
            },
            {
                "Input": "**   balls = [10,10,10,3,1,1]",
                "Output": "**   4",
                "Explanation": "**\n\n\nWe can sort `balls` into boxes as follows:\n\n\n\n\n* `[10]`\n* `[10,10]`\n* `[3]`\n* `[1,1]`\n\n\nYou can't use fewer than four boxes while still following the rules. For example, putting all three balls numbered 10 in one box would break the rule about the maximum size difference between boxes.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\nHints:\n    0. Calculate the frequency of each number.\n    1. For each <code>x</code> in the range <code>[1, minimum_frequency]</code>, try to create groups with either <code>x</code> or <code>x + 1</code> indices assigned to them while minimizing the total number of groups.\n    2. For each distinct number, using its frequency, check that all its occurrences can be assigned to groups of size <code>x</code> or <code>x + 1</code> while minimizing the number of groups used.\n    3. To get the minimum number of groups needed for a number having frequency <code>f</code> to be assigned to groups of size <code>x</code> or <code>x + 1</code>, let <code>a = f / (x + 1)</code> and <code>b = f % (x + 1)</code>. <ul> <li>If <code>b == 0</code>, then we can simply create <code>a</code> groups of size <code>x + 1</code>.</li> <li>If <code>x - b <= a</code>, we can have <code>a - (x - b)</code> groups of size <code>x + 1</code> and <code>x - b + 1</code> groups of size <code>x</code>. So, in total, we have <code>a + 1</code> groups.</li> <li>Otherwise, it's impossible.</li> </ul>\n    4. The minimum number of groups needed for some <code>x</code> is the total minimized number of groups needed for each distinct number.\n    5. The answer is the minimum number of groups needed for each <code>x</code> in the range <code>[1, minimum_frequency]</code>."
            }
        ]
    },
    {
        "Title": "Minimum Changes to Make K Semi-palindromes",
        "slug": "minimum-changes-to-make-k-semi-palindromes",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "**   s = \"abcac\", k = 2",
                "Output": "**   1",
                "Explanation": "**  Divide `s` into `\"ab\"` and `\"cac\"`. `\"cac\"` is already semi-palindrome. Change `\"ab\"` to `\"aa\"`, it becomes semi-palindrome with `d = 1`."
            },
            {
                "Input": "**   s = \"abcdef\", k = 2",
                "Output": "**   2",
                "Explanation": "**  Divide `s` into substrings `\"abc\"` and `\"def\"`. Each\u00a0needs one change to become semi-palindrome."
            },
            {
                "Input": "**   s = \"aabbaa\", k = 3",
                "Output": "**   0",
                "Explanation": "**  Divide `s` into substrings `\"aa\"`, `\"bb\"` and `\"aa\"`.\u00a0All are already semi-palindromes.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= s.length <= 200`\n* `1 <= k <= s.length / 2`\n* `s` contains only lowercase English letters.\n\n\nHints:\n    0. Define <code>dp[i][j]</code> as the minimum count of letter changes needed to split the suffix of string <code>s</code> starting from <code>s[i]</code> into <code>j</code> valid parts.\n    1. We have <code>dp[i][j] = min(dp[x + 1][j - 1] + v[i][x])</code>. Here <code>v[i][x]</code> is the minimum number of letter changes to change substring <code>s[i..x]</code> into semi-palindrome.\n    2. <code>v[i][j]</code> can be calculated separately by <b>brute-force</b>. We can create a table of <code>v[i][j]</code> independently to improve the complexity. Also note that semi-palindrome\u2019s length is at least <code>2</code>.\nSimilarQuestions: [1278]"
            }
        ]
    },
    {
        "Title": "Subarrays Distinct Element Sum of Squares I",
        "slug": "subarrays-distinct-element-sum-of-squares-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,1]",
                "Output": "** 15",
                "Explanation": "** Six possible subarrays are:\n[1]: 1 distinct value\n[2]: 1 distinct value\n[1]: 1 distinct value\n[1,2]: 2 distinct values\n[2,1]: 2 distinct values\n[1,2,1]: 2 distinct values\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 + 22 + 22 + 22 = 15."
            },
            {
                "Input": "** nums = [1,1]",
                "Output": "** 3",
                "Explanation": "** Three possible subarrays are:\n[1]: 1 distinct value\n[1]: 1 distinct value\n[1,1]: 1 distinct value\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 = 3."
            }
        ]
    },
    {
        "Title": "Minimum Number of Changes to Make Binary String Beautiful",
        "slug": "minimum-number-of-changes-to-make-binary-string-beautiful",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"1001\"",
                "Output": "** 2",
                "Explanation": "** We change s[1] to 1 and s[3] to 0 to get string \"1100\".\nIt can be seen that the string \"1100\" is beautiful because we can partition it into \"11|00\".\nIt can be proven that 2 is the minimum number of changes needed to make the string beautiful."
            },
            {
                "Input": "** s = \"10\"",
                "Output": "** 1",
                "Explanation": "** We change s[1] to 1 to get string \"11\".\nIt can be seen that the string \"11\" is beautiful because we can partition it into \"11\".\nIt can be proven that 1 is the minimum number of changes needed to make the string beautiful."
            },
            {
                "Input": "** s = \"0000\"",
                "Output": "** 0",
                "Explanation": "** We don't need to make any changes as the string \"0000\" is beautiful already."
            }
        ]
    },
    {
        "Title": "Length of the Longest Subsequence That Sums to Target",
        "slug": "length-of-the-longest-subsequence-that-sums-to-target",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5], target = 9",
                "Output": "** 3",
                "Explanation": "** There are 3 subsequences with a sum equal to 9: [4,5], [1,3,5], and [2,3,4]. The longest subsequences are [1,3,5], and [2,3,4]. Hence, the answer is 3."
            },
            {
                "Input": "** nums = [4,1,3,2,1,5], target = 7",
                "Output": "** 4",
                "Explanation": "** There are 5 subsequences with a sum equal to 7: [4,3], [4,1,2], [4,2,1], [1,1,5], and [1,3,2,1]. The longest subsequence is [1,3,2,1]. Hence, the answer is 4."
            },
            {
                "Input": "** nums = [1,1,5,4,5], target = 3",
                "Output": "** -1",
                "Explanation": "** It can be shown that nums has no subsequence that sums up to 3."
            }
        ]
    },
    {
        "Title": "Subarrays Distinct Element Sum of Squares II",
        "slug": "subarrays-distinct-element-sum-of-squares-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,1]",
                "Output": "** 15",
                "Explanation": "** Six possible subarrays are:\n[1]: 1 distinct value\n[2]: 1 distinct value\n[1]: 1 distinct value\n[1,2]: 2 distinct values\n[2,1]: 2 distinct values\n[1,2,1]: 2 distinct values\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 + 22 + 22 + 22 = 15."
            },
            {
                "Input": "** nums = [2,2]",
                "Output": "** 3",
                "Explanation": "** Three possible subarrays are:\n[2]: 1 distinct value\n[2]: 1 distinct value\n[2,2]: 1 distinct value\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 = 3."
            }
        ]
    },
    {
        "Title": "Find the K-or of an Array",
        "slug": "find-the-k-or-of-an-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [7,12,9,8,9,15], k = 4",
                "Output": "** 9",
                "Explanation": "** \n\n\nRepresent numbers in binary:\n\n\n\n\n| **Number** | Bit 3 | Bit 2 | Bit 1 | Bit 0 |\n| --- | --- | --- | --- | --- |\n| **7** | 0 | 1 | 1 | 1 |\n| **12** | 1 | 1 | 0 | 0 |\n| **9** | 1 | 0 | 0 | 1 |\n| **8** | 1 | 0 | 0 | 0 |\n| **9** | 1 | 0 | 0 | 1 |\n| **15** | 1 | 1 | 1 | 1 |\n| **Result = 9** | 1 | 0 | 0 | 1 |\n\n\nBit 0 is set in 7, 9, 9, and 15. Bit 3 is set in 12, 9, 8, 9, and 15.  \n\nOnly bits 0 and 3 qualify. The result is `(1001)2 = 9`."
            },
            {
                "Input": "** nums = [2,12,1,11,4,5], k = 6",
                "Output": "** 0",
                "Explanation": "**No bit appears as 1 in all six array numbers, as required for K-or with `k = 6`. Thus, the result is 0."
            },
            {
                "Input": "** nums = [10,8,5,9,11,6,8], k = 1",
                "Output": "** 15",
                "Explanation": "**  Since `k == 1`, the 1-or of the array is equal to the bitwise OR of all its elements. Hence, the answer is `10 OR 8 OR 5 OR 9 OR 11 OR 6 OR 8 = 15`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 50`\n* `0 <= nums[i] < 231`\n* `1 <= k <= nums.length`\n\n\nHints:\n    0. Fix a <code>bit</code> from the range <code>[0, 31]</code>, then count the number of elements of <code>nums</code> that have <code>bit</code> set in them.\n    1. <code>bit</code> is set in integer <code>x</code> if and only if <code>2<sup>bit</sup> AND x == 2<sup>bit</sup></code>, where <code>AND</code> is the bitwise <code>AND</code> operation.\n    2. Fix a <code>bit</code> from the range <code>[0, 31]</code>, then count the number of elements of <code>nums</code> that have <code>bit</code> set in them.\n    3. <code>bit</code> is set in integer <code>x</code> if and only if <code>2<sup>bit</sup> AND x == 2<sup>bit</sup></code>, where <code>AND</code> is the bitwise <code>AND</code> operation.\nSimilarQuestions: [338, 2859]"
            }
        ]
    },
    {
        "Title": "Minimum Equal Sum of Two Arrays After Replacing Zeros",
        "slug": "minimum-equal-sum-of-two-arrays-after-replacing-zeros",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums1 = [3,2,0,1,0], nums2 = [6,5,0]",
                "Output": "** 12",
                "Explanation": "** We can replace 0's in the following way:\n- Replace the two 0's in nums1 with the values 2 and 4. The resulting array is nums1 = [3,2,2,1,4].\n- Replace the 0 in nums2 with the value 1. The resulting array is nums2 = [6,5,1].\nBoth arrays have an equal sum of 12. It can be shown that it is the minimum sum we can obtain."
            },
            {
                "Input": "** nums1 = [2,0,2,0], nums2 = [1,4]",
                "Output": "** -1",
                "Explanation": "** It is impossible to make the sum of both arrays equal."
            }
        ]
    },
    {
        "Title": "Minimum Increment Operations to Make Array Beautiful",
        "slug": "minimum-increment-operations-to-make-array-beautiful",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,3,0,0,2], k = 4",
                "Output": "** 3",
                "Explanation": "** We can perform the following increment operations to make nums beautiful:\nChoose index i = 1 and increase nums[1] by 1 -> [2,4,0,0,2].\nChoose index i = 4 and increase nums[4] by 1 -> [2,4,0,0,3].\nChoose index i = 4 and increase nums[4] by 1 -> [2,4,0,0,4].\nThe subarrays with a size of 3 or more are: [2,4,0], [4,0,0], [0,0,4], [2,4,0,0], [4,0,0,4], [2,4,0,0,4].\nIn all the subarrays, the maximum element is equal to k = 4, so nums is now beautiful.\nIt can be shown that nums cannot be made beautiful with fewer than 3 increment operations.\nHence, the answer is 3."
            },
            {
                "Input": "** nums = [0,1,3,3], k = 5",
                "Output": "** 2",
                "Explanation": "** We can perform the following increment operations to make nums beautiful:\nChoose index i = 2 and increase nums[2] by 1 -> [0,1,4,3].\nChoose index i = 2 and increase nums[2] by 1 -> [0,1,5,3].\nThe subarrays with a size of 3 or more are: [0,1,5], [1,5,3], [0,1,5,3].\nIn all the subarrays, the maximum element is equal to k = 5, so nums is now beautiful.\nIt can be shown that nums cannot be made beautiful with fewer than 2 increment operations.\nHence, the answer is 2."
            },
            {
                "Input": "** nums = [1,1,2], k = 1",
                "Output": "** 0",
                "Explanation": "** The only subarray with a size of 3 or more in this example is [1,1,2].\nThe maximum element, 2, is already greater than k = 1, so we don't need any increment operation.\nHence, the answer is 0."
            }
        ]
    },
    {
        "Title": "Maximum Points After Collecting Coins From All Nodes",
        "slug": "maximum-points-after-collecting-coins-from-all-nodes",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** edges = [[0,1],[1,2],[2,3]], coins = [10,10,3,3], k = 5",
                "Output": "** 11",
                "Explanation": "** \nCollect all the coins from node 0 using the first way. Total points = 10 - 5 = 5.\nCollect all the coins from node 1 using the first way. Total points = 5 + (10 - 5) = 10.\nCollect all the coins from node 2 using the second way so coins left at node 3 will be floor(3 / 2) = 1. Total points = 10 + floor(3 / 2) = 11.\nCollect all the coins from node 3 using the second way. Total points = 11 + floor(1 / 2) = 11.\nIt can be shown that the maximum points we can get after collecting coins from all the nodes is 11."
            }
        ]
    },
    {
        "Title": "Find Champion I",
        "slug": "find-champion-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** grid = [[0,1],[0,0]]",
                "Output": "** 0",
                "Explanation": "** There are two teams in this tournament.\ngrid[0][1] == 1 means that team 0 is stronger than team 1. So team 0 will be the champion."
            },
            {
                "Input": "** grid = [[0,0,1],[1,0,1],[0,0,0]]",
                "Output": "** 1",
                "Explanation": "** There are three teams in this tournament.\ngrid[1][0] == 1 means that team 1 is stronger than team 0.\ngrid[1][2] == 1 means that team 1 is stronger than team 2.\nSo team 1 will be the champion."
            }
        ]
    },
    {
        "Title": "Find Champion II",
        "slug": "find-champion-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3, edges = [[0,1],[1,2]]",
                "Output": "** 0",
                "Explanation": "** Team 1 is weaker than team 0. Team 2 is weaker than team 1. So the champion is team 0."
            },
            {
                "Input": "** n = 4, edges = [[0,2],[1,3],[1,2]]",
                "Output": "** -1",
                "Explanation": "** Team 2 is weaker than team 0 and team 1. Team 3 is weaker than team 1. But team 1 and team 0 are not weaker than any other teams. So the answer is -1."
            }
        ]
    },
    {
        "Title": "Maximum Score After Applying Operations on a Tree",
        "slug": "maximum-score-after-applying-operations-on-a-tree",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** edges = [[0,1],[0,2],[0,3],[2,4],[4,5]], values = [5,2,5,2,1,1]",
                "Output": "** 11",
                "Explanation": "** We can choose nodes 1, 2, 3, 4, and 5. The value of the root is non-zero. Hence, the sum of values on the path from the root to any leaf is different than zero. Therefore, the tree is healthy and the score is values[1] + values[2] + values[3] + values[4] + values[5] = 11.\nIt can be shown that 11 is the maximum score obtainable after any number of operations on the tree."
            },
            {
                "Input": "** edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [20,10,9,7,4,3,5]",
                "Output": "** 40",
                "Explanation": "** We can choose nodes 0, 2, 3, and 4.\n- The sum of values on the path from 0 to 4 is equal to 10.\n- The sum of values on the path from 0 to 3 is equal to 10.\n- The sum of values on the path from 0 to 5 is equal to 3.\n- The sum of values on the path from 0 to 6 is equal to 5.\nTherefore, the tree is healthy and the score is values[0] + values[2] + values[3] + values[4] = 40.\nIt can be shown that 40 is the maximum score obtainable after any number of operations on the tree."
            }
        ]
    },
    {
        "Title": "Maximum Balanced Subsequence Sum",
        "slug": "maximum-balanced-subsequence-sum",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [3,3,5,6]",
                "Output": "** 14",
                "Explanation": "** In this example, the subsequence [3,5,6] consisting of indices 0, 2, and 3 can be selected.\nnums[2] - nums[0] >= 2 - 0.\nnums[3] - nums[2] >= 3 - 2.\nHence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.\nThe subsequence consisting of indices 1, 2, and 3 is also valid.\nIt can be shown that it is not possible to get a balanced subsequence with a sum greater than 14."
            },
            {
                "Input": "** nums = [5,-1,-3,8]",
                "Output": "** 13",
                "Explanation": "** In this example, the subsequence [5,8] consisting of indices 0 and 3 can be selected.\nnums[3] - nums[0] >= 3 - 0.\nHence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.\nIt can be shown that it is not possible to get a balanced subsequence with a sum greater than 13."
            },
            {
                "Input": "** nums = [-2,-1]",
                "Output": "** -1",
                "Explanation": "** In this example, the subsequence [-1] can be selected.\nIt is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums."
            }
        ]
    },
    {
        "Title": "Distribute Candies Among Children I",
        "slug": "distribute-candies-among-children-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** n = 5, limit = 2",
                "Output": "** 3",
                "Explanation": "** There are 3 ways to distribute 5 candies such that no child gets more than 2 candies: (1, 2, 2), (2, 1, 2) and (2, 2, 1)."
            },
            {
                "Input": "** n = 3, limit = 3",
                "Output": "** 10",
                "Explanation": "** There are 10 ways to distribute 3 candies such that no child gets more than 3 candies: (0, 0, 3), (0, 1, 2), (0, 2, 1), (0, 3, 0), (1, 0, 2), (1, 1, 1), (1, 2, 0), (2, 0, 1), (2, 1, 0) and (3, 0, 0)."
            }
        ]
    },
    {
        "Title": "Distribute Candies Among Children II",
        "slug": "distribute-candies-among-children-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 5, limit = 2",
                "Output": "** 3",
                "Explanation": "** There are 3 ways to distribute 5 candies such that no child gets more than 2 candies: (1, 2, 2), (2, 1, 2) and (2, 2, 1)."
            },
            {
                "Input": "** n = 3, limit = 3",
                "Output": "** 10",
                "Explanation": "** There are 10 ways to distribute 3 candies such that no child gets more than 3 candies: (0, 0, 3), (0, 1, 2), (0, 2, 1), (0, 3, 0), (1, 0, 2), (1, 1, 1), (1, 2, 0), (2, 0, 1), (2, 1, 0) and (3, 0, 0)."
            }
        ]
    },
    {
        "Title": "Number of Strings Which Can Be Rearranged to Contain Substring",
        "slug": "number-of-strings-which-can-be-rearranged-to-contain-substring",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 4",
                "Output": "** 12",
                "Explanation": "** The 12 strings which can be rearranged to have \"leet\" as a substring are: \"eelt\", \"eetl\", \"elet\", \"elte\", \"etel\", \"etle\", \"leet\", \"lete\", \"ltee\", \"teel\", \"tele\", and \"tlee\"."
            },
            {
                "Input": "** n = 10",
                "Output": "** 83943898",
                "Explanation": "** The number of strings with length 10 which can be rearranged to have \"leet\" as a substring is 526083947580. Hence the answer is 526083947580 % (109 + 7) = 83943898."
            }
        ]
    },
    {
        "Title": "Maximum Spending After Buying Items",
        "slug": "maximum-spending-after-buying-items",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** values = [[8,5,2],[6,4,1],[9,7,3]]",
                "Output": "** 285",
                "Explanation": "** On the first day, we buy product 2 from shop 1 for a price of values[1][2] * 1 = 1.\nOn the second day, we buy product 2 from shop 0 for a price of values[0][2] * 2 = 4.\nOn the third day, we buy product 2 from shop 2 for a price of values[2][2] * 3 = 9.\nOn the fourth day, we buy product 1 from shop 1 for a price of values[1][1] * 4 = 16.\nOn the fifth day, we buy product 1 from shop 0 for a price of values[0][1] * 5 = 25.\nOn the sixth day, we buy product 0 from shop 1 for a price of values[1][0] * 6 = 36.\nOn the seventh day, we buy product 1 from shop 2 for a price of values[2][1] * 7 = 49.\nOn the eighth day, we buy product 0 from shop 0 for a price of values[0][0] * 8 = 64.\nOn the ninth day, we buy product 0 from shop 2 for a price of values[2][0] * 9 = 81.\nHence, our total spending is equal to 285.\nIt can be shown that 285 is the maximum amount of money that can be spent buying all m * n products."
            },
            {
                "Input": "** values = [[10,8,6,4,2],[9,7,5,3,2]]",
                "Output": "** 386",
                "Explanation": "** On the first day, we buy product 4 from shop 0 for a price of values[0][4] * 1 = 2.\nOn the second day, we buy product 4 from shop 1 for a price of values[1][4] * 2 = 4.\nOn the third day, we buy product 3 from shop 1 for a price of values[1][3] * 3 = 9.\nOn the fourth day, we buy product 3 from shop 0 for a price of values[0][3] * 4 = 16.\nOn the fifth day, we buy product 2 from shop 1 for a price of values[1][2] * 5 = 25.\nOn the sixth day, we buy product 2 from shop 0 for a price of values[0][2] * 6 = 36.\nOn the seventh day, we buy product 1 from shop 1 for a price of values[1][1] * 7 = 49.\nOn the eighth day, we buy product 1 from shop 0 for a price of values[0][1] * 8 = 64\nOn the ninth day, we buy product 0 from shop 1 for a price of values[1][0] * 9 = 81.\nOn the tenth day, we buy product 0 from shop 0 for a price of values[0][0] * 10 = 100.\nHence, our total spending is equal to 386.\nIt can be shown that 386 is the maximum amount of money that can be spent buying all m * n products."
            }
        ]
    },
    {
        "Title": "Maximum Strong Pair XOR I",
        "slug": "maximum-strong-pair-xor-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** 7",
                "Explanation": "** There are 11 strong pairs in the array nums: (1, 1), (1, 2), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (3, 5), (4, 4), (4, 5) and (5, 5).\nThe maximum XOR possible from these pairs is 3 XOR 4 = 7."
            },
            {
                "Input": "** nums = [10,100]",
                "Output": "** 0",
                "Explanation": "** There are 2 strong pairs in the array nums: (10, 10) and (100, 100).\nThe maximum XOR possible from these pairs is 10 XOR 10 = 0 since the pair (100, 100) also gives 100 XOR 100 = 0."
            },
            {
                "Input": "** nums = [5,6,25,30]",
                "Output": "** 7",
                "Explanation": "** There are 6 strong pairs in the array nums: (5, 5), (5, 6), (6, 6), (25, 25), (25, 30) and (30, 30).\nThe maximum XOR possible from these pairs is 25 XOR 30 = 7 since the only other non-zero XOR value is 5 XOR 6 = 3."
            }
        ]
    },
    {
        "Title": "High-Access Employees",
        "slug": "high-access-employees",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** access_times = [[\"a\",\"0549\"],[\"b\",\"0457\"],[\"a\",\"0532\"],[\"a\",\"0621\"],[\"b\",\"0540\"]]",
                "Output": "** [\"a\"]",
                "Explanation": "** \"a\" has three access times in the one-hour period of [05:32, 06:31] which are 05:32, 05:49, and 06:21.\nBut \"b\" does not have more than two access times at all.\nSo the answer is [\"a\"]."
            },
            {
                "Input": "** access_times = [[\"d\",\"0002\"],[\"c\",\"0808\"],[\"c\",\"0829\"],[\"e\",\"0215\"],[\"d\",\"1508\"],[\"d\",\"1444\"],[\"d\",\"1410\"],[\"c\",\"0809\"]]",
                "Output": "** [\"c\",\"d\"]",
                "Explanation": "** \"c\" has three access times in the one-hour period of [08:08, 09:07] which are 08:08, 08:09, and 08:29.\n\"d\" has also three access times in the one-hour period of [14:10, 15:09] which are 14:10, 14:44, and 15:08.\nHowever, \"e\" has just one access time, so it can not be in the answer and the final answer is [\"c\",\"d\"]."
            },
            {
                "Input": "** access_times = [[\"cd\",\"1025\"],[\"ab\",\"1025\"],[\"cd\",\"1046\"],[\"cd\",\"1055\"],[\"ab\",\"1124\"],[\"ab\",\"1120\"]]",
                "Output": "** [\"ab\",\"cd\"]",
                "Explanation": "** \"ab\" has three access times in the one-hour period of [10:25, 11:24] which are 10:25, 11:20, and 11:24.\n\"cd\" has also three access times in the one-hour period of [10:25, 11:24] which are 10:25, 10:46, and 10:55.\nSo the answer is [\"ab\",\"cd\"]."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Maximize Last Elements in Arrays",
        "slug": "minimum-operations-to-maximize-last-elements-in-arrays",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums1 = [1,2,7], nums2 = [4,5,3]",
                "Output": "** 1",
                "Explanation": "** In this example, an operation can be performed using index i = 2.\nWhen nums1[2] and nums2[2] are swapped, nums1 becomes [1,2,3] and nums2 becomes [4,5,7].\nBoth conditions are now satisfied.\nIt can be shown that the minimum number of operations needed to be performed is 1.\nSo, the answer is 1."
            },
            {
                "Input": "** nums1 = [2,3,4,5,9], nums2 = [8,8,4,4,4]",
                "Output": "** 2",
                "Explanation": "** In this example, the following operations can be performed:\nFirst operation using index i = 4.\nWhen nums1[4] and nums2[4] are swapped, nums1 becomes [2,3,4,5,4], and nums2 becomes [8,8,4,4,9].\nAnother operation using index i = 3.\nWhen nums1[3] and nums2[3] are swapped, nums1 becomes [2,3,4,4,4], and nums2 becomes [8,8,4,5,9].\nBoth conditions are now satisfied.\nIt can be shown that the minimum number of operations needed to be performed is 2.\nSo, the answer is 2."
            },
            {
                "Input": "** nums1 = [1,5,4], nums2 = [2,5,3]",
                "Output": "** -1",
                "Explanation": "** In this example, it is not possible to satisfy both conditions. \nSo, the answer is -1."
            }
        ]
    },
    {
        "Title": "Maximum Strong Pair XOR II",
        "slug": "maximum-strong-pair-xor-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** 7",
                "Explanation": "** There are 11 strong pairs in the array nums: (1, 1), (1, 2), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (3, 5), (4, 4), (4, 5) and (5, 5).\nThe maximum XOR possible from these pairs is 3 XOR 4 = 7."
            },
            {
                "Input": "** nums = [10,100]",
                "Output": "** 0",
                "Explanation": "** There are 2 strong pairs in the array nums: (10, 10) and (100, 100).\nThe maximum XOR possible from these pairs is 10 XOR 10 = 0 since the pair (100, 100) also gives 100 XOR 100 = 0."
            },
            {
                "Input": "** nums = [500,520,2500,3000]",
                "Output": "** 1020",
                "Explanation": "** There are 6 strong pairs in the array nums: (500, 500), (500, 520), (520, 520), (2500, 2500), (2500, 3000) and (3000, 3000).\nThe maximum XOR possible from these pairs is 500 XOR 520 = 1020 since the only other non-zero XOR value is 2500 XOR 3000 = 636."
            }
        ]
    },
    {
        "Title": "Make Three Strings Equal",
        "slug": "make-three-strings-equal",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s1 = \"abc\", s2 = \"abb\", s3 = \"ab\"",
                "Output": "** 2",
                "Explanation": "**Deleting the rightmost character from both `s1` and `s2` will result in three equal strings."
            },
            {
                "Input": "** s1 = \"dac\", s2 = \"bac\", s3 = \"cac\"",
                "Output": "** -1",
                "Explanation": "** Since the first letters of `s1` and `s2` differ, they cannot be made equal.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s1.length, s2.length, s3.length <= 100`\n* `s1`, `s2` and `s3` consist only of lowercase English letters.\n\n\nSimilarQuestions: [583]"
            }
        ]
    },
    {
        "Title": "Separate Black and White Balls",
        "slug": "separate-black-and-white-balls",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"101\"",
                "Output": "** 1",
                "Explanation": "** We can group all the black balls to the right in the following way:\n- Swap s[0] and s[1], s = \"011\".\nInitially, 1s are not grouped together, requiring at least 1 step to group them to the right."
            },
            {
                "Input": "** s = \"100\"",
                "Output": "** 2",
                "Explanation": "** We can group all the black balls to the right in the following way:\n- Swap s[0] and s[1], s = \"010\".\n- Swap s[1] and s[2], s = \"001\".\nIt can be proven that the minimum number of steps needed is 2."
            },
            {
                "Input": "** s = \"0111\"",
                "Output": "** 0",
                "Explanation": "** All the black balls are already grouped to the right."
            }
        ]
    },
    {
        "Title": "Maximum Xor Product",
        "slug": "maximum-xor-product",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** a = 12, b = 5, n = 4",
                "Output": "** 98",
                "Explanation": "** For x = 2, (a XOR x) = 14 and (b XOR x) = 7. Hence, (a XOR x) * (b XOR x) = 98. \nIt can be shown that 98 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n."
            },
            {
                "Input": "** a = 6, b = 7 , n = 5",
                "Output": "** 930",
                "Explanation": "** For x = 25, (a XOR x) = 31 and (b XOR x) = 30. Hence, (a XOR x) * (b XOR x) = 930.\nIt can be shown that 930 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n."
            },
            {
                "Input": "** a = 1, b = 6, n = 3",
                "Output": "** 12",
                "Explanation": "** For x = 5, (a XOR x) = 4 and (b XOR x) = 3. Hence, (a XOR x) * (b XOR x) = 12.\nIt can be shown that 12 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n."
            }
        ]
    },
    {
        "Title": "Find Building Where Alice and Bob Can Meet",
        "slug": "find-building-where-alice-and-bob-can-meet",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** heights = [6,4,8,5,2,7], queries = [[0,1],[0,3],[2,4],[3,4],[2,2]]",
                "Output": "** [2,5,-1,5,2]",
                "Explanation": "** In the first query, Alice and Bob can move to building 2 since heights[0] < heights[2] and heights[1] < heights[2]. \nIn the second query, Alice and Bob can move to building 5 since heights[0] < heights[5] and heights[3] < heights[5]. \nIn the third query, Alice cannot meet Bob since Alice cannot move to any other building.\nIn the fourth query, Alice and Bob can move to building 5 since heights[3] < heights[5] and heights[4] < heights[5].\nIn the fifth query, Alice and Bob are already in the same building.  \nFor ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet.\nFor ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet."
            },
            {
                "Input": "** heights = [5,3,8,2,6,1,4,6], queries = [[0,7],[3,5],[5,2],[3,0],[1,6]]",
                "Output": "** [7,6,-1,4,6]",
                "Explanation": "** In the first query, Alice can directly move to Bob's building since heights[0] < heights[7].\nIn the second query, Alice and Bob can move to building 6 since heights[3] < heights[6] and heights[5] < heights[6].\nIn the third query, Alice cannot meet Bob since Bob cannot move to any other building.\nIn the fourth query, Alice and Bob can move to building 4 since heights[3] < heights[4] and heights[0] < heights[4].\nIn the fifth query, Alice can directly move to Bob's building since heights[1] < heights[6].\nFor ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet.\nFor ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet."
            }
        ]
    },
    {
        "Title": "Find Words Containing Character",
        "slug": "find-words-containing-character",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** words = [\"leet\",\"code\"], x = \"e\"",
                "Output": "** [0,1]",
                "Explanation": "** \"e\" occurs in both words: \"l**ee**t\", and \"cod**e**\". Hence, we return indices 0 and 1."
            },
            {
                "Input": "** words = [\"abc\",\"bcd\",\"aaaa\",\"cbc\"], x = \"a\"",
                "Output": "** [0,2]",
                "Explanation": "** \"a\" occurs in \"**a**bc\", and \"**aaaa**\". Hence, we return indices 0 and 2."
            },
            {
                "Input": "** words = [\"abc\",\"bcd\",\"aaaa\",\"cbc\"], x = \"z\"",
                "Output": "** []",
                "Explanation": "** \"z\" does not occur in any of the words. Hence, we return an empty array."
            }
        ]
    },
    {
        "Title": "Minimum Number of Coins for Fruits",
        "slug": "minimum-number-of-coins-for-fruits",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** prices = [3,1,2]",
                "Output": "** 4",
                "Explanation": "** You can acquire the fruits as follows:\n- Purchase the 1st fruit with 3 coins, you are allowed to take the 2nd fruit for free.\n- Purchase the 2nd fruit with 1 coin, you are allowed to take the 3rd fruit for free.\n- Take the 3rd fruit for free.\nNote that even though you were allowed to take the 2nd fruit for free, you purchased it because it is more optimal.\nIt can be proven that 4 is the minimum number of coins needed to acquire all the fruits."
            },
            {
                "Input": "** prices = [1,10,1,1]",
                "Output": "** 2",
                "Explanation": "** You can acquire the fruits as follows:\n- Purchase the 1st fruit with 1 coin, you are allowed to take the 2nd fruit for free.\n- Take the 2nd fruit for free.\n- Purchase the 3rd fruit for 1 coin, you are allowed to take the 4th fruit for free.\n- Take the 4th fruit for free.\nIt can be proven that 2 is the minimum number of coins needed to acquire all the fruits."
            }
        ]
    },
    {
        "Title": "Find Maximum Non-decreasing Array Length",
        "slug": "find-maximum-non-decreasing-array-length",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [5,2,2]",
                "Output": "** 1",
                "Explanation": "** This array with length 3 is not non-decreasing.\nWe have two ways to make the array length two.\nFirst, choosing subarray [2,2] converts the array to [5,4].\nSecond, choosing subarray [5,2] converts the array to [7,2].\nIn these two ways the array is not non-decreasing.\nAnd if we choose subarray [5,2,2] and replace it with [9] it becomes non-decreasing. \nSo the answer is 1."
            },
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 4",
                "Explanation": "** The array is non-decreasing. So the answer is 4."
            },
            {
                "Input": "** nums = [4,3,2,6]",
                "Output": "** 3",
                "Explanation": "** Replacing [3,2] with [5] converts the given array to [4,5,6] that is non-decreasing.\nBecause the given array is not non-decreasing, the maximum possible answer is 3."
            }
        ]
    },
    {
        "Title": "Matrix Similarity After Cyclic Shifts",
        "slug": "matrix-similarity-after-cyclic-shifts",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** mat = [[1,2,3],[4,5,6],[7,8,9]], k = 4",
                "Output": "** false",
                "Explanation": "**\n\n\nIn each step left shift is applied to rows 0 and 2 (even indices), and right shift to row 1 (odd index).\n\n\n![](https://assets.leetcode.com/uploads/2024/05/19/t1-2.jpg)"
            },
            {
                "Input": "** mat = [[1,2,1,2],[5,5,5,5],[6,3,6,3]], k = 2",
                "Output": "** true",
                "Explanation": "**\n\n\n![](https://assets.leetcode.com/uploads/2024/05/19/t1-3.jpg)"
            },
            {
                "Input": "** mat = [[2,2],[2,2]], k = 3",
                "Output": "** true",
                "Explanation": "**\n\n\nAs all the values are equal in the matrix, even after performing cyclic shifts the matrix will remain the same.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= mat.length <= 25`\n* `1 <= mat[i].length <= 25`\n* `1 <= mat[i][j] <= 25`\n* `1 <= k <= 50`"
            }
        ]
    },
    {
        "Title": "Count Beautiful Substrings I",
        "slug": "count-beautiful-substrings-i",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"baeyh\", k = 2",
                "Output": "** 2",
                "Explanation": "** There are 2 beautiful substrings in the given string.\n- Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"y\",\"h\"]).\nYou can see that string \"aeyh\" is beautiful as vowels == consonants and vowels * consonants % k == 0.\n- Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"b\",\"y\"]). \nYou can see that string \"baey\" is beautiful as vowels == consonants and vowels * consonants % k == 0.\nIt can be shown that there are only 2 beautiful substrings in the given string."
            },
            {
                "Input": "** s = \"abba\", k = 1",
                "Output": "** 3",
                "Explanation": "** There are 3 beautiful substrings in the given string.\n- Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]). \n- Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]).\n- Substring \"abba\", vowels = 2 ([\"a\",\"a\"]), consonants = 2 ([\"b\",\"b\"]).\nIt can be shown that there are only 3 beautiful substrings in the given string."
            },
            {
                "Input": "** s = \"bcdf\", k = 1",
                "Output": "** 0",
                "Explanation": "** There are no beautiful substrings in the given string."
            }
        ]
    },
    {
        "Title": "Make Lexicographically Smallest Array by Swapping Elements",
        "slug": "make-lexicographically-smallest-array-by-swapping-elements",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,5,3,9,8], limit = 2",
                "Output": "** [1,3,5,8,9]",
                "Explanation": "** Apply the operation 2 times:\n- Swap nums[1] with nums[2]. The array becomes [1,3,5,9,8]\n- Swap nums[3] with nums[4]. The array becomes [1,3,5,8,9]\nWe cannot obtain a lexicographically smaller array by applying any more operations.\nNote that it may be possible to get the same result by doing different operations."
            },
            {
                "Input": "** nums = [1,7,6,18,2,1], limit = 3",
                "Output": "** [1,6,7,18,1,2]",
                "Explanation": "** Apply the operation 3 times:\n- Swap nums[1] with nums[2]. The array becomes [1,6,7,18,2,1]\n- Swap nums[0] with nums[4]. The array becomes [2,6,7,18,1,1]\n- Swap nums[0] with nums[5]. The array becomes [1,6,7,18,1,2]\nWe cannot obtain a lexicographically smaller array by applying any more operations."
            },
            {
                "Input": "** nums = [1,7,28,19,10], limit = 3",
                "Output": "** [1,7,28,19,10]",
                "Explanation": "** [1,7,28,19,10] is the lexicographically smallest array we can obtain because we cannot apply the operation on any two indices."
            }
        ]
    },
    {
        "Title": "Count Beautiful Substrings II",
        "slug": "count-beautiful-substrings-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"baeyh\", k = 2",
                "Output": "** 2",
                "Explanation": "** There are 2 beautiful substrings in the given string.\n- Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"y\",\"h\"]).\nYou can see that string \"aeyh\" is beautiful as vowels == consonants and vowels * consonants % k == 0.\n- Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"b\",\"y\"]).\nYou can see that string \"baey\" is beautiful as vowels == consonants and vowels * consonants % k == 0.\nIt can be shown that there are only 2 beautiful substrings in the given string."
            },
            {
                "Input": "** s = \"abba\", k = 1",
                "Output": "** 3",
                "Explanation": "** There are 3 beautiful substrings in the given string.\n- Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]).\n- Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]).\n- Substring \"abba\", vowels = 2 ([\"a\",\"a\"]), consonants = 2 ([\"b\",\"b\"]).\nIt can be shown that there are only 3 beautiful substrings in the given string."
            },
            {
                "Input": "** s = \"bcdf\", k = 1",
                "Output": "** 0",
                "Explanation": "** There are no beautiful substrings in the given string."
            }
        ]
    },
    {
        "Title": "Find the Peaks",
        "slug": "find-the-peaks",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** mountain = [2,4,4]",
                "Output": "** []",
                "Explanation": "** mountain[0] and mountain[2] can not be a peak because they are first and last elements of the array.\nmountain[1] also can not be a peak because it is not strictly greater than mountain[2].\nSo the answer is []."
            },
            {
                "Input": "** mountain = [1,4,3,8,5]",
                "Output": "** [1,3]",
                "Explanation": "** mountain[0] and mountain[4] can not be a peak because they are first and last elements of the array.\nmountain[2] also can not be a peak because it is not strictly greater than mountain[3] and mountain[1].\nBut mountain [1] and mountain[3] are strictly greater than their neighboring elements.\nSo the answer is [1,3]."
            }
        ]
    },
    {
        "Title": "Minimum Number of Coins to be Added",
        "slug": "minimum-number-of-coins-to-be-added",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** coins = [1,4,10], target = 19",
                "Output": "** 2",
                "Explanation": "** We need to add coins 2 and 8. The resulting array will be [1,2,4,8,10].\nIt can be shown that all integers from 1 to 19 are obtainable from the resulting array, and that 2 is the minimum number of coins that need to be added to the array."
            },
            {
                "Input": "** coins = [1,4,10,5,7,19], target = 19",
                "Output": "** 1",
                "Explanation": "** We only need to add the coin 2. The resulting array will be [1,2,4,5,7,10,19].\nIt can be shown that all integers from 1 to 19 are obtainable from the resulting array, and that 1 is the minimum number of coins that need to be added to the array."
            },
            {
                "Input": "** coins = [1,1,1], target = 20",
                "Output": "** 3",
                "Explanation": "** We need to add coins 4, 8, and 16. The resulting array will be [1,1,1,4,8,16].\nIt can be shown that all integers from 1 to 20 are obtainable from the resulting array, and that 3 is the minimum number of coins that need to be added to the array."
            }
        ]
    },
    {
        "Title": "Count Complete Substrings",
        "slug": "count-complete-substrings",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** word = \"igigee\", k = 2",
                "Output": "** 3",
                "Explanation": "** The complete substrings where each character appears exactly twice and the difference between adjacent characters is at most 2 are: **igig**ee, igig**ee**, **igigee**."
            },
            {
                "Input": "** word = \"aaabbbccc\", k = 3",
                "Output": "** 6",
                "Explanation": "** The complete substrings where each character appears exactly three times and the difference between adjacent characters is at most 2 are: **aaa**bbbccc, aaa**bbb**ccc, aaabbb**ccc**, **aaabbb**ccc, aaa**bbbccc**, **aaabbbccc**."
            }
        ]
    },
    {
        "Title": "Count the Number of Infection Sequences",
        "slug": "count-the-number-of-infection-sequences",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 5, sick = [0,4]",
                "Output": "** 4",
                "Explanation": "**\n\n\nThere is a total of 6 different sequences overall.\n\n\n* Valid infection sequences are `[1,2,3]`, `[1,3,2]`, `[3,2,1]` and `[3,1,2]`.\n* `[2,3,1]` and `[2,1,3]` are not valid infection sequences because the person at index 2 cannot be infected at the first step."
            },
            {
                "Input": "** n = 4, sick = [1]",
                "Output": "** 3",
                "Explanation": "**\n\n\nThere is a total of 6 different sequences overall.\n\n\n* Valid infection sequences are `[0,2,3]`, `[2,0,3]` and `[2,3,0]`.\n* `[3,2,0]`, `[3,0,2]`, and `[0,3,2]` are not valid infection sequences because the infection starts at the person at index 1, then the order of infection is 2, then 3, and hence 3 cannot be infected earlier than 2.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= n <= 105`\n* `1 <= sick.length <= n - 1`\n* `0 <= sick[i] <= n - 1`\n* `sick` is sorted in increasing order.\n\n\nHints:\n    0. Consider infected children as <code>0</code> and non-infected as <code>1</code>, then divide the array into segments with the same value.\n    1. For each segment of non-infected children whose indices are <code>[i, j]</code> and indices <code>(i - 1)</code> and <code>(j + 1)</code>, if they exist, are already infected. Then if <code>i == 0</code> or <code>j == n - 1</code>, each second there is only one kid that can be infected (which is at the other endpoint).\n    2. If <code>i > 0</code> and <code>j < n - 1</code>, we have two choices per second since the children at the two endpoints can both be the infect candidates. So there are <code>2<sup>j - i</sup></code> orders to infect all children in the segment.\n    3. Each second we can select a segment and select one endpoint from it.\n    4. The answer is: \r\n<code>S! / (len[1]! * len[2]! * ... * len[m]!) * 2<sup>k</sup></code> \r\nwhere <code>len[1], len[2], ..., len[m]</code> are the lengths of each segment of non-infected children that have an infected child at both endpoints, <code>S</code> is the total length of all segments of non-infected children, and <code>k = (len[1] - 1) + (len[2] - 1) + ... + (len[m] - 1)</code>.\nSimilarQuestions: [749, 2385]"
            }
        ]
    },
    {
        "Title": "Find Common Elements Between Two Arrays",
        "slug": "find-common-elements-between-two-arrays",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums1 = [2,3,2], nums2 = [1,2]",
                "Output": "** [2,1]",
                "Explanation": "**\n\n\n![](https://assets.leetcode.com/uploads/2024/05/26/3488_find_common_elements_between_two_arrays-t1.gif)"
            },
            {
                "Input": "** nums1 = [4,3,2,3,1], nums2 = [2,2,5,2,3,6]",
                "Output": "** [3,4]",
                "Explanation": "**\n\n\nThe elements at indices 1, 2, and 3 in `nums1` exist in `nums2` as well. So `answer1` is 3.\n\n\nThe elements at indices 0, 1, 3, and 4 in `nums2` exist in `nums1`. So `answer2` is 4."
            },
            {
                "Input": "** nums1 = [3,4,2,3], nums2 = [1,5]",
                "Output": "** [0,0]",
                "Explanation": "**\n\n\nNo numbers are common between `nums1` and `nums2`, so answer is [0,0].\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums1.length`\n* `m == nums2.length`\n* `1 <= n, m <= 100`\n* `1 <= nums1[i], nums2[i] <= 100`\n\n\nHints:\n    0. Since the constraints are small, you can use brute force to solve the problem.\n    1. For each element <code>i</code> in <code>nums1</code>, iterate over all elements of <code>nums2</code> to find if it occurs."
            }
        ]
    },
    {
        "Title": "Remove Adjacent Almost-Equal Characters",
        "slug": "remove-adjacent-almost-equal-characters",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** word = \"aaaaa\"",
                "Output": "** 2",
                "Explanation": "** We can change word into \"a**c**a**c**a\" which does not have any adjacent almost-equal characters.\nIt can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 2."
            },
            {
                "Input": "** word = \"abddez\"",
                "Output": "** 2",
                "Explanation": "** We can change word into \"**y**bd**o**ez\" which does not have any adjacent almost-equal characters.\nIt can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 2."
            },
            {
                "Input": "** word = \"zyxyxyz\"",
                "Output": "** 3",
                "Explanation": "** We can change word into \"z**a**x**a**x**a**z\" which does not have any adjacent almost-equal characters. \nIt can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 3."
            }
        ]
    },
    {
        "Title": "Length of Longest Subarray With at Most K Frequency",
        "slug": "length-of-longest-subarray-with-at-most-k-frequency",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3,1,2,3,1,2], k = 2",
                "Output": "** 6",
                "Explanation": "** The longest possible good subarray is [1,2,3,1,2,3] since the values 1, 2, and 3 occur at most twice in this subarray. Note that the subarrays [2,3,1,2,3,1] and [3,1,2,3,1,2] are also good.\nIt can be shown that there are no good subarrays with length more than 6."
            },
            {
                "Input": "** nums = [1,2,1,2,1,2,1,2], k = 1",
                "Output": "** 2",
                "Explanation": "** The longest possible good subarray is [1,2] since the values 1 and 2 occur at most once in this subarray. Note that the subarray [2,1] is also good.\nIt can be shown that there are no good subarrays with length more than 2."
            },
            {
                "Input": "** nums = [5,5,5,5,5,5,5], k = 4",
                "Output": "** 4",
                "Explanation": "** The longest possible good subarray is [5,5,5,5] since the value 5 occurs 4 times in this subarray.\nIt can be shown that there are no good subarrays with length more than 4."
            }
        ]
    },
    {
        "Title": "Number of Possible Sets of Closing Branches",
        "slug": "number-of-possible-sets-of-closing-branches",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 3, maxDistance = 5, roads = [[0,1,2],[1,2,10],[0,2,10]]",
                "Output": "** 5",
                "Explanation": "** The possible sets of closing branches are:\n- The set [2], after closing, active branches are [0,1] and they are reachable to each other within distance 2.\n- The set [0,1], after closing, the active branch is [2].\n- The set [1,2], after closing, the active branch is [0].\n- The set [0,2], after closing, the active branch is [1].\n- The set [0,1,2], after closing, there are no active branches.\nIt can be proven, that there are only 5 possible sets of closing branches."
            },
            {
                "Input": "** n = 3, maxDistance = 5, roads = [[0,1,20],[0,1,10],[1,2,2],[0,2,2]]",
                "Output": "** 7",
                "Explanation": "** The possible sets of closing branches are:\n- The set [], after closing, active branches are [0,1,2] and they are reachable to each other within distance 4.\n- The set [0], after closing, active branches are [1,2] and they are reachable to each other within distance 2.\n- The set [1], after closing, active branches are [0,2] and they are reachable to each other within distance 2.\n- The set [0,1], after closing, the active branch is [2].\n- The set [1,2], after closing, the active branch is [0].\n- The set [0,2], after closing, the active branch is [1].\n- The set [0,1,2], after closing, there are no active branches.\nIt can be proven, that there are only 7 possible sets of closing branches."
            }
        ]
    },
    {
        "Title": "Count Tested Devices After Test Operations",
        "slug": "count-tested-devices-after-test-operations",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** batteryPercentages = [1,1,2,1,3]",
                "Output": "** 3",
                "Explanation": "** Performing the test operations in order starting from device 0:\nAt device 0, batteryPercentages[0] > 0, so there is now 1 tested device, and batteryPercentages becomes [1,0,1,0,2].\nAt device 1, batteryPercentages[1] == 0, so we move to the next device without testing.\nAt device 2, batteryPercentages[2] > 0, so there are now 2 tested devices, and batteryPercentages becomes [1,0,1,0,1].\nAt device 3, batteryPercentages[3] == 0, so we move to the next device without testing.\nAt device 4, batteryPercentages[4] > 0, so there are now 3 tested devices, and batteryPercentages stays the same.\nSo, the answer is 3."
            },
            {
                "Input": "** batteryPercentages = [0,1,2]",
                "Output": "** 2",
                "Explanation": "** Performing the test operations in order starting from device 0:\nAt device 0, batteryPercentages[0] == 0, so we move to the next device without testing.\nAt device 1, batteryPercentages[1] > 0, so there is now 1 tested device, and batteryPercentages becomes [0,1,1].\nAt device 2, batteryPercentages[2] > 0, so there are now 2 tested devices, and batteryPercentages stays the same.\nSo, the answer is 2."
            }
        ]
    },
    {
        "Title": "Double Modular Exponentiation",
        "slug": "double-modular-exponentiation",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** variables = [[2,3,3,10],[3,3,3,1],[6,1,1,4]], target = 2",
                "Output": "** [0,2]",
                "Explanation": "** For each index i in the variables array:\n1) For the index 0, variables[0] = [2,3,3,10], (23 % 10)3 % 10 = 2.\n2) For the index 1, variables[1] = [3,3,3,1], (33 % 10)3 % 1 = 0.\n3) For the index 2, variables[2] = [6,1,1,4], (61 % 10)1 % 4 = 2.\nTherefore we return [0,2] as the answer."
            },
            {
                "Input": "** variables = [[39,3,1000,1000]], target = 17",
                "Output": "** []",
                "Explanation": "** For each index i in the variables array:\n1) For the index 0, variables[0] = [39,3,1000,1000], (393 % 10)1000 % 1000 = 1.\nTherefore we return [] as the answer."
            }
        ]
    },
    {
        "Title": "Count Subarrays Where Max Element Appears at Least K Times",
        "slug": "count-subarrays-where-max-element-appears-at-least-k-times",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,3,2,3,3], k = 2",
                "Output": "** 6",
                "Explanation": "** The subarrays that contain the element 3 at least 2 times are: [1,3,2,3], [1,3,2,3,3], [3,2,3], [3,2,3,3], [2,3,3] and [3,3]."
            },
            {
                "Input": "** nums = [1,4,2,1], k = 3",
                "Output": "** 0",
                "Explanation": "** No subarray contains the element 4 at least 3 times."
            }
        ]
    },
    {
        "Title": "Count the Number of Good Partitions",
        "slug": "count-the-number-of-good-partitions",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 8",
                "Explanation": "** The 8 possible good partitions are: ([1], [2], [3], [4]), ([1], [2], [3,4]), ([1], [2,3], [4]), ([1], [2,3,4]), ([1,2], [3], [4]), ([1,2], [3,4]), ([1,2,3], [4]), and ([1,2,3,4])."
            },
            {
                "Input": "** nums = [1,1,1,1]",
                "Output": "** 1",
                "Explanation": "** The only possible good partition is: ([1,1,1,1])."
            },
            {
                "Input": "** nums = [1,2,1,3]",
                "Output": "** 2",
                "Explanation": "** The 2 possible good partitions are: ([1,2,1], [3]) and ([1,2,1,3])."
            }
        ]
    },
    {
        "Title": "Find Missing and Repeated Values",
        "slug": "find-missing-and-repeated-values",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** grid = [[1,3],[2,2]]",
                "Output": "** [2,4]",
                "Explanation": "** Number 2 is repeated and number 4 is missing so the answer is [2,4]."
            },
            {
                "Input": "** grid = [[9,1,7],[8,9,2],[3,4,6]]",
                "Output": "** [9,5]",
                "Explanation": "** Number 9 is repeated and number 5 is missing so the answer is [9,5]."
            }
        ]
    },
    {
        "Title": "Divide Array Into Arrays With Max Difference",
        "slug": "divide-array-into-arrays-with-max-difference",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,3,4,8,7,9,3,5,1], k = 2",
                "Output": "** [[1,1,3],[3,4,5],[7,8,9]]",
                "Explanation": "** We can divide the array into the following arrays: [1,1,3], [3,4,5] and [7,8,9].\nThe difference between any two elements in each array is less than or equal to 2.\nNote that the order of elements is not important."
            },
            {
                "Input": "** nums = [1,3,3,2,7,3], k = 3",
                "Output": "** []",
                "Explanation": "** It is not possible to divide the array satisfying all the conditions."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Make Array Equalindromic",
        "slug": "minimum-cost-to-make-array-equalindromic",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** 6",
                "Explanation": "** We can make the array equalindromic by changing all elements to 3 which is a palindromic number. The cost of changing the array to [3,3,3,3,3] using 4 special moves is given by |1 - 3| + |2 - 3| + |4 - 3| + |5 - 3| = 6.\nIt can be shown that changing all elements to any palindromic number other than 3 cannot be achieved at a lower cost."
            },
            {
                "Input": "** nums = [10,12,13,14,15]",
                "Output": "** 11",
                "Explanation": "** We can make the array equalindromic by changing all elements to 11 which is a palindromic number. The cost of changing the array to [11,11,11,11,11] using 5 special moves is given by |10 - 11| + |12 - 11| + |13 - 11| + |14 - 11| + |15 - 11| = 11.\nIt can be shown that changing all elements to any palindromic number other than 11 cannot be achieved at a lower cost."
            },
            {
                "Input": "** nums = [22,33,22,33,22]",
                "Output": "** 22",
                "Explanation": "** We can make the array equalindromic by changing all elements to 22 which is a palindromic number. The cost of changing the array to [22,22,22,22,22] using 2 special moves is given by |33 - 22| + |33 - 22| = 22.\nIt can be shown that changing all elements to any palindromic number other than 22 cannot be achieved at a lower cost."
            }
        ]
    },
    {
        "Title": "Apply Operations to Maximize Frequency Score",
        "slug": "apply-operations-to-maximize-frequency-score",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,6,4], k = 3",
                "Output": "** 3",
                "Explanation": "** We can do the following operations on the array:\n- Choose i = 0, and increase the value of nums[0] by 1. The resulting array is [2,2,6,4].\n- Choose i = 3, and decrease the value of nums[3] by 1. The resulting array is [2,2,6,3].\n- Choose i = 3, and decrease the value of nums[3] by 1. The resulting array is [2,2,6,2].\nThe element 2 is the most frequent in the final array so our score is 3.\nIt can be shown that we cannot achieve a better score."
            },
            {
                "Input": "** nums = [1,4,4,2,4], k = 0",
                "Output": "** 3",
                "Explanation": "** We cannot apply any operations so our score will be the frequency of the most frequent element in the original array, which is 3."
            }
        ]
    },
    {
        "Title": "Count the Number of Incremovable Subarrays I",
        "slug": "count-the-number-of-incremovable-subarrays-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 10",
                "Explanation": "** The 10 incremovable subarrays are: [1], [2], [3], [4], [1,2], [2,3], [3,4], [1,2,3], [2,3,4], and [1,2,3,4], because on removing any one of these subarrays nums becomes strictly increasing. Note that you cannot select an empty subarray."
            },
            {
                "Input": "** nums = [6,5,7,8]",
                "Output": "** 7",
                "Explanation": "** The 7 incremovable subarrays are: [5], [6], [5,7], [6,5], [5,7,8], [6,5,7] and [6,5,7,8].\nIt can be shown that there are only 7 incremovable subarrays in nums."
            },
            {
                "Input": "** nums = [8,7,6,6]",
                "Output": "** 3",
                "Explanation": "** The 3 incremovable subarrays are: [8,7,6], [7,6,6], and [8,7,6,6]. Note that [8,7] is not an incremovable subarray because after removing [8,7] nums becomes [6,6], which is sorted in ascending order but not strictly increasing."
            }
        ]
    },
    {
        "Title": "Find Polygon With the Largest Perimeter",
        "slug": "find-polygon-with-the-largest-perimeter",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [5,5,5]",
                "Output": "** 15",
                "Explanation": "** The only possible polygon that can be made from nums has 3 sides: 5, 5, and 5. The perimeter is 5 + 5 + 5 = 15."
            },
            {
                "Input": "** nums = [1,12,1,2,5,50,3]",
                "Output": "** 12",
                "Explanation": "** The polygon with the largest perimeter which can be made from nums has 5 sides: 1, 1, 2, 3, and 5. The perimeter is 1 + 1 + 2 + 3 + 5 = 12.\nWe cannot have a polygon with either 12 or 50 as the longest side because it is not possible to include 2 or more smaller sides that have a greater sum than either of them.\nIt can be shown that the largest possible perimeter is 12."
            },
            {
                "Input": "** nums = [5,5,50]",
                "Output": "** -1",
                "Explanation": "** There is no possible way to form a polygon from nums, as a polygon has at least 3 sides and 50 > 5 + 5."
            }
        ]
    },
    {
        "Title": "Count the Number of Incremovable Subarrays II",
        "slug": "count-the-number-of-incremovable-subarrays-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4]",
                "Output": "** 10",
                "Explanation": "** The 10 incremovable subarrays are: [1], [2], [3], [4], [1,2], [2,3], [3,4], [1,2,3], [2,3,4], and [1,2,3,4], because on removing any one of these subarrays nums becomes strictly increasing. Note that you cannot select an empty subarray."
            },
            {
                "Input": "** nums = [6,5,7,8]",
                "Output": "** 7",
                "Explanation": "** The 7 incremovable subarrays are: [5], [6], [5,7], [6,5], [5,7,8], [6,5,7] and [6,5,7,8].\nIt can be shown that there are only 7 incremovable subarrays in nums."
            },
            {
                "Input": "** nums = [8,7,6,6]",
                "Output": "** 3",
                "Explanation": "** The 3 incremovable subarrays are: [8,7,6], [7,6,6], and [8,7,6,6]. Note that [8,7] is not an incremovable subarray because after removing [8,7] nums becomes [6,6], which is sorted in ascending order but not strictly increasing."
            }
        ]
    },
    {
        "Title": "Find Number of Coins to Place in Tree Nodes",
        "slug": "find-number-of-coins-to-place-in-tree-nodes",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** edges = [[0,1],[0,2],[0,3],[0,4],[0,5]], cost = [1,2,3,4,5,6]",
                "Output": "** [120,1,1,1,1,1]",
                "Explanation": "** For node 0 place 6 * 5 * 4 = 120 coins. All other nodes are leaves with subtree of size 1, place 1 coin on each of them."
            },
            {
                "Input": "** edges = [[0,1],[0,2],[1,3],[1,4],[1,5],[2,6],[2,7],[2,8]], cost = [1,4,2,3,5,7,8,-4,2]",
                "Output": "** [280,140,32,1,1,1,1,1,1]",
                "Explanation": "** The coins placed on each node are:\n- Place 8 * 7 * 5 = 280 coins on node 0.\n- Place 7 * 5 * 4 = 140 coins on node 1.\n- Place 8 * 2 * 2 = 32 coins on node 2.\n- All other nodes are leaves with subtree of size 1, place 1 coin on each of them."
            },
            {
                "Input": "** edges = [[0,1],[0,2]], cost = [1,2,-2]",
                "Output": "** [0,1,1]",
                "Explanation": "** Node 1 and 2 are leaves with subtree of size 1, place 1 coin on each of them. For node 0 the only possible product of cost is 2 * 1 * -2 = -4. Hence place 0 coins on node 0."
            }
        ]
    },
    {
        "Title": "Minimum Number Game",
        "slug": "minimum-number-game",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [5,4,2,3]",
                "Output": "** [3,2,5,4]",
                "Explanation": "** In round one, first Alice removes 2 and then Bob removes 3. Then in arr firstly Bob appends 3 and then Alice appends 2. So arr = [3,2].\nAt the begining of round two, nums = [5,4]. Now, first Alice removes 4 and then Bob removes 5. Then both append in arr which becomes [3,2,5,4]."
            },
            {
                "Input": "** nums = [2,5]",
                "Output": "** [5,2]",
                "Explanation": "** In round one, first Alice removes 2 and then Bob removes 5. Then in arr firstly Bob appends and then Alice appends. So arr = [5,2]."
            }
        ]
    },
    {
        "Title": "Maximum Square Area by Removing Fences From a Field",
        "slug": "maximum-square-area-by-removing-fences-from-a-field",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** m = 4, n = 3, hFences = [2,3], vFences = [2]",
                "Output": "** 4",
                "Explanation": "** Removing the horizontal fence at 2 and the vertical fence at 2 will give a square field of area 4."
            },
            {
                "Input": "** m = 6, n = 7, hFences = [2], vFences = [4]",
                "Output": "** -1",
                "Explanation": "** It can be proved that there is no way to create a square field by removing fences."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Convert String I",
        "slug": "minimum-cost-to-convert-string-i",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** source = \"abcd\", target = \"acbe\", original = [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], changed = [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], cost = [2,5,5,1,2,20]",
                "Output": "** 28",
                "Explanation": "** To convert the string \"abcd\" to string \"acbe\":\n- Change value at index 1 from 'b' to 'c' at a cost of 5.\n- Change value at index 2 from 'c' to 'e' at a cost of 1.\n- Change value at index 2 from 'e' to 'b' at a cost of 2.\n- Change value at index 3 from 'd' to 'e' at a cost of 20.\nThe total cost incurred is 5 + 1 + 2 + 20 = 28.\nIt can be shown that this is the minimum possible cost."
            },
            {
                "Input": "** source = \"aaaa\", target = \"bbbb\", original = [\"a\",\"c\"], changed = [\"c\",\"b\"], cost = [1,2]",
                "Output": "** 12",
                "Explanation": "** To change the character 'a' to 'b' change the character 'a' to 'c' at a cost of 1, followed by changing the character 'c' to 'b' at a cost of 2, for a total cost of 1 + 2 = 3. To change all occurrences of 'a' to 'b', a total cost of 3 * 4 = 12 is incurred."
            },
            {
                "Input": "** source = \"abcd\", target = \"abce\", original = [\"a\"], changed = [\"e\"], cost = [10000]",
                "Output": "** -1",
                "Explanation": "** It is impossible to convert source to target because the value at index 3 cannot be changed from 'd' to 'e'."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Convert String II",
        "slug": "minimum-cost-to-convert-string-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** source = \"abcd\", target = \"acbe\", original = [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], changed = [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], cost = [2,5,5,1,2,20]",
                "Output": "** 28",
                "Explanation": "** To convert \"abcd\" to \"acbe\", do the following operations:\n- Change substring source[1..1] from \"b\" to \"c\" at a cost of 5.\n- Change substring source[2..2] from \"c\" to \"e\" at a cost of 1.\n- Change substring source[2..2] from \"e\" to \"b\" at a cost of 2.\n- Change substring source[3..3] from \"d\" to \"e\" at a cost of 20.\nThe total cost incurred is 5 + 1 + 2 + 20 = 28. \nIt can be shown that this is the minimum possible cost."
            },
            {
                "Input": "** source = \"abcdefgh\", target = \"acdeeghh\", original = [\"bcd\",\"fgh\",\"thh\"], changed = [\"cde\",\"thh\",\"ghh\"], cost = [1,3,5]",
                "Output": "** 9",
                "Explanation": "** To convert \"abcdefgh\" to \"acdeeghh\", do the following operations:\n- Change substring source[1..3] from \"bcd\" to \"cde\" at a cost of 1.\n- Change substring source[5..7] from \"fgh\" to \"thh\" at a cost of 3. We can do this operation because indices [5,7] are disjoint with indices picked in the first operation.\n- Change substring source[5..7] from \"thh\" to \"ghh\" at a cost of 5. We can do this operation because indices [5,7] are disjoint with indices picked in the first operation, and identical with indices picked in the second operation.\nThe total cost incurred is 1 + 3 + 5 = 9.\nIt can be shown that this is the minimum possible cost."
            },
            {
                "Input": "** source = \"abcdefgh\", target = \"addddddd\", original = [\"bcd\",\"defgh\"], changed = [\"ddd\",\"ddddd\"], cost = [100,1578]",
                "Output": "** -1",
                "Explanation": "** It is impossible to convert \"abcdefgh\" to \"addddddd\".\nIf you select substring source[1..3] as the first operation to change \"abcdefgh\" to \"adddefgh\", you cannot select substring source[3..7] as the second operation because it has a common index, 3, with the first operation.\nIf you select substring source[3..7] as the first operation to change \"abcdefgh\" to \"abcddddd\", you cannot select substring source[1..3] as the second operation because it has a common index, 3, with the first operation."
            }
        ]
    },
    {
        "Title": "Check if Bitwise OR Has Trailing Zeros",
        "slug": "check-if-bitwise-or-has-trailing-zeros",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** true",
                "Explanation": "** If we select the elements 2 and 4, their bitwise OR is 6, which has the binary representation \"110\" with one trailing zero."
            },
            {
                "Input": "** nums = [2,4,8,16]",
                "Output": "** true",
                "Explanation": "** If we select the elements 2 and 4, their bitwise OR is 6, which has the binary representation \"110\" with one trailing zero.\nOther possible ways to select elements to have trailing zeroes in the binary representation of their bitwise OR are: (2, 8), (2, 16), (4, 8), (4, 16), (8, 16), (2, 4, 8), (2, 4, 16), (2, 8, 16), (4, 8, 16), and (2, 4, 8, 16)."
            },
            {
                "Input": "** nums = [1,3,5,7,9]",
                "Output": "** false",
                "Explanation": "** There is no possible way to select two or more elements to have trailing zeros in the binary representation of their bitwise OR."
            }
        ]
    },
    {
        "Title": "Find Longest Special Substring That Occurs Thrice I",
        "slug": "find-longest-special-substring-that-occurs-thrice-i",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"aaaa\"",
                "Output": "** 2",
                "Explanation": "** The longest special substring which occurs thrice is \"aa\": substrings \"**aa**aa\", \"a**aa**a\", and \"aa**aa**\".\nIt can be shown that the maximum length achievable is 2."
            },
            {
                "Input": "** s = \"abcdef\"",
                "Output": "** -1",
                "Explanation": "** There exists no special substring which occurs at least thrice. Hence return -1."
            },
            {
                "Input": "** s = \"abcaba\"",
                "Output": "** 1",
                "Explanation": "** The longest special substring which occurs thrice is \"a\": substrings \"**a**bcaba\", \"abc**a**ba\", and \"abcab**a**\".\nIt can be shown that the maximum length achievable is 1."
            }
        ]
    },
    {
        "Title": "Find Longest Special Substring That Occurs Thrice II",
        "slug": "find-longest-special-substring-that-occurs-thrice-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"aaaa\"",
                "Output": "** 2",
                "Explanation": "** The longest special substring which occurs thrice is \"aa\": substrings \"**aa**aa\", \"a**aa**a\", and \"aa**aa**\".\nIt can be shown that the maximum length achievable is 2."
            },
            {
                "Input": "** s = \"abcdef\"",
                "Output": "** -1",
                "Explanation": "** There exists no special substring which occurs at least thrice. Hence return -1."
            },
            {
                "Input": "** s = \"abcaba\"",
                "Output": "** 1",
                "Explanation": "** The longest special substring which occurs thrice is \"a\": substrings \"**a**bcaba\", \"abc**a**ba\", and \"abcab**a**\".\nIt can be shown that the maximum length achievable is 1."
            }
        ]
    },
    {
        "Title": "Palindrome Rearrangement Queries",
        "slug": "palindrome-rearrangement-queries",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"abcabc\", queries = [[1,1,3,5],[0,2,5,5]]",
                "Output": "** [true,true]",
                "Explanation": "** In this example, there are two queries:\nIn the first query:\n- a0 = 1, b0 = 1, c0 = 3, d0 = 5.\n- So, you are allowed to rearrange s[1:1] => abcabc and s[3:5] => abcabc.\n- To make s a palindrome, s[3:5] can be rearranged to become => abccba.\n- Now, s is a palindrome. So, answer[0] = true.\nIn the second query:\n- a1 = 0, b1 = 2, c1 = 5, d1 = 5.\n- So, you are allowed to rearrange s[0:2] => abcabc and s[5:5] => abcabc.\n- To make s a palindrome, s[0:2] can be rearranged to become => cbaabc.\n- Now, s is a palindrome. So, answer[1] = true."
            },
            {
                "Input": "** s = \"abbcdecbba\", queries = [[0,2,7,9]]",
                "Output": "** [false]",
                "Explanation": "** In this example, there is only one query.\na0 = 0, b0 = 2, c0 = 7, d0 = 9.\nSo, you are allowed to rearrange s[0:2] => abbcdecbba and s[7:9] => abbcdecbba.\nIt is not possible to make s a palindrome by rearranging these substrings because s[3:6] is not a palindrome.\nSo, answer[0] = false."
            },
            {
                "Input": "** s = \"acbcab\", queries = [[1,2,4,5]]",
                "Output": "** [true]",
                "Explanation": "** In this example, there is only one query.\na0 = 1, b0 = 2, c0 = 4, d0 = 5.\nSo, you are allowed to rearrange s[1:2] => acbcab and s[4:5] => acbcab.\nTo make s a palindrome s[1:2] can be rearranged to become abccab.\nThen, s[4:5] can be rearranged to become abccba.\nNow, s is a palindrome. So, answer[0] = true."
            }
        ]
    },
    {
        "Title": "Smallest Missing Integer Greater Than Sequential Prefix Sum",
        "slug": "smallest-missing-integer-greater-than-sequential-prefix-sum",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,3,2,5]",
                "Output": "** 6",
                "Explanation": "** The longest sequential prefix of nums is [1,2,3] with a sum of 6. 6 is not in the array, therefore 6 is the smallest missing integer greater than or equal to the sum of the longest sequential prefix."
            },
            {
                "Input": "** nums = [3,4,5,1,12,14,13]",
                "Output": "** 15",
                "Explanation": "** The longest sequential prefix of nums is [3,4,5] with a sum of 12. 12, 13, and 14 belong to the array while 15 does not. Therefore 15 is the smallest missing integer greater than or equal to the sum of the longest sequential prefix."
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Make Array XOR Equal to K",
        "slug": "minimum-number-of-operations-to-make-array-xor-equal-to-k",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,1,3,4], k = 1",
                "Output": "** 2",
                "Explanation": "** We can do the following operations:\n- Choose element 2 which is 3 == (011)2, we flip the first bit and we obtain (010)2 == 2. nums becomes [2,1,2,4].\n- Choose element 0 which is 2 == (010)2, we flip the third bit and we obtain (110)2 = 6. nums becomes [6,1,2,4].\nThe XOR of elements of the final array is (6 XOR 1 XOR 2 XOR 4) == 1 == k.\nIt can be shown that we cannot make the XOR equal to k in less than 2 operations."
            },
            {
                "Input": "** nums = [2,0,2,0], k = 0",
                "Output": "** 0",
                "Explanation": "** The XOR of elements of the array is (2 XOR 0 XOR 2 XOR 0) == 0 == k. So no operation is needed."
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Make X and Y Equal",
        "slug": "minimum-number-of-operations-to-make-x-and-y-equal",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** x = 26, y = 1",
                "Output": "** 3",
                "Explanation": "** We can make 26 equal to 1 by applying the following operations: \n1. Decrement x by 1\n2. Divide x by 5\n3. Divide x by 5\nIt can be shown that 3 is the minimum number of operations required to make 26 equal to 1."
            },
            {
                "Input": "** x = 54, y = 2",
                "Output": "** 4",
                "Explanation": "** We can make 54 equal to 2 by applying the following operations: \n1. Increment x by 1\n2. Divide x by 11 \n3. Divide x by 5\n4. Increment x by 1\nIt can be shown that 4 is the minimum number of operations required to make 54 equal to 2."
            },
            {
                "Input": "** x = 25, y = 30",
                "Output": "** 5",
                "Explanation": "** We can make 25 equal to 30 by applying the following operations: \n1. Increment x by 1\n2. Increment x by 1\n3. Increment x by 1\n4. Increment x by 1\n5. Increment x by 1\nIt can be shown that 5 is the minimum number of operations required to make 25 equal to 30."
            }
        ]
    },
    {
        "Title": "Count the Number of Powerful Integers",
        "slug": "count-the-number-of-powerful-integers",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** start = 1, finish = 6000, limit = 4, s = \"124\"",
                "Output": "** 5",
                "Explanation": "** The powerful integers in the range [1..6000] are 124, 1124, 2124, 3124, and, 4124. All these integers have each digit <= 4, and \"124\" as a suffix. Note that 5124 is not a powerful integer because the first digit is 5 which is greater than 4.\nIt can be shown that there are only 5 powerful integers in this range."
            },
            {
                "Input": "** start = 15, finish = 215, limit = 6, s = \"10\"",
                "Output": "** 2",
                "Explanation": "** The powerful integers in the range [15..215] are 110 and 210. All these integers have each digit <= 6, and \"10\" as a suffix.\nIt can be shown that there are only 2 powerful integers in this range."
            },
            {
                "Input": "** start = 1000, finish = 2000, limit = 4, s = \"3000\"",
                "Output": "** 0",
                "Explanation": "** All integers in the range [1000..2000] are smaller than 3000, hence \"3000\" cannot be a suffix of any integer in this range."
            }
        ]
    },
    {
        "Title": "Maximum Area of Longest Diagonal Rectangle",
        "slug": "maximum-area-of-longest-diagonal-rectangle",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** dimensions = [[9,3],[8,6]]",
                "Output": "** 48",
                "Explanation": "** \nFor index = 0, length = 9 and width = 3. Diagonal length = sqrt(9 * 9 + 3 * 3) = sqrt(90) \u2248 9.487.\nFor index = 1, length = 8 and width = 6. Diagonal length = sqrt(8 * 8 + 6 * 6) = sqrt(100) = 10.\nSo, the rectangle at index 1 has a greater diagonal length therefore we return area = 8 * 6 = 48."
            },
            {
                "Input": "** dimensions = [[3,4],[4,3]]",
                "Output": "** 12",
                "Explanation": "** Length of diagonal is the same for both which is 5, so maximum area = 12."
            }
        ]
    },
    {
        "Title": "Minimum Moves to Capture The Queen",
        "slug": "minimum-moves-to-capture-the-queen",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** a = 1, b = 1, c = 8, d = 8, e = 2, f = 3",
                "Output": "** 2",
                "Explanation": "** We can capture the black queen in two moves by moving the white rook to (1, 3) then to (2, 3).\nIt is impossible to capture the black queen in less than two moves since it is not being attacked by any of the pieces at the beginning."
            },
            {
                "Input": "** a = 5, b = 3, c = 3, d = 4, e = 5, f = 2",
                "Output": "** 1",
                "Explanation": "** We can capture the black queen in a single move by doing one of the following: \n- Move the white rook to (5, 2).\n- Move the white bishop to (5, 2)."
            }
        ]
    },
    {
        "Title": "Maximum Size of a Set After Removals",
        "slug": "maximum-size-of-a-set-after-removals",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums1 = [1,2,1,2], nums2 = [1,1,1,1]",
                "Output": "** 2",
                "Explanation": "** We remove two occurences of 1 from nums1 and nums2. After the removals, the arrays become equal to nums1 = [2,2] and nums2 = [1,1]. Therefore, s = {1,2}.\nIt can be shown that 2 is the maximum possible size of the set s after the removals."
            },
            {
                "Input": "** nums1 = [1,2,3,4,5,6], nums2 = [2,3,2,3,2,3]",
                "Output": "** 5",
                "Explanation": "** We remove 2, 3, and 6 from nums1, as well as 2 and two occurrences of 3 from nums2. After the removals, the arrays become equal to nums1 = [1,4,5] and nums2 = [2,3,2]. Therefore, s = {1,2,3,4,5}.\nIt can be shown that 5 is the maximum possible size of the set s after the removals."
            },
            {
                "Input": "** nums1 = [1,1,2,2,3,3], nums2 = [4,4,5,5,6,6]",
                "Output": "** 6",
                "Explanation": "** We remove 1, 2, and 3 from nums1, as well as 4, 5, and 6 from nums2. After the removals, the arrays become equal to nums1 = [1,2,3] and nums2 = [4,5,6]. Therefore, s = {1,2,3,4,5,6}.\nIt can be shown that 6 is the maximum possible size of the set s after the removals."
            }
        ]
    },
    {
        "Title": "Maximize the Number of Partitions After Operations",
        "slug": "maximize-the-number-of-partitions-after-operations",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"accca\", k = 2",
                "Output": "** 3",
                "Explanation": "** In this example, to maximize the number of resulting partitions, s[2] can be changed to 'b'.\ns becomes \"acbca\".\nThe operations can now be performed as follows until s becomes empty:\n- Choose the longest prefix containing at most 2 distinct characters, \"acbca\".\n- Delete the prefix, and s becomes \"bca\". The number of partitions is now 1.\n- Choose the longest prefix containing at most 2 distinct characters, \"bca\".\n- Delete the prefix, and s becomes \"a\". The number of partitions is now 2.\n- Choose the longest prefix containing at most 2 distinct characters, \"a\".\n- Delete the prefix, and s becomes empty. The number of partitions is now 3.\nHence, the answer is 3.\nIt can be shown that it is not possible to obtain more than 3 partitions."
            },
            {
                "Input": "** s = \"aabaab\", k = 3",
                "Output": "** 1",
                "Explanation": "** In this example, to maximize the number of resulting partitions we can leave s as it is.\nThe operations can now be performed as follows until s becomes empty: \n- Choose the longest prefix containing at most 3 distinct characters, \"aabaab\".\n- Delete the prefix, and s becomes empty. The number of partitions becomes 1. \nHence, the answer is 1. \nIt can be shown that it is not possible to obtain more than 1 partition."
            },
            {
                "Input": "** s = \"xxyz\", k = 1",
                "Output": "** 4",
                "Explanation": "** In this example, to maximize the number of resulting partitions, s[1] can be changed to 'a'.\ns becomes \"xayz\".\nThe operations can now be performed as follows until s becomes empty:\n- Choose the longest prefix containing at most 1 distinct character, \"xayz\".\n- Delete the prefix, and s becomes \"ayz\". The number of partitions is now 1.\n- Choose the longest prefix containing at most 1 distinct character, \"ayz\".\n- Delete the prefix, and s becomes \"yz\". The number of partitions is now 2.\n- Choose the longest prefix containing at most 1 distinct character, \"yz\".\n- Delete the prefix, and s becomes \"z\". The number of partitions is now 3.\n- Choose the longest prefix containing at most 1 distinct character, \"z\".\n- Delete the prefix, and s becomes empty. The number of partitions is now 4.\nHence, the answer is 4.\nIt can be shown that it is not possible to obtain more than 4 partitions."
            }
        ]
    },
    {
        "Title": "Count Elements With Maximum Frequency",
        "slug": "count-elements-with-maximum-frequency",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,2,3,1,4]",
                "Output": "** 4",
                "Explanation": "** The elements 1 and 2 have a frequency of 2 which is the maximum frequency in the array.\nSo the number of elements in the array with maximum frequency is 4."
            },
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** 5",
                "Explanation": "** All elements of the array have a frequency of 1 which is the maximum.\nSo the number of elements in the array with maximum frequency is 5."
            }
        ]
    },
    {
        "Title": "Find Beautiful Indices in the Given Array I",
        "slug": "find-beautiful-indices-in-the-given-array-i",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"isawsquirrelnearmysquirrelhouseohmy\", a = \"my\", b = \"squirrel\", k = 15",
                "Output": "** [16,33]",
                "Explanation": "** There are 2 beautiful indices: [16,33].\n- The index 16 is beautiful as s[16..17] == \"my\" and there exists an index 4 with s[4..11] == \"squirrel\" and |16 - 4| <= 15.\n- The index 33 is beautiful as s[33..34] == \"my\" and there exists an index 18 with s[18..25] == \"squirrel\" and |33 - 18| <= 15.\nThus we return [16,33] as the result."
            },
            {
                "Input": "** s = \"abcd\", a = \"a\", b = \"a\", k = 4",
                "Output": "** [0]",
                "Explanation": "** There is 1 beautiful index: [0].\n- The index 0 is beautiful as s[0..0] == \"a\" and there exists an index 0 with s[0..0] == \"a\" and |0 - 0| <= 4.\nThus we return [0] as the result."
            }
        ]
    },
    {
        "Title": "Maximum Number That Sum of the Prices Is Less Than or Equal to K",
        "slug": "maximum-number-that-sum-of-the-prices-is-less-than-or-equal-to-k",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** k = 9, x = 1",
                "Output": "** 6",
                "Explanation": "**\n\n\nAs shown in the table below, `6` is the greatest cheap number.\n\n\n\n\n| x | num | Binary Representation | Price | Accumulated Price |\n| --- | --- | --- | --- | --- |\n| 1 | 1 | 00**1** | 1 | 1 |\n| 1 | 2 | 0**1**0 | 1 | 2 |\n| 1 | 3 | 0**1****1** | 2 | 4 |\n| 1 | 4 | **1**00 | 1 | 5 |\n| 1 | 5 | **1**0**1** | 2 | 7 |\n| 1 | 6 | **1****1**0 | 2 | 9 |\n| 1 | 7 | **1****1****1** | 3 | 12 |"
            },
            {
                "Input": "** k = 7, x = 2",
                "Output": "** 9",
                "Explanation": "**\n\n\nAs shown in the table below, `9` is the greatest cheap number.\n\n\n\n\n| x | num | Binary Representation | Price | Accumulated Price |\n| --- | --- | --- | --- | --- |\n| 2 | 1 | 0001 | 0 | 0 |\n| 2 | 2 | 00**1**0 | 1 | 1 |\n| 2 | 3 | 00**1**1 | 1 | 2 |\n| 2 | 4 | 0100 | 0 | 2 |\n| 2 | 5 | 0101 | 0 | 2 |\n| 2 | 6 | 01**1**0 | 1 | 3 |\n| 2 | 7 | 01**1**1 | 1 | 4 |\n| 2 | 8 | **1**000 | 1 | 5 |\n| 2 | 9 | **1**001 | 1 | 6 |\n| 2 | 10 | **1**0**1**0 | 2 | 8 |\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= 1015`\n* `1 <= x <= 8`\n\n\nHints:\n    0. Binary search the answer.\n    1. In each step of the binary search you should calculate the number of the set bits in the <code>i<sup>th</sup></code> position. Then calculate the sum of them."
            }
        ]
    },
    {
        "Title": "Find Beautiful Indices in the Given Array II",
        "slug": "find-beautiful-indices-in-the-given-array-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** s = \"isawsquirrelnearmysquirrelhouseohmy\", a = \"my\", b = \"squirrel\", k = 15",
                "Output": "** [16,33]",
                "Explanation": "** There are 2 beautiful indices: [16,33].\n- The index 16 is beautiful as s[16..17] == \"my\" and there exists an index 4 with s[4..11] == \"squirrel\" and |16 - 4| <= 15.\n- The index 33 is beautiful as s[33..34] == \"my\" and there exists an index 18 with s[18..25] == \"squirrel\" and |33 - 18| <= 15.\nThus we return [16,33] as the result."
            },
            {
                "Input": "** s = \"abcd\", a = \"a\", b = \"a\", k = 4",
                "Output": "** [0]",
                "Explanation": "** There is 1 beautiful index: [0].\n- The index 0 is beautiful as s[0..0] == \"a\" and there exists an index 0 with s[0..0] == \"a\" and |0 - 0| <= 4.\nThus we return [0] as the result."
            }
        ]
    },
    {
        "Title": "Divide an Array Into Subarrays With Minimum Cost I",
        "slug": "divide-an-array-into-subarrays-with-minimum-cost-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,3,12]",
                "Output": "** 6",
                "Explanation": "** The best possible way to form 3 subarrays is: [1], [2], and [3,12] at a total cost of 1 + 2 + 3 = 6.\nThe other possible ways to form 3 subarrays are:\n- [1], [2,3], and [12] at a total cost of 1 + 2 + 12 = 15.\n- [1,2], [3], and [12] at a total cost of 1 + 3 + 12 = 16."
            },
            {
                "Input": "** nums = [5,4,3]",
                "Output": "** 12",
                "Explanation": "** The best possible way to form 3 subarrays is: [5], [4], and [3] at a total cost of 5 + 4 + 3 = 12.\nIt can be shown that 12 is the minimum cost achievable."
            },
            {
                "Input": "** nums = [10,3,1,1]",
                "Output": "** 12",
                "Explanation": "** The best possible way to form 3 subarrays is: [10,3], [1], and [1] at a total cost of 10 + 1 + 1 = 12.\nIt can be shown that 12 is the minimum cost achievable."
            }
        ]
    },
    {
        "Title": "Find if Array Can Be Sorted",
        "slug": "find-if-array-can-be-sorted",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [8,4,2,30,15]",
                "Output": "** true",
                "Explanation": "** Let's look at the binary representation of every element. The numbers 2, 4, and 8 have one set bit each with binary representation \"10\", \"100\", and \"1000\" respectively. The numbers 15 and 30 have four set bits each with binary representation \"1111\" and \"11110\".\nWe can sort the array using 4 operations:\n- Swap nums[0] with nums[1]. This operation is valid because 8 and 4 have one set bit each. The array becomes [4,8,2,30,15].\n- Swap nums[1] with nums[2]. This operation is valid because 8 and 2 have one set bit each. The array becomes [4,2,8,30,15].\n- Swap nums[0] with nums[1]. This operation is valid because 4 and 2 have one set bit each. The array becomes [2,4,8,30,15].\n- Swap nums[3] with nums[4]. This operation is valid because 30 and 15 have four set bits each. The array becomes [2,4,8,15,30].\nThe array has become sorted, hence we return true.\nNote that there may be other sequences of operations which also sort the array."
            },
            {
                "Input": "** nums = [1,2,3,4,5]",
                "Output": "** true",
                "Explanation": "** The array is already sorted, hence we return true."
            },
            {
                "Input": "** nums = [3,16,8,4,2]",
                "Output": "** false",
                "Explanation": "** It can be shown that it is not possible to sort the input array using any number of operations."
            }
        ]
    },
    {
        "Title": "Minimize Length of Array Using Operations",
        "slug": "minimize-length-of-array-using-operations",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,4,3,1]",
                "Output": "** 1",
                "Explanation": "** One way to minimize the length of the array is as follows:\nOperation 1: Select indices 2 and 1, insert nums[2] % nums[1] at the end and it becomes [1,4,3,1,3], then delete elements at indices 2 and 1.\nnums becomes [1,1,3].\nOperation 2: Select indices 1 and 2, insert nums[1] % nums[2] at the end and it becomes [1,1,3,1], then delete elements at indices 1 and 2.\nnums becomes [1,1].\nOperation 3: Select indices 1 and 0, insert nums[1] % nums[0] at the end and it becomes [1,1,0], then delete elements at indices 1 and 0.\nnums becomes [0].\nThe length of nums cannot be reduced further. Hence, the answer is 1.\nIt can be shown that 1 is the minimum achievable length."
            },
            {
                "Input": "** nums = [5,5,5,10,5]",
                "Output": "** 2",
                "Explanation": "** One way to minimize the length of the array is as follows:\nOperation 1: Select indices 0 and 3, insert nums[0] % nums[3] at the end and it becomes [5,5,5,10,5,5], then delete elements at indices 0 and 3.\nnums becomes [5,5,5,5]. \nOperation 2: Select indices 2 and 3, insert nums[2] % nums[3] at the end and it becomes [5,5,5,5,0], then delete elements at indices 2 and 3. \nnums becomes [5,5,0]. \nOperation 3: Select indices 0 and 1, insert nums[0] % nums[1] at the end and it becomes [5,5,0,0], then delete elements at indices 0 and 1.\nnums becomes [0,0].\nThe length of nums cannot be reduced further. Hence, the answer is 2.\nIt can be shown that 2 is the minimum achievable length."
            },
            {
                "Input": "** nums = [2,3,4]",
                "Output": "** 1",
                "Explanation": "** One way to minimize the length of the array is as follows: \nOperation 1: Select indices 1 and 2, insert nums[1] % nums[2] at the end and it becomes [2,3,4,3], then delete elements at indices 1 and 2.\nnums becomes [2,3].\nOperation 2: Select indices 1 and 0, insert nums[1] % nums[0] at the end and it becomes [2,3,1], then delete elements at indices 1 and 0.\nnums becomes [1].\nThe length of nums cannot be reduced further. Hence, the answer is 1.\nIt can be shown that 1 is the minimum achievable length."
            }
        ]
    },
    {
        "Title": "Divide an Array Into Subarrays With Minimum Cost II",
        "slug": "divide-an-array-into-subarrays-with-minimum-cost-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,3,2,6,4,2], k = 3, dist = 3",
                "Output": "** 5",
                "Explanation": "** The best possible way to divide nums into 3 subarrays is: [1,3], [2,6,4], and [2]. This choice is valid because ik-1 - i1 is 5 - 2 = 3 which is equal to dist. The total cost is nums[0] + nums[2] + nums[5] which is 1 + 2 + 2 = 5.\nIt can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 5."
            },
            {
                "Input": "** nums = [10,1,2,2,2,1], k = 4, dist = 3",
                "Output": "** 15",
                "Explanation": "** The best possible way to divide nums into 4 subarrays is: [10], [1], [2], and [2,2,1]. This choice is valid because ik-1 - i1 is 3 - 1 = 2 which is less than dist. The total cost is nums[0] + nums[1] + nums[2] + nums[3] which is 10 + 1 + 2 + 2 = 15.\nThe division [10], [1], [2,2,2], and [1] is not valid, because the difference between ik-1 and i1 is 5 - 1 = 4, which is greater than dist.\nIt can be shown that there is no possible way to divide nums into 4 subarrays at a cost lower than 15."
            },
            {
                "Input": "** nums = [10,8,18,9], k = 3, dist = 1",
                "Output": "** 36",
                "Explanation": "** The best possible way to divide nums into 4 subarrays is: [10], [8], and [18,9]. This choice is valid because ik-1 - i1 is 2 - 1 = 1 which is equal to dist.The total cost is nums[0] + nums[1] + nums[2] which is 10 + 8 + 18 = 36.\nThe division [10], [8,18], and [9] is not valid, because the difference between ik-1 and i1 is 3 - 1 = 2, which is greater than dist.\nIt can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 36."
            }
        ]
    },
    {
        "Title": "Minimum Number of Pushes to Type Word I",
        "slug": "minimum-number-of-pushes-to-type-word-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** word = \"abcde\"",
                "Output": "** 5",
                "Explanation": "** The remapped keypad given in the image provides the minimum cost.\n\"a\" -> one push on key 2\n\"b\" -> one push on key 3\n\"c\" -> one push on key 4\n\"d\" -> one push on key 5\n\"e\" -> one push on key 6\nTotal cost is 1 + 1 + 1 + 1 + 1 = 5.\nIt can be shown that no other mapping can provide a lower cost."
            },
            {
                "Input": "** word = \"xycdefghij\"",
                "Output": "** 12",
                "Explanation": "** The remapped keypad given in the image provides the minimum cost.\n\"x\" -> one push on key 2\n\"y\" -> two pushes on key 2\n\"c\" -> one push on key 3\n\"d\" -> two pushes on key 3\n\"e\" -> one push on key 4\n\"f\" -> one push on key 5\n\"g\" -> one push on key 6\n\"h\" -> one push on key 7\n\"i\" -> one push on key 8\n\"j\" -> one push on key 9\nTotal cost is 1 + 2 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 = 12.\nIt can be shown that no other mapping can provide a lower cost."
            }
        ]
    },
    {
        "Title": "Count the Number of Houses at a Certain Distance I",
        "slug": "count-the-number-of-houses-at-a-certain-distance-i",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3, x = 1, y = 3",
                "Output": "** [6,0,0]",
                "Explanation": "** Let's look at each pair of houses:\n- For the pair (1, 2), we can go from house 1 to house 2 directly.\n- For the pair (2, 1), we can go from house 2 to house 1 directly.\n- For the pair (1, 3), we can go from house 1 to house 3 directly.\n- For the pair (3, 1), we can go from house 3 to house 1 directly.\n- For the pair (2, 3), we can go from house 2 to house 3 directly.\n- For the pair (3, 2), we can go from house 3 to house 2 directly."
            },
            {
                "Input": "** n = 5, x = 2, y = 4",
                "Output": "** [10,8,2,0,0]",
                "Explanation": "** For each distance k the pairs are:\n- For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (2, 4), (4, 2), (3, 4), (4, 3), (4, 5), and (5, 4).\n- For k == 2, the pairs are (1, 3), (3, 1), (1, 4), (4, 1), (2, 5), (5, 2), (3, 5), and (5, 3).\n- For k == 3, the pairs are (1, 5), and (5, 1).\n- For k == 4 and k == 5, there are no pairs."
            },
            {
                "Input": "** n = 4, x = 1, y = 1",
                "Output": "** [6,4,2,0]",
                "Explanation": "** For each distance k the pairs are:\n- For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (3, 4), and (4, 3).\n- For k == 2, the pairs are (1, 3), (3, 1), (2, 4), and (4, 2).\n- For k == 3, the pairs are (1, 4), and (4, 1).\n- For k == 4, there are no pairs."
            }
        ]
    },
    {
        "Title": "Minimum Number of Pushes to Type Word II",
        "slug": "minimum-number-of-pushes-to-type-word-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** word = \"abcde\"",
                "Output": "** 5",
                "Explanation": "** The remapped keypad given in the image provides the minimum cost.\n\"a\" -> one push on key 2\n\"b\" -> one push on key 3\n\"c\" -> one push on key 4\n\"d\" -> one push on key 5\n\"e\" -> one push on key 6\nTotal cost is 1 + 1 + 1 + 1 + 1 = 5.\nIt can be shown that no other mapping can provide a lower cost."
            },
            {
                "Input": "** word = \"xyzxyzxyzxyz\"",
                "Output": "** 12",
                "Explanation": "** The remapped keypad given in the image provides the minimum cost.\n\"x\" -> one push on key 2\n\"y\" -> one push on key 3\n\"z\" -> one push on key 4\nTotal cost is 1 * 4 + 1 * 4 + 1 * 4 = 12\nIt can be shown that no other mapping can provide a lower cost.\nNote that the key 9 is not mapped to any letter: it is not necessary to map letters to every key, but to map all the letters."
            },
            {
                "Input": "** word = \"aabbccddeeffgghhiiiiii\"",
                "Output": "** 24",
                "Explanation": "** The remapped keypad given in the image provides the minimum cost.\n\"a\" -> one push on key 2\n\"b\" -> one push on key 3\n\"c\" -> one push on key 4\n\"d\" -> one push on key 5\n\"e\" -> one push on key 6\n\"f\" -> one push on key 7\n\"g\" -> one push on key 8\n\"h\" -> two pushes on key 9\n\"i\" -> one push on key 9\nTotal cost is 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 2 * 2 + 6 * 1 = 24.\nIt can be shown that no other mapping can provide a lower cost."
            }
        ]
    },
    {
        "Title": "Count the Number of Houses at a Certain Distance II",
        "slug": "count-the-number-of-houses-at-a-certain-distance-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 3, x = 1, y = 3",
                "Output": "** [6,0,0]",
                "Explanation": "** Let's look at each pair of houses:\n- For the pair (1, 2), we can go from house 1 to house 2 directly.\n- For the pair (2, 1), we can go from house 2 to house 1 directly.\n- For the pair (1, 3), we can go from house 1 to house 3 directly.\n- For the pair (3, 1), we can go from house 3 to house 1 directly.\n- For the pair (2, 3), we can go from house 2 to house 3 directly.\n- For the pair (3, 2), we can go from house 3 to house 2 directly."
            },
            {
                "Input": "** n = 5, x = 2, y = 4",
                "Output": "** [10,8,2,0,0]",
                "Explanation": "** For each distance k the pairs are:\n- For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (2, 4), (4, 2), (3, 4), (4, 3), (4, 5), and (5, 4).\n- For k == 2, the pairs are (1, 3), (3, 1), (1, 4), (4, 1), (2, 5), (5, 2), (3, 5), and (5, 3).\n- For k == 3, the pairs are (1, 5), and (5, 1).\n- For k == 4 and k == 5, there are no pairs."
            },
            {
                "Input": "** n = 4, x = 1, y = 1",
                "Output": "** [6,4,2,0]",
                "Explanation": "** For each distance k the pairs are:\n- For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (3, 4), and (4, 3).\n- For k == 2, the pairs are (1, 3), (3, 1), (2, 4), and (4, 2).\n- For k == 3, the pairs are (1, 4), and (4, 1).\n- For k == 4, there are no pairs."
            }
        ]
    },
    {
        "Title": "Number of Changing Keys",
        "slug": "number-of-changing-keys",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"aAbBcC\"",
                "Output": "** 2",
                "Explanation": "** \nFrom s[0] = 'a' to s[1] = 'A', there is no change of key as caps lock or shift is not counted.\nFrom s[1] = 'A' to s[2] = 'b', there is a change of key.\nFrom s[2] = 'b' to s[3] = 'B', there is no change of key as caps lock or shift is not counted.\nFrom s[3] = 'B' to s[4] = 'c', there is a change of key.\nFrom s[4] = 'c' to s[5] = 'C', there is no change of key as caps lock or shift is not counted."
            },
            {
                "Input": "** s = \"AaAaAaaA\"",
                "Output": "** 0",
                "Explanation": "** There is no change of key since only the letters 'a' and 'A' are pressed which does not require change of key."
            }
        ]
    },
    {
        "Title": "Find the Maximum Number of Elements in Subset",
        "slug": "find-the-maximum-number-of-elements-in-subset",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [5,4,1,2,2]",
                "Output": "** 3",
                "Explanation": "** We can select the subset {4,2,2}, which can be placed in the array as [2,4,2] which follows the pattern and 22 == 4. Hence the answer is 3."
            },
            {
                "Input": "** nums = [1,3,2,4]",
                "Output": "** 1",
                "Explanation": "** We can select the subset {1}, which can be placed in the array as [1] which follows the pattern. Hence the answer is 1. Note that we could have also selected the subsets {2}, {3}, or {4}, there may be multiple subsets which provide the same answer."
            }
        ]
    },
    {
        "Title": "Alice and Bob Playing Flower Game",
        "slug": "alice-and-bob-playing-flower-game",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3, m = 2",
                "Output": "** 3",
                "Explanation": "** The following pairs satisfy conditions described in the statement: (1,2), (3,2), (2,1)."
            },
            {
                "Input": "** n = 1, m = 1",
                "Output": "** 0",
                "Explanation": "** No pairs satisfy the conditions described in the statement."
            }
        ]
    },
    {
        "Title": "Minimize OR of Remaining Elements Using Operations",
        "slug": "minimize-or-of-remaining-elements-using-operations",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [3,5,3,2,7], k = 2",
                "Output": "** 3",
                "Explanation": "** Let's do the following operations:\n1. Replace nums[0] and nums[1] with (nums[0] & nums[1]) so that nums becomes equal to [1,3,2,7].\n2. Replace nums[2] and nums[3] with (nums[2] & nums[3]) so that nums becomes equal to [1,3,2].\nThe bitwise-or of the final array is 3.\nIt can be shown that 3 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations."
            },
            {
                "Input": "** nums = [7,3,15,14,2,8], k = 4",
                "Output": "** 2",
                "Explanation": "** Let's do the following operations:\n1. Replace nums[0] and nums[1] with (nums[0] & nums[1]) so that nums becomes equal to [3,15,14,2,8]. \n2. Replace nums[0] and nums[1] with (nums[0] & nums[1]) so that nums becomes equal to [3,14,2,8].\n3. Replace nums[0] and nums[1] with (nums[0] & nums[1]) so that nums becomes equal to [2,2,8].\n4. Replace nums[1] and nums[2] with (nums[1] & nums[2]) so that nums becomes equal to [2,0].\nThe bitwise-or of the final array is 2.\nIt can be shown that 2 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations."
            },
            {
                "Input": "** nums = [10,7,10,3,9,14,9,4], k = 1",
                "Output": "** 15",
                "Explanation": "** Without applying any operations, the bitwise-or of nums is 15.\nIt can be shown that 15 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations."
            }
        ]
    },
    {
        "Title": "Type of Triangle",
        "slug": "type-of-triangle",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [3,3,3]",
                "Output": "** \"equilateral\"",
                "Explanation": "** Since all the sides are of equal length, therefore, it will form an equilateral triangle."
            },
            {
                "Input": "** nums = [3,4,5]",
                "Output": "** \"scalene\"",
                "Explanation": "** \nnums[0] + nums[1] = 3 + 4 = 7, which is greater than nums[2] = 5.\nnums[0] + nums[2] = 3 + 5 = 8, which is greater than nums[1] = 4.\nnums[1] + nums[2] = 4 + 5 = 9, which is greater than nums[0] = 3. \nSince the sum of the two sides is greater than the third side for all three cases, therefore, it can form a triangle.\nAs all the sides are of different lengths, it will form a scalene triangle."
            }
        ]
    },
    {
        "Title": "Find the Number of Ways to Place People I",
        "slug": "find-the-number-of-ways-to-place-people-i",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** points = [[1,1],[2,2],[3,3]]",
                "Output": "** 0",
                "Explanation": "** There is no way to place Alice and Bob such that Alice can build a fence with Alice's position as the upper left corner and Bob's position as the lower right corner. Hence we return 0."
            },
            {
                "Input": "** points = [[6,2],[4,4],[2,6]]",
                "Output": "** 2",
                "Explanation": "** There are two ways to place Alice and Bob such that Alice will not be sad:\n- Place Alice at (4, 4) and Bob at (6, 2).\n- Place Alice at (2, 6) and Bob at (4, 4).\nYou cannot place Alice at (2, 6) and Bob at (6, 2) because the person at (4, 4) will be inside the fence."
            },
            {
                "Input": "** points = [[3,1],[1,3],[1,1]]",
                "Output": "** 2",
                "Explanation": "** There are two ways to place Alice and Bob such that Alice will not be sad:\n- Place Alice at (1, 1) and Bob at (3, 1).\n- Place Alice at (1, 3) and Bob at (1, 1).\nYou cannot place Alice at (1, 3) and Bob at (3, 1) because the person at (1, 1) will be on the fence.\nNote that it does not matter if the fence encloses any area, the first and second fences in the image are valid."
            }
        ]
    },
    {
        "Title": "Maximum Good Subarray Sum",
        "slug": "maximum-good-subarray-sum",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5,6], k = 1",
                "Output": "** 11",
                "Explanation": "** The absolute difference between the first and last element must be 1 for a good subarray. All the good subarrays are: [1,2], [2,3], [3,4], [4,5], and [5,6]. The maximum subarray sum is 11 for the subarray [5,6]."
            },
            {
                "Input": "** nums = [-1,3,2,4,5], k = 3",
                "Output": "** 11",
                "Explanation": "** The absolute difference between the first and last element must be 3 for a good subarray. All the good subarrays are: [-1,3,2], and [2,4,5]. The maximum subarray sum is 11 for the subarray [2,4,5]."
            },
            {
                "Input": "** nums = [-1,-2,-3,-4], k = 2",
                "Output": "** -6",
                "Explanation": "** The absolute difference between the first and last element must be 2 for a good subarray. All the good subarrays are: [-1,-2,-3], and [-2,-3,-4]. The maximum subarray sum is -6 for the subarray [-1,-2,-3]."
            }
        ]
    },
    {
        "Title": "Find the Number of Ways to Place People II",
        "slug": "find-the-number-of-ways-to-place-people-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** points = [[1,1],[2,2],[3,3]]",
                "Output": "** 0",
                "Explanation": "** There is no way to place Alice and Bob such that Alice can build a fence with Alice's position as the upper left corner and Bob's position as the lower right corner. Hence we return 0."
            },
            {
                "Input": "** points = [[6,2],[4,4],[2,6]]",
                "Output": "** 2",
                "Explanation": "** There are two ways to place Alice and Bob such that Alice will not be sad:\n- Place Alice at (4, 4) and Bob at (6, 2).\n- Place Alice at (2, 6) and Bob at (4, 4).\nYou cannot place Alice at (2, 6) and Bob at (6, 2) because the person at (4, 4) will be inside the fence."
            },
            {
                "Input": "** points = [[3,1],[1,3],[1,1]]",
                "Output": "** 2",
                "Explanation": "** There are two ways to place Alice and Bob such that Alice will not be sad:\n- Place Alice at (1, 1) and Bob at (3, 1).\n- Place Alice at (1, 3) and Bob at (1, 1).\nYou cannot place Alice at (1, 3) and Bob at (3, 1) because the person at (1, 1) will be on the fence.\nNote that it does not matter if the fence encloses any area, the first and second fences in the image are valid."
            }
        ]
    },
    {
        "Title": "Ant on the Boundary",
        "slug": "ant-on-the-boundary",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [2,3,-5]",
                "Output": "** 1",
                "Explanation": "** After the first step, the ant is 2 steps to the right of the boundary.\nAfter the second step, the ant is 5 steps to the right of the boundary.\nAfter the third step, the ant is on the boundary.\nSo the answer is 1."
            },
            {
                "Input": "** nums = [3,2,-3,-4]",
                "Output": "** 0",
                "Explanation": "** After the first step, the ant is 3 steps to the right of the boundary.\nAfter the second step, the ant is 5 steps to the right of the boundary.\nAfter the third step, the ant is 2 steps to the right of the boundary.\nAfter the fourth step, the ant is 2 steps to the left of the boundary.\nThe ant never returned to the boundary, so the answer is 0."
            }
        ]
    },
    {
        "Title": "Minimum Time to Revert Word to Initial State I",
        "slug": "minimum-time-to-revert-word-to-initial-state-i",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** word = \"abacaba\", k = 3",
                "Output": "** 2",
                "Explanation": "** At the 1st second, we remove characters \"aba\" from the prefix of word, and add characters \"bac\" to the end of word. Thus, word becomes equal to \"cababac\".\nAt the 2nd second, we remove characters \"cab\" from the prefix of word, and add \"aba\" to the end of word. Thus, word becomes equal to \"abacaba\" and reverts to its initial state.\nIt can be shown that 2 seconds is the minimum time greater than zero required for word to revert to its initial state."
            },
            {
                "Input": "** word = \"abacaba\", k = 4",
                "Output": "** 1",
                "Explanation": "** At the 1st second, we remove characters \"abac\" from the prefix of word, and add characters \"caba\" to the end of word. Thus, word becomes equal to \"abacaba\" and reverts to its initial state.\nIt can be shown that 1 second is the minimum time greater than zero required for word to revert to its initial state."
            },
            {
                "Input": "** word = \"abcbabcd\", k = 2",
                "Output": "** 4",
                "Explanation": "** At every second, we will remove the first 2 characters of word, and add the same characters to the end of word.\nAfter 4 seconds, word becomes equal to \"abcbabcd\" and reverts to its initial state.\nIt can be shown that 4 seconds is the minimum time greater than zero required for word to revert to its initial state."
            }
        ]
    },
    {
        "Title": "Find the Grid of Region Average",
        "slug": "find-the-grid-of-region-average",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** image = [[5,6,7,10],[8,9,10,10],[11,12,13,10]], threshold = 3",
                "Output": "** [[9,9,9,9],[9,9,9,9],[9,9,9,9]]",
                "Explanation": "** There exist two regions in the image, which are shown as the shaded areas in the picture. The average intensity of the first region is 9, while the average intensity of the second region is 9.67 which is rounded down to 9. The average intensity of both of the regions is (9 + 9) / 2 = 9. As all the pixels belong to either region 1, region 2, or both of them, the intensity of every pixel in the result is 9. \nPlease note that the rounded-down values are used when calculating the average of multiple regions, hence the calculation is done using 9 as the average intensity of region 2, not 9.67."
            },
            {
                "Input": "** image = [[10,20,30],[15,25,35],[20,30,40],[25,35,45]], threshold = 12",
                "Output": "** [[25,25,25],[27,27,27],[27,27,27],[30,30,30]]",
                "Explanation": "** There exist two regions in the image, which are shown as the shaded areas in the picture. The average intensity of the first region is 25, while the average intensity of the second region is 30. The average intensity of both of the regions is (25 + 30) / 2 = 27.5 which is rounded down to 27. All the pixels in row 0 of the image belong to region 1, hence all the pixels in row 0 in the result are 25. Similarly, all the pixels in row 3 in the result are 30. The pixels in rows 1 and 2 of the image belong to region 1 and region 2, hence their assigned value is 27 in the result."
            }
        ]
    },
    {
        "Title": "Minimum Time to Revert Word to Initial State II",
        "slug": "minimum-time-to-revert-word-to-initial-state-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** word = \"abacaba\", k = 3",
                "Output": "** 2",
                "Explanation": "** At the 1st second, we remove characters \"aba\" from the prefix of word, and add characters \"bac\" to the end of word. Thus, word becomes equal to \"cababac\".\nAt the 2nd second, we remove characters \"cab\" from the prefix of word, and add \"aba\" to the end of word. Thus, word becomes equal to \"abacaba\" and reverts to its initial state.\nIt can be shown that 2 seconds is the minimum time greater than zero required for word to revert to its initial state."
            },
            {
                "Input": "** word = \"abacaba\", k = 4",
                "Output": "** 1",
                "Explanation": "** At the 1st second, we remove characters \"abac\" from the prefix of word, and add characters \"caba\" to the end of word. Thus, word becomes equal to \"abacaba\" and reverts to its initial state.\nIt can be shown that 1 second is the minimum time greater than zero required for word to revert to its initial state."
            },
            {
                "Input": "** word = \"abcbabcd\", k = 2",
                "Output": "** 4",
                "Explanation": "** At every second, we will remove the first 2 characters of word, and add the same characters to the end of word.\nAfter 4 seconds, word becomes equal to \"abcbabcd\" and reverts to its initial state.\nIt can be shown that 4 seconds is the minimum time greater than zero required for word to revert to its initial state."
            }
        ]
    },
    {
        "Title": "Modify the Matrix",
        "slug": "modify-the-matrix",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** matrix = [[1,2,-1],[4,-1,6],[7,8,9]]",
                "Output": "** [[1,2,9],[4,8,6],[7,8,9]]",
                "Explanation": "** The diagram above shows the elements that are changed (in blue).\n- We replace the value in the cell [1][1] with the maximum value in the column 1, that is 8.\n- We replace the value in the cell [0][2] with the maximum value in the column 2, that is 9."
            },
            {
                "Input": "** matrix = [[3,-1],[5,2]]",
                "Output": "** [[3,2],[5,2]]",
                "Explanation": "** The diagram above shows the elements that are changed (in blue)."
            }
        ]
    },
    {
        "Title": "Number of Subarrays That Match a Pattern I",
        "slug": "number-of-subarrays-that-match-a-pattern-i",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5,6], pattern = [1,1]",
                "Output": "** 4",
                "Explanation": "** The pattern [1,1] indicates that we are looking for strictly increasing subarrays of size 3. In the array nums, the subarrays [1,2,3], [2,3,4], [3,4,5], and [4,5,6] match this pattern.\nHence, there are 4 subarrays in nums that match the pattern."
            },
            {
                "Input": "** nums = [1,4,4,1,3,5,5,3], pattern = [1,0,-1]",
                "Output": "** 2",
                "Explanation": "** Here, the pattern [1,0,-1] indicates that we are looking for a sequence where the first number is smaller than the second, the second is equal to the third, and the third is greater than the fourth. In the array nums, the subarrays [1,4,4,1], and [3,5,5,3] match this pattern.\nHence, there are 2 subarrays in nums that match the pattern."
            }
        ]
    },
    {
        "Title": "Maximum Palindromes After Operations",
        "slug": "maximum-palindromes-after-operations",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** words = [\"abbb\",\"ba\",\"aa\"]",
                "Output": "** 3",
                "Explanation": "** In this example, one way to get the maximum number of palindromes is:\nChoose i = 0, j = 1, x = 0, y = 0, so we swap words[0][0] and words[1][0]. words becomes [\"bbbb\",\"aa\",\"aa\"].\nAll strings in words are now palindromes.\nHence, the maximum number of palindromes achievable is 3."
            },
            {
                "Input": "** words = [\"abc\",\"ab\"]",
                "Output": "** 2",
                "Explanation": "** In this example, one way to get the maximum number of palindromes is: \nChoose i = 0, j = 1, x = 1, y = 0, so we swap words[0][1] and words[1][0]. words becomes [\"aac\",\"bb\"].\nChoose i = 0, j = 0, x = 1, y = 2, so we swap words[0][1] and words[0][2]. words becomes [\"aca\",\"bb\"].\nBoth strings are now palindromes.\nHence, the maximum number of palindromes achievable is 2."
            },
            {
                "Input": "** words = [\"cd\",\"ef\",\"a\"]",
                "Output": "** 1",
                "Explanation": "** In this example, there is no need to perform any operation.\nThere is one palindrome in words \"a\".\nIt can be shown that it is not possible to get more than one palindrome after any number of operations.\nHence, the answer is 1."
            }
        ]
    },
    {
        "Title": "Number of Subarrays That Match a Pattern II",
        "slug": "number-of-subarrays-that-match-a-pattern-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4,5,6], pattern = [1,1]",
                "Output": "** 4",
                "Explanation": "** The pattern [1,1] indicates that we are looking for strictly increasing subarrays of size 3. In the array nums, the subarrays [1,2,3], [2,3,4], [3,4,5], and [4,5,6] match this pattern.\nHence, there are 4 subarrays in nums that match the pattern."
            },
            {
                "Input": "** nums = [1,4,4,1,3,5,5,3], pattern = [1,0,-1]",
                "Output": "** 2",
                "Explanation": "** Here, the pattern [1,0,-1] indicates that we are looking for a sequence where the first number is smaller than the second, the second is equal to the third, and the third is greater than the fourth. In the array nums, the subarrays [1,4,4,1], and [3,5,5,3] match this pattern.\nHence, there are 2 subarrays in nums that match the pattern."
            }
        ]
    },
    {
        "Title": "Maximum Number of Operations With the Same Score I",
        "slug": "maximum-number-of-operations-with-the-same-score-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [3,2,1,4,5]",
                "Output": "** 2",
                "Explanation": "** We perform the following operations:\n- Delete the first two elements, with score 3 + 2 = 5, nums = [1,4,5].\n- Delete the first two elements, with score 1 + 4 = 5, nums = [5].\nWe are unable to perform any more operations as nums contain only 1 element."
            },
            {
                "Input": "** nums = [3,2,6,1,4]",
                "Output": "** 1",
                "Explanation": "** We perform the following operations:\n- Delete the first two elements, with score 3 + 2 = 5, nums = [6,1,4].\nWe are unable to perform any more operations as the score of the next operation isn't the same as the previous one."
            }
        ]
    },
    {
        "Title": "Apply Operations to Make String Empty",
        "slug": "apply-operations-to-make-string-empty",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"aabcbbca\"",
                "Output": "** \"ba\"",
                "Explanation": "** Explained in the statement."
            },
            {
                "Input": "** s = \"abcd\"",
                "Output": "** \"abcd\"",
                "Explanation": "** We do the following operation:\n- Remove the underlined characters s = \"**abcd**\". The resulting string is s = \"\".\nThe string just before the last operation is \"abcd\"."
            }
        ]
    },
    {
        "Title": "Maximum Number of Operations With the Same Score II",
        "slug": "maximum-number-of-operations-with-the-same-score-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,2,1,2,3,4]",
                "Output": "** 3",
                "Explanation": "** We perform the following operations:\n- Delete the first two elements, with score 3 + 2 = 5, nums = [1,2,3,4].\n- Delete the first and the last elements, with score 1 + 4 = 5, nums = [2,3].\n- Delete the first and the last elements, with score 2 + 3 = 5, nums = [].\nWe are unable to perform any more operations as nums is empty."
            },
            {
                "Input": "** nums = [3,2,6,1,4]",
                "Output": "** 2",
                "Explanation": "** We perform the following operations:\n- Delete the first two elements, with score 3 + 2 = 5, nums = [6,1,4].\n- Delete the last two elements, with score 1 + 4 = 5, nums = [6].\nIt can be proven that we can perform at most 2 operations."
            }
        ]
    },
    {
        "Title": "Maximize Consecutive Elements in an Array After Modification",
        "slug": "maximize-consecutive-elements-in-an-array-after-modification",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [2,1,5,1,1]",
                "Output": "** 3",
                "Explanation": "** We can increase the elements at indices 0 and 3. The resulting array is nums = [3,1,5,2,1].\nWe select the elements [**3**,**1**,5,**2**,1] and we sort them to obtain [1,2,3], which are consecutive.\nIt can be shown that we cannot select more than 3 consecutive elements."
            },
            {
                "Input": "** nums = [1,4,7,10]",
                "Output": "** 1",
                "Explanation": "** The maximum consecutive elements that we can select is 1."
            }
        ]
    },
    {
        "Title": "Count Prefix and Suffix Pairs I",
        "slug": "count-prefix-and-suffix-pairs-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** words = [\"a\",\"aba\",\"ababa\",\"aa\"]",
                "Output": "** 4",
                "Explanation": "** In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(\"a\", \"aba\") is true.\ni = 0 and j = 2 because isPrefixAndSuffix(\"a\", \"ababa\") is true.\ni = 0 and j = 3 because isPrefixAndSuffix(\"a\", \"aa\") is true.\ni = 1 and j = 2 because isPrefixAndSuffix(\"aba\", \"ababa\") is true.\nTherefore, the answer is 4."
            },
            {
                "Input": "** words = [\"pa\",\"papa\",\"ma\",\"mama\"]",
                "Output": "** 2",
                "Explanation": "** In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(\"pa\", \"papa\") is true.\ni = 2 and j = 3 because isPrefixAndSuffix(\"ma\", \"mama\") is true.\nTherefore, the answer is 2."
            },
            {
                "Input": "** words = [\"abab\",\"ab\"]",
                "Output": "** 0",
                "Explanation": "** In this example, the only valid index pair is i = 0 and j = 1, and isPrefixAndSuffix(\"abab\", \"ab\") is false.\nTherefore, the answer is 0."
            }
        ]
    },
    {
        "Title": "Find the Length of the Longest Common Prefix",
        "slug": "find-the-length-of-the-longest-common-prefix",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr1 = [1,10,100], arr2 = [1000]",
                "Output": "** 3",
                "Explanation": "** There are 3 pairs (arr1[i], arr2[j]):\n- The longest common prefix of (1, 1000) is 1.\n- The longest common prefix of (10, 1000) is 10.\n- The longest common prefix of (100, 1000) is 100.\nThe longest common prefix is 100 with a length of 3."
            },
            {
                "Input": "** arr1 = [1,2,3], arr2 = [4,4,4]",
                "Output": "** 0",
                "Explanation": "** There exists no common prefix for any pair (arr1[i], arr2[j]), hence we return 0.\nNote that common prefixes between elements of the same array do not count."
            }
        ]
    },
    {
        "Title": "Most Frequent Prime",
        "slug": "most-frequent-prime",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** mat = [[7]]",
                "Output": "** -1",
                "Explanation": "** The only number which can be formed is 7. It is a prime number however it is not greater than 10, so return -1."
            },
            {
                "Input": "** mat = [[9,7,8],[4,6,5],[2,8,6]]",
                "Output": "** 97",
                "Explanation": "** \nNumbers greater than 10 created from the cell (0,0) in all possible directions are: [97,978,96,966,94,942].\nNumbers greater than 10 created from the cell (0,1) in all possible directions are: [78,75,76,768,74,79].\nNumbers greater than 10 created from the cell (0,2) in all possible directions are: [85,856,86,862,87,879].\nNumbers greater than 10 created from the cell (1,0) in all possible directions are: [46,465,48,42,49,47].\nNumbers greater than 10 created from the cell (1,1) in all possible directions are: [65,66,68,62,64,69,67,68].\nNumbers greater than 10 created from the cell (1,2) in all possible directions are: [56,58,56,564,57,58].\nNumbers greater than 10 created from the cell (2,0) in all possible directions are: [28,286,24,249,26,268].\nNumbers greater than 10 created from the cell (2,1) in all possible directions are: [86,82,84,86,867,85].\nNumbers greater than 10 created from the cell (2,2) in all possible directions are: [68,682,66,669,65,658].\nThe most frequent prime number among all the created numbers is 97."
            }
        ]
    },
    {
        "Title": "Count Prefix and Suffix Pairs II",
        "slug": "count-prefix-and-suffix-pairs-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** words = [\"a\",\"aba\",\"ababa\",\"aa\"]",
                "Output": "** 4",
                "Explanation": "** In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(\"a\", \"aba\") is true.\ni = 0 and j = 2 because isPrefixAndSuffix(\"a\", \"ababa\") is true.\ni = 0 and j = 3 because isPrefixAndSuffix(\"a\", \"aa\") is true.\ni = 1 and j = 2 because isPrefixAndSuffix(\"aba\", \"ababa\") is true.\nTherefore, the answer is 4."
            },
            {
                "Input": "** words = [\"pa\",\"papa\",\"ma\",\"mama\"]",
                "Output": "** 2",
                "Explanation": "** In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(\"pa\", \"papa\") is true.\ni = 2 and j = 3 because isPrefixAndSuffix(\"ma\", \"mama\") is true.\nTherefore, the answer is 2."
            },
            {
                "Input": "** words = [\"abab\",\"ab\"]",
                "Output": "** 0",
                "Explanation": "** In this example, the only valid index pair is i = 0 and j = 1, and isPrefixAndSuffix(\"abab\", \"ab\") is false.\nTherefore, the answer is 0."
            }
        ]
    },
    {
        "Title": "Split the Array",
        "slug": "split-the-array",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,1,2,2,3,4]",
                "Output": "** true",
                "Explanation": "** One of the possible ways to split nums is nums1 = [1,2,3] and nums2 = [1,2,4]."
            },
            {
                "Input": "** nums = [1,1,1,1]",
                "Output": "** false",
                "Explanation": "** The only possible way to split nums is nums1 = [1,1] and nums2 = [1,1]. Both nums1 and nums2 do not contain distinct elements. Therefore, we return false."
            }
        ]
    },
    {
        "Title": "Find the Largest Area of Square Inside Two Rectangles",
        "slug": "find-the-largest-area-of-square-inside-two-rectangles",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** bottomLeft = [[1,1],[2,2],[3,1]], topRight = [[3,3],[4,4],[6,6]]",
                "Output": "** 1",
                "Explanation": "** A square with side length 1 can fit inside either the intersecting region of rectangle 0 and rectangle 1, or the intersecting region of rectangle 1 and rectangle 2. Hence the largest area is side * side which is 1 * 1 == 1.\nIt can be shown that a square with a greater side length can not fit inside any intersecting region."
            },
            {
                "Input": "** bottomLeft = [[1,1],[2,2],[1,2]], topRight = [[3,3],[4,4],[3,4]]",
                "Output": "** 1",
                "Explanation": "** A square with side length 1 can fit inside either the intersecting region of rectangle 0 and rectangle 1, the intersecting region of rectangle 1 and rectangle 2, or the intersection region of all 3 rectangles. Hence the largest area is side * side which is 1 * 1 == 1.\nIt can be shown that a square with a greater side length can not fit inside any intersecting region.\nNote that the region can be formed by the intersection of more than 2 rectangles."
            },
            {
                "Input": "** bottomLeft = [[1,1],[3,3],[3,1]], topRight = [[2,2],[4,4],[4,2]]",
                "Output": "** 0",
                "Explanation": "** No pair of rectangles intersect, hence, we return 0."
            }
        ]
    },
    {
        "Title": "Earliest Second to Mark Indices I",
        "slug": "earliest-second-to-mark-indices-i",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,2,0], changeIndices = [2,2,2,2,3,2,2,1]",
                "Output": "** 8",
                "Explanation": "** In this example, we have 8 seconds. The following operations can be performed to mark all indices:\nSecond 1: Choose index 1 and decrement nums[1] by one. nums becomes [1,2,0].\nSecond 2: Choose index 1 and decrement nums[1] by one. nums becomes [0,2,0].\nSecond 3: Choose index 2 and decrement nums[2] by one. nums becomes [0,1,0].\nSecond 4: Choose index 2 and decrement nums[2] by one. nums becomes [0,0,0].\nSecond 5: Mark the index changeIndices[5], which is marking index 3, since nums[3] is equal to 0.\nSecond 6: Mark the index changeIndices[6], which is marking index 2, since nums[2] is equal to 0.\nSecond 7: Do nothing.\nSecond 8: Mark the index changeIndices[8], which is marking index 1, since nums[1] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 8th second.\nHence, the answer is 8."
            },
            {
                "Input": "** nums = [1,3], changeIndices = [1,1,1,2,1,1,1]",
                "Output": "** 6",
                "Explanation": "** In this example, we have 7 seconds. The following operations can be performed to mark all indices:\nSecond 1: Choose index 2 and decrement nums[2] by one. nums becomes [1,2].\nSecond 2: Choose index 2 and decrement nums[2] by one. nums becomes [1,1].\nSecond 3: Choose index 2 and decrement nums[2] by one. nums becomes [1,0].\nSecond 4: Mark the index changeIndices[4], which is marking index 2, since nums[2] is equal to 0.\nSecond 5: Choose index 1 and decrement nums[1] by one. nums becomes [0,0].\nSecond 6: Mark the index changeIndices[6], which is marking index 1, since nums[1] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 6th second.\nHence, the answer is 6."
            },
            {
                "Input": "** nums = [0,1], changeIndices = [2,2,2]",
                "Output": "** -1",
                "Explanation": "** In this example, it is impossible to mark all indices because index 1 isn't in changeIndices.\nHence, the answer is -1."
            }
        ]
    },
    {
        "Title": "Earliest Second to Mark Indices II",
        "slug": "earliest-second-to-mark-indices-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [3,2,3], changeIndices = [1,3,2,2,2,2,3]",
                "Output": "** 6",
                "Explanation": "** In this example, we have 7 seconds. The following operations can be performed to mark all indices:\nSecond 1: Set nums[changeIndices[1]] to 0. nums becomes [0,2,3].\nSecond 2: Set nums[changeIndices[2]] to 0. nums becomes [0,2,0].\nSecond 3: Set nums[changeIndices[3]] to 0. nums becomes [0,0,0].\nSecond 4: Mark index 1, since nums[1] is equal to 0.\nSecond 5: Mark index 2, since nums[2] is equal to 0.\nSecond 6: Mark index 3, since nums[3] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 6th second.\nHence, the answer is 6."
            },
            {
                "Input": "** nums = [0,0,1,2], changeIndices = [1,2,1,2,1,2,1,2]",
                "Output": "** 7",
                "Explanation": "** In this example, we have 8 seconds. The following operations can be performed to mark all indices:\nSecond 1: Mark index 1, since nums[1] is equal to 0.\nSecond 2: Mark index 2, since nums[2] is equal to 0.\nSecond 3: Decrement index 4 by one. nums becomes [0,0,1,1].\nSecond 4: Decrement index 4 by one. nums becomes [0,0,1,0].\nSecond 5: Decrement index 3 by one. nums becomes [0,0,0,0].\nSecond 6: Mark index 3, since nums[3] is equal to 0.\nSecond 7: Mark index 4, since nums[4] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 7th second.\nHence, the answer is 7."
            },
            {
                "Input": "** nums = [1,2,3], changeIndices = [1,2,3]",
                "Output": "** -1",
                "Explanation": "** In this example, it can be shown that it is impossible to mark all indices, as we don't have enough seconds. \nHence, the answer is -1."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Exceed Threshold Value I",
        "slug": "minimum-operations-to-exceed-threshold-value-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [2,11,10,1,3], k = 10",
                "Output": "** 3",
                "Explanation": "** After one operation, nums becomes equal to [2, 11, 10, 3].\nAfter two operations, nums becomes equal to [11, 10, 3].\nAfter three operations, nums becomes equal to [11, 10].\nAt this stage, all the elements of nums are greater than or equal to 10 so we can stop.\nIt can be shown that 3 is the minimum number of operations needed so that all elements of the array are greater than or equal to 10."
            },
            {
                "Input": "** nums = [1,1,2,4,9], k = 1",
                "Output": "** 0",
                "Explanation": "** All elements of the array are greater than or equal to 1 so we do not need to apply any operations on nums."
            },
            {
                "Input": "** nums = [1,1,2,4,9], k = 9",
                "Output": "** 4",
                "Explanation": "** only a single element of nums is greater than or equal to 9 so we need to apply the operations 4 times on nums."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Exceed Threshold Value II",
        "slug": "minimum-operations-to-exceed-threshold-value-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,11,10,1,3], k = 10",
                "Output": "** 2",
                "Explanation": "** In the first operation, we remove elements 1 and 2, then add 1 * 2 + 2 to nums. nums becomes equal to [4, 11, 10, 3].\nIn the second operation, we remove elements 3 and 4, then add 3 * 2 + 4 to nums. nums becomes equal to [10, 11, 10].\nAt this stage, all the elements of nums are greater than or equal to 10 so we can stop.\nIt can be shown that 2 is the minimum number of operations needed so that all elements of the array are greater than or equal to 10."
            },
            {
                "Input": "** nums = [1,1,2,4,9], k = 20",
                "Output": "** 4",
                "Explanation": "** After one operation, nums becomes equal to [2, 4, 9, 3].\nAfter two operations, nums becomes equal to [7, 4, 9].\nAfter three operations, nums becomes equal to [15, 9].\nAfter four operations, nums becomes equal to [33].\nAt this stage, all the elements of nums are greater than 20 so we can stop.\nIt can be shown that 4 is the minimum number of operations needed so that all elements of the array are greater than or equal to 20."
            }
        ]
    },
    {
        "Title": "Count Pairs of Connectable Servers in a Weighted Tree Network",
        "slug": "count-pairs-of-connectable-servers-in-a-weighted-tree-network",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** edges = [[0,1,1],[1,2,5],[2,3,13],[3,4,9],[4,5,2]], signalSpeed = 1",
                "Output": "** [0,4,6,6,4,0]",
                "Explanation": "** Since signalSpeed is 1, count[c] is equal to the number of pairs of paths that start at c and do not share any edges.\nIn the case of the given path graph, count[c] is equal to the number of servers to the left of c multiplied by the servers to the right of c."
            },
            {
                "Input": "** edges = [[0,6,3],[6,5,3],[0,3,1],[3,2,7],[3,1,6],[3,4,2]], signalSpeed = 3",
                "Output": "** [2,0,0,0,0,0,2]",
                "Explanation": "** Through server 0, there are 2 pairs of connectable servers: (4, 5) and (4, 6).\nThrough server 6, there are 2 pairs of connectable servers: (4, 5) and (0, 5).\nIt can be shown that no two servers are connectable through servers other than 0 and 6."
            }
        ]
    },
    {
        "Title": "Find the Maximum Sum of Node Values",
        "slug": "find-the-maximum-sum-of-node-values",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,1], k = 3, edges = [[0,1],[0,2]]",
                "Output": "** 6",
                "Explanation": "** Alice can achieve the maximum sum of 6 using a single operation:\n- Choose the edge [0,2]. nums[0] and nums[2] become: 1 XOR 3 = 2, and the array nums becomes: [1,2,1] -> [2,2,2].\nThe total sum of values is 2 + 2 + 2 = 6.\nIt can be shown that 6 is the maximum achievable sum of values."
            },
            {
                "Input": "** nums = [2,3], k = 7, edges = [[0,1]]",
                "Output": "** 9",
                "Explanation": "** Alice can achieve the maximum sum of 9 using a single operation:\n- Choose the edge [0,1]. nums[0] becomes: 2 XOR 7 = 5 and nums[1] become: 3 XOR 7 = 4, and the array nums becomes: [2,3] -> [5,4].\nThe total sum of values is 5 + 4 = 9.\nIt can be shown that 9 is the maximum achievable sum of values."
            },
            {
                "Input": "** nums = [7,7,7,7,7,7], k = 3, edges = [[0,1],[0,2],[0,3],[0,4],[0,5]]",
                "Output": "** 42",
                "Explanation": "** The maximum achievable sum is 42 which can be achieved by Alice performing no operations."
            }
        ]
    },
    {
        "Title": "Distribute Elements Into Two Arrays I",
        "slug": "distribute-elements-into-two-arrays-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [2,1,3]",
                "Output": "** [2,3,1]",
                "Explanation": "** After the first 2 operations, arr1 = [2] and arr2 = [1].\nIn the 3rd operation, as the last element of arr1 is greater than the last element of arr2 (2 > 1), append nums[3] to arr1.\nAfter 3 operations, arr1 = [2,3] and arr2 = [1].\nHence, the array result formed by concatenation is [2,3,1]."
            },
            {
                "Input": "** nums = [5,4,3,8]",
                "Output": "** [5,3,4,8]",
                "Explanation": "** After the first 2 operations, arr1 = [5] and arr2 = [4].\nIn the 3rd operation, as the last element of arr1 is greater than the last element of arr2 (5 > 4), append nums[3] to arr1, hence arr1 becomes [5,3].\nIn the 4th operation, as the last element of arr2 is greater than the last element of arr1 (4 > 3), append nums[4] to arr2, hence arr2 becomes [4,8].\nAfter 4 operations, arr1 = [5,3] and arr2 = [4,8].\nHence, the array result formed by concatenation is [5,3,4,8]."
            }
        ]
    },
    {
        "Title": "Count Submatrices with Top-Left Element and Sum Less Than k",
        "slug": "count-submatrices-with-top-left-element-and-sum-less-than-k",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[7,6,3],[6,6,1]], k = 18",
                "Output": "** 4",
                "Explanation": "** There are only 4 submatrices, shown in the image above, that contain the top-left element of grid, and have a sum less than or equal to 18."
            },
            {
                "Input": "** grid = [[7,2,9],[1,5,0],[2,6,6]], k = 20",
                "Output": "** 6",
                "Explanation": "** There are only 6 submatrices, shown in the image above, that contain the top-left element of grid, and have a sum less than or equal to 20."
            }
        ]
    },
    {
        "Title": "Minimum Operations to Write the Letter Y on a Grid",
        "slug": "minimum-operations-to-write-the-letter-y-on-a-grid",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[1,2,2],[1,1,0],[0,1,0]]",
                "Output": "** 3",
                "Explanation": "** We can write Y on the grid by applying the changes highlighted in blue in the image above. After the operations, all cells that belong to Y, denoted in bold, have the same value of 1 while those that do not belong to Y are equal to 0.\nIt can be shown that 3 is the minimum number of operations needed to write Y on the grid."
            },
            {
                "Input": "** grid = [[0,1,0,1,0],[2,1,0,1,2],[2,2,2,0,1],[2,2,2,2,2],[2,1,2,2,2]]",
                "Output": "** 12",
                "Explanation": "** We can write Y on the grid by applying the changes highlighted in blue in the image above. After the operations, all cells that belong to Y, denoted in bold, have the same value of 0 while those that do not belong to Y are equal to 2. \nIt can be shown that 12 is the minimum number of operations needed to write Y on the grid."
            }
        ]
    },
    {
        "Title": "Distribute Elements Into Two Arrays II",
        "slug": "distribute-elements-into-two-arrays-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [2,1,3,3]",
                "Output": "** [2,3,1,3]",
                "Explanation": "** After the first 2 operations, arr1 = [2] and arr2 = [1].\nIn the 3rd operation, the number of elements greater than 3 is zero in both arrays. Also, the lengths are equal, hence, append nums[3] to arr1.\nIn the 4th operation, the number of elements greater than 3 is zero in both arrays. As the length of arr2 is lesser, hence, append nums[4] to arr2.\nAfter 4 operations, arr1 = [2,3] and arr2 = [1,3].\nHence, the array result formed by concatenation is [2,3,1,3]."
            },
            {
                "Input": "** nums = [5,14,3,1,2]",
                "Output": "** [5,3,1,2,14]",
                "Explanation": "** After the first 2 operations, arr1 = [5] and arr2 = [14].\nIn the 3rd operation, the number of elements greater than 3 is one in both arrays. Also, the lengths are equal, hence, append nums[3] to arr1.\nIn the 4th operation, the number of elements greater than 1 is greater in arr1 than arr2 (2 > 1). Hence, append nums[4] to arr1.\nIn the 5th operation, the number of elements greater than 2 is greater in arr1 than arr2 (2 > 1). Hence, append nums[5] to arr1.\nAfter 5 operations, arr1 = [5,3,1,2] and arr2 = [14].\nHence, the array result formed by concatenation is [5,3,1,2,14]."
            },
            {
                "Input": "** nums = [3,3,3,3]",
                "Output": "** [3,3,3,3]",
                "Explanation": "** At the end of 4 operations, arr1 = [3,3] and arr2 = [3,3].\nHence, the array result formed by concatenation is [3,3,3,3]."
            }
        ]
    },
    {
        "Title": "Apple Redistribution into Boxes",
        "slug": "apple-redistribution-into-boxes",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** apple = [1,3,2], capacity = [4,3,1,5,2]",
                "Output": "** 2",
                "Explanation": "** We will use boxes with capacities 4 and 5.\nIt is possible to distribute the apples as the total capacity is greater than or equal to the total number of apples."
            },
            {
                "Input": "** apple = [5,5,5], capacity = [2,4,2,7]",
                "Output": "** 4",
                "Explanation": "** We will need to use all the boxes."
            }
        ]
    },
    {
        "Title": "Maximize Happiness of Selected Children",
        "slug": "maximize-happiness-of-selected-children",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** happiness = [1,2,3], k = 2",
                "Output": "** 4",
                "Explanation": "** We can pick 2 children in the following way:\n- Pick the child with the happiness value == 3. The happiness value of the remaining children becomes [0,1].\n- Pick the child with the happiness value == 1. The happiness value of the remaining child becomes [0]. Note that the happiness value cannot become less than 0.\nThe sum of the happiness values of the selected children is 3 + 1 = 4."
            },
            {
                "Input": "** happiness = [1,1,1,1], k = 2",
                "Output": "** 1",
                "Explanation": "** We can pick 2 children in the following way:\n- Pick any child with the happiness value == 1. The happiness value of the remaining children becomes [0,0,0].\n- Pick the child with the happiness value == 0. The happiness value of the remaining child becomes [0,0].\nThe sum of the happiness values of the selected children is 1 + 0 = 1."
            },
            {
                "Input": "** happiness = [2,3,4,5], k = 1",
                "Output": "** 5",
                "Explanation": "** We can pick 1 child in the following way:\n- Pick the child with the happiness value == 5. The happiness value of the remaining children becomes [1,2,3].\nThe sum of the happiness values of the selected children is 5."
            }
        ]
    },
    {
        "Title": "Shortest Uncommon Substring in an Array",
        "slug": "shortest-uncommon-substring-in-an-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** arr = [\"cab\",\"ad\",\"bad\",\"c\"]",
                "Output": "** [\"ab\",\"\",\"ba\",\"\"]",
                "Explanation": "** We have the following:\n- For the string \"cab\", the shortest substring that does not occur in any other string is either \"ca\" or \"ab\", we choose the lexicographically smaller substring, which is \"ab\".\n- For the string \"ad\", there is no substring that does not occur in any other string.\n- For the string \"bad\", the shortest substring that does not occur in any other string is \"ba\".\n- For the string \"c\", there is no substring that does not occur in any other string."
            },
            {
                "Input": "** arr = [\"abc\",\"bcd\",\"abcd\"]",
                "Output": "** [\"\",\"\",\"abcd\"]",
                "Explanation": "** We have the following:\n- For the string \"abc\", there is no substring that does not occur in any other string.\n- For the string \"bcd\", there is no substring that does not occur in any other string.\n- For the string \"abcd\", the shortest substring that does not occur in any other string is \"abcd\"."
            }
        ]
    },
    {
        "Title": "Maximum Strength of K Disjoint Subarrays",
        "slug": "maximum-strength-of-k-disjoint-subarrays",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,3,-1,2], k = 3",
                "Output": "** 22",
                "Explanation": "** The best possible way to select 3 subarrays is: nums[0..2], nums[3..3], and nums[4..4]. The strength is (1 + 2 + 3) * 3 - (-1) * 2 + 2 * 1 = 22."
            },
            {
                "Input": "** nums = [12,-2,-2,-2,-2], k = 5",
                "Output": "** 64",
                "Explanation": "** The only possible way to select 5 disjoint subarrays is: nums[0..0], nums[1..1], nums[2..2], nums[3..3], and nums[4..4]. The strength is 12 * 5 - (-2) * 4 + (-2) * 3 - (-2) * 2 + (-2) * 1 = 64."
            },
            {
                "Input": "** nums = [-1,-2,-3], k = 1",
                "Output": "** -1",
                "Explanation": "** The best possible way to select 1 subarray is: nums[0..0]. The strength is -1."
            }
        ]
    },
    {
        "Title": "Find the Sum of Encrypted Integers",
        "slug": "find-the-sum-of-encrypted-integers",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 6",
                "Explanation": "** The encrypted elements are\u00a0`[1,2,3]`. The sum of encrypted elements is `1 + 2 + 3 == 6`."
            },
            {
                "Input": "** nums = [10,21,31]",
                "Output": "** 66",
                "Explanation": "** The encrypted elements are `[11,22,33]`. The sum of encrypted elements is `11 + 22 + 33 == 66`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 50`\n* `1 <= nums[i] <= 1000`\n\n\nSimilarQuestions: [2227]"
            }
        ]
    },
    {
        "Title": "Mark Elements on Array by Performing Queries",
        "slug": "mark-elements-on-array-by-performing-queries",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,2,1,2,3,1], queries = [[1,2],[3,3],[4,2]]",
                "Output": "** [8,3,0]",
                "Explanation": "**\n\n\nWe do the following queries on the array:\n\n\n* Mark the element at index `1`, and `2` of the smallest unmarked elements with the smallest indices if they exist, the marked elements now are `nums = [**1**,**2**,2,**1**,2,3,1]`. The sum of unmarked elements is `2 + 2 + 3 + 1 = 8`.\n* Mark the element at index `3`, since it is already marked we skip it. Then we mark `3` of the smallest unmarked elements with the smallest indices, the marked elements now are `nums = [**1**,**2**,**2**,**1**,**2**,3,**1**]`. The sum of unmarked elements is `3`.\n* Mark the element at index `4`, since it is already marked we skip it. Then we mark `2` of the smallest unmarked elements with the smallest indices if they exist, the marked elements now are `nums = [**1**,**2**,**2**,**1**,**2**,**3**,**1**]`. The sum of unmarked elements is `0`."
            },
            {
                "Input": "** nums = [1,4,2,3], queries = [[0,1]]",
                "Output": "** [7]",
                "Explanation": "**  We do one query which is mark the element at index `0` and mark the smallest element among unmarked elements. The marked elements will be `nums = [**1**,4,**2**,3]`, and the sum of unmarked elements is `4 + 3 = 7`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `m == queries.length`\n* `1 <= m <= n <= 105`\n* `1 <= nums[i] <= 105`\n* `queries[i].length == 2`\n* `0 <= indexi, ki <= n - 1`\n\n\nHints:\n    0. Use another array to keep track of marked indices.\n    1. Sort the array <code>nums</code> to be able to find the smallest unmarked elements quickly in each query."
            }
        ]
    },
    {
        "Title": "Replace Question Marks in String to Minimize Its Value",
        "slug": "replace-question-marks-in-string-to-minimize-its-value",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "**   s = \"???\"",
                "Output": "**   \"abc\"",
                "Explanation": "**  In this example, we can replace the occurrences of `'?'` to make `s` equal to `\"abc\"`.\n\n\nFor `\"abc\"`, `cost(0) = 0`, `cost(1) = 0`, and `cost(2) = 0`.\n\n\nThe value of `\"abc\"` is `0`.\n\n\nSome other modifications of `s` that have a value of `0` are `\"cba\"`, `\"abz\"`, and, `\"hey\"`.\n\n\nAmong all of them, we choose the lexicographically smallest."
            },
            {
                "Input": "**  s = \"a?a?\"",
                "Output": "**  \"abac\"",
                "Explanation": "**  In this example, the occurrences of `'?'` can be replaced to make `s` equal to `\"abac\"`.\n\n\nFor `\"abac\"`, `cost(0) = 0`, `cost(1) = 0`, `cost(2) = 1`, and `cost(3) = 0`.\n\n\nThe value of `\"abac\"` is\u00a0`1`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s[i]` is either a lowercase English letter or `'?'`.\n\n\nHints:\n    0. <p>The cost does not depend on the order of characters. If a character <code>c</code> appears <code>x</code> times, the cost is exactly <code>0 + 1 + 2 + \u2026 + (x \u2212 1) = x * (x \u2212 1) / 2</code>.</p>\n    1. <p>We know the total number of question marks; for each one, we should select the letter with the minimum frequency to replace it.</p>\n    2. <p>The letter selection can be achieved by a min-heap (or even by brute-forcing the <code>26</code> possibilities).</p>\n    3. <p>So, we know the extra letters we need to replace finally. However, we must put those letters in order from left to right so that the resulting string is the lexicographically smallest one.</p>\nSimilarQuestions: [2734]"
            }
        ]
    },
    {
        "Title": "Find the Sum of the Power of All Subsequences",
        "slug": "find-the-sum-of-the-power-of-all-subsequences",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "**   nums = [1,2,3], k = 3",
                "Output": "**   6",
                "Explanation": "**\n\n\nThere are `5` subsequences of nums with non-zero power:\n\n\n* The subsequence `[**1**,**2**,**3**]` has `2` subsequences with `sum == 3`: `[1,2,3]` and `[1,2,3]`.\n* The subsequence `[**1**,2,**3**]` has `1` subsequence with `sum == 3`: `[1,2,3]`.\n* The subsequence `[1,**2**,**3**]` has `1` subsequence with `sum == 3`: `[1,2,3]`.\n* The subsequence `[**1**,**2**,3]` has `1` subsequence with `sum == 3`: `[1,2,3]`.\n* The subsequence `[1,2,**3**]` has `1` subsequence with `sum == 3`: `[1,2,3]`.\n\n\nHence the answer is `2 + 1 + 1 + 1 + 1 = 6`."
            },
            {
                "Input": "**   nums = [2,3,3], k = 5",
                "Output": "**   4",
                "Explanation": "**\n\n\nThere are `3` subsequences of nums with non-zero power:\n\n\n* The subsequence `[**2**,**3**,**3**]` has 2 subsequences with `sum == 5`: `[2,3,3]` and `[2,3,3]`.\n* The subsequence `[**2**,3,**3**]` has 1 subsequence with `sum == 5`: `[2,3,3]`.\n* The subsequence `[**2**,**3**,3]` has 1 subsequence with `sum == 5`: `[2,3,3]`.\n\n\nHence the answer is `2 + 1 + 1 = 4`."
            },
            {
                "Input": "**   nums = [1,2,3], k = 7",
                "Output": "**   0",
                "Explanation": "**There exists no subsequence with sum `7`. Hence all subsequences of nums have `power = 0`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 100`\n* `1 <= nums[i] <= 104`\n* `1 <= k <= 100`\n\n\nHints:\n    0. If there is a subsequence of length <code>j</code> with the sum of elements <code>k</code>, it contributes <code>2<sup>n - j</sup></code> to the answer.\n    1. Let <code>dp[i][j]</code> represent the number of subsequences in the subarray <code>nums[0..i]</code> which have a sum of <code>j</code>.\n    2. We can find the <code>dp[i][k]</code> for all <code>0 <= i <= n-1</code> and multiply them with <code>2<sup>n - j</sup></code> to get final answer.\nSimilarQuestions: [1498]"
            }
        ]
    },
    {
        "Title": "Existence of a Substring in a String and Its Reverse",
        "slug": "existence-of-a-substring-in-a-string-and-its-reverse",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"leetcode\"",
                "Output": "** true",
                "Explanation": "** Substring `\"ee\"` is of length `2` which is also present in `reverse(s) == \"edocteel\"`."
            },
            {
                "Input": "** s = \"abcba\"",
                "Output": "** true",
                "Explanation": "** All of the substrings of length `2` `\"ab\"`, `\"bc\"`, `\"cb\"`, `\"ba\"` are also present in `reverse(s) == \"abcba\"`."
            },
            {
                "Input": "** s = \"abcd\"",
                "Output": "** false",
                "Explanation": "** There is no substring of length `2` in `s`, which is also present in the reverse of `s`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 100`\n* `s` consists only of lowercase English letters.\n\n\nHints:\n    0. Make a new string by reversing the string <code>s</code>.\n    1. For every substring of length <code>2</code> in <code>s</code>, check if there is a corresponding substring in the reverse of <code>s</code>."
            }
        ]
    },
    {
        "Title": "Count Substrings Starting and Ending with Given Character",
        "slug": "count-substrings-starting-and-ending-with-given-character",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"abada\", c = \"a\"",
                "Output": "** 6",
                "Explanation": "** Substrings starting and ending with `\"a\"` are: `\"**a**bada\"`, `\"**aba**da\"`, `\"**abada**\"`, `\"ab**a**da\"`, `\"ab**ada**\"`, `\"abad**a**\"`."
            },
            {
                "Input": "** s = \"zzz\", c = \"z\"",
                "Output": "** 6",
                "Explanation": "** There are a total of `6` substrings in `s` and all start and end with `\"z\"`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` and `c` consist\u00a0only of lowercase English letters.\n\n\nHints:\n    0. Count the number of characters <code>'c'</code> in string <code>s</code>, let\u2019s call it <code>m</code>.\n    1. We can select <code>2</code> numbers <code>i</code> and <code>j</code> such that <code>i <= j</code> are the start and end indices of substring. Note that <code>i</code> and <code>j</code> can be the same.\n    2. The answer is <code>m * (m + 1) / 2</code>."
            }
        ]
    },
    {
        "Title": "Minimum Deletions to Make String K-Special",
        "slug": "minimum-deletions-to-make-string-k-special",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** word = \"aabcaba\", k = 0",
                "Output": "** 3",
                "Explanation": "** We can make `word` `0`-special by deleting `2` occurrences of `\"a\"` and `1` occurrence of `\"c\"`. Therefore, `word` becomes equal to `\"baba\"` where `freq('a') == freq('b') == 2`."
            },
            {
                "Input": "** word = \"dabdcbdcdcd\", k = 2",
                "Output": "** 2",
                "Explanation": "** We can make `word` `2`-special by deleting `1` occurrence of `\"a\"` and `1` occurrence of `\"d\"`. Therefore, `word` becomes equal to \"bdcbdcdcd\" where `freq('b') == 2`, `freq('c') == 3`, and `freq('d') == 4`."
            },
            {
                "Input": "** word = \"aaabaaa\", k = 2",
                "Output": "** 1",
                "Explanation": "** We can make `word` `2`-special by deleting `1` occurrence of `\"b\"`. Therefore, `word` becomes equal to `\"aaaaaa\"` where each letter's frequency is now uniformly `6`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= word.length <= 105`\n* `0 <= k <= 105`\n* `word` consists only of lowercase English letters.\n\n\nHints:\n    0. Count the frequency of each letter.\n    1. Suppose we select several characters as the final answer, and let <code>x</code> be the character with the smallest frequency in the answer. It can be shown that out of the selected characters, the optimal solution will never delete an occurrence of character <code>x</code> to obtain the answer.\n    2. We will fix a character <code>c</code> and assume that it will be the character with the smallest frequency in the answer. Suppose its frequency is <code>x</code>.\n    3. Then, for every other character, we will count the number of occurrences that will be deleted. Suppose that the current character has <code>y</code> occurrences. <ol> <li>If y < x, we need to delete all of them.</li> <li> if y > x + k, we should delete y - x - k of such character.</li> <li> Otherwise we don\u2019t need to delete it.</li></ol>\nSimilarQuestions: [1647]"
            }
        ]
    },
    {
        "Title": "Minimum Moves to Pick K Ones",
        "slug": "minimum-moves-to-pick-k-ones",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,1,0,0,0,1,1,0,0,1], k = 3, maxChanges = 1",
                "Output": "** 3",
                "Explanation": "** Alice can pick up `3` ones in `3` moves, if Alice performs the following actions in each move when standing at `aliceIndex == 1`:\n\n\n* At the start of the game Alice picks up the one and `nums[1]` becomes `0`. `nums` becomes `[1,**1**,1,0,0,1,1,0,0,1]`.\n* Select `j == 2` and perform an action of the first type. `nums` becomes `[1,**0**,1,0,0,1,1,0,0,1]`\n* Select `x == 2` and `y == 1`, and perform an action of the second type. `nums` becomes `[1,**1**,0,0,0,1,1,0,0,1]`. As `y == aliceIndex`, Alice picks up the one and `nums` becomes\u00a0`[1,**0**,0,0,0,1,1,0,0,1]`.\n* Select `x == 0` and `y == 1`, and perform an action of the second type. `nums` becomes `[0,**1**,0,0,0,1,1,0,0,1]`. As `y == aliceIndex`, Alice picks up the one and `nums` becomes\u00a0`[0,**0**,0,0,0,1,1,0,0,1]`.\n\n\nNote that it may be possible for Alice to pick up `3` ones using some other sequence of `3` moves."
            },
            {
                "Input": "** nums = [0,0,0,0], k = 2, maxChanges = 3",
                "Output": "** 4",
                "Explanation": "** Alice can pick up `2` ones in `4` moves, if Alice performs the following actions in each move when standing at `aliceIndex == 0`:\n\n\n* Select `j == 1` and perform an action of the first type. `nums` becomes `[**0**,1,0,0]`.\n* Select `x == 1` and `y == 0`, and perform an action of the second type. `nums` becomes `[**1**,0,0,0]`. As `y == aliceIndex`, Alice picks up the one and `nums` becomes\u00a0`[**0**,0,0,0]`.\n* Select `j == 1` again and perform an action of the first type. `nums` becomes `[**0**,1,0,0]`.\n* Select `x == 1` and `y == 0` again, and perform an action of the second type. `nums` becomes `[**1**,0,0,0]`. As `y == aliceIndex`, Alice picks up the one and `nums` becomes\u00a0`[**0**,0,0,0]`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= n <= 105`\n* `0 <= nums[i] <= 1`\n* `1 <= k <= 105`\n* `0 <= maxChanges <= 105`\n* `maxChanges + sum(nums) >= k`\n\n\nHints:\n    0. Ones created using a change require <code>2</code> moves. Hence except for the immediate neighbors of the index where we move all the ones, we should try to use change operations.\n    1. For some subset of ones, it is always better to move the ones to the median position.\n    2. We only need to be concerned with the indices where <code>nums[i] == 1</code>.\nSimilarQuestions: [1151]"
            }
        ]
    },
    {
        "Title": "Maximum Length Substring With Two Occurrences",
        "slug": "maximum-length-substring-with-two-occurrences",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"bcbbbcba\"",
                "Output": "** 4",
                "Explanation": "**\n\n\nThe following substring has a length of 4 and contains at most two occurrences of each character: `\"bcbbbcba\"`."
            },
            {
                "Input": "** s = \"aaaa\"",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe following substring has a length of 2 and contains at most two occurrences of each character: `\"aaaa\"`.\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= s.length <= 100`\n* `s` consists only of lowercase English letters."
            }
        ]
    },
    {
        "Title": "Apply Operations to Make Sum of Array Greater Than or Equal to k",
        "slug": "apply-operations-to-make-sum-of-array-greater-than-or-equal-to-k",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** k = 11",
                "Output": "** 5",
                "Explanation": "**\n\n\nWe can do the following operations on the array `nums = [1]`:\n\n\n* Increase the element by `1` three times. The resulting array is `nums = [4]`.\n* Duplicate the element two times. The resulting array is `nums = [4,4,4]`.\n\n\nThe sum of the final array is `4 + 4 + 4 = 12` which is greater than or equal to `k = 11`.  \n\nThe total number of operations performed is `3 + 2 = 5`."
            },
            {
                "Input": "** k = 1",
                "Output": "** 0",
                "Explanation": "**\n\n\nThe sum of the original array is already greater than or equal to `1`, so no operations are needed.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= 105`\n\n\nHints:\n    0. It is optimal to make all the increase operations first and all the duplicate operations last.\n    1. Iterate over all possible number of increase operations that can be done and find the corresponding number of duplicate operations."
            }
        ]
    },
    {
        "Title": "Most Frequent IDs",
        "slug": "most-frequent-ids",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,3,2,1], freq = [3,2,-3,1]",
                "Output": "** [3,3,2,2]",
                "Explanation": "**\n\n\nAfter step 0, we have 3 IDs with the value of 2. So `ans[0] = 3`.  \n\nAfter step 1, we have 3 IDs with the value of 2 and 2 IDs with the value of 3. So `ans[1] = 3`.  \n\nAfter step 2, we have 2 IDs with the value of 3. So `ans[2] = 2`.  \n\nAfter step 3, we have 2 IDs with the value of 3 and 1 ID with the value of 1. So `ans[3] = 2`."
            },
            {
                "Input": "** nums = [5,5,3], freq = [2,-2,1]",
                "Output": "** [2,0,1]",
                "Explanation": "**\n\n\nAfter step 0, we have 2 IDs with the value of 5. So `ans[0] = 2`.  \n\nAfter step 1, there are no IDs. So `ans[1] = 0`.  \n\nAfter step 2, we have 1 ID with the value of 3. So `ans[2] = 1`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length == freq.length <= 105`\n* `1 <= nums[i] <= 105`\n* `-105 <= freq[i] <= 105`\n* `freq[i] != 0`\n* The input is generated such that the occurrences of an ID will not be negative in any step.\n\n\nHints:\n    0. Use an ordered set for maintaining the occurrences of each ID.\n    1. After step <code>i</code> find the occurrences of <code>nums[i]</code>.\n    2. Change the occurrences of <code>nums[i]</code> in the ordered set."
            }
        ]
    },
    {
        "Title": "Longest Common Suffix Queries",
        "slug": "longest-common-suffix-queries",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** wordsContainer = [\"abcd\",\"bcd\",\"xbcd\"], wordsQuery = [\"cd\",\"bcd\",\"xyz\"]",
                "Output": "** [1,1,1]",
                "Explanation": "**\n\n\nLet's look at each `wordsQuery[i]` separately:\n\n\n* For `wordsQuery[0] = \"cd\"`, strings from `wordsContainer` that share the longest common suffix `\"cd\"` are at indices 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3.\n* For `wordsQuery[1] = \"bcd\"`, strings from `wordsContainer` that share the longest common suffix `\"bcd\"` are at indices 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3.\n* For `wordsQuery[2] = \"xyz\"`, there is no string from `wordsContainer` that shares a common suffix. Hence the longest common suffix is `\"\"`, that is shared with strings at index 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3."
            },
            {
                "Input": "** wordsContainer = [\"abcdefgh\",\"poiuygh\",\"ghghgh\"], wordsQuery = [\"gh\",\"acbfgh\",\"acbfegh\"]",
                "Output": "** [2,0,2]",
                "Explanation": "**\n\n\nLet's look at each `wordsQuery[i]` separately:\n\n\n* For `wordsQuery[0] = \"gh\"`, strings from `wordsContainer` that share the longest common suffix `\"gh\"` are at indices 0, 1, and 2. Among these, the answer is the string at index 2 because it has the shortest length of 6.\n* For `wordsQuery[1] = \"acbfgh\"`, only the string at index 0 shares the longest common suffix `\"fgh\"`. Hence it is the answer, even though the string at index 2 is shorter.\n* For `wordsQuery[2] = \"acbfegh\"`, strings from `wordsContainer` that share the longest common suffix `\"gh\"` are at indices 0, 1, and 2. Among these, the answer is the string at index 2 because it has the shortest length of 6.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= wordsContainer.length, wordsQuery.length <= 104`\n* `1 <= wordsContainer[i].length <= 5 * 103`\n* `1 <= wordsQuery[i].length <= 5 * 103`\n* `wordsContainer[i]` consists only of lowercase English letters.\n* `wordsQuery[i]` consists only of lowercase English letters.\n* Sum of `wordsContainer[i].length` is at most `5 * 105`.\n* Sum of `wordsQuery[i].length` is at most `5 * 105`.\n\n\nHints:\n    0. If we reverse the strings, the problem changes to finding the longest common prefix.\n    1. Build a Trie, each node is a letter and only saves the best word\u2019s index in each node, based on the criteria.\nSimilarQuestions: [14, 3043]"
            }
        ]
    },
    {
        "Title": "Shortest Subarray With OR at Least K I",
        "slug": "shortest-subarray-with-or-at-least-k-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,3], k = 2",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe subarray `[3]` has `OR` value of `3`. Hence, we return `1`."
            },
            {
                "Input": "** nums = [2,1,8], k = 10",
                "Output": "** 3",
                "Explanation": "**\n\n\nThe subarray `[2,1,8]` has `OR` value of `11`. Hence, we return `3`."
            },
            {
                "Input": "** nums = [1,2], k = 0",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe subarray `[1]` has `OR` value of `1`. Hence, we return `1`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 50`\n* `0 <= nums[i] <= 50`\n* `0 <= k < 64`\n\n\nSimilarQuestions: [209, 862]"
            }
        ]
    },
    {
        "Title": "Minimum Levels to Gain More Points",
        "slug": "minimum-levels-to-gain-more-points",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** possible = [1,0,1,0]",
                "Output": "** 1",
                "Explanation": "**\n\n\nLet's look at all the levels that Alice can play up to:\n\n\n* If Alice plays only level 0 and Bob plays the rest of the levels, Alice has 1 point, while Bob has -1 + 1 - 1 = -1 point.\n* If Alice plays till level 1 and Bob plays the rest of the levels, Alice has 1 - 1 = 0 points, while Bob has 1 - 1 = 0 points.\n* If Alice plays till level 2 and Bob plays the rest of the levels, Alice has 1 - 1 + 1 = 1 point, while Bob has -1 point.\n\n\nAlice must play a minimum of 1 level to gain more points."
            },
            {
                "Input": "** possible = [1,1,1,1,1]",
                "Output": "** 3",
                "Explanation": "**\n\n\nLet's look at all the levels that Alice can play up to:\n\n\n* If Alice plays only level 0 and Bob plays the rest of the levels, Alice has 1 point, while Bob has 4 points.\n* If Alice plays till level 1 and Bob plays the rest of the levels, Alice has 2 points, while Bob has 3 points.\n* If Alice plays till level 2 and Bob plays the rest of the levels, Alice has 3 points, while Bob has 2 points.\n* If Alice plays till level 3 and Bob plays the rest of the levels, Alice has 4 points, while Bob has 1 point.\n\n\nAlice must play a minimum of 3 levels to gain more points."
            },
            {
                "Input": "** possible = [0,0]",
                "Output": "** -1",
                "Explanation": "**\n\n\nThe only possible way is for both players to play 1 level each. Alice plays level 0 and loses 1 point. Bob plays level 1 and loses 1 point. As both players have equal points, Alice can't gain more points than Bob.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= n == possible.length <= 105`\n* `possible[i]` is either `0` or `1`.\n\n\nHints:\n    0. Change all <code>0</code> in possible array into <code>-1</code>.\n    1. We need to find the shortest non-empty prefix of the new possible array such that the sum of elements in it is strictly larger than the remaining part.\nSimilarQuestions: [2244]"
            }
        ]
    },
    {
        "Title": "Shortest Subarray With OR at Least K II",
        "slug": "shortest-subarray-with-or-at-least-k-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,2,3], k = 2",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe subarray `[3]` has `OR` value of `3`. Hence, we return `1`."
            },
            {
                "Input": "** nums = [2,1,8], k = 10",
                "Output": "** 3",
                "Explanation": "**\n\n\nThe subarray `[2,1,8]` has `OR` value of `11`. Hence, we return `3`."
            },
            {
                "Input": "** nums = [1,2], k = 0",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe subarray `[1]` has `OR` value of `1`. Hence, we return `1`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 2 * 105`\n* `0 <= nums[i] <= 109`\n* `0 <= k <= 109`\n\n\nHints:\n    0. For each <code>nums[i]</code>, we can maintain each subarray\u2019s bitwise <code>OR</code> result ending with it.\n    1. The property of bitwise <code>OR</code> is that it never unsets any bits and only sets new bits\n    2. So the number of different results for each <code>nums[i]</code> is at most the number of bits 32.\nSimilarQuestions: [325, 862]"
            }
        ]
    },
    {
        "Title": "Find the Sum of Subsequence Powers",
        "slug": "find-the-sum-of-subsequence-powers",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,3,4], k = 3",
                "Output": "** 4",
                "Explanation": "**\n\n\nThere are 4 subsequences in `nums` which have length 3: `[1,2,3]`, `[1,3,4]`, `[1,2,4]`, and `[2,3,4]`. The sum of powers is `|2 - 3| + |3 - 4| + |2 - 1| + |3 - 4| = 4`."
            },
            {
                "Input": "** nums = [2,2], k = 2",
                "Output": "** 0",
                "Explanation": "**\n\n\nThe only subsequence in `nums` which has length 2 is\u00a0`[2,2]`. The sum of powers is `|2 - 2| = 0`."
            },
            {
                "Input": "** nums = [4,3,-1], k = 2",
                "Output": "** 10",
                "Explanation": "**\n\n\nThere are 3 subsequences in `nums` which have length 2: `[4,3]`, `[4,-1]`, and `[3,-1]`. The sum of powers is `|4 - 3| + |4 - (-1)| + |3 - (-1)| = 10`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= n == nums.length <= 50`\n* `-108 <= nums[i] <= 108`\n* `2 <= k <= n`\n\n\nHints:\n    0. Sort <code>nums</code>.\n    1. There are at most <code>n<sup>2</sup></code> distinct differences.\n    2. For a particular difference <code>d</code>, let <code>dp[len][i][j]</code> be the number of subsequences of length <code>len</code> in the subarray <code>nums[0..i]</code> where the last element picked was at index <code>j</code>.\n    3. For each index, we can check if it can be picked if <code>nums[i] - nums[j] <= d</code>.\nSimilarQuestions: [1498, 1755]"
            }
        ]
    },
    {
        "Title": "Harshad Number",
        "slug": "harshad-number",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** x = 18",
                "Output": "** 9",
                "Explanation": "**\n\n\nThe sum of digits of `x` is `9`. `18` is divisible by `9`. So `18` is a Harshad number and the answer is `9`."
            },
            {
                "Input": "** x = 23",
                "Output": "** -1",
                "Explanation": "**\n\n\nThe sum of digits of `x` is `5`. `23` is not divisible by `5`. So `23` is not a Harshad number and the answer is `-1`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= x <= 100`"
            }
        ]
    },
    {
        "Title": "Water Bottles II",
        "slug": "water-bottles-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** numBottles = 13, numExchange = 6",
                "Output": "** 15",
                "Explanation": "** The table above shows the number of full water bottles, empty water bottles, the value of numExchange, and the number of bottles drunk."
            },
            {
                "Input": "** numBottles = 10, numExchange = 3",
                "Output": "** 13",
                "Explanation": "** The table above shows the number of full water bottles, empty water bottles, the value of numExchange, and the number of bottles drunk."
            }
        ]
    },
    {
        "Title": "Count Alternating Subarrays",
        "slug": "count-alternating-subarrays",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [0,1,1,1]",
                "Output": "** 5",
                "Explanation": "**\n\n\nThe following subarrays are alternating: `[0]`, `[1]`, `[1]`, `[1]`, and `[0,1]`."
            },
            {
                "Input": "** nums = [1,0,1,0]",
                "Output": "** 10",
                "Explanation": "**\n\n\nEvery subarray of the array is alternating. There are 10 possible subarrays that we can choose.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `nums[i]` is either `0` or `1`.\n\n\nHints:\n    0. Try using dynamic programming.\n    1. Let <code>dp[i]</code> be the number of alternating subarrays ending at index <code>i</code>.\n    2. The final answer is the sum of <code>dp[i]</code> over all  indices <code>i</code> from <code>0</code> to <code>n - 1</code>."
            }
        ]
    },
    {
        "Title": "Minimize Manhattan Distances",
        "slug": "minimize-manhattan-distances",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** points = [[3,10],[5,15],[10,2],[4,4]]",
                "Output": "** 12",
                "Explanation": "**\n\n\nThe maximum distance after removing each point is the following:\n\n\n* After removing the 0th point the maximum distance is between points (5, 15) and (10, 2), which is `|5 - 10| + |15 - 2| = 18`.\n* After removing the 1st point the maximum distance is between points (3, 10) and (10, 2), which is `|3 - 10| + |10 - 2| = 15`.\n* After removing the 2nd point the maximum distance is between points (5, 15) and (4, 4), which is `|5 - 4| + |15 - 4| = 12`.\n* After removing the 3rd point the maximum distance is between points (5, 15) and (10, 2), which is `|5 - 10| + |15 - 2| = 18`.\n\n\n12 is the minimum possible maximum distance between any two points after removing exactly one point."
            },
            {
                "Input": "** points = [[1,1],[1,1],[1,1]]",
                "Output": "** 0",
                "Explanation": "**\n\n\nRemoving any of the points results in the maximum distance between any two points of 0.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `3 <= points.length <= 105`\n* `points[i].length == 2`\n* `1 <= points[i][0], points[i][1] <= 108`\n\n\nHints:\n    0. Notice that the Manhattan distance between two points <code>[x<sub>i</sub>, y<sub>i</sub>]</code> and <code>[x<sub>j</sub>, y<sub>j</sub>] is <code> max({x<sub>i</sub> - x<sub>j</sub> + y<sub>i</sub> - y<sub>j</sub>, x<sub>i</sub> - x<sub>j</sub> - y<sub>i</sub> + y<sub>j</sub>, - x<sub>i</sub> + x<sub>j</sub> + y<sub>i</sub> - y<sub>j</sub>, - x<sub>i</sub> + x<sub>j</sub> - y<sub>i</sub> + y<sub>j</sub>})</code></code>.\n    1. If you replace points as <code>[x<sub>i</sub> - y<sub>i</sub>, x<sub>i</sub> + y<sub>i</sub>]</code> then the Manhattan distance is <code>max(max(x<sub>i</sub>) - min(x<sub>i</sub>), max(y<sub>i</sub>) - min(y<sub>i</sub>))</code> over all <code>i</code>.\n    2. After those observations, the problem just becomes a simulation. Create multiset of points <code>[x<sub>i</sub> - y<sub>i</sub>, x<sub>i</sub> + y<sub>i</sub>]</code>, you can iterate on a point you might remove and get the maximum Manhattan distance over all other points."
            }
        ]
    },
    {
        "Title": "Longest Strictly Increasing or Strictly Decreasing Subarray",
        "slug": "longest-strictly-increasing-or-strictly-decreasing-subarray",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,4,3,3,2]",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe strictly increasing subarrays of `nums` are `[1]`, `[2]`, `[3]`, `[3]`, `[4]`, and `[1,4]`.\n\n\nThe strictly decreasing subarrays of `nums` are `[1]`, `[2]`, `[3]`, `[3]`, `[4]`, `[3,2]`, and `[4,3]`.\n\n\nHence, we return `2`."
            },
            {
                "Input": "** nums = [3,3,3,3]",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe strictly increasing subarrays of `nums` are `[3]`, `[3]`, `[3]`, and `[3]`.\n\n\nThe strictly decreasing subarrays of `nums` are `[3]`, `[3]`, `[3]`, and `[3]`.\n\n\nHence, we return `1`."
            },
            {
                "Input": "** nums = [3,2,1]",
                "Output": "** 3",
                "Explanation": "**\n\n\nThe strictly increasing subarrays of `nums` are `[3]`, `[2]`, and `[1]`.\n\n\nThe strictly decreasing subarrays of `nums` are `[3]`, `[2]`, `[1]`, `[3,2]`, `[2,1]`, and `[3,2,1]`.\n\n\nHence, we return `3`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 50`\n* `1 <= nums[i] <= 50`"
            }
        ]
    },
    {
        "Title": "Lexicographically Smallest String After Operations With Constraint",
        "slug": "lexicographically-smallest-string-after-operations-with-constraint",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"zbbz\", k = 3",
                "Output": "** \"aaaz\"",
                "Explanation": "**\n\n\nChange `s` to `\"aaaz\"`. The distance between `\"zbbz\"` and `\"aaaz\"` is equal to `k = 3`."
            },
            {
                "Input": "** s = \"xaxcd\", k = 4",
                "Output": "** \"aawcd\"",
                "Explanation": "**\n\n\nThe distance between \"xaxcd\" and \"aawcd\" is equal to k = 4."
            },
            {
                "Input": "** s = \"lol\", k = 0",
                "Output": "** \"lol\"",
                "Explanation": "**\n\n\nIt's impossible to change any character as `k = 0`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 100`\n* `0 <= k <= 2000`\n* `s` consists only of lowercase English letters.\n\n\nHints:\n    0. The problem can be approached greedily.\n    1. For each index in order from <code>0</code> to <code>n - 1</code>, we try all letters from <code>'a'</code> to <code>'z'</code>, selecting the first one as long as the current total distance accumulated is not larger than <code>k</code>.\nSimilarQuestions: [2734]"
            }
        ]
    },
    {
        "Title": "Minimum Operations to Make Median of Array Equal to K",
        "slug": "minimum-operations-to-make-median-of-array-equal-to-k",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [2,5,6,8,5], k = 4",
                "Output": "** 2",
                "Explanation": "**\n\n\nWe can subtract one from `nums[1]` and `nums[4]` to obtain `[2, 4, 6, 8, 4]`. The median of the resulting array is equal to `k`."
            },
            {
                "Input": "** nums = [2,5,6,8,5], k = 7",
                "Output": "** 3",
                "Explanation": "**\n\n\nWe can add one to `nums[1]` twice and add one to `nums[2]` once to obtain `[2, 7, 7, 8, 5]`."
            },
            {
                "Input": "** nums = [1,2,3,4,5,6], k = 4",
                "Output": "** 0",
                "Explanation": "**\n\n\nThe median of the array is already equal to `k`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 2 * 105`\n* `1 <= nums[i] <= 109`\n* `1 <= k <= 109`\n\n\nHints:\n    0. Sort <code>nums</code> in non-descending order.\n    1. For all the smaller values on the left side of the median, change them to <code>k</code> if they are larger than <code>k</code>.\n    2. For all the larger values on the right side of the median, change them to <code>k</code> if they are smaller than <code>k</code>.\nSimilarQuestions: [295, 480]"
            }
        ]
    },
    {
        "Title": "Minimum Cost Walk in Weighted Graph",
        "slug": "minimum-cost-walk-in-weighted-graph",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** n = 5, edges = [[0,1,7],[1,3,7],[1,2,1]], query = [[0,3],[3,4]]",
                "Output": "** [1,-1]",
                "Explanation": "**\n\n\n![](https://assets.leetcode.com/uploads/2024/01/31/q4_example1-1.png)\nTo achieve the cost of 1 in the first query, we need to move on the following edges: `0->1` (weight 7), `1->2` (weight 1), `2->1` (weight 1), `1->3` (weight 7).\n\n\nIn the second query, there is no walk between nodes 3 and 4, so the answer is -1."
            },
            {
                "Input": "** n = 3, edges = [[0,2,7],[0,1,15],[1,2,6],[1,2,1]], query = [[1,2]]",
                "Output": "** [0]",
                "Explanation": "**\n\n\n![](https://assets.leetcode.com/uploads/2024/01/31/q4_example2e.png)\nTo achieve the cost of 0 in the first query, we need to move on the following edges: `1->2` (weight 1), `2->1` (weight 6), `1->2` (weight 1).\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= n <= 105`\n* `0 <= edges.length <= 105`\n* `edges[i].length == 3`\n* `0 <= ui, vi <= n - 1`\n* `ui != vi`\n* `0 <= wi <= 105`\n* `1 <= query.length <= 105`\n* `query[i].length == 2`\n* `0 <= si, ti <= n - 1`\n* `si !=\u00a0ti`\n\n\nHints:\n    0. The intended solution uses Disjoint Set Union.\n    1. Notice that, if <code>u</code> and <code>v</code> are not connected then the answer is <code>-1</code>, otherwise we can use all the edges from the connected component where both belong to."
            }
        ]
    },
    {
        "Title": "Score of a String",
        "slug": "score-of-a-string",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"hello\"",
                "Output": "** 13",
                "Explanation": "**\n\n\nThe **ASCII** values of the characters in `s` are: `'h' = 104`, `'e' = 101`, `'l' = 108`, `'o' = 111`. So, the score of `s` would be `|104 - 101| + |101 - 108| + |108 - 108| + |108 - 111| = 3 + 7 + 0 + 3 = 13`."
            },
            {
                "Input": "** s = \"zaz\"",
                "Output": "** 50",
                "Explanation": "**\n\n\nThe **ASCII** values of the characters in `s` are: `'z' = 122`, `'a' = 97`. So, the score of `s` would be `|122 - 97| + |97 - 122| = 25 + 25 = 50`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= s.length <= 100`\n* `s` consists only of lowercase English letters."
            }
        ]
    },
    {
        "Title": "Minimum Time to Visit Disappearing Nodes",
        "slug": "minimum-time-to-visit-disappearing-nodes",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 2, edges = [[0,1,1]], disappear = [1,1]",
                "Output": "** [0,-1]",
                "Explanation": "**\n\n\nExactly when we reach node 1, it disappears.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 5 * 104`\n* `0 <= edges.length <= 105`\n* `edges[i] == [ui, vi, lengthi]`\n* `0 <= ui, vi <= n - 1`\n* `1 <= lengthi <= 105`\n* `disappear.length == n`\n* `1 <= disappear[i] <= 105`"
            }
        ]
    },
    {
        "Title": "Find the Number of Subarrays Where Boundary Elements Are Maximum",
        "slug": "find-the-number-of-subarrays-where-boundary-elements-are-maximum",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,4,3,3,2]",
                "Output": "** 6",
                "Explanation": "**\n\n\nThere are 6 subarrays which have the first and the last elements equal to the largest element of the subarray:\n\n\n* subarray `[**1**,4,3,3,2]`, with its largest element 1. The first element is 1 and the last element is also 1.\n* subarray `[1,**4**,3,3,2]`, with its largest element 4. The first element is 4 and the last element is also 4.\n* subarray `[1,4,**3**,3,2]`, with its largest element 3. The first element is 3 and the last element is also 3.\n* subarray `[1,4,3,**3**,2]`, with its largest element 3. The first element is 3 and the last element is also 3.\n* subarray `[1,4,3,3,**2**]`, with its largest element 2. The first element is 2 and the last element is also 2.\n* subarray `[1,4,**3,3**,2]`, with its largest element 3. The first element is 3 and the last element is also 3.\n\n\nHence, we return 6."
            },
            {
                "Input": "** nums = [3,3,3]",
                "Output": "** 6",
                "Explanation": "**\n\n\nThere are 6 subarrays which have the first and the last elements equal to the largest element of the subarray:\n\n\n* subarray `[**3**,3,3]`, with its largest element 3. The first element is 3 and the last element is also 3.\n* subarray `[3,**3**,3]`, with its largest element 3. The first element is 3 and the last element is also 3.\n* subarray `[3,3,**3**]`, with its largest element 3. The first element is 3 and the last element is also 3.\n* subarray `[**3,3**,3]`, with its largest element 3. The first element is 3 and the last element is also 3.\n* subarray `[3,**3,3**]`, with its largest element 3. The first element is 3 and the last element is also 3.\n* subarray `[**3,3,3**]`, with its largest element 3. The first element is 3 and the last element is also 3.\n\n\nHence, we return 6."
            },
            {
                "Input": "** nums = [1]",
                "Output": "** 1",
                "Explanation": "**\n\n\nThere is a single subarray of `nums` which is `[**1**]`, with its largest element 1. The first element is 1 and the last element is also 1.\n\n\nHence, we return 1.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\nHints:\n    0. For each element <code>nums[i]</code>, we can count the number of valid subarrays ending with it.\n    1. For each index <code>i</code>, find the nearest index <code>j</code> on its left <code>(j < i)</code> such that <code>nums[j] < nums[i]</code>. This can be done via a monotonic stack.\n    2. For each index <code>i</code>, find the number of indices <code>k</code> in the window <code>[j + 1, i]</code> such that <code>nums[k] == nums[i]</code>, this is the number of the valid subarrays ending with <code>nums[i]</code>. This can be done by sliding window.\n    3. Sum the answer of all the indices <code>i</code> to get the final result.\n    4. Is it possible to use DSU as an alternate solution?\nSimilarQuestions: [795, 2444, 2962]"
            }
        ]
    },
    {
        "Title": "Latest Time You Can Obtain After Replacing Characters",
        "slug": "latest-time-you-can-obtain-after-replacing-characters",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"1?:?4\"",
                "Output": "** \"11:54\"",
                "Explanation": "** The latest 12-hour format time we can achieve by replacing `\"?\"` characters is `\"11:54\"`."
            },
            {
                "Input": "** s = \"0?:5?\"",
                "Output": "** \"09:59\"",
                "Explanation": "** The latest 12-hour format time we can achieve by replacing `\"?\"` characters is `\"09:59\"`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `s.length == 5`\n* `s[2]` is equal to the character `\":\"`.\n* All characters except `s[2]` are digits or `\"?\"` characters.\n* The input is generated such that there is **at least** one time between `\"00:00\"` and `\"11:59\"` that you can obtain after replacing the `\"?\"` characters.\n\n\nHints:\n    0. Try using a brute force approach.\n    1. Iterate over all possible times that can be generated from the string and find the latest one.\nSimilarQuestions: [1736]"
            }
        ]
    },
    {
        "Title": "Maximum Prime Difference",
        "slug": "maximum-prime-difference",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [4,2,9,5,3]",
                "Output": "** 3",
                "Explanation": "** `nums[1]`, `nums[3]`, and `nums[4]` are prime. So the answer is `|4 - 1| = 3`."
            },
            {
                "Input": "** nums = [4,8,2,8]",
                "Output": "** 0",
                "Explanation": "** `nums[2]` is prime. Because there is just one prime number, the answer is `|2 - 2| = 0`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 3 * 105`\n* `1 <= nums[i] <= 100`\n* The input is generated such that the number of prime numbers in the `nums` is at least one.\n\n\nHints:\n    0. Find all prime numbers in the <code>nums</code>.\n    1. Find the first and the last prime number in the <code>nums</code>."
            }
        ]
    },
    {
        "Title": "Kth Smallest Amount With Single Denomination Combination",
        "slug": "kth-smallest-amount-with-single-denomination-combination",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** coins = [3,6,9], k = 3",
                "Output": "**  9",
                "Explanation": "** The given coins can make the following amounts:  \n\nCoin 3 produces multiples of 3: 3, 6, 9, 12, 15, etc.  \n\nCoin 6 produces multiples of 6: 6, 12, 18, 24, etc.  \n\nCoin 9 produces multiples of 9: 9, 18, 27, 36, etc.  \n\nAll of the coins combined produce: 3, 6, **9**, 12, 15, etc."
            },
            {
                "Input": "** coins = [5,2], k = 7",
                "Output": "** 12",
                "Explanation": "** The given coins can make the following amounts:  \n\nCoin 5 produces multiples of 5: 5, 10, 15, 20, etc.  \n\nCoin 2 produces multiples of 2: 2, 4, 6, 8, 10, 12, etc.  \n\nAll of the coins combined produce: 2, 4, 5, 6, 8, 10, **12**, 14, 15, etc.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= coins.length <= 15`\n* `1 <= coins[i] <= 25`\n* `1 <= k <= 2 * 109`\n* `coins` contains pairwise distinct integers.\n\n\nHints:\n    0. Binary search the answer <code>x</code>.\n    1. Use the inclusion-exclusion principle to count the number of distinct amounts that can be made up to <code>x</code>.\nSimilarQuestions: [668]"
            }
        ]
    },
    {
        "Title": "Count the Number of Special Characters I",
        "slug": "count-the-number-of-special-characters-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** word = \"aaAbcBC\"",
                "Output": "** 3",
                "Explanation": "**\n\n\nThe special characters in `word` are `'a'`, `'b'`, and `'c'`."
            },
            {
                "Input": "** word = \"abc\"",
                "Output": "** 0",
                "Explanation": "**\n\n\nNo character in `word` appears in uppercase."
            },
            {
                "Input": "** word = \"abBCab\"",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe only special character in `word` is `'b'`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= word.length <= 50`\n* `word` consists of only lowercase and uppercase English letters.\n\n\nSimilarQuestions: [520]"
            }
        ]
    },
    {
        "Title": "Count the Number of Special Characters II",
        "slug": "count-the-number-of-special-characters-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** word = \"aaAbcBC\"",
                "Output": "** 3",
                "Explanation": "**\n\n\nThe special characters are `'a'`, `'b'`, and `'c'`."
            },
            {
                "Input": "** word = \"abc\"",
                "Output": "** 0",
                "Explanation": "**\n\n\nThere are no special characters in `word`."
            },
            {
                "Input": "** word = \"AbBCab\"",
                "Output": "** 0",
                "Explanation": "**\n\n\nThere are no special characters in `word`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= word.length <= 2 * 105`\n* `word` consists of only lowercase and uppercase English letters.\n\n\nSimilarQuestions: [520]"
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Satisfy Conditions",
        "slug": "minimum-number-of-operations-to-satisfy-conditions",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** grid = [[1,0,2],[1,0,2]]",
                "Output": "** 0",
                "Explanation": "**\n\n\n**![](https://assets.leetcode.com/uploads/2024/04/15/examplechanged.png)**\n\n\nAll the cells in the matrix already satisfy the properties."
            },
            {
                "Input": "** grid = [[1,1,1],[0,0,0]]",
                "Output": "** 3",
                "Explanation": "**\n\n\n**![](https://assets.leetcode.com/uploads/2024/03/27/example21.png)**\n\n\nThe matrix becomes `[[1,0,1],[1,0,1]]` which satisfies the properties, by doing these 3 operations:\n\n\n* Change `grid[1][0]` to 1.\n* Change `grid[0][1]` to 0.\n* Change `grid[1][2]` to 1."
            },
            {
                "Input": "** grid = [[1],[2],[3]]",
                "Output": "** 2",
                "Explanation": "**\n\n\n![](https://assets.leetcode.com/uploads/2024/03/31/changed.png)\n\n\nThere is a single column. We can change the value to 1 in each cell using 2 operations.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n, m <= 1000`\n* `0 <= grid[i][j] <= 9`\n\n\nSimilarQuestions: [135, 575, 2144]"
            }
        ]
    },
    {
        "Title": "Make a Square with the Same Color",
        "slug": "make-a-square-with-the-same-color",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** grid = [[\"B\",\"W\",\"B\"],[\"B\",\"W\",\"W\"],[\"B\",\"W\",\"B\"]]",
                "Output": "** true",
                "Explanation": "**\n\n\nIt can be done by changing the color of the `grid[0][2]`."
            },
            {
                "Input": "** grid = [[\"B\",\"W\",\"B\"],[\"W\",\"B\",\"W\"],[\"B\",\"W\",\"B\"]]",
                "Output": "** false",
                "Explanation": "**\n\n\nIt cannot be done by changing at most one cell."
            },
            {
                "Input": "** grid = [[\"B\",\"W\",\"B\"],[\"B\",\"W\",\"W\"],[\"B\",\"W\",\"W\"]]",
                "Output": "** true",
                "Explanation": "**\n\n\nThe `grid` already contains a `2 x 2` square of the same color.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `grid.length == 3`\n* `grid[i].length == 3`\n* `grid[i][j]` is either `'W'` or `'B'`."
            }
        ]
    },
    {
        "Title": "Find All Possible Stable Binary Arrays I",
        "slug": "find-all-possible-stable-binary-arrays-i",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** zero = 1, one = 1, limit = 2",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe two possible stable binary arrays are `[1,0]` and `[0,1]`, as both arrays have a single 0 and a single 1, and no subarray has a length greater than 2."
            },
            {
                "Input": "** zero = 1, one = 2, limit = 1",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe only possible stable binary array is `[1,0,1]`.\n\n\nNote that the binary arrays `[1,1,0]` and `[0,1,1]` have subarrays of length 2 with identical elements, hence, they are not stable."
            },
            {
                "Input": "** zero = 3, one = 3, limit = 2",
                "Output": "** 14",
                "Explanation": "**\n\n\nAll the possible stable binary arrays are `[0,0,1,0,1,1]`, `[0,0,1,1,0,1]`, `[0,1,0,0,1,1]`, `[0,1,0,1,0,1]`, `[0,1,0,1,1,0]`, `[0,1,1,0,0,1]`, `[0,1,1,0,1,0]`, `[1,0,0,1,0,1]`, `[1,0,0,1,1,0]`, `[1,0,1,0,0,1]`, `[1,0,1,0,1,0]`, `[1,0,1,1,0,0]`, `[1,1,0,0,1,0]`, and `[1,1,0,1,0,0]`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= zero, one, limit <= 200`\n\n\nHints:\n    0. Let <code>dp[a][b][c = 0/1][d]</code> be the number of stable arrays with exactly <code>a</code> 0s, <code>b</code> 1s and consecutive <code>d</code> value of <code>c</code>\u2019s at the end.\n    1. Try each case by appending a 0/1 at last to get the inductions.\nSimilarQuestions: [525, 930]"
            }
        ]
    },
    {
        "Title": "Find All Possible Stable Binary Arrays II",
        "slug": "find-all-possible-stable-binary-arrays-ii",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** zero = 1, one = 1, limit = 2",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe two possible stable binary arrays are `[1,0]` and `[0,1]`."
            },
            {
                "Input": "** zero = 1, one = 2, limit = 1",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe only possible stable binary array is `[1,0,1]`."
            },
            {
                "Input": "** zero = 3, one = 3, limit = 2",
                "Output": "** 14",
                "Explanation": "**\n\n\nAll the possible stable binary arrays are `[0,0,1,0,1,1]`, `[0,0,1,1,0,1]`, `[0,1,0,0,1,1]`, `[0,1,0,1,0,1]`, `[0,1,0,1,1,0]`, `[0,1,1,0,0,1]`, `[0,1,1,0,1,0]`, `[1,0,0,1,0,1]`, `[1,0,0,1,1,0]`, `[1,0,1,0,0,1]`, `[1,0,1,0,1,0]`, `[1,0,1,1,0,0]`, `[1,1,0,0,1,0]`, and `[1,1,0,1,0,0]`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= zero, one, limit <= 1000`\n\n\nHints:\n    0. Let <code>dp[x][y][z = 0/1]</code> be the number of stable arrays with exactly <code>x</code> zeros, <code>y</code> ones, and the last element is <code>z</code>. (0 or 1).\r\n<code>dp[x][y][0] + dp[x][y][1]</code> is the answer for given <code>(x, y)</code>.\n    1. If we have already placed <code>x</code> 1 and <code>y</code> 0, if we place a group of <code>k</code> 0, the number of ways is <code>dp[x-k][y][1]</code>. We can place a group with size <code>i</code>, where <code>i</code> varies from 1 to <code>min(limit, zero - x)</code>.\r\nSimilarly, we can solve by placing a group of ones.\n    2. Speed up the calculation using prefix arrays to store the sum of <code>dp</code> states.\nSimilarQuestions: [525, 930]"
            }
        ]
    },
    {
        "Title": "Find the Integer Added to Array I",
        "slug": "find-the-integer-added-to-array-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums1 = [2,6,4], nums2 = [9,7,5]",
                "Output": "** 3",
                "Explanation": "**\n\n\nThe integer added to each element of `nums1` is 3."
            },
            {
                "Input": "** nums1 = [10], nums2 = [5]",
                "Output": "** -5",
                "Explanation": "**\n\n\nThe integer added to each element of `nums1` is -5."
            },
            {
                "Input": "** nums1 = [1,1,1,1], nums2 = [1,1,1,1]",
                "Output": "** 0",
                "Explanation": "**\n\n\nThe integer added to each element of `nums1` is 0.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums1.length == nums2.length <= 100`\n* `0 <= nums1[i], nums2[i] <= 1000`\n* The test cases are generated in a way that there is an integer `x` such that `nums1` can become equal to `nums2` by adding `x` to each element of `nums1`.\n\n\nHints:\n    0. Notice that, after sorting both arrays, there should be a one-to-one correspondence between every element.\n    1. Thus <code>x = min(nums2) - min(nums1)</code>."
            }
        ]
    },
    {
        "Title": "Find the Integer Added to Array II",
        "slug": "find-the-integer-added-to-array-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums1 = [4,20,16,12,8], nums2 = [14,18,10]",
                "Output": "** -2",
                "Explanation": "**\n\n\nAfter removing elements at indices `[0,4]` and adding -2, `nums1` becomes `[18,14,10]`."
            },
            {
                "Input": "** nums1 = [3,5,5,3], nums2 = [7,7]",
                "Output": "** 2",
                "Explanation": "**\n\n\nAfter removing elements at indices `[0,3]` and adding 2, `nums1` becomes `[7,7]`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `3 <= nums1.length <= 200`\n* `nums2.length == nums1.length - 2`\n* `0 <= nums1[i], nums2[i] <= 1000`\n* The test cases are generated in a way that there is an integer `x` such that `nums1` can become equal to `nums2` by removing two elements and adding `x` to each element of `nums1`.\n\n\nHints:\n    0. Try all possibilities to remove 2 elements from <code>nums1</code>.\n    1. <code>x</code> should be equal to <code>min(nums2) - min(nums1)</code>, check it naively."
            }
        ]
    },
    {
        "Title": "Minimum Array End",
        "slug": "minimum-array-end",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** n = 3, x = 4",
                "Output": "** 6",
                "Explanation": "**\n\n\n`nums` can be `[4,5,6]` and its last element is 6."
            },
            {
                "Input": "** n = 2, x = 7",
                "Output": "** 15",
                "Explanation": "**\n\n\n`nums` can be `[7,15]` and its last element is 15.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n, x <= 108`\n\n\nHints:\n    0. Each element of the array should be obtained by \u201cmerging\u201d <code>x</code> and <code>v</code> where <code>v = 0, 1, 2, \u2026(n - 1)</code>.\n    1. To merge <code>x</code> with another number <code>v</code>, keep the set bits of <code>x</code> untouched, for all the other bits, fill the set bits of <code>v</code> from right to left in order one by one.\n    2. So the final answer is the \u201cmerge\u201d of <code>x</code> and <code>n - 1</code>."
            }
        ]
    },
    {
        "Title": "Find the Median of the Uniqueness Array",
        "slug": "find-the-median-of-the-uniqueness-array",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe uniqueness array of `nums` is `[distinct(nums[0..0]), distinct(nums[1..1]), distinct(nums[2..2]), distinct(nums[0..1]), distinct(nums[1..2]), distinct(nums[0..2])]` which is equal to `[1, 1, 1, 2, 2, 3]`. The uniqueness array has a median of 1. Therefore, the answer is 1."
            },
            {
                "Input": "** nums = [3,4,3,4,5]",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe uniqueness array of `nums` is `[1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3]`. The uniqueness array has a median of 2. Therefore, the answer is 2."
            },
            {
                "Input": "** nums = [4,3,5,4]",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe uniqueness array of `nums` is `[1, 1, 1, 1, 2, 2, 2, 3, 3, 3]`. The uniqueness array has a median of 2. Therefore, the answer is 2.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n\n\nHints:\n    0. Binary search over the answer.\n    1. For a given <code>x</code>, you need to check if <code>x</code> is the median, to the left of the median, or to the right of the median. You can do that by counting the number of sub-arrays <code>nums[i\u2026j]</code> such that <code>distinct(num[i\u2026j]) <= x</code>.\n    2. Use the sliding window to solve the counting problem in the hint above.\nSimilarQuestions: [719, 2262]"
            }
        ]
    },
    {
        "Title": "Valid Word",
        "slug": "valid-word",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** word = \"234Adas\"",
                "Output": "** true",
                "Explanation": "**\n\n\nThis word satisfies the conditions."
            },
            {
                "Input": "** word = \"b3\"",
                "Output": "** false",
                "Explanation": "**\n\n\nThe length of this word is fewer than 3, and does not have a vowel."
            },
            {
                "Input": "** word = \"a3$e\"",
                "Output": "** false",
                "Explanation": "**\n\n\nThis word contains a `'$'` character and does not have a consonant.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= word.length <= 20`\n* `word` consists of English uppercase and lowercase letters, digits, `'@'`, `'#'`, and `'$'`."
            }
        ]
    },
    {
        "Title": "Minimum Number of Operations to Make Word K-Periodic",
        "slug": "minimum-number-of-operations-to-make-word-k-periodic",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** word = \"leetcodeleet\", k = 4",
                "Output": "** 1",
                "Explanation": "**\n\n\nWe can obtain a 4-periodic string by picking i = 4 and j = 0. After this operation, word becomes equal to \"leetleetleet\"."
            },
            {
                "Input": "** word = \"leetcoleet\", k = 2",
                "Output": "** 3",
                "Explanation": "**\n\n\nWe can obtain a 2-periodic string by applying the operations in the table below.\n\n\n\n\n| i | j | word |\n| --- | --- | --- |\n| 0 | 2 | etetcoleet |\n| 4 | 0 | etetetleet |\n| 6 | 0 | etetetetet |\n\n\n\n\n\u00a0\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == word.length <= 105`\n* `1 <= k <= word.length`\n* `k` divides `word.length`.\n* `word` consists only of lowercase English letters.\n\n\nHints:\n    0. Calculate the frequency of each substring of length <code>k</code> that starts at an index that is divisible by <code>k</code>.\n    1. The period of the final string will be the substring with the highest frequency.\nSimilarQuestions: [1668]"
            }
        ]
    },
    {
        "Title": "Minimum Length of Anagram Concatenation",
        "slug": "minimum-length-of-anagram-concatenation",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"abba\"",
                "Output": "** 2",
                "Explanation": "**\n\n\nOne possible string `t` could be `\"ba\"`."
            },
            {
                "Input": "** s = \"cdef\"",
                "Output": "** 4",
                "Explanation": "**\n\n\nOne possible string `t` could be `\"cdef\"`, notice that `t` can be equal to `s`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` consist only of lowercase English letters.\n\n\nHints:\n    0. The answer should be a divisor of <code>s.length</code>.\n    1. Check each candidate naively."
            }
        ]
    },
    {
        "Title": "Minimum Cost to Equalize Array",
        "slug": "minimum-cost-to-equalize-array",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [4,1], cost1 = 5, cost2 = 2",
                "Output": "** 15",
                "Explanation": "** \n\n\nThe following operations can be performed to make the values equal:\n\n\n* Increase `nums[1]` by 1 for a cost of 5. `nums` becomes `[4,2]`.\n* Increase `nums[1]` by 1 for a cost of 5. `nums` becomes `[4,3]`.\n* Increase `nums[1]` by 1 for a cost of 5. `nums` becomes `[4,4]`.\n\n\nThe total cost is 15."
            },
            {
                "Input": "** nums = [2,3,3,3,5], cost1 = 2, cost2 = 1",
                "Output": "** 6",
                "Explanation": "** \n\n\nThe following operations can be performed to make the values equal:\n\n\n* Increase `nums[0]` and `nums[1]` by 1 for a cost of 1. `nums` becomes `[3,4,3,3,5]`.\n* Increase `nums[0]` and `nums[2]` by 1 for a cost of 1. `nums` becomes `[4,4,4,3,5]`.\n* Increase `nums[0]` and `nums[3]` by 1 for a cost of 1. `nums` becomes `[5,4,4,4,5]`.\n* Increase `nums[1]` and `nums[2]` by 1 for a cost of 1. `nums` becomes `[5,5,5,4,5]`.\n* Increase `nums[3]` by 1 for a cost of 2. `nums` becomes `[5,5,5,5,5]`.\n\n\nThe total cost is 6."
            },
            {
                "Input": "** nums = [3,5,3], cost1 = 1, cost2 = 3",
                "Output": "** 4",
                "Explanation": "**\n\n\nThe following operations can be performed to make the values equal:\n\n\n* Increase `nums[0]` by 1 for a cost of 1. `nums` becomes `[4,5,3]`.\n* Increase `nums[0]` by 1 for a cost of 1. `nums` becomes `[5,5,3]`.\n* Increase `nums[2]` by 1 for a cost of 1. `nums` becomes `[5,5,4]`.\n* Increase `nums[2]` by 1 for a cost of 1. `nums` becomes `[5,5,5]`.\n\n\nThe total cost is 4.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 106`\n* `1 <= cost1 <= 106`\n* `1 <= cost2 <= 106`\n\n\nHints:\n    0. How can you determine the minimum cost if you know the maximum value in the array once all values are made equal?\n    1. If <code>cost2 > cost1 * 2</code>, we should just use <code>cost1</code> to change all the values to the maximum one.\n    2. Otherwise, it's optimal to choose the smallest two values and use <code>cost2</code> to increase both of them.\n    3. Since the maximum value is known, calculate the required increases to equalize all values, instead of naively simulating the operations.\n    4. There are not a lot of candidates for the maximum; we can try all of them and choose which uses the minimum number of operations."
            }
        ]
    },
    {
        "Title": "Check if Grid Satisfies Conditions",
        "slug": "check-if-grid-satisfies-conditions",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** grid = [[1,0,2],[1,0,2]]",
                "Output": "** true",
                "Explanation": "**\n\n\n**![](https://assets.leetcode.com/uploads/2024/04/15/examplechanged.png)**\n\n\nAll the cells in the grid satisfy the conditions."
            },
            {
                "Input": "** grid = [[1,1,1],[0,0,0]]",
                "Output": "** false",
                "Explanation": "**\n\n\n**![](https://assets.leetcode.com/uploads/2024/03/27/example21.png)**\n\n\nAll cells in the first row are equal."
            },
            {
                "Input": "** grid = [[1],[2],[3]]",
                "Output": "** false",
                "Explanation": "**\n\n\n![](https://assets.leetcode.com/uploads/2024/03/31/changed.png)\n\n\nCells in the first column have different values.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n, m <= 10`\n* `0 <= grid[i][j] <= 9`\n\n\nHints:\n    0. Check if each column has same value in each cell.\n    1. If the previous condition is satisfied, we can simply check the first cells in adjacent columns.\nSimilarQuestions: [135, 575, 2144]"
            }
        ]
    },
    {
        "Title": "Maximum Points Inside the Square",
        "slug": "maximum-points-inside-the-square",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** points = [[1,1],[-1,-1],[2,-2]], s = \"ccd\"",
                "Output": "** 0",
                "Explanation": "**\n\n\nIt's impossible to make any valid squares centered at the origin such that it covers only one point among `points[0]` and `points[1]`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length, points.length <= 105`\n* `points[i].length == 2`\n* `-109 <= points[i][0], points[i][1] <= 109`\n* `s.length == points.length`\n* `points` consists of distinct coordinates.\n* `s` consists only of lowercase English letters.\n\n\nHints:\n    0. The smallest edge length of a square to include point <code>(x, y)</code> is <code>max(abs(x), abs(y)) * 2</code>.\n    1. Sort the points by <code>max(abs(x), abs(y))</code> and try each edge length, check the included point tags."
            }
        ]
    },
    {
        "Title": "Minimum Substring Partition of Equal Character Frequency",
        "slug": "minimum-substring-partition-of-equal-character-frequency",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"fabccddg\"",
                "Output": "** 3",
                "Explanation": "**\n\n\nWe can partition the string `s` into 3 substrings in one of the following ways: `(\"fab, \"ccdd\", \"g\")`, or `(\"fabc\", \"cd\", \"dg\")`."
            },
            {
                "Input": "** s = \"abababaccddb\"",
                "Output": "** 2",
                "Explanation": "**\n\n\nWe can partition the string `s` into 2 substrings like so: `(\"abab\", \"abaccddb\")`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 1000`\n* `s` consists only of English lowercase letters.\n\n\nHints:\n    0. Let <code>dp[i]</code> be the minimum number of partitions for the prefix ending at index <code>i + 1</code>.\n    1. <code>dp[i]</code> can be calculated as the <code>min(dp[j])</code> over all <code>j</code> such that <code>j < i</code> and <code>word[j+1\u2026i]</code> is valid.\nSimilarQuestions: [1043, 2767]"
            }
        ]
    },
    {
        "Title": "Find Products of Elements of Big Array",
        "slug": "find-products-of-elements-of-big-array",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** queries = [[1,3,7]]",
                "Output": "** [4]",
                "Explanation": "**\n\n\nThere is one query.\n\n\n`big_nums[1..3] = [2,1,2]`. The product of them is 4. The remainder of 4 under 7 is 4."
            },
            {
                "Input": "** queries = [[2,5,3],[7,7,4]]",
                "Output": "** [2,2]",
                "Explanation": "**\n\n\nThere are two queries.\n\n\nFirst query: `big_nums[2..5] = [1,2,4,1]`. The product of them is 8. The remainder of 8 under 3 is 2.\n\n\nSecond query: `big_nums[7] = 2`. The remainder of 2 under 4 is 2.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= queries.length <= 500`\n* `queries[i].length == 3`\n* `0 <= queries[i][0] <= queries[i][1] <= 1015`\n* `1 <= queries[i][2] <= 105`\n\n\nHints:\n    0. Find a way to calculate <code>f(n, i)</code> which is the total number of numbers in <code>[1, n]</code> when the <code>i<sup>th</sup></code> bit is set in <code>O(log(n))</code> time.\n    1. Use binary search to find the last number for each query (and there might be one \u201cincomplete\u201d number for the query).\n    2. Use a similar way to find the product (we only need to save the sum of exponents of power of <code>2</code>)."
            }
        ]
    },
    {
        "Title": "Permutation Difference between Two Strings",
        "slug": "permutation-difference-between-two-strings",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"abc\", t = \"bac\"",
                "Output": "** 2",
                "Explanation": "**\n\n\nFor `s = \"abc\"` and `t = \"bac\"`, the permutation difference of `s` and `t` is equal to the sum of:\n\n\n* The absolute difference between the index of the occurrence of `\"a\"` in `s` and the index of the occurrence of `\"a\"` in `t`.\n* The absolute difference between the index of the occurrence of `\"b\"` in `s` and the index of the occurrence of `\"b\"` in `t`.\n* The absolute difference between the index of the occurrence of `\"c\"` in `s` and the index of the occurrence of `\"c\"` in `t`.\n\n\nThat is, the permutation difference between `s` and `t` is equal to `|0 - 1| + |2 - 2| + |1 - 0| = 2`."
            },
            {
                "Input": "** s = \"abcde\", t = \"edbac\"",
                "Output": "** 12",
                "Explanation": "** The permutation difference between `s` and `t` is equal to `|0 - 3| + |1 - 2| + |2 - 4| + |3 - 1| + |4 - 0| = 12`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 26`\n* Each character occurs at most once in `s`.\n* `t` is a permutation of `s`.\n* `s` consists only of lowercase English letters.\n\n\nSimilarQuestions: [389]"
            }
        ]
    },
    {
        "Title": "Taking Maximum Energy From the Mystic Dungeon",
        "slug": "taking-maximum-energy-from-the-mystic-dungeon",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "**  energy = [5,2,-10,-5,1], k = 3",
                "Output": "** 3",
                "Explanation": "** We can gain a total energy of 3 by starting from magician 1 absorbing 2 + 1 = 3."
            },
            {
                "Input": "** energy = [-2,-3,-1], k = 2",
                "Output": "** -1",
                "Explanation": "** We can gain a total energy of -1 by starting from magician 2.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= energy.length <= 105`\n* `-1000 <= energy[i] <= 1000`\n* `1 <= k <= energy.length - 1`\n\n\n\u00a0\n\n\n\u200b\u200b\u200b\u200b\u200b\u200bHints:\n    0. Let <code>dp[i]</code> denote the energy we gain starting from index <code>i</code>.\n    1. We can notice, that <code> dp[i] = dp[i + k] + energy[i]</code>."
            }
        ]
    },
    {
        "Title": "Find the Minimum Cost Array Permutation",
        "slug": "find-the-minimum-cost-array-permutation",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,0,2]",
                "Output": "** [0,1,2]",
                "Explanation": "**\n\n\n**![](https://assets.leetcode.com/uploads/2024/04/04/example0gif.gif)**\n\n\nThe lexicographically smallest permutation with minimum cost is `[0,1,2]`. The cost of this permutation is `|0 - 0| + |1 - 2| + |2 - 1| = 2`."
            },
            {
                "Input": "** nums = [0,2,1]",
                "Output": "** [0,2,1]",
                "Explanation": "**\n\n\n**![](https://assets.leetcode.com/uploads/2024/04/04/example1gif.gif)**\n\n\nThe lexicographically smallest permutation with minimum cost is `[0,2,1]`. The cost of this permutation is `|0 - 1| + |2 - 2| + |1 - 0| = 2`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= n == nums.length <= 14`\n* `nums` is a permutation of `[0, 1, 2, ..., n - 1]`.\n\n\nHints:\n    0. The score function is cyclic, so we can always set <code>perm[0] = 0</code> for the smallest lexical order.\n    1. It\u2019s similar to the Traveling Salesman Problem. Use Dynamic Programming.\n    2. Use a bitmask to track which elements have been assigned to <code>perm</code>.\nSimilarQuestions: [847, 943]"
            }
        ]
    },
    {
        "Title": "Special Array I",
        "slug": "special-array-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1]",
                "Output": "** true",
                "Explanation": "**\n\n\nThere is only one element. So the answer is `true`."
            },
            {
                "Input": "** nums = [2,1,4]",
                "Output": "** true",
                "Explanation": "**\n\n\nThere is only two pairs: `(2,1)` and `(1,4)`, and both of them contain numbers with different parity. So the answer is `true`."
            },
            {
                "Input": "** nums = [4,3,1,6]",
                "Output": "** false",
                "Explanation": "**\n\n\n`nums[1]` and `nums[2]` are both odd. So the answer is `false`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 100`"
            }
        ]
    },
    {
        "Title": "Special Array II",
        "slug": "special-array-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [3,4,1,2,6], queries = [[0,4]]",
                "Output": "** [false]",
                "Explanation": "**\n\n\nThe subarray is `[3,4,1,2,6]`. 2 and 6 are both even."
            },
            {
                "Input": "** nums = [4,3,1,6], queries = [[0,2],[2,3]]",
                "Output": "** [false,true]",
                "Explanation": "**\n\n\n1. The subarray is `[4,3,1]`. 3 and 1 are both odd. So the answer to this query is `false`.\n2. The subarray is `[1,6]`. There is only one pair: `(1,6)` and it contains numbers with different parity. So the answer to this query is `true`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n* `1 <= queries.length <= 105`\n* `queries[i].length == 2`\n* `0 <= queries[i][0] <= queries[i][1] <= nums.length - 1`\n\n\nHints:\n    0. Try to split the array into some non-intersected continuous special subarrays.\n    1. For each query check that the first and the last elements of that query are in the same subarray or not."
            }
        ]
    },
    {
        "Title": "Sum of Digit Differences of All Pairs",
        "slug": "sum-of-digit-differences-of-all-pairs",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [13,23,12]",
                "Output": "** 4",
                "Explanation": "**  \n\nWe have the following:  \n\n- The digit difference between **1**3 and **2**3 is 1.  \n\n- The digit difference between 1**3** and 1**2** is 1.  \n\n- The digit difference between **23** and **12** is 2.  \n\nSo the total sum of digit differences between all pairs of integers is `1 + 1 + 2 = 4`."
            },
            {
                "Input": "** nums = [10,10,10,10]",
                "Output": "** 0",
                "Explanation": "**  \n\nAll the integers in the array are the same. So the total sum of digit differences between all pairs of integers will be 0.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 105`\n* `1 <= nums[i] < 109`\n* All integers in `nums` have the same number of digits.\n\n\nHints:\n    0. You can solve the problem for digits that are on the same position separately, and then sum up all the answers.\n    1. For each position, count the number of occurences of each digit from 0 to 9 that appear on that position.\n    2. Let <code>c</code> be the number of occurences of a digit on a position, that will contribute with <code>c * (n - c)</code> to the final answer, where <code>n</code> is the number of integers in <code>nums</code>.\nSimilarQuestions: [477]"
            }
        ]
    },
    {
        "Title": "Find Number of Ways to Reach the K-th Stair",
        "slug": "find-number-of-ways-to-reach-the-k-th-stair",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** k = 0",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe 2 possible ways of reaching stair 0 are:\n\n\n* Alice starts at stair 1.\n\t+ Using an operation of the first type, she goes down 1 stair to reach stair 0.\n* Alice starts at stair 1.\n\t+ Using an operation of the first type, she goes down 1 stair to reach stair 0.\n\t+ Using an operation of the second type, she goes up 20 stairs to reach stair 1.\n\t+ Using an operation of the first type, she goes down 1 stair to reach stair 0."
            },
            {
                "Input": "** k = 1",
                "Output": "** 4",
                "Explanation": "**\n\n\nThe 4 possible ways of reaching stair 1 are:\n\n\n* Alice starts at stair 1. Alice is at stair 1.\n* Alice starts at stair 1.\n\t+ Using an operation of the first type, she goes down 1 stair to reach stair 0.\n\t+ Using an operation of the second type, she goes up 20 stairs to reach stair 1.\n* Alice starts at stair 1.\n\t+ Using an operation of the second type, she goes up 20 stairs to reach stair 2.\n\t+ Using an operation of the first type, she goes down 1 stair to reach stair 1.\n* Alice starts at stair 1.\n\t+ Using an operation of the first type, she goes down 1 stair to reach stair 0.\n\t+ Using an operation of the second type, she goes up 20 stairs to reach stair 1.\n\t+ Using an operation of the first type, she goes down 1 stair to reach stair 0.\n\t+ Using an operation of the second type, she goes up 21 stairs to reach stair 2.\n\t+ Using an operation of the first type, she goes down 1 stair to reach stair 1.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= k <= 109`\n\n\nHints:\n    0. On using <code>x</code> operations of the second type and <code>y</code> operations of the first type, the stair <code>2<sup>x + 1</sup> - y</code> is reached.\n    1. Since first operations cannot be consecutive, there are exactly <code>x + 1</code> positions (before and after each power of 2) to perform the second operation.\n    2. Using combinatorics, we have <sup>x + 1</sup>C<sub>y</sub> number of ways to select the positions of second operations.\nSimilarQuestions: [70, 746]"
            }
        ]
    },
    {
        "Title": "Find the XOR of Numbers Which Appear Twice",
        "slug": "find-the-xor-of-numbers-which-appear-twice",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums = [1,2,1,3]",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe only number that appears twice in\u00a0`nums`\u00a0is 1."
            },
            {
                "Input": "** nums = [1,2,3]",
                "Output": "** 0",
                "Explanation": "**\n\n\nNo number appears twice in\u00a0`nums`."
            },
            {
                "Input": "** nums = [1,2,2,1]",
                "Output": "** 3",
                "Explanation": "**\n\n\nNumbers 1 and 2 appeared twice. `1 XOR 2 == 3`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 50`\n* `1 <= nums[i] <= 50`\n* Each number in `nums` appears either once or twice.\n\n\nSimilarQuestions: [136, 137, 260]"
            }
        ]
    },
    {
        "Title": "Find Occurrences of an Element in an Array",
        "slug": "find-occurrences-of-an-element-in-an-array",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums = [1,3,1,7], queries = [1,3,2,4], x = 1",
                "Output": "** [0,-1,2,-1]",
                "Explanation": "**\n\n\n* For the 1st query, the first occurrence of 1 is at index 0.\n* For the 2nd query, there are only two occurrences of 1 in `nums`, so the answer is -1.\n* For the 3rd query, the second occurrence of 1 is at index 2.\n* For the 4th query, there are only two occurrences of 1 in `nums`, so the answer is -1."
            },
            {
                "Input": "** nums = [1,2,3], queries = [10], x = 5",
                "Output": "** [-1]",
                "Explanation": "**\n\n\n* For the 1st query, 5 doesn't exist in `nums`, so the answer is -1.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length, queries.length <= 105`\n* `1 <= queries[i] <= 105`\n* `1 <= nums[i], x <= 104`"
            }
        ]
    },
    {
        "Title": "Find the Number of Distinct Colors Among the Balls",
        "slug": "find-the-number-of-distinct-colors-among-the-balls",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** limit = 4, queries = [[1,4],[2,5],[1,3],[3,4]]",
                "Output": "** [1,2,2,3]",
                "Explanation": "**\n\n\n![](https://assets.leetcode.com/uploads/2024/04/17/ezgifcom-crop.gif)\n\n\n* After query 0, ball 1 has color 4.\n* After query 1, ball 1 has color 4, and ball 2 has color 5.\n* After query 2, ball 1 has color 3, and ball 2 has color 5.\n* After query 3, ball 1 has color 3, ball 2 has color 5, and ball 3 has color 4."
            },
            {
                "Input": "** limit = 4, queries = [[0,1],[1,2],[2,2],[3,4],[4,5]]",
                "Output": "** [1,2,2,3,4]",
                "Explanation": "**\n\n\n**![](https://assets.leetcode.com/uploads/2024/04/17/ezgifcom-crop2.gif)**\n\n\n* After query 0, ball 0 has color 1.\n* After query 1, ball 0 has color 1, and ball 1 has color 2.\n* After query 2, ball 0 has color 1, and balls 1 and 2 have color 2.\n* After query 3, ball 0 has color 1, balls 1 and 2 have color 2, and ball 3 has color 4.\n* After query 4, ball 0 has color 1, balls 1 and 2 have color 2, ball 3 has color 4, and ball 4 has color 5.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= limit <= 109`\n* `1 <= n == queries.length <= 105`\n* `queries[i].length == 2`\n* `0 <= queries[i][0] <= limit`\n* `1 <= queries[i][1] <= 109`\n\n\nSimilarQuestions: [1742]"
            }
        ]
    },
    {
        "Title": "Block Placement Queries",
        "slug": "block-placement-queries",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** queries = [[1,2],[2,3,3],[2,3,1],[2,2,2]]",
                "Output": "** [false,true,true]",
                "Explanation": "**\n\n\n**![](https://assets.leetcode.com/uploads/2024/04/22/example0block.png)**\n\n\nFor query 0, place an obstacle at `x = 2`. A block of size at most 2 can be placed before `x = 3`."
            },
            {
                "Input": "** queries = [[1,7],[2,7,6],[1,2],[2,7,5],[2,7,6]]",
                "Output": "** [true,true,false]",
                "Explanation": "**\n\n\n**![](https://assets.leetcode.com/uploads/2024/04/22/example1block.png)**\n\n\n* Place an obstacle at `x = 7` for query 0. A block of size at most 7 can be placed before `x = 7`.\n* Place an obstacle at `x = 2` for query 2. Now, a block of size at most 5 can be placed before `x = 7`, and a block of size at most 2 before `x = 2`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= queries.length <= 15 * 104`\n* `2 <= queries[i].length <= 3`\n* `1 <= queries[i][0] <= 2`\n* `1 <= x, sz <= min(5 * 104, 3 * queries.length)`\n* The input is generated such that for queries of type 1, no obstacle exists at distance `x` when the query is asked.\n* The input is generated such that there is at least one query of type 2.\n\n\nHints:\n    0. Let <code>d[x]</code> be the distance of the next obstacle after <code>x</code>.\n    1. For each query of type 2, we just need to check if <code>max(d[0], d[1], d[2], \u2026d[x - sz]) > sz</code>.\n    2. Use segment tree to maintain <code>d[x]</code>.\nSimilarQuestions: [1739]"
            }
        ]
    },
    {
        "Title": "Find the Number of Good Pairs I",
        "slug": "find-the-number-of-good-pairs-i",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** nums1 = [1,3,4], nums2 = [1,3,4], k = 1",
                "Output": "** 5",
                "Explanation": "**\n\n\nThe 5 good pairs are `(0, 0)`, `(1, 0)`, `(1, 1)`, `(2, 0)`, and `(2, 2)`."
            },
            {
                "Input": "** nums1 = [1,2,4,12], nums2 = [2,4], k = 3",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe 2 good pairs are `(3, 0)` and `(3, 1)`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n, m <= 50`\n* `1 <= nums1[i], nums2[j] <= 50`\n* `1 <= k <= 50`\n\n\nSimilarQuestions: [2183]"
            }
        ]
    },
    {
        "Title": "String Compression III",
        "slug": "string-compression-iii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** word = \"abcde\"",
                "Output": "** \"1a1b1c1d1e\"",
                "Explanation": "**\n\n\nInitially, `comp = \"\"`. Apply the operation 5 times, choosing `\"a\"`, `\"b\"`, `\"c\"`, `\"d\"`, and `\"e\"` as the prefix in each operation.\n\n\nFor each prefix, append `\"1\"` followed by the character to `comp`."
            },
            {
                "Input": "** word = \"aaaaaaaaaaaaaabb\"",
                "Output": "** \"9a5a2b\"",
                "Explanation": "**\n\n\nInitially, `comp = \"\"`. Apply the operation 3 times, choosing `\"aaaaaaaaa\"`, `\"aaaaa\"`, and `\"bb\"` as the prefix in each operation.\n\n\n* For prefix `\"aaaaaaaaa\"`, append `\"9\"` followed by `\"a\"` to `comp`.\n* For prefix `\"aaaaa\"`, append `\"5\"` followed by `\"a\"` to `comp`.\n* For prefix `\"bb\"`, append `\"2\"` followed by `\"b\"` to `comp`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= word.length <= 2 * 105`\n* `word` consists only of lowercase English letters.\n\n\nSimilarQuestions: [443, 1531]"
            }
        ]
    },
    {
        "Title": "Find the Number of Good Pairs II",
        "slug": "find-the-number-of-good-pairs-ii",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** nums1 = [1,3,4], nums2 = [1,3,4], k = 1",
                "Output": "** 5",
                "Explanation": "**\n\n\nThe 5 good pairs are `(0, 0)`, `(1, 0)`, `(1, 1)`, `(2, 0)`, and `(2, 2)`."
            },
            {
                "Input": "** nums1 = [1,2,4,12], nums2 = [2,4], k = 3",
                "Output": "** 2",
                "Explanation": "**\n\n\nThe 2 good pairs are `(3, 0)` and `(3, 1)`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n, m <= 105`\n* `1 <= nums1[i], nums2[j] <= 106`\n* `1 <= k <= 103`\n\n\nHints:\n    0. Let <code>f[v]</code> be the number of occurrences of <code>v/k</code> in nums2.\n    1. For each value <code>v</code> in nums1, enumerating all its factors <code>d</code> (in <code>sqrt(v)</code> time) and sum up all the <code>f[d]</code> to get the final answer.\n    2. It is also possible to improve the complexity from <code>v * sqrt(v)</code> to <code>v * log(v)</code> - How?\nSimilarQuestions: [2183]"
            }
        ]
    },
    {
        "Title": "Maximum Sum of Subsequence With Non-adjacent Elements",
        "slug": "maximum-sum-of-subsequence-with-non-adjacent-elements",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [3,5,9], queries = [[1,-2],[0,-3]]",
                "Output": "** 21",
                "Explanation": "**  \n\nAfter the 1st query, `nums = [3,-2,9]` and the maximum sum of a subsequence with non-adjacent elements is `3 + 9 = 12`.  \n\nAfter the 2nd query, `nums = [-3,-2,9]` and the maximum sum of a subsequence with non-adjacent elements is 9."
            },
            {
                "Input": "** nums = [0,-1], queries = [[0,-5]]",
                "Output": "** 0",
                "Explanation": "**  \n\nAfter the 1st query, `nums = [-5,-1]` and the maximum sum of a subsequence with non-adjacent elements is 0 (choosing an empty subsequence).\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 5 * 104`\n* `-105 <= nums[i] <= 105`\n* `1 <= queries.length <= 5 * 104`\n* `queries[i] == [posi, xi]`\n* `0 <= posi <= nums.length - 1`\n* `-105 <= xi <= 105`\n\n\nHints:\n    0. Can you solve each query in <code>O(nums.length)</code> with dynamic programming?\n    1. In order to optimize, we will use segment tree where each node contains the maximum value of (front element has been chosen or not, back element has been chosen or not)."
            }
        ]
    },
    {
        "Title": "Minimum Number of Chairs in a Waiting Room",
        "slug": "minimum-number-of-chairs-in-a-waiting-room",
        "description": null,
        "difficulty": "Easy",
        "examples": [
            {
                "Input": "** s = \"EEEEEEE\"",
                "Output": "** 7",
                "Explanation": "**\n\n\nAfter each second, a person enters the waiting room and no person leaves it. Therefore, a minimum of 7 chairs is needed."
            },
            {
                "Input": "** s = \"ELELEEL\"",
                "Output": "** 2",
                "Explanation": "**\n\n\nLet's consider that there are 2 chairs in the waiting room. The table below shows the state of the waiting room at each second.\n\n\n\n\n\n| Second | Event | People in the Waiting Room | Available Chairs |\n| --- | --- | --- | --- |\n| 0 | Enter | 1 | 1 |\n| 1 | Leave | 0 | 2 |\n| 2 | Enter | 1 | 1 |\n| 3 | Leave | 0 | 2 |\n| 4 | Enter | 1 | 1 |\n| 5 | Enter | 2 | 0 |\n| 6 | Leave | 1 | 1 |"
            },
            {
                "Input": "** s = \"ELEELEELLL\"",
                "Output": "** 3",
                "Explanation": "**\n\n\nLet's consider that there are 3 chairs in the waiting room. The table below shows the state of the waiting room at each second.\n\n\n\n\n\n| Second | Event | People in the Waiting Room | Available Chairs |\n| --- | --- | --- | --- |\n| 0 | Enter | 1 | 2 |\n| 1 | Leave | 0 | 3 |\n| 2 | Enter | 1 | 2 |\n| 3 | Enter | 2 | 1 |\n| 4 | Leave | 1 | 2 |\n| 5 | Enter | 2 | 1 |\n| 6 | Enter | 3 | 0 |\n| 7 | Leave | 2 | 1 |\n| 8 | Leave | 1 | 2 |\n| 9 | Leave | 0 | 3 |\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 50`\n* `s` consists only of the letters `'E'` and `'L'`.\n* `s` represents a valid sequence of entries and exits.\n\n\nHints:\n    0. Iterate from left to right over the string and keep track of the number of people in the waiting room using a variable that you will increment on every occurrence of \u2018E\u2019 and decrement on every occurrence of \u2018L\u2019.\n    1. The answer is the maximum number of people in the waiting room at any instance.\nSimilarQuestions: [1446]"
            }
        ]
    },
    {
        "Title": "Count Days Without Meetings",
        "slug": "count-days-without-meetings",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** days = 10, meetings = [[5,7],[1,3],[9,10]]",
                "Output": "** 2",
                "Explanation": "**\n\n\nThere is no meeting scheduled on the 4th and 8th days."
            },
            {
                "Input": "** days = 5, meetings = [[2,4],[1,3]]",
                "Output": "** 1",
                "Explanation": "**\n\n\nThere is no meeting scheduled on the 5th day."
            },
            {
                "Input": "** days = 6, meetings = [[1,6]]",
                "Output": "** 0",
                "Explanation": "**\n\n\nMeetings are scheduled for all working days.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= days <= 109`\n* `1 <= meetings.length <= 105`\n* `meetings[i].length == 2`\n* `1 <= meetings[i][0] <= meetings[i][1] <= days`\n\n\nHints:\n    0. Merge the overlapping meetings and sort the new meetings timings.\n    1. Return the sum of difference between the end time of a meeting and the start time of the next meeting for all adjacent pairs.\nSimilarQuestions: [56]"
            }
        ]
    },
    {
        "Title": "Lexicographically Minimum String After Removing Stars",
        "slug": "lexicographically-minimum-string-after-removing-stars",
        "description": null,
        "difficulty": "Medium",
        "examples": [
            {
                "Input": "** s = \"aaba\\*\"",
                "Output": "** \"aab\"",
                "Explanation": "**\n\n\nWe should delete one of the `'a'` characters with `'*'`. If we choose `s[3]`, `s` becomes the lexicographically smallest."
            },
            {
                "Input": "** s = \"abc\"",
                "Output": "** \"abc\"",
                "Explanation": "**\n\n\nThere is no `'*'` in the string.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` consists only of lowercase English letters and `'*'`.\n* The input is generated such that it is possible to delete all `'*'` characters."
            }
        ]
    },
    {
        "Title": "Find Subarray With Bitwise AND Closest to K",
        "slug": "find-subarray-with-bitwise-and-closest-to-k",
        "description": null,
        "difficulty": "Hard",
        "examples": [
            {
                "Input": "** nums = [1,2,4,5], k = 3",
                "Output": "** 1",
                "Explanation": "**\n\n\nThe subarray `nums[2..3]` has `AND` value 4, which gives the minimum absolute difference `|3 - 4| = 1`."
            },
            {
                "Input": "** nums = [1,2,1,2], k = 2",
                "Output": "** 0",
                "Explanation": "**\n\n\nThe subarray `nums[1..1]` has `AND` value 2, which gives the minimum absolute difference `|2 - 2| = 0`."
            },
            {
                "Input": "** nums = [1], k = 10",
                "Output": "** 9",
                "Explanation": "**\n\n\nThere is a single subarray with `AND` value 1, which gives the minimum absolute difference `|10 - 1| = 9`.\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* `1 <= k <= 109`\n\n\nHints:\n    0. Let <code>dp[i]</code> be the set of all the bitwise <code>AND</code> of all the subarrays ending at index <code>i</code>.\n    1. We start from <code>nums[i]</code>, taking the bitwise <code>AND</code> result by including elements one by one from <code>i</code> towards left. Notice that only set bits can become unset on adding a element, and unset bits never become set again.\n    2. Hence <code>dp[i]</code> can contain at most 30 elements.\nSimilarQuestions: [3117]"
            }
        ]
    }
]